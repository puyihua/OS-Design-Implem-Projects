!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
APP_SEG	mmu.h	101;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -gdwarf-2 -Wa,-divide -Iinclude $(XFLAGS)$/;"	m
ASSERT	lapic.c	26;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	139;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	29;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	30;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	199;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CALL_GATE	mmu.h	62;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	146;"	d	file:
CMOS_RETURN	lapic.c	147;"	d	file:
CMOS_STATA	lapic.c	186;"	d	file:
CMOS_STATB	lapic.c	187;"	d	file:
CMOS_UIP	lapic.c	188;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	38;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	237;"	d	file:
CONV	lapic.c	244;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_OSXFSR	mmu.h	42;"	d
CR4_OSXMMEXCPT	mmu.h	43;"	d
CR4_PAE	mmu.h	41;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	140;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	193;"	d	file:
DEASSERT	lapic.c	27;"	d	file:
DEBUG	Makefile	/^DEBUG=TRUE$/;"	m
DELIVS	lapic.c	25;"	d	file:
DIRSIZ	fs.h	51;"	d
DPL_USER	mmu.h	100;"	d
Disassembly	bad_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	divide.asm	/^Disassembly of section .text:$/;"	l
Disassembly	eager_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	imshow.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	lazy_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prettyprint.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	20;"	d	file:
EOI	lapic.c	18;"	d	file:
ERROR	lapic.c	39;"	d	file:
ESR	lapic.c	21;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	31;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	192;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	32;"	d	file:
ICRLO	lapic.c	22;"	d	file:
ID	lapic.c	15;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	23;"	d	file:
INPUT_BUF	console.c	190;"	d	file:
INT_ACTIVELOW	ioapic.c	23;"	d	file:
INT_DISABLED	ioapic.c	21;"	d	file:
INT_LEVEL	ioapic.c	22;"	d	file:
INT_LOGICAL	ioapic.c	24;"	d	file:
IOAPIC	ioapic.c	10;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_VALID	file.h	27;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0xFFFF800000000000 \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	7;"	d
KERNEL_CS	mmu.h	67;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -m elf_x86_64 -nodefaultlibs$/;"	m
LEVEL	lapic.c	28;"	d	file:
LINT0	lapic.c	37;"	d	file:
LINT1	lapic.c	38;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	40;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	191;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	194;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
MSR_CSTAR	mmu.h	49;"	d
MSR_EFER	mmu.h	46;"	d
MSR_LSTAR	mmu.h	48;"	d
MSR_SFMASK	mmu.h	50;"	d
MSR_STAR	mmu.h	47;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	190;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	143;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	144;"	d
NSEGS	mmu.h	61;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
OPT	Makefile	/^OPT ?= -O0$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	21;"	d
P2V_WO	memlayout.h	24;"	d
PCINT	lapic.c	36;"	d	file:
PDPX	mmu.h	136;"	d
PDPXSHIFT	mmu.h	149;"	d
PDX	mmu.h	138;"	d
PDXSHIFT	mmu.h	148;"	d
PERIODIC	lapic.c	35;"	d	file:
PGROUNDDOWN	mmu.h	154;"	d
PGROUNDUP	mmu.h	153;"	d
PGSHIFT	mmu.h	146;"	d
PGSIZE	mmu.h	145;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PML4XSHIFT	mmu.h	150;"	d
PMX	mmu.h	134;"	d
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	162;"	d
PTE_ADDR	mmu.h	168;"	d
PTE_D	mmu.h	163;"	d
PTE_FLAGS	mmu.h	169;"	d
PTE_MBZ	mmu.h	165;"	d
PTE_P	mmu.h	157;"	d
PTE_PCD	mmu.h	161;"	d
PTE_PS	mmu.h	164;"	d
PTE_PWT	mmu.h	160;"	d
PTE_U	mmu.h	159;"	d
PTE_W	mmu.h	158;"	d
PTX	mmu.h	140;"	d
PTXSHIFT	mmu.h	147;"	d
PXMASK	mmu.h	151;"	d
QEMU	Makefile	/^ QEMU = qemu-system-x86_64$/;"	m
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -net none -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	12;"	d	file:
REG_TABLE	ioapic.c	14;"	d	file:
REG_VER	ioapic.c	13;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	190;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	12;"	d	file:
SEG	mmu.h	89;"	d
SEG16	mmu.h	94;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	53;"	d
SEG_KCPU	mmu.h	58;"	d
SEG_KDATA	mmu.h	54;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	59;"	d
SEG_UCODE	mmu.h	57;"	d
SEG_UCODE32	mmu.h	55;"	d
SEG_UDATA	mmu.h	56;"	d
SETCALLGATE	mmu.h	243;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	24;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	109;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	106;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	105;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	108;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	107;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	104;"	d
STS_CG16	mmu.h	115;"	d
STS_CG64	mmu.h	121;"	d
STS_IG16	mmu.h	117;"	d
STS_IG64	mmu.h	122;"	d
STS_LDT	mmu.h	113;"	d
STS_T16A	mmu.h	112;"	d
STS_T16B	mmu.h	114;"	d
STS_T64A	mmu.h	119;"	d
STS_T64B	mmu.h	120;"	d
STS_TG	mmu.h	116;"	d
STS_TG16	mmu.h	118;"	d
STS_TG64	mmu.h	123;"	d
SVR	lapic.c	19;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_mmap	syscall.h	23;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	42;"	d	file:
TDCR	lapic.c	43;"	d	file:
TICR	lapic.c	41;"	d	file:
TIMER	lapic.c	33;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	17;"	d	file:
TRAP_GATE	mmu.h	171;"	d
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
USER_CS	mmu.h	65;"	d
USER_DS	mmu.h	66;"	d
V2P	memlayout.h	20;"	d
V2P_WO	memlayout.h	23;"	d
VER	lapic.c	16;"	d	file:
X1	lapic.c	34;"	d	file:
XFLAGS	Makefile	/^XFLAGS = -m64 -DX64 -mcmodel=large -mtls-direct-seg-refs -mno-red-zone$/;"	m
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	195;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
__deadloop	entry.S	/^__deadloop:$/;"	l
__deadloop	kernel.asm	/^__deadloop:$/;"	l
_bad_mmap	bad_mmap.asm	/^_bad_mmap:     file format elf64-x86-64$/;"	l
_cat	cat.asm	/^_cat:     file format elf64-x86-64$/;"	l
_divide	divide.asm	/^_divide:     file format elf64-x86-64$/;"	l
_eager_mmap	eager_mmap.asm	/^_eager_mmap:     file format elf64-x86-64$/;"	l
_echo	echo.asm	/^_echo:     file format elf64-x86-64$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf64-x86-64$/;"	l
_grep	grep.asm	/^_grep:     file format elf64-x86-64$/;"	l
_imshow	imshow.asm	/^_imshow:     file format elf64-x86-64$/;"	l
_init	init.asm	/^_init:     file format elf64-x86-64$/;"	l
_kill	kill.asm	/^_kill:     file format elf64-x86-64$/;"	l
_lazy_mmap	lazy_mmap.asm	/^_lazy_mmap:     file format elf64-x86-64$/;"	l
_ln	ln.asm	/^_ln:     file format elf64-x86-64$/;"	l
_ls	ls.asm	/^_ls:     file format elf64-x86-64$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf64-x86-64$/;"	l
_prettyprint	prettyprint.asm	/^_prettyprint:     file format elf64-x86-64$/;"	l
_rm	rm.asm	/^_rm:     file format elf64-x86-64$/;"	l
_sh	sh.asm	/^_sh:     file format elf64-x86-64$/;"	l
_start	entry.S	/^_start:$/;"	l
_start	kernel.asm	/^_start:$/;"	l
_stressfs	stressfs.asm	/^_stressfs:     file format elf64-x86-64$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf64-x86-64$/;"	l
_wc	wc.asm	/^_wc:     file format elf64-x86-64$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf64-x86-64$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((addr_t)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a0	forktest.asm	/^  a0:	00 00 00 $/;"	l
a0	usertests.asm	/^      a0:	8b 00                	mov    (%rax),%eax$/;"	l
a0	zombie.asm	/^  a0:	84 c0                	test   %al,%al$/;"	l
a00	cat.asm	/^ a00:	48 b8 9c 05 00 00 00 	movabs $0x59c,%rax$/;"	l
a00	init.asm	/^ a00:	0f 85 fc fc ff ff    	jne    702 <printf+0x9e>$/;"	l
a01	bad_mmap.asm	/^ a01:	00 00 00 $/;"	l
a01	kill.asm	/^ a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a01	ln.asm	/^ a01:	eb 0e                	jmp    a11 <free+0xcf>$/;"	l
a01	sh.asm	/^     a01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a01	usertests.asm	/^     a01:	00 00 00 $/;"	l
a01	zombie.asm	/^ a01:	77 07                	ja     a0a <morecore+0x1b>$/;"	l
a02	eager_mmap.asm	/^ a02:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a02	lazy_mmap.asm	/^ a02:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a02	ls.asm	/^     a02:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a02	mkdir.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a02	rm.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	echo.asm	/^ a03:	75 27                	jne    a2c <free+0x113>$/;"	l
a03	ln.asm	/^ a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	zombie.asm	/^ a03:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a04	bad_mmap.asm	/^ a04:	ff d0                	callq  *%rax$/;"	l
a04	usertests.asm	/^     a04:	89 c7                	mov    %eax,%edi$/;"	l
a04	wc.asm	/^ a04:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a05	divide.asm	/^ a05:	89 d2                	mov    %edx,%edx$/;"	l
a05	echo.asm	/^ a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a05	imshow.asm	/^ a05:	8b 30                	mov    (%rax),%esi$/;"	l
a05	kill.asm	/^ a05:	48 01 d0             	add    %rdx,%rax$/;"	l
a05	sh.asm	/^     a05:	48 89 c7             	mov    %rax,%rdi$/;"	l
a05	stressfs.asm	/^ a05:	89 d6                	mov    %edx,%esi$/;"	l
a06	bad_mmap.asm	/^ a06:	eb 38                	jmp    a40 <printf+0x373>$/;"	l
a06	grep.asm	/^ a06:	48 01 d0             	add    %rdx,%rax$/;"	l
a06	init.asm	/^ a06:	90                   	nop$/;"	l
a06	mkdir.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	prettyprint.asm	/^     a06:	00 00 00 $/;"	l
a06	rm.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	usertests.asm	/^     a06:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a07	cat.asm	/^ a07:	00 00 00 $/;"	l
a07	divide.asm	/^ a07:	48 01 d0             	add    %rdx,%rax$/;"	l
a07	imshow.asm	/^ a07:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a07	init.asm	/^ a07:	c9                   	leaveq $/;"	l
a07	ln.asm	/^ a07:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a07	stressfs.asm	/^ a07:	89 c7                	mov    %eax,%edi$/;"	l
a07	wc.asm	/^ a07:	73 23                	jae    a2c <printf+0x2e2>$/;"	l
a08	bad_mmap.asm	/^ a08:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a08	init.asm	/^ a08:	c3                   	retq   $/;"	l
a08	kill.asm	/^ a08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a08	sh.asm	/^     a08:	48 b8 b2 12 00 00 00 	movabs $0x12b2,%rax$/;"	l
a09	eager_mmap.asm	/^ a09:	8b 00                	mov    (%rax),%eax$/;"	l
a09	echo.asm	/^ a09:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a09	grep.asm	/^ a09:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a09	init.asm	/^ a09:	55                   	push   %rbp$/;"	l
a09	lazy_mmap.asm	/^ a09:	8b 00                	mov    (%rax),%eax$/;"	l
a09	ls.asm	/^     a09:	00 00 00 $/;"	l
a09	mkdir.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	prettyprint.asm	/^     a09:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
a09	rm.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	stressfs.asm	/^ a09:	48 b8 a5 05 00 00 00 	movabs $0x5a5,%rax$/;"	l
a09	wc.asm	/^ a09:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a0a	cat.asm	/^ a0a:	ff d0                	callq  *%rax$/;"	l
a0a	divide.asm	/^ a0a:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a0a	init.asm	/^ a0a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a0a	ln.asm	/^ a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0a	zombie.asm	/^ a0a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a0b	eager_mmap.asm	/^ a0b:	0f be d0             	movsbl %al,%edx$/;"	l
a0b	lazy_mmap.asm	/^ a0b:	0f be d0             	movsbl %al,%edx$/;"	l
a0b	usertests.asm	/^     a0b:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
a0c	cat.asm	/^ a0c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a0c	echo.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	grep.asm	/^ a0c:	0f be c0             	movsbl %al,%eax$/;"	l
a0c	kill.asm	/^ a0c:	75 27                	jne    a35 <free+0x113>$/;"	l
a0c	ls.asm	/^     a0c:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a0c	mkdir.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	rm.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0d	imshow.asm	/^ a0d:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
a0d	init.asm	/^ a0d:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a0d	zombie.asm	/^ a0d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a0e	bad_mmap.asm	/^ a0e:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a0e	eager_mmap.asm	/^ a0e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a0e	kill.asm	/^ a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a0e	lazy_mmap.asm	/^ a0e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a0e	ln.asm	/^ a0e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a0f	grep.asm	/^ a0f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a0f	sh.asm	/^     a0f:	00 00 00 $/;"	l
a1	bad_mmap.asm	/^  a1:	ff d1                	callq  *%rcx$/;"	l
a1	cat.asm	/^  a1:	48 ba 99 06 00 00 00 	movabs $0x699,%rdx$/;"	l
a1	imshow.asm	/^  a1:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a1	ls.asm	/^      a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a1	prettyprint.asm	/^      a1:	ff d0                	callq  *%rax$/;"	l
a1	stressfs.asm	/^  a1:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a10	divide.asm	/^ a10:	83 c2 08             	add    $0x8,%edx$/;"	l
a10	echo.asm	/^ a10:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a10	mkdir.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	prettyprint.asm	/^     a10:	00 00 00 $/;"	l
a10	rm.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	stressfs.asm	/^ a10:	00 00 00 $/;"	l
a10	wc.asm	/^ a10:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a10	zombie.asm	/^ a10:	89 c7                	mov    %eax,%edi$/;"	l
a11	init.asm	/^ a11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a11	ln.asm	/^ a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a12	imshow.asm	/^ a12:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
a12	kill.asm	/^ a12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a12	sh.asm	/^     a12:	ff d0                	callq  *%rax$/;"	l
a12	usertests.asm	/^     a12:	00 00 00 $/;"	l
a12	zombie.asm	/^ a12:	48 b8 f3 03 00 00 00 	movabs $0x3f3,%rax$/;"	l
a13	bad_mmap.asm	/^ a13:	89 c7                	mov    %eax,%edi$/;"	l
a13	cat.asm	/^ a13:	00 00 00 $/;"	l
a13	divide.asm	/^ a13:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a13	echo.asm	/^ a13:	01 c2                	add    %eax,%edx$/;"	l
a13	ls.asm	/^     a13:	00 00 00 $/;"	l
a13	mkdir.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	prettyprint.asm	/^     a13:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
a13	rm.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	stressfs.asm	/^ a13:	ff d0                	callq  *%rax$/;"	l
a14	eager_mmap.asm	/^ a14:	89 d6                	mov    %edx,%esi$/;"	l
a14	grep.asm	/^ a14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a14	lazy_mmap.asm	/^ a14:	89 d6                	mov    %edx,%esi$/;"	l
a14	sh.asm	/^     a14:	89 c0                	mov    %eax,%eax$/;"	l
a15	bad_mmap.asm	/^ a15:	48 b8 d0 05 00 00 00 	movabs $0x5d0,%rax$/;"	l
a15	echo.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	init.asm	/^ a15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a15	kill.asm	/^ a15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a15	ln.asm	/^ a15:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a15	mkdir.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	rm.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	stressfs.asm	/^ a15:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a15	usertests.asm	/^     a15:	ff d2                	callq  *%rdx$/;"	l
a16	cat.asm	/^ a16:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a16	eager_mmap.asm	/^ a16:	89 c7                	mov    %eax,%edi$/;"	l
a16	lazy_mmap.asm	/^ a16:	89 c7                	mov    %eax,%edi$/;"	l
a16	ls.asm	/^     a16:	e9 e6 02 00 00       	jmpq   d01 <printf+0x384>$/;"	l
a16	sh.asm	/^     a16:	48 01 d8             	add    %rbx,%rax$/;"	l
a16	wc.asm	/^ a16:	89 d2                	mov    %edx,%edx$/;"	l
a17	imshow.asm	/^ a17:	89 c7                	mov    %eax,%edi$/;"	l
a17	prettyprint.asm	/^     a17:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
a17	usertests.asm	/^     a17:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a18	eager_mmap.asm	/^ a18:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a18	lazy_mmap.asm	/^ a18:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a18	ln.asm	/^ a18:	89 c0                	mov    %eax,%eax$/;"	l
a18	wc.asm	/^ a18:	48 01 d0             	add    %rdx,%rax$/;"	l
a19	divide.asm	/^ a19:	eb 12                	jmp    a2d <printf+0x246>$/;"	l
a19	echo.asm	/^ a19:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a19	imshow.asm	/^ a19:	48 b8 64 07 00 00 00 	movabs $0x764,%rax$/;"	l
a19	init.asm	/^ a19:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a19	kill.asm	/^ a19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a19	mkdir.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	rm.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	sh.asm	/^     a19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
a19	zombie.asm	/^ a19:	00 00 00 $/;"	l
a1a	grep.asm	/^ a1a:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a1a	ln.asm	/^ a1a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a1b	divide.asm	/^ a1b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a1b	ls.asm	/^     a1b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1b	wc.asm	/^ a1b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a1c	bad_mmap.asm	/^ a1c:	00 00 00 $/;"	l
a1c	echo.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	kill.asm	/^ a1c:	01 c2                	add    %eax,%edx$/;"	l
a1c	mkdir.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	rm.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	stressfs.asm	/^ a1c:	00 00 00 $/;"	l
a1c	zombie.asm	/^ a1c:	ff d0                	callq  *%rax$/;"	l
a1d	cat.asm	/^ a1d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1d	init.asm	/^ a1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a1d	sh.asm	/^     a1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
a1e	kill.asm	/^ a1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a1e	ln.asm	/^ a1e:	48 89 c2             	mov    %rax,%rdx$/;"	l
a1e	prettyprint.asm	/^     a1e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
a1e	usertests.asm	/^     a1e:	00 00 00 $/;"	l
a1e	zombie.asm	/^ a1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a1f	bad_mmap.asm	/^ a1f:	ff d0                	callq  *%rax$/;"	l
a1f	eager_mmap.asm	/^ a1f:	00 00 00 $/;"	l
a1f	lazy_mmap.asm	/^ a1f:	00 00 00 $/;"	l
a1f	stressfs.asm	/^ a1f:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a2	init.asm	/^  a2:	ff d2                	callq  *%rdx$/;"	l
a2	kill.asm	/^  a2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
a2	mkdir.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	rm.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	usertests.asm	/^      a2:	48 be a7 68 00 00 00 	movabs $0x68a7,%rsi$/;"	l
a2	zombie.asm	/^  a2:	75 dc                	jne    80 <strcpy+0x19>$/;"	l
a20	echo.asm	/^ a20:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a20	imshow.asm	/^ a20:	00 00 00 $/;"	l
a20	mkdir.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a20	rm.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a21	bad_mmap.asm	/^ a21:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a21	grep.asm	/^ a21:	75 3c                	jne    a5f <printf+0x107>$/;"	l
a21	init.asm	/^ a21:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
a21	ln.asm	/^ a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a21	ls.asm	/^     a21:	48 63 d0             	movslq %eax,%rdx$/;"	l
a21	sh.asm	/^     a21:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a21	usertests.asm	/^     a21:	ff d0                	callq  *%rax$/;"	l
a21	wc.asm	/^ a21:	83 c2 08             	add    $0x8,%edx$/;"	l
a22	divide.asm	/^ a22:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a22	eager_mmap.asm	/^ a22:	ff d0                	callq  *%rax$/;"	l
a22	kill.asm	/^ a22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a22	lazy_mmap.asm	/^ a22:	ff d0                	callq  *%rax$/;"	l
a22	zombie.asm	/^ a22:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a23	cat.asm	/^ a23:	48 63 d0             	movslq %eax,%rdx$/;"	l
a23	echo.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	grep.asm	/^ a23:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a23	imshow.asm	/^ a23:	ff d0                	callq  *%rax$/;"	l
a23	mkdir.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	rm.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	usertests.asm	/^     a23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
a24	eager_mmap.asm	/^ a24:	eb 62                	jmp    a88 <printf+0x373>$/;"	l
a24	lazy_mmap.asm	/^ a24:	eb 62                	jmp    a88 <printf+0x373>$/;"	l
a24	ls.asm	/^     a24:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a24	wc.asm	/^ a24:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a25	imshow.asm	/^ a25:	e9 7a 01 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
a25	kill.asm	/^ a25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a25	ln.asm	/^ a25:	48 01 d0             	add    %rdx,%rax$/;"	l
a25	prettyprint.asm	/^     a25:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
a25	sh.asm	/^     a25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
a26	cat.asm	/^ a26:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a26	divide.asm	/^ a26:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a26	eager_mmap.asm	/^ a26:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a26	lazy_mmap.asm	/^ a26:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a26	stressfs.asm	/^ a26:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a27	bad_mmap.asm	/^ a27:	0f be d0             	movsbl %al,%edx$/;"	l
a27	echo.asm	/^ a27:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a27	mkdir.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	rm.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	zombie.asm	/^ a27:	75 07                	jne    a30 <morecore+0x41>$/;"	l
a28	init.asm	/^ a28:	00 00 00 $/;"	l
a28	ln.asm	/^ a28:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a28	sh.asm	/^     a28:	48 89 c7             	mov    %rax,%rdi$/;"	l
a29	kill.asm	/^ a29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a29	zombie.asm	/^ a29:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a2a	bad_mmap.asm	/^ a2a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a2a	echo.asm	/^ a2a:	eb 0b                	jmp    a37 <free+0x11e>$/;"	l
a2a	grep.asm	/^ a2a:	75 0f                	jne    a3b <printf+0xe3>$/;"	l
a2a	imshow.asm	/^ a2a:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
a2a	mkdir.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	rm.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	usertests.asm	/^     a2a:	eb 72                	jmp    a9e <writetest1+0x105>$/;"	l
a2a	wc.asm	/^ a2a:	eb 12                	jmp    a3e <printf+0x2f4>$/;"	l
a2b	init.asm	/^ a2b:	48 8b 00             	mov    (%rax),%rax$/;"	l
a2b	ls.asm	/^     a2b:	48 01 d0             	add    %rdx,%rax$/;"	l
a2b	sh.asm	/^     a2b:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
a2c	echo.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	grep.asm	/^ a2c:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a2c	kill.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	ln.asm	/^ a2c:	75 27                	jne    a55 <free+0x113>$/;"	l
a2c	mkdir.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	prettyprint.asm	/^     a2c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a2c	rm.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	stressfs.asm	/^ a2c:	48 63 d0             	movslq %eax,%rdx$/;"	l
a2c	usertests.asm	/^     a2c:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
a2c	wc.asm	/^ a2c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a2d	cat.asm	/^ a2d:	48 01 d0             	add    %rdx,%rax$/;"	l
a2d	divide.asm	/^ a2d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a2d	eager_mmap.asm	/^ a2d:	75 21                	jne    a50 <printf+0x33b>$/;"	l
a2d	lazy_mmap.asm	/^ a2d:	75 21                	jne    a50 <printf+0x33b>$/;"	l
a2e	init.asm	/^ a2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a2e	ln.asm	/^ a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2e	ls.asm	/^     a2e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a2e	zombie.asm	/^ a2e:	eb 36                	jmp    a66 <morecore+0x77>$/;"	l
a2f	eager_mmap.asm	/^ a2f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a2f	lazy_mmap.asm	/^ a2f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a2f	stressfs.asm	/^ a2f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a3	bad_mmap.asm	/^  a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a3	echo.asm	/^  a3:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
a3	forktest.asm	/^  a3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a3	grep.asm	/^  a3:	48 83 c0 01          	add    $0x1,%rax$/;"	l
a3	prettyprint.asm	/^      a3:	48 be f8 11 00 00 00 	movabs $0x11f8,%rsi$/;"	l
a3	sh.asm	/^      a3:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
a3	wc.asm	/^  a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a30	bad_mmap.asm	/^ a30:	89 d6                	mov    %edx,%esi$/;"	l
a30	cat.asm	/^ a30:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a30	divide.asm	/^ a30:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a30	echo.asm	/^ a30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a30	kill.asm	/^ a30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a30	mkdir.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	rm.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	zombie.asm	/^ a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a31	imshow.asm	/^ a31:	0f 85 a5 00 00 00    	jne    adc <printf+0x2ab>$/;"	l
a31	ls.asm	/^     a31:	0f be c0             	movsbl %al,%eax$/;"	l
a32	bad_mmap.asm	/^ a32:	89 c7                	mov    %eax,%edi$/;"	l
a32	init.asm	/^ a32:	eb 2f                	jmp    a63 <free+0x5a>$/;"	l
a32	ln.asm	/^ a32:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a32	sh.asm	/^     a32:	00 00 00 $/;"	l
a33	cat.asm	/^ a33:	84 c0                	test   %al,%al$/;"	l
a33	grep.asm	/^ a33:	00 00 00 $/;"	l
a33	kill.asm	/^ a33:	eb 0b                	jmp    a40 <free+0x11e>$/;"	l
a33	mkdir.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	prettyprint.asm	/^     a33:	00 00 00 $/;"	l
a33	rm.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	usertests.asm	/^     a33:	00 00 00 $/;"	l
a33	wc.asm	/^ a33:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a34	bad_mmap.asm	/^ a34:	48 b8 d0 05 00 00 00 	movabs $0x5d0,%rax$/;"	l
a34	echo.asm	/^ a34:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a34	init.asm	/^ a34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a34	ls.asm	/^     a34:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a34	zombie.asm	/^ a34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a35	cat.asm	/^ a35:	0f 85 fc fc ff ff    	jne    737 <printf+0x9e>$/;"	l
a35	eager_mmap.asm	/^ a35:	0f be d0             	movsbl %al,%edx$/;"	l
a35	kill.asm	/^ a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a35	lazy_mmap.asm	/^ a35:	0f be d0             	movsbl %al,%edx$/;"	l
a35	ln.asm	/^ a35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a35	sh.asm	/^     a35:	ff d0                	callq  *%rax$/;"	l
a36	grep.asm	/^ a36:	e9 9a 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a36	prettyprint.asm	/^     a36:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a36	stressfs.asm	/^ a36:	48 01 d0             	add    %rdx,%rax$/;"	l
a36	usertests.asm	/^     a36:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a37	divide.asm	/^ a37:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a37	echo.asm	/^ a37:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
a37	imshow.asm	/^ a37:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a37	mkdir.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	rm.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	sh.asm	/^     a37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
a37	wc.asm	/^ a37:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a38	eager_mmap.asm	/^ a38:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a38	init.asm	/^ a38:	48 8b 00             	mov    (%rax),%rax$/;"	l
a38	lazy_mmap.asm	/^ a38:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a38	zombie.asm	/^ a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a39	kill.asm	/^ a39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a39	ln.asm	/^ a39:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a39	ls.asm	/^     a39:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a39	stressfs.asm	/^ a39:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a39	usertests.asm	/^     a39:	89 10                	mov    %edx,(%rax)$/;"	l
a3a	mkdir.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3a	rm.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3b	bad_mmap.asm	/^ a3b:	00 00 00 $/;"	l
a3b	cat.asm	/^ a3b:	90                   	nop$/;"	l
a3b	grep.asm	/^ a3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a3b	init.asm	/^ a3b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a3b	sh.asm	/^     a3b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
a3b	usertests.asm	/^     a3b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a3c	cat.asm	/^ a3c:	c9                   	leaveq $/;"	l
a3c	ln.asm	/^ a3c:	01 c2                	add    %eax,%edx$/;"	l
a3c	stressfs.asm	/^ a3c:	84 c0                	test   %al,%al$/;"	l
a3c	zombie.asm	/^ a3c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a3d	cat.asm	/^ a3d:	c3                   	retq   $/;"	l
a3d	imshow.asm	/^ a3d:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a3d	kill.asm	/^ a3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a3d	prettyprint.asm	/^     a3d:	00 00 00 $/;"	l
a3e	bad_mmap.asm	/^ a3e:	ff d0                	callq  *%rax$/;"	l
a3e	cat.asm	/^ a3e:	55                   	push   %rbp$/;"	l
a3e	divide.asm	/^ a3e:	00 $/;"	l
a3e	eager_mmap.asm	/^ a3e:	89 d6                	mov    %edx,%esi$/;"	l
a3e	echo.asm	/^ a3e:	00 00 00 $/;"	l
a3e	lazy_mmap.asm	/^ a3e:	89 d6                	mov    %edx,%esi$/;"	l
a3e	ln.asm	/^ a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a3e	mkdir.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	rm.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	stressfs.asm	/^ a3e:	0f 85 fc fc ff ff    	jne    740 <printf+0x9e>$/;"	l
a3e	usertests.asm	/^     a3e:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
a3e	wc.asm	/^ a3e:	8b 00                	mov    (%rax),%eax$/;"	l
a3f	cat.asm	/^ a3f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a3f	divide.asm	/^ a3f:	75 3e                	jne    a7f <printf+0x298>$/;"	l
a3f	init.asm	/^ a3f:	77 17                	ja     a58 <free+0x4f>$/;"	l
a3f	ls.asm	/^     a3f:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a3f	sh.asm	/^     a3f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a3f	zombie.asm	/^ a3f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a4	eager_mmap.asm	/^  a4:	00 00 00 $/;"	l
a4	init.asm	/^  a4:	48 b8 8b 04 00 00 00 	movabs $0x48b,%rax$/;"	l
a4	lazy_mmap.asm	/^  a4:	00 00 00 $/;"	l
a4	ln.asm	/^  a4:	00 00 00 $/;"	l
a4	zombie.asm	/^  a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	bad_mmap.asm	/^ a40:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a40	eager_mmap.asm	/^ a40:	89 c7                	mov    %eax,%edi$/;"	l
a40	imshow.asm	/^ a40:	73 23                	jae    a65 <printf+0x234>$/;"	l
a40	kill.asm	/^ a40:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
a40	lazy_mmap.asm	/^ a40:	89 c7                	mov    %eax,%edi$/;"	l
a40	mkdir.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	prettyprint.asm	/^     a40:	e9 e6 02 00 00       	jmpq   d2b <printf+0x384>$/;"	l
a40	rm.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	wc.asm	/^ a40:	0f be d0             	movsbl %al,%edx$/;"	l
a41	divide.asm	/^ a41:	48 b8 2d 0f 00 00 00 	movabs $0xf2d,%rax$/;"	l
a41	echo.asm	/^ a41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a41	grep.asm	/^ a41:	0f be d0             	movsbl %al,%edx$/;"	l
a41	init.asm	/^ a41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a42	cat.asm	/^ a42:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a42	eager_mmap.asm	/^ a42:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a42	imshow.asm	/^ a42:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a42	lazy_mmap.asm	/^ a42:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a42	ln.asm	/^ a42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a42	zombie.asm	/^ a42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a43	sh.asm	/^     a43:	48 ba ea 1d 00 00 00 	movabs $0x1dea,%rdx$/;"	l
a43	usertests.asm	/^     a43:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
a43	wc.asm	/^ a43:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	grep.asm	/^ a44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	mkdir.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	rm.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	stressfs.asm	/^ a44:	90                   	nop$/;"	l
a45	echo.asm	/^ a45:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a45	init.asm	/^ a45:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a45	ln.asm	/^ a45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a45	prettyprint.asm	/^     a45:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a45	stressfs.asm	/^ a45:	c9                   	leaveq $/;"	l
a46	cat.asm	/^ a46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a46	ls.asm	/^     a46:	75 3c                	jne    a84 <printf+0x107>$/;"	l
a46	stressfs.asm	/^ a46:	c3                   	retq   $/;"	l
a46	zombie.asm	/^ a46:	48 83 c0 10          	add    $0x10,%rax$/;"	l
a47	bad_mmap.asm	/^ a47:	00 00 00 $/;"	l
a47	kill.asm	/^ a47:	00 00 00 $/;"	l
a47	mkdir.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	rm.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	stressfs.asm	/^ a47:	55                   	push   %rbp$/;"	l
a48	divide.asm	/^ a48:	00 00 00 $/;"	l
a48	echo.asm	/^ a48:	90                   	nop$/;"	l
a48	ls.asm	/^     a48:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a48	stressfs.asm	/^ a48:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a49	eager_mmap.asm	/^ a49:	00 00 00 $/;"	l
a49	echo.asm	/^ a49:	c9                   	leaveq $/;"	l
a49	imshow.asm	/^ a49:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a49	init.asm	/^ a49:	77 2f                	ja     a7a <free+0x71>$/;"	l
a49	lazy_mmap.asm	/^ a49:	00 00 00 $/;"	l
a49	ln.asm	/^ a49:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a49	wc.asm	/^ a49:	89 d6                	mov    %edx,%esi$/;"	l
a4a	bad_mmap.asm	/^ a4a:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a4a	cat.asm	/^ a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a4a	echo.asm	/^ a4a:	c3                   	retq   $/;"	l
a4a	grep.asm	/^ a4a:	89 d6                	mov    %edx,%esi$/;"	l
a4a	kill.asm	/^ a4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a4a	sh.asm	/^     a4a:	00 00 00 $/;"	l
a4a	usertests.asm	/^     a4a:	00 00 00 $/;"	l
a4a	zombie.asm	/^ a4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
a4b	divide.asm	/^ a4b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a4b	echo.asm	/^ a4b:	55                   	push   %rbp$/;"	l
a4b	init.asm	/^ a4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a4b	mkdir.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	prettyprint.asm	/^     a4b:	48 63 d0             	movslq %eax,%rdx$/;"	l
a4b	rm.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	stressfs.asm	/^ a4b:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a4b	wc.asm	/^ a4b:	89 c7                	mov    %eax,%edi$/;"	l
a4c	eager_mmap.asm	/^ a4c:	ff d0                	callq  *%rax$/;"	l
a4c	echo.asm	/^ a4c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a4c	grep.asm	/^ a4c:	89 c7                	mov    %eax,%edi$/;"	l
a4c	lazy_mmap.asm	/^ a4c:	ff d0                	callq  *%rax$/;"	l
a4c	ln.asm	/^ a4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a4d	sh.asm	/^     a4d:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a4d	usertests.asm	/^     a4d:	89 c7                	mov    %eax,%edi$/;"	l
a4d	wc.asm	/^ a4d:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a4d	zombie.asm	/^ a4d:	48 b8 bd 08 00 00 00 	movabs $0x8bd,%rax$/;"	l
a4e	cat.asm	/^ a4e:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a4e	eager_mmap.asm	/^ a4e:	eb 38                	jmp    a88 <printf+0x373>$/;"	l
a4e	grep.asm	/^ a4e:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
a4e	kill.asm	/^ a4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a4e	lazy_mmap.asm	/^ a4e:	eb 38                	jmp    a88 <printf+0x373>$/;"	l
a4e	mkdir.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4e	prettyprint.asm	/^     a4e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a4e	rm.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4f	echo.asm	/^ a4f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a4f	imshow.asm	/^ a4f:	89 d2                	mov    %edx,%edx$/;"	l
a4f	init.asm	/^ a4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
a4f	ls.asm	/^     a4f:	75 0f                	jne    a60 <printf+0xe3>$/;"	l
a4f	stressfs.asm	/^ a4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a4f	usertests.asm	/^     a4f:	48 b8 2a 60 00 00 00 	movabs $0x602a,%rax$/;"	l
a5	kill.asm	/^  a5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
a5	ls.asm	/^      a5:	48 89 c7             	mov    %rax,%rdi$/;"	l
a50	eager_mmap.asm	/^ a50:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a50	lazy_mmap.asm	/^ a50:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a50	ln.asm	/^ a50:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a50	mkdir.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	rm.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	sh.asm	/^     a50:	48 89 c7             	mov    %rax,%rdi$/;"	l
a51	bad_mmap.asm	/^ a51:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a51	imshow.asm	/^ a51:	48 01 d0             	add    %rdx,%rax$/;"	l
a51	kill.asm	/^ a51:	90                   	nop$/;"	l
a51	ls.asm	/^     a51:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a52	cat.asm	/^ a52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a52	divide.asm	/^ a52:	eb 2b                	jmp    a7f <printf+0x298>$/;"	l
a52	init.asm	/^ a52:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a52	kill.asm	/^ a52:	c9                   	leaveq $/;"	l
a53	echo.asm	/^ a53:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a53	kill.asm	/^ a53:	c3                   	retq   $/;"	l
a53	ln.asm	/^ a53:	eb 0b                	jmp    a60 <free+0x11e>$/;"	l
a53	sh.asm	/^     a53:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
a53	stressfs.asm	/^ a53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a54	divide.asm	/^ a54:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a54	imshow.asm	/^ a54:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a54	kill.asm	/^ a54:	55                   	push   %rbp$/;"	l
a54	mkdir.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	rm.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	wc.asm	/^ a54:	00 00 00 $/;"	l
a54	zombie.asm	/^ a54:	00 00 00 $/;"	l
a55	grep.asm	/^ a55:	00 00 00 $/;"	l
a55	kill.asm	/^ a55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a55	ln.asm	/^ a55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a55	prettyprint.asm	/^     a55:	48 01 d0             	add    %rdx,%rax$/;"	l
a56	cat.asm	/^ a56:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
a56	eager_mmap.asm	/^ a56:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a56	echo.asm	/^ a56:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a56	init.asm	/^ a56:	77 22                	ja     a7a <free+0x71>$/;"	l
a56	lazy_mmap.asm	/^ a56:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a56	usertests.asm	/^     a56:	00 00 00 $/;"	l
a57	bad_mmap.asm	/^ a57:	48 63 d0             	movslq %eax,%rdx$/;"	l
a57	mkdir.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	rm.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	stressfs.asm	/^ a57:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a57	wc.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a57	zombie.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a58	grep.asm	/^ a58:	ff d0                	callq  *%rax$/;"	l
a58	init.asm	/^ a58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a58	kill.asm	/^ a58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a58	ls.asm	/^     a58:	00 00 00 $/;"	l
a58	prettyprint.asm	/^     a58:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a59	ln.asm	/^ a59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a59	usertests.asm	/^     a59:	ff d0                	callq  *%rax$/;"	l
a59	wc.asm	/^ a59:	eb 62                	jmp    abd <printf+0x373>$/;"	l
a59	zombie.asm	/^ a59:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a5a	bad_mmap.asm	/^ a5a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a5a	grep.asm	/^ a5a:	e9 76 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a5a	imshow.asm	/^ a5a:	83 c2 08             	add    $0x8,%edx$/;"	l
a5a	sh.asm	/^     a5a:	00 00 00 $/;"	l
a5b	divide.asm	/^ a5b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a5b	eager_mmap.asm	/^ a5b:	89 c7                	mov    %eax,%edi$/;"	l
a5b	lazy_mmap.asm	/^ a5b:	89 c7                	mov    %eax,%edi$/;"	l
a5b	ls.asm	/^     a5b:	e9 9a 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a5b	mkdir.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	prettyprint.asm	/^     a5b:	0f be c0             	movsbl %al,%eax$/;"	l
a5b	rm.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	stressfs.asm	/^ a5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a5b	usertests.asm	/^     a5b:	3d 00 02 00 00       	cmp    $0x200,%eax$/;"	l
a5b	wc.asm	/^ a5b:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a5c	init.asm	/^ a5c:	48 8b 00             	mov    (%rax),%rax$/;"	l
a5c	kill.asm	/^ a5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a5d	cat.asm	/^ a5d:	00 00 00 $/;"	l
a5d	eager_mmap.asm	/^ a5d:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a5d	echo.asm	/^ a5d:	77 07                	ja     a66 <morecore+0x1b>$/;"	l
a5d	imshow.asm	/^ a5d:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a5d	lazy_mmap.asm	/^ a5d:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a5d	ln.asm	/^ a5d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a5d	sh.asm	/^     a5d:	ff d0                	callq  *%rax$/;"	l
a5e	divide.asm	/^ a5e:	0f be d0             	movsbl %al,%edx$/;"	l
a5e	mkdir.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5e	prettyprint.asm	/^     a5e:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a5e	rm.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5f	echo.asm	/^ a5f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a5f	grep.asm	/^ a5f:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a5f	init.asm	/^ a5f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a5f	kill.asm	/^ a5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a5f	sh.asm	/^     a5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a5f	stressfs.asm	/^ a5f:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
a6	divide.asm	/^  a6:	00 00 00 $/;"	l
a6	echo.asm	/^  a6:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a6	imshow.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a6	stressfs.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a60	cat.asm	/^ a60:	48 8b 00             	mov    (%rax),%rax$/;"	l
a60	ln.asm	/^ a60:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
a60	ls.asm	/^     a60:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a60	usertests.asm	/^     a60:	74 38                	je     a9a <writetest1+0x101>$/;"	l
a60	zombie.asm	/^ a60:	00 00 00 $/;"	l
a61	bad_mmap.asm	/^ a61:	48 01 d0             	add    %rdx,%rax$/;"	l
a61	divide.asm	/^ a61:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a62	mkdir.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	rm.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	usertests.asm	/^     a62:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
a62	wc.asm	/^ a62:	75 21                	jne    a85 <printf+0x33b>$/;"	l
a63	cat.asm	/^ a63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a63	imshow.asm	/^ a63:	eb 12                	jmp    a77 <printf+0x246>$/;"	l
a63	init.asm	/^ a63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a63	prettyprint.asm	/^     a63:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a63	sh.asm	/^     a63:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
a63	zombie.asm	/^ a63:	48 8b 00             	mov    (%rax),%rax$/;"	l
a64	bad_mmap.asm	/^ a64:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a64	eager_mmap.asm	/^ a64:	00 00 00 $/;"	l
a64	lazy_mmap.asm	/^ a64:	00 00 00 $/;"	l
a64	wc.asm	/^ a64:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a65	imshow.asm	/^ a65:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a65	mkdir.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a65	rm.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a66	echo.asm	/^ a66:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a66	grep.asm	/^ a66:	0f 85 69 02 00 00    	jne    cd5 <printf+0x37d>$/;"	l
a66	kill.asm	/^ a66:	77 07                	ja     a6f <morecore+0x1b>$/;"	l
a66	ls.asm	/^     a66:	0f be d0             	movsbl %al,%edx$/;"	l
a66	stressfs.asm	/^ a66:	00 00 00 $/;"	l
a66	zombie.asm	/^ a66:	c9                   	leaveq $/;"	l
a67	bad_mmap.asm	/^ a67:	84 c0                	test   %al,%al$/;"	l
a67	cat.asm	/^ a67:	eb 2f                	jmp    a98 <free+0x5a>$/;"	l
a67	divide.asm	/^ a67:	89 d6                	mov    %edx,%esi$/;"	l
a67	eager_mmap.asm	/^ a67:	ff d0                	callq  *%rax$/;"	l
a67	init.asm	/^ a67:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a67	lazy_mmap.asm	/^ a67:	ff d0                	callq  *%rax$/;"	l
a67	ln.asm	/^ a67:	00 00 00 $/;"	l
a67	mkdir.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	rm.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	sh.asm	/^     a67:	74 3d                	je     aa6 <parsecmd+0xb6>$/;"	l
a67	zombie.asm	/^ a67:	c3                   	retq   $/;"	l
a68	kill.asm	/^ a68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a68	zombie.asm	/^ a68:	55                   	push   %rbp$/;"	l
a69	bad_mmap.asm	/^ a69:	0f 85 fc fc ff ff    	jne    76b <printf+0x9e>$/;"	l
a69	cat.asm	/^ a69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a69	divide.asm	/^ a69:	89 c7                	mov    %eax,%edi$/;"	l
a69	eager_mmap.asm	/^ a69:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a69	echo.asm	/^ a69:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a69	lazy_mmap.asm	/^ a69:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a69	ls.asm	/^     a69:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a69	prettyprint.asm	/^     a69:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a69	sh.asm	/^     a69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a69	stressfs.asm	/^ a69:	48 8b 00             	mov    (%rax),%rax$/;"	l
a69	usertests.asm	/^     a69:	00 00 00 $/;"	l
a69	zombie.asm	/^ a69:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a6a	ln.asm	/^ a6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a6a	wc.asm	/^ a6a:	0f be d0             	movsbl %al,%edx$/;"	l
a6b	divide.asm	/^ a6b:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
a6b	init.asm	/^ a6b:	76 c7                	jbe    a34 <free+0x2b>$/;"	l
a6b	mkdir.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6b	rm.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6c	echo.asm	/^ a6c:	89 c7                	mov    %eax,%edi$/;"	l
a6c	grep.asm	/^ a6c:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a6c	imshow.asm	/^ a6c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a6c	stressfs.asm	/^ a6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a6c	usertests.asm	/^     a6c:	8b 00                	mov    (%rax),%eax$/;"	l
a6c	zombie.asm	/^ a6c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
a6d	cat.asm	/^ a6d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a6d	init.asm	/^ a6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a6d	sh.asm	/^     a6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
a6d	wc.asm	/^ a6d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a6e	echo.asm	/^ a6e:	48 b8 4f 04 00 00 00 	movabs $0x44f,%rax$/;"	l
a6e	ln.asm	/^ a6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6e	usertests.asm	/^     a6e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a6f	bad_mmap.asm	/^ a6f:	90                   	nop$/;"	l
a6f	eager_mmap.asm	/^ a6f:	0f be d0             	movsbl %al,%edx$/;"	l
a6f	kill.asm	/^ a6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a6f	lazy_mmap.asm	/^ a6f:	0f be d0             	movsbl %al,%edx$/;"	l
a6f	ls.asm	/^     a6f:	89 d6                	mov    %edx,%esi$/;"	l
a6f	mkdir.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6f	rm.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a7	bad_mmap.asm	/^  a7:	48 89 c2             	mov    %rax,%rdx$/;"	l
a7	eager_mmap.asm	/^  a7:	ff d1                	callq  *%rcx$/;"	l
a7	grep.asm	/^  a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a7	lazy_mmap.asm	/^  a7:	ff d1                	callq  *%rcx$/;"	l
a7	ln.asm	/^  a7:	41 ff d0             	callq  *%r8$/;"	l
a7	sh.asm	/^      a7:	48 89 c2             	mov    %rax,%rdx$/;"	l
a7	wc.asm	/^  a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a70	bad_mmap.asm	/^ a70:	c9                   	leaveq $/;"	l
a70	cat.asm	/^ a70:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a70	imshow.asm	/^ a70:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a70	prettyprint.asm	/^     a70:	75 3c                	jne    aae <printf+0x107>$/;"	l
a70	sh.asm	/^     a70:	48 be eb 1d 00 00 00 	movabs $0x1deb,%rsi$/;"	l
a70	stressfs.asm	/^ a70:	eb 2f                	jmp    aa1 <free+0x5a>$/;"	l
a70	zombie.asm	/^ a70:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
a71	bad_mmap.asm	/^ a71:	c3                   	retq   $/;"	l
a71	init.asm	/^ a71:	48 8b 00             	mov    (%rax),%rax$/;"	l
a71	ln.asm	/^ a71:	90                   	nop$/;"	l
a71	ls.asm	/^     a71:	89 c7                	mov    %eax,%edi$/;"	l
a71	usertests.asm	/^     a71:	48 be 72 6b 00 00 00 	movabs $0x6b72,%rsi$/;"	l
a72	bad_mmap.asm	/^ a72:	55                   	push   %rbp$/;"	l
a72	divide.asm	/^ a72:	00 00 00 $/;"	l
a72	eager_mmap.asm	/^ a72:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a72	kill.asm	/^ a72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a72	lazy_mmap.asm	/^ a72:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a72	ln.asm	/^ a72:	c9                   	leaveq $/;"	l
a72	mkdir.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	prettyprint.asm	/^     a72:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a72	rm.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	stressfs.asm	/^ a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a73	bad_mmap.asm	/^ a73:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a73	grep.asm	/^ a73:	75 65                	jne    ada <printf+0x182>$/;"	l
a73	ln.asm	/^ a73:	c3                   	retq   $/;"	l
a73	ls.asm	/^     a73:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
a73	wc.asm	/^ a73:	89 d6                	mov    %edx,%esi$/;"	l
a73	zombie.asm	/^ a73:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
a74	cat.asm	/^ a74:	77 17                	ja     a8d <free+0x4f>$/;"	l
a74	init.asm	/^ a74:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a74	ln.asm	/^ a74:	55                   	push   %rbp$/;"	l
a75	divide.asm	/^ a75:	ff d0                	callq  *%rax$/;"	l
a75	echo.asm	/^ a75:	00 00 00 $/;"	l
a75	grep.asm	/^ a75:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a75	kill.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a75	ln.asm	/^ a75:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a75	wc.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a76	bad_mmap.asm	/^ a76:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a76	cat.asm	/^ a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a76	stressfs.asm	/^ a76:	48 8b 00             	mov    (%rax),%rax$/;"	l
a76	zombie.asm	/^ a76:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
a77	divide.asm	/^ a77:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
a77	imshow.asm	/^ a77:	48 8b 00             	mov    (%rax),%rax$/;"	l
a77	kill.asm	/^ a77:	48 b8 58 04 00 00 00 	movabs $0x458,%rax$/;"	l
a77	sh.asm	/^     a77:	00 00 00 $/;"	l
a77	wc.asm	/^ a77:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a78	eager_mmap.asm	/^ a78:	89 d6                	mov    %edx,%esi$/;"	l
a78	echo.asm	/^ a78:	ff d0                	callq  *%rax$/;"	l
a78	init.asm	/^ a78:	76 ba                	jbe    a34 <free+0x2b>$/;"	l
a78	lazy_mmap.asm	/^ a78:	89 d6                	mov    %edx,%esi$/;"	l
a78	ln.asm	/^ a78:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a78	usertests.asm	/^     a78:	00 00 00 $/;"	l
a79	mkdir.asm	/^ a79:	00 00 00 $/;"	l
a79	prettyprint.asm	/^     a79:	75 0f                	jne    a8a <printf+0xe3>$/;"	l
a79	rm.asm	/^ a79:	00 00 00 $/;"	l
a79	stressfs.asm	/^ a79:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	bad_mmap.asm	/^ a7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a7a	cat.asm	/^ a7a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	eager_mmap.asm	/^ a7a:	89 c7                	mov    %eax,%edi$/;"	l
a7a	echo.asm	/^ a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a7a	imshow.asm	/^ a7a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a7a	init.asm	/^ a7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a7a	lazy_mmap.asm	/^ a7a:	89 c7                	mov    %eax,%edi$/;"	l
a7a	ls.asm	/^     a7a:	00 00 00 $/;"	l
a7a	sh.asm	/^     a7a:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a7a	zombie.asm	/^ a7a:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
a7b	grep.asm	/^ a7b:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a7b	prettyprint.asm	/^     a7b:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a7b	usertests.asm	/^     a7b:	89 c7                	mov    %eax,%edi$/;"	l
a7c	eager_mmap.asm	/^ a7c:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a7c	lazy_mmap.asm	/^ a7c:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a7c	ln.asm	/^ a7c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a7c	mkdir.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7c	rm.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7d	ls.asm	/^     a7d:	ff d0                	callq  *%rax$/;"	l
a7d	stressfs.asm	/^ a7d:	77 17                	ja     a96 <free+0x4f>$/;"	l
a7d	usertests.asm	/^     a7d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7e	bad_mmap.asm	/^ a7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a7e	cat.asm	/^ a7e:	77 2f                	ja     aaf <free+0x71>$/;"	l
a7e	divide.asm	/^ a7e:	01 $/;"	l
a7e	echo.asm	/^ a7e:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a7e	grep.asm	/^ a7e:	73 23                	jae    aa3 <printf+0x14b>$/;"	l
a7e	init.asm	/^ a7e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a7e	kill.asm	/^ a7e:	00 00 00 $/;"	l
a7e	wc.asm	/^ a7e:	00 00 00 $/;"	l
a7e	zombie.asm	/^ a7e:	83 c0 01             	add    $0x1,%eax$/;"	l
a7f	divide.asm	/^ a7f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a7f	ln.asm	/^ a7f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a7f	ls.asm	/^     a7f:	e9 76 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a7f	sh.asm	/^     a7f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7f	stressfs.asm	/^ a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a8	cat.asm	/^  a8:	00 00 00 $/;"	l
a8	forktest.asm	/^  a8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8	kill.asm	/^  a8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
a8	ls.asm	/^      a8:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
a8	zombie.asm	/^  a8:	c9                   	leaveq $/;"	l
a80	cat.asm	/^ a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a80	grep.asm	/^ a80:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a80	mkdir.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a80	rm.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a81	imshow.asm	/^ a81:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a81	init.asm	/^ a81:	89 c0                	mov    %eax,%eax$/;"	l
a81	kill.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	wc.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	zombie.asm	/^ a81:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
a82	bad_mmap.asm	/^ a82:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a82	prettyprint.asm	/^     a82:	00 00 00 $/;"	l
a82	usertests.asm	/^     a82:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
a83	eager_mmap.asm	/^ a83:	00 00 00 $/;"	l
a83	echo.asm	/^ a83:	75 07                	jne    a8c <morecore+0x41>$/;"	l
a83	init.asm	/^ a83:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a83	kill.asm	/^ a83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a83	lazy_mmap.asm	/^ a83:	00 00 00 $/;"	l
a83	mkdir.asm	/^ a83:	90                   	nop$/;"	l
a83	rm.asm	/^ a83:	90                   	nop$/;"	l
a83	stressfs.asm	/^ a83:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a83	wc.asm	/^ a83:	eb 38                	jmp    abd <printf+0x373>$/;"	l
a84	cat.asm	/^ a84:	48 8b 00             	mov    (%rax),%rax$/;"	l
a84	ls.asm	/^     a84:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a84	mkdir.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	rm.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	sh.asm	/^     a84:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
a84	zombie.asm	/^ a84:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a85	echo.asm	/^ a85:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a85	mkdir.asm	/^ a85:	c3                   	retq   $/;"	l
a85	prettyprint.asm	/^     a85:	e9 9a 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
a85	rm.asm	/^ a85:	c3                   	retq   $/;"	l
a85	wc.asm	/^ a85:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a86	bad_mmap.asm	/^ a86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a86	divide.asm	/^ a86:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a86	eager_mmap.asm	/^ a86:	ff d0                	callq  *%rax$/;"	l
a86	lazy_mmap.asm	/^ a86:	ff d0                	callq  *%rax$/;"	l
a86	ln.asm	/^ a86:	77 07                	ja     a8f <morecore+0x1b>$/;"	l
a86	mkdir.asm	/^ a86:	55                   	push   %rbp$/;"	l
a86	rm.asm	/^ a86:	55                   	push   %rbp$/;"	l
a87	cat.asm	/^ a87:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a87	grep.asm	/^ a87:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a87	init.asm	/^ a87:	48 89 c2             	mov    %rax,%rdx$/;"	l
a87	kill.asm	/^ a87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a87	mkdir.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	rm.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	stressfs.asm	/^ a87:	77 2f                	ja     ab8 <free+0x71>$/;"	l
a88	eager_mmap.asm	/^ a88:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a88	imshow.asm	/^ a88:	00 $/;"	l
a88	lazy_mmap.asm	/^ a88:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a88	ln.asm	/^ a88:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a89	divide.asm	/^ a89:	84 c0                	test   %al,%al$/;"	l
a89	imshow.asm	/^ a89:	75 3e                	jne    ac9 <printf+0x298>$/;"	l
a89	stressfs.asm	/^ a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a89	usertests.asm	/^     a89:	00 00 00 $/;"	l
a8a	bad_mmap.asm	/^ a8a:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
a8a	echo.asm	/^ a8a:	eb 36                	jmp    ac2 <morecore+0x77>$/;"	l
a8a	init.asm	/^ a8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a8a	mkdir.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8a	prettyprint.asm	/^     a8a:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a8a	rm.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8b	cat.asm	/^ a8b:	77 22                	ja     aaf <free+0x71>$/;"	l
a8b	divide.asm	/^ a8b:	75 c7                	jne    a54 <printf+0x26d>$/;"	l
a8b	imshow.asm	/^ a8b:	48 b8 b8 0f 00 00 00 	movabs $0xfb8,%rax$/;"	l
a8b	ls.asm	/^     a8b:	0f 85 69 02 00 00    	jne    cfa <printf+0x37d>$/;"	l
a8b	sh.asm	/^     a8b:	00 00 00 $/;"	l
a8b	wc.asm	/^ a8b:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a8b	zombie.asm	/^ a8b:	00 00 00 $/;"	l
a8c	echo.asm	/^ a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8c	kill.asm	/^ a8c:	75 07                	jne    a95 <morecore+0x41>$/;"	l
a8c	usertests.asm	/^     a8c:	ff d1                	callq  *%rcx$/;"	l
a8d	cat.asm	/^ a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8d	divide.asm	/^ a8d:	e9 c8 00 00 00       	jmpq   b5a <printf+0x373>$/;"	l
a8d	grep.asm	/^ a8d:	89 d2                	mov    %edx,%edx$/;"	l
a8d	stressfs.asm	/^ a8d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8e	init.asm	/^ a8e:	48 01 c2             	add    %rax,%rdx$/;"	l
a8e	kill.asm	/^ a8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8e	mkdir.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	rm.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	sh.asm	/^     a8e:	ff d1                	callq  *%rcx$/;"	l
a8e	usertests.asm	/^     a8e:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a8e	zombie.asm	/^ a8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8f	eager_mmap.asm	/^ a8f:	00 00 00 $/;"	l
a8f	grep.asm	/^ a8f:	48 01 d0             	add    %rdx,%rax$/;"	l
a8f	lazy_mmap.asm	/^ a8f:	00 00 00 $/;"	l
a8f	ln.asm	/^ a8f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a9	divide.asm	/^  a9:	ff d0                	callq  *%rax$/;"	l
a9	eager_mmap.asm	/^  a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9	echo.asm	/^  a9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a9	lazy_mmap.asm	/^  a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9	mkdir.asm	/^  a9:	00 00 00 $/;"	l
a9	rm.asm	/^  a9:	00 00 00 $/;"	l
a9	usertests.asm	/^      a9:	00 00 00 $/;"	l
a9	zombie.asm	/^  a9:	c3                   	retq   $/;"	l
a90	echo.asm	/^ a90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a90	prettyprint.asm	/^     a90:	0f be d0             	movsbl %al,%edx$/;"	l
a90	sh.asm	/^     a90:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
a90	stressfs.asm	/^ a90:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a90	wc.asm	/^ a90:	89 c7                	mov    %eax,%edi$/;"	l
a91	bad_mmap.asm	/^ a91:	00 00 00 $/;"	l
a91	cat.asm	/^ a91:	48 8b 00             	mov    (%rax),%rax$/;"	l
a91	init.asm	/^ a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a91	ls.asm	/^     a91:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a91	mkdir.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	rm.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	zombie.asm	/^ a91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a92	divide.asm	/^ a92:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
a92	eager_mmap.asm	/^ a92:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a92	grep.asm	/^ a92:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a92	imshow.asm	/^ a92:	00 00 00 $/;"	l
a92	lazy_mmap.asm	/^ a92:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a92	ln.asm	/^ a92:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a92	wc.asm	/^ a92:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a93	kill.asm	/^ a93:	eb 36                	jmp    acb <morecore+0x77>$/;"	l
a93	prettyprint.asm	/^     a93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a94	bad_mmap.asm	/^ a94:	48 8b 00             	mov    (%rax),%rax$/;"	l
a94	cat.asm	/^ a94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a94	echo.asm	/^ a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a94	stressfs.asm	/^ a94:	77 22                	ja     ab8 <free+0x71>$/;"	l
a95	imshow.asm	/^ a95:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a95	init.asm	/^ a95:	48 8b 00             	mov    (%rax),%rax$/;"	l
a95	kill.asm	/^ a95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a95	ln.asm	/^ a95:	89 c7                	mov    %eax,%edi$/;"	l
a95	usertests.asm	/^     a95:	00 00 00 $/;"	l
a95	zombie.asm	/^ a95:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
a96	stressfs.asm	/^ a96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a97	bad_mmap.asm	/^ a97:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a97	ln.asm	/^ a97:	48 b8 78 04 00 00 00 	movabs $0x478,%rax$/;"	l
a97	sh.asm	/^     a97:	00 00 00 $/;"	l
a98	cat.asm	/^ a98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a98	echo.asm	/^ a98:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a98	grep.asm	/^ a98:	83 c2 08             	add    $0x8,%edx$/;"	l
a98	init.asm	/^ a98:	48 39 c2             	cmp    %rax,%rdx$/;"	l
a98	ls.asm	/^     a98:	75 65                	jne    aff <printf+0x182>$/;"	l
a98	mkdir.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	rm.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	usertests.asm	/^     a98:	ff d0                	callq  *%rax$/;"	l
a99	divide.asm	/^ a99:	75 5d                	jne    af8 <printf+0x311>$/;"	l
a99	eager_mmap.asm	/^ a99:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a99	kill.asm	/^ a99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a99	lazy_mmap.asm	/^ a99:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a99	prettyprint.asm	/^     a99:	89 d6                	mov    %edx,%esi$/;"	l
a99	wc.asm	/^ a99:	00 00 00 $/;"	l
a9a	ls.asm	/^     a9a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9a	mkdir.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	rm.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	sh.asm	/^     a9a:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
a9a	stressfs.asm	/^ a9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
a9a	usertests.asm	/^     a9a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a9a	zombie.asm	/^ a9a:	75 4a                	jne    ae6 <malloc+0x7e>$/;"	l
a9b	bad_mmap.asm	/^ a9b:	eb 2f                	jmp    acc <free+0x5a>$/;"	l
a9b	divide.asm	/^ a9b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9b	echo.asm	/^ a9b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a9b	grep.asm	/^ a9b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a9b	init.asm	/^ a9b:	75 2d                	jne    aca <free+0xc1>$/;"	l
a9b	prettyprint.asm	/^     a9b:	89 c7                	mov    %eax,%edi$/;"	l
a9c	cat.asm	/^ a9c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a9c	imshow.asm	/^ a9c:	eb 2b                	jmp    ac9 <printf+0x298>$/;"	l
a9c	wc.asm	/^ a9c:	ff d0                	callq  *%rax$/;"	l
a9c	zombie.asm	/^ a9c:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
a9d	bad_mmap.asm	/^ a9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a9d	init.asm	/^ a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9d	kill.asm	/^ a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9d	prettyprint.asm	/^     a9d:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
a9d	stressfs.asm	/^ a9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a9e	echo.asm	/^ a9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9e	imshow.asm	/^ a9e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a9e	ln.asm	/^ a9e:	00 00 00 $/;"	l
a9e	usertests.asm	/^     a9e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a9e	wc.asm	/^ a9e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a9f	eager_mmap.asm	/^ a9f:	48 63 d0             	movslq %eax,%rdx$/;"	l
a9f	lazy_mmap.asm	/^ a9f:	48 63 d0             	movslq %eax,%rdx$/;"	l
aa	bad_mmap.asm	/^  aa:	48 be fb 0d 00 00 00 	movabs $0xdfb,%rsi$/;"	l
aa	ln.asm	/^  aa:	48 b8 ce 03 00 00 00 	movabs $0x3ce,%rax$/;"	l
aa	prettyprint.asm	/^      aa:	00 00 00 $/;"	l
aa	sh.asm	/^      aa:	48 be 6f 1d 00 00 00 	movabs $0x1d6f,%rsi$/;"	l
aa	wc.asm	/^  aa:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
aa	zombie.asm	/^  aa:	55                   	push   %rbp$/;"	l
aa0	cat.asm	/^ aa0:	76 c7                	jbe    a69 <free+0x2b>$/;"	l
aa0	ls.asm	/^     aa0:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	bad_mmap.asm	/^ aa1:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa1	divide.asm	/^ aa1:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	grep.asm	/^ aa1:	eb 12                	jmp    ab5 <printf+0x15d>$/;"	l
aa1	init.asm	/^ aa1:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
aa1	kill.asm	/^ aa1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
aa1	ln.asm	/^ aa1:	ff d0                	callq  *%rax$/;"	l
aa1	mkdir.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	rm.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	sh.asm	/^     aa1:	00 00 00 $/;"	l
aa1	stressfs.asm	/^ aa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa1	usertests.asm	/^     aa1:	3d 8b 00 00 00       	cmp    $0x8b,%eax$/;"	l
aa2	cat.asm	/^ aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aa2	eager_mmap.asm	/^ aa2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
aa2	echo.asm	/^ aa2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aa2	lazy_mmap.asm	/^ aa2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
aa3	grep.asm	/^ aa3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
aa3	ln.asm	/^ aa3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aa3	ls.asm	/^     aa3:	73 23                	jae    ac8 <printf+0x14b>$/;"	l
aa3	zombie.asm	/^ aa3:	00 00 00 $/;"	l
aa4	bad_mmap.asm	/^ aa4:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa4	divide.asm	/^ aa4:	73 23                	jae    ac9 <printf+0x2e2>$/;"	l
aa4	init.asm	/^ aa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aa4	kill.asm	/^ aa4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
aa4	mkdir.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	prettyprint.asm	/^     aa4:	00 00 00 $/;"	l
aa4	rm.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	sh.asm	/^     aa4:	ff d0                	callq  *%rax$/;"	l
aa4	wc.asm	/^ aa4:	0f be d0             	movsbl %al,%edx$/;"	l
aa5	imshow.asm	/^ aa5:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aa5	ls.asm	/^     aa5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa5	stressfs.asm	/^ aa5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa6	cat.asm	/^ aa6:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa6	divide.asm	/^ aa6:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa6	echo.asm	/^ aa6:	48 89 c7             	mov    %rax,%rdi$/;"	l
aa6	sh.asm	/^     aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
aa6	usertests.asm	/^     aa6:	76 84                	jbe    a2c <writetest1+0x93>$/;"	l
aa6	zombie.asm	/^ aa6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aa7	kill.asm	/^ aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa7	ln.asm	/^ aa7:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
aa7	mkdir.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	prettyprint.asm	/^     aa7:	ff d0                	callq  *%rax$/;"	l
aa7	rm.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	wc.asm	/^ aa7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aa8	bad_mmap.asm	/^ aa8:	77 17                	ja     ac1 <free+0x4f>$/;"	l
aa8	imshow.asm	/^ aa8:	0f be d0             	movsbl %al,%edx$/;"	l
aa8	init.asm	/^ aa8:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa8	usertests.asm	/^     aa8:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
aa9	cat.asm	/^ aa9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
aa9	eager_mmap.asm	/^ aa9:	48 01 d0             	add    %rdx,%rax$/;"	l
aa9	echo.asm	/^ aa9:	48 b8 19 09 00 00 00 	movabs $0x919,%rax$/;"	l
aa9	lazy_mmap.asm	/^ aa9:	48 01 d0             	add    %rdx,%rax$/;"	l
aa9	mkdir.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	prettyprint.asm	/^     aa9:	e9 76 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
aa9	rm.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	stressfs.asm	/^ aa9:	76 c7                	jbe    a72 <free+0x2b>$/;"	l
aaa	bad_mmap.asm	/^ aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aaa	grep.asm	/^ aaa:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
aaa	sh.asm	/^     aaa:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaa	zombie.asm	/^ aaa:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
aab	imshow.asm	/^ aab:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aab	init.asm	/^ aab:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
aab	kill.asm	/^ aab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aab	stressfs.asm	/^ aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aab	usertests.asm	/^     aab:	89 c7                	mov    %eax,%edi$/;"	l
aac	eager_mmap.asm	/^ aac:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aac	lazy_mmap.asm	/^ aac:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aac	ln.asm	/^ aac:	75 07                	jne    ab5 <morecore+0x41>$/;"	l
aac	ls.asm	/^     aac:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	cat.asm	/^ aad:	76 ba                	jbe    a69 <free+0x2b>$/;"	l
aad	divide.asm	/^ aad:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	sh.asm	/^     aad:	48 b8 95 10 00 00 00 	movabs $0x1095,%rax$/;"	l
aad	usertests.asm	/^     aad:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
aad	wc.asm	/^ aad:	89 d6                	mov    %edx,%esi$/;"	l
aae	bad_mmap.asm	/^ aae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aae	grep.asm	/^ aae:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
aae	init.asm	/^ aae:	01 c2                	add    %eax,%edx$/;"	l
aae	ln.asm	/^ aae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aae	prettyprint.asm	/^     aae:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
aaf	cat.asm	/^ aaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aaf	eager_mmap.asm	/^ aaf:	84 c0                	test   %al,%al$/;"	l
aaf	kill.asm	/^ aaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaf	lazy_mmap.asm	/^ aaf:	84 c0                	test   %al,%al$/;"	l
aaf	stressfs.asm	/^ aaf:	48 8b 00             	mov    (%rax),%rax$/;"	l
aaf	wc.asm	/^ aaf:	89 c7                	mov    %eax,%edi$/;"	l
ab	cat.asm	/^  ab:	ff d2                	callq  *%rdx$/;"	l
ab	divide.asm	/^  ab:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ab	grep.asm	/^  ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab	imshow.asm	/^  ab:	48 ba 31 08 00 00 00 	movabs $0x831,%rdx$/;"	l
ab	init.asm	/^  ab:	00 00 00 $/;"	l
ab	stressfs.asm	/^  ab:	48 b9 a2 06 00 00 00 	movabs $0x6a2,%rcx$/;"	l
ab	zombie.asm	/^  ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ab0	echo.asm	/^ ab0:	00 00 00 $/;"	l
ab0	init.asm	/^ ab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab0	mkdir.asm	/^ ab0:	00 00 00 $/;"	l
ab0	rm.asm	/^ ab0:	00 00 00 $/;"	l
ab1	eager_mmap.asm	/^ ab1:	0f 85 fc fc ff ff    	jne    7b3 <printf+0x9e>$/;"	l
ab1	imshow.asm	/^ ab1:	89 d6                	mov    %edx,%esi$/;"	l
ab1	lazy_mmap.asm	/^ ab1:	0f 85 fc fc ff ff    	jne    7b3 <printf+0x9e>$/;"	l
ab1	wc.asm	/^ ab1:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
ab1	zombie.asm	/^ ab1:	00 00 00 $/;"	l
ab2	bad_mmap.asm	/^ ab2:	77 2f                	ja     ae3 <free+0x71>$/;"	l
ab2	kill.asm	/^ ab2:	48 b8 22 09 00 00 00 	movabs $0x922,%rax$/;"	l
ab2	ls.asm	/^     ab2:	89 d2                	mov    %edx,%edx$/;"	l
ab2	stressfs.asm	/^ ab2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ab3	cat.asm	/^ ab3:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ab3	divide.asm	/^ ab3:	89 d2                	mov    %edx,%edx$/;"	l
ab3	echo.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	imshow.asm	/^ ab3:	89 c7                	mov    %eax,%edi$/;"	l
ab3	ln.asm	/^ ab3:	eb 36                	jmp    aeb <morecore+0x77>$/;"	l
ab3	mkdir.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	rm.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab4	bad_mmap.asm	/^ ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab4	init.asm	/^ ab4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ab4	ls.asm	/^     ab4:	48 01 d0             	add    %rdx,%rax$/;"	l
ab4	sh.asm	/^     ab4:	00 00 00 $/;"	l
ab4	usertests.asm	/^     ab4:	00 00 00 $/;"	l
ab4	zombie.asm	/^ ab4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ab5	divide.asm	/^ ab5:	48 01 d0             	add    %rdx,%rax$/;"	l
ab5	echo.asm	/^ ab5:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ab5	grep.asm	/^ ab5:	8b 30                	mov    (%rax),%esi$/;"	l
ab5	imshow.asm	/^ ab5:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
ab5	ln.asm	/^ ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab5	mkdir.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab5	prettyprint.asm	/^     ab5:	0f 85 69 02 00 00    	jne    d24 <printf+0x37d>$/;"	l
ab5	rm.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab6	cat.asm	/^ ab6:	89 c0                	mov    %eax,%eax$/;"	l
ab6	stressfs.asm	/^ ab6:	76 ba                	jbe    a72 <free+0x2b>$/;"	l
ab7	eager_mmap.asm	/^ ab7:	90                   	nop$/;"	l
ab7	grep.asm	/^ ab7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ab7	init.asm	/^ ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab7	lazy_mmap.asm	/^ ab7:	90                   	nop$/;"	l
ab7	ls.asm	/^     ab7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab7	sh.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab7	usertests.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab8	bad_mmap.asm	/^ ab8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ab8	cat.asm	/^ ab8:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ab8	divide.asm	/^ ab8:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab8	eager_mmap.asm	/^ ab8:	c9                   	leaveq $/;"	l
ab8	lazy_mmap.asm	/^ ab8:	c9                   	leaveq $/;"	l
ab8	stressfs.asm	/^ ab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab8	wc.asm	/^ ab8:	00 00 00 $/;"	l
ab8	zombie.asm	/^ ab8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ab9	eager_mmap.asm	/^ ab9:	c3                   	retq   $/;"	l
ab9	kill.asm	/^ ab9:	00 00 00 $/;"	l
ab9	lazy_mmap.asm	/^ ab9:	c3                   	retq   $/;"	l
ab9	ln.asm	/^ ab9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ab9	mkdir.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	rm.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	sh.asm	/^     ab9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ab9	usertests.asm	/^     ab9:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
aba	eager_mmap.asm	/^ aba:	55                   	push   %rbp$/;"	l
aba	lazy_mmap.asm	/^ aba:	55                   	push   %rbp$/;"	l
abb	bad_mmap.asm	/^ abb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
abb	eager_mmap.asm	/^ abb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
abb	init.asm	/^ abb:	48 8b 00             	mov    (%rax),%rax$/;"	l
abb	lazy_mmap.asm	/^ abb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
abb	prettyprint.asm	/^     abb:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
abb	wc.asm	/^ abb:	ff d0                	callq  *%rax$/;"	l
abb	zombie.asm	/^ abb:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
abc	cat.asm	/^ abc:	48 89 c2             	mov    %rax,%rdx$/;"	l
abc	echo.asm	/^ abc:	00 00 00 $/;"	l
abc	imshow.asm	/^ abc:	00 00 00 $/;"	l
abc	kill.asm	/^ abc:	ff d0                	callq  *%rax$/;"	l
abc	stressfs.asm	/^ abc:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
abd	grep.asm	/^ abd:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
abd	ln.asm	/^ abd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abd	ls.asm	/^     abd:	83 c2 08             	add    $0x8,%edx$/;"	l
abd	sh.asm	/^     abd:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
abd	wc.asm	/^ abd:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
abe	divide.asm	/^ abe:	83 c2 08             	add    $0x8,%edx$/;"	l
abe	eager_mmap.asm	/^ abe:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
abe	init.asm	/^ abe:	48 8b 10             	mov    (%rax),%rdx$/;"	l
abe	kill.asm	/^ abe:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
abe	lazy_mmap.asm	/^ abe:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
abe	mkdir.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	rm.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	usertests.asm	/^     abe:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
abf	bad_mmap.asm	/^ abf:	77 22                	ja     ae3 <free+0x71>$/;"	l
abf	cat.asm	/^ abf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abf	echo.asm	/^ abf:	48 8b 00             	mov    (%rax),%rax$/;"	l
abf	imshow.asm	/^ abf:	ff d0                	callq  *%rax$/;"	l
abf	stressfs.asm	/^ abf:	89 c0                	mov    %eax,%eax$/;"	l
ac	echo.asm	/^  ac:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ac	kill.asm	/^  ac:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ac	mkdir.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	rm.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	usertests.asm	/^      ac:	89 c7                	mov    %eax,%edi$/;"	l
ac0	ls.asm	/^     ac0:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac0	mkdir.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac0	rm.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac1	bad_mmap.asm	/^ ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac1	divide.asm	/^ ac1:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac1	imshow.asm	/^ ac1:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
ac1	init.asm	/^ ac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac1	ln.asm	/^ ac1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ac1	sh.asm	/^     ac1:	5b                   	pop    %rbx$/;"	l
ac1	stressfs.asm	/^ ac1:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ac2	eager_mmap.asm	/^ ac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ac2	echo.asm	/^ ac2:	c9                   	leaveq $/;"	l
ac2	grep.asm	/^ ac2:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ac2	lazy_mmap.asm	/^ ac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ac2	prettyprint.asm	/^     ac2:	75 65                	jne    b29 <printf+0x182>$/;"	l
ac2	sh.asm	/^     ac2:	5d                   	pop    %rbp$/;"	l
ac2	zombie.asm	/^ ac2:	00 00 00 $/;"	l
ac3	cat.asm	/^ ac3:	48 01 c2             	add    %rax,%rdx$/;"	l
ac3	echo.asm	/^ ac3:	c3                   	retq   $/;"	l
ac3	sh.asm	/^     ac3:	c3                   	retq   $/;"	l
ac4	echo.asm	/^ ac4:	55                   	push   %rbp$/;"	l
ac4	ln.asm	/^ ac4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ac4	prettyprint.asm	/^     ac4:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ac4	sh.asm	/^     ac4:	55                   	push   %rbp$/;"	l
ac4	wc.asm	/^ ac4:	00 00 00 $/;"	l
ac5	bad_mmap.asm	/^ ac5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac5	echo.asm	/^ ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	init.asm	/^ ac5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ac5	kill.asm	/^ ac5:	00 00 00 $/;"	l
ac5	mkdir.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	rm.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	sh.asm	/^     ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	stressfs.asm	/^ ac5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ac5	usertests.asm	/^     ac5:	00 00 00 $/;"	l
ac5	zombie.asm	/^ ac5:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ac6	cat.asm	/^ ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac6	eager_mmap.asm	/^ ac6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ac6	lazy_mmap.asm	/^ ac6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ac6	ls.asm	/^     ac6:	eb 12                	jmp    ada <printf+0x15d>$/;"	l
ac7	divide.asm	/^ ac7:	eb 12                	jmp    adb <printf+0x2f4>$/;"	l
ac7	grep.asm	/^ ac7:	89 c7                	mov    %eax,%edi$/;"	l
ac7	ln.asm	/^ ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac7	mkdir.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	rm.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	wc.asm	/^ ac7:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
ac8	bad_mmap.asm	/^ ac8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ac8	echo.asm	/^ ac8:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ac8	imshow.asm	/^ ac8:	01 $/;"	l
ac8	init.asm	/^ ac8:	eb 0e                	jmp    ad8 <free+0xcf>$/;"	l
ac8	kill.asm	/^ ac8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac8	ls.asm	/^     ac8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac8	sh.asm	/^     ac8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ac8	stressfs.asm	/^ ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac8	usertests.asm	/^     ac8:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
ac8	zombie.asm	/^ ac8:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ac9	divide.asm	/^ ac9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac9	grep.asm	/^ ac9:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
ac9	imshow.asm	/^ ac9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
aca	cat.asm	/^ aca:	48 8b 00             	mov    (%rax),%rax$/;"	l
aca	eager_mmap.asm	/^ aca:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
aca	init.asm	/^ aca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aca	lazy_mmap.asm	/^ aca:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
aca	prettyprint.asm	/^     aca:	83 f8 30             	cmp    $0x30,%eax$/;"	l
acb	kill.asm	/^ acb:	c9                   	leaveq $/;"	l
acb	ln.asm	/^ acb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
acb	mkdir.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acb	rm.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acc	bad_mmap.asm	/^ acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acc	echo.asm	/^ acc:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
acc	kill.asm	/^ acc:	c3                   	retq   $/;"	l
acc	sh.asm	/^     acc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
acc	stressfs.asm	/^ acc:	48 01 c2             	add    %rax,%rdx$/;"	l
acd	cat.asm	/^ acd:	48 39 c2             	cmp    %rax,%rdx$/;"	l
acd	kill.asm	/^ acd:	55                   	push   %rbp$/;"	l
acd	prettyprint.asm	/^     acd:	73 23                	jae    af2 <printf+0x14b>$/;"	l
ace	eager_mmap.asm	/^ ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ace	init.asm	/^ ace:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ace	kill.asm	/^ ace:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ace	lazy_mmap.asm	/^ ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ace	wc.asm	/^ ace:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
acf	echo.asm	/^ acf:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
acf	ln.asm	/^ acf:	48 89 c7             	mov    %rax,%rdi$/;"	l
acf	ls.asm	/^     acf:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
acf	mkdir.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	prettyprint.asm	/^     acf:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
acf	rm.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	stressfs.asm	/^ acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
acf	usertests.asm	/^     acf:	00 00 00 $/;"	l
acf	zombie.asm	/^ acf:	00 00 00 $/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	cat.asm	/^  ad:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
ad	eager_mmap.asm	/^  ad:	48 89 c2             	mov    %rax,%rdx$/;"	l
ad	forktest.asm	/^  ad:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx$/;"	l
ad	lazy_mmap.asm	/^  ad:	48 89 c2             	mov    %rax,%rdx$/;"	l
ad	prettyprint.asm	/^      ad:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ad	wc.asm	/^  ad:	7c 88                	jl     37 <wc+0x37>$/;"	l
ad0	bad_mmap.asm	/^ ad0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ad0	cat.asm	/^ ad0:	75 2d                	jne    aff <free+0xc1>$/;"	l
ad0	divide.asm	/^ ad0:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ad0	grep.asm	/^ ad0:	00 00 00 $/;"	l
ad0	imshow.asm	/^ ad0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ad0	sh.asm	/^     ad0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ad1	init.asm	/^ ad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad1	kill.asm	/^ ad1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ad2	cat.asm	/^ ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad2	eager_mmap.asm	/^ ad2:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ad2	echo.asm	/^ ad2:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ad2	lazy_mmap.asm	/^ ad2:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ad2	ln.asm	/^ ad2:	48 b8 42 09 00 00 00 	movabs $0x942,%rax$/;"	l
ad2	usertests.asm	/^     ad2:	ff d0                	callq  *%rax$/;"	l
ad2	zombie.asm	/^ ad2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ad3	grep.asm	/^ ad3:	ff d0                	callq  *%rax$/;"	l
ad3	imshow.asm	/^ ad3:	84 c0                	test   %al,%al$/;"	l
ad3	ls.asm	/^     ad3:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad3	mkdir.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	rm.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	stressfs.asm	/^ ad3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ad4	bad_mmap.asm	/^ ad4:	76 c7                	jbe    a9d <free+0x2b>$/;"	l
ad4	divide.asm	/^ ad4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad4	sh.asm	/^     ad4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ad4	usertests.asm	/^     ad4:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ad4	wc.asm	/^ ad4:	48 63 d0             	movslq %eax,%rdx$/;"	l
ad5	grep.asm	/^ ad5:	e9 f1 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
ad5	imshow.asm	/^ ad5:	75 c7                	jne    a9e <printf+0x26d>$/;"	l
ad5	init.asm	/^ ad5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ad5	kill.asm	/^ ad5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ad5	zombie.asm	/^ ad5:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ad6	bad_mmap.asm	/^ ad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad6	cat.asm	/^ ad6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ad6	echo.asm	/^ ad6:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ad6	mkdir.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	prettyprint.asm	/^     ad6:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ad6	rm.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	stressfs.asm	/^ ad6:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ad7	imshow.asm	/^ ad7:	e9 c8 00 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
ad7	usertests.asm	/^     ad7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ad7	wc.asm	/^ ad7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ad8	init.asm	/^ ad8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad8	kill.asm	/^ ad8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ad8	sh.asm	/^     ad8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ad9	cat.asm	/^ ad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad9	eager_mmap.asm	/^ ad9:	00 00 00 $/;"	l
ad9	lazy_mmap.asm	/^ ad9:	00 00 00 $/;"	l
ad9	ln.asm	/^ ad9:	00 00 00 $/;"	l
ad9	mkdir.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	rm.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	stressfs.asm	/^ ad9:	75 2d                	jne    b08 <free+0xc1>$/;"	l
ada	bad_mmap.asm	/^ ada:	48 8b 00             	mov    (%rax),%rax$/;"	l
ada	echo.asm	/^ ada:	83 c0 01             	add    $0x1,%eax$/;"	l
ada	grep.asm	/^ ada:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
ada	ls.asm	/^     ada:	8b 30                	mov    (%rax),%esi$/;"	l
adb	divide.asm	/^ adb:	8b 00                	mov    (%rax),%eax$/;"	l
adb	kill.asm	/^ adb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
adb	stressfs.asm	/^ adb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
adb	usertests.asm	/^     adb:	79 35                	jns    b12 <writetest1+0x179>$/;"	l
adc	eager_mmap.asm	/^ adc:	48 8b 00             	mov    (%rax),%rax$/;"	l
adc	imshow.asm	/^ adc:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
adc	init.asm	/^ adc:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
adc	lazy_mmap.asm	/^ adc:	48 8b 00             	mov    (%rax),%rax$/;"	l
adc	ln.asm	/^ adc:	ff d0                	callq  *%rax$/;"	l
adc	ls.asm	/^     adc:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
adc	prettyprint.asm	/^     adc:	89 d2                	mov    %edx,%edx$/;"	l
adc	sh.asm	/^     adc:	48 89 d6             	mov    %rdx,%rsi$/;"	l
adc	zombie.asm	/^ adc:	00 00 00 $/;"	l
add	bad_mmap.asm	/^ add:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
add	cat.asm	/^ add:	48 8b 00             	mov    (%rax),%rax$/;"	l
add	divide.asm	/^ add:	0f be d0             	movsbl %al,%edx$/;"	l
add	echo.asm	/^ add:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
add	mkdir.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	rm.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	usertests.asm	/^     add:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
addr	kernel.asm	/^  addr = (uint64) tss;$/;"	d
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr_p	mp.h	/^  uint32 addr_p;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addr_t	kernel.asm	/^addr_t sys_mmap() {$/;"	l
addr_t	types.h	/^typedef unsigned long addr_t;$/;"	t
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	ln.asm	/^ ade:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
ade	prettyprint.asm	/^     ade:	48 01 d0             	add    %rdx,%rax$/;"	l
ade	wc.asm	/^ ade:	48 01 d0             	add    %rdx,%rax$/;"	l
adf	eager_mmap.asm	/^ adf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
adf	init.asm	/^ adf:	89 c0                	mov    %eax,%eax$/;"	l
adf	kill.asm	/^ adf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
adf	lazy_mmap.asm	/^ adf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
adf	sh.asm	/^     adf:	48 89 c7             	mov    %rax,%rdi$/;"	l
adf	stressfs.asm	/^ adf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
adf	zombie.asm	/^ adf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
ae	divide.asm	/^  ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ae	init.asm	/^  ae:	ff d0                	callq  *%rax$/;"	l
ae	mkdir.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	rm.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	usertests.asm	/^      ae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ae	zombie.asm	/^  ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ae0	cat.asm	/^ ae0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae0	divide.asm	/^ ae0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ae0	echo.asm	/^ ae0:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ae1	bad_mmap.asm	/^ ae1:	76 ba                	jbe    a9d <free+0x2b>$/;"	l
ae1	grep.asm	/^ ae1:	74 09                	je     aec <printf+0x194>$/;"	l
ae1	init.asm	/^ ae1:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ae1	mkdir.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	prettyprint.asm	/^     ae1:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ae1	rm.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	wc.asm	/^ ae1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ae2	ls.asm	/^     ae2:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
ae2	sh.asm	/^     ae2:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
ae2	stressfs.asm	/^ ae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae3	bad_mmap.asm	/^ ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae3	cat.asm	/^ ae3:	01 c2                	add    %eax,%edx$/;"	l
ae3	eager_mmap.asm	/^ ae3:	eb 2f                	jmp    b14 <free+0x5a>$/;"	l
ae3	grep.asm	/^ ae3:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
ae3	imshow.asm	/^ ae3:	75 5d                	jne    b42 <printf+0x311>$/;"	l
ae3	kill.asm	/^ ae3:	83 c0 01             	add    $0x1,%eax$/;"	l
ae3	lazy_mmap.asm	/^ ae3:	eb 2f                	jmp    b14 <free+0x5a>$/;"	l
ae4	mkdir.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	rm.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	usertests.asm	/^     ae4:	00 00 00 $/;"	l
ae4	wc.asm	/^ ae4:	84 c0                	test   %al,%al$/;"	l
ae5	cat.asm	/^ ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae5	eager_mmap.asm	/^ ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae5	imshow.asm	/^ ae5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ae5	init.asm	/^ ae5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ae5	lazy_mmap.asm	/^ ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae5	ln.asm	/^ ae5:	00 00 00 $/;"	l
ae6	divide.asm	/^ ae6:	89 d6                	mov    %edx,%esi$/;"	l
ae6	kill.asm	/^ ae6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ae6	stressfs.asm	/^ ae6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae6	wc.asm	/^ ae6:	0f 85 fc fc ff ff    	jne    7e8 <printf+0x9e>$/;"	l
ae6	zombie.asm	/^ ae6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae7	bad_mmap.asm	/^ ae7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae7	echo.asm	/^ ae7:	00 00 00 $/;"	l
ae7	ls.asm	/^     ae7:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ae7	prettyprint.asm	/^     ae7:	83 c2 08             	add    $0x8,%edx$/;"	l
ae7	usertests.asm	/^     ae7:	8b 00                	mov    (%rax),%eax$/;"	l
ae8	divide.asm	/^ ae8:	89 c7                	mov    %eax,%edi$/;"	l
ae8	init.asm	/^ ae8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae8	ln.asm	/^ ae8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	cat.asm	/^ ae9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ae9	eager_mmap.asm	/^ ae9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	kill.asm	/^ ae9:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
ae9	lazy_mmap.asm	/^ ae9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	sh.asm	/^     ae9:	00 00 00 $/;"	l
ae9	stressfs.asm	/^ ae9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae9	usertests.asm	/^     ae9:	48 be 90 6b 00 00 00 	movabs $0x6b90,%rsi$/;"	l
aea	bad_mmap.asm	/^ aea:	89 c0                	mov    %eax,%eax$/;"	l
aea	divide.asm	/^ aea:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
aea	echo.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aea	grep.asm	/^ aea:	75 65                	jne    b51 <printf+0x1f9>$/;"	l
aea	prettyprint.asm	/^     aea:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
aea	zombie.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aeb	imshow.asm	/^ aeb:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aeb	ln.asm	/^ aeb:	c9                   	leaveq $/;"	l
aeb	mkdir.asm	/^ aeb:	00 00 00 $/;"	l
aeb	rm.asm	/^ aeb:	00 00 00 $/;"	l
aec	bad_mmap.asm	/^ aec:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
aec	cat.asm	/^ aec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aec	eager_mmap.asm	/^ aec:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aec	grep.asm	/^ aec:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
aec	init.asm	/^ aec:	48 01 d0             	add    %rdx,%rax$/;"	l
aec	lazy_mmap.asm	/^ aec:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aec	ln.asm	/^ aec:	c3                   	retq   $/;"	l
aec	ls.asm	/^     aec:	89 c7                	mov    %eax,%edi$/;"	l
aec	sh.asm	/^     aec:	ff d0                	callq  *%rax$/;"	l
aec	stressfs.asm	/^ aec:	01 c2                	add    %eax,%edx$/;"	l
aec	wc.asm	/^ aec:	90                   	nop$/;"	l
aed	echo.asm	/^ aed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aed	ln.asm	/^ aed:	55                   	push   %rbp$/;"	l
aed	wc.asm	/^ aed:	c9                   	leaveq $/;"	l
aed	zombie.asm	/^ aed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	imshow.asm	/^ aee:	73 23                	jae    b13 <printf+0x2e2>$/;"	l
aee	ln.asm	/^ aee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
aee	ls.asm	/^     aee:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
aee	mkdir.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	rm.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	sh.asm	/^     aee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	stressfs.asm	/^ aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aee	wc.asm	/^ aee:	c3                   	retq   $/;"	l
aef	init.asm	/^ aef:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
aef	wc.asm	/^ aef:	55                   	push   %rbp$/;"	l
af	echo.asm	/^  af:	89 d1                	mov    %edx,%ecx$/;"	l
af	grep.asm	/^  af:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
af	kill.asm	/^  af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
af	ls.asm	/^      af:	00 00 00 $/;"	l
af	wc.asm	/^  af:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af0	bad_mmap.asm	/^ af0:	48 89 c2             	mov    %rax,%rdx$/;"	l
af0	cat.asm	/^ af0:	48 8b 00             	mov    (%rax),%rax$/;"	l
af0	eager_mmap.asm	/^ af0:	77 17                	ja     b09 <free+0x4f>$/;"	l
af0	imshow.asm	/^ af0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af0	kill.asm	/^ af0:	00 00 00 $/;"	l
af0	lazy_mmap.asm	/^ af0:	77 17                	ja     b09 <free+0x4f>$/;"	l
af0	mkdir.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	prettyprint.asm	/^     af0:	eb 12                	jmp    b04 <printf+0x15d>$/;"	l
af0	rm.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	usertests.asm	/^     af0:	00 00 00 $/;"	l
af0	wc.asm	/^ af0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
af1	divide.asm	/^ af1:	00 00 00 $/;"	l
af1	echo.asm	/^ af1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
af1	ln.asm	/^ af1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
af1	zombie.asm	/^ af1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af2	eager_mmap.asm	/^ af2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af2	grep.asm	/^ af2:	83 f8 30             	cmp    $0x30,%eax$/;"	l
af2	lazy_mmap.asm	/^ af2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af2	prettyprint.asm	/^     af2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
af2	sh.asm	/^     af2:	eb 38                	jmp    b2c <parseline+0x68>$/;"	l
af2	stressfs.asm	/^ af2:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
af3	bad_mmap.asm	/^ af3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af3	cat.asm	/^ af3:	48 8b 10             	mov    (%rax),%rdx$/;"	l
af3	init.asm	/^ af3:	75 27                	jne    b1c <free+0x113>$/;"	l
af3	kill.asm	/^ af3:	48 8b 00             	mov    (%rax),%rax$/;"	l
af3	usertests.asm	/^     af3:	89 c7                	mov    %eax,%edi$/;"	l
af3	wc.asm	/^ af3:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
af4	divide.asm	/^ af4:	ff d0                	callq  *%rax$/;"	l
af4	sh.asm	/^     af4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
af5	grep.asm	/^ af5:	73 23                	jae    b1a <printf+0x1c2>$/;"	l
af5	init.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	ln.asm	/^ af5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
af5	ls.asm	/^     af5:	00 00 00 $/;"	l
af5	stressfs.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	usertests.asm	/^     af5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
af5	zombie.asm	/^ af5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
af6	cat.asm	/^ af6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af6	divide.asm	/^ af6:	eb 62                	jmp    b5a <printf+0x373>$/;"	l
af6	eager_mmap.asm	/^ af6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
af6	echo.asm	/^ af6:	75 4a                	jne    b42 <malloc+0x7e>$/;"	l
af6	kill.asm	/^ af6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
af6	lazy_mmap.asm	/^ af6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
af7	bad_mmap.asm	/^ af7:	48 01 c2             	add    %rax,%rdx$/;"	l
af7	grep.asm	/^ af7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af7	imshow.asm	/^ af7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
af7	mkdir.asm	/^ af7:	00 00 00 $/;"	l
af7	rm.asm	/^ af7:	00 00 00 $/;"	l
af7	wc.asm	/^ af7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
af8	divide.asm	/^ af8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
af8	echo.asm	/^ af8:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
af8	ln.asm	/^ af8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af8	ls.asm	/^     af8:	ff d0                	callq  *%rax$/;"	l
af8	sh.asm	/^     af8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
af8	zombie.asm	/^ af8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
af9	init.asm	/^ af9:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
af9	prettyprint.asm	/^     af9:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
af9	stressfs.asm	/^ af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	bad_mmap.asm	/^ afa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afa	cat.asm	/^ afa:	48 89 10             	mov    %rdx,(%rax)$/;"	l
afa	eager_mmap.asm	/^ afa:	77 2f                	ja     b2b <free+0x71>$/;"	l
afa	kill.asm	/^ afa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
afa	lazy_mmap.asm	/^ afa:	77 2f                	ja     b2b <free+0x71>$/;"	l
afa	ls.asm	/^     afa:	e9 f1 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
afa	mkdir.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	rm.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	usertests.asm	/^     afa:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
afb	ln.asm	/^ afb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
afb	wc.asm	/^ afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
afb	zombie.asm	/^ afb:	72 65                	jb     b62 <malloc+0xfa>$/;"	l
afc	eager_mmap.asm	/^ afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afc	init.asm	/^ afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
afc	lazy_mmap.asm	/^ afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afc	sh.asm	/^     afc:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
afc	stressfs.asm	/^ afc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
afd	cat.asm	/^ afd:	eb 0e                	jmp    b0d <free+0xcf>$/;"	l
afd	imshow.asm	/^ afd:	89 d2                	mov    %edx,%edx$/;"	l
afd	mkdir.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	prettyprint.asm	/^     afd:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
afd	rm.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	zombie.asm	/^ afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afe	bad_mmap.asm	/^ afe:	48 8b 00             	mov    (%rax),%rax$/;"	l
afe	grep.asm	/^ afe:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
afe	mkdir.asm	/^ afe:	c3                   	retq   $/;"	l
afe	rm.asm	/^ afe:	c3                   	retq   $/;"	l
aff	cat.asm	/^ aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aff	divide.asm	/^ aff:	75 21                	jne    b22 <printf+0x33b>$/;"	l
aff	echo.asm	/^ aff:	00 00 00 $/;"	l
aff	imshow.asm	/^ aff:	48 01 d0             	add    %rdx,%rax$/;"	l
aff	kill.asm	/^ aff:	75 4a                	jne    b4b <malloc+0x7e>$/;"	l
aff	ln.asm	/^ aff:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
aff	ls.asm	/^     aff:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
aff	mkdir.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	rm.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	stressfs.asm	/^ aff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aff	wc.asm	/^ aff:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
align	elf.h	/^  uint64 align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (addr_t)a;$/;"	d
apicid	kernel.asm	/^  apicid = lapic[ID] >> 24;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argaddr	syscall.c	/^argaddr(int n, addr_t *ip)$/;"	f
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argptest	usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	bad_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	cat.asm	/^   b:	eb 51                	jmp    5e <cat+0x5e>$/;"	l
b	eager_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	echo.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	forktest.asm	/^   b:	89 bd 4c ff ff ff    	mov    %edi,-0xb4(%rbp)$/;"	l
b	imshow.asm	/^   b:	89 bd ec fb ff ff    	mov    %edi,-0x414(%rbp)$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	lazy_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	ln.asm	/^   b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b	mkdir.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	prettyprint.asm	/^       b:	89 bd 7c ff ff ff    	mov    %edi,-0x84(%rbp)$/;"	l
b	rm.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	stressfs.asm	/^   b:	89 bd dc fd ff ff    	mov    %edi,-0x224(%rbp)$/;"	l
b	usertests.asm	/^       b:	00 00 00 $/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	zombie.asm	/^   b:	00 00 00 $/;"	l
b0	eager_mmap.asm	/^  b0:	48 be 3e 0e 00 00 00 	movabs $0xe3e,%rsi$/;"	l
b0	init.asm	/^  b0:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
b0	lazy_mmap.asm	/^  b0:	48 be 3e 0e 00 00 00 	movabs $0xe3e,%rsi$/;"	l
b0	mkdir.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b0	rm.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b00	eager_mmap.asm	/^ b00:	48 8b 00             	mov    (%rax),%rax$/;"	l
b00	init.asm	/^ b00:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b00	lazy_mmap.asm	/^ b00:	48 8b 00             	mov    (%rax),%rax$/;"	l
b00	mkdir.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b00	rm.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b01	bad_mmap.asm	/^ b01:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b01	divide.asm	/^ b01:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b01	kill.asm	/^ b01:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b01	sh.asm	/^     b01:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b01	usertests.asm	/^     b01:	00 00 00 $/;"	l
b01	zombie.asm	/^ b01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b02	echo.asm	/^ b02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b02	imshow.asm	/^ b02:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b03	cat.asm	/^ b03:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b03	eager_mmap.asm	/^ b03:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b03	init.asm	/^ b03:	01 c2                	add    %eax,%edx$/;"	l
b03	lazy_mmap.asm	/^ b03:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b03	ln.asm	/^ b03:	83 c0 01             	add    $0x1,%eax$/;"	l
b03	mkdir.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	rm.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	stressfs.asm	/^ b03:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b03	wc.asm	/^ b03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b04	bad_mmap.asm	/^ b04:	75 2d                	jne    b33 <free+0xc1>$/;"	l
b04	grep.asm	/^ b04:	89 d2                	mov    %edx,%edx$/;"	l
b04	prettyprint.asm	/^     b04:	8b 30                	mov    (%rax),%esi$/;"	l
b04	usertests.asm	/^     b04:	ff d2                	callq  *%rdx$/;"	l
b04	zombie.asm	/^ b04:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b05	init.asm	/^ b05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b06	bad_mmap.asm	/^ b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b06	cat.asm	/^ b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b06	echo.asm	/^ b06:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b06	grep.asm	/^ b06:	48 01 d0             	add    %rdx,%rax$/;"	l
b06	ln.asm	/^ b06:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b06	ls.asm	/^     b06:	74 09                	je     b11 <printf+0x194>$/;"	l
b06	prettyprint.asm	/^     b06:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b06	sh.asm	/^     b06:	48 89 c7             	mov    %rax,%rdi$/;"	l
b06	stressfs.asm	/^ b06:	eb 0e                	jmp    b16 <free+0xcf>$/;"	l
b06	usertests.asm	/^     b06:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b07	divide.asm	/^ b07:	0f be d0             	movsbl %al,%edx$/;"	l
b07	eager_mmap.asm	/^ b07:	77 22                	ja     b2b <free+0x71>$/;"	l
b07	lazy_mmap.asm	/^ b07:	77 22                	ja     b2b <free+0x71>$/;"	l
b07	mkdir.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	rm.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	wc.asm	/^ b07:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
b07	zombie.asm	/^ b07:	75 10                	jne    b19 <malloc+0xb1>$/;"	l
b08	imshow.asm	/^ b08:	83 c2 08             	add    $0x8,%edx$/;"	l
b08	kill.asm	/^ b08:	00 00 00 $/;"	l
b08	ls.asm	/^     b08:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b08	stressfs.asm	/^ b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	eager_mmap.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	grep.asm	/^ b09:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b09	init.asm	/^ b09:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b09	lazy_mmap.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	ln.asm	/^ b09:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b09	sh.asm	/^     b09:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b09	zombie.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0a	bad_mmap.asm	/^ b0a:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b0a	cat.asm	/^ b0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b0a	divide.asm	/^ b0a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b0a	mkdir.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0a	rm.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0b	imshow.asm	/^ b0b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b0b	kill.asm	/^ b0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b0c	init.asm	/^ b0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b0c	prettyprint.asm	/^     b0c:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b0c	stressfs.asm	/^ b0c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0d	bad_mmap.asm	/^ b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0d	cat.asm	/^ b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0d	eager_mmap.asm	/^ b0d:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0d	echo.asm	/^ b0d:	00 00 00 $/;"	l
b0d	lazy_mmap.asm	/^ b0d:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0d	mkdir.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	rm.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	usertests.asm	/^     b0d:	00 00 00 $/;"	l
b0d	zombie.asm	/^ b0d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0e	wc.asm	/^ b0e:	00 00 00 $/;"	l
b0f	grep.asm	/^ b0f:	83 c2 08             	add    $0x8,%edx$/;"	l
b0f	kill.asm	/^ b0f:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b0f	ls.asm	/^     b0f:	75 65                	jne    b76 <printf+0x1f9>$/;"	l
b0f	stressfs.asm	/^ b0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b1	bad_mmap.asm	/^  b1:	00 00 00 $/;"	l
b1	echo.asm	/^  b1:	fc                   	cld    $/;"	l
b1	ln.asm	/^  b1:	00 00 00 $/;"	l
b1	sh.asm	/^      b1:	00 00 00 $/;"	l
b10	divide.asm	/^ b10:	89 d6                	mov    %edx,%esi$/;"	l
b10	eager_mmap.asm	/^ b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b10	echo.asm	/^ b10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b10	init.asm	/^ b10:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b10	lazy_mmap.asm	/^ b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b10	ln.asm	/^ b10:	00 00 00 $/;"	l
b10	sh.asm	/^     b10:	00 00 00 $/;"	l
b10	usertests.asm	/^     b10:	ff d0                	callq  *%rax$/;"	l
b10	zombie.asm	/^ b10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b11	bad_mmap.asm	/^ b11:	48 8b 00             	mov    (%rax),%rax$/;"	l
b11	cat.asm	/^ b11:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b11	imshow.asm	/^ b11:	eb 12                	jmp    b25 <printf+0x2f4>$/;"	l
b11	ls.asm	/^     b11:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b11	mkdir.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	prettyprint.asm	/^     b11:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b11	rm.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	wc.asm	/^ b11:	48 8b 00             	mov    (%rax),%rax$/;"	l
b12	divide.asm	/^ b12:	89 c7                	mov    %eax,%edi$/;"	l
b12	grep.asm	/^ b12:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b12	usertests.asm	/^     b12:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
b13	imshow.asm	/^ b13:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b13	init.asm	/^ b13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b13	ln.asm	/^ b13:	48 8b 00             	mov    (%rax),%rax$/;"	l
b13	sh.asm	/^     b13:	ff d0                	callq  *%rax$/;"	l
b13	stressfs.asm	/^ b13:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	bad_mmap.asm	/^ b14:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b14	cat.asm	/^ b14:	89 c0                	mov    %eax,%eax$/;"	l
b14	divide.asm	/^ b14:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b14	eager_mmap.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	echo.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	lazy_mmap.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	wc.asm	/^ b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b14	zombie.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b15	mkdir.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	rm.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	sh.asm	/^     b15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b16	cat.asm	/^ b16:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b16	kill.asm	/^ b16:	00 00 00 $/;"	l
b16	ln.asm	/^ b16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b16	prettyprint.asm	/^     b16:	89 c7                	mov    %eax,%edi$/;"	l
b16	stressfs.asm	/^ b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b17	bad_mmap.asm	/^ b17:	01 c2                	add    %eax,%edx$/;"	l
b17	echo.asm	/^ b17:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b17	init.asm	/^ b17:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b17	ls.asm	/^     b17:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b17	zombie.asm	/^ b17:	eb 2e                	jmp    b47 <malloc+0xdf>$/;"	l
b18	eager_mmap.asm	/^ b18:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b18	grep.asm	/^ b18:	eb 12                	jmp    b2c <printf+0x1d4>$/;"	l
b18	lazy_mmap.asm	/^ b18:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b18	mkdir.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	prettyprint.asm	/^     b18:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b18	rm.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	wc.asm	/^ b18:	eb 2f                	jmp    b49 <free+0x5a>$/;"	l
b19	bad_mmap.asm	/^ b19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b19	kill.asm	/^ b19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b19	sh.asm	/^     b19:	48 89 c7             	mov    %rax,%rdi$/;"	l
b19	usertests.asm	/^     b19:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
b19	zombie.asm	/^ b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1a	cat.asm	/^ b1a:	48 89 c2             	mov    %rax,%rdx$/;"	l
b1a	grep.asm	/^ b1a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b1a	imshow.asm	/^ b1a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b1a	init.asm	/^ b1a:	eb 0b                	jmp    b27 <free+0x11e>$/;"	l
b1a	ln.asm	/^ b1a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b1a	ls.asm	/^     b1a:	73 23                	jae    b3f <printf+0x1c2>$/;"	l
b1a	stressfs.asm	/^ b1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1a	wc.asm	/^ b1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1b	divide.asm	/^ b1b:	00 00 00 $/;"	l
b1b	mkdir.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1b	rm.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1c	eager_mmap.asm	/^ b1c:	76 c7                	jbe    ae5 <free+0x2b>$/;"	l
b1c	init.asm	/^ b1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1c	lazy_mmap.asm	/^ b1c:	76 c7                	jbe    ae5 <free+0x2b>$/;"	l
b1c	ls.asm	/^     b1c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b1c	sh.asm	/^     b1c:	48 b8 50 07 00 00 00 	movabs $0x750,%rax$/;"	l
b1c	usertests.asm	/^     b1c:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b1d	bad_mmap.asm	/^ b1d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b1d	cat.asm	/^ b1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1d	kill.asm	/^ b1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b1d	stressfs.asm	/^ b1d:	89 c0                	mov    %eax,%eax$/;"	l
b1d	zombie.asm	/^ b1d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1e	divide.asm	/^ b1e:	ff d0                	callq  *%rax$/;"	l
b1e	eager_mmap.asm	/^ b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1e	echo.asm	/^ b1e:	00 00 00 $/;"	l
b1e	imshow.asm	/^ b1e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b1e	lazy_mmap.asm	/^ b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1e	wc.asm	/^ b1e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b1f	ln.asm	/^ b1f:	75 4a                	jne    b6b <malloc+0x7e>$/;"	l
b1f	prettyprint.asm	/^     b1f:	00 00 00 $/;"	l
b1f	stressfs.asm	/^ b1f:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b2	divide.asm	/^  b2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b2	echo.asm	/^  b2:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
b2	imshow.asm	/^  b2:	00 00 00 $/;"	l
b2	kill.asm	/^  b2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b2	ls.asm	/^      b2:	ff d0                	callq  *%rax$/;"	l
b2	prettyprint.asm	/^      b2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b2	stressfs.asm	/^  b2:	00 00 00 $/;"	l
b2	wc.asm	/^  b2:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b2	zombie.asm	/^  b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
b20	bad_mmap.asm	/^ b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b20	divide.asm	/^ b20:	eb 38                	jmp    b5a <printf+0x373>$/;"	l
b20	init.asm	/^ b20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b20	kill.asm	/^ b20:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b20	zombie.asm	/^ b20:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b21	cat.asm	/^ b21:	48 01 d0             	add    %rdx,%rax$/;"	l
b21	echo.asm	/^ b21:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b21	grep.asm	/^ b21:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b21	ln.asm	/^ b21:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b21	usertests.asm	/^     b21:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
b21	wc.asm	/^ b21:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b22	divide.asm	/^ b22:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b22	eager_mmap.asm	/^ b22:	48 8b 00             	mov    (%rax),%rax$/;"	l
b22	lazy_mmap.asm	/^ b22:	48 8b 00             	mov    (%rax),%rax$/;"	l
b22	mkdir.asm	/^ b22:	00 00 00 $/;"	l
b22	prettyprint.asm	/^     b22:	ff d0                	callq  *%rax$/;"	l
b22	rm.asm	/^ b22:	00 00 00 $/;"	l
b23	ls.asm	/^     b23:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b23	sh.asm	/^     b23:	00 00 00 $/;"	l
b23	stressfs.asm	/^ b23:	48 89 c2             	mov    %rax,%rdx$/;"	l
b23	zombie.asm	/^ b23:	89 c2                	mov    %eax,%edx$/;"	l
b24	bad_mmap.asm	/^ b24:	48 8b 00             	mov    (%rax),%rax$/;"	l
b24	cat.asm	/^ b24:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b24	echo.asm	/^ b24:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b24	init.asm	/^ b24:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b24	prettyprint.asm	/^     b24:	e9 f1 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b25	eager_mmap.asm	/^ b25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b25	grep.asm	/^ b25:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b25	imshow.asm	/^ b25:	8b 00                	mov    (%rax),%eax$/;"	l
b25	lazy_mmap.asm	/^ b25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b25	mkdir.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	rm.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	wc.asm	/^ b25:	77 17                	ja     b3e <free+0x4f>$/;"	l
b25	zombie.asm	/^ b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b26	sh.asm	/^     b26:	ff d0                	callq  *%rax$/;"	l
b26	stressfs.asm	/^ b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b27	bad_mmap.asm	/^ b27:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b27	imshow.asm	/^ b27:	0f be d0             	movsbl %al,%edx$/;"	l
b27	init.asm	/^ b27:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
b27	kill.asm	/^ b27:	00 00 00 $/;"	l
b27	wc.asm	/^ b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b28	cat.asm	/^ b28:	75 27                	jne    b51 <free+0x113>$/;"	l
b28	divide.asm	/^ b28:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b28	ln.asm	/^ b28:	00 00 00 $/;"	l
b28	mkdir.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	rm.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	sh.asm	/^     b28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b28	usertests.asm	/^     b28:	00 00 00 $/;"	l
b29	eager_mmap.asm	/^ b29:	76 ba                	jbe    ae5 <free+0x2b>$/;"	l
b29	lazy_mmap.asm	/^ b29:	76 ba                	jbe    ae5 <free+0x2b>$/;"	l
b29	ls.asm	/^     b29:	89 d2                	mov    %edx,%edx$/;"	l
b29	prettyprint.asm	/^     b29:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
b29	zombie.asm	/^ b29:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b2a	bad_mmap.asm	/^ b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2a	cat.asm	/^ b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2a	imshow.asm	/^ b2a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2a	kill.asm	/^ b2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b2a	stressfs.asm	/^ b2a:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	eager_mmap.asm	/^ b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2b	echo.asm	/^ b2b:	00 00 00 $/;"	l
b2b	lazy_mmap.asm	/^ b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2b	ln.asm	/^ b2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b2b	ls.asm	/^     b2b:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	usertests.asm	/^     b2b:	89 c7                	mov    %eax,%edi$/;"	l
b2b	wc.asm	/^ b2b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b2c	grep.asm	/^ b2c:	8b 30                	mov    (%rax),%esi$/;"	l
b2c	mkdir.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	rm.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	sh.asm	/^     b2c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b2c	zombie.asm	/^ b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2d	divide.asm	/^ b2d:	89 c7                	mov    %eax,%edi$/;"	l
b2d	kill.asm	/^ b2d:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b2d	stressfs.asm	/^ b2d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b2d	usertests.asm	/^     b2d:	48 b8 20 60 00 00 00 	movabs $0x6020,%rax$/;"	l
b2e	bad_mmap.asm	/^ b2e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b2e	cat.asm	/^ b2e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b2e	echo.asm	/^ b2e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b2e	grep.asm	/^ b2e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2e	init.asm	/^ b2e:	00 00 00 $/;"	l
b2e	ls.asm	/^     b2e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b2f	divide.asm	/^ b2f:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b2f	eager_mmap.asm	/^ b2f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b2f	lazy_mmap.asm	/^ b2f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b2f	ln.asm	/^ b2f:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b2f	wc.asm	/^ b2f:	77 2f                	ja     b60 <free+0x71>$/;"	l
b3	init.asm	/^  b3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
b3	usertests.asm	/^      b3:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
b30	imshow.asm	/^ b30:	89 d6                	mov    %edx,%esi$/;"	l
b30	prettyprint.asm	/^     b30:	74 09                	je     b3b <printf+0x194>$/;"	l
b30	sh.asm	/^     b30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b30	zombie.asm	/^ b30:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b31	bad_mmap.asm	/^ b31:	eb 0e                	jmp    b41 <free+0xcf>$/;"	l
b31	cat.asm	/^ b31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b31	echo.asm	/^ b31:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b31	init.asm	/^ b31:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b31	mkdir.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	rm.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	stressfs.asm	/^ b31:	75 27                	jne    b5a <free+0x113>$/;"	l
b31	wc.asm	/^ b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b32	eager_mmap.asm	/^ b32:	89 c0                	mov    %eax,%eax$/;"	l
b32	imshow.asm	/^ b32:	89 c7                	mov    %eax,%edi$/;"	l
b32	lazy_mmap.asm	/^ b32:	89 c0                	mov    %eax,%eax$/;"	l
b32	prettyprint.asm	/^     b32:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b33	bad_mmap.asm	/^ b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b33	mkdir.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	rm.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	stressfs.asm	/^ b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b33	zombie.asm	/^ b33:	89 c0                	mov    %eax,%eax$/;"	l
b34	eager_mmap.asm	/^ b34:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b34	grep.asm	/^ b34:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b34	imshow.asm	/^ b34:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b34	kill.asm	/^ b34:	00 00 00 $/;"	l
b34	lazy_mmap.asm	/^ b34:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b34	ls.asm	/^     b34:	83 c2 08             	add    $0x8,%edx$/;"	l
b34	sh.asm	/^     b34:	48 ba 01 1e 00 00 00 	movabs $0x1e01,%rdx$/;"	l
b34	usertests.asm	/^     b34:	00 00 00 $/;"	l
b35	cat.asm	/^ b35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b35	init.asm	/^ b35:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b35	wc.asm	/^ b35:	48 8b 00             	mov    (%rax),%rax$/;"	l
b35	zombie.asm	/^ b35:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b36	divide.asm	/^ b36:	00 00 00 $/;"	l
b36	ln.asm	/^ b36:	00 00 00 $/;"	l
b37	bad_mmap.asm	/^ b37:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b37	kill.asm	/^ b37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b37	ls.asm	/^     b37:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b37	stressfs.asm	/^ b37:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b37	usertests.asm	/^     b37:	ff d0                	callq  *%rax$/;"	l
b38	cat.asm	/^ b38:	01 c2                	add    %eax,%edx$/;"	l
b38	eager_mmap.asm	/^ b38:	48 89 c2             	mov    %rax,%rdx$/;"	l
b38	echo.asm	/^ b38:	00 00 00 $/;"	l
b38	init.asm	/^ b38:	90                   	nop$/;"	l
b38	lazy_mmap.asm	/^ b38:	48 89 c2             	mov    %rax,%rdx$/;"	l
b38	wc.asm	/^ b38:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b39	divide.asm	/^ b39:	ff d0                	callq  *%rax$/;"	l
b39	grep.asm	/^ b39:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b39	init.asm	/^ b39:	c9                   	leaveq $/;"	l
b39	ln.asm	/^ b39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b39	prettyprint.asm	/^     b39:	75 65                	jne    ba0 <printf+0x1f9>$/;"	l
b39	usertests.asm	/^     b39:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
b39	zombie.asm	/^ b39:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b3a	bad_mmap.asm	/^ b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3a	cat.asm	/^ b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3a	init.asm	/^ b3a:	c3                   	retq   $/;"	l
b3a	kill.asm	/^ b3a:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b3a	mkdir.asm	/^ b3a:	00 00 00 $/;"	l
b3a	rm.asm	/^ b3a:	00 00 00 $/;"	l
b3a	stressfs.asm	/^ b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	divide.asm	/^ b3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b3b	eager_mmap.asm	/^ b3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	echo.asm	/^ b3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b3b	imshow.asm	/^ b3b:	00 00 00 $/;"	l
b3b	init.asm	/^ b3b:	55                   	push   %rbp$/;"	l
b3b	lazy_mmap.asm	/^ b3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	prettyprint.asm	/^     b3b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b3b	sh.asm	/^     b3b:	00 00 00 $/;"	l
b3c	init.asm	/^ b3c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b3c	usertests.asm	/^     b3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
b3c	wc.asm	/^ b3c:	77 22                	ja     b60 <free+0x71>$/;"	l
b3d	ln.asm	/^ b3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b3d	ls.asm	/^     b3d:	eb 12                	jmp    b51 <printf+0x1d4>$/;"	l
b3d	mkdir.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	rm.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	zombie.asm	/^ b3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3e	bad_mmap.asm	/^ b3e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b3e	cat.asm	/^ b3e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b3e	grep.asm	/^ b3e:	89 c7                	mov    %eax,%edi$/;"	l
b3e	imshow.asm	/^ b3e:	ff d0                	callq  *%rax$/;"	l
b3e	sh.asm	/^     b3e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b3e	stressfs.asm	/^ b3e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b3e	wc.asm	/^ b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3f	eager_mmap.asm	/^ b3f:	48 01 c2             	add    %rax,%rdx$/;"	l
b3f	init.asm	/^ b3f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b3f	lazy_mmap.asm	/^ b3f:	48 01 c2             	add    %rax,%rdx$/;"	l
b3f	ls.asm	/^     b3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b4	bad_mmap.asm	/^  b4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
b4	cat.asm	/^  b4:	00 00 00 $/;"	l
b4	echo.asm	/^  b4:	89 ca                	mov    %ecx,%edx$/;"	l
b4	forktest.asm	/^  b4:	00 00 00 $/;"	l
b4	grep.asm	/^  b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
b4	ln.asm	/^  b4:	ff d0                	callq  *%rax$/;"	l
b4	ls.asm	/^      b4:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
b4	mkdir.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	rm.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	sh.asm	/^      b4:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
b40	grep.asm	/^ b40:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
b40	imshow.asm	/^ b40:	eb 62                	jmp    ba4 <printf+0x373>$/;"	l
b40	ln.asm	/^ b40:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b40	usertests.asm	/^     b40:	75 45                	jne    b87 <writetest1+0x1ee>$/;"	l
b41	bad_mmap.asm	/^ b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b41	cat.asm	/^ b41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b41	divide.asm	/^ b41:	0f be d0             	movsbl %al,%edx$/;"	l
b41	kill.asm	/^ b41:	00 00 00 $/;"	l
b41	mkdir.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	prettyprint.asm	/^     b41:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b41	rm.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	sh.asm	/^     b41:	48 89 c7             	mov    %rax,%rdi$/;"	l
b41	stressfs.asm	/^ b41:	01 c2                	add    %eax,%edx$/;"	l
b41	zombie.asm	/^ b41:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b42	eager_mmap.asm	/^ b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b42	echo.asm	/^ b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b42	imshow.asm	/^ b42:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
b42	lazy_mmap.asm	/^ b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b42	usertests.asm	/^     b42:	81 7d f8 8b 00 00 00 	cmpl   $0x8b,-0x8(%rbp)$/;"	l
b42	wc.asm	/^ b42:	48 8b 00             	mov    (%rax),%rax$/;"	l
b43	init.asm	/^ b43:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b43	stressfs.asm	/^ b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b44	divide.asm	/^ b44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b44	kill.asm	/^ b44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b44	prettyprint.asm	/^     b44:	73 23                	jae    b69 <printf+0x1c2>$/;"	l
b44	sh.asm	/^     b44:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b44	zombie.asm	/^ b44:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b45	bad_mmap.asm	/^ b45:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b45	cat.asm	/^ b45:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b45	wc.asm	/^ b45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b46	eager_mmap.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	echo.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	init.asm	/^ b46:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b46	lazy_mmap.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	ls.asm	/^     b46:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b46	prettyprint.asm	/^     b46:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b47	grep.asm	/^ b47:	00 00 00 $/;"	l
b47	ln.asm	/^ b47:	00 00 00 $/;"	l
b47	stressfs.asm	/^ b47:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b47	zombie.asm	/^ b47:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b48	bad_mmap.asm	/^ b48:	89 c0                	mov    %eax,%eax$/;"	l
b48	cat.asm	/^ b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b48	mkdir.asm	/^ b48:	00 00 00 $/;"	l
b48	rm.asm	/^ b48:	00 00 00 $/;"	l
b49	eager_mmap.asm	/^ b49:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b49	echo.asm	/^ b49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b49	imshow.asm	/^ b49:	75 21                	jne    b6c <printf+0x33b>$/;"	l
b49	lazy_mmap.asm	/^ b49:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b49	usertests.asm	/^     b49:	0f 85 d8 00 00 00    	jne    c27 <writetest1+0x28e>$/;"	l
b49	wc.asm	/^ b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4a	bad_mmap.asm	/^ b4a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b4a	divide.asm	/^ b4a:	89 d6                	mov    %edx,%esi$/;"	l
b4a	grep.asm	/^ b4a:	ff d0                	callq  *%rax$/;"	l
b4a	ln.asm	/^ b4a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4a	ls.asm	/^     b4a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b4a	stressfs.asm	/^ b4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	imshow.asm	/^ b4b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b4b	kill.asm	/^ b4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	mkdir.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	rm.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	sh.asm	/^     b4b:	00 00 00 $/;"	l
b4c	cat.asm	/^ b4c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4c	divide.asm	/^ b4c:	89 c7                	mov    %eax,%edi$/;"	l
b4c	eager_mmap.asm	/^ b4c:	75 2d                	jne    b7b <free+0xc1>$/;"	l
b4c	grep.asm	/^ b4c:	e9 7a 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
b4c	lazy_mmap.asm	/^ b4c:	75 2d                	jne    b7b <free+0xc1>$/;"	l
b4d	echo.asm	/^ b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b4d	init.asm	/^ b4d:	77 07                	ja     b56 <morecore+0x1b>$/;"	l
b4d	ln.asm	/^ b4d:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b4d	prettyprint.asm	/^     b4d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b4d	wc.asm	/^ b4d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b4e	bad_mmap.asm	/^ b4e:	48 89 c2             	mov    %rax,%rdx$/;"	l
b4e	divide.asm	/^ b4e:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b4e	eager_mmap.asm	/^ b4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4e	lazy_mmap.asm	/^ b4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4e	sh.asm	/^     b4e:	ff d0                	callq  *%rax$/;"	l
b4e	stressfs.asm	/^ b4e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4e	zombie.asm	/^ b4e:	00 00 00 $/;"	l
b4f	cat.asm	/^ b4f:	eb 0b                	jmp    b5c <free+0x11e>$/;"	l
b4f	init.asm	/^ b4f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b4f	kill.asm	/^ b4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b4f	mkdir.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	rm.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	usertests.asm	/^     b4f:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b5	imshow.asm	/^  b5:	ff d2                	callq  *%rdx$/;"	l
b5	kill.asm	/^  b5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
b5	stressfs.asm	/^  b5:	ff d1                	callq  *%rcx$/;"	l
b50	sh.asm	/^     b50:	85 c0                	test   %eax,%eax$/;"	l
b51	bad_mmap.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	cat.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	echo.asm	/^ b51:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b51	grep.asm	/^ b51:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b51	imshow.asm	/^ b51:	0f be d0             	movsbl %al,%edx$/;"	l
b51	ls.asm	/^     b51:	8b 30                	mov    (%rax),%esi$/;"	l
b51	stressfs.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	wc.asm	/^ b51:	76 c7                	jbe    b1a <free+0x2b>$/;"	l
b51	zombie.asm	/^ b51:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b52	eager_mmap.asm	/^ b52:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b52	kill.asm	/^ b52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b52	lazy_mmap.asm	/^ b52:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b52	mkdir.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	rm.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	sh.asm	/^     b52:	75 a0                	jne    af4 <parseline+0x30>$/;"	l
b53	ls.asm	/^     b53:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b53	prettyprint.asm	/^     b53:	89 d2                	mov    %edx,%edx$/;"	l
b53	wc.asm	/^ b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b54	echo.asm	/^ b54:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b54	imshow.asm	/^ b54:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b54	ln.asm	/^ b54:	00 00 00 $/;"	l
b54	sh.asm	/^     b54:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b55	bad_mmap.asm	/^ b55:	48 01 d0             	add    %rdx,%rax$/;"	l
b55	cat.asm	/^ b55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b55	divide.asm	/^ b55:	00 00 00 $/;"	l
b55	eager_mmap.asm	/^ b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b55	lazy_mmap.asm	/^ b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b55	prettyprint.asm	/^     b55:	48 01 d0             	add    %rdx,%rax$/;"	l
b55	stressfs.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b55	zombie.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b56	init.asm	/^ b56:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b56	kill.asm	/^ b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b56	usertests.asm	/^     b56:	00 00 00 $/;"	l
b57	echo.asm	/^ b57:	72 65                	jb     bbe <malloc+0xfa>$/;"	l
b57	ln.asm	/^ b57:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b57	wc.asm	/^ b57:	48 8b 00             	mov    (%rax),%rax$/;"	l
b58	bad_mmap.asm	/^ b58:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b58	divide.asm	/^ b58:	ff d0                	callq  *%rax$/;"	l
b58	grep.asm	/^ b58:	0f 85 a5 00 00 00    	jne    c03 <printf+0x2ab>$/;"	l
b58	prettyprint.asm	/^     b58:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b58	sh.asm	/^     b58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b58	stressfs.asm	/^ b58:	eb 0b                	jmp    b65 <free+0x11e>$/;"	l
b58	zombie.asm	/^ b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	cat.asm	/^ b59:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b59	eager_mmap.asm	/^ b59:	48 8b 00             	mov    (%rax),%rax$/;"	l
b59	echo.asm	/^ b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	init.asm	/^ b59:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b59	lazy_mmap.asm	/^ b59:	48 8b 00             	mov    (%rax),%rax$/;"	l
b59	ls.asm	/^     b59:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b59	mkdir.asm	/^ b59:	00 00 00 $/;"	l
b59	rm.asm	/^ b59:	00 00 00 $/;"	l
b59	usertests.asm	/^     b59:	8b 00                	mov    (%rax),%eax$/;"	l
b5a	divide.asm	/^ b5a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
b5a	imshow.asm	/^ b5a:	89 d6                	mov    %edx,%esi$/;"	l
b5a	kill.asm	/^ b5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5a	ln.asm	/^ b5a:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b5a	stressfs.asm	/^ b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b5a	wc.asm	/^ b5a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b5b	usertests.asm	/^     b5b:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
b5c	bad_mmap.asm	/^ b5c:	75 27                	jne    b85 <free+0x113>$/;"	l
b5c	cat.asm	/^ b5c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
b5c	eager_mmap.asm	/^ b5c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5c	imshow.asm	/^ b5c:	89 c7                	mov    %eax,%edi$/;"	l
b5c	init.asm	/^ b5c:	89 c7                	mov    %eax,%edi$/;"	l
b5c	lazy_mmap.asm	/^ b5c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5c	mkdir.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	rm.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	sh.asm	/^     b5c:	48 ba 03 1e 00 00 00 	movabs $0x1e03,%rdx$/;"	l
b5c	zombie.asm	/^ b5c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b5d	echo.asm	/^ b5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5d	kill.asm	/^ b5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b5e	bad_mmap.asm	/^ b5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b5e	grep.asm	/^ b5e:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b5e	imshow.asm	/^ b5e:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b5e	init.asm	/^ b5e:	48 b8 3f 05 00 00 00 	movabs $0x53f,%rax$/;"	l
b5e	ls.asm	/^     b5e:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b5e	prettyprint.asm	/^     b5e:	83 c2 08             	add    $0x8,%edx$/;"	l
b5e	stressfs.asm	/^ b5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b5e	usertests.asm	/^     b5e:	48 be a9 6b 00 00 00 	movabs $0x6ba9,%rsi$/;"	l
b5e	wc.asm	/^ b5e:	76 ba                	jbe    b1a <free+0x2b>$/;"	l
b5f	eager_mmap.asm	/^ b5f:	01 c2                	add    %eax,%edx$/;"	l
b5f	lazy_mmap.asm	/^ b5f:	01 c2                	add    %eax,%edx$/;"	l
b5f	mkdir.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b5f	rm.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6	divide.asm	/^  b6:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6	echo.asm	/^  b6:	48 89 fe             	mov    %rdi,%rsi$/;"	l
b6	ln.asm	/^  b6:	55                   	push   %rbp$/;"	l
b6	zombie.asm	/^  b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b60	echo.asm	/^ b60:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b60	kill.asm	/^ b60:	72 65                	jb     bc7 <malloc+0xfa>$/;"	l
b60	wc.asm	/^ b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b60	zombie.asm	/^ b60:	eb 4e                	jmp    bb0 <malloc+0x148>$/;"	l
b61	divide.asm	/^ b61:	00 00 00 $/;"	l
b61	eager_mmap.asm	/^ b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b61	lazy_mmap.asm	/^ b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b61	ln.asm	/^ b61:	00 00 00 $/;"	l
b61	prettyprint.asm	/^     b61:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b62	bad_mmap.asm	/^ b62:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b62	kill.asm	/^ b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b62	stressfs.asm	/^ b62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b62	zombie.asm	/^ b62:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b63	cat.asm	/^ b63:	00 00 00 $/;"	l
b63	echo.asm	/^ b63:	75 10                	jne    b75 <malloc+0xb1>$/;"	l
b63	ls.asm	/^     b63:	89 c7                	mov    %eax,%edi$/;"	l
b63	sh.asm	/^     b63:	00 00 00 $/;"	l
b64	divide.asm	/^ b64:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
b64	grep.asm	/^ b64:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b64	ln.asm	/^ b64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b64	wc.asm	/^ b64:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b65	bad_mmap.asm	/^ b65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b65	eager_mmap.asm	/^ b65:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b65	echo.asm	/^ b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b65	imshow.asm	/^ b65:	00 00 00 $/;"	l
b65	init.asm	/^ b65:	00 00 00 $/;"	l
b65	lazy_mmap.asm	/^ b65:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b65	ls.asm	/^     b65:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
b65	stressfs.asm	/^ b65:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
b65	usertests.asm	/^     b65:	00 00 00 $/;"	l
b66	cat.asm	/^ b66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b66	kill.asm	/^ b66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b66	mkdir.asm	/^ b66:	00 00 00 $/;"	l
b66	rm.asm	/^ b66:	00 00 00 $/;"	l
b66	sh.asm	/^     b66:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b67	grep.asm	/^ b67:	73 23                	jae    b8c <printf+0x234>$/;"	l
b67	prettyprint.asm	/^     b67:	eb 12                	jmp    b7b <printf+0x1d4>$/;"	l
b67	wc.asm	/^ b67:	89 c0                	mov    %eax,%eax$/;"	l
b68	eager_mmap.asm	/^ b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b68	imshow.asm	/^ b68:	ff d0                	callq  *%rax$/;"	l
b68	init.asm	/^ b68:	ff d0                	callq  *%rax$/;"	l
b68	lazy_mmap.asm	/^ b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b68	usertests.asm	/^     b68:	89 c7                	mov    %eax,%edi$/;"	l
b69	bad_mmap.asm	/^ b69:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b69	echo.asm	/^ b69:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b69	grep.asm	/^ b69:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b69	kill.asm	/^ b69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b69	mkdir.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	prettyprint.asm	/^     b69:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b69	rm.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	sh.asm	/^     b69:	48 89 c7             	mov    %rax,%rdi$/;"	l
b69	wc.asm	/^ b69:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b69	zombie.asm	/^ b69:	00 00 00 $/;"	l
b6a	cat.asm	/^ b6a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b6a	imshow.asm	/^ b6a:	eb 38                	jmp    ba4 <printf+0x373>$/;"	l
b6a	init.asm	/^ b6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b6a	usertests.asm	/^     b6a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b6b	divide.asm	/^ b6b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
b6b	ln.asm	/^ b6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	bad_mmap.asm	/^ b6c:	01 c2                	add    %eax,%edx$/;"	l
b6c	eager_mmap.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6c	echo.asm	/^ b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	imshow.asm	/^ b6c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b6c	kill.asm	/^ b6c:	75 10                	jne    b7e <malloc+0xb1>$/;"	l
b6c	lazy_mmap.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6c	ls.asm	/^     b6c:	00 00 00 $/;"	l
b6c	mkdir.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	rm.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	sh.asm	/^     b6c:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b6c	stressfs.asm	/^ b6c:	00 00 00 $/;"	l
b6c	zombie.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6d	cat.asm	/^ b6d:	90                   	nop$/;"	l
b6d	wc.asm	/^ b6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
b6e	bad_mmap.asm	/^ b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b6e	cat.asm	/^ b6e:	c9                   	leaveq $/;"	l
b6e	init.asm	/^ b6e:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
b6e	kill.asm	/^ b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b6f	cat.asm	/^ b6f:	c3                   	retq   $/;"	l
b6f	eager_mmap.asm	/^ b6f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b6f	lazy_mmap.asm	/^ b6f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b6f	ln.asm	/^ b6f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6f	ls.asm	/^     b6f:	ff d0                	callq  *%rax$/;"	l
b6f	stressfs.asm	/^ b6f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b6f	usertests.asm	/^     b6f:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
b6f	zombie.asm	/^ b6f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
b7	cat.asm	/^  b7:	ff d0                	callq  *%rax$/;"	l
b7	eager_mmap.asm	/^  b7:	00 00 00 $/;"	l
b7	forktest.asm	/^  b7:	ff d2                	callq  *%rdx$/;"	l
b7	grep.asm	/^  b7:	48 b8 a2 05 00 00 00 	movabs $0x5a2,%rax$/;"	l
b7	imshow.asm	/^  b7:	48 b8 62 06 00 00 00 	movabs $0x662,%rax$/;"	l
b7	init.asm	/^  b7:	79 2c                	jns    e5 <main+0xe5>$/;"	l
b7	lazy_mmap.asm	/^  b7:	00 00 00 $/;"	l
b7	ln.asm	/^  b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7	mkdir.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	prettyprint.asm	/^      b7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
b7	rm.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	stressfs.asm	/^  b7:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax$/;"	l
b7	wc.asm	/^  b7:	48 be a0 10 00 00 00 	movabs $0x10a0,%rsi$/;"	l
b70	cat.asm	/^ b70:	55                   	push   %rbp$/;"	l
b70	echo.asm	/^ b70:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b70	grep.asm	/^ b70:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b70	prettyprint.asm	/^     b70:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b70	wc.asm	/^ b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b71	cat.asm	/^ b71:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b71	divide.asm	/^ b71:	48 63 d0             	movslq %eax,%rdx$/;"	l
b71	ls.asm	/^     b71:	e9 7a 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
b72	bad_mmap.asm	/^ b72:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b72	eager_mmap.asm	/^ b72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b72	imshow.asm	/^ b72:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b72	kill.asm	/^ b72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b72	lazy_mmap.asm	/^ b72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b72	ln.asm	/^ b72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b73	echo.asm	/^ b73:	eb 2e                	jmp    ba3 <malloc+0xdf>$/;"	l
b73	init.asm	/^ b73:	75 07                	jne    b7c <morecore+0x41>$/;"	l
b73	mkdir.asm	/^ b73:	00 00 00 $/;"	l
b73	rm.asm	/^ b73:	00 00 00 $/;"	l
b73	sh.asm	/^     b73:	00 00 00 $/;"	l
b73	stressfs.asm	/^ b73:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b73	zombie.asm	/^ b73:	75 23                	jne    b98 <malloc+0x130>$/;"	l
b74	cat.asm	/^ b74:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b74	divide.asm	/^ b74:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
b74	prettyprint.asm	/^     b74:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b74	wc.asm	/^ b74:	48 01 c2             	add    %rax,%rdx$/;"	l
b75	bad_mmap.asm	/^ b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b75	echo.asm	/^ b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b75	init.asm	/^ b75:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b75	kill.asm	/^ b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b75	zombie.asm	/^ b75:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b76	eager_mmap.asm	/^ b76:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b76	grep.asm	/^ b76:	89 d2                	mov    %edx,%edx$/;"	l
b76	lazy_mmap.asm	/^ b76:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b76	ln.asm	/^ b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b76	ls.asm	/^     b76:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b76	mkdir.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	rm.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	sh.asm	/^     b76:	ff d0                	callq  *%rax$/;"	l
b76	stressfs.asm	/^ b76:	90                   	nop$/;"	l
b76	usertests.asm	/^     b76:	00 00 00 $/;"	l
b77	imshow.asm	/^ b77:	89 c7                	mov    %eax,%edi$/;"	l
b77	stressfs.asm	/^ b77:	c9                   	leaveq $/;"	l
b77	wc.asm	/^ b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b78	cat.asm	/^ b78:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b78	grep.asm	/^ b78:	48 01 d0             	add    %rdx,%rax$/;"	l
b78	sh.asm	/^     b78:	85 c0                	test   %eax,%eax$/;"	l
b78	stressfs.asm	/^ b78:	c3                   	retq   $/;"	l
b78	zombie.asm	/^ b78:	89 c7                	mov    %eax,%edi$/;"	l
b79	bad_mmap.asm	/^ b79:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b79	eager_mmap.asm	/^ b79:	eb 0e                	jmp    b89 <free+0xcf>$/;"	l
b79	echo.asm	/^ b79:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b79	imshow.asm	/^ b79:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b79	kill.asm	/^ b79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b79	lazy_mmap.asm	/^ b79:	eb 0e                	jmp    b89 <free+0xcf>$/;"	l
b79	stressfs.asm	/^ b79:	55                   	push   %rbp$/;"	l
b79	usertests.asm	/^     b79:	ff d1                	callq  *%rcx$/;"	l
b7a	init.asm	/^ b7a:	eb 36                	jmp    bb2 <morecore+0x77>$/;"	l
b7a	ln.asm	/^ b7a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b7a	sh.asm	/^     b7a:	74 58                	je     bd4 <parseline+0x110>$/;"	l
b7a	stressfs.asm	/^ b7a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7a	zombie.asm	/^ b7a:	48 b8 ef 09 00 00 00 	movabs $0x9ef,%rax$/;"	l
b7b	cat.asm	/^ b7b:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b7b	divide.asm	/^ b7b:	48 01 d0             	add    %rdx,%rax$/;"	l
b7b	eager_mmap.asm	/^ b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7b	grep.asm	/^ b7b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b7b	lazy_mmap.asm	/^ b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7b	prettyprint.asm	/^     b7b:	8b 30                	mov    (%rax),%esi$/;"	l
b7b	usertests.asm	/^     b7b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b7b	wc.asm	/^ b7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
b7c	bad_mmap.asm	/^ b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7c	echo.asm	/^ b7c:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b7c	init.asm	/^ b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7c	kill.asm	/^ b7c:	eb 2e                	jmp    bac <malloc+0xdf>$/;"	l
b7c	sh.asm	/^     b7c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
b7d	ln.asm	/^ b7d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7d	ls.asm	/^     b7d:	0f 85 a5 00 00 00    	jne    c28 <printf+0x2ab>$/;"	l
b7d	mkdir.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	prettyprint.asm	/^     b7d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b7d	rm.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	stressfs.asm	/^ b7d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b7e	divide.asm	/^ b7e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
b7e	kill.asm	/^ b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7e	wc.asm	/^ b7e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b7f	eager_mmap.asm	/^ b7f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b7f	echo.asm	/^ b7f:	89 c2                	mov    %eax,%edx$/;"	l
b7f	lazy_mmap.asm	/^ b7f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b8	kill.asm	/^  b8:	89 d1                	mov    %edx,%ecx$/;"	l
b80	bad_mmap.asm	/^ b80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b80	imshow.asm	/^ b80:	00 00 00 $/;"	l
b80	init.asm	/^ b80:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b80	ln.asm	/^ b80:	72 65                	jb     be7 <malloc+0xfa>$/;"	l
b80	sh.asm	/^     b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b81	divide.asm	/^ b81:	84 c0                	test   %al,%al$/;"	l
b81	echo.asm	/^ b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b81	grep.asm	/^ b81:	83 c2 08             	add    $0x8,%edx$/;"	l
b81	mkdir.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	rm.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	stressfs.asm	/^ b81:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b81	wc.asm	/^ b81:	75 2d                	jne    bb0 <free+0xc1>$/;"	l
b81	zombie.asm	/^ b81:	00 00 00 $/;"	l
b82	cat.asm	/^ b82:	77 07                	ja     b8b <morecore+0x1b>$/;"	l
b82	eager_mmap.asm	/^ b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b82	kill.asm	/^ b82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b82	lazy_mmap.asm	/^ b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b82	ln.asm	/^ b82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b82	usertests.asm	/^     b82:	00 00 00 $/;"	l
b83	bad_mmap.asm	/^ b83:	eb 0b                	jmp    b90 <free+0x11e>$/;"	l
b83	divide.asm	/^ b83:	0f 85 fc fc ff ff    	jne    885 <printf+0x9e>$/;"	l
b83	imshow.asm	/^ b83:	ff d0                	callq  *%rax$/;"	l
b83	ls.asm	/^     b83:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b83	prettyprint.asm	/^     b83:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b83	wc.asm	/^ b83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b84	cat.asm	/^ b84:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b84	grep.asm	/^ b84:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b84	init.asm	/^ b84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b84	mkdir.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	rm.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	sh.asm	/^     b84:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
b84	stressfs.asm	/^ b84:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b84	zombie.asm	/^ b84:	ff d0                	callq  *%rax$/;"	l
b85	bad_mmap.asm	/^ b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b85	echo.asm	/^ b85:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b85	imshow.asm	/^ b85:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b85	kill.asm	/^ b85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b85	usertests.asm	/^     b85:	ff d0                	callq  *%rax$/;"	l
b86	eager_mmap.asm	/^ b86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b86	lazy_mmap.asm	/^ b86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b86	ln.asm	/^ b86:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b86	zombie.asm	/^ b86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b87	usertests.asm	/^     b87:	81 7d fc 00 02 00 00 	cmpl   $0x200,-0x4(%rbp)$/;"	l
b87	wc.asm	/^ b87:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b88	echo.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	init.asm	/^ b88:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b88	kill.asm	/^ b88:	89 c2                	mov    %eax,%edx$/;"	l
b88	mkdir.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	prettyprint.asm	/^     b88:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b88	rm.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	bad_mmap.asm	/^ b89:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b89	divide.asm	/^ b89:	90                   	nop$/;"	l
b89	eager_mmap.asm	/^ b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	lazy_mmap.asm	/^ b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	ln.asm	/^ b89:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b89	ls.asm	/^     b89:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b89	sh.asm	/^     b89:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b8a	divide.asm	/^ b8a:	c9                   	leaveq $/;"	l
b8a	grep.asm	/^ b8a:	eb 12                	jmp    b9e <printf+0x246>$/;"	l
b8a	kill.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	wc.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	zombie.asm	/^ b8a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
b8b	cat.asm	/^ b8b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b8b	divide.asm	/^ b8b:	c3                   	retq   $/;"	l
b8b	imshow.asm	/^ b8b:	0f be d0             	movsbl %al,%edx$/;"	l
b8b	init.asm	/^ b8b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b8b	stressfs.asm	/^ b8b:	77 07                	ja     b94 <morecore+0x1b>$/;"	l
b8c	divide.asm	/^ b8c:	55                   	push   %rbp$/;"	l
b8c	echo.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	grep.asm	/^ b8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b8c	ln.asm	/^ b8c:	75 10                	jne    b9e <malloc+0xb1>$/;"	l
b8c	ls.asm	/^     b8c:	73 23                	jae    bb1 <printf+0x234>$/;"	l
b8c	mkdir.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	rm.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	bad_mmap.asm	/^ b8d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b8d	divide.asm	/^ b8d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b8d	eager_mmap.asm	/^ b8d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	lazy_mmap.asm	/^ b8d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	prettyprint.asm	/^     b8d:	89 c7                	mov    %eax,%edi$/;"	l
b8d	stressfs.asm	/^ b8d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b8e	cat.asm	/^ b8e:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b8e	imshow.asm	/^ b8e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b8e	init.asm	/^ b8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b8e	kill.asm	/^ b8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b8e	ln.asm	/^ b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8e	ls.asm	/^     b8e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b8e	sh.asm	/^     b8e:	48 89 c7             	mov    %rax,%rdi$/;"	l
b8e	usertests.asm	/^     b8e:	74 38                	je     bc8 <writetest1+0x22f>$/;"	l
b8e	wc.asm	/^ b8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b8f	echo.asm	/^ b8f:	89 c0                	mov    %eax,%eax$/;"	l
b8f	mkdir.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	prettyprint.asm	/^     b8f:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b8f	rm.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	zombie.asm	/^ b8f:	75 07                	jne    b98 <malloc+0x130>$/;"	l
b9	bad_mmap.asm	/^  b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b9	cat.asm	/^  b9:	90                   	nop$/;"	l
b9	divide.asm	/^  b9:	48 89 c7             	mov    %rax,%rdi$/;"	l
b9	echo.asm	/^  b9:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
b9	forktest.asm	/^  b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
b9	init.asm	/^  b9:	48 be 1c 0d 00 00 00 	movabs $0xd1c,%rsi$/;"	l
b9	ls.asm	/^      b9:	89 d3                	mov    %edx,%ebx$/;"	l
b9	sh.asm	/^      b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b90	bad_mmap.asm	/^ b90:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
b90	divide.asm	/^ b90:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
b90	eager_mmap.asm	/^ b90:	89 c0                	mov    %eax,%eax$/;"	l
b90	lazy_mmap.asm	/^ b90:	89 c0                	mov    %eax,%eax$/;"	l
b90	usertests.asm	/^     b90:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b91	cat.asm	/^ b91:	89 c7                	mov    %eax,%edi$/;"	l
b91	echo.asm	/^ b91:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b91	kill.asm	/^ b91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b91	sh.asm	/^     b91:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b91	wc.asm	/^ b91:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b91	zombie.asm	/^ b91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b92	eager_mmap.asm	/^ b92:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b92	init.asm	/^ b92:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b92	lazy_mmap.asm	/^ b92:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b92	ln.asm	/^ b92:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b92	mkdir.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b92	rm.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b93	cat.asm	/^ b93:	48 b8 74 05 00 00 00 	movabs $0x574,%rax$/;"	l
b93	grep.asm	/^ b93:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b94	divide.asm	/^ b94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
b94	imshow.asm	/^ b94:	89 d6                	mov    %edx,%esi$/;"	l
b94	mkdir.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	rm.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	stressfs.asm	/^ b94:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b94	wc.asm	/^ b94:	01 c2                	add    %eax,%edx$/;"	l
b95	echo.asm	/^ b95:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b95	kill.asm	/^ b95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b95	ln.asm	/^ b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b95	ls.asm	/^     b95:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b96	eager_mmap.asm	/^ b96:	48 89 c2             	mov    %rax,%rdx$/;"	l
b96	imshow.asm	/^ b96:	89 c7                	mov    %eax,%edi$/;"	l
b96	init.asm	/^ b96:	48 89 c7             	mov    %rax,%rdi$/;"	l
b96	lazy_mmap.asm	/^ b96:	48 89 c2             	mov    %rax,%rdx$/;"	l
b96	prettyprint.asm	/^     b96:	00 00 00 $/;"	l
b96	wc.asm	/^ b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b96	zombie.asm	/^ b96:	eb 18                	jmp    bb0 <malloc+0x148>$/;"	l
b97	bad_mmap.asm	/^ b97:	00 00 00 $/;"	l
b97	grep.asm	/^ b97:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b97	stressfs.asm	/^ b97:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b97	usertests.asm	/^     b97:	00 00 00 $/;"	l
b98	divide.asm	/^ b98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b98	imshow.asm	/^ b98:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b98	kill.asm	/^ b98:	89 c0                	mov    %eax,%eax$/;"	l
b98	mkdir.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	rm.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	sh.asm	/^     b98:	00 00 00 $/;"	l
b98	zombie.asm	/^ b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	eager_mmap.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	echo.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	init.asm	/^ b99:	48 b8 09 0a 00 00 00 	movabs $0xa09,%rax$/;"	l
b99	lazy_mmap.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	ln.asm	/^ b99:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b99	prettyprint.asm	/^     b99:	ff d0                	callq  *%rax$/;"	l
b9a	bad_mmap.asm	/^ b9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b9a	cat.asm	/^ b9a:	00 00 00 $/;"	l
b9a	kill.asm	/^ b9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b9a	stressfs.asm	/^ b9a:	89 c7                	mov    %eax,%edi$/;"	l
b9a	usertests.asm	/^     b9a:	8b 00                	mov    (%rax),%eax$/;"	l
b9a	wc.asm	/^ b9a:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b9b	ls.asm	/^     b9b:	89 d2                	mov    %edx,%edx$/;"	l
b9b	mkdir.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	prettyprint.asm	/^     b9b:	e9 7a 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b9b	rm.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	sh.asm	/^     b9b:	ff d0                	callq  *%rax$/;"	l
b9c	divide.asm	/^ b9c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
b9c	ln.asm	/^ b9c:	eb 2e                	jmp    bcc <malloc+0xdf>$/;"	l
b9c	stressfs.asm	/^ b9c:	48 b8 7d 05 00 00 00 	movabs $0x57d,%rax$/;"	l
b9c	usertests.asm	/^     b9c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
b9c	zombie.asm	/^ b9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b9d	cat.asm	/^ b9d:	ff d0                	callq  *%rax$/;"	l
b9d	eager_mmap.asm	/^ b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	echo.asm	/^ b9d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b9d	lazy_mmap.asm	/^ b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	ls.asm	/^     b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	sh.asm	/^     b9d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
b9d	wc.asm	/^ b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	bad_mmap.asm	/^ b9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b9e	grep.asm	/^ b9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b9e	kill.asm	/^ b9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b9e	ln.asm	/^ b9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	mkdir.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9e	rm.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9f	cat.asm	/^ b9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b9f	imshow.asm	/^ b9f:	00 00 00 $/;"	l
b9f	usertests.asm	/^     b9f:	48 be c6 6b 00 00 00 	movabs $0x6bc6,%rsi$/;"	l
ba	cat.asm	/^  ba:	c9                   	leaveq $/;"	l
ba	eager_mmap.asm	/^  ba:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ba	kill.asm	/^  ba:	fc                   	cld    $/;"	l
ba	lazy_mmap.asm	/^  ba:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ba	ln.asm	/^  ba:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ba	mkdir.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	rm.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	usertests.asm	/^      ba:	00 00 00 $/;"	l
ba	zombie.asm	/^  ba:	eb 0a                	jmp    c6 <strcmp+0x1c>$/;"	l
ba0	divide.asm	/^ ba0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ba0	eager_mmap.asm	/^ ba0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ba0	echo.asm	/^ ba0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba0	init.asm	/^ ba0:	00 00 00 $/;"	l
ba0	lazy_mmap.asm	/^ ba0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ba0	ls.asm	/^     ba0:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ba0	mkdir.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	prettyprint.asm	/^     ba0:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
ba0	rm.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	zombie.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba1	bad_mmap.asm	/^ ba1:	90                   	nop$/;"	l
ba1	grep.asm	/^ ba1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
ba1	sh.asm	/^     ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ba1	wc.asm	/^ ba1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba2	bad_mmap.asm	/^ ba2:	c9                   	leaveq $/;"	l
ba2	imshow.asm	/^ ba2:	ff d0                	callq  *%rax$/;"	l
ba2	kill.asm	/^ ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba2	ln.asm	/^ ba2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ba3	bad_mmap.asm	/^ ba3:	c3                   	retq   $/;"	l
ba3	cat.asm	/^ ba3:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ba3	echo.asm	/^ ba3:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ba3	init.asm	/^ ba3:	ff d0                	callq  *%rax$/;"	l
ba3	stressfs.asm	/^ ba3:	00 00 00 $/;"	l
ba4	bad_mmap.asm	/^ ba4:	55                   	push   %rbp$/;"	l
ba4	divide.asm	/^ ba4:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
ba4	eager_mmap.asm	/^ ba4:	75 27                	jne    bcd <free+0x113>$/;"	l
ba4	imshow.asm	/^ ba4:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ba4	lazy_mmap.asm	/^ ba4:	75 27                	jne    bcd <free+0x113>$/;"	l
ba4	mkdir.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	rm.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	wc.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	zombie.asm	/^ ba4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba5	bad_mmap.asm	/^ ba5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ba5	init.asm	/^ ba5:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
ba5	ln.asm	/^ ba5:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ba5	sh.asm	/^     ba5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ba6	eager_mmap.asm	/^ ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba6	kill.asm	/^ ba6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ba6	lazy_mmap.asm	/^ ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba6	ls.asm	/^     ba6:	83 c2 08             	add    $0x8,%edx$/;"	l
ba6	stressfs.asm	/^ ba6:	ff d0                	callq  *%rax$/;"	l
ba6	usertests.asm	/^     ba6:	00 00 00 $/;"	l
ba7	mkdir.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	prettyprint.asm	/^     ba7:	0f 85 a5 00 00 00    	jne    c52 <printf+0x2ab>$/;"	l
ba7	rm.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	wc.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	zombie.asm	/^ ba7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba8	bad_mmap.asm	/^ ba8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ba8	cat.asm	/^ ba8:	75 07                	jne    bb1 <morecore+0x41>$/;"	l
ba8	grep.asm	/^ ba8:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
ba8	ln.asm	/^ ba8:	89 c2                	mov    %eax,%edx$/;"	l
ba8	sh.asm	/^     ba8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ba8	stressfs.asm	/^ ba8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba9	kill.asm	/^ ba9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba9	ls.asm	/^     ba9:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ba9	usertests.asm	/^     ba9:	89 c7                	mov    %eax,%edi$/;"	l
baa	cat.asm	/^ baa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
baa	eager_mmap.asm	/^ baa:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
baa	echo.asm	/^ baa:	00 00 00 $/;"	l
baa	lazy_mmap.asm	/^ baa:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
baa	ln.asm	/^ baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bab	divide.asm	/^ bab:	00 00 00 $/;"	l
bab	imshow.asm	/^ bab:	00 00 00 $/;"	l
bab	mkdir.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	rm.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	sh.asm	/^     bab:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
bab	usertests.asm	/^     bab:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bab	wc.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	zombie.asm	/^ bab:	e9 41 ff ff ff       	jmpq   af1 <malloc+0x89>$/;"	l
bac	bad_mmap.asm	/^ bac:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bac	init.asm	/^ bac:	00 00 00 $/;"	l
bac	kill.asm	/^ bac:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bac	stressfs.asm	/^ bac:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	eager_mmap.asm	/^ bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bad	echo.asm	/^ bad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	lazy_mmap.asm	/^ bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bad	prettyprint.asm	/^     bad:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
bae	divide.asm	/^ bae:	48 8b 00             	mov    (%rax),%rax$/;"	l
bae	imshow.asm	/^ bae:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
bae	ln.asm	/^ bae:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bae	mkdir.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	rm.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	wc.asm	/^ bae:	eb 0e                	jmp    bbe <free+0xcf>$/;"	l
baf	bad_mmap.asm	/^ baf:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
baf	cat.asm	/^ baf:	eb 36                	jmp    be7 <morecore+0x77>$/;"	l
baf	grep.asm	/^ baf:	00 $/;"	l
baf	init.asm	/^ baf:	48 8b 00             	mov    (%rax),%rax$/;"	l
baf	ls.asm	/^     baf:	eb 12                	jmp    bc3 <printf+0x246>$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	cat.asm	/^  bb:	c3                   	retq   $/;"	l
bb	kill.asm	/^  bb:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
bb	ls.asm	/^      bb:	29 c3                	sub    %eax,%ebx$/;"	l
bb	stressfs.asm	/^  bb:	89 c2                	mov    %eax,%edx$/;"	l
bb0	grep.asm	/^ bb0:	75 3e                	jne    bf0 <printf+0x298>$/;"	l
bb0	mkdir.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	rm.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	usertests.asm	/^     bb0:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
bb0	wc.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	zombie.asm	/^ bb0:	c9                   	leaveq $/;"	l
bb1	cat.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	divide.asm	/^ bb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bb1	eager_mmap.asm	/^ bb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb1	echo.asm	/^ bb1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bb1	lazy_mmap.asm	/^ bb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb1	ln.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	ls.asm	/^     bb1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bb1	stressfs.asm	/^ bb1:	75 07                	jne    bba <morecore+0x41>$/;"	l
bb1	zombie.asm	/^ bb1:	c3                   	retq   $/;"	l
bb2	grep.asm	/^ bb2:	48 b8 2e 10 00 00 00 	movabs $0x102e,%rax$/;"	l
bb2	init.asm	/^ bb2:	c9                   	leaveq $/;"	l
bb2	sh.asm	/^     bb2:	00 00 00 $/;"	l
bb3	init.asm	/^ bb3:	c3                   	retq   $/;"	l
bb3	kill.asm	/^ bb3:	00 00 00 $/;"	l
bb3	prettyprint.asm	/^     bb3:	83 f8 30             	cmp    $0x30,%eax$/;"	l
bb3	stressfs.asm	/^ bb3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bb4	eager_mmap.asm	/^ bb4:	01 c2                	add    %eax,%edx$/;"	l
bb4	echo.asm	/^ bb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb4	init.asm	/^ bb4:	55                   	push   %rbp$/;"	l
bb4	lazy_mmap.asm	/^ bb4:	01 c2                	add    %eax,%edx$/;"	l
bb4	mkdir.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	rm.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	wc.asm	/^ bb4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bb5	cat.asm	/^ bb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bb5	divide.asm	/^ bb5:	eb 2f                	jmp    be6 <free+0x5a>$/;"	l
bb5	imshow.asm	/^ bb5:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
bb5	init.asm	/^ bb5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bb5	ln.asm	/^ bb5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb5	sh.asm	/^     bb5:	ff d0                	callq  *%rax$/;"	l
bb6	bad_mmap.asm	/^ bb6:	77 07                	ja     bbf <morecore+0x1b>$/;"	l
bb6	eager_mmap.asm	/^ bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb6	kill.asm	/^ bb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bb6	lazy_mmap.asm	/^ bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb6	prettyprint.asm	/^     bb6:	73 23                	jae    bdb <printf+0x234>$/;"	l
bb7	divide.asm	/^ bb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb7	mkdir.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	rm.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	sh.asm	/^     bb7:	48 89 c2             	mov    %rax,%rdx$/;"	l
bb7	usertests.asm	/^     bb7:	00 00 00 $/;"	l
bb7	wc.asm	/^ bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb8	bad_mmap.asm	/^ bb8:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
bb8	echo.asm	/^ bb8:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bb8	init.asm	/^ bb8:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bb8	ln.asm	/^ bb8:	89 c0                	mov    %eax,%eax$/;"	l
bb8	ls.asm	/^     bb8:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
bb8	prettyprint.asm	/^     bb8:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
bb8	stressfs.asm	/^ bb8:	eb 36                	jmp    bf0 <morecore+0x77>$/;"	l
bb9	cat.asm	/^ bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb9	grep.asm	/^ bb9:	00 00 00 $/;"	l
bba	eager_mmap.asm	/^ bba:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bba	kill.asm	/^ bba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bba	lazy_mmap.asm	/^ bba:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bba	ln.asm	/^ bba:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bba	mkdir.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	rm.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	sh.asm	/^     bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	stressfs.asm	/^ bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	usertests.asm	/^     bba:	ff d1                	callq  *%rcx$/;"	l
bbb	divide.asm	/^ bbb:	48 8b 00             	mov    (%rax),%rax$/;"	l
bbb	imshow.asm	/^ bbb:	48 63 d0             	movslq %eax,%rdx$/;"	l
bbb	wc.asm	/^ bbb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bbc	echo.asm	/^ bbc:	eb 4e                	jmp    c0c <malloc+0x148>$/;"	l
bbc	grep.asm	/^ bbc:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bbc	init.asm	/^ bbc:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bbc	ls.asm	/^     bbc:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
bbc	mkdir.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	rm.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	usertests.asm	/^     bbc:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bbd	cat.asm	/^ bbd:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bbd	eager_mmap.asm	/^ bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bbd	kill.asm	/^ bbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbd	lazy_mmap.asm	/^ bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bbe	divide.asm	/^ bbe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bbe	echo.asm	/^ bbe:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
bbe	imshow.asm	/^ bbe:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
bbe	ln.asm	/^ bbe:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bbe	sh.asm	/^     bbe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bbe	stressfs.asm	/^ bbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bbe	wc.asm	/^ bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbf	bad_mmap.asm	/^ bbf:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bbf	init.asm	/^ bbf:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bbf	prettyprint.asm	/^     bbf:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bc	cat.asm	/^  bc:	55                   	push   %rbp$/;"	l
bc	divide.asm	/^  bc:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
bc	mkdir.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	rm.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	zombie.asm	/^  bc:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
bc0	cat.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	mkdir.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	rm.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc1	eager_mmap.asm	/^ bc1:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bc1	kill.asm	/^ bc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc1	lazy_mmap.asm	/^ bc1:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bc1	sh.asm	/^     bc1:	48 89 c7             	mov    %rax,%rdi$/;"	l
bc2	bad_mmap.asm	/^ bc2:	c1 e0 04             	shl    $0x4,%eax$/;"	l
bc2	divide.asm	/^ bc2:	77 17                	ja     bdb <free+0x4f>$/;"	l
bc2	init.asm	/^ bc2:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
bc2	ln.asm	/^ bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc2	stressfs.asm	/^ bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc2	wc.asm	/^ bc2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc3	cat.asm	/^ bc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc3	grep.asm	/^ bc3:	eb 2b                	jmp    bf0 <printf+0x298>$/;"	l
bc3	ls.asm	/^     bc3:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc3	mkdir.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	rm.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	usertests.asm	/^     bc3:	00 00 00 $/;"	l
bc4	divide.asm	/^ bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc4	eager_mmap.asm	/^ bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc4	lazy_mmap.asm	/^ bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc4	sh.asm	/^     bc4:	48 b8 e6 06 00 00 00 	movabs $0x6e6,%rax$/;"	l
bc5	bad_mmap.asm	/^ bc5:	89 c7                	mov    %eax,%edi$/;"	l
bc5	echo.asm	/^ bc5:	00 00 00 $/;"	l
bc5	grep.asm	/^ bc5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bc5	imshow.asm	/^ bc5:	48 01 d0             	add    %rdx,%rax$/;"	l
bc5	kill.asm	/^ bc5:	eb 4e                	jmp    c15 <malloc+0x148>$/;"	l
bc5	prettyprint.asm	/^     bc5:	89 d2                	mov    %edx,%edx$/;"	l
bc5	wc.asm	/^ bc5:	89 c0                	mov    %eax,%eax$/;"	l
bc6	init.asm	/^ bc6:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
bc6	ln.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	ls.asm	/^     bc6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bc6	stressfs.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	usertests.asm	/^     bc6:	ff d0                	callq  *%rax$/;"	l
bc7	bad_mmap.asm	/^ bc7:	48 b8 a8 05 00 00 00 	movabs $0x5a8,%rax$/;"	l
bc7	cat.asm	/^ bc7:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc7	kill.asm	/^ bc7:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bc7	mkdir.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	prettyprint.asm	/^     bc7:	48 01 d0             	add    %rdx,%rax$/;"	l
bc7	rm.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	wc.asm	/^ bc7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bc8	divide.asm	/^ bc8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bc8	eager_mmap.asm	/^ bc8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bc8	echo.asm	/^ bc8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc8	imshow.asm	/^ bc8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bc8	lazy_mmap.asm	/^ bc8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bc8	usertests.asm	/^     bc8:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bc9	ln.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc9	stressfs.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bca	init.asm	/^ bca:	83 c0 01             	add    $0x1,%eax$/;"	l
bca	mkdir.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bca	prettyprint.asm	/^     bca:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bca	rm.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon4
bcb	cat.asm	/^ bcb:	48 89 c7             	mov    %rax,%rdi$/;"	l
bcb	eager_mmap.asm	/^ bcb:	eb 0b                	jmp    bd8 <free+0x11e>$/;"	l
bcb	echo.asm	/^ bcb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bcb	imshow.asm	/^ bcb:	84 c0                	test   %al,%al$/;"	l
bcb	lazy_mmap.asm	/^ bcb:	eb 0b                	jmp    bd8 <free+0x11e>$/;"	l
bcb	sh.asm	/^     bcb:	00 00 00 $/;"	l
bcb	wc.asm	/^ bcb:	48 89 c2             	mov    %rax,%rdx$/;"	l
bcc	divide.asm	/^ bcc:	77 2f                	ja     bfd <free+0x71>$/;"	l
bcc	grep.asm	/^ bcc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bcc	ln.asm	/^ bcc:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
bcc	mkdir.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	rm.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	stressfs.asm	/^ bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bcd	eager_mmap.asm	/^ bcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcd	imshow.asm	/^ bcd:	0f 85 fc fc ff ff    	jne    8cf <printf+0x9e>$/;"	l
bcd	init.asm	/^ bcd:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	lazy_mmap.asm	/^ bcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcd	ls.asm	/^     bcd:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bce	bad_mmap.asm	/^ bce:	00 00 00 $/;"	l
bce	cat.asm	/^ bce:	48 b8 3e 0a 00 00 00 	movabs $0xa3e,%rax$/;"	l
bce	divide.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bce	kill.asm	/^ bce:	00 00 00 $/;"	l
bce	sh.asm	/^     bce:	ff d0                	callq  *%rax$/;"	l
bce	wc.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcf	echo.asm	/^ bcf:	75 23                	jne    bf4 <malloc+0x130>$/;"	l
bcf	grep.asm	/^ bcf:	0f be d0             	movsbl %al,%edx$/;"	l
bcf	usertests.asm	/^     bcf:	00 00 00 $/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	cat.asm	/^  bd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd	echo.asm	/^  bd:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
bd	kill.asm	/^  bd:	89 ca                	mov    %ecx,%edx$/;"	l
bd	ls.asm	/^      bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bd	stressfs.asm	/^  bd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
bd	usertests.asm	/^      bd:	ff d2                	callq  *%rdx$/;"	l
bd0	init.asm	/^ bd0:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
bd0	mkdir.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	prettyprint.asm	/^     bd0:	83 c2 08             	add    $0x8,%edx$/;"	l
bd0	rm.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	sh.asm	/^     bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bd0	stressfs.asm	/^ bd0:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bd1	bad_mmap.asm	/^ bd1:	ff d0                	callq  *%rax$/;"	l
bd1	eager_mmap.asm	/^ bd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd1	echo.asm	/^ bd1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bd1	kill.asm	/^ bd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd1	lazy_mmap.asm	/^ bd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd2	divide.asm	/^ bd2:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd2	grep.asm	/^ bd2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bd2	usertests.asm	/^     bd2:	8b 00                	mov    (%rax),%eax$/;"	l
bd2	wc.asm	/^ bd2:	48 01 d0             	add    %rdx,%rax$/;"	l
bd3	bad_mmap.asm	/^ bd3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bd3	imshow.asm	/^ bd3:	90                   	nop$/;"	l
bd3	ln.asm	/^ bd3:	00 00 00 $/;"	l
bd3	prettyprint.asm	/^     bd3:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
bd4	echo.asm	/^ bd4:	89 c7                	mov    %eax,%edi$/;"	l
bd4	imshow.asm	/^ bd4:	c9                   	leaveq $/;"	l
bd4	kill.asm	/^ bd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bd4	ls.asm	/^     bd4:	00 $/;"	l
bd4	mkdir.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	rm.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	sh.asm	/^     bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	stressfs.asm	/^ bd4:	48 89 c7             	mov    %rax,%rdi$/;"	l
bd4	usertests.asm	/^     bd4:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
bd5	cat.asm	/^ bd5:	00 00 00 $/;"	l
bd5	divide.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd5	eager_mmap.asm	/^ bd5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bd5	imshow.asm	/^ bd5:	c3                   	retq   $/;"	l
bd5	lazy_mmap.asm	/^ bd5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bd5	ls.asm	/^     bd5:	75 3e                	jne    c15 <printf+0x298>$/;"	l
bd5	wc.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd6	echo.asm	/^ bd6:	48 b8 4b 0a 00 00 00 	movabs $0xa4b,%rax$/;"	l
bd6	imshow.asm	/^ bd6:	55                   	push   %rbp$/;"	l
bd6	ln.asm	/^ bd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd7	bad_mmap.asm	/^ bd7:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
bd7	imshow.asm	/^ bd7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd7	init.asm	/^ bd7:	00 00 00 $/;"	l
bd7	ls.asm	/^     bd7:	48 b8 61 10 00 00 00 	movabs $0x1061,%rax$/;"	l
bd7	stressfs.asm	/^ bd7:	48 b8 47 0a 00 00 00 	movabs $0xa47,%rax$/;"	l
bd7	usertests.asm	/^     bd7:	74 45                	je     c1e <writetest1+0x285>$/;"	l
bd8	cat.asm	/^ bd8:	ff d0                	callq  *%rax$/;"	l
bd8	eager_mmap.asm	/^ bd8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
bd8	grep.asm	/^ bd8:	89 d6                	mov    %edx,%esi$/;"	l
bd8	kill.asm	/^ bd8:	75 23                	jne    bfd <malloc+0x130>$/;"	l
bd8	lazy_mmap.asm	/^ bd8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
bd8	mkdir.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	rm.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	sh.asm	/^     bd8:	c9                   	leaveq $/;"	l
bd9	divide.asm	/^ bd9:	77 22                	ja     bfd <free+0x71>$/;"	l
bd9	prettyprint.asm	/^     bd9:	eb 12                	jmp    bed <printf+0x246>$/;"	l
bd9	sh.asm	/^     bd9:	c3                   	retq   $/;"	l
bd9	usertests.asm	/^     bd9:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bd9	wc.asm	/^ bd9:	75 27                	jne    c02 <free+0x113>$/;"	l
bda	cat.asm	/^ bda:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
bda	grep.asm	/^ bda:	89 c7                	mov    %eax,%edi$/;"	l
bda	imshow.asm	/^ bda:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
bda	init.asm	/^ bda:	48 8b 00             	mov    (%rax),%rax$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	kill.asm	/^ bda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bda	ln.asm	/^ bda:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bda	sh.asm	/^     bda:	55                   	push   %rbp$/;"	l
bdb	divide.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdb	mkdir.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	prettyprint.asm	/^     bdb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bdb	rm.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	sh.asm	/^     bdb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bdb	wc.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdc	bad_mmap.asm	/^ bdc:	75 07                	jne    be5 <morecore+0x41>$/;"	l
bdc	grep.asm	/^ bdc:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
bdd	echo.asm	/^ bdd:	00 00 00 $/;"	l
bdd	init.asm	/^ bdd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bdd	kill.asm	/^ bdd:	89 c7                	mov    %eax,%edi$/;"	l
bdd	ln.asm	/^ bdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bde	bad_mmap.asm	/^ bde:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bde	imshow.asm	/^ bde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
bde	ls.asm	/^     bde:	00 00 00 $/;"	l
bde	mkdir.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	rm.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	sh.asm	/^     bde:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bde	stressfs.asm	/^ bde:	00 00 00 $/;"	l
bdf	divide.asm	/^ bdf:	48 8b 00             	mov    (%rax),%rax$/;"	l
bdf	eager_mmap.asm	/^ bdf:	00 00 00 $/;"	l
bdf	kill.asm	/^ bdf:	48 b8 54 0a 00 00 00 	movabs $0xa54,%rax$/;"	l
bdf	lazy_mmap.asm	/^ bdf:	00 00 00 $/;"	l
bdf	wc.asm	/^ bdf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
be	bad_mmap.asm	/^  be:	48 b9 cd 06 00 00 00 	movabs $0x6cd,%rcx$/;"	l
be	grep.asm	/^  be:	00 00 00 $/;"	l
be	imshow.asm	/^  be:	00 00 00 $/;"	l
be	ln.asm	/^  be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
be	prettyprint.asm	/^      be:	00 00 00 $/;"	l
be	sh.asm	/^      be:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
be	wc.asm	/^  be:	00 00 00 $/;"	l
be0	echo.asm	/^ be0:	ff d0                	callq  *%rax$/;"	l
be0	usertests.asm	/^     be0:	00 00 00 $/;"	l
be1	cat.asm	/^ be1:	00 00 00 $/;"	l
be1	init.asm	/^ be1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
be1	ln.asm	/^ be1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
be1	ls.asm	/^     be1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
be1	stressfs.asm	/^ be1:	ff d0                	callq  *%rax$/;"	l
be2	divide.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	eager_mmap.asm	/^ be2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
be2	echo.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	imshow.asm	/^ be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
be2	lazy_mmap.asm	/^ be2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
be2	prettyprint.asm	/^     be2:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
be2	sh.asm	/^     be2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
be2	wc.asm	/^ be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be3	bad_mmap.asm	/^ be3:	eb 36                	jmp    c1b <morecore+0x77>$/;"	l
be3	grep.asm	/^ be3:	00 00 00 $/;"	l
be3	stressfs.asm	/^ be3:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
be3	usertests.asm	/^     be3:	8b 08                	mov    (%rax),%ecx$/;"	l
be4	cat.asm	/^ be4:	48 8b 00             	mov    (%rax),%rax$/;"	l
be5	bad_mmap.asm	/^ be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
be5	ln.asm	/^ be5:	eb 4e                	jmp    c35 <malloc+0x148>$/;"	l
be5	mkdir.asm	/^ be5:	00 00 00 $/;"	l
be5	rm.asm	/^ be5:	00 00 00 $/;"	l
be5	usertests.asm	/^     be5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
be6	divide.asm	/^ be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be6	eager_mmap.asm	/^ be6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
be6	echo.asm	/^ be6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
be6	grep.asm	/^ be6:	ff d0                	callq  *%rax$/;"	l
be6	imshow.asm	/^ be6:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
be6	init.asm	/^ be6:	75 4a                	jne    c32 <malloc+0x7e>$/;"	l
be6	kill.asm	/^ be6:	00 00 00 $/;"	l
be6	lazy_mmap.asm	/^ be6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
be6	prettyprint.asm	/^     be6:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
be6	sh.asm	/^     be6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
be6	wc.asm	/^ be6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
be7	cat.asm	/^ be7:	c9                   	leaveq $/;"	l
be7	ln.asm	/^ be7:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
be8	cat.asm	/^ be8:	c3                   	retq   $/;"	l
be8	grep.asm	/^ be8:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
be8	init.asm	/^ be8:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
be8	ls.asm	/^     be8:	eb 2b                	jmp    c15 <printf+0x298>$/;"	l
be8	mkdir.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be8	rm.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be9	bad_mmap.asm	/^ be9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
be9	cat.asm	/^ be9:	55                   	push   %rbp$/;"	l
be9	eager_mmap.asm	/^ be9:	90                   	nop$/;"	l
be9	kill.asm	/^ be9:	ff d0                	callq  *%rax$/;"	l
be9	lazy_mmap.asm	/^ be9:	90                   	nop$/;"	l
be9	wc.asm	/^ be9:	01 c2                	add    %eax,%edx$/;"	l
bea	cat.asm	/^ bea:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bea	divide.asm	/^ bea:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bea	eager_mmap.asm	/^ bea:	c9                   	leaveq $/;"	l
bea	imshow.asm	/^ bea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bea	lazy_mmap.asm	/^ bea:	c9                   	leaveq $/;"	l
bea	ls.asm	/^     bea:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bea	sh.asm	/^     bea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
bea	stressfs.asm	/^ bea:	00 00 00 $/;"	l
beb	eager_mmap.asm	/^ beb:	c3                   	retq   $/;"	l
beb	echo.asm	/^ beb:	75 07                	jne    bf4 <malloc+0x130>$/;"	l
beb	kill.asm	/^ beb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
beb	lazy_mmap.asm	/^ beb:	c3                   	retq   $/;"	l
beb	wc.asm	/^ beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bec	eager_mmap.asm	/^ bec:	55                   	push   %rbp$/;"	l
bec	lazy_mmap.asm	/^ bec:	55                   	push   %rbp$/;"	l
bec	mkdir.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	rm.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	usertests.asm	/^     bec:	00 00 00 $/;"	l
bed	bad_mmap.asm	/^ bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bed	cat.asm	/^ bed:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bed	eager_mmap.asm	/^ bed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bed	echo.asm	/^ bed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bed	lazy_mmap.asm	/^ bed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bed	prettyprint.asm	/^     bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bed	stressfs.asm	/^ bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bee	divide.asm	/^ bee:	76 c7                	jbe    bb7 <free+0x2b>$/;"	l
bee	imshow.asm	/^ bee:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
bee	ln.asm	/^ bee:	00 00 00 $/;"	l
bee	sh.asm	/^     bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bef	grep.asm	/^ bef:	01 $/;"	l
bef	init.asm	/^ bef:	00 00 00 $/;"	l
bef	kill.asm	/^ bef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
bef	mkdir.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	rm.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	usertests.asm	/^     bef:	8b 00                	mov    (%rax),%eax$/;"	l
bef	wc.asm	/^ bef:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	eager_mmap.asm	/^  bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf	kill.asm	/^  bf:	48 89 fe             	mov    %rdi,%rsi$/;"	l
bf	lazy_mmap.asm	/^  bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf	usertests.asm	/^      bf:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bf0	divide.asm	/^ bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf0	eager_mmap.asm	/^ bf0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bf0	grep.asm	/^ bf0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bf0	lazy_mmap.asm	/^ bf0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bf0	prettyprint.asm	/^     bf0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bf0	stressfs.asm	/^ bf0:	c9                   	leaveq $/;"	l
bf1	bad_mmap.asm	/^ bf1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bf1	cat.asm	/^ bf1:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bf1	ln.asm	/^ bf1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf1	ls.asm	/^     bf1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf1	stressfs.asm	/^ bf1:	c3                   	retq   $/;"	l
bf1	usertests.asm	/^     bf1:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
bf2	echo.asm	/^ bf2:	eb 18                	jmp    c0c <malloc+0x148>$/;"	l
bf2	init.asm	/^ bf2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bf2	sh.asm	/^     bf2:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bf2	stressfs.asm	/^ bf2:	55                   	push   %rbp$/;"	l
bf2	wc.asm	/^ bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf3	mkdir.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	rm.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	stressfs.asm	/^ bf3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bf4	bad_mmap.asm	/^ bf4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bf4	cat.asm	/^ bf4:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bf4	divide.asm	/^ bf4:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf4	eager_mmap.asm	/^ bf4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bf4	echo.asm	/^ bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf4	kill.asm	/^ bf4:	75 07                	jne    bfd <malloc+0x130>$/;"	l
bf4	lazy_mmap.asm	/^ bf4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bf4	ln.asm	/^ bf4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bf4	ls.asm	/^     bf4:	0f be d0             	movsbl %al,%edx$/;"	l
bf4	usertests.asm	/^     bf4:	48 be d8 6b 00 00 00 	movabs $0x6bd8,%rsi$/;"	l
bf5	imshow.asm	/^ bf5:	00 00 00 $/;"	l
bf5	sh.asm	/^     bf5:	48 89 c7             	mov    %rax,%rdi$/;"	l
bf6	init.asm	/^ bf6:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
bf6	kill.asm	/^ bf6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf6	stressfs.asm	/^ bf6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bf6	wc.asm	/^ bf6:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bf7	bad_mmap.asm	/^ bf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf7	cat.asm	/^ bf7:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
bf7	divide.asm	/^ bf7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bf7	eager_mmap.asm	/^ bf7:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
bf7	grep.asm	/^ bf7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf7	lazy_mmap.asm	/^ bf7:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
bf7	ls.asm	/^     bf7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bf7	mkdir.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf7	prettyprint.asm	/^     bf7:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bf7	rm.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf8	echo.asm	/^ bf8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bf8	imshow.asm	/^ bf8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf8	ln.asm	/^ bf8:	75 23                	jne    c1d <malloc+0x130>$/;"	l
bf8	sh.asm	/^     bf8:	48 b8 e5 0e 00 00 00 	movabs $0xee5,%rax$/;"	l
bf9	mkdir.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	rm.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	wc.asm	/^ bf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfa	grep.asm	/^ bfa:	84 c0                	test   %al,%al$/;"	l
bfa	ln.asm	/^ bfa:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bfa	stressfs.asm	/^ bfa:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bfb	bad_mmap.asm	/^ bfb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bfb	cat.asm	/^ bfb:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
bfb	divide.asm	/^ bfb:	76 ba                	jbe    bb7 <free+0x2b>$/;"	l
bfb	imshow.asm	/^ bfb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bfb	kill.asm	/^ bfb:	eb 18                	jmp    c15 <malloc+0x148>$/;"	l
bfb	usertests.asm	/^     bfb:	00 00 00 $/;"	l
bfc	echo.asm	/^ bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfc	grep.asm	/^ bfc:	75 c7                	jne    bc5 <printf+0x26d>$/;"	l
bfd	divide.asm	/^ bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bfd	init.asm	/^ bfd:	00 00 00 $/;"	l
bfd	kill.asm	/^ bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfd	ln.asm	/^ bfd:	89 c7                	mov    %eax,%edi$/;"	l
bfd	ls.asm	/^     bfd:	89 d6                	mov    %edx,%esi$/;"	l
bfd	stressfs.asm	/^ bfd:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bfd	wc.asm	/^ bfd:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bfe	eager_mmap.asm	/^ bfe:	77 07                	ja     c07 <morecore+0x1b>$/;"	l
bfe	grep.asm	/^ bfe:	e9 c8 00 00 00       	jmpq   ccb <printf+0x373>$/;"	l
bfe	lazy_mmap.asm	/^ bfe:	77 07                	ja     c07 <morecore+0x1b>$/;"	l
bfe	prettyprint.asm	/^     bfe:	00 $/;"	l
bfe	usertests.asm	/^     bfe:	89 c7                	mov    %eax,%edi$/;"	l
bff	bad_mmap.asm	/^ bff:	48 89 c7             	mov    %rax,%rdi$/;"	l
bff	cat.asm	/^ bff:	83 c0 01             	add    $0x1,%eax$/;"	l
bff	imshow.asm	/^ bff:	eb 2f                	jmp    c30 <free+0x5a>$/;"	l
bff	ln.asm	/^ bff:	48 b8 74 0a 00 00 00 	movabs $0xa74,%rax$/;"	l
bff	ls.asm	/^     bff:	89 c7                	mov    %eax,%edi$/;"	l
bff	prettyprint.asm	/^     bff:	75 3e                	jne    c3f <printf+0x298>$/;"	l
bff	sh.asm	/^     bff:	00 00 00 $/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	bad_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	eager_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	imshow.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	lazy_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prettyprint.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bss_end_addr	bootmain.c	/^  uint64 bss_end_addr;$/;"	m	struct:mbheader	file:
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon8	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	bad_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	divide.asm	/^   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c	eager_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
c	imshow.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	lazy_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prettyprint.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	cat.asm	/^  c0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c0	echo.asm	/^  c0:	90                   	nop$/;"	l
c0	forktest.asm	/^  c0:	eb 2b                	jmp    ed <forktest+0x5c>$/;"	l
c0	init.asm	/^  c0:	00 00 00 $/;"	l
c0	stressfs.asm	/^  c0:	01 d0                	add    %edx,%eax$/;"	l
c00	eager_mmap.asm	/^ c00:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c00	echo.asm	/^ c00:	48 8b 00             	mov    (%rax),%rax$/;"	l
c00	init.asm	/^ c00:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c00	lazy_mmap.asm	/^ c00:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c00	mkdir.asm	/^ c00:	00 00 00 $/;"	l
c00	rm.asm	/^ c00:	00 00 00 $/;"	l
c00	stressfs.asm	/^ c00:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c00	usertests.asm	/^     c00:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c00	wc.asm	/^ c00:	eb 0b                	jmp    c0d <free+0x11e>$/;"	l
c01	divide.asm	/^ c01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c01	imshow.asm	/^ c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c01	kill.asm	/^ c01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c01	ls.asm	/^     c01:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c01	prettyprint.asm	/^     c01:	48 b8 e1 13 00 00 00 	movabs $0x13e1,%rax$/;"	l
c02	bad_mmap.asm	/^ c02:	48 b8 72 0a 00 00 00 	movabs $0xa72,%rax$/;"	l
c02	cat.asm	/^ c02:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c02	sh.asm	/^     c02:	ff d0                	callq  *%rax$/;"	l
c02	wc.asm	/^ c02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c03	echo.asm	/^ c03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c03	grep.asm	/^ c03:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c03	mkdir.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c03	rm.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c04	divide.asm	/^ c04:	89 c0                	mov    %eax,%eax$/;"	l
c04	init.asm	/^ c04:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c04	sh.asm	/^     c04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c04	stressfs.asm	/^ c04:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c05	cat.asm	/^ c05:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c05	imshow.asm	/^ c05:	48 8b 00             	mov    (%rax),%rax$/;"	l
c05	kill.asm	/^ c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c05	usertests.asm	/^     c05:	49 b8 d1 61 00 00 00 	movabs $0x61d1,%r8$/;"	l
c06	divide.asm	/^ c06:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c06	ln.asm	/^ c06:	00 00 00 $/;"	l
c06	mkdir.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	rm.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	wc.asm	/^ c06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c07	eager_mmap.asm	/^ c07:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c07	echo.asm	/^ c07:	e9 41 ff ff ff       	jmpq   b4d <malloc+0x89>$/;"	l
c07	init.asm	/^ c07:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c07	lazy_mmap.asm	/^ c07:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c08	imshow.asm	/^ c08:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c08	ls.asm	/^     c08:	00 00 00 $/;"	l
c08	prettyprint.asm	/^     c08:	00 00 00 $/;"	l
c08	sh.asm	/^     c08:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
c08	stressfs.asm	/^ c08:	83 c0 01             	add    $0x1,%eax$/;"	l
c09	bad_mmap.asm	/^ c09:	00 00 00 $/;"	l
c09	kill.asm	/^ c09:	48 8b 00             	mov    (%rax),%rax$/;"	l
c09	ln.asm	/^ c09:	ff d0                	callq  *%rax$/;"	l
c0a	divide.asm	/^ c0a:	48 89 c2             	mov    %rax,%rdx$/;"	l
c0a	eager_mmap.asm	/^ c0a:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c0a	grep.asm	/^ c0a:	75 5d                	jne    c69 <printf+0x311>$/;"	l
c0a	lazy_mmap.asm	/^ c0a:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c0a	mkdir.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	rm.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	wc.asm	/^ c0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c0b	ln.asm	/^ c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0b	ls.asm	/^     c0b:	ff d0                	callq  *%rax$/;"	l
c0b	prettyprint.asm	/^     c0b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
c0b	stressfs.asm	/^ c0b:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c0c	bad_mmap.asm	/^ c0c:	ff d0                	callq  *%rax$/;"	l
c0c	cat.asm	/^ c0c:	00 00 00 $/;"	l
c0c	echo.asm	/^ c0c:	c9                   	leaveq $/;"	l
c0c	grep.asm	/^ c0c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c0c	imshow.asm	/^ c0c:	77 17                	ja     c25 <free+0x4f>$/;"	l
c0c	kill.asm	/^ c0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0c	mkdir.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	rm.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	sh.asm	/^     c0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c0c	usertests.asm	/^     c0c:	00 00 00 $/;"	l
c0d	divide.asm	/^ c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0d	eager_mmap.asm	/^ c0d:	89 c7                	mov    %eax,%edi$/;"	l
c0d	echo.asm	/^ c0d:	c3                   	retq   $/;"	l
c0d	lazy_mmap.asm	/^ c0d:	89 c7                	mov    %eax,%edi$/;"	l
c0d	ls.asm	/^     c0d:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c0d	wc.asm	/^ c0d:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c0e	bad_mmap.asm	/^ c0e:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c0e	imshow.asm	/^ c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0e	init.asm	/^ c0e:	00 00 00 $/;"	l
c0e	stressfs.asm	/^ c0e:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c0f	cat.asm	/^ c0f:	48 8b 00             	mov    (%rax),%rax$/;"	l
c0f	eager_mmap.asm	/^ c0f:	48 b8 f0 05 00 00 00 	movabs $0x5f0,%rax$/;"	l
c0f	lazy_mmap.asm	/^ c0f:	48 b8 f0 05 00 00 00 	movabs $0x5f0,%rax$/;"	l
c0f	ln.asm	/^ c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c0f	mkdir.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	rm.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	usertests.asm	/^     c0f:	41 ff d0             	callq  *%r8$/;"	l
c1	echo.asm	/^  c1:	c9                   	leaveq $/;"	l
c1	grep.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	imshow.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	ls.asm	/^      c1:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1	prettyprint.asm	/^      c1:	ff d2                	callq  *%rdx$/;"	l
c1	wc.asm	/^  c1:	89 c7                	mov    %eax,%edi$/;"	l
c1	zombie.asm	/^  c1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
c10	kill.asm	/^ c10:	e9 41 ff ff ff       	jmpq   b56 <malloc+0x89>$/;"	l
c10	sh.asm	/^     c10:	48 ba 05 1e 00 00 00 	movabs $0x1e05,%rdx$/;"	l
c11	divide.asm	/^ c11:	48 01 c2             	add    %rax,%rdx$/;"	l
c11	init.asm	/^ c11:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c11	mkdir.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c11	rm.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c12	cat.asm	/^ c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c12	grep.asm	/^ c12:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c12	imshow.asm	/^ c12:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c12	prettyprint.asm	/^     c12:	eb 2b                	jmp    c3f <printf+0x298>$/;"	l
c12	usertests.asm	/^     c12:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c14	divide.asm	/^ c14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c14	init.asm	/^ c14:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c14	ln.asm	/^ c14:	75 07                	jne    c1d <malloc+0x130>$/;"	l
c14	ls.asm	/^     c14:	01 $/;"	l
c14	prettyprint.asm	/^     c14:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c14	wc.asm	/^ c14:	00 00 00 $/;"	l
c15	bad_mmap.asm	/^ c15:	00 00 00 $/;"	l
c15	grep.asm	/^ c15:	73 23                	jae    c3a <printf+0x2e2>$/;"	l
c15	kill.asm	/^ c15:	c9                   	leaveq $/;"	l
c15	ls.asm	/^     c15:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c15	stressfs.asm	/^ c15:	00 00 00 $/;"	l
c16	cat.asm	/^ c16:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c16	eager_mmap.asm	/^ c16:	00 00 00 $/;"	l
c16	imshow.asm	/^ c16:	77 2f                	ja     c47 <free+0x71>$/;"	l
c16	kill.asm	/^ c16:	c3                   	retq   $/;"	l
c16	lazy_mmap.asm	/^ c16:	00 00 00 $/;"	l
c16	ln.asm	/^ c16:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c17	grep.asm	/^ c17:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c17	sh.asm	/^     c17:	00 00 00 $/;"	l
c17	wc.asm	/^ c17:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
c18	bad_mmap.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c18	divide.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c18	imshow.asm	/^ c18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c18	mkdir.asm	/^ c18:	00 00 00 $/;"	l
c18	rm.asm	/^ c18:	00 00 00 $/;"	l
c18	stressfs.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c19	eager_mmap.asm	/^ c19:	ff d0                	callq  *%rax$/;"	l
c19	lazy_mmap.asm	/^ c19:	ff d0                	callq  *%rax$/;"	l
c19	usertests.asm	/^     c19:	00 00 00 $/;"	l
c1a	sh.asm	/^     c1a:	48 89 ce             	mov    %rcx,%rsi$/;"	l
c1b	bad_mmap.asm	/^ c1b:	c9                   	leaveq $/;"	l
c1b	cat.asm	/^ c1b:	75 4a                	jne    c67 <malloc+0x7e>$/;"	l
c1b	divide.asm	/^ c1b:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c1b	eager_mmap.asm	/^ c1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1b	init.asm	/^ c1b:	00 00 00 $/;"	l
c1b	lazy_mmap.asm	/^ c1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1b	ln.asm	/^ c1b:	eb 18                	jmp    c35 <malloc+0x148>$/;"	l
c1b	mkdir.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	prettyprint.asm	/^     c1b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1b	rm.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	stressfs.asm	/^ c1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c1b	wc.asm	/^ c1b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c1c	bad_mmap.asm	/^ c1c:	c3                   	retq   $/;"	l
c1c	imshow.asm	/^ c1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
c1c	ls.asm	/^     c1c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1c	usertests.asm	/^     c1c:	ff d0                	callq  *%rax$/;"	l
c1d	bad_mmap.asm	/^ c1d:	55                   	push   %rbp$/;"	l
c1d	cat.asm	/^ c1d:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c1d	ln.asm	/^ c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c1d	mkdir.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	rm.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	sh.asm	/^     c1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1e	bad_mmap.asm	/^ c1e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c1e	divide.asm	/^ c1e:	75 2d                	jne    c4d <free+0xc1>$/;"	l
c1e	grep.asm	/^ c1e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c1e	init.asm	/^ c1e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c1e	prettyprint.asm	/^     c1e:	0f be d0             	movsbl %al,%edx$/;"	l
c1e	usertests.asm	/^     c1e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
c1e	wc.asm	/^ c1e:	90                   	nop$/;"	l
c1f	eager_mmap.asm	/^ c1f:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c1f	imshow.asm	/^ c1f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c1f	lazy_mmap.asm	/^ c1f:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c1f	ls.asm	/^     c1f:	84 c0                	test   %al,%al$/;"	l
c1f	stressfs.asm	/^ c1f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c1f	wc.asm	/^ c1f:	c9                   	leaveq $/;"	l
c2	echo.asm	/^  c2:	c3                   	retq   $/;"	l
c2	forktest.asm	/^  c2:	48 b8 03 05 00 00 00 	movabs $0x503,%rax$/;"	l
c2	kill.asm	/^  c2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
c2	ln.asm	/^  c2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
c2	stressfs.asm	/^  c2:	88 45 e8             	mov    %al,-0x18(%rbp)$/;"	l
c20	divide.asm	/^ c20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c20	sh.asm	/^     c20:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
c20	wc.asm	/^ c20:	c3                   	retq   $/;"	l
c21	bad_mmap.asm	/^ c21:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c21	init.asm	/^ c21:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c21	ln.asm	/^ c21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c21	ls.asm	/^     c21:	75 c7                	jne    bea <printf+0x26d>$/;"	l
c21	mkdir.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	prettyprint.asm	/^     c21:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c21	rm.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	wc.asm	/^ c21:	55                   	push   %rbp$/;"	l
c22	usertests.asm	/^     c22:	e9 f2 fe ff ff       	jmpq   b19 <writetest1+0x180>$/;"	l
c22	wc.asm	/^ c22:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c23	imshow.asm	/^ c23:	77 22                	ja     c47 <free+0x71>$/;"	l
c23	ls.asm	/^     c23:	e9 c8 00 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
c24	cat.asm	/^ c24:	00 00 00 $/;"	l
c24	divide.asm	/^ c24:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c24	eager_mmap.asm	/^ c24:	75 07                	jne    c2d <morecore+0x41>$/;"	l
c24	grep.asm	/^ c24:	89 d2                	mov    %edx,%edx$/;"	l
c24	lazy_mmap.asm	/^ c24:	75 07                	jne    c2d <morecore+0x41>$/;"	l
c24	stressfs.asm	/^ c24:	75 4a                	jne    c70 <malloc+0x7e>$/;"	l
c25	bad_mmap.asm	/^ c25:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c25	imshow.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	ln.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	wc.asm	/^ c25:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c26	eager_mmap.asm	/^ c26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c26	grep.asm	/^ c26:	48 01 d0             	add    %rdx,%rax$/;"	l
c26	lazy_mmap.asm	/^ c26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c26	mkdir.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	rm.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	stressfs.asm	/^ c26:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c27	cat.asm	/^ c27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c27	divide.asm	/^ c27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c27	prettyprint.asm	/^     c27:	89 d6                	mov    %edx,%esi$/;"	l
c27	sh.asm	/^     c27:	00 00 00 $/;"	l
c27	usertests.asm	/^     c27:	90                   	nop$/;"	l
c28	bad_mmap.asm	/^ c28:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c28	init.asm	/^ c28:	00 00 00 $/;"	l
c28	ls.asm	/^     c28:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c28	mkdir.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	rm.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	usertests.asm	/^     c28:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
c29	grep.asm	/^ c29:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c29	imshow.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	ln.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	prettyprint.asm	/^     c29:	89 c7                	mov    %eax,%edi$/;"	l
c29	wc.asm	/^ c29:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c2a	sh.asm	/^     c2a:	ff d0                	callq  *%rax$/;"	l
c2b	bad_mmap.asm	/^ c2b:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c2b	cat.asm	/^ c2b:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c2b	divide.asm	/^ c2b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c2b	eager_mmap.asm	/^ c2b:	eb 36                	jmp    c63 <morecore+0x77>$/;"	l
c2b	init.asm	/^ c2b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c2b	lazy_mmap.asm	/^ c2b:	eb 36                	jmp    c63 <morecore+0x77>$/;"	l
c2b	prettyprint.asm	/^     c2b:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
c2b	usertests.asm	/^     c2b:	89 c7                	mov    %eax,%edi$/;"	l
c2c	imshow.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	ln.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	sh.asm	/^     c2c:	85 c0                	test   %eax,%eax$/;"	l
c2c	wc.asm	/^ c2c:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
c2d	eager_mmap.asm	/^ c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2d	lazy_mmap.asm	/^ c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2d	mkdir.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	rm.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	stressfs.asm	/^ c2d:	00 00 00 $/;"	l
c2d	usertests.asm	/^     c2d:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
c2e	divide.asm	/^ c2e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c2e	sh.asm	/^     c2e:	74 58                	je     c88 <parsepipe+0xae>$/;"	l
c2f	bad_mmap.asm	/^ c2f:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c2f	grep.asm	/^ c2f:	83 c2 08             	add    $0x8,%edx$/;"	l
c2f	ls.asm	/^     c2f:	75 5d                	jne    c8e <printf+0x311>$/;"	l
c2f	mkdir.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2f	rm.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3	divide.asm	/^  c3:	00 00 00 $/;"	l
c3	echo.asm	/^  c3:	55                   	push   %rbp$/;"	l
c3	grep.asm	/^  c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
c3	imshow.asm	/^  c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
c3	init.asm	/^  c3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
c3	mkdir.asm	/^  c3:	00 00 00 $/;"	l
c3	prettyprint.asm	/^      c3:	48 be 18 12 00 00 00 	movabs $0x1218,%rsi$/;"	l
c3	rm.asm	/^  c3:	00 00 00 $/;"	l
c3	wc.asm	/^  c3:	48 b8 99 05 00 00 00 	movabs $0x599,%rax$/;"	l
c30	imshow.asm	/^ c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c30	ln.asm	/^ c30:	e9 41 ff ff ff       	jmpq   b76 <malloc+0x89>$/;"	l
c30	sh.asm	/^     c30:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
c30	stressfs.asm	/^ c30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	divide.asm	/^ c31:	01 c2                	add    %eax,%edx$/;"	l
c31	eager_mmap.asm	/^ c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	lazy_mmap.asm	/^ c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	ls.asm	/^     c31:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c32	cat.asm	/^ c32:	00 00 00 $/;"	l
c32	grep.asm	/^ c32:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c32	init.asm	/^ c32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c32	prettyprint.asm	/^     c32:	00 00 00 $/;"	l
c33	bad_mmap.asm	/^ c33:	83 c0 01             	add    $0x1,%eax$/;"	l
c33	divide.asm	/^ c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c33	mkdir.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	rm.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	wc.asm	/^ c33:	77 07                	ja     c3c <morecore+0x1b>$/;"	l
c34	imshow.asm	/^ c34:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c34	sh.asm	/^     c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c34	stressfs.asm	/^ c34:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c34	usertests.asm	/^     c34:	00 00 00 $/;"	l
c35	cat.asm	/^ c35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c35	eager_mmap.asm	/^ c35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c35	lazy_mmap.asm	/^ c35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c35	ln.asm	/^ c35:	c9                   	leaveq $/;"	l
c35	prettyprint.asm	/^     c35:	ff d0                	callq  *%rax$/;"	l
c35	wc.asm	/^ c35:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c36	bad_mmap.asm	/^ c36:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c36	init.asm	/^ c36:	48 8b 00             	mov    (%rax),%rax$/;"	l
c36	ln.asm	/^ c36:	c3                   	retq   $/;"	l
c37	divide.asm	/^ c37:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c37	ls.asm	/^     c37:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c37	mkdir.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	prettyprint.asm	/^     c37:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c37	rm.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	usertests.asm	/^     c37:	ff d0                	callq  *%rax$/;"	l
c38	grep.asm	/^ c38:	eb 12                	jmp    c4c <printf+0x2f4>$/;"	l
c38	imshow.asm	/^ c38:	76 c7                	jbe    c01 <free+0x2b>$/;"	l
c38	sh.asm	/^     c38:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
c39	bad_mmap.asm	/^ c39:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c39	cat.asm	/^ c39:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c39	eager_mmap.asm	/^ c39:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c39	init.asm	/^ c39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c39	lazy_mmap.asm	/^ c39:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c39	usertests.asm	/^     c39:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
c3a	divide.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	grep.asm	/^ c3a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c3a	imshow.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	ls.asm	/^     c3a:	73 23                	jae    c5f <printf+0x2e2>$/;"	l
c3b	mkdir.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	rm.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	stressfs.asm	/^ c3b:	00 00 00 $/;"	l
c3c	cat.asm	/^ c3c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c3c	eager_mmap.asm	/^ c3c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c3c	lazy_mmap.asm	/^ c3c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c3c	ls.asm	/^     c3c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c3c	wc.asm	/^ c3c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c3d	init.asm	/^ c3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3d	sh.asm	/^     c3d:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c3e	divide.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	imshow.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	mkdir.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	prettyprint.asm	/^     c3e:	01 $/;"	l
c3e	rm.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	stressfs.asm	/^ c3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c3f	eager_mmap.asm	/^ c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c3f	lazy_mmap.asm	/^ c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c3f	prettyprint.asm	/^     c3f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c3f	wc.asm	/^ c3f:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c4	cat.asm	/^  c4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c4	eager_mmap.asm	/^  c4:	48 b9 15 07 00 00 00 	movabs $0x715,%rcx$/;"	l
c4	echo.asm	/^  c4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c4	lazy_mmap.asm	/^  c4:	48 b9 15 07 00 00 00 	movabs $0x715,%rcx$/;"	l
c4	ls.asm	/^      c4:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
c40	bad_mmap.asm	/^ c40:	00 00 00 $/;"	l
c40	usertests.asm	/^     c40:	00 00 00 $/;"	l
c41	divide.asm	/^ c41:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c41	grep.asm	/^ c41:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c41	imshow.asm	/^ c41:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c41	init.asm	/^ c41:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c42	mkdir.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	rm.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	sh.asm	/^     c42:	48 89 c7             	mov    %rax,%rdi$/;"	l
c42	stressfs.asm	/^ c42:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c42	wc.asm	/^ c42:	89 c7                	mov    %eax,%edi$/;"	l
c43	bad_mmap.asm	/^ c43:	48 8b 00             	mov    (%rax),%rax$/;"	l
c43	cat.asm	/^ c43:	00 00 00 $/;"	l
c43	eager_mmap.asm	/^ c43:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c43	lazy_mmap.asm	/^ c43:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c43	ls.asm	/^     c43:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c43	usertests.asm	/^     c43:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
c44	divide.asm	/^ c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c44	init.asm	/^ c44:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c44	wc.asm	/^ c44:	48 b8 25 06 00 00 00 	movabs $0x625,%rax$/;"	l
c45	grep.asm	/^ c45:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c45	imshow.asm	/^ c45:	76 ba                	jbe    c01 <free+0x2b>$/;"	l
c45	sh.asm	/^     c45:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
c45	stressfs.asm	/^ c45:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c46	bad_mmap.asm	/^ c46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c46	cat.asm	/^ c46:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c46	prettyprint.asm	/^     c46:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c47	eager_mmap.asm	/^ c47:	48 89 c7             	mov    %rax,%rdi$/;"	l
c47	imshow.asm	/^ c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c47	init.asm	/^ c47:	72 65                	jb     cae <malloc+0xfa>$/;"	l
c47	lazy_mmap.asm	/^ c47:	48 89 c7             	mov    %rax,%rdi$/;"	l
c47	mkdir.asm	/^ c47:	c9                   	leaveq $/;"	l
c47	rm.asm	/^ c47:	c9                   	leaveq $/;"	l
c48	divide.asm	/^ c48:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c48	mkdir.asm	/^ c48:	c3                   	retq   $/;"	l
c48	rm.asm	/^ c48:	c3                   	retq   $/;"	l
c49	cat.asm	/^ c49:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c49	init.asm	/^ c49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c49	ls.asm	/^     c49:	89 d2                	mov    %edx,%edx$/;"	l
c49	prettyprint.asm	/^     c49:	84 c0                	test   %al,%al$/;"	l
c4a	bad_mmap.asm	/^ c4a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c4a	eager_mmap.asm	/^ c4a:	48 b8 ba 0a 00 00 00 	movabs $0xaba,%rax$/;"	l
c4a	lazy_mmap.asm	/^ c4a:	48 b8 ba 0a 00 00 00 	movabs $0xaba,%rax$/;"	l
c4a	usertests.asm	/^     c4a:	00 00 00 $/;"	l
c4b	divide.asm	/^ c4b:	eb 0e                	jmp    c5b <free+0xcf>$/;"	l
c4b	imshow.asm	/^ c4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c4b	ls.asm	/^     c4b:	48 01 d0             	add    %rdx,%rax$/;"	l
c4b	prettyprint.asm	/^     c4b:	75 c7                	jne    c14 <printf+0x26d>$/;"	l
c4b	wc.asm	/^ c4b:	00 00 00 $/;"	l
c4c	grep.asm	/^ c4c:	8b 00                	mov    (%rax),%eax$/;"	l
c4c	sh.asm	/^     c4c:	00 00 00 $/;"	l
c4c	stressfs.asm	/^ c4c:	00 00 00 $/;"	l
c4d	divide.asm	/^ c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c4d	init.asm	/^ c4d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c4d	prettyprint.asm	/^     c4d:	e9 c8 00 00 00       	jmpq   d1a <printf+0x373>$/;"	l
c4d	usertests.asm	/^     c4d:	ff d0                	callq  *%rax$/;"	l
c4e	grep.asm	/^ c4e:	0f be d0             	movsbl %al,%edx$/;"	l
c4e	imshow.asm	/^ c4e:	89 c0                	mov    %eax,%eax$/;"	l
c4e	ls.asm	/^     c4e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c4e	wc.asm	/^ c4e:	ff d0                	callq  *%rax$/;"	l
c4f	bad_mmap.asm	/^ c4f:	75 4a                	jne    c9b <malloc+0x7e>$/;"	l
c4f	sh.asm	/^     c4f:	ff d0                	callq  *%rax$/;"	l
c4f	stressfs.asm	/^ c4f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c4f	usertests.asm	/^     c4f:	85 c0                	test   %eax,%eax$/;"	l
c5	bad_mmap.asm	/^  c5:	00 00 00 $/;"	l
c5	ln.asm	/^  c5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c5	sh.asm	/^      c5:	00 00 00 $/;"	l
c5	stressfs.asm	/^  c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
c50	cat.asm	/^ c50:	00 00 00 $/;"	l
c50	imshow.asm	/^ c50:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c50	init.asm	/^ c50:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c50	wc.asm	/^ c50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c51	bad_mmap.asm	/^ c51:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c51	divide.asm	/^ c51:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c51	eager_mmap.asm	/^ c51:	00 00 00 $/;"	l
c51	grep.asm	/^ c51:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c51	lazy_mmap.asm	/^ c51:	00 00 00 $/;"	l
c51	sh.asm	/^     c51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
c51	usertests.asm	/^     c51:	79 35                	jns    c88 <writetest1+0x2ef>$/;"	l
c52	prettyprint.asm	/^     c52:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c52	stressfs.asm	/^ c52:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c53	cat.asm	/^ c53:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c53	init.asm	/^ c53:	75 10                	jne    c65 <malloc+0xb1>$/;"	l
c53	usertests.asm	/^     c53:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c54	divide.asm	/^ c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c54	eager_mmap.asm	/^ c54:	ff d0                	callq  *%rax$/;"	l
c54	imshow.asm	/^ c54:	48 89 c2             	mov    %rax,%rdx$/;"	l
c54	lazy_mmap.asm	/^ c54:	ff d0                	callq  *%rax$/;"	l
c54	ls.asm	/^     c54:	83 c2 08             	add    $0x8,%edx$/;"	l
c54	wc.asm	/^ c54:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c55	init.asm	/^ c55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c55	sh.asm	/^     c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c56	cat.asm	/^ c56:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c56	eager_mmap.asm	/^ c56:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c56	lazy_mmap.asm	/^ c56:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c57	grep.asm	/^ c57:	89 d6                	mov    %edx,%esi$/;"	l
c57	imshow.asm	/^ c57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c57	ls.asm	/^     c57:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c58	bad_mmap.asm	/^ c58:	00 00 00 $/;"	l
c58	divide.asm	/^ c58:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c59	grep.asm	/^ c59:	89 c7                	mov    %eax,%edi$/;"	l
c59	init.asm	/^ c59:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c59	prettyprint.asm	/^     c59:	75 5d                	jne    cb8 <printf+0x311>$/;"	l
c59	sh.asm	/^     c59:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c59	stressfs.asm	/^ c59:	00 00 00 $/;"	l
c59	wc.asm	/^ c59:	75 07                	jne    c62 <morecore+0x41>$/;"	l
c5a	usertests.asm	/^     c5a:	00 00 00 $/;"	l
c5b	bad_mmap.asm	/^ c5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c5b	divide.asm	/^ c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5b	grep.asm	/^ c5b:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c5b	imshow.asm	/^ c5b:	48 01 c2             	add    %rax,%rdx$/;"	l
c5b	prettyprint.asm	/^     c5b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c5b	wc.asm	/^ c5b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c5c	init.asm	/^ c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c5c	sh.asm	/^     c5c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c5c	stressfs.asm	/^ c5c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c5d	cat.asm	/^ c5d:	00 00 00 $/;"	l
c5d	eager_mmap.asm	/^ c5d:	00 00 00 $/;"	l
c5d	lazy_mmap.asm	/^ c5d:	00 00 00 $/;"	l
c5d	ls.asm	/^     c5d:	eb 12                	jmp    c71 <printf+0x2f4>$/;"	l
c5d	usertests.asm	/^     c5d:	8b 00                	mov    (%rax),%eax$/;"	l
c5e	imshow.asm	/^ c5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5f	bad_mmap.asm	/^ c5f:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c5f	divide.asm	/^ c5f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c5f	ls.asm	/^     c5f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c5f	sh.asm	/^     c5f:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
c5f	stressfs.asm	/^ c5f:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c5f	usertests.asm	/^     c5f:	48 be f8 6b 00 00 00 	movabs $0x6bf8,%rsi$/;"	l
c6	divide.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	kill.asm	/^  c6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c6	mkdir.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	rm.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	usertests.asm	/^      c6:	00 00 00 $/;"	l
c6	zombie.asm	/^  c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c60	cat.asm	/^ c60:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c60	eager_mmap.asm	/^ c60:	48 8b 00             	mov    (%rax),%rax$/;"	l
c60	init.asm	/^ c60:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c60	lazy_mmap.asm	/^ c60:	48 8b 00             	mov    (%rax),%rax$/;"	l
c60	wc.asm	/^ c60:	eb 36                	jmp    c98 <morecore+0x77>$/;"	l
c61	prettyprint.asm	/^     c61:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c62	divide.asm	/^ c62:	89 c0                	mov    %eax,%eax$/;"	l
c62	grep.asm	/^ c62:	00 00 00 $/;"	l
c62	imshow.asm	/^ c62:	48 8b 00             	mov    (%rax),%rax$/;"	l
c62	wc.asm	/^ c62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c63	eager_mmap.asm	/^ c63:	c9                   	leaveq $/;"	l
c63	init.asm	/^ c63:	eb 2e                	jmp    c93 <malloc+0xdf>$/;"	l
c63	lazy_mmap.asm	/^ c63:	c9                   	leaveq $/;"	l
c64	divide.asm	/^ c64:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c64	eager_mmap.asm	/^ c64:	c3                   	retq   $/;"	l
c64	lazy_mmap.asm	/^ c64:	c3                   	retq   $/;"	l
c64	prettyprint.asm	/^     c64:	73 23                	jae    c89 <printf+0x2e2>$/;"	l
c65	eager_mmap.asm	/^ c65:	55                   	push   %rbp$/;"	l
c65	grep.asm	/^ c65:	ff d0                	callq  *%rax$/;"	l
c65	imshow.asm	/^ c65:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c65	init.asm	/^ c65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c65	lazy_mmap.asm	/^ c65:	55                   	push   %rbp$/;"	l
c66	bad_mmap.asm	/^ c66:	00 00 00 $/;"	l
c66	eager_mmap.asm	/^ c66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c66	lazy_mmap.asm	/^ c66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c66	ls.asm	/^     c66:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c66	prettyprint.asm	/^     c66:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c66	sh.asm	/^     c66:	00 00 00 $/;"	l
c66	stressfs.asm	/^ c66:	00 00 00 $/;"	l
c66	usertests.asm	/^     c66:	00 00 00 $/;"	l
c66	wc.asm	/^ c66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c67	cat.asm	/^ c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c67	grep.asm	/^ c67:	eb 62                	jmp    ccb <printf+0x373>$/;"	l
c68	divide.asm	/^ c68:	48 89 c2             	mov    %rax,%rdx$/;"	l
c68	imshow.asm	/^ c68:	75 2d                	jne    c97 <free+0xc1>$/;"	l
c69	bad_mmap.asm	/^ c69:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c69	eager_mmap.asm	/^ c69:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c69	grep.asm	/^ c69:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c69	init.asm	/^ c69:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c69	lazy_mmap.asm	/^ c69:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c69	sh.asm	/^     c69:	ff d0                	callq  *%rax$/;"	l
c69	stressfs.asm	/^ c69:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c69	usertests.asm	/^     c69:	89 c7                	mov    %eax,%edi$/;"	l
c6a	imshow.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6a	ls.asm	/^     c6a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c6a	wc.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6b	cat.asm	/^ c6b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c6b	divide.asm	/^ c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6b	sh.asm	/^     c6b:	48 89 c2             	mov    %rax,%rdx$/;"	l
c6b	usertests.asm	/^     c6b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c6c	init.asm	/^ c6c:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
c6d	bad_mmap.asm	/^ c6d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c6d	eager_mmap.asm	/^ c6d:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c6d	lazy_mmap.asm	/^ c6d:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c6d	prettyprint.asm	/^     c6d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c6e	cat.asm	/^ c6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c6e	imshow.asm	/^ c6e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c6e	sh.asm	/^     c6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6e	wc.asm	/^ c6e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c6f	divide.asm	/^ c6f:	48 01 d0             	add    %rdx,%rax$/;"	l
c6f	init.asm	/^ c6f:	89 c2                	mov    %eax,%edx$/;"	l
c7	cat.asm	/^  c7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
c7	echo.asm	/^  c7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c7	grep.asm	/^  c7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
c70	bad_mmap.asm	/^ c70:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c70	eager_mmap.asm	/^ c70:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c70	grep.asm	/^ c70:	75 21                	jne    c93 <printf+0x33b>$/;"	l
c70	lazy_mmap.asm	/^ c70:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c70	stressfs.asm	/^ c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c70	usertests.asm	/^     c70:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
c71	imshow.asm	/^ c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c71	init.asm	/^ c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c71	ls.asm	/^     c71:	8b 00                	mov    (%rax),%eax$/;"	l
c71	wc.asm	/^ c71:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c72	cat.asm	/^ c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c72	divide.asm	/^ c72:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c72	grep.asm	/^ c72:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c72	sh.asm	/^     c72:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c73	eager_mmap.asm	/^ c73:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c73	lazy_mmap.asm	/^ c73:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c73	ls.asm	/^     c73:	0f be d0             	movsbl %al,%edx$/;"	l
c73	prettyprint.asm	/^     c73:	89 d2                	mov    %edx,%edx$/;"	l
c74	stressfs.asm	/^ c74:	48 8b 00             	mov    (%rax),%rax$/;"	l
c74	wc.asm	/^ c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c75	imshow.asm	/^ c75:	48 8b 00             	mov    (%rax),%rax$/;"	l
c75	init.asm	/^ c75:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c75	prettyprint.asm	/^     c75:	48 01 d0             	add    %rdx,%rax$/;"	l
c75	sh.asm	/^     c75:	48 89 c7             	mov    %rax,%rdi$/;"	l
c76	cat.asm	/^ c76:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c76	divide.asm	/^ c76:	75 27                	jne    c9f <free+0x113>$/;"	l
c76	ls.asm	/^     c76:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c77	bad_mmap.asm	/^ c77:	00 00 00 $/;"	l
c77	eager_mmap.asm	/^ c77:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c77	lazy_mmap.asm	/^ c77:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c77	stressfs.asm	/^ c77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c77	usertests.asm	/^     c77:	00 00 00 $/;"	l
c78	divide.asm	/^ c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c78	grep.asm	/^ c78:	0f be d0             	movsbl %al,%edx$/;"	l
c78	imshow.asm	/^ c78:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c78	init.asm	/^ c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c78	prettyprint.asm	/^     c78:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c78	sh.asm	/^     c78:	48 b8 7c 06 00 00 00 	movabs $0x67c,%rax$/;"	l
c78	wc.asm	/^ c78:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c79	cat.asm	/^ c79:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c7a	bad_mmap.asm	/^ c7a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c7a	usertests.asm	/^     c7a:	ff d2                	callq  *%rdx$/;"	l
c7b	eager_mmap.asm	/^ c7b:	83 c0 01             	add    $0x1,%eax$/;"	l
c7b	grep.asm	/^ c7b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c7b	imshow.asm	/^ c7b:	01 c2                	add    %eax,%edx$/;"	l
c7b	lazy_mmap.asm	/^ c7b:	83 c0 01             	add    $0x1,%eax$/;"	l
c7b	stressfs.asm	/^ c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7c	cat.asm	/^ c7c:	72 65                	jb     ce3 <malloc+0xfa>$/;"	l
c7c	divide.asm	/^ c7c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c7c	init.asm	/^ c7c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c7c	ls.asm	/^     c7c:	89 d6                	mov    %edx,%esi$/;"	l
c7c	usertests.asm	/^     c7c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c7c	wc.asm	/^ c7c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c7d	bad_mmap.asm	/^ c7d:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c7d	imshow.asm	/^ c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7e	cat.asm	/^ c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7e	eager_mmap.asm	/^ c7e:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c7e	lazy_mmap.asm	/^ c7e:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c7e	ls.asm	/^     c7e:	89 c7                	mov    %eax,%edi$/;"	l
c7e	prettyprint.asm	/^     c7e:	83 c2 08             	add    $0x8,%edx$/;"	l
c7f	divide.asm	/^ c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7f	init.asm	/^ c7f:	89 c0                	mov    %eax,%eax$/;"	l
c7f	sh.asm	/^     c7f:	00 00 00 $/;"	l
c7f	stressfs.asm	/^ c7f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c7f	wc.asm	/^ c7f:	48 b8 ef 0a 00 00 00 	movabs $0xaef,%rax$/;"	l
c8	bad_mmap.asm	/^  c8:	ff d1                	callq  *%rcx$/;"	l
c8	divide.asm	/^  c8:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
c8	init.asm	/^  c8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c8	ln.asm	/^  c8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
c8	mkdir.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	rm.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	sh.asm	/^      c8:	ff d1                	callq  *%rcx$/;"	l
c80	ls.asm	/^     c80:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c81	eager_mmap.asm	/^ c81:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c81	grep.asm	/^ c81:	89 d6                	mov    %edx,%esi$/;"	l
c81	imshow.asm	/^ c81:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c81	init.asm	/^ c81:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c81	lazy_mmap.asm	/^ c81:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c81	prettyprint.asm	/^     c81:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c82	cat.asm	/^ c82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c82	sh.asm	/^     c82:	ff d0                	callq  *%rax$/;"	l
c82	stressfs.asm	/^ c82:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c83	divide.asm	/^ c83:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c83	grep.asm	/^ c83:	89 c7                	mov    %eax,%edi$/;"	l
c83	usertests.asm	/^     c83:	00 00 00 $/;"	l
c84	bad_mmap.asm	/^ c84:	00 00 00 $/;"	l
c84	imshow.asm	/^ c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c84	sh.asm	/^     c84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c85	cat.asm	/^ c85:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c85	grep.asm	/^ c85:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c85	init.asm	/^ c85:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
c85	stressfs.asm	/^ c85:	72 65                	jb     cec <malloc+0xfa>$/;"	l
c86	divide.asm	/^ c86:	01 c2                	add    %eax,%edx$/;"	l
c86	usertests.asm	/^     c86:	ff d0                	callq  *%rax$/;"	l
c86	wc.asm	/^ c86:	00 00 00 $/;"	l
c87	bad_mmap.asm	/^ c87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c87	ls.asm	/^     c87:	00 00 00 $/;"	l
c87	prettyprint.asm	/^     c87:	eb 12                	jmp    c9b <printf+0x2f4>$/;"	l
c87	stressfs.asm	/^ c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	cat.asm	/^ c88:	75 10                	jne    c9a <malloc+0xb1>$/;"	l
c88	divide.asm	/^ c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	eager_mmap.asm	/^ c88:	00 00 00 $/;"	l
c88	imshow.asm	/^ c88:	48 8b 00             	mov    (%rax),%rax$/;"	l
c88	lazy_mmap.asm	/^ c88:	00 00 00 $/;"	l
c88	sh.asm	/^     c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	usertests.asm	/^     c88:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c89	init.asm	/^ c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c89	prettyprint.asm	/^     c89:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c89	wc.asm	/^ c89:	ff d0                	callq  *%rax$/;"	l
c8a	bad_mmap.asm	/^ c8a:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c8a	cat.asm	/^ c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c8a	ls.asm	/^     c8a:	ff d0                	callq  *%rax$/;"	l
c8b	eager_mmap.asm	/^ c8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c8b	imshow.asm	/^ c8b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8b	lazy_mmap.asm	/^ c8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c8b	stressfs.asm	/^ c8b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c8b	wc.asm	/^ c8b:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c8c	divide.asm	/^ c8c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c8c	grep.asm	/^ c8c:	00 00 00 $/;"	l
c8c	ls.asm	/^     c8c:	eb 62                	jmp    cf0 <printf+0x373>$/;"	l
c8c	sh.asm	/^     c8c:	c9                   	leaveq $/;"	l
c8d	init.asm	/^ c8d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c8d	sh.asm	/^     c8d:	c3                   	retq   $/;"	l
c8e	cat.asm	/^ c8e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8e	eager_mmap.asm	/^ c8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c8e	imshow.asm	/^ c8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8e	lazy_mmap.asm	/^ c8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c8e	ls.asm	/^     c8e:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c8e	sh.asm	/^     c8e:	55                   	push   %rbp$/;"	l
c8e	stressfs.asm	/^ c8e:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c8f	divide.asm	/^ c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8f	grep.asm	/^ c8f:	ff d0                	callq  *%rax$/;"	l
c8f	sh.asm	/^     c8f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c8f	usertests.asm	/^     c8f:	00 00 00 $/;"	l
c9	forktest.asm	/^  c9:	00 00 00 $/;"	l
c9	kill.asm	/^  c9:	90                   	nop$/;"	l
c9	mkdir.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	rm.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	stressfs.asm	/^  c9:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
c9	usertests.asm	/^      c9:	ff d0                	callq  *%rax$/;"	l
c90	init.asm	/^ c90:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c90	prettyprint.asm	/^     c90:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c91	bad_mmap.asm	/^ c91:	00 00 00 $/;"	l
c91	cat.asm	/^ c91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c91	grep.asm	/^ c91:	eb 38                	jmp    ccb <printf+0x373>$/;"	l
c91	stressfs.asm	/^ c91:	75 10                	jne    ca3 <malloc+0xb1>$/;"	l
c92	eager_mmap.asm	/^ c92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c92	imshow.asm	/^ c92:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c92	lazy_mmap.asm	/^ c92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c92	sh.asm	/^     c92:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
c92	usertests.asm	/^     c92:	8b 00                	mov    (%rax),%eax$/;"	l
c92	wc.asm	/^ c92:	00 00 00 $/;"	l
c93	divide.asm	/^ c93:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c93	grep.asm	/^ c93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c93	init.asm	/^ c93:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c93	stressfs.asm	/^ c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c94	bad_mmap.asm	/^ c94:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c94	prettyprint.asm	/^     c94:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c94	usertests.asm	/^     c94:	48 be 0b 6c 00 00 00 	movabs $0x6c0b,%rsi$/;"	l
c95	cat.asm	/^ c95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c95	imshow.asm	/^ c95:	eb 0e                	jmp    ca5 <free+0xcf>$/;"	l
c95	ls.asm	/^     c95:	75 21                	jne    cb8 <printf+0x33b>$/;"	l
c95	wc.asm	/^ c95:	48 8b 00             	mov    (%rax),%rax$/;"	l
c96	divide.asm	/^ c96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c96	sh.asm	/^     c96:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
c97	eager_mmap.asm	/^ c97:	75 4a                	jne    ce3 <malloc+0x7e>$/;"	l
c97	imshow.asm	/^ c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c97	lazy_mmap.asm	/^ c97:	75 4a                	jne    ce3 <malloc+0x7e>$/;"	l
c97	ls.asm	/^     c97:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c97	stressfs.asm	/^ c97:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c98	cat.asm	/^ c98:	eb 2e                	jmp    cc8 <malloc+0xdf>$/;"	l
c98	wc.asm	/^ c98:	c9                   	leaveq $/;"	l
c99	eager_mmap.asm	/^ c99:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
c99	grep.asm	/^ c99:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
c99	lazy_mmap.asm	/^ c99:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
c99	wc.asm	/^ c99:	c3                   	retq   $/;"	l
c9a	cat.asm	/^ c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c9a	divide.asm	/^ c9a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9a	init.asm	/^ c9a:	00 00 00 $/;"	l
c9a	sh.asm	/^     c9a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
c9a	stressfs.asm	/^ c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9a	wc.asm	/^ c9a:	55                   	push   %rbp$/;"	l
c9b	bad_mmap.asm	/^ c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9b	imshow.asm	/^ c9b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c9b	prettyprint.asm	/^     c9b:	8b 00                	mov    (%rax),%eax$/;"	l
c9b	usertests.asm	/^     c9b:	00 00 00 $/;"	l
c9b	wc.asm	/^ c9b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9d	divide.asm	/^ c9d:	eb 0b                	jmp    caa <free+0x11e>$/;"	l
c9d	init.asm	/^ c9d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c9d	ls.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9d	prettyprint.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9e	cat.asm	/^ c9e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c9e	grep.asm	/^ c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	imshow.asm	/^ c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9e	sh.asm	/^     c9e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
c9e	stressfs.asm	/^ c9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9e	usertests.asm	/^     c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	wc.asm	/^ c9e:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c9f	bad_mmap.asm	/^ c9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
c9f	divide.asm	/^ c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca	bad_mmap.asm	/^  ca:	48 be ff 0d 00 00 00 	movabs $0xdff,%rsi$/;"	l
ca	imshow.asm	/^  ca:	e9 a6 00 00 00       	jmpq   175 <main+0x175>$/;"	l
ca	kill.asm	/^  ca:	c9                   	leaveq $/;"	l
ca	prettyprint.asm	/^      ca:	00 00 00 $/;"	l
ca	sh.asm	/^      ca:	e9 62 02 00 00       	jmpq   331 <runcmd+0x331>$/;"	l
ca	wc.asm	/^  ca:	00 00 00 $/;"	l
ca	zombie.asm	/^  ca:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ca0	eager_mmap.asm	/^ ca0:	00 00 00 $/;"	l
ca0	grep.asm	/^ ca0:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
ca0	lazy_mmap.asm	/^ ca0:	00 00 00 $/;"	l
ca0	ls.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	prettyprint.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	usertests.asm	/^     ca0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ca1	cat.asm	/^ ca1:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ca1	init.asm	/^ ca1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca1	stressfs.asm	/^ ca1:	eb 2e                	jmp    cd1 <malloc+0xdf>$/;"	l
ca2	bad_mmap.asm	/^ ca2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ca2	imshow.asm	/^ ca2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca2	sh.asm	/^     ca2:	e9 f8 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
ca2	wc.asm	/^ ca2:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ca3	divide.asm	/^ ca3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ca3	eager_mmap.asm	/^ ca3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ca3	lazy_mmap.asm	/^ ca3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ca3	stressfs.asm	/^ ca3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca4	cat.asm	/^ ca4:	89 c2                	mov    %eax,%edx$/;"	l
ca4	init.asm	/^ ca4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca5	imshow.asm	/^ ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca5	usertests.asm	/^     ca5:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
ca5	wc.asm	/^ ca5:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ca6	bad_mmap.asm	/^ ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca6	cat.asm	/^ ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca6	ls.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca6	prettyprint.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca7	divide.asm	/^ ca7:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca7	eager_mmap.asm	/^ ca7:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ca7	grep.asm	/^ ca7:	00 00 00 $/;"	l
ca7	lazy_mmap.asm	/^ ca7:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ca7	sh.asm	/^     ca7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
ca7	stressfs.asm	/^ ca7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ca8	init.asm	/^ ca8:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ca8	ls.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	prettyprint.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	wc.asm	/^ ca8:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ca9	imshow.asm	/^ ca9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
caa	bad_mmap.asm	/^ caa:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
caa	cat.asm	/^ caa:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
caa	divide.asm	/^ caa:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
caa	grep.asm	/^ caa:	ff d0                	callq  *%rax$/;"	l
caa	ls.asm	/^     caa:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
caa	prettyprint.asm	/^     caa:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
caa	stressfs.asm	/^ caa:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cab	sh.asm	/^     cab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cac	grep.asm	/^ cac:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cac	imshow.asm	/^ cac:	89 c0                	mov    %eax,%eax$/;"	l
cac	init.asm	/^ cac:	eb 4e                	jmp    cfc <malloc+0x148>$/;"	l
cac	usertests.asm	/^     cac:	00 00 00 $/;"	l
cac	wc.asm	/^ cac:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
cad	bad_mmap.asm	/^ cad:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cad	cat.asm	/^ cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cad	stressfs.asm	/^ cad:	89 c2                	mov    %eax,%edx$/;"	l
cae	eager_mmap.asm	/^ cae:	00 00 00 $/;"	l
cae	imshow.asm	/^ cae:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cae	init.asm	/^ cae:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cae	lazy_mmap.asm	/^ cae:	00 00 00 $/;"	l
caf	sh.asm	/^     caf:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
caf	stressfs.asm	/^ caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
caf	usertests.asm	/^     caf:	ff d2                	callq  *%rdx$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	cat.asm	/^  cb:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
cb	divide.asm	/^  cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
cb	eager_mmap.asm	/^  cb:	00 00 00 $/;"	l
cb	echo.asm	/^  cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
cb	kill.asm	/^  cb:	c3                   	retq   $/;"	l
cb	lazy_mmap.asm	/^  cb:	00 00 00 $/;"	l
cb	ls.asm	/^      cb:	00 00 00 $/;"	l
cb	usertests.asm	/^      cb:	48 bf bd 68 00 00 00 	movabs $0x68bd,%rdi$/;"	l
cb0	bad_mmap.asm	/^ cb0:	72 65                	jb     d17 <malloc+0xfa>$/;"	l
cb0	wc.asm	/^ cb0:	83 c0 01             	add    $0x1,%eax$/;"	l
cb1	cat.asm	/^ cb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb1	divide.asm	/^ cb1:	00 00 00 $/;"	l
cb1	eager_mmap.asm	/^ cb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cb1	lazy_mmap.asm	/^ cb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cb1	ls.asm	/^     cb1:	00 00 00 $/;"	l
cb1	prettyprint.asm	/^     cb1:	00 00 00 $/;"	l
cb1	usertests.asm	/^     cb1:	90                   	nop$/;"	l
cb2	bad_mmap.asm	/^ cb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb2	grep.asm	/^ cb2:	0f be d0             	movsbl %al,%edx$/;"	l
cb2	imshow.asm	/^ cb2:	48 89 c2             	mov    %rax,%rdx$/;"	l
cb2	usertests.asm	/^     cb2:	c9                   	leaveq $/;"	l
cb3	stressfs.asm	/^ cb3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cb3	usertests.asm	/^     cb3:	c3                   	retq   $/;"	l
cb3	wc.asm	/^ cb3:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
cb4	cat.asm	/^ cb4:	89 c0                	mov    %eax,%eax$/;"	l
cb4	divide.asm	/^ cb4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cb4	ls.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	prettyprint.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	sh.asm	/^     cb4:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
cb4	usertests.asm	/^     cb4:	55                   	push   %rbp$/;"	l
cb5	eager_mmap.asm	/^ cb5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb5	grep.asm	/^ cb5:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb5	imshow.asm	/^ cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb5	init.asm	/^ cb5:	00 00 00 $/;"	l
cb5	lazy_mmap.asm	/^ cb5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb5	usertests.asm	/^     cb5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cb6	bad_mmap.asm	/^ cb6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb6	cat.asm	/^ cb6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cb6	ls.asm	/^     cb6:	eb 38                	jmp    cf0 <printf+0x373>$/;"	l
cb6	prettyprint.asm	/^     cb6:	eb 62                	jmp    d1a <printf+0x373>$/;"	l
cb6	stressfs.asm	/^ cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb6	wc.asm	/^ cb6:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cb8	divide.asm	/^ cb8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb8	eager_mmap.asm	/^ cb8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
cb8	init.asm	/^ cb8:	48 8b 00             	mov    (%rax),%rax$/;"	l
cb8	lazy_mmap.asm	/^ cb8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
cb8	ls.asm	/^     cb8:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb8	prettyprint.asm	/^     cb8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
cb8	usertests.asm	/^     cb8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cb9	bad_mmap.asm	/^ cb9:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cb9	imshow.asm	/^ cb9:	48 01 d0             	add    %rdx,%rax$/;"	l
cb9	sh.asm	/^     cb9:	48 89 c7             	mov    %rax,%rdi$/;"	l
cba	cat.asm	/^ cba:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cba	stressfs.asm	/^ cba:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cbb	divide.asm	/^ cbb:	90                   	nop$/;"	l
cbb	grep.asm	/^ cbb:	89 d6                	mov    %edx,%esi$/;"	l
cbb	init.asm	/^ cbb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cbc	bad_mmap.asm	/^ cbc:	75 10                	jne    cce <malloc+0xb1>$/;"	l
cbc	divide.asm	/^ cbc:	c9                   	leaveq $/;"	l
cbc	imshow.asm	/^ cbc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
cbc	sh.asm	/^     cbc:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cbc	usertests.asm	/^     cbc:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
cbd	divide.asm	/^ cbd:	c3                   	retq   $/;"	l
cbd	grep.asm	/^ cbd:	89 c7                	mov    %eax,%edi$/;"	l
cbd	stressfs.asm	/^ cbd:	89 c0                	mov    %eax,%eax$/;"	l
cbd	wc.asm	/^ cbd:	00 00 00 $/;"	l
cbe	bad_mmap.asm	/^ cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cbe	cat.asm	/^ cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cbe	divide.asm	/^ cbe:	55                   	push   %rbp$/;"	l
cbe	ls.asm	/^     cbe:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
cbf	divide.asm	/^ cbf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cbf	eager_mmap.asm	/^ cbf:	00 00 00 $/;"	l
cbf	grep.asm	/^ cbf:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
cbf	init.asm	/^ cbf:	75 23                	jne    ce4 <malloc+0x130>$/;"	l
cbf	lazy_mmap.asm	/^ cbf:	00 00 00 $/;"	l
cbf	prettyprint.asm	/^     cbf:	75 21                	jne    ce2 <printf+0x33b>$/;"	l
cbf	stressfs.asm	/^ cbf:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cc	bad_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	eager_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	ff d0                	callq  *%rax$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	0f 85 72 ff ff ff    	jne    44 <grep+0x44>$/;"	l
cc	imshow.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	55                   	push   %rbp$/;"	l
cc	lazy_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	prettyprint.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	imshow.asm	/^ cc0:	75 27                	jne    ce9 <free+0x113>$/;"	l
cc0	wc.asm	/^ cc0:	48 8b 00             	mov    (%rax),%rax$/;"	l
cc1	init.asm	/^ cc1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cc1	prettyprint.asm	/^     cc1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cc2	bad_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc2	cat.asm	/^ cc2:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cc2	divide.asm	/^ cc2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
cc2	eager_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc2	imshow.asm	/^ cc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc2	lazy_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc3	ls.asm	/^     cc3:	89 c7                	mov    %eax,%edi$/;"	l
cc3	sh.asm	/^     cc3:	00 00 00 $/;"	l
cc3	stressfs.asm	/^ cc3:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cc3	usertests.asm	/^     cc3:	00 00 00 $/;"	l
cc3	wc.asm	/^ cc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cc4	init.asm	/^ cc4:	89 c7                	mov    %eax,%edi$/;"	l
cc5	bad_mmap.asm	/^ cc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc5	cat.asm	/^ cc5:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cc5	eager_mmap.asm	/^ cc5:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cc5	lazy_mmap.asm	/^ cc5:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cc5	ls.asm	/^     cc5:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
cc6	divide.asm	/^ cc6:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
cc6	grep.asm	/^ cc6:	00 00 00 $/;"	l
cc6	imshow.asm	/^ cc6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
cc6	init.asm	/^ cc6:	48 b8 3b 0b 00 00 00 	movabs $0xb3b,%rax$/;"	l
cc6	sh.asm	/^     cc6:	ff d0                	callq  *%rax$/;"	l
cc6	usertests.asm	/^     cc6:	8b 00                	mov    (%rax),%eax$/;"	l
cc7	prettyprint.asm	/^     cc7:	0f be d0             	movsbl %al,%edx$/;"	l
cc7	stressfs.asm	/^ cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc7	wc.asm	/^ cc7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
cc8	cat.asm	/^ cc8:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
cc8	sh.asm	/^     cc8:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
cc8	usertests.asm	/^     cc8:	48 be 20 6c 00 00 00 	movabs $0x6c20,%rsi$/;"	l
cc9	bad_mmap.asm	/^ cc9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cc9	divide.asm	/^ cc9:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
cc9	grep.asm	/^ cc9:	ff d0                	callq  *%rax$/;"	l
cc9	imshow.asm	/^ cc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cca	prettyprint.asm	/^     cca:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ccb	grep.asm	/^ ccb:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ccb	sh.asm	/^     ccb:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx$/;"	l
ccb	stressfs.asm	/^ ccb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ccc	bad_mmap.asm	/^ ccc:	eb 2e                	jmp    cfc <malloc+0xdf>$/;"	l
ccc	eager_mmap.asm	/^ ccc:	00 00 00 $/;"	l
ccc	lazy_mmap.asm	/^ ccc:	00 00 00 $/;"	l
ccc	ls.asm	/^     ccc:	00 00 00 $/;"	l
ccc	wc.asm	/^ ccc:	75 4a                	jne    d18 <malloc+0x7e>$/;"	l
ccd	imshow.asm	/^ ccd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ccd	init.asm	/^ ccd:	00 00 00 $/;"	l
cce	bad_mmap.asm	/^ cce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cce	stressfs.asm	/^ cce:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cce	wc.asm	/^ cce:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
ccf	cat.asm	/^ ccf:	00 00 00 $/;"	l
ccf	eager_mmap.asm	/^ ccf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ccf	lazy_mmap.asm	/^ ccf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ccf	ls.asm	/^     ccf:	ff d0                	callq  *%rax$/;"	l
ccf	sh.asm	/^     ccf:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ccf	usertests.asm	/^     ccf:	00 00 00 $/;"	l
cd	init.asm	/^  cd:	48 ba 64 06 00 00 00 	movabs $0x664,%rdx$/;"	l
cd	kill.asm	/^  cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cd	prettyprint.asm	/^      cd:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
cd	wc.asm	/^  cd:	ff d0                	callq  *%rax$/;"	l
cd	zombie.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd0	divide.asm	/^ cd0:	77 07                	ja     cd9 <morecore+0x1b>$/;"	l
cd0	imshow.asm	/^ cd0:	01 c2                	add    %eax,%edx$/;"	l
cd0	init.asm	/^ cd0:	ff d0                	callq  *%rax$/;"	l
cd0	prettyprint.asm	/^     cd0:	89 d6                	mov    %edx,%esi$/;"	l
cd1	ls.asm	/^     cd1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cd1	stressfs.asm	/^ cd1:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cd2	bad_mmap.asm	/^ cd2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cd2	cat.asm	/^ cd2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cd2	divide.asm	/^ cd2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
cd2	eager_mmap.asm	/^ cd2:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cd2	grep.asm	/^ cd2:	00 00 00 $/;"	l
cd2	imshow.asm	/^ cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd2	init.asm	/^ cd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cd2	lazy_mmap.asm	/^ cd2:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cd2	prettyprint.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd2	usertests.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd3	sh.asm	/^     cd3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
cd4	prettyprint.asm	/^     cd4:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cd4	usertests.asm	/^     cd4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cd5	bad_mmap.asm	/^ cd5:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cd5	grep.asm	/^ cd5:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cd5	wc.asm	/^ cd5:	00 00 00 $/;"	l
cd6	cat.asm	/^ cd6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cd6	imshow.asm	/^ cd6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cd6	init.asm	/^ cd6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
cd7	ls.asm	/^     cd7:	0f be d0             	movsbl %al,%edx$/;"	l
cd7	sh.asm	/^     cd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cd8	bad_mmap.asm	/^ cd8:	89 c2                	mov    %eax,%edx$/;"	l
cd8	stressfs.asm	/^ cd8:	00 00 00 $/;"	l
cd8	wc.asm	/^ cd8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cd9	cat.asm	/^ cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd9	divide.asm	/^ cd9:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cd9	eager_mmap.asm	/^ cd9:	00 00 00 $/;"	l
cd9	imshow.asm	/^ cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cd9	lazy_mmap.asm	/^ cd9:	00 00 00 $/;"	l
cd9	usertests.asm	/^     cd9:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
cda	bad_mmap.asm	/^ cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cda	ls.asm	/^     cda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cdb	init.asm	/^ cdb:	75 07                	jne    ce4 <malloc+0x130>$/;"	l
cdb	prettyprint.asm	/^     cdb:	00 00 00 $/;"	l
cdb	sh.asm	/^     cdb:	48 89 c7             	mov    %rax,%rdi$/;"	l
cdb	stressfs.asm	/^ cdb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cdc	divide.asm	/^ cdc:	c1 e0 04             	shl    $0x4,%eax$/;"	l
cdc	eager_mmap.asm	/^ cdc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
cdc	grep.asm	/^ cdc:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
cdc	lazy_mmap.asm	/^ cdc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
cdc	wc.asm	/^ cdc:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cdd	cat.asm	/^ cdd:	48 83 c0 10          	add    $0x10,%rax$/;"	l
cdd	imshow.asm	/^ cdd:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cdd	init.asm	/^ cdd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cde	bad_mmap.asm	/^ cde:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cde	prettyprint.asm	/^     cde:	ff d0                	callq  *%rax$/;"	l
cde	sh.asm	/^     cde:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cdf	divide.asm	/^ cdf:	89 c7                	mov    %eax,%edi$/;"	l
cdf	stressfs.asm	/^ cdf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce	eager_mmap.asm	/^  ce:	ff d1                	callq  *%rcx$/;"	l
ce	forktest.asm	/^  ce:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ce	lazy_mmap.asm	/^  ce:	ff d1                	callq  *%rcx$/;"	l
ce	ls.asm	/^      ce:	ff d0                	callq  *%rax$/;"	l
ce	stressfs.asm	/^  ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ce0	imshow.asm	/^ ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce0	ls.asm	/^     ce0:	89 d6                	mov    %edx,%esi$/;"	l
ce0	prettyprint.asm	/^     ce0:	eb 38                	jmp    d1a <printf+0x373>$/;"	l
ce0	usertests.asm	/^     ce0:	00 00 00 $/;"	l
ce1	bad_mmap.asm	/^ ce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce1	cat.asm	/^ ce1:	eb 4e                	jmp    d31 <malloc+0x148>$/;"	l
ce1	divide.asm	/^ ce1:	48 b8 cc 06 00 00 00 	movabs $0x6cc,%rax$/;"	l
ce2	grep.asm	/^ ce2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ce2	init.asm	/^ ce2:	eb 18                	jmp    cfc <malloc+0x148>$/;"	l
ce2	ls.asm	/^     ce2:	89 c7                	mov    %eax,%edi$/;"	l
ce2	prettyprint.asm	/^     ce2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ce2	stressfs.asm	/^ ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce3	cat.asm	/^ ce3:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
ce3	eager_mmap.asm	/^ ce3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ce3	lazy_mmap.asm	/^ ce3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ce3	usertests.asm	/^     ce3:	ff d2                	callq  *%rdx$/;"	l
ce3	wc.asm	/^ ce3:	00 00 00 $/;"	l
ce4	imshow.asm	/^ ce4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce4	init.asm	/^ ce4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce4	ls.asm	/^     ce4:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
ce5	bad_mmap.asm	/^ ce5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ce5	grep.asm	/^ ce5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ce5	sh.asm	/^     ce5:	00 00 00 $/;"	l
ce5	usertests.asm	/^     ce5:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
ce6	stressfs.asm	/^ ce6:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ce6	wc.asm	/^ ce6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ce7	eager_mmap.asm	/^ ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ce7	imshow.asm	/^ ce7:	eb 0b                	jmp    cf4 <free+0x11e>$/;"	l
ce7	lazy_mmap.asm	/^ ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ce8	bad_mmap.asm	/^ ce8:	89 c0                	mov    %eax,%eax$/;"	l
ce8	divide.asm	/^ ce8:	00 00 00 $/;"	l
ce8	init.asm	/^ ce8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ce8	prettyprint.asm	/^     ce8:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
ce8	sh.asm	/^     ce8:	ff d0                	callq  *%rax$/;"	l
ce9	imshow.asm	/^ ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cea	bad_mmap.asm	/^ cea:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cea	cat.asm	/^ cea:	00 00 00 $/;"	l
cea	eager_mmap.asm	/^ cea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cea	lazy_mmap.asm	/^ cea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cea	sh.asm	/^     cea:	83 f8 61             	cmp    $0x61,%eax$/;"	l
cea	stressfs.asm	/^ cea:	eb 4e                	jmp    d3a <malloc+0x148>$/;"	l
cea	wc.asm	/^ cea:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ceb	divide.asm	/^ ceb:	ff d0                	callq  *%rax$/;"	l
ceb	ls.asm	/^     ceb:	00 00 00 $/;"	l
cec	grep.asm	/^ cec:	48 01 d0             	add    %rdx,%rax$/;"	l
cec	init.asm	/^ cec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cec	stressfs.asm	/^ cec:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cec	usertests.asm	/^     cec:	00 00 00 $/;"	l
ced	cat.asm	/^ ced:	48 8b 00             	mov    (%rax),%rax$/;"	l
ced	divide.asm	/^ ced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ced	imshow.asm	/^ ced:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ced	prettyprint.asm	/^     ced:	89 c7                	mov    %eax,%edi$/;"	l
ced	sh.asm	/^     ced:	74 16                	je     d05 <parseredirs+0x77>$/;"	l
ced	wc.asm	/^ ced:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cee	bad_mmap.asm	/^ cee:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cee	eager_mmap.asm	/^ cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cee	lazy_mmap.asm	/^ cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cee	ls.asm	/^     cee:	ff d0                	callq  *%rax$/;"	l
cef	grep.asm	/^ cef:	0f b6 00             	movzbl (%rax),%eax$/;"	l
cef	prettyprint.asm	/^     cef:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cef	sh.asm	/^     cef:	48 bf 07 1e 00 00 00 	movabs $0x1e07,%rdi$/;"	l
cef	usertests.asm	/^     cef:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
cf	cat.asm	/^  cf:	7f 1d                	jg     ee <main+0x32>$/;"	l
cf	divide.asm	/^  cf:	75 2c                	jne    fd <main+0xad>$/;"	l
cf	echo.asm	/^  cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
cf	imshow.asm	/^  cf:	48 8d 8d f0 fb ff ff 	lea    -0x410(%rbp),%rcx$/;"	l
cf	ln.asm	/^  cf:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
cf	sh.asm	/^      cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
cf	wc.asm	/^  cf:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
cf	zombie.asm	/^  cf:	74 12                	je     e3 <strcmp+0x39>$/;"	l
cf0	cat.asm	/^ cf0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf0	init.asm	/^ cf0:	48 8b 00             	mov    (%rax),%rax$/;"	l
cf0	ls.asm	/^     cf0:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
cf1	divide.asm	/^ cf1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
cf1	imshow.asm	/^ cf1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cf2	bad_mmap.asm	/^ cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cf2	eager_mmap.asm	/^ cf2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cf2	grep.asm	/^ cf2:	84 c0                	test   %al,%al$/;"	l
cf2	lazy_mmap.asm	/^ cf2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cf2	usertests.asm	/^     cf2:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
cf3	init.asm	/^ cf3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cf3	stressfs.asm	/^ cf3:	00 00 00 $/;"	l
cf4	cat.asm	/^ cf4:	75 23                	jne    d19 <malloc+0x130>$/;"	l
cf4	grep.asm	/^ cf4:	0f 85 fc fc ff ff    	jne    9f6 <printf+0x9e>$/;"	l
cf4	imshow.asm	/^ cf4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
cf4	wc.asm	/^ cf4:	00 00 00 $/;"	l
cf5	eager_mmap.asm	/^ cf5:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cf5	lazy_mmap.asm	/^ cf5:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cf6	bad_mmap.asm	/^ cf6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cf6	cat.asm	/^ cf6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cf6	divide.asm	/^ cf6:	75 07                	jne    cff <morecore+0x41>$/;"	l
cf6	prettyprint.asm	/^     cf6:	00 00 00 $/;"	l
cf6	sh.asm	/^     cf6:	00 00 00 $/;"	l
cf6	stressfs.asm	/^ cf6:	48 8b 00             	mov    (%rax),%rax$/;"	l
cf7	init.asm	/^ cf7:	e9 41 ff ff ff       	jmpq   c3d <malloc+0x89>$/;"	l
cf7	ls.asm	/^     cf7:	00 00 00 $/;"	l
cf7	wc.asm	/^ cf7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cf8	divide.asm	/^ cf8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cf8	eager_mmap.asm	/^ cf8:	72 65                	jb     d5f <malloc+0xfa>$/;"	l
cf8	lazy_mmap.asm	/^ cf8:	72 65                	jb     d5f <malloc+0xfa>$/;"	l
cf9	bad_mmap.asm	/^ cf9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cf9	cat.asm	/^ cf9:	89 c7                	mov    %eax,%edi$/;"	l
cf9	prettyprint.asm	/^     cf9:	ff d0                	callq  *%rax$/;"	l
cf9	sh.asm	/^     cf9:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
cf9	stressfs.asm	/^ cf9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf9	usertests.asm	/^     cf9:	00 00 00 $/;"	l
cfa	eager_mmap.asm	/^ cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cfa	grep.asm	/^ cfa:	90                   	nop$/;"	l
cfa	lazy_mmap.asm	/^ cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cfa	ls.asm	/^     cfa:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cfa	wc.asm	/^ cfa:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
cfb	cat.asm	/^ cfb:	48 b8 70 0b 00 00 00 	movabs $0xb70,%rax$/;"	l
cfb	grep.asm	/^ cfb:	c9                   	leaveq $/;"	l
cfb	imshow.asm	/^ cfb:	00 00 00 $/;"	l
cfb	prettyprint.asm	/^     cfb:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cfc	bad_mmap.asm	/^ cfc:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
cfc	grep.asm	/^ cfc:	c3                   	retq   $/;"	l
cfc	init.asm	/^ cfc:	c9                   	leaveq $/;"	l
cfc	usertests.asm	/^     cfc:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
cfd	divide.asm	/^ cfd:	eb 36                	jmp    d35 <morecore+0x77>$/;"	l
cfd	grep.asm	/^ cfd:	55                   	push   %rbp$/;"	l
cfd	init.asm	/^ cfd:	c3                   	retq   $/;"	l
cfd	stressfs.asm	/^ cfd:	75 23                	jne    d22 <malloc+0x130>$/;"	l
cfe	eager_mmap.asm	/^ cfe:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cfe	grep.asm	/^ cfe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cfe	imshow.asm	/^ cfe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cfe	lazy_mmap.asm	/^ cfe:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cff	divide.asm	/^ cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cff	stressfs.asm	/^ cff:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	prettyprint.asm	/^char *hoarequote = "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.\\n\\n- C.A.R. Hoare (British computer scientist, winner of the 1980 Turing Award)\\n\\n";$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	bootmain.c	/^  uint64 checksum;$/;"	m	struct:mbheader	file:
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((addr_t) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon7	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpu	vm.c	/^__thread struct cpu *cpu;$/;"	v	typeref:struct:cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^   uint64 cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	cat.asm	/^   d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d	init.asm	/^   d:	48 bf 01 0d 00 00 00 	movabs $0xd01,%rdi$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	ls.asm	/^       d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d0	eager_mmap.asm	/^  d0:	48 be 42 0e 00 00 00 	movabs $0xe42,%rsi$/;"	l
d0	kill.asm	/^  d0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0	lazy_mmap.asm	/^  d0:	48 be 42 0e 00 00 00 	movabs $0xe42,%rsi$/;"	l
d0	ls.asm	/^      d0:	89 c2                	mov    %eax,%edx$/;"	l
d0	mkdir.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d0	rm.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d00	sh.asm	/^     d00:	00 00 00 $/;"	l
d00	usertests.asm	/^     d00:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d01	eager_mmap.asm	/^ d01:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d01	grep.asm	/^ d01:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d01	lazy_mmap.asm	/^ d01:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d01	ls.asm	/^     d01:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d01	prettyprint.asm	/^     d01:	0f be d0             	movsbl %al,%edx$/;"	l
d01	wc.asm	/^ d01:	00 00 00 $/;"	l
d02	cat.asm	/^ d02:	00 00 00 $/;"	l
d02	imshow.asm	/^ d02:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d02	stressfs.asm	/^ d02:	89 c7                	mov    %eax,%edi$/;"	l
d03	bad_mmap.asm	/^ d03:	00 00 00 $/;"	l
d03	divide.asm	/^ d03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d03	sh.asm	/^     d03:	ff d0                	callq  *%rax$/;"	l
d04	eager_mmap.asm	/^ d04:	75 10                	jne    d16 <malloc+0xb1>$/;"	l
d04	lazy_mmap.asm	/^ d04:	75 10                	jne    d16 <malloc+0xb1>$/;"	l
d04	prettyprint.asm	/^     d04:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
d04	stressfs.asm	/^ d04:	48 b8 79 0b 00 00 00 	movabs $0xb79,%rax$/;"	l
d04	wc.asm	/^ d04:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d05	cat.asm	/^ d05:	ff d0                	callq  *%rax$/;"	l
d05	grep.asm	/^ d05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d05	imshow.asm	/^ d05:	90                   	nop$/;"	l
d05	sh.asm	/^     d05:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d06	bad_mmap.asm	/^ d06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d06	eager_mmap.asm	/^ d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d06	imshow.asm	/^ d06:	c9                   	leaveq $/;"	l
d06	lazy_mmap.asm	/^ d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d07	cat.asm	/^ d07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d07	divide.asm	/^ d07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d07	imshow.asm	/^ d07:	c3                   	retq   $/;"	l
d07	ls.asm	/^     d07:	48 63 d0             	movslq %eax,%rdx$/;"	l
d07	usertests.asm	/^     d07:	eb 48                	jmp    d51 <createtest+0x9d>$/;"	l
d07	wc.asm	/^ d07:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
d08	imshow.asm	/^ d08:	55                   	push   %rbp$/;"	l
d08	sh.asm	/^     d08:	83 f8 3c             	cmp    $0x3c,%eax$/;"	l
d09	grep.asm	/^ d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d09	imshow.asm	/^ d09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d09	usertests.asm	/^     d09:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d0a	bad_mmap.asm	/^ d0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d0a	eager_mmap.asm	/^ d0a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d0a	lazy_mmap.asm	/^ d0a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d0a	ls.asm	/^     d0a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d0a	prettyprint.asm	/^     d0a:	89 d6                	mov    %edx,%esi$/;"	l
d0b	cat.asm	/^ d0b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d0b	divide.asm	/^ d0b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d0b	sh.asm	/^     d0b:	74 0f                	je     d1c <parseredirs+0x8e>$/;"	l
d0b	stressfs.asm	/^ d0b:	00 00 00 $/;"	l
d0c	imshow.asm	/^ d0c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0c	prettyprint.asm	/^     d0c:	89 c7                	mov    %eax,%edi$/;"	l
d0c	usertests.asm	/^     d0c:	83 c0 30             	add    $0x30,%eax$/;"	l
d0d	bad_mmap.asm	/^ d0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d0d	eager_mmap.asm	/^ d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d0d	grep.asm	/^ d0d:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d0d	lazy_mmap.asm	/^ d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d0d	sh.asm	/^     d0d:	83 f8 3e             	cmp    $0x3e,%eax$/;"	l
d0e	divide.asm	/^ d0e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d0e	prettyprint.asm	/^     d0e:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
d0e	stressfs.asm	/^ d0e:	ff d0                	callq  *%rax$/;"	l
d0e	wc.asm	/^ d0e:	00 00 00 $/;"	l
d0f	usertests.asm	/^     d0f:	89 c2                	mov    %eax,%edx$/;"	l
d1	bad_mmap.asm	/^  d1:	00 00 00 $/;"	l
d1	cat.asm	/^  d1:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
d1	divide.asm	/^  d1:	48 be a8 0e 00 00 00 	movabs $0xea8,%rsi$/;"	l
d1	forktest.asm	/^  d1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d1	stressfs.asm	/^  d1:	48 b8 23 05 00 00 00 	movabs $0x523,%rax$/;"	l
d1	zombie.asm	/^  d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d10	cat.asm	/^ d10:	75 07                	jne    d19 <malloc+0x130>$/;"	l
d10	imshow.asm	/^ d10:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
d10	sh.asm	/^     d10:	74 36                	je     d48 <parseredirs+0xba>$/;"	l
d10	stressfs.asm	/^ d10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d11	bad_mmap.asm	/^ d11:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d11	divide.asm	/^ d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d11	eager_mmap.asm	/^ d11:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d11	grep.asm	/^ d11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d11	lazy_mmap.asm	/^ d11:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d11	ls.asm	/^     d11:	48 01 d0             	add    %rdx,%rax$/;"	l
d11	usertests.asm	/^     d11:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d11	wc.asm	/^ d11:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
d12	cat.asm	/^ d12:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d12	sh.asm	/^     d12:	83 f8 2b             	cmp    $0x2b,%eax$/;"	l
d13	imshow.asm	/^ d13:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
d14	eager_mmap.asm	/^ d14:	eb 2e                	jmp    d44 <malloc+0xdf>$/;"	l
d14	lazy_mmap.asm	/^ d14:	eb 2e                	jmp    d44 <malloc+0xdf>$/;"	l
d14	ls.asm	/^     d14:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d14	stressfs.asm	/^ d14:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d15	bad_mmap.asm	/^ d15:	eb 4e                	jmp    d65 <malloc+0x148>$/;"	l
d15	divide.asm	/^ d15:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d15	grep.asm	/^ d15:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
d15	prettyprint.asm	/^     d15:	00 00 00 $/;"	l
d15	sh.asm	/^     d15:	74 5d                	je     d74 <parseredirs+0xe6>$/;"	l
d16	eager_mmap.asm	/^ d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d16	lazy_mmap.asm	/^ d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d17	bad_mmap.asm	/^ d17:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
d17	cat.asm	/^ d17:	eb 18                	jmp    d31 <malloc+0x148>$/;"	l
d17	ls.asm	/^     d17:	84 c0                	test   %al,%al$/;"	l
d17	sh.asm	/^     d17:	e9 83 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
d18	prettyprint.asm	/^     d18:	ff d0                	callq  *%rax$/;"	l
d18	usertests.asm	/^     d18:	00 00 00 $/;"	l
d18	wc.asm	/^ d18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d19	cat.asm	/^ d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d19	divide.asm	/^ d19:	48 89 c7             	mov    %rax,%rdi$/;"	l
d19	ls.asm	/^     d19:	0f 85 fc fc ff ff    	jne    a1b <printf+0x9e>$/;"	l
d19	stressfs.asm	/^ d19:	75 07                	jne    d22 <malloc+0x130>$/;"	l
d1a	eager_mmap.asm	/^ d1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d1a	imshow.asm	/^ d1a:	77 07                	ja     d23 <morecore+0x1b>$/;"	l
d1a	lazy_mmap.asm	/^ d1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d1a	prettyprint.asm	/^     d1a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
d1b	stressfs.asm	/^ d1b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d1b	usertests.asm	/^     d1b:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d1c	divide.asm	/^ d1c:	48 b8 8c 0b 00 00 00 	movabs $0xb8c,%rax$/;"	l
d1c	grep.asm	/^ d1c:	00 00 00 $/;"	l
d1c	imshow.asm	/^ d1c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
d1c	sh.asm	/^     d1c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d1c	wc.asm	/^ d1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1d	cat.asm	/^ d1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d1d	eager_mmap.asm	/^ d1d:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d1d	lazy_mmap.asm	/^ d1d:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d1e	bad_mmap.asm	/^ d1e:	00 00 00 $/;"	l
d1e	usertests.asm	/^     d1e:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
d1f	grep.asm	/^ d1f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1f	ls.asm	/^     d1f:	90                   	nop$/;"	l
d1f	wc.asm	/^ d1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d2	grep.asm	/^  d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	ln.asm	/^  d2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
d2	ls.asm	/^      d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	prettyprint.asm	/^      d2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d2	usertests.asm	/^      d2:	00 00 00 $/;"	l
d2	wc.asm	/^  d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
d20	eager_mmap.asm	/^ d20:	89 c2                	mov    %eax,%edx$/;"	l
d20	lazy_mmap.asm	/^ d20:	89 c2                	mov    %eax,%edx$/;"	l
d20	ls.asm	/^     d20:	c9                   	leaveq $/;"	l
d20	sh.asm	/^     d20:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d20	stressfs.asm	/^ d20:	eb 18                	jmp    d3a <malloc+0x148>$/;"	l
d21	bad_mmap.asm	/^ d21:	48 8b 00             	mov    (%rax),%rax$/;"	l
d21	cat.asm	/^ d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d21	ls.asm	/^     d21:	c3                   	retq   $/;"	l
d21	prettyprint.asm	/^     d21:	00 00 00 $/;"	l
d22	eager_mmap.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d22	grep.asm	/^ d22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d22	lazy_mmap.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d22	ls.asm	/^     d22:	55                   	push   %rbp$/;"	l
d22	stressfs.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d23	divide.asm	/^ d23:	00 00 00 $/;"	l
d23	imshow.asm	/^ d23:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d23	ls.asm	/^     d23:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d23	usertests.asm	/^     d23:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d23	wc.asm	/^ d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d24	bad_mmap.asm	/^ d24:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d24	prettyprint.asm	/^     d24:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
d24	sh.asm	/^     d24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d25	cat.asm	/^ d25:	48 8b 00             	mov    (%rax),%rax$/;"	l
d26	divide.asm	/^ d26:	ff d0                	callq  *%rax$/;"	l
d26	eager_mmap.asm	/^ d26:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d26	grep.asm	/^ d26:	eb 2f                	jmp    d57 <free+0x5a>$/;"	l
d26	imshow.asm	/^ d26:	c1 e0 04             	shl    $0x4,%eax$/;"	l
d26	lazy_mmap.asm	/^ d26:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d26	ls.asm	/^     d26:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d26	stressfs.asm	/^ d26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d27	wc.asm	/^ d27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d28	bad_mmap.asm	/^ d28:	75 23                	jne    d4d <malloc+0x130>$/;"	l
d28	cat.asm	/^ d28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d28	divide.asm	/^ d28:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d28	grep.asm	/^ d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d28	sh.asm	/^     d28:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
d29	eager_mmap.asm	/^ d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d29	imshow.asm	/^ d29:	89 c7                	mov    %eax,%edi$/;"	l
d29	lazy_mmap.asm	/^ d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d2a	bad_mmap.asm	/^ d2a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d2a	ls.asm	/^     d2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d2a	stressfs.asm	/^ d2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d2a	usertests.asm	/^     d2a:	00 00 00 $/;"	l
d2a	wc.asm	/^ d2a:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d2b	imshow.asm	/^ d2b:	48 b8 0c 07 00 00 00 	movabs $0x70c,%rax$/;"	l
d2b	prettyprint.asm	/^     d2b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d2c	cat.asm	/^ d2c:	e9 41 ff ff ff       	jmpq   c72 <malloc+0x89>$/;"	l
d2c	grep.asm	/^ d2c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2d	bad_mmap.asm	/^ d2d:	89 c7                	mov    %eax,%edi$/;"	l
d2d	eager_mmap.asm	/^ d2d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d2d	lazy_mmap.asm	/^ d2d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d2d	usertests.asm	/^     d2d:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
d2d	wc.asm	/^ d2d:	72 65                	jb     d94 <malloc+0xfa>$/;"	l
d2e	ls.asm	/^     d2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d2e	sh.asm	/^     d2e:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
d2e	stressfs.asm	/^ d2e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2f	bad_mmap.asm	/^ d2f:	48 b8 a4 0b 00 00 00 	movabs $0xba4,%rax$/;"	l
d2f	divide.asm	/^ d2f:	00 00 00 $/;"	l
d2f	grep.asm	/^ d2f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d2f	wc.asm	/^ d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3	echo.asm	/^  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d3	sh.asm	/^      d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d30	eager_mmap.asm	/^ d30:	89 c0                	mov    %eax,%eax$/;"	l
d30	lazy_mmap.asm	/^ d30:	89 c0                	mov    %eax,%eax$/;"	l
d31	cat.asm	/^ d31:	c9                   	leaveq $/;"	l
d31	prettyprint.asm	/^     d31:	48 63 d0             	movslq %eax,%rdx$/;"	l
d31	stressfs.asm	/^ d31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d32	cat.asm	/^ d32:	c3                   	retq   $/;"	l
d32	divide.asm	/^ d32:	48 8b 00             	mov    (%rax),%rax$/;"	l
d32	eager_mmap.asm	/^ d32:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d32	imshow.asm	/^ d32:	00 00 00 $/;"	l
d32	lazy_mmap.asm	/^ d32:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d32	ls.asm	/^     d32:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d33	grep.asm	/^ d33:	77 17                	ja     d4c <free+0x4f>$/;"	l
d33	sh.asm	/^     d33:	48 89 c7             	mov    %rax,%rdi$/;"	l
d33	wc.asm	/^ d33:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d34	prettyprint.asm	/^     d34:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d34	usertests.asm	/^     d34:	00 00 00 $/;"	l
d35	divide.asm	/^ d35:	c9                   	leaveq $/;"	l
d35	grep.asm	/^ d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d35	imshow.asm	/^ d35:	ff d0                	callq  *%rax$/;"	l
d35	stressfs.asm	/^ d35:	e9 41 ff ff ff       	jmpq   c7b <malloc+0x89>$/;"	l
d36	bad_mmap.asm	/^ d36:	00 00 00 $/;"	l
d36	divide.asm	/^ d36:	c3                   	retq   $/;"	l
d36	eager_mmap.asm	/^ d36:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d36	lazy_mmap.asm	/^ d36:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d36	ls.asm	/^     d36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d36	sh.asm	/^     d36:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d36	wc.asm	/^ d36:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d37	divide.asm	/^ d37:	55                   	push   %rbp$/;"	l
d37	imshow.asm	/^ d37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d37	usertests.asm	/^     d37:	ff d0                	callq  *%rax$/;"	l
d38	divide.asm	/^ d38:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d39	bad_mmap.asm	/^ d39:	ff d0                	callq  *%rax$/;"	l
d39	grep.asm	/^ d39:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d39	usertests.asm	/^     d39:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
d39	wc.asm	/^ d39:	75 10                	jne    d4b <malloc+0xb1>$/;"	l
d3a	eager_mmap.asm	/^ d3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3a	lazy_mmap.asm	/^ d3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3a	ls.asm	/^     d3a:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
d3a	stressfs.asm	/^ d3a:	c9                   	leaveq $/;"	l
d3b	bad_mmap.asm	/^ d3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d3b	divide.asm	/^ d3b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d3b	imshow.asm	/^ d3b:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
d3b	prettyprint.asm	/^     d3b:	48 01 d0             	add    %rdx,%rax$/;"	l
d3b	stressfs.asm	/^ d3b:	c3                   	retq   $/;"	l
d3b	wc.asm	/^ d3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3c	usertests.asm	/^     d3c:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
d3d	grep.asm	/^ d3d:	77 2f                	ja     d6e <free+0x71>$/;"	l
d3d	sh.asm	/^     d3d:	00 00 00 $/;"	l
d3e	eager_mmap.asm	/^ d3e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d3e	lazy_mmap.asm	/^ d3e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d3e	prettyprint.asm	/^     d3e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d3f	bad_mmap.asm	/^ d3f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d3f	divide.asm	/^ d3f:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d3f	grep.asm	/^ d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3f	usertests.asm	/^     d3f:	89 c7                	mov    %eax,%edi$/;"	l
d3f	wc.asm	/^ d3f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d4	bad_mmap.asm	/^  d4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
d4	init.asm	/^  d4:	00 00 00 $/;"	l
d4	kill.asm	/^  d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d4	mkdir.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d4	rm.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d40	imshow.asm	/^ d40:	75 07                	jne    d49 <morecore+0x41>$/;"	l
d40	sh.asm	/^     d40:	ff d0                	callq  *%rax$/;"	l
d41	eager_mmap.asm	/^ d41:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d41	lazy_mmap.asm	/^ d41:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d41	ls.asm	/^     d41:	00 00 00 $/;"	l
d41	prettyprint.asm	/^     d41:	84 c0                	test   %al,%al$/;"	l
d41	usertests.asm	/^     d41:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
d42	divide.asm	/^ d42:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d42	imshow.asm	/^ d42:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d42	sh.asm	/^     d42:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d42	wc.asm	/^ d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d43	grep.asm	/^ d43:	48 8b 00             	mov    (%rax),%rax$/;"	l
d43	prettyprint.asm	/^     d43:	0f 85 fc fc ff ff    	jne    a45 <printf+0x9e>$/;"	l
d44	bad_mmap.asm	/^ d44:	75 07                	jne    d4d <malloc+0x130>$/;"	l
d44	eager_mmap.asm	/^ d44:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d44	lazy_mmap.asm	/^ d44:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d44	ls.asm	/^     d44:	48 8b 00             	mov    (%rax),%rax$/;"	l
d45	divide.asm	/^ d45:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d46	bad_mmap.asm	/^ d46:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d46	grep.asm	/^ d46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d46	sh.asm	/^     d46:	eb 57                	jmp    d9f <parseredirs+0x111>$/;"	l
d46	wc.asm	/^ d46:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d47	imshow.asm	/^ d47:	eb 36                	jmp    d7f <morecore+0x77>$/;"	l
d47	ls.asm	/^     d47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d48	sh.asm	/^     d48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d48	usertests.asm	/^     d48:	00 00 00 $/;"	l
d49	divide.asm	/^ d49:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d49	imshow.asm	/^ d49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d49	prettyprint.asm	/^     d49:	90                   	nop$/;"	l
d49	wc.asm	/^ d49:	eb 2e                	jmp    d79 <malloc+0xdf>$/;"	l
d4a	grep.asm	/^ d4a:	77 22                	ja     d6e <free+0x71>$/;"	l
d4a	prettyprint.asm	/^     d4a:	c9                   	leaveq $/;"	l
d4b	bad_mmap.asm	/^ d4b:	eb 18                	jmp    d65 <malloc+0x148>$/;"	l
d4b	eager_mmap.asm	/^ d4b:	00 00 00 $/;"	l
d4b	lazy_mmap.asm	/^ d4b:	00 00 00 $/;"	l
d4b	ls.asm	/^     d4b:	eb 2f                	jmp    d7c <free+0x5a>$/;"	l
d4b	prettyprint.asm	/^     d4b:	c3                   	retq   $/;"	l
d4b	usertests.asm	/^     d4b:	ff d0                	callq  *%rax$/;"	l
d4b	wc.asm	/^ d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	grep.asm	/^ d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	prettyprint.asm	/^     d4c:	55                   	push   %rbp$/;"	l
d4c	sh.asm	/^     d4c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d4d	bad_mmap.asm	/^ d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4d	divide.asm	/^ d4d:	83 c0 01             	add    $0x1,%eax$/;"	l
d4d	imshow.asm	/^ d4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d4d	ls.asm	/^     d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4d	prettyprint.asm	/^     d4d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d4d	usertests.asm	/^     d4d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
d4e	eager_mmap.asm	/^ d4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d4e	lazy_mmap.asm	/^ d4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d4f	wc.asm	/^ d4f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d5	forktest.asm	/^  d5:	78 21                	js     f8 <forktest+0x67>$/;"	l
d5	ln.asm	/^  d5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
d5	usertests.asm	/^      d5:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d5	zombie.asm	/^  d5:	0f b6 10             	movzbl (%rax),%edx$/;"	l
d50	divide.asm	/^ d50:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d50	grep.asm	/^ d50:	48 8b 00             	mov    (%rax),%rax$/;"	l
d50	prettyprint.asm	/^     d50:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d50	sh.asm	/^     d50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d51	bad_mmap.asm	/^ d51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d51	imshow.asm	/^ d51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d51	ls.asm	/^     d51:	48 8b 00             	mov    (%rax),%rax$/;"	l
d51	usertests.asm	/^     d51:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
d52	eager_mmap.asm	/^ d52:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d52	lazy_mmap.asm	/^ d52:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d52	wc.asm	/^ d52:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d53	divide.asm	/^ d53:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d53	grep.asm	/^ d53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d54	ls.asm	/^     d54:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d54	prettyprint.asm	/^     d54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d54	sh.asm	/^     d54:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d55	bad_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	eager_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	imshow.asm	/^ d55:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d55	lazy_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	usertests.asm	/^     d55:	7e b2                	jle    d09 <createtest+0x55>$/;"	l
d55	wc.asm	/^ d55:	89 c2                	mov    %eax,%edx$/;"	l
d57	grep.asm	/^ d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d57	usertests.asm	/^     d57:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d57	wc.asm	/^ d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d58	imshow.asm	/^ d58:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d58	ls.asm	/^     d58:	77 17                	ja     d71 <free+0x4f>$/;"	l
d58	prettyprint.asm	/^     d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d59	bad_mmap.asm	/^ d59:	48 8b 00             	mov    (%rax),%rax$/;"	l
d59	eager_mmap.asm	/^ d59:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d59	lazy_mmap.asm	/^ d59:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d5a	divide.asm	/^ d5a:	00 00 00 $/;"	l
d5a	ls.asm	/^     d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5a	sh.asm	/^     d5a:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d5b	grep.asm	/^ d5b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5b	imshow.asm	/^ d5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5b	wc.asm	/^ d5b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d5c	bad_mmap.asm	/^ d5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d5c	prettyprint.asm	/^     d5c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d5d	divide.asm	/^ d5d:	48 8b 00             	mov    (%rax),%rax$/;"	l
d5d	eager_mmap.asm	/^ d5d:	eb 4e                	jmp    dad <malloc+0x148>$/;"	l
d5d	lazy_mmap.asm	/^ d5d:	eb 4e                	jmp    dad <malloc+0x148>$/;"	l
d5e	ls.asm	/^     d5e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5e	usertests.asm	/^     d5e:	00 00 00 $/;"	l
d5e	wc.asm	/^ d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d5f	eager_mmap.asm	/^ d5f:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d5f	grep.asm	/^ d5f:	76 c7                	jbe    d28 <free+0x2b>$/;"	l
d5f	imshow.asm	/^ d5f:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d5f	lazy_mmap.asm	/^ d5f:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d5f	sh.asm	/^     d5f:	48 89 c7             	mov    %rax,%rdi$/;"	l
d6	cat.asm	/^  d6:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
d6	imshow.asm	/^  d6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d6	wc.asm	/^  d6:	0f 8f 52 ff ff ff    	jg     2e <wc+0x2e>$/;"	l
d60	bad_mmap.asm	/^ d60:	e9 41 ff ff ff       	jmpq   ca6 <malloc+0x89>$/;"	l
d60	divide.asm	/^ d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d60	prettyprint.asm	/^     d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d61	grep.asm	/^ d61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d61	usertests.asm	/^     d61:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
d62	ls.asm	/^     d62:	77 2f                	ja     d93 <free+0x71>$/;"	l
d62	sh.asm	/^     d62:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d62	wc.asm	/^ d62:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d63	imshow.asm	/^ d63:	48 89 c7             	mov    %rax,%rdi$/;"	l
d64	divide.asm	/^ d64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
d64	ls.asm	/^     d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d64	prettyprint.asm	/^     d64:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
d64	usertests.asm	/^     d64:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d65	bad_mmap.asm	/^ d65:	c9                   	leaveq $/;"	l
d65	grep.asm	/^ d65:	48 8b 00             	mov    (%rax),%rax$/;"	l
d65	wc.asm	/^ d65:	89 c0                	mov    %eax,%eax$/;"	l
d66	bad_mmap.asm	/^ d66:	c3                   	retq   $/;"	l
d66	eager_mmap.asm	/^ d66:	00 00 00 $/;"	l
d66	imshow.asm	/^ d66:	48 b8 d6 0b 00 00 00 	movabs $0xbd6,%rax$/;"	l
d66	lazy_mmap.asm	/^ d66:	00 00 00 $/;"	l
d67	wc.asm	/^ d67:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d68	grep.asm	/^ d68:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d68	ls.asm	/^     d68:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	divide.asm	/^ d69:	75 4a                	jne    db5 <malloc+0x7e>$/;"	l
d69	eager_mmap.asm	/^ d69:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	lazy_mmap.asm	/^ d69:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	sh.asm	/^     d69:	00 00 00 $/;"	l
d6b	divide.asm	/^ d6b:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d6b	ls.asm	/^     d6b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d6b	prettyprint.asm	/^     d6b:	00 00 00 $/;"	l
d6b	usertests.asm	/^     d6b:	00 00 00 $/;"	l
d6b	wc.asm	/^ d6b:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d6c	eager_mmap.asm	/^ d6c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d6c	grep.asm	/^ d6c:	76 ba                	jbe    d28 <free+0x2b>$/;"	l
d6c	lazy_mmap.asm	/^ d6c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d6c	sh.asm	/^     d6c:	ff d0                	callq  *%rax$/;"	l
d6d	imshow.asm	/^ d6d:	00 00 00 $/;"	l
d6e	grep.asm	/^ d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d6e	prettyprint.asm	/^     d6e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d6e	sh.asm	/^     d6e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d6e	usertests.asm	/^     d6e:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
d6f	ls.asm	/^     d6f:	77 22                	ja     d93 <free+0x71>$/;"	l
d6f	wc.asm	/^ d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d7	eager_mmap.asm	/^  d7:	00 00 00 $/;"	l
d7	echo.asm	/^  d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d7	forktest.asm	/^  d7:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d7	init.asm	/^  d7:	ff d2                	callq  *%rdx$/;"	l
d7	lazy_mmap.asm	/^  d7:	00 00 00 $/;"	l
d7	mkdir.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	prettyprint.asm	/^      d7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
d7	rm.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	sh.asm	/^      d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d70	eager_mmap.asm	/^ d70:	75 23                	jne    d95 <malloc+0x130>$/;"	l
d70	imshow.asm	/^ d70:	ff d0                	callq  *%rax$/;"	l
d70	lazy_mmap.asm	/^ d70:	75 23                	jne    d95 <malloc+0x130>$/;"	l
d71	ls.asm	/^     d71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d71	prettyprint.asm	/^     d71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d72	divide.asm	/^ d72:	00 00 00 $/;"	l
d72	eager_mmap.asm	/^ d72:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d72	grep.asm	/^ d72:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d72	imshow.asm	/^ d72:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d72	lazy_mmap.asm	/^ d72:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d72	sh.asm	/^     d72:	eb 2b                	jmp    d9f <parseredirs+0x111>$/;"	l
d72	usertests.asm	/^     d72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d73	wc.asm	/^ d73:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d74	sh.asm	/^     d74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d75	divide.asm	/^ d75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d75	eager_mmap.asm	/^ d75:	89 c7                	mov    %eax,%edi$/;"	l
d75	grep.asm	/^ d75:	89 c0                	mov    %eax,%eax$/;"	l
d75	lazy_mmap.asm	/^ d75:	89 c7                	mov    %eax,%edi$/;"	l
d75	ls.asm	/^     d75:	48 8b 00             	mov    (%rax),%rax$/;"	l
d75	prettyprint.asm	/^     d75:	eb 2f                	jmp    da6 <free+0x5a>$/;"	l
d76	wc.asm	/^ d76:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d77	eager_mmap.asm	/^ d77:	48 b8 ec 0b 00 00 00 	movabs $0xbec,%rax$/;"	l
d77	grep.asm	/^ d77:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d77	lazy_mmap.asm	/^ d77:	48 b8 ec 0b 00 00 00 	movabs $0xbec,%rax$/;"	l
d77	prettyprint.asm	/^     d77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d78	ls.asm	/^     d78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d78	sh.asm	/^     d78:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d79	divide.asm	/^ d79:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d79	imshow.asm	/^ d79:	00 00 00 $/;"	l
d79	usertests.asm	/^     d79:	eb 2f                	jmp    daa <createtest+0xf6>$/;"	l
d79	wc.asm	/^ d79:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d7b	grep.asm	/^ d7b:	48 89 c2             	mov    %rax,%rdx$/;"	l
d7b	prettyprint.asm	/^     d7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7b	usertests.asm	/^     d7b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d7c	imshow.asm	/^ d7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7c	ls.asm	/^     d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7c	sh.asm	/^     d7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d7e	eager_mmap.asm	/^ d7e:	00 00 00 $/;"	l
d7e	grep.asm	/^ d7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7e	lazy_mmap.asm	/^ d7e:	00 00 00 $/;"	l
d7e	prettyprint.asm	/^     d7e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d7e	usertests.asm	/^     d7e:	83 c0 30             	add    $0x30,%eax$/;"	l
d7f	imshow.asm	/^ d7f:	c9                   	leaveq $/;"	l
d8	divide.asm	/^  d8:	00 00 00 $/;"	l
d8	kill.asm	/^  d8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
d8	ln.asm	/^  d8:	89 d1                	mov    %edx,%ecx$/;"	l
d8	stressfs.asm	/^  d8:	00 00 00 $/;"	l
d8	zombie.asm	/^  d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d80	divide.asm	/^ d80:	00 00 00 $/;"	l
d80	imshow.asm	/^ d80:	c3                   	retq   $/;"	l
d80	ls.asm	/^     d80:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d80	sh.asm	/^     d80:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d80	wc.asm	/^ d80:	00 00 00 $/;"	l
d81	eager_mmap.asm	/^ d81:	ff d0                	callq  *%rax$/;"	l
d81	imshow.asm	/^ d81:	55                   	push   %rbp$/;"	l
d81	lazy_mmap.asm	/^ d81:	ff d0                	callq  *%rax$/;"	l
d81	usertests.asm	/^     d81:	89 c2                	mov    %eax,%edx$/;"	l
d82	grep.asm	/^ d82:	48 01 c2             	add    %rax,%rdx$/;"	l
d82	imshow.asm	/^ d82:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d82	prettyprint.asm	/^     d82:	77 17                	ja     d9b <free+0x4f>$/;"	l
d83	divide.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d83	eager_mmap.asm	/^ d83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d83	lazy_mmap.asm	/^ d83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d83	usertests.asm	/^     d83:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d83	wc.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d84	ls.asm	/^     d84:	76 c7                	jbe    d4d <free+0x2b>$/;"	l
d84	prettyprint.asm	/^     d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d85	grep.asm	/^ d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d85	imshow.asm	/^ d85:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d86	ls.asm	/^     d86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d86	sh.asm	/^     d86:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d87	divide.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d87	eager_mmap.asm	/^ d87:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d87	lazy_mmap.asm	/^ d87:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d87	wc.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d88	prettyprint.asm	/^     d88:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d89	grep.asm	/^ d89:	48 8b 00             	mov    (%rax),%rax$/;"	l
d89	imshow.asm	/^ d89:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d8a	divide.asm	/^ d8a:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d8a	ls.asm	/^     d8a:	48 8b 00             	mov    (%rax),%rax$/;"	l
d8a	usertests.asm	/^     d8a:	00 00 00 $/;"	l
d8a	wc.asm	/^ d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8b	sh.asm	/^     d8b:	48 89 c7             	mov    %rax,%rdi$/;"	l
d8c	eager_mmap.asm	/^ d8c:	75 07                	jne    d95 <malloc+0x130>$/;"	l
d8c	grep.asm	/^ d8c:	48 39 c2             	cmp    %rax,%rdx$/;"	l
d8c	imshow.asm	/^ d8c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d8c	lazy_mmap.asm	/^ d8c:	75 07                	jne    d95 <malloc+0x130>$/;"	l
d8c	prettyprint.asm	/^     d8c:	77 2f                	ja     dbd <free+0x71>$/;"	l
d8d	ls.asm	/^     d8d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d8d	usertests.asm	/^     d8d:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d8e	eager_mmap.asm	/^ d8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d8e	lazy_mmap.asm	/^ d8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d8e	prettyprint.asm	/^     d8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8e	sh.asm	/^     d8e:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d8e	wc.asm	/^ d8e:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d8f	grep.asm	/^ d8f:	75 2d                	jne    dbe <free+0xc1>$/;"	l
d8f	imshow.asm	/^ d8f:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d9	bad_mmap.asm	/^  d9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d9	grep.asm	/^  d9:	00 00 00 $/;"	l
d9	imshow.asm	/^  d9:	ba e8 03 00 00       	mov    $0x3e8,%edx$/;"	l
d9	init.asm	/^  d9:	48 b8 95 04 00 00 00 	movabs $0x495,%rax$/;"	l
d9	ls.asm	/^      d9:	00 00 00 $/;"	l
d90	usertests.asm	/^     d90:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d91	divide.asm	/^ d91:	00 00 00 $/;"	l
d91	grep.asm	/^ d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d91	ls.asm	/^     d91:	76 ba                	jbe    d4d <free+0x2b>$/;"	l
d92	prettyprint.asm	/^     d92:	48 8b 00             	mov    (%rax),%rax$/;"	l
d92	wc.asm	/^ d92:	eb 4e                	jmp    de2 <malloc+0x148>$/;"	l
d93	eager_mmap.asm	/^ d93:	eb 18                	jmp    dad <malloc+0x148>$/;"	l
d93	imshow.asm	/^ d93:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d93	lazy_mmap.asm	/^ d93:	eb 18                	jmp    dad <malloc+0x148>$/;"	l
d93	ls.asm	/^     d93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d94	divide.asm	/^ d94:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d94	wc.asm	/^ d94:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d95	eager_mmap.asm	/^ d95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d95	grep.asm	/^ d95:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
d95	lazy_mmap.asm	/^ d95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d95	prettyprint.asm	/^     d95:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d95	sh.asm	/^     d95:	00 00 00 $/;"	l
d97	divide.asm	/^ d97:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d97	imshow.asm	/^ d97:	83 c0 01             	add    $0x1,%eax$/;"	l
d97	ls.asm	/^     d97:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d97	usertests.asm	/^     d97:	00 00 00 $/;"	l
d98	grep.asm	/^ d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d98	sh.asm	/^     d98:	ff d0                	callq  *%rax$/;"	l
d99	eager_mmap.asm	/^ d99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d99	lazy_mmap.asm	/^ d99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d99	prettyprint.asm	/^     d99:	77 22                	ja     dbd <free+0x71>$/;"	l
d9a	imshow.asm	/^ d9a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d9a	ls.asm	/^     d9a:	89 c0                	mov    %eax,%eax$/;"	l
d9a	sh.asm	/^     d9a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d9a	usertests.asm	/^     d9a:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d9b	prettyprint.asm	/^     d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9b	wc.asm	/^ d9b:	00 00 00 $/;"	l
d9c	grep.asm	/^ d9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9c	ls.asm	/^     d9c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d9d	eager_mmap.asm	/^ d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9d	imshow.asm	/^ d9d:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d9d	lazy_mmap.asm	/^ d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9e	divide.asm	/^ d9e:	00 00 00 $/;"	l
d9e	sh.asm	/^     d9e:	90                   	nop$/;"	l
d9e	wc.asm	/^ d9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	grep.asm	/^ d9f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d9f	prettyprint.asm	/^     d9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	sh.asm	/^     d9f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
da	eager_mmap.asm	/^  da:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
da	lazy_mmap.asm	/^  da:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
da	ln.asm	/^  da:	fc                   	cld    $/;"	l
da	mkdir.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da	rm.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da0	ls.asm	/^     da0:	48 89 c2             	mov    %rax,%rdx$/;"	l
da1	divide.asm	/^ da1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
da1	eager_mmap.asm	/^ da1:	48 8b 00             	mov    (%rax),%rax$/;"	l
da1	lazy_mmap.asm	/^ da1:	48 8b 00             	mov    (%rax),%rax$/;"	l
da1	usertests.asm	/^     da1:	00 00 00 $/;"	l
da1	wc.asm	/^ da1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
da2	grep.asm	/^ da2:	01 c2                	add    %eax,%edx$/;"	l
da2	prettyprint.asm	/^     da2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da3	ls.asm	/^     da3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da3	sh.asm	/^     da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
da4	divide.asm	/^ da4:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
da4	eager_mmap.asm	/^ da4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da4	grep.asm	/^ da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da4	imshow.asm	/^ da4:	00 00 00 $/;"	l
da4	lazy_mmap.asm	/^ da4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da4	usertests.asm	/^     da4:	ff d0                	callq  *%rax$/;"	l
da5	wc.asm	/^ da5:	75 23                	jne    dca <malloc+0x130>$/;"	l
da6	prettyprint.asm	/^     da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da6	usertests.asm	/^     da6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
da7	imshow.asm	/^ da7:	48 8b 00             	mov    (%rax),%rax$/;"	l
da7	ls.asm	/^     da7:	48 01 c2             	add    %rax,%rdx$/;"	l
da7	sh.asm	/^     da7:	48 ba 24 1e 00 00 00 	movabs $0x1e24,%rdx$/;"	l
da7	wc.asm	/^ da7:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
da8	eager_mmap.asm	/^ da8:	e9 41 ff ff ff       	jmpq   cee <malloc+0x89>$/;"	l
da8	grep.asm	/^ da8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
da8	lazy_mmap.asm	/^ da8:	e9 41 ff ff ff       	jmpq   cee <malloc+0x89>$/;"	l
daa	imshow.asm	/^ daa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
daa	ls.asm	/^     daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
daa	prettyprint.asm	/^     daa:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
daa	usertests.asm	/^     daa:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
daa	wc.asm	/^ daa:	89 c7                	mov    %eax,%edi$/;"	l
dab	divide.asm	/^ dab:	00 00 00 $/;"	l
dab	grep.asm	/^ dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dac	wc.asm	/^ dac:	48 b8 21 0c 00 00 00 	movabs $0xc21,%rax$/;"	l
dad	eager_mmap.asm	/^ dad:	c9                   	leaveq $/;"	l
dad	lazy_mmap.asm	/^ dad:	c9                   	leaveq $/;"	l
dae	divide.asm	/^ dae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
dae	eager_mmap.asm	/^ dae:	c3                   	retq   $/;"	l
dae	imshow.asm	/^ dae:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
dae	lazy_mmap.asm	/^ dae:	c3                   	retq   $/;"	l
dae	ls.asm	/^     dae:	48 8b 00             	mov    (%rax),%rax$/;"	l
dae	prettyprint.asm	/^     dae:	76 c7                	jbe    d77 <free+0x2b>$/;"	l
dae	sh.asm	/^     dae:	00 00 00 $/;"	l
dae	usertests.asm	/^     dae:	7e cb                	jle    d7b <createtest+0xc7>$/;"	l
daf	grep.asm	/^ daf:	48 8b 00             	mov    (%rax),%rax$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	divide.asm	/^  db:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
db	echo.asm	/^  db:	90                   	nop$/;"	l
db	forktest.asm	/^  db:	75 0c                	jne    e9 <forktest+0x58>$/;"	l
db	ln.asm	/^  db:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	sh.asm	/^      db:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
db	stressfs.asm	/^  db:	ff d0                	callq  *%rax$/;"	l
db0	prettyprint.asm	/^     db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
db0	usertests.asm	/^     db0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
db1	ls.asm	/^     db1:	48 39 c2             	cmp    %rax,%rdx$/;"	l
db1	sh.asm	/^     db1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
db2	grep.asm	/^ db2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
db3	imshow.asm	/^ db3:	75 4a                	jne    dff <malloc+0x7e>$/;"	l
db3	wc.asm	/^ db3:	00 00 00 $/;"	l
db4	ls.asm	/^     db4:	75 2d                	jne    de3 <free+0xc1>$/;"	l
db4	prettyprint.asm	/^     db4:	48 8b 00             	mov    (%rax),%rax$/;"	l
db4	sh.asm	/^     db4:	48 89 c7             	mov    %rax,%rdi$/;"	l
db5	divide.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	grep.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	imshow.asm	/^ db5:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
db6	ls.asm	/^     db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db6	wc.asm	/^ db6:	ff d0                	callq  *%rax$/;"	l
db7	prettyprint.asm	/^     db7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
db7	sh.asm	/^     db7:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
db7	usertests.asm	/^     db7:	00 00 00 $/;"	l
db8	wc.asm	/^ db8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
db9	divide.asm	/^ db9:	48 8b 00             	mov    (%rax),%rax$/;"	l
db9	grep.asm	/^ db9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dba	ls.asm	/^     dba:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dba	usertests.asm	/^     dba:	8b 00                	mov    (%rax),%eax$/;"	l
dbb	prettyprint.asm	/^     dbb:	76 ba                	jbe    d77 <free+0x2b>$/;"	l
dbc	divide.asm	/^ dbc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dbc	grep.asm	/^ dbc:	eb 0e                	jmp    dcc <free+0xcf>$/;"	l
dbc	imshow.asm	/^ dbc:	00 00 00 $/;"	l
dbc	usertests.asm	/^     dbc:	48 be 48 6c 00 00 00 	movabs $0x6c48,%rsi$/;"	l
dbc	wc.asm	/^ dbc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
dbd	ls.asm	/^     dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbd	prettyprint.asm	/^     dbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dbe	grep.asm	/^ dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbe	sh.asm	/^     dbe:	00 00 00 $/;"	l
dbf	imshow.asm	/^ dbf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dc	echo.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	grep.asm	/^  dc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
dc	kill.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	ls.asm	/^      dc:	48 01 d0             	add    %rdx,%rax$/;"	l
dc	usertests.asm	/^      dc:	00 00 00 $/;"	l
dc	wc.asm	/^  dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
dc	zombie.asm	/^  dc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
dc0	divide.asm	/^ dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dc1	ls.asm	/^     dc1:	48 8b 00             	mov    (%rax),%rax$/;"	l
dc1	prettyprint.asm	/^     dc1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc1	sh.asm	/^     dc1:	ff d0                	callq  *%rax$/;"	l
dc1	wc.asm	/^ dc1:	75 07                	jne    dca <malloc+0x130>$/;"	l
dc2	grep.asm	/^ dc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dc3	imshow.asm	/^ dc3:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dc3	sh.asm	/^     dc3:	85 c0                	test   %eax,%eax$/;"	l
dc3	usertests.asm	/^     dc3:	00 00 00 $/;"	l
dc3	wc.asm	/^ dc3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc4	divide.asm	/^ dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	ls.asm	/^     dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	prettyprint.asm	/^     dc4:	89 c0                	mov    %eax,%eax$/;"	l
dc5	grep.asm	/^ dc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dc5	sh.asm	/^     dc5:	0f 85 dc fe ff ff    	jne    ca7 <parseredirs+0x19>$/;"	l
dc6	prettyprint.asm	/^     dc6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dc6	usertests.asm	/^     dc6:	89 c7                	mov    %eax,%edi$/;"	l
dc7	divide.asm	/^ dc7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dc7	ls.asm	/^     dc7:	01 c2                	add    %eax,%edx$/;"	l
dc8	usertests.asm	/^     dc8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc8	wc.asm	/^ dc8:	eb 18                	jmp    de2 <malloc+0x148>$/;"	l
dc9	grep.asm	/^ dc9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dc9	ls.asm	/^     dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dca	divide.asm	/^ dca:	72 65                	jb     e31 <malloc+0xfa>$/;"	l
dca	imshow.asm	/^ dca:	00 00 00 $/;"	l
dca	prettyprint.asm	/^     dca:	48 89 c2             	mov    %rax,%rdx$/;"	l
dca	wc.asm	/^ dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcb	sh.asm	/^     dcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
dcc	divide.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcc	grep.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcd	imshow.asm	/^ dcd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
dcd	ls.asm	/^     dcd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dcd	prettyprint.asm	/^     dcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dcd	usertests.asm	/^     dcd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dce	wc.asm	/^ dce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dcf	sh.asm	/^     dcf:	c9                   	leaveq $/;"	l
dd	cat.asm	/^  dd:	00 00 00 $/;"	l
dd	forktest.asm	/^  dd:	48 b8 0d 05 00 00 00 	movabs $0x50d,%rax$/;"	l
dd	ln.asm	/^  dd:	89 ca                	mov    %ecx,%edx$/;"	l
dd	stressfs.asm	/^  dd:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
dd0	divide.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	grep.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	ls.asm	/^     dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd0	sh.asm	/^     dd0:	c3                   	retq   $/;"	l
dd1	imshow.asm	/^ dd1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dd1	prettyprint.asm	/^     dd1:	48 01 c2             	add    %rax,%rdx$/;"	l
dd1	sh.asm	/^     dd1:	55                   	push   %rbp$/;"	l
dd2	sh.asm	/^     dd2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
dd2	wc.asm	/^ dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd3	divide.asm	/^ dd3:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dd3	grep.asm	/^ dd3:	89 c0                	mov    %eax,%eax$/;"	l
dd4	imshow.asm	/^ dd4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dd4	ls.asm	/^     dd4:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd4	prettyprint.asm	/^     dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd4	usertests.asm	/^     dd4:	00 00 00 $/;"	l
dd5	grep.asm	/^ dd5:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dd5	sh.asm	/^     dd5:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
dd6	divide.asm	/^ dd6:	75 10                	jne    de8 <malloc+0xb1>$/;"	l
dd6	wc.asm	/^ dd6:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd7	ls.asm	/^     dd7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dd7	usertests.asm	/^     dd7:	ff d2                	callq  *%rdx$/;"	l
dd8	divide.asm	/^ dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd8	prettyprint.asm	/^     dd8:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd9	grep.asm	/^ dd9:	48 89 c2             	mov    %rax,%rdx$/;"	l
dd9	sh.asm	/^     dd9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
dd9	usertests.asm	/^     dd9:	90                   	nop$/;"	l
dd9	wc.asm	/^ dd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dda	ls.asm	/^     dda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dda	usertests.asm	/^     dda:	c9                   	leaveq $/;"	l
ddb	imshow.asm	/^ ddb:	00 00 00 $/;"	l
ddb	prettyprint.asm	/^     ddb:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ddb	usertests.asm	/^     ddb:	c3                   	retq   $/;"	l
ddc	divide.asm	/^ ddc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ddc	grep.asm	/^ ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ddc	usertests.asm	/^     ddc:	55                   	push   %rbp$/;"	l
ddd	sh.asm	/^     ddd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ddd	usertests.asm	/^     ddd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ddd	wc.asm	/^ ddd:	e9 41 ff ff ff       	jmpq   d23 <malloc+0x89>$/;"	l
dde	imshow.asm	/^ dde:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dde	ls.asm	/^     dde:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dde	prettyprint.asm	/^     dde:	75 2d                	jne    e0d <free+0xc1>$/;"	l
ddf	divide.asm	/^ ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de	bad_mmap.asm	/^  de:	48 ba cd 06 00 00 00 	movabs $0x6cd,%rdx$/;"	l
de	imshow.asm	/^  de:	48 89 ce             	mov    %rcx,%rsi$/;"	l
de	mkdir.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	prettyprint.asm	/^      de:	00 00 00 $/;"	l
de	rm.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	sh.asm	/^      de:	89 c7                	mov    %eax,%edi$/;"	l
de0	grep.asm	/^ de0:	48 01 d0             	add    %rdx,%rax$/;"	l
de0	prettyprint.asm	/^     de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de0	usertests.asm	/^     de0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
de1	imshow.asm	/^ de1:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
de1	ls.asm	/^     de1:	eb 0e                	jmp    df1 <free+0xcf>$/;"	l
de1	sh.asm	/^     de1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
de2	wc.asm	/^ de2:	c9                   	leaveq $/;"	l
de3	divide.asm	/^ de3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
de3	grep.asm	/^ de3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
de3	ls.asm	/^     de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de3	wc.asm	/^ de3:	c3                   	retq   $/;"	l
de4	prettyprint.asm	/^     de4:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
de5	sh.asm	/^     de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
de6	divide.asm	/^ de6:	eb 2e                	jmp    e16 <malloc+0xdf>$/;"	l
de7	grep.asm	/^ de7:	75 27                	jne    e10 <free+0x113>$/;"	l
de7	ls.asm	/^     de7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
de7	prettyprint.asm	/^     de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de7	usertests.asm	/^     de7:	00 00 00 $/;"	l
de8	divide.asm	/^ de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de8	imshow.asm	/^ de8:	00 00 00 $/;"	l
de9	grep.asm	/^ de9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de9	sh.asm	/^     de9:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
dea	ls.asm	/^     dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dea	usertests.asm	/^     dea:	8b 00                	mov    (%rax),%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint64 oldsz, uint64 newsz)$/;"	f
deb	imshow.asm	/^ deb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
deb	prettyprint.asm	/^     deb:	48 8b 00             	mov    (%rax),%rax$/;"	l
dec	divide.asm	/^ dec:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dec	usertests.asm	/^     dec:	48 be 6e 6c 00 00 00 	movabs $0x6c6e,%rsi$/;"	l
ded	grep.asm	/^ ded:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dee	imshow.asm	/^ dee:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
dee	ls.asm	/^     dee:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dee	prettyprint.asm	/^     dee:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
def	divide.asm	/^ def:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	eager_mmap.asm	/^  df:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df	lazy_mmap.asm	/^  df:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df	ln.asm	/^  df:	48 89 fe             	mov    %rdi,%rsi$/;"	l
df	ls.asm	/^      df:	89 da                	mov    %ebx,%edx$/;"	l
df	usertests.asm	/^      df:	ff d0                	callq  *%rax$/;"	l
df	zombie.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df0	grep.asm	/^ df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df0	sh.asm	/^     df0:	00 00 00 $/;"	l
df1	ls.asm	/^     df1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df1	prettyprint.asm	/^     df1:	01 c2                	add    %eax,%edx$/;"	l
df2	divide.asm	/^ df2:	89 c2                	mov    %eax,%edx$/;"	l
df3	prettyprint.asm	/^     df3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df3	sh.asm	/^     df3:	48 89 ce             	mov    %rcx,%rsi$/;"	l
df3	usertests.asm	/^     df3:	00 00 00 $/;"	l
df4	divide.asm	/^ df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df4	grep.asm	/^ df4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df5	imshow.asm	/^ df5:	00 00 00 $/;"	l
df5	ls.asm	/^     df5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df6	sh.asm	/^     df6:	48 89 c7             	mov    %rax,%rdi$/;"	l
df6	usertests.asm	/^     df6:	89 c7                	mov    %eax,%edi$/;"	l
df7	grep.asm	/^ df7:	01 c2                	add    %eax,%edx$/;"	l
df7	prettyprint.asm	/^     df7:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	divide.asm	/^ df8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	imshow.asm	/^ df8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
df8	ls.asm	/^     df8:	89 c0                	mov    %eax,%eax$/;"	l
df8	usertests.asm	/^     df8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df9	grep.asm	/^ df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df9	sh.asm	/^     df9:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
dfa	ls.asm	/^     dfa:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dfa	prettyprint.asm	/^     dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfb	divide.asm	/^ dfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfd	grep.asm	/^ dfd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dfd	usertests.asm	/^     dfd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dfe	ls.asm	/^     dfe:	48 89 c2             	mov    %rax,%rdx$/;"	l
dfe	prettyprint.asm	/^     dfe:	48 8b 00             	mov    (%rax),%rax$/;"	l
dff	divide.asm	/^ dff:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dff	imshow.asm	/^ dff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
digits	console.c	/^static char digits[] = "0123456789abcdef";$/;"	v	file:
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
dst	bad_mmap.asm	/^  dst = vdst;$/;"	d
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	eager_mmap.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	imshow.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	lazy_mmap.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	prettyprint.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon8	file:
e	initcode.asm	/^   e:	48 c7 c0 07 00 00 00 	mov    $0x7,%rax$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	usertests.asm	/^       e:	8b 00                	mov    (%rax),%eax$/;"	l
e	zombie.asm	/^   e:	ff d0                	callq  *%rax$/;"	l
e0	cat.asm	/^  e0:	ff d0                	callq  *%rax$/;"	l
e0	divide.asm	/^  e0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e0	echo.asm	/^  e0:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e0	grep.asm	/^  e0:	75 07                	jne    e9 <grep+0xe9>$/;"	l
e0	init.asm	/^  e0:	00 00 00 $/;"	l
e0	kill.asm	/^  e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e0	sh.asm	/^      e0:	48 b8 30 15 00 00 00 	movabs $0x1530,%rax$/;"	l
e0	stressfs.asm	/^  e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e0	wc.asm	/^  e0:	79 2c                	jns    10e <wc+0x10e>$/;"	l
e00	grep.asm	/^ e00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e00	sh.asm	/^     e00:	00 00 00 $/;"	l
e01	ls.asm	/^     e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e01	prettyprint.asm	/^     e01:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e02	divide.asm	/^ e02:	89 c0                	mov    %eax,%eax$/;"	l
e03	imshow.asm	/^ e03:	48 8b 00             	mov    (%rax),%rax$/;"	l
e03	sh.asm	/^     e03:	ff d0                	callq  *%rax$/;"	l
e04	divide.asm	/^ e04:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e04	grep.asm	/^ e04:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e04	prettyprint.asm	/^     e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e04	usertests.asm	/^     e04:	00 00 00 $/;"	l
e05	ls.asm	/^     e05:	48 01 d0             	add    %rdx,%rax$/;"	l
e05	sh.asm	/^     e05:	85 c0                	test   %eax,%eax$/;"	l
e06	imshow.asm	/^ e06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e07	grep.asm	/^ e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e07	sh.asm	/^     e07:	75 16                	jne    e1f <parseblock+0x4e>$/;"	l
e07	usertests.asm	/^     e07:	ff d2                	callq  *%rdx$/;"	l
e08	divide.asm	/^ e08:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e08	ls.asm	/^     e08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e08	prettyprint.asm	/^     e08:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e09	sh.asm	/^     e09:	48 bf 29 1e 00 00 00 	movabs $0x1e29,%rdi$/;"	l
e09	usertests.asm	/^     e09:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e0a	imshow.asm	/^ e0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0b	grep.asm	/^ e0b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e0b	prettyprint.asm	/^     e0b:	eb 0e                	jmp    e1b <free+0xcf>$/;"	l
e0c	divide.asm	/^ e0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0c	ls.asm	/^     e0c:	75 27                	jne    e35 <free+0x113>$/;"	l
e0d	prettyprint.asm	/^     e0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0e	grep.asm	/^ e0e:	eb 0b                	jmp    e1b <free+0x11e>$/;"	l
e0e	imshow.asm	/^ e0e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e0e	ls.asm	/^     e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1	imshow.asm	/^  e1:	89 c7                	mov    %eax,%edi$/;"	l
e1	ls.asm	/^      e1:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
e1	mkdir.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	prettyprint.asm	/^      e1:	ff d2                	callq  *%rdx$/;"	l
e1	rm.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	usertests.asm	/^      e1:	85 c0                	test   %eax,%eax$/;"	l
e1	zombie.asm	/^  e1:	74 d9                	je     bc <strcmp+0x12>$/;"	l
e10	divide.asm	/^ e10:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e10	grep.asm	/^ e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e10	sh.asm	/^     e10:	00 00 00 $/;"	l
e10	usertests.asm	/^     e10:	00 00 00 $/;"	l
e11	imshow.asm	/^ e11:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e11	prettyprint.asm	/^     e11:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e12	ls.asm	/^     e12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e13	divide.asm	/^ e13:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e13	sh.asm	/^     e13:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e13	usertests.asm	/^     e13:	48 b8 84 60 00 00 00 	movabs $0x6084,%rax$/;"	l
e14	grep.asm	/^ e14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e14	imshow.asm	/^ e14:	72 65                	jb     e7b <malloc+0xfa>$/;"	l
e14	prettyprint.asm	/^     e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e15	ls.asm	/^     e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e16	divide.asm	/^ e16:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e16	imshow.asm	/^ e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e18	grep.asm	/^ e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e18	prettyprint.asm	/^     e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e19	ls.asm	/^     e19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	imshow.asm	/^ e1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	sh.asm	/^     e1a:	00 00 00 $/;"	l
e1a	usertests.asm	/^     e1a:	00 00 00 $/;"	l
e1b	grep.asm	/^ e1b:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e1b	prettyprint.asm	/^     e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1c	ls.asm	/^     e1c:	01 c2                	add    %eax,%edx$/;"	l
e1d	divide.asm	/^ e1d:	00 00 00 $/;"	l
e1d	imshow.asm	/^ e1d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e1d	sh.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1d	usertests.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1e	ls.asm	/^     e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1f	prettyprint.asm	/^     e1f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1f	sh.asm	/^     e1f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e1f	usertests.asm	/^     e1f:	85 c0                	test   %eax,%eax$/;"	l
e2	cat.asm	/^  e2:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
e2	grep.asm	/^  e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e2	ln.asm	/^  e2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
e2	wc.asm	/^  e2:	48 be ea 0d 00 00 00 	movabs $0xdea,%rsi$/;"	l
e20	divide.asm	/^ e20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e20	imshow.asm	/^ e20:	75 10                	jne    e32 <malloc+0xb1>$/;"	l
e21	usertests.asm	/^     e21:	79 35                	jns    e58 <dirtest+0x7c>$/;"	l
e22	grep.asm	/^ e22:	00 00 00 $/;"	l
e22	imshow.asm	/^ e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e22	ls.asm	/^     e22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e22	prettyprint.asm	/^     e22:	89 c0                	mov    %eax,%eax$/;"	l
e23	sh.asm	/^     e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e23	usertests.asm	/^     e23:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e24	divide.asm	/^ e24:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e24	prettyprint.asm	/^     e24:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e25	grep.asm	/^ e25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e25	ls.asm	/^     e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e26	imshow.asm	/^ e26:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e27	divide.asm	/^ e27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e27	sh.asm	/^     e27:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
e28	prettyprint.asm	/^     e28:	48 89 c2             	mov    %rax,%rdx$/;"	l
e29	grep.asm	/^ e29:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e29	imshow.asm	/^ e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e29	ls.asm	/^     e29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e2a	usertests.asm	/^     e2a:	00 00 00 $/;"	l
e2b	divide.asm	/^ e2b:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e2b	prettyprint.asm	/^     e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	grep.asm	/^ e2c:	90                   	nop$/;"	l
e2c	ls.asm	/^     e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	sh.asm	/^     e2c:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
e2d	grep.asm	/^ e2d:	c9                   	leaveq $/;"	l
e2d	imshow.asm	/^ e2d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e2d	usertests.asm	/^     e2d:	8b 00                	mov    (%rax),%eax$/;"	l
e2e	grep.asm	/^ e2e:	c3                   	retq   $/;"	l
e2f	divide.asm	/^ e2f:	eb 4e                	jmp    e7f <malloc+0x148>$/;"	l
e2f	grep.asm	/^ e2f:	55                   	push   %rbp$/;"	l
e2f	prettyprint.asm	/^     e2f:	48 01 d0             	add    %rdx,%rax$/;"	l
e2f	usertests.asm	/^     e2f:	48 be 99 68 00 00 00 	movabs $0x6899,%rsi$/;"	l
e3	imshow.asm	/^  e3:	48 b8 80 06 00 00 00 	movabs $0x680,%rax$/;"	l
e3	init.asm	/^  e3:	ff d0                	callq  *%rax$/;"	l
e3	prettyprint.asm	/^      e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e3	usertests.asm	/^      e3:	79 35                	jns    11a <iputtest+0x11a>$/;"	l
e3	zombie.asm	/^  e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e30	grep.asm	/^ e30:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e30	imshow.asm	/^ e30:	eb 2e                	jmp    e60 <malloc+0xdf>$/;"	l
e30	ls.asm	/^     e30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e31	divide.asm	/^ e31:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e31	sh.asm	/^     e31:	48 89 c7             	mov    %rax,%rdi$/;"	l
e32	imshow.asm	/^ e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e32	prettyprint.asm	/^     e32:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e33	grep.asm	/^ e33:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e33	ls.asm	/^     e33:	eb 0b                	jmp    e40 <free+0x11e>$/;"	l
e34	sh.asm	/^     e34:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
e35	ls.asm	/^     e35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e36	imshow.asm	/^ e36:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e36	prettyprint.asm	/^     e36:	75 27                	jne    e5f <free+0x113>$/;"	l
e36	usertests.asm	/^     e36:	00 00 00 $/;"	l
e37	grep.asm	/^ e37:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e38	divide.asm	/^ e38:	00 00 00 $/;"	l
e38	prettyprint.asm	/^     e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e39	imshow.asm	/^ e39:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
e39	ls.asm	/^     e39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e39	usertests.asm	/^     e39:	89 c7                	mov    %eax,%edi$/;"	l
e3a	grep.asm	/^ e3a:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e3b	divide.asm	/^ e3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
e3b	sh.asm	/^     e3b:	00 00 00 $/;"	l
e3b	usertests.asm	/^     e3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e3c	imshow.asm	/^ e3c:	89 c2                	mov    %eax,%edx$/;"	l
e3c	prettyprint.asm	/^     e3c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e3d	ls.asm	/^     e3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e3e	divide.asm	/^ e3e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e3e	imshow.asm	/^ e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e3e	sh.asm	/^     e3e:	ff d0                	callq  *%rax$/;"	l
e3f	prettyprint.asm	/^     e3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e4	eager_mmap.asm	/^  e4:	48 ba 15 07 00 00 00 	movabs $0x715,%rdx$/;"	l
e4	echo.asm	/^  e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
e4	forktest.asm	/^  e4:	00 00 00 $/;"	l
e4	kill.asm	/^  e4:	90                   	nop$/;"	l
e4	lazy_mmap.asm	/^  e4:	48 ba 15 07 00 00 00 	movabs $0x715,%rdx$/;"	l
e4	mkdir.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e4	rm.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e40	ls.asm	/^     e40:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
e40	sh.asm	/^     e40:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e40	usertests.asm	/^     e40:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e41	grep.asm	/^ e41:	77 07                	ja     e4a <morecore+0x1b>$/;"	l
e42	divide.asm	/^ e42:	75 23                	jne    e67 <malloc+0x130>$/;"	l
e42	imshow.asm	/^ e42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e43	grep.asm	/^ e43:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e43	prettyprint.asm	/^     e43:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e44	divide.asm	/^ e44:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e44	sh.asm	/^     e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e45	imshow.asm	/^ e45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e46	prettyprint.asm	/^     e46:	01 c2                	add    %eax,%edx$/;"	l
e47	divide.asm	/^ e47:	89 c7                	mov    %eax,%edi$/;"	l
e47	ls.asm	/^     e47:	00 00 00 $/;"	l
e47	usertests.asm	/^     e47:	00 00 00 $/;"	l
e48	prettyprint.asm	/^     e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e48	sh.asm	/^     e48:	48 89 d6             	mov    %rdx,%rsi$/;"	l
e49	divide.asm	/^ e49:	48 b8 be 0c 00 00 00 	movabs $0xcbe,%rax$/;"	l
e49	imshow.asm	/^ e49:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e4a	grep.asm	/^ e4a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e4a	ls.asm	/^     e4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e4a	usertests.asm	/^     e4a:	ff d2                	callq  *%rdx$/;"	l
e4b	sh.asm	/^     e4b:	48 89 c7             	mov    %rax,%rdi$/;"	l
e4c	imshow.asm	/^ e4c:	89 c0                	mov    %eax,%eax$/;"	l
e4c	prettyprint.asm	/^     e4c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e4c	usertests.asm	/^     e4c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e4d	grep.asm	/^ e4d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e4e	imshow.asm	/^ e4e:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e4e	ls.asm	/^     e4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e4e	sh.asm	/^     e4e:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
e4f	prettyprint.asm	/^     e4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e5	bad_mmap.asm	/^  e5:	00 00 00 $/;"	l
e5	divide.asm	/^  e5:	48 ba e7 07 00 00 00 	movabs $0x7e7,%rdx$/;"	l
e5	init.asm	/^  e5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
e5	kill.asm	/^  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e5	usertests.asm	/^      e5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e50	divide.asm	/^ e50:	00 00 00 $/;"	l
e50	grep.asm	/^ e50:	89 c7                	mov    %eax,%edi$/;"	l
e51	ls.asm	/^     e51:	90                   	nop$/;"	l
e52	grep.asm	/^ e52:	48 b8 33 08 00 00 00 	movabs $0x833,%rax$/;"	l
e52	imshow.asm	/^ e52:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e52	ls.asm	/^     e52:	c9                   	leaveq $/;"	l
e53	divide.asm	/^ e53:	ff d0                	callq  *%rax$/;"	l
e53	ls.asm	/^     e53:	c3                   	retq   $/;"	l
e53	prettyprint.asm	/^     e53:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e53	usertests.asm	/^     e53:	00 00 00 $/;"	l
e54	ls.asm	/^     e54:	55                   	push   %rbp$/;"	l
e55	divide.asm	/^ e55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e55	ls.asm	/^     e55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e55	sh.asm	/^     e55:	00 00 00 $/;"	l
e56	imshow.asm	/^ e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	prettyprint.asm	/^     e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	usertests.asm	/^     e56:	ff d0                	callq  *%rax$/;"	l
e58	ls.asm	/^     e58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e58	sh.asm	/^     e58:	ff d0                	callq  *%rax$/;"	l
e58	usertests.asm	/^     e58:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e59	divide.asm	/^ e59:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
e59	grep.asm	/^ e59:	00 00 00 $/;"	l
e5a	imshow.asm	/^ e5a:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e5a	prettyprint.asm	/^     e5a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e5a	sh.asm	/^     e5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5c	grep.asm	/^ e5c:	ff d0                	callq  *%rax$/;"	l
e5c	ls.asm	/^     e5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e5d	imshow.asm	/^ e5d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e5d	prettyprint.asm	/^     e5d:	eb 0b                	jmp    e6a <free+0x11e>$/;"	l
e5e	divide.asm	/^ e5e:	75 07                	jne    e67 <malloc+0x130>$/;"	l
e5e	grep.asm	/^ e5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5e	sh.asm	/^     e5e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
e5f	ls.asm	/^     e5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e5f	prettyprint.asm	/^     e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e5f	usertests.asm	/^     e5f:	00 00 00 $/;"	l
e6	ln.asm	/^  e6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
e6	ls.asm	/^      e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
e60	divide.asm	/^ e60:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e60	imshow.asm	/^ e60:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e62	grep.asm	/^ e62:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e62	sh.asm	/^     e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e62	usertests.asm	/^     e62:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
e63	prettyprint.asm	/^     e63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e65	divide.asm	/^ e65:	eb 18                	jmp    e7f <malloc+0x148>$/;"	l
e66	ls.asm	/^     e66:	77 07                	ja     e6f <morecore+0x1b>$/;"	l
e66	sh.asm	/^     e66:	48 ba 34 1e 00 00 00 	movabs $0x1e34,%rdx$/;"	l
e67	divide.asm	/^ e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e67	grep.asm	/^ e67:	75 07                	jne    e70 <morecore+0x41>$/;"	l
e67	imshow.asm	/^ e67:	00 00 00 $/;"	l
e67	prettyprint.asm	/^     e67:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e68	ls.asm	/^     e68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e69	grep.asm	/^ e69:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e69	usertests.asm	/^     e69:	00 00 00 $/;"	l
e6a	imshow.asm	/^ e6a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e6a	prettyprint.asm	/^     e6a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
e6b	divide.asm	/^ e6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e6c	usertests.asm	/^     e6c:	ff d0                	callq  *%rax$/;"	l
e6d	sh.asm	/^     e6d:	00 00 00 $/;"	l
e6e	grep.asm	/^ e6e:	eb 36                	jmp    ea6 <morecore+0x77>$/;"	l
e6e	imshow.asm	/^ e6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e6e	usertests.asm	/^     e6e:	85 c0                	test   %eax,%eax$/;"	l
e6f	divide.asm	/^ e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e6f	ls.asm	/^     e6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e7	forktest.asm	/^  e7:	ff d0                	callq  *%rax$/;"	l
e7	mkdir.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	rm.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	sh.asm	/^      e7:	00 00 00 $/;"	l
e7	stressfs.asm	/^  e7:	eb 24                	jmp    10d <main+0x10d>$/;"	l
e7	zombie.asm	/^  e7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
e70	grep.asm	/^ e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e70	sh.asm	/^     e70:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e70	usertests.asm	/^     e70:	79 35                	jns    ea7 <dirtest+0xcb>$/;"	l
e71	imshow.asm	/^ e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e71	prettyprint.asm	/^     e71:	00 00 00 $/;"	l
e72	ls.asm	/^     e72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e72	usertests.asm	/^     e72:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e73	divide.asm	/^ e73:	48 8b 00             	mov    (%rax),%rax$/;"	l
e73	sh.asm	/^     e73:	48 89 c7             	mov    %rax,%rdi$/;"	l
e74	grep.asm	/^ e74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e74	prettyprint.asm	/^     e74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e75	imshow.asm	/^ e75:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e75	ls.asm	/^     e75:	89 c7                	mov    %eax,%edi$/;"	l
e76	divide.asm	/^ e76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e76	sh.asm	/^     e76:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
e77	ls.asm	/^     e77:	48 b8 58 08 00 00 00 	movabs $0x858,%rax$/;"	l
e78	grep.asm	/^ e78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e78	prettyprint.asm	/^     e78:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e79	imshow.asm	/^ e79:	eb 4e                	jmp    ec9 <malloc+0x148>$/;"	l
e79	usertests.asm	/^     e79:	00 00 00 $/;"	l
e7a	divide.asm	/^ e7a:	e9 41 ff ff ff       	jmpq   dc0 <malloc+0x89>$/;"	l
e7b	imshow.asm	/^ e7b:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e7b	prettyprint.asm	/^     e7b:	90                   	nop$/;"	l
e7c	grep.asm	/^ e7c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e7c	prettyprint.asm	/^     e7c:	c9                   	leaveq $/;"	l
e7c	usertests.asm	/^     e7c:	8b 00                	mov    (%rax),%eax$/;"	l
e7d	prettyprint.asm	/^     e7d:	c3                   	retq   $/;"	l
e7d	sh.asm	/^     e7d:	00 00 00 $/;"	l
e7e	ls.asm	/^     e7e:	00 00 00 $/;"	l
e7e	prettyprint.asm	/^     e7e:	55                   	push   %rbp$/;"	l
e7e	usertests.asm	/^     e7e:	48 be 7f 6c 00 00 00 	movabs $0x6c7f,%rsi$/;"	l
e7f	divide.asm	/^ e7f:	c9                   	leaveq $/;"	l
e7f	grep.asm	/^ e7f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e7f	prettyprint.asm	/^     e7f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e8	bad_mmap.asm	/^  e8:	ff d2                	callq  *%rdx$/;"	l
e8	echo.asm	/^  e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e80	divide.asm	/^ e80:	c3                   	retq   $/;"	l
e80	sh.asm	/^     e80:	ff d0                	callq  *%rax$/;"	l
e81	ls.asm	/^     e81:	ff d0                	callq  *%rax$/;"	l
e82	grep.asm	/^ e82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e82	imshow.asm	/^ e82:	00 00 00 $/;"	l
e82	prettyprint.asm	/^     e82:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e82	sh.asm	/^     e82:	85 c0                	test   %eax,%eax$/;"	l
e83	ls.asm	/^     e83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e84	sh.asm	/^     e84:	75 16                	jne    e9c <parseblock+0xcb>$/;"	l
e85	imshow.asm	/^ e85:	48 8b 00             	mov    (%rax),%rax$/;"	l
e85	usertests.asm	/^     e85:	00 00 00 $/;"	l
e86	grep.asm	/^ e86:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e86	prettyprint.asm	/^     e86:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e86	sh.asm	/^     e86:	48 bf 36 1e 00 00 00 	movabs $0x1e36,%rdi$/;"	l
e87	ls.asm	/^     e87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e88	imshow.asm	/^ e88:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e88	usertests.asm	/^     e88:	89 c7                	mov    %eax,%edi$/;"	l
e89	prettyprint.asm	/^     e89:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e8a	grep.asm	/^ e8a:	48 89 c7             	mov    %rax,%rdi$/;"	l
e8a	usertests.asm	/^     e8a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8c	imshow.asm	/^ e8c:	75 23                	jne    eb1 <malloc+0x130>$/;"	l
e8c	ls.asm	/^     e8c:	75 07                	jne    e95 <morecore+0x41>$/;"	l
e8d	grep.asm	/^ e8d:	48 b8 fd 0c 00 00 00 	movabs $0xcfd,%rax$/;"	l
e8d	sh.asm	/^     e8d:	00 00 00 $/;"	l
e8e	imshow.asm	/^ e8e:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e8e	ls.asm	/^     e8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8f	usertests.asm	/^     e8f:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e9	cat.asm	/^  e9:	00 00 00 $/;"	l
e9	forktest.asm	/^  e9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
e9	grep.asm	/^  e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
e9	init.asm	/^  e9:	75 6c                	jne    157 <main+0x157>$/;"	l
e9	kill.asm	/^  e9:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e9	ln.asm	/^  e9:	90                   	nop$/;"	l
e9	ls.asm	/^      e9:	48 b8 94 05 00 00 00 	movabs $0x594,%rax$/;"	l
e9	stressfs.asm	/^  e9:	48 8d 8d e0 fd ff ff 	lea    -0x220(%rbp),%rcx$/;"	l
e9	wc.asm	/^  e9:	00 00 00 $/;"	l
e90	prettyprint.asm	/^     e90:	77 07                	ja     e99 <morecore+0x1b>$/;"	l
e90	sh.asm	/^     e90:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e91	imshow.asm	/^ e91:	89 c7                	mov    %eax,%edi$/;"	l
e92	prettyprint.asm	/^     e92:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e93	imshow.asm	/^ e93:	48 b8 08 0d 00 00 00 	movabs $0xd08,%rax$/;"	l
e93	ls.asm	/^     e93:	eb 36                	jmp    ecb <morecore+0x77>$/;"	l
e94	grep.asm	/^ e94:	00 00 00 $/;"	l
e95	ls.asm	/^     e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e96	usertests.asm	/^     e96:	00 00 00 $/;"	l
e97	grep.asm	/^ e97:	ff d0                	callq  *%rax$/;"	l
e97	sh.asm	/^     e97:	00 00 00 $/;"	l
e99	grep.asm	/^ e99:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e99	ls.asm	/^     e99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e99	prettyprint.asm	/^     e99:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e99	usertests.asm	/^     e99:	ff d2                	callq  *%rdx$/;"	l
e9a	imshow.asm	/^ e9a:	00 00 00 $/;"	l
e9a	sh.asm	/^     e9a:	ff d0                	callq  *%rax$/;"	l
e9b	usertests.asm	/^     e9b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e9c	prettyprint.asm	/^     e9c:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e9c	sh.asm	/^     e9c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e9d	imshow.asm	/^ e9d:	ff d0                	callq  *%rax$/;"	l
e9d	ls.asm	/^     e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e9f	imshow.asm	/^ e9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e9f	prettyprint.asm	/^     e9f:	89 c7                	mov    %eax,%edi$/;"	l
ea	bad_mmap.asm	/^  ea:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ea	imshow.asm	/^  ea:	00 00 00 $/;"	l
ea	ln.asm	/^  ea:	c9                   	leaveq $/;"	l
ea	mkdir.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	prettyprint.asm	/^      ea:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)$/;"	l
ea	rm.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	sh.asm	/^      ea:	ff d0                	callq  *%rax$/;"	l
ea	zombie.asm	/^  ea:	0f b6 d0             	movzbl %al,%edx$/;"	l
ea0	grep.asm	/^ ea0:	00 00 00 $/;"	l
ea0	sh.asm	/^     ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ea1	ls.asm	/^     ea1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ea1	prettyprint.asm	/^     ea1:	48 b8 82 08 00 00 00 	movabs $0x882,%rax$/;"	l
ea2	usertests.asm	/^     ea2:	00 00 00 $/;"	l
ea3	grep.asm	/^ ea3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ea3	imshow.asm	/^ ea3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ea4	ls.asm	/^     ea4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ea4	sh.asm	/^     ea4:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ea5	usertests.asm	/^     ea5:	ff d0                	callq  *%rax$/;"	l
ea6	grep.asm	/^ ea6:	c9                   	leaveq $/;"	l
ea7	grep.asm	/^ ea7:	c3                   	retq   $/;"	l
ea7	ls.asm	/^     ea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ea7	usertests.asm	/^     ea7:	48 bf 92 6c 00 00 00 	movabs $0x6c92,%rdi$/;"	l
ea8	grep.asm	/^ ea8:	55                   	push   %rbp$/;"	l
ea8	imshow.asm	/^ ea8:	75 07                	jne    eb1 <malloc+0x130>$/;"	l
ea8	prettyprint.asm	/^     ea8:	00 00 00 $/;"	l
ea9	grep.asm	/^ ea9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ea9	sh.asm	/^     ea9:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
eaa	imshow.asm	/^ eaa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eab	ls.asm	/^     eab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
eab	prettyprint.asm	/^     eab:	ff d0                	callq  *%rax$/;"	l
eac	grep.asm	/^ eac:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ead	prettyprint.asm	/^     ead:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
eae	sh.asm	/^     eae:	48 89 c7             	mov    %rax,%rdi$/;"	l
eae	usertests.asm	/^     eae:	00 00 00 $/;"	l
eaf	imshow.asm	/^ eaf:	eb 18                	jmp    ec9 <malloc+0x148>$/;"	l
eaf	ls.asm	/^     eaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eb	eager_mmap.asm	/^  eb:	00 00 00 $/;"	l
eb	init.asm	/^  eb:	48 be 90 0f 00 00 00 	movabs $0xf90,%rsi$/;"	l
eb	lazy_mmap.asm	/^  eb:	00 00 00 $/;"	l
eb	ln.asm	/^  eb:	c3                   	retq   $/;"	l
eb0	grep.asm	/^ eb0:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
eb1	imshow.asm	/^ eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb1	prettyprint.asm	/^     eb1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
eb1	sh.asm	/^     eb1:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
eb1	usertests.asm	/^     eb1:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
eb2	ls.asm	/^     eb2:	48 b8 22 0d 00 00 00 	movabs $0xd22,%rax$/;"	l
eb3	grep.asm	/^ eb3:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
eb5	imshow.asm	/^ eb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
eb6	grep.asm	/^ eb6:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
eb6	prettyprint.asm	/^     eb6:	75 07                	jne    ebf <morecore+0x41>$/;"	l
eb8	prettyprint.asm	/^     eb8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eb8	sh.asm	/^     eb8:	00 00 00 $/;"	l
eb8	usertests.asm	/^     eb8:	00 00 00 $/;"	l
eb9	imshow.asm	/^ eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb9	ls.asm	/^     eb9:	00 00 00 $/;"	l
eba	grep.asm	/^ eba:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ebb	sh.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebb	usertests.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebc	ls.asm	/^     ebc:	ff d0                	callq  *%rax$/;"	l
ebd	imshow.asm	/^ ebd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ebd	prettyprint.asm	/^     ebd:	eb 36                	jmp    ef5 <morecore+0x77>$/;"	l
ebd	sh.asm	/^     ebd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ebd	usertests.asm	/^     ebd:	85 c0                	test   %eax,%eax$/;"	l
ebe	grep.asm	/^ ebe:	83 c0 01             	add    $0x1,%eax$/;"	l
ebe	ls.asm	/^     ebe:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ebf	prettyprint.asm	/^     ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ebf	usertests.asm	/^     ebf:	79 35                	jns    ef6 <dirtest+0x11a>$/;"	l
ebp	kernel.asm	/^    ebp = (addr_t*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  addr_t ebp; \/\/rbp$/;"	m	struct:context
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ec	cat.asm	/^  ec:	ff d0                	callq  *%rax$/;"	l
ec	divide.asm	/^  ec:	00 00 00 $/;"	l
ec	echo.asm	/^  ec:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ec	ln.asm	/^  ec:	55                   	push   %rbp$/;"	l
ec	mkdir.asm	/^  ec:	fc                   	cld    $/;"	l
ec	rm.asm	/^  ec:	fc                   	cld    $/;"	l
ec	sh.asm	/^      ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec	usertests.asm	/^      ec:	00 00 00 $/;"	l
ec	wc.asm	/^  ec:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ec0	imshow.asm	/^ ec0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ec1	grep.asm	/^ ec1:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ec1	sh.asm	/^     ec1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ec1	usertests.asm	/^     ec1:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
ec3	prettyprint.asm	/^     ec3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ec4	grep.asm	/^ ec4:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
ec4	imshow.asm	/^ ec4:	e9 41 ff ff ff       	jmpq   e0a <malloc+0x89>$/;"	l
ec5	ls.asm	/^     ec5:	00 00 00 $/;"	l
ec5	sh.asm	/^     ec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ec7	prettyprint.asm	/^     ec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec8	ls.asm	/^     ec8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ec8	usertests.asm	/^     ec8:	00 00 00 $/;"	l
ec9	imshow.asm	/^ ec9:	c9                   	leaveq $/;"	l
ec9	sh.asm	/^     ec9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
eca	imshow.asm	/^ eca:	c3                   	retq   $/;"	l
ecb	grep.asm	/^ ecb:	00 00 00 $/;"	l
ecb	ls.asm	/^     ecb:	c9                   	leaveq $/;"	l
ecb	prettyprint.asm	/^     ecb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ecb	usertests.asm	/^     ecb:	8b 00                	mov    (%rax),%eax$/;"	l
ecc	ls.asm	/^     ecc:	c3                   	retq   $/;"	l
ecc	sh.asm	/^     ecc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ecd	ls.asm	/^     ecd:	55                   	push   %rbp$/;"	l
ecd	usertests.asm	/^     ecd:	48 be 95 6c 00 00 00 	movabs $0x6c95,%rsi$/;"	l
ece	grep.asm	/^ ece:	48 8b 00             	mov    (%rax),%rax$/;"	l
ece	ls.asm	/^     ece:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ece	prettyprint.asm	/^     ece:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ecf	sh.asm	/^     ecf:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ed	forktest.asm	/^  ed:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ed	grep.asm	/^  ed:	7e 3c                	jle    12b <grep+0x12b>$/;"	l
ed	imshow.asm	/^  ed:	ff d0                	callq  *%rax$/;"	l
ed	kill.asm	/^  ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ed	ln.asm	/^  ed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ed	mkdir.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	rm.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	zombie.asm	/^  ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed1	grep.asm	/^ ed1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ed1	ls.asm	/^     ed1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ed1	prettyprint.asm	/^     ed1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed4	usertests.asm	/^     ed4:	00 00 00 $/;"	l
ed5	grep.asm	/^ ed5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ed5	ls.asm	/^     ed5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ed5	prettyprint.asm	/^     ed5:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ed6	sh.asm	/^     ed6:	00 00 00 $/;"	l
ed7	usertests.asm	/^     ed7:	89 c7                	mov    %eax,%edi$/;"	l
ed8	ls.asm	/^     ed8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ed9	prettyprint.asm	/^     ed9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ed9	sh.asm	/^     ed9:	ff d0                	callq  *%rax$/;"	l
ed9	usertests.asm	/^     ed9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eda	grep.asm	/^ eda:	75 4a                	jne    f26 <malloc+0x7e>$/;"	l
edb	ls.asm	/^     edb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
edb	sh.asm	/^     edb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
edc	grep.asm	/^ edc:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
edc	prettyprint.asm	/^     edc:	48 b8 4c 0d 00 00 00 	movabs $0xd4c,%rax$/;"	l
ede	usertests.asm	/^     ede:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
edf	ls.asm	/^     edf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
edf	sh.asm	/^     edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
ee	cat.asm	/^  ee:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ee	eager_mmap.asm	/^  ee:	ff d2                	callq  *%rdx$/;"	l
ee	lazy_mmap.asm	/^  ee:	ff d2                	callq  *%rdx$/;"	l
ee	prettyprint.asm	/^      ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ee3	grep.asm	/^ ee3:	00 00 00 $/;"	l
ee3	ls.asm	/^     ee3:	83 c0 01             	add    $0x1,%eax$/;"	l
ee3	prettyprint.asm	/^     ee3:	00 00 00 $/;"	l
ee3	sh.asm	/^     ee3:	c9                   	leaveq $/;"	l
ee4	sh.asm	/^     ee4:	c3                   	retq   $/;"	l
ee5	sh.asm	/^     ee5:	55                   	push   %rbp$/;"	l
ee5	usertests.asm	/^     ee5:	00 00 00 $/;"	l
ee6	grep.asm	/^ ee6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ee6	ls.asm	/^     ee6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ee6	prettyprint.asm	/^     ee6:	ff d0                	callq  *%rax$/;"	l
ee6	sh.asm	/^     ee6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ee8	prettyprint.asm	/^     ee8:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ee8	usertests.asm	/^     ee8:	ff d2                	callq  *%rdx$/;"	l
ee9	ls.asm	/^     ee9:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ee9	sh.asm	/^     ee9:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
eea	grep.asm	/^ eea:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
eea	usertests.asm	/^     eea:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
eed	sh.asm	/^     eed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
eef	prettyprint.asm	/^     eef:	00 00 00 $/;"	l
ef	bad_mmap.asm	/^  ef:	48 bf 14 0e 00 00 00 	movabs $0xe14,%rdi$/;"	l
ef	divide.asm	/^  ef:	ff d2                	callq  *%rdx$/;"	l
ef	grep.asm	/^  ef:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ef	imshow.asm	/^  ef:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ef	mkdir.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	rm.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	usertests.asm	/^      ef:	8b 00                	mov    (%rax),%eax$/;"	l
ef0	ls.asm	/^     ef0:	00 00 00 $/;"	l
ef1	grep.asm	/^ ef1:	00 00 00 $/;"	l
ef1	sh.asm	/^     ef1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ef1	usertests.asm	/^     ef1:	00 00 00 $/;"	l
ef2	prettyprint.asm	/^     ef2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef3	ls.asm	/^     ef3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef4	grep.asm	/^ ef4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ef4	usertests.asm	/^     ef4:	ff d0                	callq  *%rax$/;"	l
ef5	prettyprint.asm	/^     ef5:	c9                   	leaveq $/;"	l
ef5	sh.asm	/^     ef5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx$/;"	l
ef6	ls.asm	/^     ef6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ef6	prettyprint.asm	/^     ef6:	c3                   	retq   $/;"	l
ef6	usertests.asm	/^     ef6:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
ef7	prettyprint.asm	/^     ef7:	55                   	push   %rbp$/;"	l
ef8	grep.asm	/^ ef8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ef8	prettyprint.asm	/^     ef8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ef9	sh.asm	/^     ef9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
efa	ls.asm	/^     efa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
efb	grep.asm	/^ efb:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
efb	prettyprint.asm	/^     efb:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
efd	sh.asm	/^     efd:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
efd	usertests.asm	/^     efd:	00 00 00 $/;"	l
eff	ls.asm	/^     eff:	75 4a                	jne    f4b <malloc+0x7e>$/;"	l
eff	prettyprint.asm	/^     eff:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  addr_t eip; \/\/rip;$/;"	m	struct:context
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	elf.h	/^  addr_t entry;$/;"	m	struct:elfhdr
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entry32mp	entry.S	/^entry32mp:$/;"	l
entry32mp	kernel.asm	/^entry32mp:$/;"	l
entry64high	entry.S	/^entry64high:$/;"	l
entry64high	kernel.asm	/^entry64high:$/;"	l
entry64low	entry.S	/^entry64low:$/;"	l
entry64low	kernel.asm	/^entry64low:$/;"	l
entry64mp	entry.S	/^entry64mp:$/;"	l
entry64mp	kernel.asm	/^entry64mp:$/;"	l
entry_addr	bootmain.c	/^  uint64 entry_addr;$/;"	m	struct:mbheader	file:
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
err	x86.h	/^   uint64 err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
extern	kernel.asm	/^extern addr_t vectors[];  \/\/ in vectors.S: array of 256 entry pointers$/;"	l
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	bad_mmap.asm	/^   f:	48 be 68 0d 00 00 00 	movabs $0xd68,%rsi$/;"	l
f	eager_mmap.asm	/^   f:	48 be b0 0d 00 00 00 	movabs $0xdb0,%rsi$/;"	l
f	echo.asm	/^   f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
f	grep.asm	/^   f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f	kill.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	lazy_mmap.asm	/^   f:	48 be b0 0d 00 00 00 	movabs $0xdb0,%rsi$/;"	l
f	ln.asm	/^   f:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)$/;"	l
f	mkdir.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	rm.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	wc.asm	/^   f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)$/;"	l
f0	eager_mmap.asm	/^  f0:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
f0	echo.asm	/^  f0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f0	lazy_mmap.asm	/^  f0:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
f0	ln.asm	/^  f0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
f0	ls.asm	/^      f0:	00 00 00 $/;"	l
f0	sh.asm	/^      f0:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
f0	stressfs.asm	/^  f0:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
f00	usertests.asm	/^     f00:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
f01	ls.asm	/^     f01:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f02	grep.asm	/^ f02:	00 00 00 $/;"	l
f02	prettyprint.asm	/^     f02:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
f04	sh.asm	/^     f04:	00 00 00 $/;"	l
f05	grep.asm	/^ f05:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f05	prettyprint.asm	/^     f05:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
f07	sh.asm	/^     f07:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f07	usertests.asm	/^     f07:	00 00 00 $/;"	l
f08	grep.asm	/^ f08:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f08	ls.asm	/^     f08:	00 00 00 $/;"	l
f09	prettyprint.asm	/^     f09:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
f0a	sh.asm	/^     f0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f0a	usertests.asm	/^     f0a:	ff d0                	callq  *%rax$/;"	l
f0b	ls.asm	/^     f0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f0c	usertests.asm	/^     f0c:	85 c0                	test   %eax,%eax$/;"	l
f0d	prettyprint.asm	/^     f0d:	83 c0 01             	add    $0x1,%eax$/;"	l
f0d	sh.asm	/^     f0d:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
f0e	usertests.asm	/^     f0e:	79 35                	jns    f45 <dirtest+0x169>$/;"	l
f0f	grep.asm	/^ f0f:	00 00 00 $/;"	l
f0f	ls.asm	/^     f0f:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f1	divide.asm	/^  f1:	48 b8 22 06 00 00 00 	movabs $0x622,%rax$/;"	l
f1	kill.asm	/^  f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
f1	mkdir.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	rm.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	usertests.asm	/^      f1:	48 be c8 68 00 00 00 	movabs $0x68c8,%rsi$/;"	l
f1	wc.asm	/^  f1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f1	zombie.asm	/^  f1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f10	prettyprint.asm	/^     f10:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
f10	usertests.asm	/^     f10:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f12	grep.asm	/^ f12:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f13	prettyprint.asm	/^     f13:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f14	sh.asm	/^     f14:	00 00 00 $/;"	l
f15	grep.asm	/^ f15:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f16	ls.asm	/^     f16:	00 00 00 $/;"	l
f17	sh.asm	/^     f17:	ff d0                	callq  *%rax$/;"	l
f17	usertests.asm	/^     f17:	00 00 00 $/;"	l
f19	ls.asm	/^     f19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f19	sh.asm	/^     f19:	85 c0                	test   %eax,%eax$/;"	l
f1a	prettyprint.asm	/^     f1a:	00 00 00 $/;"	l
f1a	usertests.asm	/^     f1a:	8b 00                	mov    (%rax),%eax$/;"	l
f1b	sh.asm	/^     f1b:	74 1f                	je     f3c <parseexec+0x57>$/;"	l
f1c	grep.asm	/^ f1c:	00 00 00 $/;"	l
f1c	usertests.asm	/^     f1c:	48 be a6 6c 00 00 00 	movabs $0x6ca6,%rsi$/;"	l
f1d	ls.asm	/^     f1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f1d	prettyprint.asm	/^     f1d:	48 8b 00             	mov    (%rax),%rax$/;"	l
f1d	sh.asm	/^     f1d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f1f	grep.asm	/^ f1f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f2	grep.asm	/^  f2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
f2	imshow.asm	/^  f2:	81 7d e8 e8 03 00 00 	cmpl   $0x3e8,-0x18(%rbp)$/;"	l
f2	init.asm	/^  f2:	00 00 00 $/;"	l
f20	ls.asm	/^     f20:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f20	prettyprint.asm	/^     f20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f21	sh.asm	/^     f21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f23	usertests.asm	/^     f23:	00 00 00 $/;"	l
f24	prettyprint.asm	/^     f24:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
f25	sh.asm	/^     f25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
f26	grep.asm	/^ f26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f26	usertests.asm	/^     f26:	89 c7                	mov    %eax,%edi$/;"	l
f27	ls.asm	/^     f27:	00 00 00 $/;"	l
f28	sh.asm	/^     f28:	48 89 c7             	mov    %rax,%rdi$/;"	l
f28	usertests.asm	/^     f28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f29	prettyprint.asm	/^     f29:	75 4a                	jne    f75 <malloc+0x7e>$/;"	l
f2a	grep.asm	/^ f2a:	48 8b 00             	mov    (%rax),%rax$/;"	l
f2a	ls.asm	/^     f2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f2b	prettyprint.asm	/^     f2b:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f2b	sh.asm	/^     f2b:	48 b8 d1 0d 00 00 00 	movabs $0xdd1,%rax$/;"	l
f2d	grep.asm	/^ f2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f2d	ls.asm	/^     f2d:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f2d	usertests.asm	/^     f2d:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f3	ls.asm	/^      f3:	ff d0                	callq  *%rax$/;"	l
f3	sh.asm	/^      f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f3	stressfs.asm	/^  f3:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
f31	grep.asm	/^ f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f32	prettyprint.asm	/^     f32:	00 00 00 $/;"	l
f32	sh.asm	/^     f32:	00 00 00 $/;"	l
f34	ls.asm	/^     f34:	00 00 00 $/;"	l
f34	usertests.asm	/^     f34:	00 00 00 $/;"	l
f35	grep.asm	/^ f35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f35	prettyprint.asm	/^     f35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f35	sh.asm	/^     f35:	ff d0                	callq  *%rax$/;"	l
f37	ls.asm	/^     f37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f37	sh.asm	/^     f37:	e9 57 01 00 00       	jmpq   1093 <parseexec+0x1ae>$/;"	l
f37	usertests.asm	/^     f37:	ff d2                	callq  *%rdx$/;"	l
f38	grep.asm	/^ f38:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f39	prettyprint.asm	/^     f39:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f39	usertests.asm	/^     f39:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
f3a	ls.asm	/^     f3a:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f3b	grep.asm	/^ f3b:	72 65                	jb     fa2 <malloc+0xfa>$/;"	l
f3c	sh.asm	/^     f3c:	48 b8 9d 05 00 00 00 	movabs $0x59d,%rax$/;"	l
f3d	grep.asm	/^ f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4	echo.asm	/^  f4:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
f4	forktest.asm	/^  f4:	7e cc                	jle    c2 <forktest+0x31>$/;"	l
f4	ln.asm	/^  f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
f4	mkdir.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	rm.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	zombie.asm	/^  f4:	0f b6 c0             	movzbl %al,%eax$/;"	l
f40	prettyprint.asm	/^     f40:	00 00 00 $/;"	l
f40	usertests.asm	/^     f40:	00 00 00 $/;"	l
f41	grep.asm	/^ f41:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f41	ls.asm	/^     f41:	00 00 00 $/;"	l
f43	prettyprint.asm	/^     f43:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f43	sh.asm	/^     f43:	00 00 00 $/;"	l
f43	usertests.asm	/^     f43:	ff d0                	callq  *%rax$/;"	l
f44	grep.asm	/^ f44:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f44	ls.asm	/^     f44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f45	usertests.asm	/^     f45:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f46	sh.asm	/^     f46:	ff d0                	callq  *%rax$/;"	l
f47	grep.asm	/^ f47:	75 10                	jne    f59 <malloc+0xb1>$/;"	l
f47	prettyprint.asm	/^     f47:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f48	sh.asm	/^     f48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f49	grep.asm	/^ f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4a	prettyprint.asm	/^     f4a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f4b	ls.asm	/^     f4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	sh.asm	/^     f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	usertests.asm	/^     f4c:	00 00 00 $/;"	l
f4d	grep.asm	/^ f4d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f4f	ls.asm	/^     f4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
f4f	usertests.asm	/^     f4f:	8b 00                	mov    (%rax),%eax$/;"	l
f5	cat.asm	/^  f5:	e9 a0 00 00 00       	jmpq   19a <main+0xde>$/;"	l
f5	eager_mmap.asm	/^  f5:	48 bf 57 0e 00 00 00 	movabs $0xe57,%rdi$/;"	l
f5	init.asm	/^  f5:	48 bf fe 0c 00 00 00 	movabs $0xcfe,%rdi$/;"	l
f5	kill.asm	/^  f5:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
f5	lazy_mmap.asm	/^  f5:	48 bf 57 0e 00 00 00 	movabs $0xe57,%rdi$/;"	l
f5	ls.asm	/^      f5:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
f5	prettyprint.asm	/^      f5:	e9 d0 00 00 00       	jmpq   1ca <main+0x1ca>$/;"	l
f50	grep.asm	/^ f50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f50	sh.asm	/^     f50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
f51	prettyprint.asm	/^     f51:	00 00 00 $/;"	l
f51	usertests.asm	/^     f51:	48 be ba 6c 00 00 00 	movabs $0x6cba,%rsi$/;"	l
f52	ls.asm	/^     f52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f54	grep.asm	/^ f54:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f54	prettyprint.asm	/^     f54:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f54	sh.asm	/^     f54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f56	ls.asm	/^     f56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f57	grep.asm	/^ f57:	eb 2e                	jmp    f87 <malloc+0xdf>$/;"	l
f57	prettyprint.asm	/^     f57:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f58	usertests.asm	/^     f58:	00 00 00 $/;"	l
f59	grep.asm	/^ f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f5a	ls.asm	/^     f5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5b	sh.asm	/^     f5b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f5b	usertests.asm	/^     f5b:	89 c7                	mov    %eax,%edi$/;"	l
f5d	grep.asm	/^ f5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5d	ls.asm	/^     f5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f5d	usertests.asm	/^     f5d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f5e	prettyprint.asm	/^     f5e:	00 00 00 $/;"	l
f5f	sh.asm	/^     f5f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
f6	bad_mmap.asm	/^  f6:	00 00 00 $/;"	l
f6	forktest.asm	/^  f6:	eb 01                	jmp    f9 <forktest+0x68>$/;"	l
f6	grep.asm	/^  f6:	48 ba 20 13 00 00 00 	movabs $0x1320,%rdx$/;"	l
f6	wc.asm	/^  f6:	48 ba 4a 07 00 00 00 	movabs $0x74a,%rdx$/;"	l
f60	grep.asm	/^ f60:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f60	ls.asm	/^     f60:	72 65                	jb     fc7 <malloc+0xfa>$/;"	l
f61	prettyprint.asm	/^     f61:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f62	ls.asm	/^     f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f62	usertests.asm	/^     f62:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f63	grep.asm	/^ f63:	89 c2                	mov    %eax,%edx$/;"	l
f63	sh.asm	/^     f63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f64	prettyprint.asm	/^     f64:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f65	grep.asm	/^ f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f66	ls.asm	/^     f66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f67	sh.asm	/^     f67:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f69	grep.asm	/^ f69:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f69	ls.asm	/^     f69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f69	usertests.asm	/^     f69:	00 00 00 $/;"	l
f6a	sh.asm	/^     f6a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f6b	prettyprint.asm	/^     f6b:	00 00 00 $/;"	l
f6c	grep.asm	/^ f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6c	ls.asm	/^     f6c:	75 10                	jne    f7e <malloc+0xb1>$/;"	l
f6c	usertests.asm	/^     f6c:	ff d2                	callq  *%rdx$/;"	l
f6d	sh.asm	/^     f6d:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
f6e	ls.asm	/^     f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6e	prettyprint.asm	/^     f6e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f6e	usertests.asm	/^     f6e:	90                   	nop$/;"	l
f6f	usertests.asm	/^     f6f:	5d                   	pop    %rbp$/;"	l
f7	echo.asm	/^  f7:	88 10                	mov    %dl,(%rax)$/;"	l
f7	sh.asm	/^      f7:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
f7	zombie.asm	/^  f7:	29 c2                	sub    %eax,%edx$/;"	l
f70	grep.asm	/^ f70:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f70	usertests.asm	/^     f70:	c3                   	retq   $/;"	l
f71	usertests.asm	/^     f71:	55                   	push   %rbp$/;"	l
f72	ls.asm	/^     f72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f72	usertests.asm	/^     f72:	48 89 e5             	mov    %rsp,%rbp$/;"	l
f73	grep.asm	/^ f73:	89 c0                	mov    %eax,%eax$/;"	l
f74	sh.asm	/^     f74:	00 00 00 $/;"	l
f75	grep.asm	/^ f75:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f75	ls.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	prettyprint.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	usertests.asm	/^     f75:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f77	sh.asm	/^     f77:	ff d0                	callq  *%rax$/;"	l
f79	grep.asm	/^ f79:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f79	ls.asm	/^     f79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f79	prettyprint.asm	/^     f79:	48 8b 00             	mov    (%rax),%rax$/;"	l
f79	sh.asm	/^     f79:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f7c	ls.asm	/^     f7c:	eb 2e                	jmp    fac <malloc+0xdf>$/;"	l
f7c	prettyprint.asm	/^     f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f7c	usertests.asm	/^     f7c:	00 00 00 $/;"	l
f7d	grep.asm	/^ f7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7d	sh.asm	/^     f7d:	e9 b4 00 00 00       	jmpq   1036 <parseexec+0x151>$/;"	l
f7e	ls.asm	/^     f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7f	usertests.asm	/^     f7f:	8b 00                	mov    (%rax),%eax$/;"	l
f8	divide.asm	/^  f8:	00 00 00 $/;"	l
f8	forktest.asm	/^  f8:	90                   	nop$/;"	l
f8	ln.asm	/^  f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
f8	mkdir.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	rm.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	stressfs.asm	/^  f8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f8	usertests.asm	/^      f8:	00 00 00 $/;"	l
f80	prettyprint.asm	/^     f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f81	grep.asm	/^ f81:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
f81	usertests.asm	/^     f81:	48 be c9 6c 00 00 00 	movabs $0x6cc9,%rsi$/;"	l
f82	ls.asm	/^     f82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f82	sh.asm	/^     f82:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
f84	grep.asm	/^ f84:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f84	prettyprint.asm	/^     f84:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f85	ls.asm	/^     f85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f86	sh.asm	/^     f86:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx$/;"	l
f87	grep.asm	/^ f87:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
f87	prettyprint.asm	/^     f87:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f88	ls.asm	/^     f88:	89 c2                	mov    %eax,%edx$/;"	l
f88	usertests.asm	/^     f88:	00 00 00 $/;"	l
f8a	ls.asm	/^     f8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8a	prettyprint.asm	/^     f8a:	72 65                	jb     ff1 <malloc+0xfa>$/;"	l
f8a	sh.asm	/^     f8a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi$/;"	l
f8b	usertests.asm	/^     f8b:	89 c7                	mov    %eax,%edi$/;"	l
f8c	prettyprint.asm	/^     f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8d	usertests.asm	/^     f8d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f8e	grep.asm	/^ f8e:	00 00 00 $/;"	l
f8e	ls.asm	/^     f8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f8e	sh.asm	/^     f8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f9	bad_mmap.asm	/^  f9:	48 b8 4e 05 00 00 00 	movabs $0x54e,%rax$/;"	l
f9	echo.asm	/^  f9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f9	forktest.asm	/^  f9:	81 7d fc e8 03 00 00 	cmpl   $0x3e8,-0x4(%rbp)$/;"	l
f9	imshow.asm	/^  f9:	74 25                	je     120 <main+0x120>$/;"	l
f9	kill.asm	/^  f9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f9	zombie.asm	/^  f9:	89 d0                	mov    %edx,%eax$/;"	l
f90	prettyprint.asm	/^     f90:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f91	grep.asm	/^ f91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f91	ls.asm	/^     f91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f92	sh.asm	/^     f92:	48 89 c7             	mov    %rax,%rdi$/;"	l
f92	usertests.asm	/^     f92:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f93	prettyprint.asm	/^     f93:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f95	grep.asm	/^ f95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f95	ls.asm	/^     f95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f95	sh.asm	/^     f95:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
f96	prettyprint.asm	/^     f96:	75 10                	jne    fa8 <malloc+0xb1>$/;"	l
f98	grep.asm	/^ f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f98	ls.asm	/^     f98:	89 c0                	mov    %eax,%eax$/;"	l
f98	prettyprint.asm	/^     f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f99	usertests.asm	/^     f99:	00 00 00 $/;"	l
f9a	ls.asm	/^     f9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f9c	grep.asm	/^ f9c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
f9c	prettyprint.asm	/^     f9c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f9c	sh.asm	/^     f9c:	00 00 00 $/;"	l
f9c	usertests.asm	/^     f9c:	ff d2                	callq  *%rdx$/;"	l
f9e	ls.asm	/^     f9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f9e	usertests.asm	/^     f9e:	48 be e0 87 00 00 00 	movabs $0x87e0,%rsi$/;"	l
f9f	prettyprint.asm	/^     f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f9f	sh.asm	/^     f9f:	ff d0                	callq  *%rax$/;"	l
fa	cat.asm	/^  fa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
fa	prettyprint.asm	/^      fa:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx$/;"	l
fa0	grep.asm	/^ fa0:	eb 4e                	jmp    ff0 <malloc+0x148>$/;"	l
fa1	sh.asm	/^     fa1:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
fa2	grep.asm	/^ fa2:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
fa2	ls.asm	/^     fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa3	prettyprint.asm	/^     fa3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fa4	sh.asm	/^     fa4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
fa5	usertests.asm	/^     fa5:	00 00 00 $/;"	l
fa6	ls.asm	/^     fa6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fa6	prettyprint.asm	/^     fa6:	eb 2e                	jmp    fd6 <malloc+0xdf>$/;"	l
fa8	prettyprint.asm	/^     fa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa8	sh.asm	/^     fa8:	0f 84 b6 00 00 00    	je     1064 <parseexec+0x17f>$/;"	l
fa8	usertests.asm	/^     fa8:	48 bf 70 68 00 00 00 	movabs $0x6870,%rdi$/;"	l
fa9	grep.asm	/^ fa9:	00 00 00 $/;"	l
fa9	ls.asm	/^     fa9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fac	grep.asm	/^ fac:	48 8b 00             	mov    (%rax),%rax$/;"	l
fac	ls.asm	/^     fac:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fac	prettyprint.asm	/^     fac:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fae	sh.asm	/^     fae:	83 7d e4 61          	cmpl   $0x61,-0x1c(%rbp)$/;"	l
faf	grep.asm	/^ faf:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
faf	prettyprint.asm	/^     faf:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
faf	usertests.asm	/^     faf:	00 00 00 $/;"	l
fb	divide.asm	/^  fb:	ff d0                	callq  *%rax$/;"	l
fb	imshow.asm	/^  fb:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
fb	mkdir.asm	/^  fb:	90                   	nop$/;"	l
fb	rm.asm	/^  fb:	90                   	nop$/;"	l
fb	sh.asm	/^      fb:	89 d6                	mov    %edx,%esi$/;"	l
fb	stressfs.asm	/^  fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	usertests.asm	/^      fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	zombie.asm	/^  fb:	c9                   	leaveq $/;"	l
fb2	prettyprint.asm	/^     fb2:	89 c2                	mov    %eax,%edx$/;"	l
fb2	sh.asm	/^     fb2:	74 16                	je     fca <parseexec+0xe5>$/;"	l
fb2	usertests.asm	/^     fb2:	48 b8 48 60 00 00 00 	movabs $0x6048,%rax$/;"	l
fb3	grep.asm	/^ fb3:	75 23                	jne    fd8 <malloc+0x130>$/;"	l
fb3	ls.asm	/^     fb3:	00 00 00 $/;"	l
fb4	prettyprint.asm	/^     fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fb4	sh.asm	/^     fb4:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
fb5	grep.asm	/^ fb5:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fb6	ls.asm	/^     fb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fb8	grep.asm	/^ fb8:	89 c7                	mov    %eax,%edi$/;"	l
fb8	prettyprint.asm	/^     fb8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fb9	usertests.asm	/^     fb9:	00 00 00 $/;"	l
fba	grep.asm	/^ fba:	48 b8 2f 0e 00 00 00 	movabs $0xe2f,%rax$/;"	l
fba	ls.asm	/^     fba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fbb	prettyprint.asm	/^     fbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbb	sh.asm	/^     fbb:	00 00 00 $/;"	l
fbc	usertests.asm	/^     fbc:	ff d0                	callq  *%rax$/;"	l
fbd	ls.asm	/^     fbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbe	sh.asm	/^     fbe:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
fbe	usertests.asm	/^     fbe:	85 c0                	test   %eax,%eax$/;"	l
fbf	prettyprint.asm	/^     fbf:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fc	eager_mmap.asm	/^  fc:	00 00 00 $/;"	l
fc	echo.asm	/^  fc:	84 c0                	test   %al,%al$/;"	l
fc	init.asm	/^  fc:	00 00 00 $/;"	l
fc	lazy_mmap.asm	/^  fc:	00 00 00 $/;"	l
fc	ln.asm	/^  fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fc	ls.asm	/^      fc:	00 00 00 $/;"	l
fc	mkdir.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	rm.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	zombie.asm	/^  fc:	c3                   	retq   $/;"	l
fc0	usertests.asm	/^     fc0:	79 35                	jns    ff7 <exectest+0x86>$/;"	l
fc1	grep.asm	/^ fc1:	00 00 00 $/;"	l
fc1	ls.asm	/^     fc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
fc2	prettyprint.asm	/^     fc2:	89 c0                	mov    %eax,%eax$/;"	l
fc2	usertests.asm	/^     fc2:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
fc4	grep.asm	/^ fc4:	ff d0                	callq  *%rax$/;"	l
fc4	prettyprint.asm	/^     fc4:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
fc5	ls.asm	/^     fc5:	eb 4e                	jmp    1015 <malloc+0x148>$/;"	l
fc5	sh.asm	/^     fc5:	00 00 00 $/;"	l
fc6	grep.asm	/^ fc6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fc7	ls.asm	/^     fc7:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fc8	prettyprint.asm	/^     fc8:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
fc8	sh.asm	/^     fc8:	ff d0                	callq  *%rax$/;"	l
fc9	usertests.asm	/^     fc9:	00 00 00 $/;"	l
fca	grep.asm	/^ fca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fca	sh.asm	/^     fca:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
fcc	prettyprint.asm	/^     fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fcc	usertests.asm	/^     fcc:	8b 00                	mov    (%rax),%eax$/;"	l
fce	ls.asm	/^     fce:	00 00 00 $/;"	l
fce	sh.asm	/^     fce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fce	usertests.asm	/^     fce:	48 be d4 6c 00 00 00 	movabs $0x6cd4,%rsi$/;"	l
fcf	grep.asm	/^ fcf:	75 07                	jne    fd8 <malloc+0x130>$/;"	l
fd	bad_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd:	48 98                	cltq   $/;"	l
fd	divide.asm	/^  fd:	81 7d f8 14 ae 47 01 	cmpl   $0x147ae14,-0x8(%rbp)$/;"	l
fd	eager_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd:	00 00 00 $/;"	l
fd	imshow.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
fd	lazy_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	c3                   	retq   $/;"	l
fd	prettyprint.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	c3                   	retq   $/;"	l
fd	sh.asm	/^      fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd:	48 b8 fb 04 00 00 00 	movabs $0x4fb,%rax$/;"	l
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^      fd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	00 00 00 $/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	55                   	push   %rbp$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	prettyprint.asm	/^     fd0:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fd1	grep.asm	/^ fd1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd1	ls.asm	/^     fd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
fd3	prettyprint.asm	/^     fd3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fd4	ls.asm	/^     fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
fd5	sh.asm	/^     fd5:	48 63 d2             	movslq %edx,%rdx$/;"	l
fd5	usertests.asm	/^     fd5:	00 00 00 $/;"	l
fd6	grep.asm	/^ fd6:	eb 18                	jmp    ff0 <malloc+0x148>$/;"	l
fd6	prettyprint.asm	/^     fd6:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
fd8	grep.asm	/^ fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fd8	ls.asm	/^     fd8:	75 23                	jne    ffd <malloc+0x130>$/;"	l
fd8	sh.asm	/^     fd8:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
fd8	usertests.asm	/^     fd8:	89 c7                	mov    %eax,%edi$/;"	l
fda	ls.asm	/^     fda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fda	usertests.asm	/^     fda:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdc	grep.asm	/^ fdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
fdd	ls.asm	/^     fdd:	89 c7                	mov    %eax,%edi$/;"	l
fdd	prettyprint.asm	/^     fdd:	00 00 00 $/;"	l
fdd	sh.asm	/^     fdd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
fdf	ls.asm	/^     fdf:	48 b8 54 0e 00 00 00 	movabs $0xe54,%rax$/;"	l
fdf	usertests.asm	/^     fdf:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
fe	echo.asm	/^  fe:	75 dc                	jne    dc <strcpy+0x19>$/;"	l
fe	imshow.asm	/^  fe:	89 c2                	mov    %eax,%edx$/;"	l
fe	mkdir.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	prettyprint.asm	/^      fe:	89 c8                	mov    %ecx,%eax$/;"	l
fe	rm.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	zombie.asm	/^  fe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
fe0	grep.asm	/^ fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe0	prettyprint.asm	/^     fe0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fe1	sh.asm	/^     fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fe4	grep.asm	/^ fe4:	48 8b 00             	mov    (%rax),%rax$/;"	l
fe4	prettyprint.asm	/^     fe4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fe5	sh.asm	/^     fe5:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
fe6	ls.asm	/^     fe6:	00 00 00 $/;"	l
fe6	usertests.asm	/^     fe6:	00 00 00 $/;"	l
fe7	grep.asm	/^ fe7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fe7	prettyprint.asm	/^     fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe8	sh.asm	/^     fe8:	48 63 c9             	movslq %ecx,%rcx$/;"	l
fe9	ls.asm	/^     fe9:	ff d0                	callq  *%rax$/;"	l
fe9	usertests.asm	/^     fe9:	ff d2                	callq  *%rdx$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	grep.asm	/^ feb:	e9 41 ff ff ff       	jmpq   f31 <malloc+0x89>$/;"	l
feb	ls.asm	/^     feb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
feb	prettyprint.asm	/^     feb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
feb	sh.asm	/^     feb:	48 83 c1 0a          	add    $0xa,%rcx$/;"	l
feb	usertests.asm	/^     feb:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
fef	ls.asm	/^     fef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fef	prettyprint.asm	/^     fef:	eb 4e                	jmp    103f <malloc+0x148>$/;"	l
fef	sh.asm	/^     fef:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
fetchaddr	syscall.c	/^fetchaddr(addr_t addr, addr_t *ip)$/;"	f
fetcharg	syscall.c	/^fetcharg(int n)$/;"	f	file:
fetchint	syscall.c	/^fetchint(addr_t addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(addr_t addr, char **pp)$/;"	f
ff	cat.asm	/^  ff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ff	eager_mmap.asm	/^  ff:	48 b8 96 05 00 00 00 	movabs $0x596,%rax$/;"	l
ff	init.asm	/^  ff:	48 b8 db 04 00 00 00 	movabs $0x4db,%rax$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	lazy_mmap.asm	/^  ff:	48 b8 96 05 00 00 00 	movabs $0x596,%rax$/;"	l
ff	ls.asm	/^      ff:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ff	mkdir.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff	rm.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff0	grep.asm	/^ ff0:	c9                   	leaveq $/;"	l
ff1	grep.asm	/^ ff1:	c3                   	retq   $/;"	l
ff1	prettyprint.asm	/^     ff1:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ff2	usertests.asm	/^     ff2:	00 00 00 $/;"	l
ff4	ls.asm	/^     ff4:	75 07                	jne    ffd <malloc+0x130>$/;"	l
ff4	sh.asm	/^     ff4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ff5	usertests.asm	/^     ff5:	ff d0                	callq  *%rax$/;"	l
ff6	ls.asm	/^     ff6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ff7	usertests.asm	/^     ff7:	90                   	nop$/;"	l
ff8	prettyprint.asm	/^     ff8:	00 00 00 $/;"	l
ff8	sh.asm	/^     ff8:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ff8	usertests.asm	/^     ff8:	5d                   	pop    %rbp$/;"	l
ff9	usertests.asm	/^     ff9:	c3                   	retq   $/;"	l
ffa	usertests.asm	/^     ffa:	55                   	push   %rbp$/;"	l
ffb	ls.asm	/^     ffb:	eb 18                	jmp    1015 <malloc+0x148>$/;"	l
ffb	prettyprint.asm	/^     ffb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffb	usertests.asm	/^     ffb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffc	sh.asm	/^     ffc:	7e 16                	jle    1014 <parseexec+0x12f>$/;"	l
ffd	ls.asm	/^     ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffe	prettyprint.asm	/^     ffe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffe	sh.asm	/^     ffe:	48 bf 49 1e 00 00 00 	movabs $0x1e49,%rdi$/;"	l
ffe	usertests.asm	/^     ffe:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000 <begin>:$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh$/;"	l
ffff800000100006	kernel.asm	/^ffff800000100006:	01 00                	add    %eax,(%rax)$/;"	l
ffff800000100008	kernel.asm	/^ffff800000100008:	fe 4f 51             	decb   0x51(%rdi)$/;"	l
ffff80000010000b	kernel.asm	/^ffff80000010000b:	e4 00                	in     $0x0,%al$/;"	l
ffff80000010000d	kernel.asm	/^ffff80000010000d:	00 10                	add    %dl,(%rax)$/;"	l
ffff80000010000f	kernel.asm	/^ffff80000010000f:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100011	kernel.asm	/^ffff800000100011:	00 10                	add    %dl,(%rax)$/;"	l
ffff800000100013	kernel.asm	/^ffff800000100013:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100015	kernel.asm	/^ffff800000100015:	e0 10                	loopne ffff800000100027 <mboot_entry+0x7>$/;"	l
ffff800000100017	kernel.asm	/^ffff800000100017:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100019	kernel.asm	/^ffff800000100019:	c0 11 00             	rclb   $0x0,(%rcx)$/;"	l
ffff80000010001c	kernel.asm	/^ffff80000010001c:	20 00                	and    %al,(%rax)$/;"	l
ffff80000010001e	kernel.asm	/^ffff80000010001e:	10 00                	adc    %al,(%rax)$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020 <mboot_entry>:$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020:	31 c0                	xor    %eax,%eax$/;"	l
ffff800000100022	kernel.asm	/^ffff800000100022:	bf 00 10 00 00       	mov    $0x1000,%edi$/;"	l
ffff800000100027	kernel.asm	/^ffff800000100027:	b9 00 20 00 00       	mov    $0x2000,%ecx$/;"	l
ffff80000010002c	kernel.asm	/^ffff80000010002c:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff80000010002e	kernel.asm	/^ffff80000010002e:	b8 03 20 00 00       	mov    $0x2003,%eax$/;"	l
ffff800000100033	kernel.asm	/^ffff800000100033:	a3 00 10 00 00 a3 00 	movabs %eax,0x1800a300001000$/;"	l
ffff80000010003a	kernel.asm	/^ffff80000010003a:	18 00 $/;"	l
ffff80000010003c	kernel.asm	/^ffff80000010003c:	00 b8 83 00 00 00    	add    %bh,0x83(%rax)$/;"	l
ffff800000100042	kernel.asm	/^ffff800000100042:	a3                   	.byte 0xa3$/;"	l
ffff800000100043	kernel.asm	/^ffff800000100043:	00 20                	add    %ah,(%rax)$/;"	l
ffff800000100045	kernel.asm	/^ffff800000100045:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100047	kernel.asm	/^ffff800000100047:	31 db                	xor    %ebx,%ebx$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049 <entry32mp>:$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049:	b8 00 10 00 00       	mov    $0x1000,%eax$/;"	l
ffff80000010004e	kernel.asm	/^ffff80000010004e:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff800000100051	kernel.asm	/^ffff800000100051:	0f 01 15 90 00 10 00 	lgdt   0x100090(%rip)        # ffff8000002000e8 <end+0xe40e8>$/;"	l
ffff800000100058	kernel.asm	/^ffff800000100058:	0f 20 e0             	mov    %cr4,%rax$/;"	l
ffff80000010005b	kernel.asm	/^ffff80000010005b:	0f ba e8 05          	bts    $0x5,%eax$/;"	l
ffff80000010005f	kernel.asm	/^ffff80000010005f:	0f 22 e0             	mov    %rax,%cr4$/;"	l
ffff800000100062	kernel.asm	/^ffff800000100062:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx$/;"	l
ffff800000100067	kernel.asm	/^ffff800000100067:	0f 32                	rdmsr  $/;"	l
ffff800000100069	kernel.asm	/^ffff800000100069:	0f ba e8 00          	bts    $0x0,%eax$/;"	l
ffff80000010006d	kernel.asm	/^ffff80000010006d:	0f ba e8 08          	bts    $0x8,%eax$/;"	l
ffff800000100071	kernel.asm	/^ffff800000100071:	0f 30                	wrmsr  $/;"	l
ffff800000100073	kernel.asm	/^ffff800000100073:	0f 20 c0             	mov    %cr0,%rax$/;"	l
ffff800000100076	kernel.asm	/^ffff800000100076:	0d 02 00 01 80       	or     $0x80010002,%eax$/;"	l
ffff80000010007b	kernel.asm	/^ffff80000010007b:	0f 22 c0             	mov    %rax,%cr0$/;"	l
ffff80000010007e	kernel.asm	/^ffff80000010007e:	ea                   	(bad)  $/;"	l
ffff80000010007f	kernel.asm	/^ffff80000010007f:	c0 00 10             	rolb   $0x10,(%rax)$/;"	l
ffff800000100082	kernel.asm	/^ffff800000100082:	00 08                	add    %cl,(%rax)$/;"	l
ffff800000100084	kernel.asm	/^ffff800000100084:	00 90 66 2e 0f 1f    	add    %dl,0x1f0f2e66(%rax)$/;"	l
ffff80000010008a	kernel.asm	/^ffff80000010008a:	84 00                	test   %al,(%rax)$/;"	l
ffff80000010008c	kernel.asm	/^ffff80000010008c:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090 <gdtr64>:$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090:	17                   	(bad)  $/;"	l
ffff800000100091	kernel.asm	/^ffff800000100091:	00 a0 00 10 00 00    	add    %ah,0x1000(%rax)$/;"	l
ffff800000100097	kernel.asm	/^ffff800000100097:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100099	kernel.asm	/^ffff800000100099:	00 66 0f             	add    %ah,0xf(%rsi)$/;"	l
ffff80000010009c	kernel.asm	/^ffff80000010009c:	1f                   	(bad)  $/;"	l
ffff80000010009d	kernel.asm	/^ffff80000010009d:	44 00 00             	add    %r8b,(%rax)$/;"	l
ffff8000001000a0	kernel.asm	/^ffff8000001000a0 <gdt64_begin>:$/;"	l
ffff8000001000ac	kernel.asm	/^ffff8000001000ac:	00 98 20 00 00 00    	add    %bl,0x20(%rax)$/;"	l
ffff8000001000b2	kernel.asm	/^ffff8000001000b2:	00 00                	add    %al,(%rax)$/;"	l
ffff8000001000b4	kernel.asm	/^ffff8000001000b4:	00                   	.byte 0x0$/;"	l
ffff8000001000b5	kernel.asm	/^ffff8000001000b5:	90                   	nop$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8 <gdt64_end>:$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)$/;"	l
ffff8000001000bf	kernel.asm	/^ffff8000001000bf:	00 $/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0 <entry64low>:$/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0:	48 b8 cc 00 10 00 00 	movabs $0xffff8000001000cc,%rax$/;"	l
ffff8000001000c7	kernel.asm	/^ffff8000001000c7:	80 ff ff $/;"	l
ffff8000001000ca	kernel.asm	/^ffff8000001000ca:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc <_start>:$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc:	48 31 c0             	xor    %rax,%rax$/;"	l
ffff8000001000cf	kernel.asm	/^ffff8000001000cf:	8e d0                	mov    %eax,%ss$/;"	l
ffff8000001000d1	kernel.asm	/^ffff8000001000d1:	8e d8                	mov    %eax,%ds$/;"	l
ffff8000001000d3	kernel.asm	/^ffff8000001000d3:	8e c0                	mov    %eax,%es$/;"	l
ffff8000001000d5	kernel.asm	/^ffff8000001000d5:	8e e0                	mov    %eax,%fs$/;"	l
ffff8000001000d7	kernel.asm	/^ffff8000001000d7:	8e e8                	mov    %eax,%gs$/;"	l
ffff8000001000d9	kernel.asm	/^ffff8000001000d9:	85 db                	test   %ebx,%ebx$/;"	l
ffff8000001000db	kernel.asm	/^ffff8000001000db:	75 14                	jne    ffff8000001000f1 <entry64mp>$/;"	l
ffff8000001000dd	kernel.asm	/^ffff8000001000dd:	48 b8 00 00 01 00 00 	movabs $0xffff800000010000,%rax$/;"	l
ffff8000001000e4	kernel.asm	/^ffff8000001000e4:	80 ff ff $/;"	l
ffff8000001000e7	kernel.asm	/^ffff8000001000e7:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff8000001000ea	kernel.asm	/^ffff8000001000ea:	e9 f0 51 00 00       	jmpq   ffff8000001052df <main>$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef <__deadloop>:$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef:	eb fe                	jmp    ffff8000001000ef <__deadloop>$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1 <entry64mp>:$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax$/;"	l
ffff8000001000f8	kernel.asm	/^ffff8000001000f8:	48 8b 60 f0          	mov    -0x10(%rax),%rsp$/;"	l
ffff8000001000fc	kernel.asm	/^ffff8000001000fc:	e9 0b 53 00 00       	jmpq   ffff80000010540c <mpenter>$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101 <wrmsr>:$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101:	48 89 f9             	mov    %rdi,%rcx$/;"	l
ffff800000100104	kernel.asm	/^ffff800000100104:	48 89 f0             	mov    %rsi,%rax$/;"	l
ffff800000100107	kernel.asm	/^ffff800000100107:	48 c1 ee 20          	shr    $0x20,%rsi$/;"	l
ffff80000010010b	kernel.asm	/^ffff80000010010b:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff80000010010e	kernel.asm	/^ffff80000010010e:	0f 30                	wrmsr  $/;"	l
ffff800000100110	kernel.asm	/^ffff800000100110:	c3                   	retq   $/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111 <ignore_sysret>:$/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111:	48 c7 c0 da ff ff ff 	mov    $0xffffffffffffffda,%rax$/;"	l
ffff800000100118	kernel.asm	/^ffff800000100118:	0f 07                	sysret $/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a <syscall_entry>:$/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a:	48 89 44 24 f8       	mov    %rax,-0x8(%rsp)$/;"	l
ffff80000010011f	kernel.asm	/^ffff80000010011f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000100126	kernel.asm	/^ffff800000100126:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010012a	kernel.asm	/^ffff80000010012a:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010012e	kernel.asm	/^ffff80000010012e:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000100134	kernel.asm	/^ffff800000100134:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff800000100138	kernel.asm	/^ffff800000100138:	48 89 20             	mov    %rsp,(%rax)$/;"	l
ffff80000010013b	kernel.asm	/^ffff80000010013b:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff80000010013e	kernel.asm	/^ffff80000010013e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100141	kernel.asm	/^ffff800000100141:	48 8b 40 f8          	mov    -0x8(%rax),%rax$/;"	l
ffff800000100145	kernel.asm	/^ffff800000100145:	41 53                	push   %r11$/;"	l
ffff800000100147	kernel.asm	/^ffff800000100147:	6a 23                	pushq  $0x23$/;"	l
ffff800000100149	kernel.asm	/^ffff800000100149:	51                   	push   %rcx$/;"	l
ffff80000010014a	kernel.asm	/^ffff80000010014a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010014c	kernel.asm	/^ffff80000010014c:	6a 40                	pushq  $0x40$/;"	l
ffff80000010014e	kernel.asm	/^ffff80000010014e:	e9 e9 91 00 00       	jmpq   ffff80000010933c <syscall_trap>$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153 <binit>:$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153:	55                   	push   %rbp$/;"	l
ffff800000100154	kernel.asm	/^ffff800000100154:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100157	kernel.asm	/^ffff800000100157:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010015b	kernel.asm	/^ffff80000010015b:	48 be c0 bb 10 00 00 	movabs $0xffff80000010bbc0,%rsi$/;"	l
ffff800000100162	kernel.asm	/^ffff800000100162:	80 ff ff $/;"	l
ffff800000100165	kernel.asm	/^ffff800000100165:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff80000010016c	kernel.asm	/^ffff80000010016c:	80 ff ff $/;"	l
ffff80000010016f	kernel.asm	/^ffff80000010016f:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000100176	kernel.asm	/^ffff800000100176:	80 ff ff $/;"	l
ffff800000100179	kernel.asm	/^ffff800000100179:	ff d0                	callq  *%rax$/;"	l
ffff80000010017b	kernel.asm	/^ffff80000010017b:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100182	kernel.asm	/^ffff800000100182:	80 ff ff $/;"	l
ffff800000100185	kernel.asm	/^ffff800000100185:	48 b9 08 31 11 00 00 	movabs $0xffff800000113108,%rcx$/;"	l
ffff80000010018c	kernel.asm	/^ffff80000010018c:	80 ff ff $/;"	l
ffff80000010018f	kernel.asm	/^ffff80000010018f:	48 89 88 a0 51 00 00 	mov    %rcx,0x51a0(%rax)$/;"	l
ffff800000100196	kernel.asm	/^ffff800000100196:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff80000010019d	kernel.asm	/^ffff80000010019d:	80 ff ff $/;"	l
ffff8000001001a0	kernel.asm	/^ffff8000001001a0:	48 b9 08 31 11 00 00 	movabs $0xffff800000113108,%rcx$/;"	l
ffff8000001001a7	kernel.asm	/^ffff8000001001a7:	80 ff ff $/;"	l
ffff8000001001aa	kernel.asm	/^ffff8000001001aa:	48 89 88 a8 51 00 00 	mov    %rcx,0x51a8(%rax)$/;"	l
ffff8000001001b1	kernel.asm	/^ffff8000001001b1:	48 b8 68 e0 10 00 00 	movabs $0xffff80000010e068,%rax$/;"	l
ffff8000001001b8	kernel.asm	/^ffff8000001001b8:	80 ff ff $/;"	l
ffff8000001001bb	kernel.asm	/^ffff8000001001bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001001bf	kernel.asm	/^ffff8000001001bf:	e9 8b 00 00 00       	jmpq   ffff80000010024f <binit+0xfc>$/;"	l
ffff8000001001c4	kernel.asm	/^ffff8000001001c4:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff8000001001cb	kernel.asm	/^ffff8000001001cb:	80 ff ff $/;"	l
ffff8000001001ce	kernel.asm	/^ffff8000001001ce:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff8000001001d5	kernel.asm	/^ffff8000001001d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001d9	kernel.asm	/^ffff8000001001d9:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff8000001001e0	kernel.asm	/^ffff8000001001e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001e4	kernel.asm	/^ffff8000001001e4:	48 be 08 31 11 00 00 	movabs $0xffff800000113108,%rsi$/;"	l
ffff8000001001eb	kernel.asm	/^ffff8000001001eb:	80 ff ff $/;"	l
ffff8000001001ee	kernel.asm	/^ffff8000001001ee:	48 89 b0 98 00 00 00 	mov    %rsi,0x98(%rax)$/;"	l
ffff8000001001f5	kernel.asm	/^ffff8000001001f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001f9	kernel.asm	/^ffff8000001001f9:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001001fd	kernel.asm	/^ffff8000001001fd:	48 be c7 bb 10 00 00 	movabs $0xffff80000010bbc7,%rsi$/;"	l
ffff800000100204	kernel.asm	/^ffff800000100204:	80 ff ff $/;"	l
ffff800000100207	kernel.asm	/^ffff800000100207:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010020a	kernel.asm	/^ffff80000010020a:	48 b8 c4 70 10 00 00 	movabs $0xffff8000001070c4,%rax$/;"	l
ffff800000100211	kernel.asm	/^ffff800000100211:	80 ff ff $/;"	l
ffff800000100214	kernel.asm	/^ffff800000100214:	ff d0                	callq  *%rax$/;"	l
ffff800000100216	kernel.asm	/^ffff800000100216:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff80000010021d	kernel.asm	/^ffff80000010021d:	80 ff ff $/;"	l
ffff800000100220	kernel.asm	/^ffff800000100220:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff800000100227	kernel.asm	/^ffff800000100227:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010022b	kernel.asm	/^ffff80000010022b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff800000100232	kernel.asm	/^ffff800000100232:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100239	kernel.asm	/^ffff800000100239:	80 ff ff $/;"	l
ffff80000010023c	kernel.asm	/^ffff80000010023c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100240	kernel.asm	/^ffff800000100240:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff800000100247	kernel.asm	/^ffff800000100247:	48 81 45 f8 b0 02 00 	addq   $0x2b0,-0x8(%rbp)$/;"	l
ffff80000010024e	kernel.asm	/^ffff80000010024e:	00 $/;"	l
ffff80000010024f	kernel.asm	/^ffff80000010024f:	48 b8 08 31 11 00 00 	movabs $0xffff800000113108,%rax$/;"	l
ffff800000100256	kernel.asm	/^ffff800000100256:	80 ff ff $/;"	l
ffff800000100259	kernel.asm	/^ffff800000100259:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff80000010025d	kernel.asm	/^ffff80000010025d:	0f 82 61 ff ff ff    	jb     ffff8000001001c4 <binit+0x71>$/;"	l
ffff800000100263	kernel.asm	/^ffff800000100263:	90                   	nop$/;"	l
ffff800000100264	kernel.asm	/^ffff800000100264:	c9                   	leaveq $/;"	l
ffff800000100265	kernel.asm	/^ffff800000100265:	c3                   	retq   $/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266 <bget>:$/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266:	55                   	push   %rbp$/;"	l
ffff800000100267	kernel.asm	/^ffff800000100267:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010026a	kernel.asm	/^ffff80000010026a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010026e	kernel.asm	/^ffff80000010026e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100271	kernel.asm	/^ffff800000100271:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100274	kernel.asm	/^ffff800000100274:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff80000010027b	kernel.asm	/^ffff80000010027b:	80 ff ff $/;"	l
ffff80000010027e	kernel.asm	/^ffff80000010027e:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000100285	kernel.asm	/^ffff800000100285:	80 ff ff $/;"	l
ffff800000100288	kernel.asm	/^ffff800000100288:	ff d0                	callq  *%rax$/;"	l
ffff80000010028a	kernel.asm	/^ffff80000010028a:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100291	kernel.asm	/^ffff800000100291:	80 ff ff $/;"	l
ffff800000100294	kernel.asm	/^ffff800000100294:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff80000010029b	kernel.asm	/^ffff80000010029b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010029f	kernel.asm	/^ffff80000010029f:	eb 74                	jmp    ffff800000100315 <bget+0xaf>$/;"	l
ffff8000001002a1	kernel.asm	/^ffff8000001002a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002a5	kernel.asm	/^ffff8000001002a5:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001002a8	kernel.asm	/^ffff8000001002a8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff8000001002ab	kernel.asm	/^ffff8000001002ab:	75 59                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002ad	kernel.asm	/^ffff8000001002ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002b1	kernel.asm	/^ffff8000001002b1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001002b4	kernel.asm	/^ffff8000001002b4:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff8000001002b7	kernel.asm	/^ffff8000001002b7:	75 4d                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002b9	kernel.asm	/^ffff8000001002b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002bd	kernel.asm	/^ffff8000001002bd:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff8000001002c3	kernel.asm	/^ffff8000001002c3:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001002c6	kernel.asm	/^ffff8000001002c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ca	kernel.asm	/^ffff8000001002ca:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff8000001002d0	kernel.asm	/^ffff8000001002d0:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff8000001002d7	kernel.asm	/^ffff8000001002d7:	80 ff ff $/;"	l
ffff8000001002da	kernel.asm	/^ffff8000001002da:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001002e1	kernel.asm	/^ffff8000001002e1:	80 ff ff $/;"	l
ffff8000001002e4	kernel.asm	/^ffff8000001002e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001002e6	kernel.asm	/^ffff8000001002e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ea	kernel.asm	/^ffff8000001002ea:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001002ee	kernel.asm	/^ffff8000001002ee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001002f1	kernel.asm	/^ffff8000001002f1:	48 b8 19 71 10 00 00 	movabs $0xffff800000107119,%rax$/;"	l
ffff8000001002f8	kernel.asm	/^ffff8000001002f8:	80 ff ff $/;"	l
ffff8000001002fb	kernel.asm	/^ffff8000001002fb:	ff d0                	callq  *%rax$/;"	l
ffff8000001002fd	kernel.asm	/^ffff8000001002fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100301	kernel.asm	/^ffff800000100301:	e9 f0 00 00 00       	jmpq   ffff8000001003f6 <bget+0x190>$/;"	l
ffff800000100306	kernel.asm	/^ffff800000100306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010030a	kernel.asm	/^ffff80000010030a:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100311	kernel.asm	/^ffff800000100311:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100315	kernel.asm	/^ffff800000100315:	48 b8 08 31 11 00 00 	movabs $0xffff800000113108,%rax$/;"	l
ffff80000010031c	kernel.asm	/^ffff80000010031c:	80 ff ff $/;"	l
ffff80000010031f	kernel.asm	/^ffff80000010031f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000100323	kernel.asm	/^ffff800000100323:	0f 85 78 ff ff ff    	jne    ffff8000001002a1 <bget+0x3b>$/;"	l
ffff800000100329	kernel.asm	/^ffff800000100329:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100330	kernel.asm	/^ffff800000100330:	80 ff ff $/;"	l
ffff800000100333	kernel.asm	/^ffff800000100333:	48 8b 80 a0 51 00 00 	mov    0x51a0(%rax),%rax$/;"	l
ffff80000010033a	kernel.asm	/^ffff80000010033a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010033e	kernel.asm	/^ffff80000010033e:	e9 89 00 00 00       	jmpq   ffff8000001003cc <bget+0x166>$/;"	l
ffff800000100343	kernel.asm	/^ffff800000100343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100347	kernel.asm	/^ffff800000100347:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010034d	kernel.asm	/^ffff80000010034d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010034f	kernel.asm	/^ffff80000010034f:	75 6c                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff800000100351	kernel.asm	/^ffff800000100351:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100355	kernel.asm	/^ffff800000100355:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100357	kernel.asm	/^ffff800000100357:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010035a	kernel.asm	/^ffff80000010035a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010035c	kernel.asm	/^ffff80000010035c:	75 5f                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff80000010035e	kernel.asm	/^ffff80000010035e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100362	kernel.asm	/^ffff800000100362:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100365	kernel.asm	/^ffff800000100365:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000100368	kernel.asm	/^ffff800000100368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010036c	kernel.asm	/^ffff80000010036c:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff80000010036f	kernel.asm	/^ffff80000010036f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000100372	kernel.asm	/^ffff800000100372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100376	kernel.asm	/^ffff800000100376:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff80000010037c	kernel.asm	/^ffff80000010037c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100380	kernel.asm	/^ffff800000100380:	c7 80 90 00 00 00 01 	movl   $0x1,0x90(%rax)$/;"	l
ffff800000100387	kernel.asm	/^ffff800000100387:	00 00 00 $/;"	l
ffff80000010038a	kernel.asm	/^ffff80000010038a:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff800000100391	kernel.asm	/^ffff800000100391:	80 ff ff $/;"	l
ffff800000100394	kernel.asm	/^ffff800000100394:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff80000010039b	kernel.asm	/^ffff80000010039b:	80 ff ff $/;"	l
ffff80000010039e	kernel.asm	/^ffff80000010039e:	ff d0                	callq  *%rax$/;"	l
ffff8000001003a0	kernel.asm	/^ffff8000001003a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003a4	kernel.asm	/^ffff8000001003a4:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001003a8	kernel.asm	/^ffff8000001003a8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001003ab	kernel.asm	/^ffff8000001003ab:	48 b8 19 71 10 00 00 	movabs $0xffff800000107119,%rax$/;"	l
ffff8000001003b2	kernel.asm	/^ffff8000001003b2:	80 ff ff $/;"	l
ffff8000001003b5	kernel.asm	/^ffff8000001003b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001003b7	kernel.asm	/^ffff8000001003b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003bb	kernel.asm	/^ffff8000001003bb:	eb 39                	jmp    ffff8000001003f6 <bget+0x190>$/;"	l
ffff8000001003bd	kernel.asm	/^ffff8000001003bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003c1	kernel.asm	/^ffff8000001003c1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff8000001003c8	kernel.asm	/^ffff8000001003c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001003cc	kernel.asm	/^ffff8000001003cc:	48 b8 08 31 11 00 00 	movabs $0xffff800000113108,%rax$/;"	l
ffff8000001003d3	kernel.asm	/^ffff8000001003d3:	80 ff ff $/;"	l
ffff8000001003d6	kernel.asm	/^ffff8000001003d6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff8000001003da	kernel.asm	/^ffff8000001003da:	0f 85 63 ff ff ff    	jne    ffff800000100343 <bget+0xdd>$/;"	l
ffff8000001003e0	kernel.asm	/^ffff8000001003e0:	48 bf ce bb 10 00 00 	movabs $0xffff80000010bbce,%rdi$/;"	l
ffff8000001003e7	kernel.asm	/^ffff8000001003e7:	80 ff ff $/;"	l
ffff8000001003ea	kernel.asm	/^ffff8000001003ea:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001003f1	kernel.asm	/^ffff8000001003f1:	80 ff ff $/;"	l
ffff8000001003f4	kernel.asm	/^ffff8000001003f4:	ff d0                	callq  *%rax$/;"	l
ffff8000001003f6	kernel.asm	/^ffff8000001003f6:	c9                   	leaveq $/;"	l
ffff8000001003f7	kernel.asm	/^ffff8000001003f7:	c3                   	retq   $/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8 <bread>:$/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8:	55                   	push   %rbp$/;"	l
ffff8000001003f9	kernel.asm	/^ffff8000001003f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001003fc	kernel.asm	/^ffff8000001003fc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100400	kernel.asm	/^ffff800000100400:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100403	kernel.asm	/^ffff800000100403:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100406	kernel.asm	/^ffff800000100406:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000100409	kernel.asm	/^ffff800000100409:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010040c	kernel.asm	/^ffff80000010040c:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010040e	kernel.asm	/^ffff80000010040e:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100410	kernel.asm	/^ffff800000100410:	48 b8 66 02 10 00 00 	movabs $0xffff800000100266,%rax$/;"	l
ffff800000100417	kernel.asm	/^ffff800000100417:	80 ff ff $/;"	l
ffff80000010041a	kernel.asm	/^ffff80000010041a:	ff d0                	callq  *%rax$/;"	l
ffff80000010041c	kernel.asm	/^ffff80000010041c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100420	kernel.asm	/^ffff800000100420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100424	kernel.asm	/^ffff800000100424:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100426	kernel.asm	/^ffff800000100426:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000100429	kernel.asm	/^ffff800000100429:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010042b	kernel.asm	/^ffff80000010042b:	75 13                	jne    ffff800000100440 <bread+0x48>$/;"	l
ffff80000010042d	kernel.asm	/^ffff80000010042d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100431	kernel.asm	/^ffff800000100431:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100434	kernel.asm	/^ffff800000100434:	48 b8 c8 3b 10 00 00 	movabs $0xffff800000103bc8,%rax$/;"	l
ffff80000010043b	kernel.asm	/^ffff80000010043b:	80 ff ff $/;"	l
ffff80000010043e	kernel.asm	/^ffff80000010043e:	ff d0                	callq  *%rax$/;"	l
ffff800000100440	kernel.asm	/^ffff800000100440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100444	kernel.asm	/^ffff800000100444:	c9                   	leaveq $/;"	l
ffff800000100445	kernel.asm	/^ffff800000100445:	c3                   	retq   $/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446 <bwrite>:$/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446:	55                   	push   %rbp$/;"	l
ffff800000100447	kernel.asm	/^ffff800000100447:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010044a	kernel.asm	/^ffff80000010044a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010044e	kernel.asm	/^ffff80000010044e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000100452	kernel.asm	/^ffff800000100452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100456	kernel.asm	/^ffff800000100456:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010045a	kernel.asm	/^ffff80000010045a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010045d	kernel.asm	/^ffff80000010045d:	48 b8 04 72 10 00 00 	movabs $0xffff800000107204,%rax$/;"	l
ffff800000100464	kernel.asm	/^ffff800000100464:	80 ff ff $/;"	l
ffff800000100467	kernel.asm	/^ffff800000100467:	ff d0                	callq  *%rax$/;"	l
ffff800000100469	kernel.asm	/^ffff800000100469:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010046b	kernel.asm	/^ffff80000010046b:	75 16                	jne    ffff800000100483 <bwrite+0x3d>$/;"	l
ffff80000010046d	kernel.asm	/^ffff80000010046d:	48 bf df bb 10 00 00 	movabs $0xffff80000010bbdf,%rdi$/;"	l
ffff800000100474	kernel.asm	/^ffff800000100474:	80 ff ff $/;"	l
ffff800000100477	kernel.asm	/^ffff800000100477:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010047e	kernel.asm	/^ffff80000010047e:	80 ff ff $/;"	l
ffff800000100481	kernel.asm	/^ffff800000100481:	ff d0                	callq  *%rax$/;"	l
ffff800000100483	kernel.asm	/^ffff800000100483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100487	kernel.asm	/^ffff800000100487:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100489	kernel.asm	/^ffff800000100489:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff80000010048c	kernel.asm	/^ffff80000010048c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010048e	kernel.asm	/^ffff80000010048e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100492	kernel.asm	/^ffff800000100492:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000100494	kernel.asm	/^ffff800000100494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100498	kernel.asm	/^ffff800000100498:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010049b	kernel.asm	/^ffff80000010049b:	48 b8 c8 3b 10 00 00 	movabs $0xffff800000103bc8,%rax$/;"	l
ffff8000001004a2	kernel.asm	/^ffff8000001004a2:	80 ff ff $/;"	l
ffff8000001004a5	kernel.asm	/^ffff8000001004a5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004a7	kernel.asm	/^ffff8000001004a7:	90                   	nop$/;"	l
ffff8000001004a8	kernel.asm	/^ffff8000001004a8:	c9                   	leaveq $/;"	l
ffff8000001004a9	kernel.asm	/^ffff8000001004a9:	c3                   	retq   $/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa <brelse>:$/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa:	55                   	push   %rbp$/;"	l
ffff8000001004ab	kernel.asm	/^ffff8000001004ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001004ae	kernel.asm	/^ffff8000001004ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001004b2	kernel.asm	/^ffff8000001004b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001004b6	kernel.asm	/^ffff8000001004b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004ba	kernel.asm	/^ffff8000001004ba:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004be	kernel.asm	/^ffff8000001004be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004c1	kernel.asm	/^ffff8000001004c1:	48 b8 04 72 10 00 00 	movabs $0xffff800000107204,%rax$/;"	l
ffff8000001004c8	kernel.asm	/^ffff8000001004c8:	80 ff ff $/;"	l
ffff8000001004cb	kernel.asm	/^ffff8000001004cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001004cd	kernel.asm	/^ffff8000001004cd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001004cf	kernel.asm	/^ffff8000001004cf:	75 16                	jne    ffff8000001004e7 <brelse+0x3d>$/;"	l
ffff8000001004d1	kernel.asm	/^ffff8000001004d1:	48 bf e6 bb 10 00 00 	movabs $0xffff80000010bbe6,%rdi$/;"	l
ffff8000001004d8	kernel.asm	/^ffff8000001004d8:	80 ff ff $/;"	l
ffff8000001004db	kernel.asm	/^ffff8000001004db:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001004e2	kernel.asm	/^ffff8000001004e2:	80 ff ff $/;"	l
ffff8000001004e5	kernel.asm	/^ffff8000001004e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004e7	kernel.asm	/^ffff8000001004e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004eb	kernel.asm	/^ffff8000001004eb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004ef	kernel.asm	/^ffff8000001004ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004f2	kernel.asm	/^ffff8000001004f2:	48 b8 9f 71 10 00 00 	movabs $0xffff80000010719f,%rax$/;"	l
ffff8000001004f9	kernel.asm	/^ffff8000001004f9:	80 ff ff $/;"	l
ffff8000001004fc	kernel.asm	/^ffff8000001004fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001004fe	kernel.asm	/^ffff8000001004fe:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff800000100505	kernel.asm	/^ffff800000100505:	80 ff ff $/;"	l
ffff800000100508	kernel.asm	/^ffff800000100508:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff80000010050f	kernel.asm	/^ffff80000010050f:	80 ff ff $/;"	l
ffff800000100512	kernel.asm	/^ffff800000100512:	ff d0                	callq  *%rax$/;"	l
ffff800000100514	kernel.asm	/^ffff800000100514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100518	kernel.asm	/^ffff800000100518:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010051e	kernel.asm	/^ffff80000010051e:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100521	kernel.asm	/^ffff800000100521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100525	kernel.asm	/^ffff800000100525:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff80000010052b	kernel.asm	/^ffff80000010052b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010052f	kernel.asm	/^ffff80000010052f:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000100535	kernel.asm	/^ffff800000100535:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100537	kernel.asm	/^ffff800000100537:	0f 85 9c 00 00 00    	jne    ffff8000001005d9 <brelse+0x12f>$/;"	l
ffff80000010053d	kernel.asm	/^ffff80000010053d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100541	kernel.asm	/^ffff800000100541:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100548	kernel.asm	/^ffff800000100548:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010054c	kernel.asm	/^ffff80000010054c:	48 8b 92 98 00 00 00 	mov    0x98(%rdx),%rdx$/;"	l
ffff800000100553	kernel.asm	/^ffff800000100553:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff80000010055a	kernel.asm	/^ffff80000010055a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010055e	kernel.asm	/^ffff80000010055e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff800000100565	kernel.asm	/^ffff800000100565:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100569	kernel.asm	/^ffff800000100569:	48 8b 92 a0 00 00 00 	mov    0xa0(%rdx),%rdx$/;"	l
ffff800000100570	kernel.asm	/^ffff800000100570:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100577	kernel.asm	/^ffff800000100577:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff80000010057e	kernel.asm	/^ffff80000010057e:	80 ff ff $/;"	l
ffff800000100581	kernel.asm	/^ffff800000100581:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff800000100588	kernel.asm	/^ffff800000100588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010058c	kernel.asm	/^ffff80000010058c:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100593	kernel.asm	/^ffff800000100593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100597	kernel.asm	/^ffff800000100597:	48 b9 08 31 11 00 00 	movabs $0xffff800000113108,%rcx$/;"	l
ffff80000010059e	kernel.asm	/^ffff80000010059e:	80 ff ff $/;"	l
ffff8000001005a1	kernel.asm	/^ffff8000001005a1:	48 89 88 98 00 00 00 	mov    %rcx,0x98(%rax)$/;"	l
ffff8000001005a8	kernel.asm	/^ffff8000001005a8:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff8000001005af	kernel.asm	/^ffff8000001005af:	80 ff ff $/;"	l
ffff8000001005b2	kernel.asm	/^ffff8000001005b2:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff8000001005b9	kernel.asm	/^ffff8000001005b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005bd	kernel.asm	/^ffff8000001005bd:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff8000001005c4	kernel.asm	/^ffff8000001005c4:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff8000001005cb	kernel.asm	/^ffff8000001005cb:	80 ff ff $/;"	l
ffff8000001005ce	kernel.asm	/^ffff8000001005ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005d2	kernel.asm	/^ffff8000001005d2:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff8000001005d9	kernel.asm	/^ffff8000001005d9:	48 bf 00 e0 10 00 00 	movabs $0xffff80000010e000,%rdi$/;"	l
ffff8000001005e0	kernel.asm	/^ffff8000001005e0:	80 ff ff $/;"	l
ffff8000001005e3	kernel.asm	/^ffff8000001005e3:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001005ea	kernel.asm	/^ffff8000001005ea:	80 ff ff $/;"	l
ffff8000001005ed	kernel.asm	/^ffff8000001005ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001005ef	kernel.asm	/^ffff8000001005ef:	90                   	nop$/;"	l
ffff8000001005f0	kernel.asm	/^ffff8000001005f0:	c9                   	leaveq $/;"	l
ffff8000001005f1	kernel.asm	/^ffff8000001005f1:	c3                   	retq   $/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2 <inb>:$/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2:	55                   	push   %rbp$/;"	l
ffff8000001005f3	kernel.asm	/^ffff8000001005f3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001005f6	kernel.asm	/^ffff8000001005f6:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001005fa	kernel.asm	/^ffff8000001005fa:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001005fc	kernel.asm	/^ffff8000001005fc:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000100600	kernel.asm	/^ffff800000100600:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000100604	kernel.asm	/^ffff800000100604:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100606	kernel.asm	/^ffff800000100606:	ec                   	in     (%dx),%al$/;"	l
ffff800000100607	kernel.asm	/^ffff800000100607:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010060a	kernel.asm	/^ffff80000010060a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010060e	kernel.asm	/^ffff80000010060e:	c9                   	leaveq $/;"	l
ffff80000010060f	kernel.asm	/^ffff80000010060f:	c3                   	retq   $/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610 <outb>:$/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610:	55                   	push   %rbp$/;"	l
ffff800000100611	kernel.asm	/^ffff800000100611:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100614	kernel.asm	/^ffff800000100614:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000100618	kernel.asm	/^ffff800000100618:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010061a	kernel.asm	/^ffff80000010061a:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010061c	kernel.asm	/^ffff80000010061c:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000100620	kernel.asm	/^ffff800000100620:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000100623	kernel.asm	/^ffff800000100623:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000100627	kernel.asm	/^ffff800000100627:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff80000010062b	kernel.asm	/^ffff80000010062b:	ee                   	out    %al,(%dx)$/;"	l
ffff80000010062c	kernel.asm	/^ffff80000010062c:	90                   	nop$/;"	l
ffff80000010062d	kernel.asm	/^ffff80000010062d:	c9                   	leaveq $/;"	l
ffff80000010062e	kernel.asm	/^ffff80000010062e:	c3                   	retq   $/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f <lidt>:$/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f:	55                   	push   %rbp$/;"	l
ffff800000100630	kernel.asm	/^ffff800000100630:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100633	kernel.asm	/^ffff800000100633:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100637	kernel.asm	/^ffff800000100637:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010063b	kernel.asm	/^ffff80000010063b:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010063e	kernel.asm	/^ffff80000010063e:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000100641	kernel.asm	/^ffff800000100641:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100644	kernel.asm	/^ffff800000100644:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff800000100648	kernel.asm	/^ffff800000100648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010064c	kernel.asm	/^ffff80000010064c:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff800000100650	kernel.asm	/^ffff800000100650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100654	kernel.asm	/^ffff800000100654:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff800000100658	kernel.asm	/^ffff800000100658:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010065c	kernel.asm	/^ffff80000010065c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100660	kernel.asm	/^ffff800000100660:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff800000100664	kernel.asm	/^ffff800000100664:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff800000100668	kernel.asm	/^ffff800000100668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010066c	kernel.asm	/^ffff80000010066c:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff800000100670	kernel.asm	/^ffff800000100670:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff800000100674	kernel.asm	/^ffff800000100674:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000100678	kernel.asm	/^ffff800000100678:	0f 01 18             	lidt   (%rax)$/;"	l
ffff80000010067b	kernel.asm	/^ffff80000010067b:	90                   	nop$/;"	l
ffff80000010067c	kernel.asm	/^ffff80000010067c:	c9                   	leaveq $/;"	l
ffff80000010067d	kernel.asm	/^ffff80000010067d:	c3                   	retq   $/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e <cli>:$/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e:	55                   	push   %rbp$/;"	l
ffff80000010067f	kernel.asm	/^ffff80000010067f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100682	kernel.asm	/^ffff800000100682:	fa                   	cli    $/;"	l
ffff800000100683	kernel.asm	/^ffff800000100683:	90                   	nop$/;"	l
ffff800000100684	kernel.asm	/^ffff800000100684:	5d                   	pop    %rbp$/;"	l
ffff800000100685	kernel.asm	/^ffff800000100685:	c3                   	retq   $/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686 <printptr>:$/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686:	55                   	push   %rbp$/;"	l
ffff800000100687	kernel.asm	/^ffff800000100687:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010068a	kernel.asm	/^ffff80000010068a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010068e	kernel.asm	/^ffff80000010068e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100692	kernel.asm	/^ffff800000100692:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100699	kernel.asm	/^ffff800000100699:	eb 33                	jmp    ffff8000001006ce <printptr+0x48>$/;"	l
ffff80000010069b	kernel.asm	/^ffff80000010069b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010069f	kernel.asm	/^ffff80000010069f:	48 c1 e8 3c          	shr    $0x3c,%rax$/;"	l
ffff8000001006a3	kernel.asm	/^ffff8000001006a3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001006a6	kernel.asm	/^ffff8000001006a6:	48 b8 00 d0 10 00 00 	movabs $0xffff80000010d000,%rax$/;"	l
ffff8000001006ad	kernel.asm	/^ffff8000001006ad:	80 ff ff $/;"	l
ffff8000001006b0	kernel.asm	/^ffff8000001006b0:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax$/;"	l
ffff8000001006b4	kernel.asm	/^ffff8000001006b4:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001006b7	kernel.asm	/^ffff8000001006b7:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001006b9	kernel.asm	/^ffff8000001006b9:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001006c0	kernel.asm	/^ffff8000001006c0:	80 ff ff $/;"	l
ffff8000001006c3	kernel.asm	/^ffff8000001006c3:	ff d0                	callq  *%rax$/;"	l
ffff8000001006c5	kernel.asm	/^ffff8000001006c5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001006c9	kernel.asm	/^ffff8000001006c9:	48 c1 65 e8 04       	shlq   $0x4,-0x18(%rbp)$/;"	l
ffff8000001006ce	kernel.asm	/^ffff8000001006ce:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001006d1	kernel.asm	/^ffff8000001006d1:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff8000001006d4	kernel.asm	/^ffff8000001006d4:	76 c5                	jbe    ffff80000010069b <printptr+0x15>$/;"	l
ffff8000001006d6	kernel.asm	/^ffff8000001006d6:	90                   	nop$/;"	l
ffff8000001006d7	kernel.asm	/^ffff8000001006d7:	c9                   	leaveq $/;"	l
ffff8000001006d8	kernel.asm	/^ffff8000001006d8:	c3                   	retq   $/;"	l
ffff8000001006d9	kernel.asm	/^ffff8000001006d9 <printint>:$/;"	l
ffff8000001006d9	kernel.asm	/^ffff8000001006d9:	55                   	push   %rbp$/;"	l
ffff8000001006da	kernel.asm	/^ffff8000001006da:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001006dd	kernel.asm	/^ffff8000001006dd:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001006e1	kernel.asm	/^ffff8000001006e1:	89 7d cc             	mov    %edi,-0x34(%rbp)$/;"	l
ffff8000001006e4	kernel.asm	/^ffff8000001006e4:	89 75 c8             	mov    %esi,-0x38(%rbp)$/;"	l
ffff8000001006e7	kernel.asm	/^ffff8000001006e7:	89 55 c4             	mov    %edx,-0x3c(%rbp)$/;"	l
ffff8000001006ea	kernel.asm	/^ffff8000001006ea:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff8000001006ee	kernel.asm	/^ffff8000001006ee:	74 1f                	je     ffff80000010070f <printint+0x36>$/;"	l
ffff8000001006f0	kernel.asm	/^ffff8000001006f0:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001006f3	kernel.asm	/^ffff8000001006f3:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
ffff8000001006f6	kernel.asm	/^ffff8000001006f6:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001006f9	kernel.asm	/^ffff8000001006f9:	89 45 c4             	mov    %eax,-0x3c(%rbp)$/;"	l
ffff8000001006fc	kernel.asm	/^ffff8000001006fc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100700	kernel.asm	/^ffff800000100700:	74 0d                	je     ffff80000010070f <printint+0x36>$/;"	l
ffff800000100702	kernel.asm	/^ffff800000100702:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000100705	kernel.asm	/^ffff800000100705:	f7 d8                	neg    %eax$/;"	l
ffff800000100707	kernel.asm	/^ffff800000100707:	48 98                	cltq   $/;"	l
ffff800000100709	kernel.asm	/^ffff800000100709:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010070d	kernel.asm	/^ffff80000010070d:	eb 09                	jmp    ffff800000100718 <printint+0x3f>$/;"	l
ffff80000010070f	kernel.asm	/^ffff80000010070f:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000100712	kernel.asm	/^ffff800000100712:	48 98                	cltq   $/;"	l
ffff800000100714	kernel.asm	/^ffff800000100714:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000100718	kernel.asm	/^ffff800000100718:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010071f	kernel.asm	/^ffff80000010071f:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100722	kernel.asm	/^ffff800000100722:	8d 41 01             	lea    0x1(%rcx),%eax$/;"	l
ffff800000100725	kernel.asm	/^ffff800000100725:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000100728	kernel.asm	/^ffff800000100728:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010072b	kernel.asm	/^ffff80000010072b:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff80000010072e	kernel.asm	/^ffff80000010072e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000100732	kernel.asm	/^ffff800000100732:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000100737	kernel.asm	/^ffff800000100737:	48 f7 f6             	div    %rsi$/;"	l
ffff80000010073a	kernel.asm	/^ffff80000010073a:	48 b8 00 d0 10 00 00 	movabs $0xffff80000010d000,%rax$/;"	l
ffff800000100741	kernel.asm	/^ffff800000100741:	80 ff ff $/;"	l
ffff800000100744	kernel.asm	/^ffff800000100744:	0f b6 14 10          	movzbl (%rax,%rdx,1),%edx$/;"	l
ffff800000100748	kernel.asm	/^ffff800000100748:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff80000010074b	kernel.asm	/^ffff80000010074b:	88 54 05 d0          	mov    %dl,-0x30(%rbp,%rax,1)$/;"	l
ffff80000010074f	kernel.asm	/^ffff80000010074f:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000100752	kernel.asm	/^ffff800000100752:	48 63 f8             	movslq %eax,%rdi$/;"	l
ffff800000100755	kernel.asm	/^ffff800000100755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000100759	kernel.asm	/^ffff800000100759:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010075e	kernel.asm	/^ffff80000010075e:	48 f7 f7             	div    %rdi$/;"	l
ffff800000100761	kernel.asm	/^ffff800000100761:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000100765	kernel.asm	/^ffff800000100765:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010076a	kernel.asm	/^ffff80000010076a:	75 b3                	jne    ffff80000010071f <printint+0x46>$/;"	l
ffff80000010076c	kernel.asm	/^ffff80000010076c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100770	kernel.asm	/^ffff800000100770:	74 2d                	je     ffff80000010079f <printint+0xc6>$/;"	l
ffff800000100772	kernel.asm	/^ffff800000100772:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100775	kernel.asm	/^ffff800000100775:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000100778	kernel.asm	/^ffff800000100778:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff80000010077b	kernel.asm	/^ffff80000010077b:	48 98                	cltq   $/;"	l
ffff80000010077d	kernel.asm	/^ffff80000010077d:	c6 44 05 d0 2d       	movb   $0x2d,-0x30(%rbp,%rax,1)$/;"	l
ffff800000100782	kernel.asm	/^ffff800000100782:	eb 1b                	jmp    ffff80000010079f <printint+0xc6>$/;"	l
ffff800000100784	kernel.asm	/^ffff800000100784:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100787	kernel.asm	/^ffff800000100787:	48 98                	cltq   $/;"	l
ffff800000100789	kernel.asm	/^ffff800000100789:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax$/;"	l
ffff80000010078e	kernel.asm	/^ffff80000010078e:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100791	kernel.asm	/^ffff800000100791:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100793	kernel.asm	/^ffff800000100793:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff80000010079a	kernel.asm	/^ffff80000010079a:	80 ff ff $/;"	l
ffff80000010079d	kernel.asm	/^ffff80000010079d:	ff d0                	callq  *%rax$/;"	l
ffff80000010079f	kernel.asm	/^ffff80000010079f:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001007a3	kernel.asm	/^ffff8000001007a3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001007a7	kernel.asm	/^ffff8000001007a7:	79 db                	jns    ffff800000100784 <printint+0xab>$/;"	l
ffff8000001007a9	kernel.asm	/^ffff8000001007a9:	90                   	nop$/;"	l
ffff8000001007aa	kernel.asm	/^ffff8000001007aa:	c9                   	leaveq $/;"	l
ffff8000001007ab	kernel.asm	/^ffff8000001007ab:	c3                   	retq   $/;"	l
ffff8000001007ac	kernel.asm	/^ffff8000001007ac <cprintf>:$/;"	l
ffff8000001007ac	kernel.asm	/^ffff8000001007ac:	55                   	push   %rbp$/;"	l
ffff8000001007ad	kernel.asm	/^ffff8000001007ad:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001007b0	kernel.asm	/^ffff8000001007b0:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp$/;"	l
ffff8000001007b7	kernel.asm	/^ffff8000001007b7:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)$/;"	l
ffff8000001007be	kernel.asm	/^ffff8000001007be:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)$/;"	l
ffff8000001007c5	kernel.asm	/^ffff8000001007c5:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)$/;"	l
ffff8000001007cc	kernel.asm	/^ffff8000001007cc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)$/;"	l
ffff8000001007d3	kernel.asm	/^ffff8000001007d3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)$/;"	l
ffff8000001007da	kernel.asm	/^ffff8000001007da:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)$/;"	l
ffff8000001007e1	kernel.asm	/^ffff8000001007e1:	84 c0                	test   %al,%al$/;"	l
ffff8000001007e3	kernel.asm	/^ffff8000001007e3:	74 20                	je     ffff800000100805 <cprintf+0x59>$/;"	l
ffff8000001007e5	kernel.asm	/^ffff8000001007e5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)$/;"	l
ffff8000001007e9	kernel.asm	/^ffff8000001007e9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)$/;"	l
ffff8000001007ed	kernel.asm	/^ffff8000001007ed:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)$/;"	l
ffff8000001007f1	kernel.asm	/^ffff8000001007f1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)$/;"	l
ffff8000001007f5	kernel.asm	/^ffff8000001007f5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)$/;"	l
ffff8000001007f9	kernel.asm	/^ffff8000001007f9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)$/;"	l
ffff8000001007fd	kernel.asm	/^ffff8000001007fd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)$/;"	l
ffff800000100801	kernel.asm	/^ffff800000100801:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)$/;"	l
ffff800000100805	kernel.asm	/^ffff800000100805:	c7 85 20 ff ff ff 08 	movl   $0x8,-0xe0(%rbp)$/;"	l
ffff80000010080c	kernel.asm	/^ffff80000010080c:	00 00 00 $/;"	l
ffff80000010080f	kernel.asm	/^ffff80000010080f:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
ffff800000100816	kernel.asm	/^ffff800000100816:	00 00 00 $/;"	l
ffff800000100819	kernel.asm	/^ffff800000100819:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
ffff80000010081d	kernel.asm	/^ffff80000010081d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
ffff800000100824	kernel.asm	/^ffff800000100824:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
ffff80000010082b	kernel.asm	/^ffff80000010082b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
ffff800000100832	kernel.asm	/^ffff800000100832:	48 b8 c0 34 11 00 00 	movabs $0xffff8000001134c0,%rax$/;"	l
ffff800000100839	kernel.asm	/^ffff800000100839:	80 ff ff $/;"	l
ffff80000010083c	kernel.asm	/^ffff80000010083c:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff80000010083f	kernel.asm	/^ffff80000010083f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
ffff800000100845	kernel.asm	/^ffff800000100845:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff80000010084c	kernel.asm	/^ffff80000010084c:	74 16                	je     ffff800000100864 <cprintf+0xb8>$/;"	l
ffff80000010084e	kernel.asm	/^ffff80000010084e:	48 bf c0 34 11 00 00 	movabs $0xffff8000001134c0,%rdi$/;"	l
ffff800000100855	kernel.asm	/^ffff800000100855:	80 ff ff $/;"	l
ffff800000100858	kernel.asm	/^ffff800000100858:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff80000010085f	kernel.asm	/^ffff80000010085f:	80 ff ff $/;"	l
ffff800000100862	kernel.asm	/^ffff800000100862:	ff d0                	callq  *%rax$/;"	l
ffff800000100864	kernel.asm	/^ffff800000100864:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)$/;"	l
ffff80000010086b	kernel.asm	/^ffff80000010086b:	00 $/;"	l
ffff80000010086c	kernel.asm	/^ffff80000010086c:	75 16                	jne    ffff800000100884 <cprintf+0xd8>$/;"	l
ffff80000010086e	kernel.asm	/^ffff80000010086e:	48 bf ed bb 10 00 00 	movabs $0xffff80000010bbed,%rdi$/;"	l
ffff800000100875	kernel.asm	/^ffff800000100875:	80 ff ff $/;"	l
ffff800000100878	kernel.asm	/^ffff800000100878:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010087f	kernel.asm	/^ffff80000010087f:	80 ff ff $/;"	l
ffff800000100882	kernel.asm	/^ffff800000100882:	ff d0                	callq  *%rax$/;"	l
ffff800000100884	kernel.asm	/^ffff800000100884:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)$/;"	l
ffff80000010088b	kernel.asm	/^ffff80000010088b:	00 00 00 $/;"	l
ffff80000010088e	kernel.asm	/^ffff80000010088e:	e9 83 02 00 00       	jmpq   ffff800000100b16 <cprintf+0x36a>$/;"	l
ffff800000100893	kernel.asm	/^ffff800000100893:	83 bd 38 ff ff ff 25 	cmpl   $0x25,-0xc8(%rbp)$/;"	l
ffff80000010089a	kernel.asm	/^ffff80000010089a:	74 19                	je     ffff8000001008b5 <cprintf+0x109>$/;"	l
ffff80000010089c	kernel.asm	/^ffff80000010089c:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff8000001008a2	kernel.asm	/^ffff8000001008a2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001008a4	kernel.asm	/^ffff8000001008a4:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001008ab	kernel.asm	/^ffff8000001008ab:	80 ff ff $/;"	l
ffff8000001008ae	kernel.asm	/^ffff8000001008ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001008b0	kernel.asm	/^ffff8000001008b0:	e9 5a 02 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff8000001008b5	kernel.asm	/^ffff8000001008b5:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff8000001008bc	kernel.asm	/^ffff8000001008bc:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff8000001008c2	kernel.asm	/^ffff8000001008c2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001008c5	kernel.asm	/^ffff8000001008c5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff8000001008cc	kernel.asm	/^ffff8000001008cc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001008cf	kernel.asm	/^ffff8000001008cf:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001008d2	kernel.asm	/^ffff8000001008d2:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001008d5	kernel.asm	/^ffff8000001008d5:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff8000001008da	kernel.asm	/^ffff8000001008da:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff8000001008e0	kernel.asm	/^ffff8000001008e0:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff8000001008e7	kernel.asm	/^ffff8000001008e7:	0f 84 5c 02 00 00    	je     ffff800000100b49 <cprintf+0x39d>$/;"	l
ffff8000001008ed	kernel.asm	/^ffff8000001008ed:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff8000001008f3	kernel.asm	/^ffff8000001008f3:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff8000001008f6	kernel.asm	/^ffff8000001008f6:	0f 84 e9 00 00 00    	je     ffff8000001009e5 <cprintf+0x239>$/;"	l
ffff8000001008fc	kernel.asm	/^ffff8000001008fc:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff8000001008ff	kernel.asm	/^ffff8000001008ff:	7f 13                	jg     ffff800000100914 <cprintf+0x168>$/;"	l
ffff800000100901	kernel.asm	/^ffff800000100901:	83 f8 25             	cmp    $0x25,%eax$/;"	l
ffff800000100904	kernel.asm	/^ffff800000100904:	0f 84 cc 01 00 00    	je     ffff800000100ad6 <cprintf+0x32a>$/;"	l
ffff80000010090a	kernel.asm	/^ffff80000010090a:	83 f8 64             	cmp    $0x64,%eax$/;"	l
ffff80000010090d	kernel.asm	/^ffff80000010090d:	74 18                	je     ffff800000100927 <cprintf+0x17b>$/;"	l
ffff80000010090f	kernel.asm	/^ffff80000010090f:	e9 d5 01 00 00       	jmpq   ffff800000100ae9 <cprintf+0x33d>$/;"	l
ffff800000100914	kernel.asm	/^ffff800000100914:	83 f8 73             	cmp    $0x73,%eax$/;"	l
ffff800000100917	kernel.asm	/^ffff800000100917:	0f 84 1f 01 00 00    	je     ffff800000100a3c <cprintf+0x290>$/;"	l
ffff80000010091d	kernel.asm	/^ffff80000010091d:	83 f8 78             	cmp    $0x78,%eax$/;"	l
ffff800000100920	kernel.asm	/^ffff800000100920:	74 64                	je     ffff800000100986 <cprintf+0x1da>$/;"	l
ffff800000100922	kernel.asm	/^ffff800000100922:	e9 c2 01 00 00       	jmpq   ffff800000100ae9 <cprintf+0x33d>$/;"	l
ffff800000100927	kernel.asm	/^ffff800000100927:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010092d	kernel.asm	/^ffff80000010092d:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff800000100930	kernel.asm	/^ffff800000100930:	73 23                	jae    ffff800000100955 <cprintf+0x1a9>$/;"	l
ffff800000100932	kernel.asm	/^ffff800000100932:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100939	kernel.asm	/^ffff800000100939:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010093f	kernel.asm	/^ffff80000010093f:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100941	kernel.asm	/^ffff800000100941:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100944	kernel.asm	/^ffff800000100944:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010094a	kernel.asm	/^ffff80000010094a:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff80000010094d	kernel.asm	/^ffff80000010094d:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100953	kernel.asm	/^ffff800000100953:	eb 12                	jmp    ffff800000100967 <cprintf+0x1bb>$/;"	l
ffff800000100955	kernel.asm	/^ffff800000100955:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff80000010095c	kernel.asm	/^ffff80000010095c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100960	kernel.asm	/^ffff800000100960:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100967	kernel.asm	/^ffff800000100967:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100969	kernel.asm	/^ffff800000100969:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010096e	kernel.asm	/^ffff80000010096e:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff800000100973	kernel.asm	/^ffff800000100973:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100975	kernel.asm	/^ffff800000100975:	48 b8 d9 06 10 00 00 	movabs $0xffff8000001006d9,%rax$/;"	l
ffff80000010097c	kernel.asm	/^ffff80000010097c:	80 ff ff $/;"	l
ffff80000010097f	kernel.asm	/^ffff80000010097f:	ff d0                	callq  *%rax$/;"	l
ffff800000100981	kernel.asm	/^ffff800000100981:	e9 89 01 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100986	kernel.asm	/^ffff800000100986:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010098c	kernel.asm	/^ffff80000010098c:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff80000010098f	kernel.asm	/^ffff80000010098f:	73 23                	jae    ffff8000001009b4 <cprintf+0x208>$/;"	l
ffff800000100991	kernel.asm	/^ffff800000100991:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100998	kernel.asm	/^ffff800000100998:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010099e	kernel.asm	/^ffff80000010099e:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001009a0	kernel.asm	/^ffff8000001009a0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001009a3	kernel.asm	/^ffff8000001009a3:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009a9	kernel.asm	/^ffff8000001009a9:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff8000001009ac	kernel.asm	/^ffff8000001009ac:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff8000001009b2	kernel.asm	/^ffff8000001009b2:	eb 12                	jmp    ffff8000001009c6 <cprintf+0x21a>$/;"	l
ffff8000001009b4	kernel.asm	/^ffff8000001009b4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff8000001009bb	kernel.asm	/^ffff8000001009bb:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff8000001009bf	kernel.asm	/^ffff8000001009bf:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff8000001009c6	kernel.asm	/^ffff8000001009c6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001009c8	kernel.asm	/^ffff8000001009c8:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001009cd	kernel.asm	/^ffff8000001009cd:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff8000001009d2	kernel.asm	/^ffff8000001009d2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001009d4	kernel.asm	/^ffff8000001009d4:	48 b8 d9 06 10 00 00 	movabs $0xffff8000001006d9,%rax$/;"	l
ffff8000001009db	kernel.asm	/^ffff8000001009db:	80 ff ff $/;"	l
ffff8000001009de	kernel.asm	/^ffff8000001009de:	ff d0                	callq  *%rax$/;"	l
ffff8000001009e0	kernel.asm	/^ffff8000001009e0:	e9 2a 01 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff8000001009e5	kernel.asm	/^ffff8000001009e5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff8000001009eb	kernel.asm	/^ffff8000001009eb:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff8000001009ee	kernel.asm	/^ffff8000001009ee:	73 23                	jae    ffff800000100a13 <cprintf+0x267>$/;"	l
ffff8000001009f0	kernel.asm	/^ffff8000001009f0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff8000001009f7	kernel.asm	/^ffff8000001009f7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009fd	kernel.asm	/^ffff8000001009fd:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001009ff	kernel.asm	/^ffff8000001009ff:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a02	kernel.asm	/^ffff800000100a02:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a08	kernel.asm	/^ffff800000100a08:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a0b	kernel.asm	/^ffff800000100a0b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a11	kernel.asm	/^ffff800000100a11:	eb 12                	jmp    ffff800000100a25 <cprintf+0x279>$/;"	l
ffff800000100a13	kernel.asm	/^ffff800000100a13:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a1a	kernel.asm	/^ffff800000100a1a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a1e	kernel.asm	/^ffff800000100a1e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a25	kernel.asm	/^ffff800000100a25:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a28	kernel.asm	/^ffff800000100a28:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100a2b	kernel.asm	/^ffff800000100a2b:	48 b8 86 06 10 00 00 	movabs $0xffff800000100686,%rax$/;"	l
ffff800000100a32	kernel.asm	/^ffff800000100a32:	80 ff ff $/;"	l
ffff800000100a35	kernel.asm	/^ffff800000100a35:	ff d0                	callq  *%rax$/;"	l
ffff800000100a37	kernel.asm	/^ffff800000100a37:	e9 d3 00 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100a3c	kernel.asm	/^ffff800000100a3c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff800000100a42	kernel.asm	/^ffff800000100a42:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff800000100a45	kernel.asm	/^ffff800000100a45:	73 23                	jae    ffff800000100a6a <cprintf+0x2be>$/;"	l
ffff800000100a47	kernel.asm	/^ffff800000100a47:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100a4e	kernel.asm	/^ffff800000100a4e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a54	kernel.asm	/^ffff800000100a54:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100a56	kernel.asm	/^ffff800000100a56:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a59	kernel.asm	/^ffff800000100a59:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a5f	kernel.asm	/^ffff800000100a5f:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a62	kernel.asm	/^ffff800000100a62:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a68	kernel.asm	/^ffff800000100a68:	eb 12                	jmp    ffff800000100a7c <cprintf+0x2d0>$/;"	l
ffff800000100a6a	kernel.asm	/^ffff800000100a6a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a71	kernel.asm	/^ffff800000100a71:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a75	kernel.asm	/^ffff800000100a75:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a7c	kernel.asm	/^ffff800000100a7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a7f	kernel.asm	/^ffff800000100a7f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100a86	kernel.asm	/^ffff800000100a86:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)$/;"	l
ffff800000100a8d	kernel.asm	/^ffff800000100a8d:	00 $/;"	l
ffff800000100a8e	kernel.asm	/^ffff800000100a8e:	75 36                	jne    ffff800000100ac6 <cprintf+0x31a>$/;"	l
ffff800000100a90	kernel.asm	/^ffff800000100a90:	48 b8 f6 bb 10 00 00 	movabs $0xffff80000010bbf6,%rax$/;"	l
ffff800000100a97	kernel.asm	/^ffff800000100a97:	80 ff ff $/;"	l
ffff800000100a9a	kernel.asm	/^ffff800000100a9a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100aa1	kernel.asm	/^ffff800000100aa1:	eb 23                	jmp    ffff800000100ac6 <cprintf+0x31a>$/;"	l
ffff800000100aa3	kernel.asm	/^ffff800000100aa3:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100aaa	kernel.asm	/^ffff800000100aaa:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100aad	kernel.asm	/^ffff800000100aad:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100ab0	kernel.asm	/^ffff800000100ab0:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ab2	kernel.asm	/^ffff800000100ab2:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100ab9	kernel.asm	/^ffff800000100ab9:	80 ff ff $/;"	l
ffff800000100abc	kernel.asm	/^ffff800000100abc:	ff d0                	callq  *%rax$/;"	l
ffff800000100abe	kernel.asm	/^ffff800000100abe:	48 83 85 40 ff ff ff 	addq   $0x1,-0xc0(%rbp)$/;"	l
ffff800000100ac5	kernel.asm	/^ffff800000100ac5:	01 $/;"	l
ffff800000100ac6	kernel.asm	/^ffff800000100ac6:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100acd	kernel.asm	/^ffff800000100acd:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100ad0	kernel.asm	/^ffff800000100ad0:	84 c0                	test   %al,%al$/;"	l
ffff800000100ad2	kernel.asm	/^ffff800000100ad2:	75 cf                	jne    ffff800000100aa3 <cprintf+0x2f7>$/;"	l
ffff800000100ad4	kernel.asm	/^ffff800000100ad4:	eb 39                	jmp    ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100ad6	kernel.asm	/^ffff800000100ad6:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100adb	kernel.asm	/^ffff800000100adb:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100ae2	kernel.asm	/^ffff800000100ae2:	80 ff ff $/;"	l
ffff800000100ae5	kernel.asm	/^ffff800000100ae5:	ff d0                	callq  *%rax$/;"	l
ffff800000100ae7	kernel.asm	/^ffff800000100ae7:	eb 26                	jmp    ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100ae9	kernel.asm	/^ffff800000100ae9:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100aee	kernel.asm	/^ffff800000100aee:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100af5	kernel.asm	/^ffff800000100af5:	80 ff ff $/;"	l
ffff800000100af8	kernel.asm	/^ffff800000100af8:	ff d0                	callq  *%rax$/;"	l
ffff800000100afa	kernel.asm	/^ffff800000100afa:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff800000100b00	kernel.asm	/^ffff800000100b00:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100b02	kernel.asm	/^ffff800000100b02:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100b09	kernel.asm	/^ffff800000100b09:	80 ff ff $/;"	l
ffff800000100b0c	kernel.asm	/^ffff800000100b0c:	ff d0                	callq  *%rax$/;"	l
ffff800000100b0e	kernel.asm	/^ffff800000100b0e:	90                   	nop$/;"	l
ffff800000100b0f	kernel.asm	/^ffff800000100b0f:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff800000100b16	kernel.asm	/^ffff800000100b16:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff800000100b1c	kernel.asm	/^ffff800000100b1c:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000100b1f	kernel.asm	/^ffff800000100b1f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff800000100b26	kernel.asm	/^ffff800000100b26:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100b29	kernel.asm	/^ffff800000100b29:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100b2c	kernel.asm	/^ffff800000100b2c:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100b2f	kernel.asm	/^ffff800000100b2f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000100b34	kernel.asm	/^ffff800000100b34:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff800000100b3a	kernel.asm	/^ffff800000100b3a:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff800000100b41	kernel.asm	/^ffff800000100b41:	0f 85 4c fd ff ff    	jne    ffff800000100893 <cprintf+0xe7>$/;"	l
ffff800000100b47	kernel.asm	/^ffff800000100b47:	eb 01                	jmp    ffff800000100b4a <cprintf+0x39e>$/;"	l
ffff800000100b49	kernel.asm	/^ffff800000100b49:	90                   	nop$/;"	l
ffff800000100b4a	kernel.asm	/^ffff800000100b4a:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff800000100b51	kernel.asm	/^ffff800000100b51:	74 16                	je     ffff800000100b69 <cprintf+0x3bd>$/;"	l
ffff800000100b53	kernel.asm	/^ffff800000100b53:	48 bf c0 34 11 00 00 	movabs $0xffff8000001134c0,%rdi$/;"	l
ffff800000100b5a	kernel.asm	/^ffff800000100b5a:	80 ff ff $/;"	l
ffff800000100b5d	kernel.asm	/^ffff800000100b5d:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000100b64	kernel.asm	/^ffff800000100b64:	80 ff ff $/;"	l
ffff800000100b67	kernel.asm	/^ffff800000100b67:	ff d0                	callq  *%rax$/;"	l
ffff800000100b69	kernel.asm	/^ffff800000100b69:	90                   	nop$/;"	l
ffff800000100b6a	kernel.asm	/^ffff800000100b6a:	c9                   	leaveq $/;"	l
ffff800000100b6b	kernel.asm	/^ffff800000100b6b:	c3                   	retq   $/;"	l
ffff800000100b6c	kernel.asm	/^ffff800000100b6c <panic>:$/;"	l
ffff800000100b6c	kernel.asm	/^ffff800000100b6c:	55                   	push   %rbp$/;"	l
ffff800000100b6d	kernel.asm	/^ffff800000100b6d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100b70	kernel.asm	/^ffff800000100b70:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff800000100b74	kernel.asm	/^ffff800000100b74:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)$/;"	l
ffff800000100b78	kernel.asm	/^ffff800000100b78:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100b7f	kernel.asm	/^ffff800000100b7f:	80 ff ff $/;"	l
ffff800000100b82	kernel.asm	/^ffff800000100b82:	ff d0                	callq  *%rax$/;"	l
ffff800000100b84	kernel.asm	/^ffff800000100b84:	48 b8 c0 34 11 00 00 	movabs $0xffff8000001134c0,%rax$/;"	l
ffff800000100b8b	kernel.asm	/^ffff800000100b8b:	80 ff ff $/;"	l
ffff800000100b8e	kernel.asm	/^ffff800000100b8e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff800000100b95	kernel.asm	/^ffff800000100b95:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000100b9c	kernel.asm	/^ffff800000100b9c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000100ba0	kernel.asm	/^ffff800000100ba0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100ba3	kernel.asm	/^ffff800000100ba3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100ba6	kernel.asm	/^ffff800000100ba6:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100ba8	kernel.asm	/^ffff800000100ba8:	48 bf fd bb 10 00 00 	movabs $0xffff80000010bbfd,%rdi$/;"	l
ffff800000100baf	kernel.asm	/^ffff800000100baf:	80 ff ff $/;"	l
ffff800000100bb2	kernel.asm	/^ffff800000100bb2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bb7	kernel.asm	/^ffff800000100bb7:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bbe	kernel.asm	/^ffff800000100bbe:	80 ff ff $/;"	l
ffff800000100bc1	kernel.asm	/^ffff800000100bc1:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bc3	kernel.asm	/^ffff800000100bc3:	48 8b 45 98          	mov    -0x68(%rbp),%rax$/;"	l
ffff800000100bc7	kernel.asm	/^ffff800000100bc7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100bca	kernel.asm	/^ffff800000100bca:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bcf	kernel.asm	/^ffff800000100bcf:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bd6	kernel.asm	/^ffff800000100bd6:	80 ff ff $/;"	l
ffff800000100bd9	kernel.asm	/^ffff800000100bd9:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bdb	kernel.asm	/^ffff800000100bdb:	48 bf 0c bc 10 00 00 	movabs $0xffff80000010bc0c,%rdi$/;"	l
ffff800000100be2	kernel.asm	/^ffff800000100be2:	80 ff ff $/;"	l
ffff800000100be5	kernel.asm	/^ffff800000100be5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bea	kernel.asm	/^ffff800000100bea:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bf1	kernel.asm	/^ffff800000100bf1:	80 ff ff $/;"	l
ffff800000100bf4	kernel.asm	/^ffff800000100bf4:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bf6	kernel.asm	/^ffff800000100bf6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx$/;"	l
ffff800000100bfa	kernel.asm	/^ffff800000100bfa:	48 8d 45 98          	lea    -0x68(%rbp),%rax$/;"	l
ffff800000100bfe	kernel.asm	/^ffff800000100bfe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000100c01	kernel.asm	/^ffff800000100c01:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100c04	kernel.asm	/^ffff800000100c04:	48 b8 d6 73 10 00 00 	movabs $0xffff8000001073d6,%rax$/;"	l
ffff800000100c0b	kernel.asm	/^ffff800000100c0b:	80 ff ff $/;"	l
ffff800000100c0e	kernel.asm	/^ffff800000100c0e:	ff d0                	callq  *%rax$/;"	l
ffff800000100c10	kernel.asm	/^ffff800000100c10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100c17	kernel.asm	/^ffff800000100c17:	eb 2c                	jmp    ffff800000100c45 <panic+0xd9>$/;"	l
ffff800000100c19	kernel.asm	/^ffff800000100c19:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100c1c	kernel.asm	/^ffff800000100c1c:	48 98                	cltq   $/;"	l
ffff800000100c1e	kernel.asm	/^ffff800000100c1e:	48 8b 44 c5 a0       	mov    -0x60(%rbp,%rax,8),%rax$/;"	l
ffff800000100c23	kernel.asm	/^ffff800000100c23:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000100c26	kernel.asm	/^ffff800000100c26:	48 bf 0e bc 10 00 00 	movabs $0xffff80000010bc0e,%rdi$/;"	l
ffff800000100c2d	kernel.asm	/^ffff800000100c2d:	80 ff ff $/;"	l
ffff800000100c30	kernel.asm	/^ffff800000100c30:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100c35	kernel.asm	/^ffff800000100c35:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100c3c	kernel.asm	/^ffff800000100c3c:	80 ff ff $/;"	l
ffff800000100c3f	kernel.asm	/^ffff800000100c3f:	ff d2                	callq  *%rdx$/;"	l
ffff800000100c41	kernel.asm	/^ffff800000100c41:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100c45	kernel.asm	/^ffff800000100c45:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000100c49	kernel.asm	/^ffff800000100c49:	7e ce                	jle    ffff800000100c19 <panic+0xad>$/;"	l
ffff800000100c4b	kernel.asm	/^ffff800000100c4b:	48 b8 b8 34 11 00 00 	movabs $0xffff8000001134b8,%rax$/;"	l
ffff800000100c52	kernel.asm	/^ffff800000100c52:	80 ff ff $/;"	l
ffff800000100c55	kernel.asm	/^ffff800000100c55:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000100c5b	kernel.asm	/^ffff800000100c5b:	eb fe                	jmp    ffff800000100c5b <panic+0xef>$/;"	l
ffff800000100c5d	kernel.asm	/^ffff800000100c5d <cgaputc>:$/;"	l
ffff800000100c5d	kernel.asm	/^ffff800000100c5d:	55                   	push   %rbp$/;"	l
ffff800000100c5e	kernel.asm	/^ffff800000100c5e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100c61	kernel.asm	/^ffff800000100c61:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100c65	kernel.asm	/^ffff800000100c65:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100c68	kernel.asm	/^ffff800000100c68:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100c6d	kernel.asm	/^ffff800000100c6d:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100c72	kernel.asm	/^ffff800000100c72:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100c79	kernel.asm	/^ffff800000100c79:	80 ff ff $/;"	l
ffff800000100c7c	kernel.asm	/^ffff800000100c7c:	ff d0                	callq  *%rax$/;"	l
ffff800000100c7e	kernel.asm	/^ffff800000100c7e:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100c83	kernel.asm	/^ffff800000100c83:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100c8a	kernel.asm	/^ffff800000100c8a:	80 ff ff $/;"	l
ffff800000100c8d	kernel.asm	/^ffff800000100c8d:	ff d0                	callq  *%rax$/;"	l
ffff800000100c8f	kernel.asm	/^ffff800000100c8f:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100c92	kernel.asm	/^ffff800000100c92:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000100c95	kernel.asm	/^ffff800000100c95:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000100c98	kernel.asm	/^ffff800000100c98:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100c9d	kernel.asm	/^ffff800000100c9d:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100ca2	kernel.asm	/^ffff800000100ca2:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100ca9	kernel.asm	/^ffff800000100ca9:	80 ff ff $/;"	l
ffff800000100cac	kernel.asm	/^ffff800000100cac:	ff d0                	callq  *%rax$/;"	l
ffff800000100cae	kernel.asm	/^ffff800000100cae:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100cb3	kernel.asm	/^ffff800000100cb3:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100cba	kernel.asm	/^ffff800000100cba:	80 ff ff $/;"	l
ffff800000100cbd	kernel.asm	/^ffff800000100cbd:	ff d0                	callq  *%rax$/;"	l
ffff800000100cbf	kernel.asm	/^ffff800000100cbf:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100cc2	kernel.asm	/^ffff800000100cc2:	09 45 fc             	or     %eax,-0x4(%rbp)$/;"	l
ffff800000100cc5	kernel.asm	/^ffff800000100cc5:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)$/;"	l
ffff800000100cc9	kernel.asm	/^ffff800000100cc9:	75 30                	jne    ffff800000100cfb <cgaputc+0x9e>$/;"	l
ffff800000100ccb	kernel.asm	/^ffff800000100ccb:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100cce	kernel.asm	/^ffff800000100cce:	ba 67 66 66 66       	mov    $0x66666667,%edx$/;"	l
ffff800000100cd3	kernel.asm	/^ffff800000100cd3:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100cd5	kernel.asm	/^ffff800000100cd5:	f7 ea                	imul   %edx$/;"	l
ffff800000100cd7	kernel.asm	/^ffff800000100cd7:	c1 fa 05             	sar    $0x5,%edx$/;"	l
ffff800000100cda	kernel.asm	/^ffff800000100cda:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100cdc	kernel.asm	/^ffff800000100cdc:	c1 f8 1f             	sar    $0x1f,%eax$/;"	l
ffff800000100cdf	kernel.asm	/^ffff800000100cdf:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000100ce1	kernel.asm	/^ffff800000100ce1:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000100ce3	kernel.asm	/^ffff800000100ce3:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000100ce6	kernel.asm	/^ffff800000100ce6:	01 d0                	add    %edx,%eax$/;"	l
ffff800000100ce8	kernel.asm	/^ffff800000100ce8:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000100ceb	kernel.asm	/^ffff800000100ceb:	29 c1                	sub    %eax,%ecx$/;"	l
ffff800000100ced	kernel.asm	/^ffff800000100ced:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000100cef	kernel.asm	/^ffff800000100cef:	b8 50 00 00 00       	mov    $0x50,%eax$/;"	l
ffff800000100cf4	kernel.asm	/^ffff800000100cf4:	29 d0                	sub    %edx,%eax$/;"	l
ffff800000100cf6	kernel.asm	/^ffff800000100cf6:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000100cf9	kernel.asm	/^ffff800000100cf9:	eb 3f                	jmp    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100cfb	kernel.asm	/^ffff800000100cfb:	81 7d ec 00 01 00 00 	cmpl   $0x100,-0x14(%rbp)$/;"	l
ffff800000100d02	kernel.asm	/^ffff800000100d02:	75 0c                	jne    ffff800000100d10 <cgaputc+0xb3>$/;"	l
ffff800000100d04	kernel.asm	/^ffff800000100d04:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100d08	kernel.asm	/^ffff800000100d08:	7e 30                	jle    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100d0a	kernel.asm	/^ffff800000100d0a:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100d0e	kernel.asm	/^ffff800000100d0e:	eb 2a                	jmp    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100d10	kernel.asm	/^ffff800000100d10:	48 b8 18 d0 10 00 00 	movabs $0xffff80000010d018,%rax$/;"	l
ffff800000100d17	kernel.asm	/^ffff800000100d17:	80 ff ff $/;"	l
ffff800000100d1a	kernel.asm	/^ffff800000100d1a:	48 8b 08             	mov    (%rax),%rcx$/;"	l
ffff800000100d1d	kernel.asm	/^ffff800000100d1d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100d20	kernel.asm	/^ffff800000100d20:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000100d23	kernel.asm	/^ffff800000100d23:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff800000100d26	kernel.asm	/^ffff800000100d26:	48 98                	cltq   $/;"	l
ffff800000100d28	kernel.asm	/^ffff800000100d28:	48 01 c0             	add    %rax,%rax$/;"	l
ffff800000100d2b	kernel.asm	/^ffff800000100d2b:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100d2e	kernel.asm	/^ffff800000100d2e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100d31	kernel.asm	/^ffff800000100d31:	0f b6 d2             	movzbl %dl,%edx$/;"	l
ffff800000100d34	kernel.asm	/^ffff800000100d34:	80 ce 07             	or     $0x7,%dh$/;"	l
ffff800000100d37	kernel.asm	/^ffff800000100d37:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000100d3a	kernel.asm	/^ffff800000100d3a:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%rbp)$/;"	l
ffff800000100d41	kernel.asm	/^ffff800000100d41:	7e 76                	jle    ffff800000100db9 <cgaputc+0x15c>$/;"	l
ffff800000100d43	kernel.asm	/^ffff800000100d43:	48 b8 18 d0 10 00 00 	movabs $0xffff80000010d018,%rax$/;"	l
ffff800000100d4a	kernel.asm	/^ffff800000100d4a:	80 ff ff $/;"	l
ffff800000100d4d	kernel.asm	/^ffff800000100d4d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d50	kernel.asm	/^ffff800000100d50:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff800000100d57	kernel.asm	/^ffff800000100d57:	48 b8 18 d0 10 00 00 	movabs $0xffff80000010d018,%rax$/;"	l
ffff800000100d5e	kernel.asm	/^ffff800000100d5e:	80 ff ff $/;"	l
ffff800000100d61	kernel.asm	/^ffff800000100d61:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d64	kernel.asm	/^ffff800000100d64:	ba 60 0e 00 00       	mov    $0xe60,%edx$/;"	l
ffff800000100d69	kernel.asm	/^ffff800000100d69:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000100d6c	kernel.asm	/^ffff800000100d6c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100d6f	kernel.asm	/^ffff800000100d6f:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000100d76	kernel.asm	/^ffff800000100d76:	80 ff ff $/;"	l
ffff800000100d79	kernel.asm	/^ffff800000100d79:	ff d0                	callq  *%rax$/;"	l
ffff800000100d7b	kernel.asm	/^ffff800000100d7b:	83 6d fc 50          	subl   $0x50,-0x4(%rbp)$/;"	l
ffff800000100d7f	kernel.asm	/^ffff800000100d7f:	b8 80 07 00 00       	mov    $0x780,%eax$/;"	l
ffff800000100d84	kernel.asm	/^ffff800000100d84:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000100d87	kernel.asm	/^ffff800000100d87:	48 98                	cltq   $/;"	l
ffff800000100d89	kernel.asm	/^ffff800000100d89:	8d 14 00             	lea    (%rax,%rax,1),%edx$/;"	l
ffff800000100d8c	kernel.asm	/^ffff800000100d8c:	48 b8 18 d0 10 00 00 	movabs $0xffff80000010d018,%rax$/;"	l
ffff800000100d93	kernel.asm	/^ffff800000100d93:	80 ff ff $/;"	l
ffff800000100d96	kernel.asm	/^ffff800000100d96:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d99	kernel.asm	/^ffff800000100d99:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100d9c	kernel.asm	/^ffff800000100d9c:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000100d9f	kernel.asm	/^ffff800000100d9f:	48 01 c9             	add    %rcx,%rcx$/;"	l
ffff800000100da2	kernel.asm	/^ffff800000100da2:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100da5	kernel.asm	/^ffff800000100da5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100daa	kernel.asm	/^ffff800000100daa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100dad	kernel.asm	/^ffff800000100dad:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff800000100db4	kernel.asm	/^ffff800000100db4:	80 ff ff $/;"	l
ffff800000100db7	kernel.asm	/^ffff800000100db7:	ff d0                	callq  *%rax$/;"	l
ffff800000100db9	kernel.asm	/^ffff800000100db9:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100dbe	kernel.asm	/^ffff800000100dbe:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100dc3	kernel.asm	/^ffff800000100dc3:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100dca	kernel.asm	/^ffff800000100dca:	80 ff ff $/;"	l
ffff800000100dcd	kernel.asm	/^ffff800000100dcd:	ff d0                	callq  *%rax$/;"	l
ffff800000100dcf	kernel.asm	/^ffff800000100dcf:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100dd2	kernel.asm	/^ffff800000100dd2:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff800000100dd5	kernel.asm	/^ffff800000100dd5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100dd8	kernel.asm	/^ffff800000100dd8:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100dda	kernel.asm	/^ffff800000100dda:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100ddf	kernel.asm	/^ffff800000100ddf:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100de6	kernel.asm	/^ffff800000100de6:	80 ff ff $/;"	l
ffff800000100de9	kernel.asm	/^ffff800000100de9:	ff d0                	callq  *%rax$/;"	l
ffff800000100deb	kernel.asm	/^ffff800000100deb:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100df0	kernel.asm	/^ffff800000100df0:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100df5	kernel.asm	/^ffff800000100df5:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100dfc	kernel.asm	/^ffff800000100dfc:	80 ff ff $/;"	l
ffff800000100dff	kernel.asm	/^ffff800000100dff:	ff d0                	callq  *%rax$/;"	l
ffff800000100e01	kernel.asm	/^ffff800000100e01:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100e04	kernel.asm	/^ffff800000100e04:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100e07	kernel.asm	/^ffff800000100e07:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100e09	kernel.asm	/^ffff800000100e09:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100e0e	kernel.asm	/^ffff800000100e0e:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100e15	kernel.asm	/^ffff800000100e15:	80 ff ff $/;"	l
ffff800000100e18	kernel.asm	/^ffff800000100e18:	ff d0                	callq  *%rax$/;"	l
ffff800000100e1a	kernel.asm	/^ffff800000100e1a:	48 b8 18 d0 10 00 00 	movabs $0xffff80000010d018,%rax$/;"	l
ffff800000100e21	kernel.asm	/^ffff800000100e21:	80 ff ff $/;"	l
ffff800000100e24	kernel.asm	/^ffff800000100e24:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100e27	kernel.asm	/^ffff800000100e27:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000100e2a	kernel.asm	/^ffff800000100e2a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000100e2d	kernel.asm	/^ffff800000100e2d:	48 01 d2             	add    %rdx,%rdx$/;"	l
ffff800000100e30	kernel.asm	/^ffff800000100e30:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100e33	kernel.asm	/^ffff800000100e33:	66 c7 00 20 07       	movw   $0x720,(%rax)$/;"	l
ffff800000100e38	kernel.asm	/^ffff800000100e38:	90                   	nop$/;"	l
ffff800000100e39	kernel.asm	/^ffff800000100e39:	c9                   	leaveq $/;"	l
ffff800000100e3a	kernel.asm	/^ffff800000100e3a:	c3                   	retq   $/;"	l
ffff800000100e3b	kernel.asm	/^ffff800000100e3b <consputc>:$/;"	l
ffff800000100e3b	kernel.asm	/^ffff800000100e3b:	55                   	push   %rbp$/;"	l
ffff800000100e3c	kernel.asm	/^ffff800000100e3c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100e3f	kernel.asm	/^ffff800000100e3f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000100e43	kernel.asm	/^ffff800000100e43:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000100e46	kernel.asm	/^ffff800000100e46:	48 b8 b8 34 11 00 00 	movabs $0xffff8000001134b8,%rax$/;"	l
ffff800000100e4d	kernel.asm	/^ffff800000100e4d:	80 ff ff $/;"	l
ffff800000100e50	kernel.asm	/^ffff800000100e50:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100e52	kernel.asm	/^ffff800000100e52:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100e54	kernel.asm	/^ffff800000100e54:	74 0e                	je     ffff800000100e64 <consputc+0x29>$/;"	l
ffff800000100e56	kernel.asm	/^ffff800000100e56:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100e5d	kernel.asm	/^ffff800000100e5d:	80 ff ff $/;"	l
ffff800000100e60	kernel.asm	/^ffff800000100e60:	ff d0                	callq  *%rax$/;"	l
ffff800000100e62	kernel.asm	/^ffff800000100e62:	eb fe                	jmp    ffff800000100e62 <consputc+0x27>$/;"	l
ffff800000100e64	kernel.asm	/^ffff800000100e64:	81 7d fc 00 01 00 00 	cmpl   $0x100,-0x4(%rbp)$/;"	l
ffff800000100e6b	kernel.asm	/^ffff800000100e6b:	75 35                	jne    ffff800000100ea2 <consputc+0x67>$/;"	l
ffff800000100e6d	kernel.asm	/^ffff800000100e6d:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100e72	kernel.asm	/^ffff800000100e72:	48 b8 8a 9b 10 00 00 	movabs $0xffff800000109b8a,%rax$/;"	l
ffff800000100e79	kernel.asm	/^ffff800000100e79:	80 ff ff $/;"	l
ffff800000100e7c	kernel.asm	/^ffff800000100e7c:	ff d0                	callq  *%rax$/;"	l
ffff800000100e7e	kernel.asm	/^ffff800000100e7e:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff800000100e83	kernel.asm	/^ffff800000100e83:	48 b8 8a 9b 10 00 00 	movabs $0xffff800000109b8a,%rax$/;"	l
ffff800000100e8a	kernel.asm	/^ffff800000100e8a:	80 ff ff $/;"	l
ffff800000100e8d	kernel.asm	/^ffff800000100e8d:	ff d0                	callq  *%rax$/;"	l
ffff800000100e8f	kernel.asm	/^ffff800000100e8f:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100e94	kernel.asm	/^ffff800000100e94:	48 b8 8a 9b 10 00 00 	movabs $0xffff800000109b8a,%rax$/;"	l
ffff800000100e9b	kernel.asm	/^ffff800000100e9b:	80 ff ff $/;"	l
ffff800000100e9e	kernel.asm	/^ffff800000100e9e:	ff d0                	callq  *%rax$/;"	l
ffff800000100ea0	kernel.asm	/^ffff800000100ea0:	eb 11                	jmp    ffff800000100eb3 <consputc+0x78>$/;"	l
ffff800000100ea2	kernel.asm	/^ffff800000100ea2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ea5	kernel.asm	/^ffff800000100ea5:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ea7	kernel.asm	/^ffff800000100ea7:	48 b8 8a 9b 10 00 00 	movabs $0xffff800000109b8a,%rax$/;"	l
ffff800000100eae	kernel.asm	/^ffff800000100eae:	80 ff ff $/;"	l
ffff800000100eb1	kernel.asm	/^ffff800000100eb1:	ff d0                	callq  *%rax$/;"	l
ffff800000100eb3	kernel.asm	/^ffff800000100eb3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100eb6	kernel.asm	/^ffff800000100eb6:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100eb8	kernel.asm	/^ffff800000100eb8:	48 b8 5d 0c 10 00 00 	movabs $0xffff800000100c5d,%rax$/;"	l
ffff800000100ebf	kernel.asm	/^ffff800000100ebf:	80 ff ff $/;"	l
ffff800000100ec2	kernel.asm	/^ffff800000100ec2:	ff d0                	callq  *%rax$/;"	l
ffff800000100ec4	kernel.asm	/^ffff800000100ec4:	90                   	nop$/;"	l
ffff800000100ec5	kernel.asm	/^ffff800000100ec5:	c9                   	leaveq $/;"	l
ffff800000100ec6	kernel.asm	/^ffff800000100ec6:	c3                   	retq   $/;"	l
ffff800000100ec7	kernel.asm	/^ffff800000100ec7 <consoleintr>:$/;"	l
ffff800000100ec7	kernel.asm	/^ffff800000100ec7:	55                   	push   %rbp$/;"	l
ffff800000100ec8	kernel.asm	/^ffff800000100ec8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100ecb	kernel.asm	/^ffff800000100ecb:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100ecf	kernel.asm	/^ffff800000100ecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100ed3	kernel.asm	/^ffff800000100ed3:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff800000100eda	kernel.asm	/^ffff800000100eda:	80 ff ff $/;"	l
ffff800000100edd	kernel.asm	/^ffff800000100edd:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000100ee4	kernel.asm	/^ffff800000100ee4:	80 ff ff $/;"	l
ffff800000100ee7	kernel.asm	/^ffff800000100ee7:	ff d0                	callq  *%rax$/;"	l
ffff800000100ee9	kernel.asm	/^ffff800000100ee9:	e9 58 02 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100eee	kernel.asm	/^ffff800000100eee:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ef1	kernel.asm	/^ffff800000100ef1:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100ef4	kernel.asm	/^ffff800000100ef4:	0f 84 8b 00 00 00    	je     ffff800000100f85 <consoleintr+0xbe>$/;"	l
ffff800000100efa	kernel.asm	/^ffff800000100efa:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100efd	kernel.asm	/^ffff800000100efd:	7f 13                	jg     ffff800000100f12 <consoleintr+0x4b>$/;"	l
ffff800000100eff	kernel.asm	/^ffff800000100eff:	83 f8 08             	cmp    $0x8,%eax$/;"	l
ffff800000100f02	kernel.asm	/^ffff800000100f02:	0f 84 db 00 00 00    	je     ffff800000100fe3 <consoleintr+0x11c>$/;"	l
ffff800000100f08	kernel.asm	/^ffff800000100f08:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000100f0b	kernel.asm	/^ffff800000100f0b:	74 33                	je     ffff800000100f40 <consoleintr+0x79>$/;"	l
ffff800000100f0d	kernel.asm	/^ffff800000100f0d:	e9 32 01 00 00       	jmpq   ffff800000101044 <consoleintr+0x17d>$/;"	l
ffff800000100f12	kernel.asm	/^ffff800000100f12:	83 f8 1a             	cmp    $0x1a,%eax$/;"	l
ffff800000100f15	kernel.asm	/^ffff800000100f15:	74 0e                	je     ffff800000100f25 <consoleintr+0x5e>$/;"	l
ffff800000100f17	kernel.asm	/^ffff800000100f17:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000100f1a	kernel.asm	/^ffff800000100f1a:	0f 84 c3 00 00 00    	je     ffff800000100fe3 <consoleintr+0x11c>$/;"	l
ffff800000100f20	kernel.asm	/^ffff800000100f20:	e9 1f 01 00 00       	jmpq   ffff800000101044 <consoleintr+0x17d>$/;"	l
ffff800000100f25	kernel.asm	/^ffff800000100f25:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100f2a	kernel.asm	/^ffff800000100f2a:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000100f2f	kernel.asm	/^ffff800000100f2f:	48 b8 2f 06 10 00 00 	movabs $0xffff80000010062f,%rax$/;"	l
ffff800000100f36	kernel.asm	/^ffff800000100f36:	80 ff ff $/;"	l
ffff800000100f39	kernel.asm	/^ffff800000100f39:	ff d0                	callq  *%rax$/;"	l
ffff800000100f3b	kernel.asm	/^ffff800000100f3b:	e9 06 02 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100f40	kernel.asm	/^ffff800000100f40:	48 b8 29 6f 10 00 00 	movabs $0xffff800000106f29,%rax$/;"	l
ffff800000100f47	kernel.asm	/^ffff800000100f47:	80 ff ff $/;"	l
ffff800000100f4a	kernel.asm	/^ffff800000100f4a:	ff d0                	callq  *%rax$/;"	l
ffff800000100f4c	kernel.asm	/^ffff800000100f4c:	e9 f5 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100f51	kernel.asm	/^ffff800000100f51:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100f58	kernel.asm	/^ffff800000100f58:	80 ff ff $/;"	l
ffff800000100f5b	kernel.asm	/^ffff800000100f5b:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100f61	kernel.asm	/^ffff800000100f61:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100f64	kernel.asm	/^ffff800000100f64:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100f6b	kernel.asm	/^ffff800000100f6b:	80 ff ff $/;"	l
ffff800000100f6e	kernel.asm	/^ffff800000100f6e:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff800000100f74	kernel.asm	/^ffff800000100f74:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000100f79	kernel.asm	/^ffff800000100f79:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100f80	kernel.asm	/^ffff800000100f80:	80 ff ff $/;"	l
ffff800000100f83	kernel.asm	/^ffff800000100f83:	ff d0                	callq  *%rax$/;"	l
ffff800000100f85	kernel.asm	/^ffff800000100f85:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100f8c	kernel.asm	/^ffff800000100f8c:	80 ff ff $/;"	l
ffff800000100f8f	kernel.asm	/^ffff800000100f8f:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000100f95	kernel.asm	/^ffff800000100f95:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100f9c	kernel.asm	/^ffff800000100f9c:	80 ff ff $/;"	l
ffff800000100f9f	kernel.asm	/^ffff800000100f9f:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff800000100fa5	kernel.asm	/^ffff800000100fa5:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000100fa7	kernel.asm	/^ffff800000100fa7:	0f 84 99 01 00 00    	je     ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100fad	kernel.asm	/^ffff800000100fad:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100fb4	kernel.asm	/^ffff800000100fb4:	80 ff ff $/;"	l
ffff800000100fb7	kernel.asm	/^ffff800000100fb7:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100fbd	kernel.asm	/^ffff800000100fbd:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100fc0	kernel.asm	/^ffff800000100fc0:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff800000100fc3	kernel.asm	/^ffff800000100fc3:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100fc5	kernel.asm	/^ffff800000100fc5:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100fcc	kernel.asm	/^ffff800000100fcc:	80 ff ff $/;"	l
ffff800000100fcf	kernel.asm	/^ffff800000100fcf:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100fd1	kernel.asm	/^ffff800000100fd1:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000100fd6	kernel.asm	/^ffff800000100fd6:	3c 0a                	cmp    $0xa,%al$/;"	l
ffff800000100fd8	kernel.asm	/^ffff800000100fd8:	0f 85 73 ff ff ff    	jne    ffff800000100f51 <consoleintr+0x8a>$/;"	l
ffff800000100fde	kernel.asm	/^ffff800000100fde:	e9 63 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100fe3	kernel.asm	/^ffff800000100fe3:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100fea	kernel.asm	/^ffff800000100fea:	80 ff ff $/;"	l
ffff800000100fed	kernel.asm	/^ffff800000100fed:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000100ff3	kernel.asm	/^ffff800000100ff3:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000100ffa	kernel.asm	/^ffff800000100ffa:	80 ff ff $/;"	l
ffff800000100ffd	kernel.asm	/^ffff800000100ffd:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff800000101003	kernel.asm	/^ffff800000101003:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000101005	kernel.asm	/^ffff800000101005:	0f 84 3b 01 00 00    	je     ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff80000010100b	kernel.asm	/^ffff80000010100b:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101012	kernel.asm	/^ffff800000101012:	80 ff ff $/;"	l
ffff800000101015	kernel.asm	/^ffff800000101015:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff80000010101b	kernel.asm	/^ffff80000010101b:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff80000010101e	kernel.asm	/^ffff80000010101e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101025	kernel.asm	/^ffff800000101025:	80 ff ff $/;"	l
ffff800000101028	kernel.asm	/^ffff800000101028:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff80000010102e	kernel.asm	/^ffff80000010102e:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000101033	kernel.asm	/^ffff800000101033:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff80000010103a	kernel.asm	/^ffff80000010103a:	80 ff ff $/;"	l
ffff80000010103d	kernel.asm	/^ffff80000010103d:	ff d0                	callq  *%rax$/;"	l
ffff80000010103f	kernel.asm	/^ffff80000010103f:	e9 02 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000101044	kernel.asm	/^ffff800000101044:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101048	kernel.asm	/^ffff800000101048:	0f 84 f7 00 00 00    	je     ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010104e	kernel.asm	/^ffff80000010104e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101055	kernel.asm	/^ffff800000101055:	80 ff ff $/;"	l
ffff800000101058	kernel.asm	/^ffff800000101058:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010105e	kernel.asm	/^ffff80000010105e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101065	kernel.asm	/^ffff800000101065:	80 ff ff $/;"	l
ffff800000101068	kernel.asm	/^ffff800000101068:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff80000010106e	kernel.asm	/^ffff80000010106e:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000101070	kernel.asm	/^ffff800000101070:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000101072	kernel.asm	/^ffff800000101072:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000101075	kernel.asm	/^ffff800000101075:	0f 87 ca 00 00 00    	ja     ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010107b	kernel.asm	/^ffff80000010107b:	83 7d fc 0d          	cmpl   $0xd,-0x4(%rbp)$/;"	l
ffff80000010107f	kernel.asm	/^ffff80000010107f:	74 05                	je     ffff800000101086 <consoleintr+0x1bf>$/;"	l
ffff800000101081	kernel.asm	/^ffff800000101081:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101084	kernel.asm	/^ffff800000101084:	eb 05                	jmp    ffff80000010108b <consoleintr+0x1c4>$/;"	l
ffff800000101086	kernel.asm	/^ffff800000101086:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
ffff80000010108b	kernel.asm	/^ffff80000010108b:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010108e	kernel.asm	/^ffff80000010108e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101095	kernel.asm	/^ffff800000101095:	80 ff ff $/;"	l
ffff800000101098	kernel.asm	/^ffff800000101098:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff80000010109e	kernel.asm	/^ffff80000010109e:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001010a1	kernel.asm	/^ffff8000001010a1:	48 ba c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdx$/;"	l
ffff8000001010a8	kernel.asm	/^ffff8000001010a8:	80 ff ff $/;"	l
ffff8000001010ab	kernel.asm	/^ffff8000001010ab:	89 8a f0 00 00 00    	mov    %ecx,0xf0(%rdx)$/;"	l
ffff8000001010b1	kernel.asm	/^ffff8000001010b1:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff8000001010b4	kernel.asm	/^ffff8000001010b4:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001010b6	kernel.asm	/^ffff8000001010b6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010b9	kernel.asm	/^ffff8000001010b9:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001010bb	kernel.asm	/^ffff8000001010bb:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff8000001010c2	kernel.asm	/^ffff8000001010c2:	80 ff ff $/;"	l
ffff8000001010c5	kernel.asm	/^ffff8000001010c5:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001010c7	kernel.asm	/^ffff8000001010c7:	88 4c 10 68          	mov    %cl,0x68(%rax,%rdx,1)$/;"	l
ffff8000001010cb	kernel.asm	/^ffff8000001010cb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010ce	kernel.asm	/^ffff8000001010ce:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001010d0	kernel.asm	/^ffff8000001010d0:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001010d7	kernel.asm	/^ffff8000001010d7:	80 ff ff $/;"	l
ffff8000001010da	kernel.asm	/^ffff8000001010da:	ff d0                	callq  *%rax$/;"	l
ffff8000001010dc	kernel.asm	/^ffff8000001010dc:	83 7d fc 0a          	cmpl   $0xa,-0x4(%rbp)$/;"	l
ffff8000001010e0	kernel.asm	/^ffff8000001010e0:	74 2d                	je     ffff80000010110f <consoleintr+0x248>$/;"	l
ffff8000001010e2	kernel.asm	/^ffff8000001010e2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)$/;"	l
ffff8000001010e6	kernel.asm	/^ffff8000001010e6:	74 27                	je     ffff80000010110f <consoleintr+0x248>$/;"	l
ffff8000001010e8	kernel.asm	/^ffff8000001010e8:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff8000001010ef	kernel.asm	/^ffff8000001010ef:	80 ff ff $/;"	l
ffff8000001010f2	kernel.asm	/^ffff8000001010f2:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff8000001010f8	kernel.asm	/^ffff8000001010f8:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff8000001010ff	kernel.asm	/^ffff8000001010ff:	80 ff ff $/;"	l
ffff800000101102	kernel.asm	/^ffff800000101102:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101108	kernel.asm	/^ffff800000101108:	83 e8 80             	sub    $0xffffff80,%eax$/;"	l
ffff80000010110b	kernel.asm	/^ffff80000010110b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010110d	kernel.asm	/^ffff80000010110d:	75 36                	jne    ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010110f	kernel.asm	/^ffff80000010110f:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101116	kernel.asm	/^ffff800000101116:	80 ff ff $/;"	l
ffff800000101119	kernel.asm	/^ffff800000101119:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010111f	kernel.asm	/^ffff80000010111f:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101126	kernel.asm	/^ffff800000101126:	80 ff ff $/;"	l
ffff800000101129	kernel.asm	/^ffff800000101129:	89 90 ec 00 00 00    	mov    %edx,0xec(%rax)$/;"	l
ffff80000010112f	kernel.asm	/^ffff80000010112f:	48 bf a8 34 11 00 00 	movabs $0xffff8000001134a8,%rdi$/;"	l
ffff800000101136	kernel.asm	/^ffff800000101136:	80 ff ff $/;"	l
ffff800000101139	kernel.asm	/^ffff800000101139:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000101140	kernel.asm	/^ffff800000101140:	80 ff ff $/;"	l
ffff800000101143	kernel.asm	/^ffff800000101143:	ff d0                	callq  *%rax$/;"	l
ffff800000101145	kernel.asm	/^ffff800000101145:	90                   	nop$/;"	l
ffff800000101146	kernel.asm	/^ffff800000101146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010114a	kernel.asm	/^ffff80000010114a:	ff d0                	callq  *%rax$/;"	l
ffff80000010114c	kernel.asm	/^ffff80000010114c:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010114f	kernel.asm	/^ffff80000010114f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101153	kernel.asm	/^ffff800000101153:	0f 89 95 fd ff ff    	jns    ffff800000100eee <consoleintr+0x27>$/;"	l
ffff800000101159	kernel.asm	/^ffff800000101159:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff800000101160	kernel.asm	/^ffff800000101160:	80 ff ff $/;"	l
ffff800000101163	kernel.asm	/^ffff800000101163:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff80000010116a	kernel.asm	/^ffff80000010116a:	80 ff ff $/;"	l
ffff80000010116d	kernel.asm	/^ffff80000010116d:	ff d0                	callq  *%rax$/;"	l
ffff80000010116f	kernel.asm	/^ffff80000010116f:	90                   	nop$/;"	l
ffff800000101170	kernel.asm	/^ffff800000101170:	c9                   	leaveq $/;"	l
ffff800000101171	kernel.asm	/^ffff800000101171:	c3                   	retq   $/;"	l
ffff800000101172	kernel.asm	/^ffff800000101172 <consoleread>:$/;"	l
ffff800000101172	kernel.asm	/^ffff800000101172:	55                   	push   %rbp$/;"	l
ffff800000101173	kernel.asm	/^ffff800000101173:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101176	kernel.asm	/^ffff800000101176:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010117a	kernel.asm	/^ffff80000010117a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010117e	kernel.asm	/^ffff80000010117e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101182	kernel.asm	/^ffff800000101182:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101185	kernel.asm	/^ffff800000101185:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101189	kernel.asm	/^ffff800000101189:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010118c	kernel.asm	/^ffff80000010118c:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000101193	kernel.asm	/^ffff800000101193:	80 ff ff $/;"	l
ffff800000101196	kernel.asm	/^ffff800000101196:	ff d0                	callq  *%rax$/;"	l
ffff800000101198	kernel.asm	/^ffff800000101198:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010119b	kernel.asm	/^ffff80000010119b:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010119e	kernel.asm	/^ffff80000010119e:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff8000001011a5	kernel.asm	/^ffff8000001011a5:	80 ff ff $/;"	l
ffff8000001011a8	kernel.asm	/^ffff8000001011a8:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001011af	kernel.asm	/^ffff8000001011af:	80 ff ff $/;"	l
ffff8000001011b2	kernel.asm	/^ffff8000001011b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001011b4	kernel.asm	/^ffff8000001011b4:	e9 1a 01 00 00       	jmpq   ffff8000001012d3 <consoleread+0x161>$/;"	l
ffff8000001011b9	kernel.asm	/^ffff8000001011b9:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001011c0	kernel.asm	/^ffff8000001011c0:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001011c4	kernel.asm	/^ffff8000001011c4:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001011c7	kernel.asm	/^ffff8000001011c7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001011c9	kernel.asm	/^ffff8000001011c9:	74 33                	je     ffff8000001011fe <consoleread+0x8c>$/;"	l
ffff8000001011cb	kernel.asm	/^ffff8000001011cb:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff8000001011d2	kernel.asm	/^ffff8000001011d2:	80 ff ff $/;"	l
ffff8000001011d5	kernel.asm	/^ffff8000001011d5:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001011dc	kernel.asm	/^ffff8000001011dc:	80 ff ff $/;"	l
ffff8000001011df	kernel.asm	/^ffff8000001011df:	ff d0                	callq  *%rax$/;"	l
ffff8000001011e1	kernel.asm	/^ffff8000001011e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001011e5	kernel.asm	/^ffff8000001011e5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001011e8	kernel.asm	/^ffff8000001011e8:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001011ef	kernel.asm	/^ffff8000001011ef:	80 ff ff $/;"	l
ffff8000001011f2	kernel.asm	/^ffff8000001011f2:	ff d0                	callq  *%rax$/;"	l
ffff8000001011f4	kernel.asm	/^ffff8000001011f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001011f9	kernel.asm	/^ffff8000001011f9:	e9 18 01 00 00       	jmpq   ffff800000101316 <consoleread+0x1a4>$/;"	l
ffff8000001011fe	kernel.asm	/^ffff8000001011fe:	48 be c0 33 11 00 00 	movabs $0xffff8000001133c0,%rsi$/;"	l
ffff800000101205	kernel.asm	/^ffff800000101205:	80 ff ff $/;"	l
ffff800000101208	kernel.asm	/^ffff800000101208:	48 bf a8 34 11 00 00 	movabs $0xffff8000001134a8,%rdi$/;"	l
ffff80000010120f	kernel.asm	/^ffff80000010120f:	80 ff ff $/;"	l
ffff800000101212	kernel.asm	/^ffff800000101212:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000101219	kernel.asm	/^ffff800000101219:	80 ff ff $/;"	l
ffff80000010121c	kernel.asm	/^ffff80000010121c:	ff d0                	callq  *%rax$/;"	l
ffff80000010121e	kernel.asm	/^ffff80000010121e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101225	kernel.asm	/^ffff800000101225:	80 ff ff $/;"	l
ffff800000101228	kernel.asm	/^ffff800000101228:	8b 90 e8 00 00 00    	mov    0xe8(%rax),%edx$/;"	l
ffff80000010122e	kernel.asm	/^ffff80000010122e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101235	kernel.asm	/^ffff800000101235:	80 ff ff $/;"	l
ffff800000101238	kernel.asm	/^ffff800000101238:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff80000010123e	kernel.asm	/^ffff80000010123e:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000101240	kernel.asm	/^ffff800000101240:	0f 84 73 ff ff ff    	je     ffff8000001011b9 <consoleread+0x47>$/;"	l
ffff800000101246	kernel.asm	/^ffff800000101246:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff80000010124d	kernel.asm	/^ffff80000010124d:	80 ff ff $/;"	l
ffff800000101250	kernel.asm	/^ffff800000101250:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101256	kernel.asm	/^ffff800000101256:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000101259	kernel.asm	/^ffff800000101259:	48 ba c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdx$/;"	l
ffff800000101260	kernel.asm	/^ffff800000101260:	80 ff ff $/;"	l
ffff800000101263	kernel.asm	/^ffff800000101263:	89 8a e8 00 00 00    	mov    %ecx,0xe8(%rdx)$/;"	l
ffff800000101269	kernel.asm	/^ffff800000101269:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff80000010126c	kernel.asm	/^ffff80000010126c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010126e	kernel.asm	/^ffff80000010126e:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff800000101275	kernel.asm	/^ffff800000101275:	80 ff ff $/;"	l
ffff800000101278	kernel.asm	/^ffff800000101278:	89 d2                	mov    %edx,%edx$/;"	l
ffff80000010127a	kernel.asm	/^ffff80000010127a:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff80000010127f	kernel.asm	/^ffff80000010127f:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000101282	kernel.asm	/^ffff800000101282:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000101285	kernel.asm	/^ffff800000101285:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)$/;"	l
ffff800000101289	kernel.asm	/^ffff800000101289:	75 2d                	jne    ffff8000001012b8 <consoleread+0x146>$/;"	l
ffff80000010128b	kernel.asm	/^ffff80000010128b:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010128e	kernel.asm	/^ffff80000010128e:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000101291	kernel.asm	/^ffff800000101291:	73 4c                	jae    ffff8000001012df <consoleread+0x16d>$/;"	l
ffff800000101293	kernel.asm	/^ffff800000101293:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff80000010129a	kernel.asm	/^ffff80000010129a:	80 ff ff $/;"	l
ffff80000010129d	kernel.asm	/^ffff80000010129d:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff8000001012a3	kernel.asm	/^ffff8000001012a3:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001012a6	kernel.asm	/^ffff8000001012a6:	48 b8 c0 33 11 00 00 	movabs $0xffff8000001133c0,%rax$/;"	l
ffff8000001012ad	kernel.asm	/^ffff8000001012ad:	80 ff ff $/;"	l
ffff8000001012b0	kernel.asm	/^ffff8000001012b0:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)$/;"	l
ffff8000001012b6	kernel.asm	/^ffff8000001012b6:	eb 27                	jmp    ffff8000001012df <consoleread+0x16d>$/;"	l
ffff8000001012b8	kernel.asm	/^ffff8000001012b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001012bc	kernel.asm	/^ffff8000001012bc:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001012c0	kernel.asm	/^ffff8000001012c0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff8000001012c4	kernel.asm	/^ffff8000001012c4:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff8000001012c7	kernel.asm	/^ffff8000001012c7:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001012c9	kernel.asm	/^ffff8000001012c9:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff8000001012cd	kernel.asm	/^ffff8000001012cd:	83 7d f8 0a          	cmpl   $0xa,-0x8(%rbp)$/;"	l
ffff8000001012d1	kernel.asm	/^ffff8000001012d1:	74 0f                	je     ffff8000001012e2 <consoleread+0x170>$/;"	l
ffff8000001012d3	kernel.asm	/^ffff8000001012d3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff8000001012d7	kernel.asm	/^ffff8000001012d7:	0f 8f 41 ff ff ff    	jg     ffff80000010121e <consoleread+0xac>$/;"	l
ffff8000001012dd	kernel.asm	/^ffff8000001012dd:	eb 04                	jmp    ffff8000001012e3 <consoleread+0x171>$/;"	l
ffff8000001012df	kernel.asm	/^ffff8000001012df:	90                   	nop$/;"	l
ffff8000001012e0	kernel.asm	/^ffff8000001012e0:	eb 01                	jmp    ffff8000001012e3 <consoleread+0x171>$/;"	l
ffff8000001012e2	kernel.asm	/^ffff8000001012e2:	90                   	nop$/;"	l
ffff8000001012e3	kernel.asm	/^ffff8000001012e3:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff8000001012ea	kernel.asm	/^ffff8000001012ea:	80 ff ff $/;"	l
ffff8000001012ed	kernel.asm	/^ffff8000001012ed:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001012f4	kernel.asm	/^ffff8000001012f4:	80 ff ff $/;"	l
ffff8000001012f7	kernel.asm	/^ffff8000001012f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001012f9	kernel.asm	/^ffff8000001012f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001012fd	kernel.asm	/^ffff8000001012fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101300	kernel.asm	/^ffff800000101300:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000101307	kernel.asm	/^ffff800000101307:	80 ff ff $/;"	l
ffff80000010130a	kernel.asm	/^ffff80000010130a:	ff d0                	callq  *%rax$/;"	l
ffff80000010130c	kernel.asm	/^ffff80000010130c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010130f	kernel.asm	/^ffff80000010130f:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000101312	kernel.asm	/^ffff800000101312:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000101314	kernel.asm	/^ffff800000101314:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000101316	kernel.asm	/^ffff800000101316:	c9                   	leaveq $/;"	l
ffff800000101317	kernel.asm	/^ffff800000101317:	c3                   	retq   $/;"	l
ffff800000101318	kernel.asm	/^ffff800000101318 <consolewrite>:$/;"	l
ffff800000101318	kernel.asm	/^ffff800000101318:	55                   	push   %rbp$/;"	l
ffff800000101319	kernel.asm	/^ffff800000101319:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010131c	kernel.asm	/^ffff80000010131c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101320	kernel.asm	/^ffff800000101320:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101324	kernel.asm	/^ffff800000101324:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101328	kernel.asm	/^ffff800000101328:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010132b	kernel.asm	/^ffff80000010132b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010132f	kernel.asm	/^ffff80000010132f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101332	kernel.asm	/^ffff800000101332:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000101339	kernel.asm	/^ffff800000101339:	80 ff ff $/;"	l
ffff80000010133c	kernel.asm	/^ffff80000010133c:	ff d0                	callq  *%rax$/;"	l
ffff80000010133e	kernel.asm	/^ffff80000010133e:	48 bf c0 34 11 00 00 	movabs $0xffff8000001134c0,%rdi$/;"	l
ffff800000101345	kernel.asm	/^ffff800000101345:	80 ff ff $/;"	l
ffff800000101348	kernel.asm	/^ffff800000101348:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff80000010134f	kernel.asm	/^ffff80000010134f:	80 ff ff $/;"	l
ffff800000101352	kernel.asm	/^ffff800000101352:	ff d0                	callq  *%rax$/;"	l
ffff800000101354	kernel.asm	/^ffff800000101354:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010135b	kernel.asm	/^ffff80000010135b:	eb 28                	jmp    ffff800000101385 <consolewrite+0x6d>$/;"	l
ffff80000010135d	kernel.asm	/^ffff80000010135d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101360	kernel.asm	/^ffff800000101360:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000101363	kernel.asm	/^ffff800000101363:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101367	kernel.asm	/^ffff800000101367:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010136a	kernel.asm	/^ffff80000010136a:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010136d	kernel.asm	/^ffff80000010136d:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000101370	kernel.asm	/^ffff800000101370:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000101373	kernel.asm	/^ffff800000101373:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101375	kernel.asm	/^ffff800000101375:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff80000010137c	kernel.asm	/^ffff80000010137c:	80 ff ff $/;"	l
ffff80000010137f	kernel.asm	/^ffff80000010137f:	ff d0                	callq  *%rax$/;"	l
ffff800000101381	kernel.asm	/^ffff800000101381:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000101385	kernel.asm	/^ffff800000101385:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101388	kernel.asm	/^ffff800000101388:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff80000010138b	kernel.asm	/^ffff80000010138b:	7c d0                	jl     ffff80000010135d <consolewrite+0x45>$/;"	l
ffff80000010138d	kernel.asm	/^ffff80000010138d:	48 bf c0 34 11 00 00 	movabs $0xffff8000001134c0,%rdi$/;"	l
ffff800000101394	kernel.asm	/^ffff800000101394:	80 ff ff $/;"	l
ffff800000101397	kernel.asm	/^ffff800000101397:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff80000010139e	kernel.asm	/^ffff80000010139e:	80 ff ff $/;"	l
ffff8000001013a1	kernel.asm	/^ffff8000001013a1:	ff d0                	callq  *%rax$/;"	l
ffff8000001013a3	kernel.asm	/^ffff8000001013a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001013a7	kernel.asm	/^ffff8000001013a7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001013aa	kernel.asm	/^ffff8000001013aa:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001013b1	kernel.asm	/^ffff8000001013b1:	80 ff ff $/;"	l
ffff8000001013b4	kernel.asm	/^ffff8000001013b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001013b6	kernel.asm	/^ffff8000001013b6:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001013b9	kernel.asm	/^ffff8000001013b9:	c9                   	leaveq $/;"	l
ffff8000001013ba	kernel.asm	/^ffff8000001013ba:	c3                   	retq   $/;"	l
ffff8000001013bb	kernel.asm	/^ffff8000001013bb <consoleinit>:$/;"	l
ffff8000001013bb	kernel.asm	/^ffff8000001013bb:	55                   	push   %rbp$/;"	l
ffff8000001013bc	kernel.asm	/^ffff8000001013bc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001013bf	kernel.asm	/^ffff8000001013bf:	48 be 12 bc 10 00 00 	movabs $0xffff80000010bc12,%rsi$/;"	l
ffff8000001013c6	kernel.asm	/^ffff8000001013c6:	80 ff ff $/;"	l
ffff8000001013c9	kernel.asm	/^ffff8000001013c9:	48 bf c0 34 11 00 00 	movabs $0xffff8000001134c0,%rdi$/;"	l
ffff8000001013d0	kernel.asm	/^ffff8000001013d0:	80 ff ff $/;"	l
ffff8000001013d3	kernel.asm	/^ffff8000001013d3:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff8000001013da	kernel.asm	/^ffff8000001013da:	80 ff ff $/;"	l
ffff8000001013dd	kernel.asm	/^ffff8000001013dd:	ff d0                	callq  *%rax$/;"	l
ffff8000001013df	kernel.asm	/^ffff8000001013df:	48 be 1a bc 10 00 00 	movabs $0xffff80000010bc1a,%rsi$/;"	l
ffff8000001013e6	kernel.asm	/^ffff8000001013e6:	80 ff ff $/;"	l
ffff8000001013e9	kernel.asm	/^ffff8000001013e9:	48 bf c0 33 11 00 00 	movabs $0xffff8000001133c0,%rdi$/;"	l
ffff8000001013f0	kernel.asm	/^ffff8000001013f0:	80 ff ff $/;"	l
ffff8000001013f3	kernel.asm	/^ffff8000001013f3:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff8000001013fa	kernel.asm	/^ffff8000001013fa:	80 ff ff $/;"	l
ffff8000001013fd	kernel.asm	/^ffff8000001013fd:	ff d0                	callq  *%rax$/;"	l
ffff8000001013ff	kernel.asm	/^ffff8000001013ff:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff800000101406	kernel.asm	/^ffff800000101406:	80 ff ff $/;"	l
ffff800000101409	kernel.asm	/^ffff800000101409:	48 ba 18 13 10 00 00 	movabs $0xffff800000101318,%rdx$/;"	l
ffff800000101410	kernel.asm	/^ffff800000101410:	80 ff ff $/;"	l
ffff800000101413	kernel.asm	/^ffff800000101413:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff800000101417	kernel.asm	/^ffff800000101417:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff80000010141e	kernel.asm	/^ffff80000010141e:	80 ff ff $/;"	l
ffff800000101421	kernel.asm	/^ffff800000101421:	48 b9 72 11 10 00 00 	movabs $0xffff800000101172,%rcx$/;"	l
ffff800000101428	kernel.asm	/^ffff800000101428:	80 ff ff $/;"	l
ffff80000010142b	kernel.asm	/^ffff80000010142b:	48 89 48 10          	mov    %rcx,0x10(%rax)$/;"	l
ffff80000010142f	kernel.asm	/^ffff80000010142f:	48 b8 c0 34 11 00 00 	movabs $0xffff8000001134c0,%rax$/;"	l
ffff800000101436	kernel.asm	/^ffff800000101436:	80 ff ff $/;"	l
ffff800000101439	kernel.asm	/^ffff800000101439:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff800000101440	kernel.asm	/^ffff800000101440:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000101445	kernel.asm	/^ffff800000101445:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010144a	kernel.asm	/^ffff80000010144a:	48 b8 65 3e 10 00 00 	movabs $0xffff800000103e65,%rax$/;"	l
ffff800000101451	kernel.asm	/^ffff800000101451:	80 ff ff $/;"	l
ffff800000101454	kernel.asm	/^ffff800000101454:	ff d0                	callq  *%rax$/;"	l
ffff800000101456	kernel.asm	/^ffff800000101456:	90                   	nop$/;"	l
ffff800000101457	kernel.asm	/^ffff800000101457:	5d                   	pop    %rbp$/;"	l
ffff800000101458	kernel.asm	/^ffff800000101458:	c3                   	retq   $/;"	l
ffff800000101459	kernel.asm	/^ffff800000101459 <exec>:$/;"	l
ffff800000101459	kernel.asm	/^ffff800000101459:	55                   	push   %rbp$/;"	l
ffff80000010145a	kernel.asm	/^ffff80000010145a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010145d	kernel.asm	/^ffff80000010145d:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp$/;"	l
ffff800000101464	kernel.asm	/^ffff800000101464:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)$/;"	l
ffff80000010146b	kernel.asm	/^ffff80000010146b:	48 89 b5 00 fe ff ff 	mov    %rsi,-0x200(%rbp)$/;"	l
ffff800000101472	kernel.asm	/^ffff800000101472:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101479	kernel.asm	/^ffff800000101479:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010147d	kernel.asm	/^ffff80000010147d:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000101481	kernel.asm	/^ffff800000101481:	48 89 45 b8          	mov    %rax,-0x48(%rbp)$/;"	l
ffff800000101485	kernel.asm	/^ffff800000101485:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010148a	kernel.asm	/^ffff80000010148a:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000101491	kernel.asm	/^ffff800000101491:	80 ff ff $/;"	l
ffff800000101494	kernel.asm	/^ffff800000101494:	ff d2                	callq  *%rdx$/;"	l
ffff800000101496	kernel.asm	/^ffff800000101496:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff80000010149d	kernel.asm	/^ffff80000010149d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001014a0	kernel.asm	/^ffff8000001014a0:	48 b8 ba 36 10 00 00 	movabs $0xffff8000001036ba,%rax$/;"	l
ffff8000001014a7	kernel.asm	/^ffff8000001014a7:	80 ff ff $/;"	l
ffff8000001014aa	kernel.asm	/^ffff8000001014aa:	ff d0                	callq  *%rax$/;"	l
ffff8000001014ac	kernel.asm	/^ffff8000001014ac:	48 89 45 c8          	mov    %rax,-0x38(%rbp)$/;"	l
ffff8000001014b0	kernel.asm	/^ffff8000001014b0:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001014b5	kernel.asm	/^ffff8000001014b5:	75 1b                	jne    ffff8000001014d2 <exec+0x79>$/;"	l
ffff8000001014b7	kernel.asm	/^ffff8000001014b7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001014bc	kernel.asm	/^ffff8000001014bc:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff8000001014c3	kernel.asm	/^ffff8000001014c3:	80 ff ff $/;"	l
ffff8000001014c6	kernel.asm	/^ffff8000001014c6:	ff d2                	callq  *%rdx$/;"	l
ffff8000001014c8	kernel.asm	/^ffff8000001014c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001014cd	kernel.asm	/^ffff8000001014cd:	e9 a5 05 00 00       	jmpq   ffff800000101a77 <exec+0x61e>$/;"	l
ffff8000001014d2	kernel.asm	/^ffff8000001014d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001014d6	kernel.asm	/^ffff8000001014d6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001014d9	kernel.asm	/^ffff8000001014d9:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001014e0	kernel.asm	/^ffff8000001014e0:	80 ff ff $/;"	l
ffff8000001014e3	kernel.asm	/^ffff8000001014e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001014e5	kernel.asm	/^ffff8000001014e5:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)$/;"	l
ffff8000001014ec	kernel.asm	/^ffff8000001014ec:	00 $/;"	l
ffff8000001014ed	kernel.asm	/^ffff8000001014ed:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi$/;"	l
ffff8000001014f4	kernel.asm	/^ffff8000001014f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001014f8	kernel.asm	/^ffff8000001014f8:	b9 40 00 00 00       	mov    $0x40,%ecx$/;"	l
ffff8000001014fd	kernel.asm	/^ffff8000001014fd:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000101502	kernel.asm	/^ffff800000101502:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101505	kernel.asm	/^ffff800000101505:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff80000010150c	kernel.asm	/^ffff80000010150c:	80 ff ff $/;"	l
ffff80000010150f	kernel.asm	/^ffff80000010150f:	ff d0                	callq  *%rax$/;"	l
ffff800000101511	kernel.asm	/^ffff800000101511:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff800000101514	kernel.asm	/^ffff800000101514:	0f 85 ee 04 00 00    	jne    ffff800000101a08 <exec+0x5af>$/;"	l
ffff80000010151a	kernel.asm	/^ffff80000010151a:	8b 85 50 fe ff ff    	mov    -0x1b0(%rbp),%eax$/;"	l
ffff800000101520	kernel.asm	/^ffff800000101520:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax$/;"	l
ffff800000101525	kernel.asm	/^ffff800000101525:	0f 85 e0 04 00 00    	jne    ffff800000101a0b <exec+0x5b2>$/;"	l
ffff80000010152b	kernel.asm	/^ffff80000010152b:	48 b8 9b ac 10 00 00 	movabs $0xffff80000010ac9b,%rax$/;"	l
ffff800000101532	kernel.asm	/^ffff800000101532:	80 ff ff $/;"	l
ffff800000101535	kernel.asm	/^ffff800000101535:	ff d0                	callq  *%rax$/;"	l
ffff800000101537	kernel.asm	/^ffff800000101537:	48 89 45 c0          	mov    %rax,-0x40(%rbp)$/;"	l
ffff80000010153b	kernel.asm	/^ffff80000010153b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff800000101540	kernel.asm	/^ffff800000101540:	0f 84 c8 04 00 00    	je     ffff800000101a0e <exec+0x5b5>$/;"	l
ffff800000101546	kernel.asm	/^ffff800000101546:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)$/;"	l
ffff80000010154d	kernel.asm	/^ffff80000010154d:	00 $/;"	l
ffff80000010154e	kernel.asm	/^ffff80000010154e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)$/;"	l
ffff800000101555	kernel.asm	/^ffff800000101555:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax$/;"	l
ffff80000010155c	kernel.asm	/^ffff80000010155c:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff80000010155f	kernel.asm	/^ffff80000010155f:	e9 13 01 00 00       	jmpq   ffff800000101677 <exec+0x21e>$/;"	l
ffff800000101564	kernel.asm	/^ffff800000101564:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000101567	kernel.asm	/^ffff800000101567:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi$/;"	l
ffff80000010156e	kernel.asm	/^ffff80000010156e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101572	kernel.asm	/^ffff800000101572:	b9 38 00 00 00       	mov    $0x38,%ecx$/;"	l
ffff800000101577	kernel.asm	/^ffff800000101577:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010157a	kernel.asm	/^ffff80000010157a:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff800000101581	kernel.asm	/^ffff800000101581:	80 ff ff $/;"	l
ffff800000101584	kernel.asm	/^ffff800000101584:	ff d0                	callq  *%rax$/;"	l
ffff800000101586	kernel.asm	/^ffff800000101586:	83 f8 38             	cmp    $0x38,%eax$/;"	l
ffff800000101589	kernel.asm	/^ffff800000101589:	0f 85 82 04 00 00    	jne    ffff800000101a11 <exec+0x5b8>$/;"	l
ffff80000010158f	kernel.asm	/^ffff80000010158f:	8b 85 10 fe ff ff    	mov    -0x1f0(%rbp),%eax$/;"	l
ffff800000101595	kernel.asm	/^ffff800000101595:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101598	kernel.asm	/^ffff800000101598:	0f 85 cb 00 00 00    	jne    ffff800000101669 <exec+0x210>$/;"	l
ffff80000010159e	kernel.asm	/^ffff80000010159e:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx$/;"	l
ffff8000001015a5	kernel.asm	/^ffff8000001015a5:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff8000001015ac	kernel.asm	/^ffff8000001015ac:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001015af	kernel.asm	/^ffff8000001015af:	0f 82 5f 04 00 00    	jb     ffff800000101a14 <exec+0x5bb>$/;"	l
ffff8000001015b5	kernel.asm	/^ffff8000001015b5:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx$/;"	l
ffff8000001015bc	kernel.asm	/^ffff8000001015bc:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff8000001015c3	kernel.asm	/^ffff8000001015c3:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff8000001015c6	kernel.asm	/^ffff8000001015c6:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001015cd	kernel.asm	/^ffff8000001015cd:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001015d0	kernel.asm	/^ffff8000001015d0:	0f 82 41 04 00 00    	jb     ffff800000101a17 <exec+0x5be>$/;"	l
ffff8000001015d6	kernel.asm	/^ffff8000001015d6:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001015dd	kernel.asm	/^ffff8000001015dd:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001015df	kernel.asm	/^ffff8000001015df:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff8000001015e6	kernel.asm	/^ffff8000001015e6:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001015e8	kernel.asm	/^ffff8000001015e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001015ec	kernel.asm	/^ffff8000001015ec:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001015ee	kernel.asm	/^ffff8000001015ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001015f2	kernel.asm	/^ffff8000001015f2:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001015f4	kernel.asm	/^ffff8000001015f4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001015f7	kernel.asm	/^ffff8000001015f7:	48 b8 f3 b3 10 00 00 	movabs $0xffff80000010b3f3,%rax$/;"	l
ffff8000001015fe	kernel.asm	/^ffff8000001015fe:	80 ff ff $/;"	l
ffff800000101601	kernel.asm	/^ffff800000101601:	ff d0                	callq  *%rax$/;"	l
ffff800000101603	kernel.asm	/^ffff800000101603:	48 98                	cltq   $/;"	l
ffff800000101605	kernel.asm	/^ffff800000101605:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000101609	kernel.asm	/^ffff800000101609:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff80000010160e	kernel.asm	/^ffff80000010160e:	0f 84 06 04 00 00    	je     ffff800000101a1a <exec+0x5c1>$/;"	l
ffff800000101614	kernel.asm	/^ffff800000101614:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff80000010161b	kernel.asm	/^ffff80000010161b:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff800000101620	kernel.asm	/^ffff800000101620:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000101623	kernel.asm	/^ffff800000101623:	0f 85 f4 03 00 00    	jne    ffff800000101a1d <exec+0x5c4>$/;"	l
ffff800000101629	kernel.asm	/^ffff800000101629:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff800000101630	kernel.asm	/^ffff800000101630:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101632	kernel.asm	/^ffff800000101632:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax$/;"	l
ffff800000101639	kernel.asm	/^ffff800000101639:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010163b	kernel.asm	/^ffff80000010163b:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff800000101642	kernel.asm	/^ffff800000101642:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000101645	kernel.asm	/^ffff800000101645:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx$/;"	l
ffff800000101649	kernel.asm	/^ffff800000101649:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010164d	kernel.asm	/^ffff80000010164d:	41 89 f8             	mov    %edi,%r8d$/;"	l
ffff800000101650	kernel.asm	/^ffff800000101650:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101653	kernel.asm	/^ffff800000101653:	48 b8 d1 b2 10 00 00 	movabs $0xffff80000010b2d1,%rax$/;"	l
ffff80000010165a	kernel.asm	/^ffff80000010165a:	80 ff ff $/;"	l
ffff80000010165d	kernel.asm	/^ffff80000010165d:	ff d0                	callq  *%rax$/;"	l
ffff80000010165f	kernel.asm	/^ffff80000010165f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101661	kernel.asm	/^ffff800000101661:	0f 88 b9 03 00 00    	js     ffff800000101a20 <exec+0x5c7>$/;"	l
ffff800000101667	kernel.asm	/^ffff800000101667:	eb 01                	jmp    ffff80000010166a <exec+0x211>$/;"	l
ffff800000101669	kernel.asm	/^ffff800000101669:	90                   	nop$/;"	l
ffff80000010166a	kernel.asm	/^ffff80000010166a:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)$/;"	l
ffff80000010166e	kernel.asm	/^ffff80000010166e:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000101671	kernel.asm	/^ffff800000101671:	83 c0 38             	add    $0x38,%eax$/;"	l
ffff800000101674	kernel.asm	/^ffff800000101674:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000101677	kernel.asm	/^ffff800000101677:	0f b7 85 88 fe ff ff 	movzwl -0x178(%rbp),%eax$/;"	l
ffff80000010167e	kernel.asm	/^ffff80000010167e:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff800000101681	kernel.asm	/^ffff800000101681:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000101684	kernel.asm	/^ffff800000101684:	0f 8f da fe ff ff    	jg     ffff800000101564 <exec+0x10b>$/;"	l
ffff80000010168a	kernel.asm	/^ffff80000010168a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010168e	kernel.asm	/^ffff80000010168e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101691	kernel.asm	/^ffff800000101691:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000101698	kernel.asm	/^ffff800000101698:	80 ff ff $/;"	l
ffff80000010169b	kernel.asm	/^ffff80000010169b:	ff d0                	callq  *%rax$/;"	l
ffff80000010169d	kernel.asm	/^ffff80000010169d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001016a2	kernel.asm	/^ffff8000001016a2:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff8000001016a9	kernel.asm	/^ffff8000001016a9:	80 ff ff $/;"	l
ffff8000001016ac	kernel.asm	/^ffff8000001016ac:	ff d2                	callq  *%rdx$/;"	l
ffff8000001016ae	kernel.asm	/^ffff8000001016ae:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001016b5	kernel.asm	/^ffff8000001016b5:	00 $/;"	l
ffff8000001016b6	kernel.asm	/^ffff8000001016b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016ba	kernel.asm	/^ffff8000001016ba:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff8000001016c0	kernel.asm	/^ffff8000001016c0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff8000001016c6	kernel.asm	/^ffff8000001016c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001016ca	kernel.asm	/^ffff8000001016ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016ce	kernel.asm	/^ffff8000001016ce:	8d 90 00 20 00 00    	lea    0x2000(%rax),%edx$/;"	l
ffff8000001016d4	kernel.asm	/^ffff8000001016d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016d8	kernel.asm	/^ffff8000001016d8:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001016da	kernel.asm	/^ffff8000001016da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001016de	kernel.asm	/^ffff8000001016de:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001016e0	kernel.asm	/^ffff8000001016e0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001016e3	kernel.asm	/^ffff8000001016e3:	48 b8 f3 b3 10 00 00 	movabs $0xffff80000010b3f3,%rax$/;"	l
ffff8000001016ea	kernel.asm	/^ffff8000001016ea:	80 ff ff $/;"	l
ffff8000001016ed	kernel.asm	/^ffff8000001016ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001016ef	kernel.asm	/^ffff8000001016ef:	48 98                	cltq   $/;"	l
ffff8000001016f1	kernel.asm	/^ffff8000001016f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001016f5	kernel.asm	/^ffff8000001016f5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff8000001016fa	kernel.asm	/^ffff8000001016fa:	0f 84 23 03 00 00    	je     ffff800000101a23 <exec+0x5ca>$/;"	l
ffff800000101700	kernel.asm	/^ffff800000101700:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000101704	kernel.asm	/^ffff800000101704:	48 2d 00 20 00 00    	sub    $0x2000,%rax$/;"	l
ffff80000010170a	kernel.asm	/^ffff80000010170a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010170d	kernel.asm	/^ffff80000010170d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101711	kernel.asm	/^ffff800000101711:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000101714	kernel.asm	/^ffff800000101714:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101717	kernel.asm	/^ffff800000101717:	48 b8 71 b8 10 00 00 	movabs $0xffff80000010b871,%rax$/;"	l
ffff80000010171e	kernel.asm	/^ffff80000010171e:	80 ff ff $/;"	l
ffff800000101721	kernel.asm	/^ffff800000101721:	ff d0                	callq  *%rax$/;"	l
ffff800000101723	kernel.asm	/^ffff800000101723:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000101727	kernel.asm	/^ffff800000101727:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010172b	kernel.asm	/^ffff80000010172b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)$/;"	l
ffff800000101732	kernel.asm	/^ffff800000101732:	00 $/;"	l
ffff800000101733	kernel.asm	/^ffff800000101733:	e9 ca 00 00 00       	jmpq   ffff800000101802 <exec+0x3a9>$/;"	l
ffff800000101738	kernel.asm	/^ffff800000101738:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)$/;"	l
ffff80000010173d	kernel.asm	/^ffff80000010173d:	0f 87 e3 02 00 00    	ja     ffff800000101a26 <exec+0x5cd>$/;"	l
ffff800000101743	kernel.asm	/^ffff800000101743:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101747	kernel.asm	/^ffff800000101747:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010174e	kernel.asm	/^ffff80000010174e:	00 $/;"	l
ffff80000010174f	kernel.asm	/^ffff80000010174f:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101756	kernel.asm	/^ffff800000101756:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101759	kernel.asm	/^ffff800000101759:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010175c	kernel.asm	/^ffff80000010175c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010175f	kernel.asm	/^ffff80000010175f:	48 b8 7a 79 10 00 00 	movabs $0xffff80000010797a,%rax$/;"	l
ffff800000101766	kernel.asm	/^ffff800000101766:	80 ff ff $/;"	l
ffff800000101769	kernel.asm	/^ffff800000101769:	ff d0                	callq  *%rax$/;"	l
ffff80000010176b	kernel.asm	/^ffff80000010176b:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010176e	kernel.asm	/^ffff80000010176e:	48 98                	cltq   $/;"	l
ffff800000101770	kernel.asm	/^ffff800000101770:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff800000101774	kernel.asm	/^ffff800000101774:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000101777	kernel.asm	/^ffff800000101777:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010177a	kernel.asm	/^ffff80000010177a:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010177e	kernel.asm	/^ffff80000010177e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff800000101782	kernel.asm	/^ffff800000101782:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101786	kernel.asm	/^ffff800000101786:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010178d	kernel.asm	/^ffff80000010178d:	00 $/;"	l
ffff80000010178e	kernel.asm	/^ffff80000010178e:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101795	kernel.asm	/^ffff800000101795:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101798	kernel.asm	/^ffff800000101798:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010179b	kernel.asm	/^ffff80000010179b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010179e	kernel.asm	/^ffff80000010179e:	48 b8 7a 79 10 00 00 	movabs $0xffff80000010797a,%rax$/;"	l
ffff8000001017a5	kernel.asm	/^ffff8000001017a5:	80 ff ff $/;"	l
ffff8000001017a8	kernel.asm	/^ffff8000001017a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001017aa	kernel.asm	/^ffff8000001017aa:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff8000001017ad	kernel.asm	/^ffff8000001017ad:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001017af	kernel.asm	/^ffff8000001017af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001017b3	kernel.asm	/^ffff8000001017b3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001017ba	kernel.asm	/^ffff8000001017ba:	00 $/;"	l
ffff8000001017bb	kernel.asm	/^ffff8000001017bb:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff8000001017c2	kernel.asm	/^ffff8000001017c2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001017c5	kernel.asm	/^ffff8000001017c5:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff8000001017c8	kernel.asm	/^ffff8000001017c8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001017cc	kernel.asm	/^ffff8000001017cc:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001017ce	kernel.asm	/^ffff8000001017ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001017d2	kernel.asm	/^ffff8000001017d2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001017d5	kernel.asm	/^ffff8000001017d5:	48 b8 da ba 10 00 00 	movabs $0xffff80000010bada,%rax$/;"	l
ffff8000001017dc	kernel.asm	/^ffff8000001017dc:	80 ff ff $/;"	l
ffff8000001017df	kernel.asm	/^ffff8000001017df:	ff d0                	callq  *%rax$/;"	l
ffff8000001017e1	kernel.asm	/^ffff8000001017e1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001017e3	kernel.asm	/^ffff8000001017e3:	0f 88 40 02 00 00    	js     ffff800000101a29 <exec+0x5d0>$/;"	l
ffff8000001017e9	kernel.asm	/^ffff8000001017e9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001017ed	kernel.asm	/^ffff8000001017ed:	48 8d 50 03          	lea    0x3(%rax),%rdx$/;"	l
ffff8000001017f1	kernel.asm	/^ffff8000001017f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001017f5	kernel.asm	/^ffff8000001017f5:	48 89 84 d5 90 fe ff 	mov    %rax,-0x170(%rbp,%rdx,8)$/;"	l
ffff8000001017fc	kernel.asm	/^ffff8000001017fc:	ff $/;"	l
ffff8000001017fd	kernel.asm	/^ffff8000001017fd:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)$/;"	l
ffff800000101802	kernel.asm	/^ffff800000101802:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101806	kernel.asm	/^ffff800000101806:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010180d	kernel.asm	/^ffff80000010180d:	00 $/;"	l
ffff80000010180e	kernel.asm	/^ffff80000010180e:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101815	kernel.asm	/^ffff800000101815:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101818	kernel.asm	/^ffff800000101818:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010181b	kernel.asm	/^ffff80000010181b:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010181e	kernel.asm	/^ffff80000010181e:	0f 85 14 ff ff ff    	jne    ffff800000101738 <exec+0x2df>$/;"	l
ffff800000101824	kernel.asm	/^ffff800000101824:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101828	kernel.asm	/^ffff800000101828:	48 83 c0 03          	add    $0x3,%rax$/;"	l
ffff80000010182c	kernel.asm	/^ffff80000010182c:	48 c7 84 c5 90 fe ff 	movq   $0x0,-0x170(%rbp,%rax,8)$/;"	l
ffff800000101833	kernel.asm	/^ffff800000101833:	ff 00 00 00 00 $/;"	l
ffff800000101838	kernel.asm	/^ffff800000101838:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010183d	kernel.asm	/^ffff80000010183d:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)$/;"	l
ffff800000101844	kernel.asm	/^ffff800000101844:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101848	kernel.asm	/^ffff800000101848:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)$/;"	l
ffff80000010184f	kernel.asm	/^ffff80000010184f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101853	kernel.asm	/^ffff800000101853:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000101857	kernel.asm	/^ffff800000101857:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010185e	kernel.asm	/^ffff80000010185e:	00 $/;"	l
ffff80000010185f	kernel.asm	/^ffff80000010185f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000101863	kernel.asm	/^ffff800000101863:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff800000101866	kernel.asm	/^ffff800000101866:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)$/;"	l
ffff80000010186d	kernel.asm	/^ffff80000010186d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101874	kernel.asm	/^ffff800000101874:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101878	kernel.asm	/^ffff800000101878:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010187c	kernel.asm	/^ffff80000010187c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000101880	kernel.asm	/^ffff800000101880:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff800000101884	kernel.asm	/^ffff800000101884:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010188b	kernel.asm	/^ffff80000010188b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010188f	kernel.asm	/^ffff80000010188f:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101893	kernel.asm	/^ffff800000101893:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000101897	kernel.asm	/^ffff800000101897:	48 83 c2 01          	add    $0x1,%rdx$/;"	l
ffff80000010189b	kernel.asm	/^ffff80000010189b:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx$/;"	l
ffff8000001018a2	kernel.asm	/^ffff8000001018a2:	00 $/;"	l
ffff8000001018a3	kernel.asm	/^ffff8000001018a3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff8000001018a7	kernel.asm	/^ffff8000001018a7:	48 29 ca             	sub    %rcx,%rdx$/;"	l
ffff8000001018aa	kernel.asm	/^ffff8000001018aa:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff8000001018ae	kernel.asm	/^ffff8000001018ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001018b2	kernel.asm	/^ffff8000001018b2:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff8000001018b6	kernel.asm	/^ffff8000001018b6:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001018ba	kernel.asm	/^ffff8000001018ba:	48 29 45 d0          	sub    %rax,-0x30(%rbp)$/;"	l
ffff8000001018be	kernel.asm	/^ffff8000001018be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001018c2	kernel.asm	/^ffff8000001018c2:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff8000001018c6	kernel.asm	/^ffff8000001018c6:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx$/;"	l
ffff8000001018cd	kernel.asm	/^ffff8000001018cd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001018d1	kernel.asm	/^ffff8000001018d1:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001018d3	kernel.asm	/^ffff8000001018d3:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx$/;"	l
ffff8000001018da	kernel.asm	/^ffff8000001018da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001018de	kernel.asm	/^ffff8000001018de:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001018e1	kernel.asm	/^ffff8000001018e1:	48 b8 da ba 10 00 00 	movabs $0xffff80000010bada,%rax$/;"	l
ffff8000001018e8	kernel.asm	/^ffff8000001018e8:	80 ff ff $/;"	l
ffff8000001018eb	kernel.asm	/^ffff8000001018eb:	ff d0                	callq  *%rax$/;"	l
ffff8000001018ed	kernel.asm	/^ffff8000001018ed:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001018ef	kernel.asm	/^ffff8000001018ef:	0f 88 37 01 00 00    	js     ffff800000101a2c <exec+0x5d3>$/;"	l
ffff8000001018f5	kernel.asm	/^ffff8000001018f5:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff8000001018fc	kernel.asm	/^ffff8000001018fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101900	kernel.asm	/^ffff800000101900:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101904	kernel.asm	/^ffff800000101904:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101908	kernel.asm	/^ffff800000101908:	eb 1c                	jmp    ffff800000101926 <exec+0x4cd>$/;"	l
ffff80000010190a	kernel.asm	/^ffff80000010190a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010190e	kernel.asm	/^ffff80000010190e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101911	kernel.asm	/^ffff800000101911:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000101913	kernel.asm	/^ffff800000101913:	75 0c                	jne    ffff800000101921 <exec+0x4c8>$/;"	l
ffff800000101915	kernel.asm	/^ffff800000101915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101919	kernel.asm	/^ffff800000101919:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff80000010191d	kernel.asm	/^ffff80000010191d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101921	kernel.asm	/^ffff800000101921:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000101926	kernel.asm	/^ffff800000101926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010192a	kernel.asm	/^ffff80000010192a:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010192d	kernel.asm	/^ffff80000010192d:	84 c0                	test   %al,%al$/;"	l
ffff80000010192f	kernel.asm	/^ffff80000010192f:	75 d9                	jne    ffff80000010190a <exec+0x4b1>$/;"	l
ffff800000101931	kernel.asm	/^ffff800000101931:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101938	kernel.asm	/^ffff800000101938:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010193c	kernel.asm	/^ffff80000010193c:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000101943	kernel.asm	/^ffff800000101943:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000101947	kernel.asm	/^ffff800000101947:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010194c	kernel.asm	/^ffff80000010194c:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010194f	kernel.asm	/^ffff80000010194f:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000101952	kernel.asm	/^ffff800000101952:	48 b8 18 79 10 00 00 	movabs $0xffff800000107918,%rax$/;"	l
ffff800000101959	kernel.asm	/^ffff800000101959:	80 ff ff $/;"	l
ffff80000010195c	kernel.asm	/^ffff80000010195c:	ff d0                	callq  *%rax$/;"	l
ffff80000010195e	kernel.asm	/^ffff80000010195e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101965	kernel.asm	/^ffff800000101965:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101969	kernel.asm	/^ffff800000101969:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
ffff80000010196d	kernel.asm	/^ffff80000010196d:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000101971	kernel.asm	/^ffff800000101971:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101978	kernel.asm	/^ffff800000101978:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010197c	kernel.asm	/^ffff80000010197c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000101980	kernel.asm	/^ffff800000101980:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000101983	kernel.asm	/^ffff800000101983:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010198a	kernel.asm	/^ffff80000010198a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010198e	kernel.asm	/^ffff80000010198e:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101992	kernel.asm	/^ffff800000101992:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff800000101999	kernel.asm	/^ffff800000101999:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)$/;"	l
ffff8000001019a0	kernel.asm	/^ffff8000001019a0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001019a7	kernel.asm	/^ffff8000001019a7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001019ab	kernel.asm	/^ffff8000001019ab:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001019af	kernel.asm	/^ffff8000001019af:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff8000001019b6	kernel.asm	/^ffff8000001019b6:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff8000001019ba	kernel.asm	/^ffff8000001019ba:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001019c1	kernel.asm	/^ffff8000001019c1:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001019c5	kernel.asm	/^ffff8000001019c5:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001019c9	kernel.asm	/^ffff8000001019c9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff8000001019cd	kernel.asm	/^ffff8000001019cd:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff8000001019d4	kernel.asm	/^ffff8000001019d4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001019db	kernel.asm	/^ffff8000001019db:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001019df	kernel.asm	/^ffff8000001019df:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001019e2	kernel.asm	/^ffff8000001019e2:	48 b8 41 ae 10 00 00 	movabs $0xffff80000010ae41,%rax$/;"	l
ffff8000001019e9	kernel.asm	/^ffff8000001019e9:	80 ff ff $/;"	l
ffff8000001019ec	kernel.asm	/^ffff8000001019ec:	ff d0                	callq  *%rax$/;"	l
ffff8000001019ee	kernel.asm	/^ffff8000001019ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff8000001019f2	kernel.asm	/^ffff8000001019f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001019f5	kernel.asm	/^ffff8000001019f5:	48 b8 3d b6 10 00 00 	movabs $0xffff80000010b63d,%rax$/;"	l
ffff8000001019fc	kernel.asm	/^ffff8000001019fc:	80 ff ff $/;"	l
ffff8000001019ff	kernel.asm	/^ffff8000001019ff:	ff d0                	callq  *%rax$/;"	l
ffff800000101a01	kernel.asm	/^ffff800000101a01:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101a06	kernel.asm	/^ffff800000101a06:	eb 6f                	jmp    ffff800000101a77 <exec+0x61e>$/;"	l
ffff800000101a08	kernel.asm	/^ffff800000101a08:	90                   	nop$/;"	l
ffff800000101a09	kernel.asm	/^ffff800000101a09:	eb 22                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a0b	kernel.asm	/^ffff800000101a0b:	90                   	nop$/;"	l
ffff800000101a0c	kernel.asm	/^ffff800000101a0c:	eb 1f                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a0e	kernel.asm	/^ffff800000101a0e:	90                   	nop$/;"	l
ffff800000101a0f	kernel.asm	/^ffff800000101a0f:	eb 1c                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a11	kernel.asm	/^ffff800000101a11:	90                   	nop$/;"	l
ffff800000101a12	kernel.asm	/^ffff800000101a12:	eb 19                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a14	kernel.asm	/^ffff800000101a14:	90                   	nop$/;"	l
ffff800000101a15	kernel.asm	/^ffff800000101a15:	eb 16                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a17	kernel.asm	/^ffff800000101a17:	90                   	nop$/;"	l
ffff800000101a18	kernel.asm	/^ffff800000101a18:	eb 13                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a1a	kernel.asm	/^ffff800000101a1a:	90                   	nop$/;"	l
ffff800000101a1b	kernel.asm	/^ffff800000101a1b:	eb 10                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a1d	kernel.asm	/^ffff800000101a1d:	90                   	nop$/;"	l
ffff800000101a1e	kernel.asm	/^ffff800000101a1e:	eb 0d                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a20	kernel.asm	/^ffff800000101a20:	90                   	nop$/;"	l
ffff800000101a21	kernel.asm	/^ffff800000101a21:	eb 0a                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a23	kernel.asm	/^ffff800000101a23:	90                   	nop$/;"	l
ffff800000101a24	kernel.asm	/^ffff800000101a24:	eb 07                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a26	kernel.asm	/^ffff800000101a26:	90                   	nop$/;"	l
ffff800000101a27	kernel.asm	/^ffff800000101a27:	eb 04                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a29	kernel.asm	/^ffff800000101a29:	90                   	nop$/;"	l
ffff800000101a2a	kernel.asm	/^ffff800000101a2a:	eb 01                	jmp    ffff800000101a2d <exec+0x5d4>$/;"	l
ffff800000101a2c	kernel.asm	/^ffff800000101a2c:	90                   	nop$/;"	l
ffff800000101a2d	kernel.asm	/^ffff800000101a2d:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff800000101a32	kernel.asm	/^ffff800000101a32:	74 13                	je     ffff800000101a47 <exec+0x5ee>$/;"	l
ffff800000101a34	kernel.asm	/^ffff800000101a34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101a38	kernel.asm	/^ffff800000101a38:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101a3b	kernel.asm	/^ffff800000101a3b:	48 b8 3d b6 10 00 00 	movabs $0xffff80000010b63d,%rax$/;"	l
ffff800000101a42	kernel.asm	/^ffff800000101a42:	80 ff ff $/;"	l
ffff800000101a45	kernel.asm	/^ffff800000101a45:	ff d0                	callq  *%rax$/;"	l
ffff800000101a47	kernel.asm	/^ffff800000101a47:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff800000101a4c	kernel.asm	/^ffff800000101a4c:	74 24                	je     ffff800000101a72 <exec+0x619>$/;"	l
ffff800000101a4e	kernel.asm	/^ffff800000101a4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101a52	kernel.asm	/^ffff800000101a52:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101a55	kernel.asm	/^ffff800000101a55:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000101a5c	kernel.asm	/^ffff800000101a5c:	80 ff ff $/;"	l
ffff800000101a5f	kernel.asm	/^ffff800000101a5f:	ff d0                	callq  *%rax$/;"	l
ffff800000101a61	kernel.asm	/^ffff800000101a61:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101a66	kernel.asm	/^ffff800000101a66:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000101a6d	kernel.asm	/^ffff800000101a6d:	80 ff ff $/;"	l
ffff800000101a70	kernel.asm	/^ffff800000101a70:	ff d2                	callq  *%rdx$/;"	l
ffff800000101a72	kernel.asm	/^ffff800000101a72:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101a77	kernel.asm	/^ffff800000101a77:	c9                   	leaveq $/;"	l
ffff800000101a78	kernel.asm	/^ffff800000101a78:	c3                   	retq   $/;"	l
ffff800000101a79	kernel.asm	/^ffff800000101a79 <fileinit>:$/;"	l
ffff800000101a79	kernel.asm	/^ffff800000101a79:	55                   	push   %rbp$/;"	l
ffff800000101a7a	kernel.asm	/^ffff800000101a7a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101a7d	kernel.asm	/^ffff800000101a7d:	48 be 20 bc 10 00 00 	movabs $0xffff80000010bc20,%rsi$/;"	l
ffff800000101a84	kernel.asm	/^ffff800000101a84:	80 ff ff $/;"	l
ffff800000101a87	kernel.asm	/^ffff800000101a87:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101a8e	kernel.asm	/^ffff800000101a8e:	80 ff ff $/;"	l
ffff800000101a91	kernel.asm	/^ffff800000101a91:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000101a98	kernel.asm	/^ffff800000101a98:	80 ff ff $/;"	l
ffff800000101a9b	kernel.asm	/^ffff800000101a9b:	ff d0                	callq  *%rax$/;"	l
ffff800000101a9d	kernel.asm	/^ffff800000101a9d:	90                   	nop$/;"	l
ffff800000101a9e	kernel.asm	/^ffff800000101a9e:	5d                   	pop    %rbp$/;"	l
ffff800000101a9f	kernel.asm	/^ffff800000101a9f:	c3                   	retq   $/;"	l
ffff800000101aa0	kernel.asm	/^ffff800000101aa0 <filealloc>:$/;"	l
ffff800000101aa0	kernel.asm	/^ffff800000101aa0:	55                   	push   %rbp$/;"	l
ffff800000101aa1	kernel.asm	/^ffff800000101aa1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101aa4	kernel.asm	/^ffff800000101aa4:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101aa8	kernel.asm	/^ffff800000101aa8:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101aaf	kernel.asm	/^ffff800000101aaf:	80 ff ff $/;"	l
ffff800000101ab2	kernel.asm	/^ffff800000101ab2:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000101ab9	kernel.asm	/^ffff800000101ab9:	80 ff ff $/;"	l
ffff800000101abc	kernel.asm	/^ffff800000101abc:	ff d0                	callq  *%rax$/;"	l
ffff800000101abe	kernel.asm	/^ffff800000101abe:	48 b8 48 36 11 00 00 	movabs $0xffff800000113648,%rax$/;"	l
ffff800000101ac5	kernel.asm	/^ffff800000101ac5:	80 ff ff $/;"	l
ffff800000101ac8	kernel.asm	/^ffff800000101ac8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101acc	kernel.asm	/^ffff800000101acc:	eb 37                	jmp    ffff800000101b05 <filealloc+0x65>$/;"	l
ffff800000101ace	kernel.asm	/^ffff800000101ace:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ad2	kernel.asm	/^ffff800000101ad2:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101ad5	kernel.asm	/^ffff800000101ad5:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101ad7	kernel.asm	/^ffff800000101ad7:	75 27                	jne    ffff800000101b00 <filealloc+0x60>$/;"	l
ffff800000101ad9	kernel.asm	/^ffff800000101ad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101add	kernel.asm	/^ffff800000101add:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)$/;"	l
ffff800000101ae4	kernel.asm	/^ffff800000101ae4:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101aeb	kernel.asm	/^ffff800000101aeb:	80 ff ff $/;"	l
ffff800000101aee	kernel.asm	/^ffff800000101aee:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000101af5	kernel.asm	/^ffff800000101af5:	80 ff ff $/;"	l
ffff800000101af8	kernel.asm	/^ffff800000101af8:	ff d0                	callq  *%rax$/;"	l
ffff800000101afa	kernel.asm	/^ffff800000101afa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101afe	kernel.asm	/^ffff800000101afe:	eb 30                	jmp    ffff800000101b30 <filealloc+0x90>$/;"	l
ffff800000101b00	kernel.asm	/^ffff800000101b00:	48 83 45 f8 28       	addq   $0x28,-0x8(%rbp)$/;"	l
ffff800000101b05	kernel.asm	/^ffff800000101b05:	48 b8 e8 45 11 00 00 	movabs $0xffff8000001145e8,%rax$/;"	l
ffff800000101b0c	kernel.asm	/^ffff800000101b0c:	80 ff ff $/;"	l
ffff800000101b0f	kernel.asm	/^ffff800000101b0f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000101b13	kernel.asm	/^ffff800000101b13:	72 b9                	jb     ffff800000101ace <filealloc+0x2e>$/;"	l
ffff800000101b15	kernel.asm	/^ffff800000101b15:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101b1c	kernel.asm	/^ffff800000101b1c:	80 ff ff $/;"	l
ffff800000101b1f	kernel.asm	/^ffff800000101b1f:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000101b26	kernel.asm	/^ffff800000101b26:	80 ff ff $/;"	l
ffff800000101b29	kernel.asm	/^ffff800000101b29:	ff d0                	callq  *%rax$/;"	l
ffff800000101b2b	kernel.asm	/^ffff800000101b2b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101b30	kernel.asm	/^ffff800000101b30:	c9                   	leaveq $/;"	l
ffff800000101b31	kernel.asm	/^ffff800000101b31:	c3                   	retq   $/;"	l
ffff800000101b32	kernel.asm	/^ffff800000101b32 <filedup>:$/;"	l
ffff800000101b32	kernel.asm	/^ffff800000101b32:	55                   	push   %rbp$/;"	l
ffff800000101b33	kernel.asm	/^ffff800000101b33:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101b36	kernel.asm	/^ffff800000101b36:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101b3a	kernel.asm	/^ffff800000101b3a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101b3e	kernel.asm	/^ffff800000101b3e:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101b45	kernel.asm	/^ffff800000101b45:	80 ff ff $/;"	l
ffff800000101b48	kernel.asm	/^ffff800000101b48:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000101b4f	kernel.asm	/^ffff800000101b4f:	80 ff ff $/;"	l
ffff800000101b52	kernel.asm	/^ffff800000101b52:	ff d0                	callq  *%rax$/;"	l
ffff800000101b54	kernel.asm	/^ffff800000101b54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b58	kernel.asm	/^ffff800000101b58:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101b5b	kernel.asm	/^ffff800000101b5b:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101b5d	kernel.asm	/^ffff800000101b5d:	7f 16                	jg     ffff800000101b75 <filedup+0x43>$/;"	l
ffff800000101b5f	kernel.asm	/^ffff800000101b5f:	48 bf 27 bc 10 00 00 	movabs $0xffff80000010bc27,%rdi$/;"	l
ffff800000101b66	kernel.asm	/^ffff800000101b66:	80 ff ff $/;"	l
ffff800000101b69	kernel.asm	/^ffff800000101b69:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101b70	kernel.asm	/^ffff800000101b70:	80 ff ff $/;"	l
ffff800000101b73	kernel.asm	/^ffff800000101b73:	ff d0                	callq  *%rax$/;"	l
ffff800000101b75	kernel.asm	/^ffff800000101b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b79	kernel.asm	/^ffff800000101b79:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101b7c	kernel.asm	/^ffff800000101b7c:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000101b7f	kernel.asm	/^ffff800000101b7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b83	kernel.asm	/^ffff800000101b83:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101b86	kernel.asm	/^ffff800000101b86:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101b8d	kernel.asm	/^ffff800000101b8d:	80 ff ff $/;"	l
ffff800000101b90	kernel.asm	/^ffff800000101b90:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000101b97	kernel.asm	/^ffff800000101b97:	80 ff ff $/;"	l
ffff800000101b9a	kernel.asm	/^ffff800000101b9a:	ff d0                	callq  *%rax$/;"	l
ffff800000101b9c	kernel.asm	/^ffff800000101b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ba0	kernel.asm	/^ffff800000101ba0:	c9                   	leaveq $/;"	l
ffff800000101ba1	kernel.asm	/^ffff800000101ba1:	c3                   	retq   $/;"	l
ffff800000101ba2	kernel.asm	/^ffff800000101ba2 <fileclose>:$/;"	l
ffff800000101ba2	kernel.asm	/^ffff800000101ba2:	55                   	push   %rbp$/;"	l
ffff800000101ba3	kernel.asm	/^ffff800000101ba3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101ba6	kernel.asm	/^ffff800000101ba6:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000101baa	kernel.asm	/^ffff800000101baa:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000101bae	kernel.asm	/^ffff800000101bae:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101bb5	kernel.asm	/^ffff800000101bb5:	80 ff ff $/;"	l
ffff800000101bb8	kernel.asm	/^ffff800000101bb8:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000101bbf	kernel.asm	/^ffff800000101bbf:	80 ff ff $/;"	l
ffff800000101bc2	kernel.asm	/^ffff800000101bc2:	ff d0                	callq  *%rax$/;"	l
ffff800000101bc4	kernel.asm	/^ffff800000101bc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bc8	kernel.asm	/^ffff800000101bc8:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101bcb	kernel.asm	/^ffff800000101bcb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101bcd	kernel.asm	/^ffff800000101bcd:	7f 16                	jg     ffff800000101be5 <fileclose+0x43>$/;"	l
ffff800000101bcf	kernel.asm	/^ffff800000101bcf:	48 bf 2f bc 10 00 00 	movabs $0xffff80000010bc2f,%rdi$/;"	l
ffff800000101bd6	kernel.asm	/^ffff800000101bd6:	80 ff ff $/;"	l
ffff800000101bd9	kernel.asm	/^ffff800000101bd9:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101be0	kernel.asm	/^ffff800000101be0:	80 ff ff $/;"	l
ffff800000101be3	kernel.asm	/^ffff800000101be3:	ff d0                	callq  *%rax$/;"	l
ffff800000101be5	kernel.asm	/^ffff800000101be5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101be9	kernel.asm	/^ffff800000101be9:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101bec	kernel.asm	/^ffff800000101bec:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000101bef	kernel.asm	/^ffff800000101bef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bf3	kernel.asm	/^ffff800000101bf3:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101bf6	kernel.asm	/^ffff800000101bf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bfa	kernel.asm	/^ffff800000101bfa:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101bfd	kernel.asm	/^ffff800000101bfd:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101bff	kernel.asm	/^ffff800000101bff:	7e 1b                	jle    ffff800000101c1c <fileclose+0x7a>$/;"	l
ffff800000101c01	kernel.asm	/^ffff800000101c01:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101c08	kernel.asm	/^ffff800000101c08:	80 ff ff $/;"	l
ffff800000101c0b	kernel.asm	/^ffff800000101c0b:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000101c12	kernel.asm	/^ffff800000101c12:	80 ff ff $/;"	l
ffff800000101c15	kernel.asm	/^ffff800000101c15:	ff d0                	callq  *%rax$/;"	l
ffff800000101c17	kernel.asm	/^ffff800000101c17:	e9 b9 00 00 00       	jmpq   ffff800000101cd5 <fileclose+0x133>$/;"	l
ffff800000101c1c	kernel.asm	/^ffff800000101c1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c20	kernel.asm	/^ffff800000101c20:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000101c23	kernel.asm	/^ffff800000101c23:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)$/;"	l
ffff800000101c27	kernel.asm	/^ffff800000101c27:	48 8b 50 08          	mov    0x8(%rax),%rdx$/;"	l
ffff800000101c2b	kernel.asm	/^ffff800000101c2b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000101c2f	kernel.asm	/^ffff800000101c2f:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff800000101c33	kernel.asm	/^ffff800000101c33:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff800000101c37	kernel.asm	/^ffff800000101c37:	48 8b 50 18          	mov    0x18(%rax),%rdx$/;"	l
ffff800000101c3b	kernel.asm	/^ffff800000101c3b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000101c3f	kernel.asm	/^ffff800000101c3f:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff800000101c43	kernel.asm	/^ffff800000101c43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101c47	kernel.asm	/^ffff800000101c47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c4b	kernel.asm	/^ffff800000101c4b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)$/;"	l
ffff800000101c52	kernel.asm	/^ffff800000101c52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c56	kernel.asm	/^ffff800000101c56:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000101c5c	kernel.asm	/^ffff800000101c5c:	48 bf e0 35 11 00 00 	movabs $0xffff8000001135e0,%rdi$/;"	l
ffff800000101c63	kernel.asm	/^ffff800000101c63:	80 ff ff $/;"	l
ffff800000101c66	kernel.asm	/^ffff800000101c66:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000101c6d	kernel.asm	/^ffff800000101c6d:	80 ff ff $/;"	l
ffff800000101c70	kernel.asm	/^ffff800000101c70:	ff d0                	callq  *%rax$/;"	l
ffff800000101c72	kernel.asm	/^ffff800000101c72:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101c75	kernel.asm	/^ffff800000101c75:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101c78	kernel.asm	/^ffff800000101c78:	75 1e                	jne    ffff800000101c98 <fileclose+0xf6>$/;"	l
ffff800000101c7a	kernel.asm	/^ffff800000101c7a:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax$/;"	l
ffff800000101c7e	kernel.asm	/^ffff800000101c7e:	0f be d0             	movsbl %al,%edx$/;"	l
ffff800000101c81	kernel.asm	/^ffff800000101c81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101c85	kernel.asm	/^ffff800000101c85:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000101c87	kernel.asm	/^ffff800000101c87:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101c8a	kernel.asm	/^ffff800000101c8a:	48 b8 a4 5c 10 00 00 	movabs $0xffff800000105ca4,%rax$/;"	l
ffff800000101c91	kernel.asm	/^ffff800000101c91:	80 ff ff $/;"	l
ffff800000101c94	kernel.asm	/^ffff800000101c94:	ff d0                	callq  *%rax$/;"	l
ffff800000101c96	kernel.asm	/^ffff800000101c96:	eb 3d                	jmp    ffff800000101cd5 <fileclose+0x133>$/;"	l
ffff800000101c98	kernel.asm	/^ffff800000101c98:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101c9b	kernel.asm	/^ffff800000101c9b:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101c9e	kernel.asm	/^ffff800000101c9e:	75 35                	jne    ffff800000101cd5 <fileclose+0x133>$/;"	l
ffff800000101ca0	kernel.asm	/^ffff800000101ca0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101ca5	kernel.asm	/^ffff800000101ca5:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000101cac	kernel.asm	/^ffff800000101cac:	80 ff ff $/;"	l
ffff800000101caf	kernel.asm	/^ffff800000101caf:	ff d2                	callq  *%rdx$/;"	l
ffff800000101cb1	kernel.asm	/^ffff800000101cb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101cb5	kernel.asm	/^ffff800000101cb5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101cb8	kernel.asm	/^ffff800000101cb8:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff800000101cbf	kernel.asm	/^ffff800000101cbf:	80 ff ff $/;"	l
ffff800000101cc2	kernel.asm	/^ffff800000101cc2:	ff d0                	callq  *%rax$/;"	l
ffff800000101cc4	kernel.asm	/^ffff800000101cc4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101cc9	kernel.asm	/^ffff800000101cc9:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000101cd0	kernel.asm	/^ffff800000101cd0:	80 ff ff $/;"	l
ffff800000101cd3	kernel.asm	/^ffff800000101cd3:	ff d2                	callq  *%rdx$/;"	l
ffff800000101cd5	kernel.asm	/^ffff800000101cd5:	c9                   	leaveq $/;"	l
ffff800000101cd6	kernel.asm	/^ffff800000101cd6:	c3                   	retq   $/;"	l
ffff800000101cd7	kernel.asm	/^ffff800000101cd7 <filestat>:$/;"	l
ffff800000101cd7	kernel.asm	/^ffff800000101cd7:	55                   	push   %rbp$/;"	l
ffff800000101cd8	kernel.asm	/^ffff800000101cd8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101cdb	kernel.asm	/^ffff800000101cdb:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101cdf	kernel.asm	/^ffff800000101cdf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101ce3	kernel.asm	/^ffff800000101ce3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000101ce7	kernel.asm	/^ffff800000101ce7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ceb	kernel.asm	/^ffff800000101ceb:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101ced	kernel.asm	/^ffff800000101ced:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101cf0	kernel.asm	/^ffff800000101cf0:	75 53                	jne    ffff800000101d45 <filestat+0x6e>$/;"	l
ffff800000101cf2	kernel.asm	/^ffff800000101cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101cf6	kernel.asm	/^ffff800000101cf6:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101cfa	kernel.asm	/^ffff800000101cfa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101cfd	kernel.asm	/^ffff800000101cfd:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000101d04	kernel.asm	/^ffff800000101d04:	80 ff ff $/;"	l
ffff800000101d07	kernel.asm	/^ffff800000101d07:	ff d0                	callq  *%rax$/;"	l
ffff800000101d09	kernel.asm	/^ffff800000101d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d0d	kernel.asm	/^ffff800000101d0d:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d11	kernel.asm	/^ffff800000101d11:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000101d15	kernel.asm	/^ffff800000101d15:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000101d18	kernel.asm	/^ffff800000101d18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101d1b	kernel.asm	/^ffff800000101d1b:	48 b8 b8 2d 10 00 00 	movabs $0xffff800000102db8,%rax$/;"	l
ffff800000101d22	kernel.asm	/^ffff800000101d22:	80 ff ff $/;"	l
ffff800000101d25	kernel.asm	/^ffff800000101d25:	ff d0                	callq  *%rax$/;"	l
ffff800000101d27	kernel.asm	/^ffff800000101d27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d2b	kernel.asm	/^ffff800000101d2b:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d2f	kernel.asm	/^ffff800000101d2f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101d32	kernel.asm	/^ffff800000101d32:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000101d39	kernel.asm	/^ffff800000101d39:	80 ff ff $/;"	l
ffff800000101d3c	kernel.asm	/^ffff800000101d3c:	ff d0                	callq  *%rax$/;"	l
ffff800000101d3e	kernel.asm	/^ffff800000101d3e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101d43	kernel.asm	/^ffff800000101d43:	eb 05                	jmp    ffff800000101d4a <filestat+0x73>$/;"	l
ffff800000101d45	kernel.asm	/^ffff800000101d45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101d4a	kernel.asm	/^ffff800000101d4a:	c9                   	leaveq $/;"	l
ffff800000101d4b	kernel.asm	/^ffff800000101d4b:	c3                   	retq   $/;"	l
ffff800000101d4c	kernel.asm	/^ffff800000101d4c <fileread>:$/;"	l
ffff800000101d4c	kernel.asm	/^ffff800000101d4c:	55                   	push   %rbp$/;"	l
ffff800000101d4d	kernel.asm	/^ffff800000101d4d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101d50	kernel.asm	/^ffff800000101d50:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101d54	kernel.asm	/^ffff800000101d54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101d58	kernel.asm	/^ffff800000101d58:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101d5c	kernel.asm	/^ffff800000101d5c:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101d5f	kernel.asm	/^ffff800000101d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101d63	kernel.asm	/^ffff800000101d63:	0f b6 40 08          	movzbl 0x8(%rax),%eax$/;"	l
ffff800000101d67	kernel.asm	/^ffff800000101d67:	84 c0                	test   %al,%al$/;"	l
ffff800000101d69	kernel.asm	/^ffff800000101d69:	75 0a                	jne    ffff800000101d75 <fileread+0x29>$/;"	l
ffff800000101d6b	kernel.asm	/^ffff800000101d6b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101d70	kernel.asm	/^ffff800000101d70:	e9 c6 00 00 00       	jmpq   ffff800000101e3b <fileread+0xef>$/;"	l
ffff800000101d75	kernel.asm	/^ffff800000101d75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101d79	kernel.asm	/^ffff800000101d79:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101d7b	kernel.asm	/^ffff800000101d7b:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101d7e	kernel.asm	/^ffff800000101d7e:	75 26                	jne    ffff800000101da6 <fileread+0x5a>$/;"	l
ffff800000101d80	kernel.asm	/^ffff800000101d80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101d84	kernel.asm	/^ffff800000101d84:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000101d88	kernel.asm	/^ffff800000101d88:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101d8b	kernel.asm	/^ffff800000101d8b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff800000101d8f	kernel.asm	/^ffff800000101d8f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000101d92	kernel.asm	/^ffff800000101d92:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101d95	kernel.asm	/^ffff800000101d95:	48 b8 b5 5e 10 00 00 	movabs $0xffff800000105eb5,%rax$/;"	l
ffff800000101d9c	kernel.asm	/^ffff800000101d9c:	80 ff ff $/;"	l
ffff800000101d9f	kernel.asm	/^ffff800000101d9f:	ff d0                	callq  *%rax$/;"	l
ffff800000101da1	kernel.asm	/^ffff800000101da1:	e9 95 00 00 00       	jmpq   ffff800000101e3b <fileread+0xef>$/;"	l
ffff800000101da6	kernel.asm	/^ffff800000101da6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101daa	kernel.asm	/^ffff800000101daa:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101dac	kernel.asm	/^ffff800000101dac:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101daf	kernel.asm	/^ffff800000101daf:	75 74                	jne    ffff800000101e25 <fileread+0xd9>$/;"	l
ffff800000101db1	kernel.asm	/^ffff800000101db1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101db5	kernel.asm	/^ffff800000101db5:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101db9	kernel.asm	/^ffff800000101db9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101dbc	kernel.asm	/^ffff800000101dbc:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000101dc3	kernel.asm	/^ffff800000101dc3:	80 ff ff $/;"	l
ffff800000101dc6	kernel.asm	/^ffff800000101dc6:	ff d0                	callq  *%rax$/;"	l
ffff800000101dc8	kernel.asm	/^ffff800000101dc8:	8b 4d dc             	mov    -0x24(%rbp),%ecx$/;"	l
ffff800000101dcb	kernel.asm	/^ffff800000101dcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101dcf	kernel.asm	/^ffff800000101dcf:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101dd2	kernel.asm	/^ffff800000101dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101dd6	kernel.asm	/^ffff800000101dd6:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101dda	kernel.asm	/^ffff800000101dda:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff800000101dde	kernel.asm	/^ffff800000101dde:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101de1	kernel.asm	/^ffff800000101de1:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff800000101de8	kernel.asm	/^ffff800000101de8:	80 ff ff $/;"	l
ffff800000101deb	kernel.asm	/^ffff800000101deb:	ff d0                	callq  *%rax$/;"	l
ffff800000101ded	kernel.asm	/^ffff800000101ded:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000101df0	kernel.asm	/^ffff800000101df0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101df4	kernel.asm	/^ffff800000101df4:	7e 13                	jle    ffff800000101e09 <fileread+0xbd>$/;"	l
ffff800000101df6	kernel.asm	/^ffff800000101df6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101dfa	kernel.asm	/^ffff800000101dfa:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101dfd	kernel.asm	/^ffff800000101dfd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101e00	kernel.asm	/^ffff800000101e00:	01 c2                	add    %eax,%edx$/;"	l
ffff800000101e02	kernel.asm	/^ffff800000101e02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e06	kernel.asm	/^ffff800000101e06:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff800000101e09	kernel.asm	/^ffff800000101e09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e0d	kernel.asm	/^ffff800000101e0d:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e11	kernel.asm	/^ffff800000101e11:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101e14	kernel.asm	/^ffff800000101e14:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000101e1b	kernel.asm	/^ffff800000101e1b:	80 ff ff $/;"	l
ffff800000101e1e	kernel.asm	/^ffff800000101e1e:	ff d0                	callq  *%rax$/;"	l
ffff800000101e20	kernel.asm	/^ffff800000101e20:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101e23	kernel.asm	/^ffff800000101e23:	eb 16                	jmp    ffff800000101e3b <fileread+0xef>$/;"	l
ffff800000101e25	kernel.asm	/^ffff800000101e25:	48 bf 39 bc 10 00 00 	movabs $0xffff80000010bc39,%rdi$/;"	l
ffff800000101e2c	kernel.asm	/^ffff800000101e2c:	80 ff ff $/;"	l
ffff800000101e2f	kernel.asm	/^ffff800000101e2f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101e36	kernel.asm	/^ffff800000101e36:	80 ff ff $/;"	l
ffff800000101e39	kernel.asm	/^ffff800000101e39:	ff d0                	callq  *%rax$/;"	l
ffff800000101e3b	kernel.asm	/^ffff800000101e3b:	c9                   	leaveq $/;"	l
ffff800000101e3c	kernel.asm	/^ffff800000101e3c:	c3                   	retq   $/;"	l
ffff800000101e3d	kernel.asm	/^ffff800000101e3d <filewrite>:$/;"	l
ffff800000101e3d	kernel.asm	/^ffff800000101e3d:	55                   	push   %rbp$/;"	l
ffff800000101e3e	kernel.asm	/^ffff800000101e3e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101e41	kernel.asm	/^ffff800000101e41:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101e45	kernel.asm	/^ffff800000101e45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101e49	kernel.asm	/^ffff800000101e49:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101e4d	kernel.asm	/^ffff800000101e4d:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101e50	kernel.asm	/^ffff800000101e50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e54	kernel.asm	/^ffff800000101e54:	0f b6 40 09          	movzbl 0x9(%rax),%eax$/;"	l
ffff800000101e58	kernel.asm	/^ffff800000101e58:	84 c0                	test   %al,%al$/;"	l
ffff800000101e5a	kernel.asm	/^ffff800000101e5a:	75 0a                	jne    ffff800000101e66 <filewrite+0x29>$/;"	l
ffff800000101e5c	kernel.asm	/^ffff800000101e5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101e61	kernel.asm	/^ffff800000101e61:	e9 67 01 00 00       	jmpq   ffff800000101fcd <filewrite+0x190>$/;"	l
ffff800000101e66	kernel.asm	/^ffff800000101e66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e6a	kernel.asm	/^ffff800000101e6a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101e6c	kernel.asm	/^ffff800000101e6c:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101e6f	kernel.asm	/^ffff800000101e6f:	75 26                	jne    ffff800000101e97 <filewrite+0x5a>$/;"	l
ffff800000101e71	kernel.asm	/^ffff800000101e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e75	kernel.asm	/^ffff800000101e75:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000101e79	kernel.asm	/^ffff800000101e79:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101e7c	kernel.asm	/^ffff800000101e7c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff800000101e80	kernel.asm	/^ffff800000101e80:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000101e83	kernel.asm	/^ffff800000101e83:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101e86	kernel.asm	/^ffff800000101e86:	48 b8 76 5d 10 00 00 	movabs $0xffff800000105d76,%rax$/;"	l
ffff800000101e8d	kernel.asm	/^ffff800000101e8d:	80 ff ff $/;"	l
ffff800000101e90	kernel.asm	/^ffff800000101e90:	ff d0                	callq  *%rax$/;"	l
ffff800000101e92	kernel.asm	/^ffff800000101e92:	e9 36 01 00 00       	jmpq   ffff800000101fcd <filewrite+0x190>$/;"	l
ffff800000101e97	kernel.asm	/^ffff800000101e97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e9b	kernel.asm	/^ffff800000101e9b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101e9d	kernel.asm	/^ffff800000101e9d:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101ea0	kernel.asm	/^ffff800000101ea0:	0f 85 11 01 00 00    	jne    ffff800000101fb7 <filewrite+0x17a>$/;"	l
ffff800000101ea6	kernel.asm	/^ffff800000101ea6:	c7 45 f4 00 1a 00 00 	movl   $0x1a00,-0xc(%rbp)$/;"	l
ffff800000101ead	kernel.asm	/^ffff800000101ead:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101eb4	kernel.asm	/^ffff800000101eb4:	e9 db 00 00 00       	jmpq   ffff800000101f94 <filewrite+0x157>$/;"	l
ffff800000101eb9	kernel.asm	/^ffff800000101eb9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101ebc	kernel.asm	/^ffff800000101ebc:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000101ebf	kernel.asm	/^ffff800000101ebf:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000101ec2	kernel.asm	/^ffff800000101ec2:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000101ec5	kernel.asm	/^ffff800000101ec5:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff800000101ec8	kernel.asm	/^ffff800000101ec8:	7e 06                	jle    ffff800000101ed0 <filewrite+0x93>$/;"	l
ffff800000101eca	kernel.asm	/^ffff800000101eca:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000101ecd	kernel.asm	/^ffff800000101ecd:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000101ed0	kernel.asm	/^ffff800000101ed0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101ed5	kernel.asm	/^ffff800000101ed5:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000101edc	kernel.asm	/^ffff800000101edc:	80 ff ff $/;"	l
ffff800000101edf	kernel.asm	/^ffff800000101edf:	ff d2                	callq  *%rdx$/;"	l
ffff800000101ee1	kernel.asm	/^ffff800000101ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101ee5	kernel.asm	/^ffff800000101ee5:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101ee9	kernel.asm	/^ffff800000101ee9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101eec	kernel.asm	/^ffff800000101eec:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000101ef3	kernel.asm	/^ffff800000101ef3:	80 ff ff $/;"	l
ffff800000101ef6	kernel.asm	/^ffff800000101ef6:	ff d0                	callq  *%rax$/;"	l
ffff800000101ef8	kernel.asm	/^ffff800000101ef8:	8b 4d f8             	mov    -0x8(%rbp),%ecx$/;"	l
ffff800000101efb	kernel.asm	/^ffff800000101efb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101eff	kernel.asm	/^ffff800000101eff:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101f02	kernel.asm	/^ffff800000101f02:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101f05	kernel.asm	/^ffff800000101f05:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff800000101f08	kernel.asm	/^ffff800000101f08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101f0c	kernel.asm	/^ffff800000101f0c:	48 01 c6             	add    %rax,%rsi$/;"	l
ffff800000101f0f	kernel.asm	/^ffff800000101f0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f13	kernel.asm	/^ffff800000101f13:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f17	kernel.asm	/^ffff800000101f17:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f1a	kernel.asm	/^ffff800000101f1a:	48 b8 ed 2f 10 00 00 	movabs $0xffff800000102fed,%rax$/;"	l
ffff800000101f21	kernel.asm	/^ffff800000101f21:	80 ff ff $/;"	l
ffff800000101f24	kernel.asm	/^ffff800000101f24:	ff d0                	callq  *%rax$/;"	l
ffff800000101f26	kernel.asm	/^ffff800000101f26:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000101f29	kernel.asm	/^ffff800000101f29:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000101f2d	kernel.asm	/^ffff800000101f2d:	7e 13                	jle    ffff800000101f42 <filewrite+0x105>$/;"	l
ffff800000101f2f	kernel.asm	/^ffff800000101f2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f33	kernel.asm	/^ffff800000101f33:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101f36	kernel.asm	/^ffff800000101f36:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000101f39	kernel.asm	/^ffff800000101f39:	01 c2                	add    %eax,%edx$/;"	l
ffff800000101f3b	kernel.asm	/^ffff800000101f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f3f	kernel.asm	/^ffff800000101f3f:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff800000101f42	kernel.asm	/^ffff800000101f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f46	kernel.asm	/^ffff800000101f46:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f4a	kernel.asm	/^ffff800000101f4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f4d	kernel.asm	/^ffff800000101f4d:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000101f54	kernel.asm	/^ffff800000101f54:	80 ff ff $/;"	l
ffff800000101f57	kernel.asm	/^ffff800000101f57:	ff d0                	callq  *%rax$/;"	l
ffff800000101f59	kernel.asm	/^ffff800000101f59:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101f5e	kernel.asm	/^ffff800000101f5e:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000101f65	kernel.asm	/^ffff800000101f65:	80 ff ff $/;"	l
ffff800000101f68	kernel.asm	/^ffff800000101f68:	ff d2                	callq  *%rdx$/;"	l
ffff800000101f6a	kernel.asm	/^ffff800000101f6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000101f6e	kernel.asm	/^ffff800000101f6e:	78 32                	js     ffff800000101fa2 <filewrite+0x165>$/;"	l
ffff800000101f70	kernel.asm	/^ffff800000101f70:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000101f73	kernel.asm	/^ffff800000101f73:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000101f76	kernel.asm	/^ffff800000101f76:	74 16                	je     ffff800000101f8e <filewrite+0x151>$/;"	l
ffff800000101f78	kernel.asm	/^ffff800000101f78:	48 bf 42 bc 10 00 00 	movabs $0xffff80000010bc42,%rdi$/;"	l
ffff800000101f7f	kernel.asm	/^ffff800000101f7f:	80 ff ff $/;"	l
ffff800000101f82	kernel.asm	/^ffff800000101f82:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101f89	kernel.asm	/^ffff800000101f89:	80 ff ff $/;"	l
ffff800000101f8c	kernel.asm	/^ffff800000101f8c:	ff d0                	callq  *%rax$/;"	l
ffff800000101f8e	kernel.asm	/^ffff800000101f8e:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000101f91	kernel.asm	/^ffff800000101f91:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000101f94	kernel.asm	/^ffff800000101f94:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101f97	kernel.asm	/^ffff800000101f97:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000101f9a	kernel.asm	/^ffff800000101f9a:	0f 8c 19 ff ff ff    	jl     ffff800000101eb9 <filewrite+0x7c>$/;"	l
ffff800000101fa0	kernel.asm	/^ffff800000101fa0:	eb 01                	jmp    ffff800000101fa3 <filewrite+0x166>$/;"	l
ffff800000101fa2	kernel.asm	/^ffff800000101fa2:	90                   	nop$/;"	l
ffff800000101fa3	kernel.asm	/^ffff800000101fa3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101fa6	kernel.asm	/^ffff800000101fa6:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000101fa9	kernel.asm	/^ffff800000101fa9:	75 05                	jne    ffff800000101fb0 <filewrite+0x173>$/;"	l
ffff800000101fab	kernel.asm	/^ffff800000101fab:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101fae	kernel.asm	/^ffff800000101fae:	eb 1d                	jmp    ffff800000101fcd <filewrite+0x190>$/;"	l
ffff800000101fb0	kernel.asm	/^ffff800000101fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101fb5	kernel.asm	/^ffff800000101fb5:	eb 16                	jmp    ffff800000101fcd <filewrite+0x190>$/;"	l
ffff800000101fb7	kernel.asm	/^ffff800000101fb7:	48 bf 52 bc 10 00 00 	movabs $0xffff80000010bc52,%rdi$/;"	l
ffff800000101fbe	kernel.asm	/^ffff800000101fbe:	80 ff ff $/;"	l
ffff800000101fc1	kernel.asm	/^ffff800000101fc1:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101fc8	kernel.asm	/^ffff800000101fc8:	80 ff ff $/;"	l
ffff800000101fcb	kernel.asm	/^ffff800000101fcb:	ff d0                	callq  *%rax$/;"	l
ffff800000101fcd	kernel.asm	/^ffff800000101fcd:	c9                   	leaveq $/;"	l
ffff800000101fce	kernel.asm	/^ffff800000101fce:	c3                   	retq   $/;"	l
ffff800000101fcf	kernel.asm	/^ffff800000101fcf <readsb>:$/;"	l
ffff800000101fcf	kernel.asm	/^ffff800000101fcf:	55                   	push   %rbp$/;"	l
ffff800000101fd0	kernel.asm	/^ffff800000101fd0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101fd3	kernel.asm	/^ffff800000101fd3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000101fd7	kernel.asm	/^ffff800000101fd7:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000101fda	kernel.asm	/^ffff800000101fda:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101fde	kernel.asm	/^ffff800000101fde:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000101fe1	kernel.asm	/^ffff800000101fe1:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000101fe6	kernel.asm	/^ffff800000101fe6:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101fe8	kernel.asm	/^ffff800000101fe8:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000101fef	kernel.asm	/^ffff800000101fef:	80 ff ff $/;"	l
ffff800000101ff2	kernel.asm	/^ffff800000101ff2:	ff d0                	callq  *%rax$/;"	l
ffff800000101ff4	kernel.asm	/^ffff800000101ff4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101ff8	kernel.asm	/^ffff800000101ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ffc	kernel.asm	/^ffff800000101ffc:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000102003	kernel.asm	/^ffff800000102003:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102007	kernel.asm	/^ffff800000102007:	ba 1c 00 00 00       	mov    $0x1c,%edx$/;"	l
ffff80000010200c	kernel.asm	/^ffff80000010200c:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010200f	kernel.asm	/^ffff80000010200f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102012	kernel.asm	/^ffff800000102012:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000102019	kernel.asm	/^ffff800000102019:	80 ff ff $/;"	l
ffff80000010201c	kernel.asm	/^ffff80000010201c:	ff d0                	callq  *%rax$/;"	l
ffff80000010201e	kernel.asm	/^ffff80000010201e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102022	kernel.asm	/^ffff800000102022:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102025	kernel.asm	/^ffff800000102025:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010202c	kernel.asm	/^ffff80000010202c:	80 ff ff $/;"	l
ffff80000010202f	kernel.asm	/^ffff80000010202f:	ff d0                	callq  *%rax$/;"	l
ffff800000102031	kernel.asm	/^ffff800000102031:	90                   	nop$/;"	l
ffff800000102032	kernel.asm	/^ffff800000102032:	c9                   	leaveq $/;"	l
ffff800000102033	kernel.asm	/^ffff800000102033:	c3                   	retq   $/;"	l
ffff800000102034	kernel.asm	/^ffff800000102034 <bzero>:$/;"	l
ffff800000102034	kernel.asm	/^ffff800000102034:	55                   	push   %rbp$/;"	l
ffff800000102035	kernel.asm	/^ffff800000102035:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102038	kernel.asm	/^ffff800000102038:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010203c	kernel.asm	/^ffff80000010203c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff80000010203f	kernel.asm	/^ffff80000010203f:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102042	kernel.asm	/^ffff800000102042:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000102045	kernel.asm	/^ffff800000102045:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102048	kernel.asm	/^ffff800000102048:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010204a	kernel.asm	/^ffff80000010204a:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010204c	kernel.asm	/^ffff80000010204c:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102053	kernel.asm	/^ffff800000102053:	80 ff ff $/;"	l
ffff800000102056	kernel.asm	/^ffff800000102056:	ff d0                	callq  *%rax$/;"	l
ffff800000102058	kernel.asm	/^ffff800000102058:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010205c	kernel.asm	/^ffff80000010205c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102060	kernel.asm	/^ffff800000102060:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102066	kernel.asm	/^ffff800000102066:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff80000010206b	kernel.asm	/^ffff80000010206b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000102070	kernel.asm	/^ffff800000102070:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102073	kernel.asm	/^ffff800000102073:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010207a	kernel.asm	/^ffff80000010207a:	80 ff ff $/;"	l
ffff80000010207d	kernel.asm	/^ffff80000010207d:	ff d0                	callq  *%rax$/;"	l
ffff80000010207f	kernel.asm	/^ffff80000010207f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102083	kernel.asm	/^ffff800000102083:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102086	kernel.asm	/^ffff800000102086:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff80000010208d	kernel.asm	/^ffff80000010208d:	80 ff ff $/;"	l
ffff800000102090	kernel.asm	/^ffff800000102090:	ff d0                	callq  *%rax$/;"	l
ffff800000102092	kernel.asm	/^ffff800000102092:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102096	kernel.asm	/^ffff800000102096:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102099	kernel.asm	/^ffff800000102099:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001020a0	kernel.asm	/^ffff8000001020a0:	80 ff ff $/;"	l
ffff8000001020a3	kernel.asm	/^ffff8000001020a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001020a5	kernel.asm	/^ffff8000001020a5:	90                   	nop$/;"	l
ffff8000001020a6	kernel.asm	/^ffff8000001020a6:	c9                   	leaveq $/;"	l
ffff8000001020a7	kernel.asm	/^ffff8000001020a7:	c3                   	retq   $/;"	l
ffff8000001020a8	kernel.asm	/^ffff8000001020a8 <balloc>:$/;"	l
ffff8000001020a8	kernel.asm	/^ffff8000001020a8:	55                   	push   %rbp$/;"	l
ffff8000001020a9	kernel.asm	/^ffff8000001020a9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001020ac	kernel.asm	/^ffff8000001020ac:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001020b0	kernel.asm	/^ffff8000001020b0:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff8000001020b3	kernel.asm	/^ffff8000001020b3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001020ba	kernel.asm	/^ffff8000001020ba:	00 $/;"	l
ffff8000001020bb	kernel.asm	/^ffff8000001020bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001020c2	kernel.asm	/^ffff8000001020c2:	e9 52 01 00 00       	jmpq   ffff800000102219 <balloc+0x171>$/;"	l
ffff8000001020c7	kernel.asm	/^ffff8000001020c7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001020ca	kernel.asm	/^ffff8000001020ca:	8d 90 ff 0f 00 00    	lea    0xfff(%rax),%edx$/;"	l
ffff8000001020d0	kernel.asm	/^ffff8000001020d0:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001020d2	kernel.asm	/^ffff8000001020d2:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001020d5	kernel.asm	/^ffff8000001020d5:	c1 f8 0c             	sar    $0xc,%eax$/;"	l
ffff8000001020d8	kernel.asm	/^ffff8000001020d8:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001020da	kernel.asm	/^ffff8000001020da:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff8000001020e1	kernel.asm	/^ffff8000001020e1:	80 ff ff $/;"	l
ffff8000001020e4	kernel.asm	/^ffff8000001020e4:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001020e7	kernel.asm	/^ffff8000001020e7:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001020e9	kernel.asm	/^ffff8000001020e9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001020ec	kernel.asm	/^ffff8000001020ec:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001020ee	kernel.asm	/^ffff8000001020ee:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001020f0	kernel.asm	/^ffff8000001020f0:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001020f7	kernel.asm	/^ffff8000001020f7:	80 ff ff $/;"	l
ffff8000001020fa	kernel.asm	/^ffff8000001020fa:	ff d0                	callq  *%rax$/;"	l
ffff8000001020fc	kernel.asm	/^ffff8000001020fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102100	kernel.asm	/^ffff800000102100:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff800000102107	kernel.asm	/^ffff800000102107:	e9 cc 00 00 00       	jmpq   ffff8000001021d8 <balloc+0x130>$/;"	l
ffff80000010210c	kernel.asm	/^ffff80000010210c:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010210f	kernel.asm	/^ffff80000010210f:	99                   	cltd   $/;"	l
ffff800000102110	kernel.asm	/^ffff800000102110:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff800000102113	kernel.asm	/^ffff800000102113:	01 d0                	add    %edx,%eax$/;"	l
ffff800000102115	kernel.asm	/^ffff800000102115:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102118	kernel.asm	/^ffff800000102118:	29 d0                	sub    %edx,%eax$/;"	l
ffff80000010211a	kernel.asm	/^ffff80000010211a:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010211f	kernel.asm	/^ffff80000010211f:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102121	kernel.asm	/^ffff800000102121:	d3 e2                	shl    %cl,%edx$/;"	d
ffff800000102123	kernel.asm	/^ffff800000102123:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000102125	kernel.asm	/^ffff800000102125:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102128	kernel.asm	/^ffff800000102128:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010212b	kernel.asm	/^ffff80000010212b:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff80000010212e	kernel.asm	/^ffff80000010212e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102130	kernel.asm	/^ffff800000102130:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102133	kernel.asm	/^ffff800000102133:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102136	kernel.asm	/^ffff800000102136:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010213a	kernel.asm	/^ffff80000010213a:	48 98                	cltq   $/;"	l
ffff80000010213c	kernel.asm	/^ffff80000010213c:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102143	kernel.asm	/^ffff800000102143:	00 $/;"	l
ffff800000102144	kernel.asm	/^ffff800000102144:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000102147	kernel.asm	/^ffff800000102147:	23 45 ec             	and    -0x14(%rbp),%eax$/;"	l
ffff80000010214a	kernel.asm	/^ffff80000010214a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010214c	kernel.asm	/^ffff80000010214c:	0f 85 82 00 00 00    	jne    ffff8000001021d4 <balloc+0x12c>$/;"	l
ffff800000102152	kernel.asm	/^ffff800000102152:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102155	kernel.asm	/^ffff800000102155:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff800000102158	kernel.asm	/^ffff800000102158:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010215a	kernel.asm	/^ffff80000010215a:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff80000010215d	kernel.asm	/^ffff80000010215d:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102160	kernel.asm	/^ffff800000102160:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102162	kernel.asm	/^ffff800000102162:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000102166	kernel.asm	/^ffff800000102166:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102169	kernel.asm	/^ffff800000102169:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102170	kernel.asm	/^ffff800000102170:	00 $/;"	l
ffff800000102171	kernel.asm	/^ffff800000102171:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102173	kernel.asm	/^ffff800000102173:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102176	kernel.asm	/^ffff800000102176:	09 d0                	or     %edx,%eax$/;"	l
ffff800000102178	kernel.asm	/^ffff800000102178:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010217a	kernel.asm	/^ffff80000010217a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010217e	kernel.asm	/^ffff80000010217e:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102181	kernel.asm	/^ffff800000102181:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff800000102188	kernel.asm	/^ffff800000102188:	00 $/;"	l
ffff800000102189	kernel.asm	/^ffff800000102189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010218d	kernel.asm	/^ffff80000010218d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102190	kernel.asm	/^ffff800000102190:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff800000102197	kernel.asm	/^ffff800000102197:	80 ff ff $/;"	l
ffff80000010219a	kernel.asm	/^ffff80000010219a:	ff d0                	callq  *%rax$/;"	l
ffff80000010219c	kernel.asm	/^ffff80000010219c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001021a0	kernel.asm	/^ffff8000001021a0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001021a3	kernel.asm	/^ffff8000001021a3:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001021aa	kernel.asm	/^ffff8000001021aa:	80 ff ff $/;"	l
ffff8000001021ad	kernel.asm	/^ffff8000001021ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001021af	kernel.asm	/^ffff8000001021af:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001021b2	kernel.asm	/^ffff8000001021b2:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001021b5	kernel.asm	/^ffff8000001021b5:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001021b7	kernel.asm	/^ffff8000001021b7:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001021ba	kernel.asm	/^ffff8000001021ba:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001021bc	kernel.asm	/^ffff8000001021bc:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001021be	kernel.asm	/^ffff8000001021be:	48 b8 34 20 10 00 00 	movabs $0xffff800000102034,%rax$/;"	l
ffff8000001021c5	kernel.asm	/^ffff8000001021c5:	80 ff ff $/;"	l
ffff8000001021c8	kernel.asm	/^ffff8000001021c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001021ca	kernel.asm	/^ffff8000001021ca:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001021cd	kernel.asm	/^ffff8000001021cd:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001021d0	kernel.asm	/^ffff8000001021d0:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001021d2	kernel.asm	/^ffff8000001021d2:	eb 72                	jmp    ffff800000102246 <balloc+0x19e>$/;"	l
ffff8000001021d4	kernel.asm	/^ffff8000001021d4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff8000001021d8	kernel.asm	/^ffff8000001021d8:	81 7d f8 ff 0f 00 00 	cmpl   $0xfff,-0x8(%rbp)$/;"	l
ffff8000001021df	kernel.asm	/^ffff8000001021df:	7f 1e                	jg     ffff8000001021ff <balloc+0x157>$/;"	l
ffff8000001021e1	kernel.asm	/^ffff8000001021e1:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001021e4	kernel.asm	/^ffff8000001021e4:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001021e7	kernel.asm	/^ffff8000001021e7:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001021e9	kernel.asm	/^ffff8000001021e9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001021eb	kernel.asm	/^ffff8000001021eb:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff8000001021f2	kernel.asm	/^ffff8000001021f2:	80 ff ff $/;"	l
ffff8000001021f5	kernel.asm	/^ffff8000001021f5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001021f7	kernel.asm	/^ffff8000001021f7:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001021f9	kernel.asm	/^ffff8000001021f9:	0f 82 0d ff ff ff    	jb     ffff80000010210c <balloc+0x64>$/;"	l
ffff8000001021ff	kernel.asm	/^ffff8000001021ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102203	kernel.asm	/^ffff800000102203:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102206	kernel.asm	/^ffff800000102206:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010220d	kernel.asm	/^ffff80000010220d:	80 ff ff $/;"	l
ffff800000102210	kernel.asm	/^ffff800000102210:	ff d0                	callq  *%rax$/;"	l
ffff800000102212	kernel.asm	/^ffff800000102212:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff800000102219	kernel.asm	/^ffff800000102219:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff800000102220	kernel.asm	/^ffff800000102220:	80 ff ff $/;"	l
ffff800000102223	kernel.asm	/^ffff800000102223:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000102225	kernel.asm	/^ffff800000102225:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102228	kernel.asm	/^ffff800000102228:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010222a	kernel.asm	/^ffff80000010222a:	0f 87 97 fe ff ff    	ja     ffff8000001020c7 <balloc+0x1f>$/;"	l
ffff800000102230	kernel.asm	/^ffff800000102230:	48 bf 5c bc 10 00 00 	movabs $0xffff80000010bc5c,%rdi$/;"	l
ffff800000102237	kernel.asm	/^ffff800000102237:	80 ff ff $/;"	l
ffff80000010223a	kernel.asm	/^ffff80000010223a:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102241	kernel.asm	/^ffff800000102241:	80 ff ff $/;"	l
ffff800000102244	kernel.asm	/^ffff800000102244:	ff d0                	callq  *%rax$/;"	l
ffff800000102246	kernel.asm	/^ffff800000102246:	c9                   	leaveq $/;"	l
ffff800000102247	kernel.asm	/^ffff800000102247:	c3                   	retq   $/;"	l
ffff800000102248	kernel.asm	/^ffff800000102248 <bfree>:$/;"	l
ffff800000102248	kernel.asm	/^ffff800000102248:	55                   	push   %rbp$/;"	l
ffff800000102249	kernel.asm	/^ffff800000102249:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010224c	kernel.asm	/^ffff80000010224c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102250	kernel.asm	/^ffff800000102250:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102253	kernel.asm	/^ffff800000102253:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102256	kernel.asm	/^ffff800000102256:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102259	kernel.asm	/^ffff800000102259:	48 be 00 46 11 00 00 	movabs $0xffff800000114600,%rsi$/;"	l
ffff800000102260	kernel.asm	/^ffff800000102260:	80 ff ff $/;"	l
ffff800000102263	kernel.asm	/^ffff800000102263:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102265	kernel.asm	/^ffff800000102265:	48 b8 cf 1f 10 00 00 	movabs $0xffff800000101fcf,%rax$/;"	l
ffff80000010226c	kernel.asm	/^ffff80000010226c:	80 ff ff $/;"	l
ffff80000010226f	kernel.asm	/^ffff80000010226f:	ff d0                	callq  *%rax$/;"	l
ffff800000102271	kernel.asm	/^ffff800000102271:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000102274	kernel.asm	/^ffff800000102274:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff800000102277	kernel.asm	/^ffff800000102277:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102279	kernel.asm	/^ffff800000102279:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff800000102280	kernel.asm	/^ffff800000102280:	80 ff ff $/;"	l
ffff800000102283	kernel.asm	/^ffff800000102283:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000102286	kernel.asm	/^ffff800000102286:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102288	kernel.asm	/^ffff800000102288:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010228b	kernel.asm	/^ffff80000010228b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010228d	kernel.asm	/^ffff80000010228d:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010228f	kernel.asm	/^ffff80000010228f:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102296	kernel.asm	/^ffff800000102296:	80 ff ff $/;"	l
ffff800000102299	kernel.asm	/^ffff800000102299:	ff d0                	callq  *%rax$/;"	l
ffff80000010229b	kernel.asm	/^ffff80000010229b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010229f	kernel.asm	/^ffff80000010229f:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff8000001022a2	kernel.asm	/^ffff8000001022a2:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff8000001022a7	kernel.asm	/^ffff8000001022a7:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001022aa	kernel.asm	/^ffff8000001022aa:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001022ad	kernel.asm	/^ffff8000001022ad:	99                   	cltd   $/;"	l
ffff8000001022ae	kernel.asm	/^ffff8000001022ae:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff8000001022b1	kernel.asm	/^ffff8000001022b1:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001022b3	kernel.asm	/^ffff8000001022b3:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff8000001022b6	kernel.asm	/^ffff8000001022b6:	29 d0                	sub    %edx,%eax$/;"	l
ffff8000001022b8	kernel.asm	/^ffff8000001022b8:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff8000001022bd	kernel.asm	/^ffff8000001022bd:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001022bf	kernel.asm	/^ffff8000001022bf:	d3 e2                	shl    %cl,%edx$/;"	d
ffff8000001022c1	kernel.asm	/^ffff8000001022c1:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001022c3	kernel.asm	/^ffff8000001022c3:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff8000001022c6	kernel.asm	/^ffff8000001022c6:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001022c9	kernel.asm	/^ffff8000001022c9:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff8000001022cc	kernel.asm	/^ffff8000001022cc:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001022ce	kernel.asm	/^ffff8000001022ce:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001022d1	kernel.asm	/^ffff8000001022d1:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff8000001022d4	kernel.asm	/^ffff8000001022d4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001022d8	kernel.asm	/^ffff8000001022d8:	48 98                	cltq   $/;"	l
ffff8000001022da	kernel.asm	/^ffff8000001022da:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff8000001022e1	kernel.asm	/^ffff8000001022e1:	00 $/;"	l
ffff8000001022e2	kernel.asm	/^ffff8000001022e2:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001022e5	kernel.asm	/^ffff8000001022e5:	23 45 f0             	and    -0x10(%rbp),%eax$/;"	l
ffff8000001022e8	kernel.asm	/^ffff8000001022e8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001022ea	kernel.asm	/^ffff8000001022ea:	75 16                	jne    ffff800000102302 <bfree+0xba>$/;"	l
ffff8000001022ec	kernel.asm	/^ffff8000001022ec:	48 bf 72 bc 10 00 00 	movabs $0xffff80000010bc72,%rdi$/;"	l
ffff8000001022f3	kernel.asm	/^ffff8000001022f3:	80 ff ff $/;"	l
ffff8000001022f6	kernel.asm	/^ffff8000001022f6:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001022fd	kernel.asm	/^ffff8000001022fd:	80 ff ff $/;"	l
ffff800000102300	kernel.asm	/^ffff800000102300:	ff d0                	callq  *%rax$/;"	l
ffff800000102302	kernel.asm	/^ffff800000102302:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000102305	kernel.asm	/^ffff800000102305:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff800000102308	kernel.asm	/^ffff800000102308:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010230a	kernel.asm	/^ffff80000010230a:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff80000010230d	kernel.asm	/^ffff80000010230d:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102310	kernel.asm	/^ffff800000102310:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102312	kernel.asm	/^ffff800000102312:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000102316	kernel.asm	/^ffff800000102316:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102319	kernel.asm	/^ffff800000102319:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102320	kernel.asm	/^ffff800000102320:	00 $/;"	l
ffff800000102321	kernel.asm	/^ffff800000102321:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102323	kernel.asm	/^ffff800000102323:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000102326	kernel.asm	/^ffff800000102326:	f7 d0                	not    %eax$/;"	l
ffff800000102328	kernel.asm	/^ffff800000102328:	21 d0                	and    %edx,%eax$/;"	l
ffff80000010232a	kernel.asm	/^ffff80000010232a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010232c	kernel.asm	/^ffff80000010232c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000102330	kernel.asm	/^ffff800000102330:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102333	kernel.asm	/^ffff800000102333:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff80000010233a	kernel.asm	/^ffff80000010233a:	00 $/;"	l
ffff80000010233b	kernel.asm	/^ffff80000010233b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010233f	kernel.asm	/^ffff80000010233f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102342	kernel.asm	/^ffff800000102342:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff800000102349	kernel.asm	/^ffff800000102349:	80 ff ff $/;"	l
ffff80000010234c	kernel.asm	/^ffff80000010234c:	ff d0                	callq  *%rax$/;"	l
ffff80000010234e	kernel.asm	/^ffff80000010234e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102352	kernel.asm	/^ffff800000102352:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102355	kernel.asm	/^ffff800000102355:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010235c	kernel.asm	/^ffff80000010235c:	80 ff ff $/;"	l
ffff80000010235f	kernel.asm	/^ffff80000010235f:	ff d0                	callq  *%rax$/;"	l
ffff800000102361	kernel.asm	/^ffff800000102361:	90                   	nop$/;"	l
ffff800000102362	kernel.asm	/^ffff800000102362:	c9                   	leaveq $/;"	l
ffff800000102363	kernel.asm	/^ffff800000102363:	c3                   	retq   $/;"	l
ffff800000102364	kernel.asm	/^ffff800000102364 <iinit>:$/;"	l
ffff800000102364	kernel.asm	/^ffff800000102364:	55                   	push   %rbp$/;"	l
ffff800000102365	kernel.asm	/^ffff800000102365:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102368	kernel.asm	/^ffff800000102368:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010236c	kernel.asm	/^ffff80000010236c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff80000010236f	kernel.asm	/^ffff80000010236f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102376	kernel.asm	/^ffff800000102376:	48 be 85 bc 10 00 00 	movabs $0xffff80000010bc85,%rsi$/;"	l
ffff80000010237d	kernel.asm	/^ffff80000010237d:	80 ff ff $/;"	l
ffff800000102380	kernel.asm	/^ffff800000102380:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff800000102387	kernel.asm	/^ffff800000102387:	80 ff ff $/;"	l
ffff80000010238a	kernel.asm	/^ffff80000010238a:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000102391	kernel.asm	/^ffff800000102391:	80 ff ff $/;"	l
ffff800000102394	kernel.asm	/^ffff800000102394:	ff d0                	callq  *%rax$/;"	l
ffff800000102396	kernel.asm	/^ffff800000102396:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010239d	kernel.asm	/^ffff80000010239d:	eb 50                	jmp    ffff8000001023ef <iinit+0x8b>$/;"	l
ffff80000010239f	kernel.asm	/^ffff80000010239f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001023a2	kernel.asm	/^ffff8000001023a2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001023a5	kernel.asm	/^ffff8000001023a5:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001023a8	kernel.asm	/^ffff8000001023a8:	48 01 c0             	add    %rax,%rax$/;"	l
ffff8000001023ab	kernel.asm	/^ffff8000001023ab:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001023ae	kernel.asm	/^ffff8000001023ae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001023b5	kernel.asm	/^ffff8000001023b5:	00 $/;"	l
ffff8000001023b6	kernel.asm	/^ffff8000001023b6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001023b9	kernel.asm	/^ffff8000001023b9:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001023bd	kernel.asm	/^ffff8000001023bd:	48 8d 50 70          	lea    0x70(%rax),%rdx$/;"	l
ffff8000001023c1	kernel.asm	/^ffff8000001023c1:	48 b8 20 46 11 00 00 	movabs $0xffff800000114620,%rax$/;"	l
ffff8000001023c8	kernel.asm	/^ffff8000001023c8:	80 ff ff $/;"	l
ffff8000001023cb	kernel.asm	/^ffff8000001023cb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001023ce	kernel.asm	/^ffff8000001023ce:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001023d2	kernel.asm	/^ffff8000001023d2:	48 be 8c bc 10 00 00 	movabs $0xffff80000010bc8c,%rsi$/;"	l
ffff8000001023d9	kernel.asm	/^ffff8000001023d9:	80 ff ff $/;"	l
ffff8000001023dc	kernel.asm	/^ffff8000001023dc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001023df	kernel.asm	/^ffff8000001023df:	48 b8 c4 70 10 00 00 	movabs $0xffff8000001070c4,%rax$/;"	l
ffff8000001023e6	kernel.asm	/^ffff8000001023e6:	80 ff ff $/;"	l
ffff8000001023e9	kernel.asm	/^ffff8000001023e9:	ff d0                	callq  *%rax$/;"	l
ffff8000001023eb	kernel.asm	/^ffff8000001023eb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001023ef	kernel.asm	/^ffff8000001023ef:	83 7d fc 31          	cmpl   $0x31,-0x4(%rbp)$/;"	l
ffff8000001023f3	kernel.asm	/^ffff8000001023f3:	7e aa                	jle    ffff80000010239f <iinit+0x3b>$/;"	l
ffff8000001023f5	kernel.asm	/^ffff8000001023f5:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001023f8	kernel.asm	/^ffff8000001023f8:	48 be 00 46 11 00 00 	movabs $0xffff800000114600,%rsi$/;"	l
ffff8000001023ff	kernel.asm	/^ffff8000001023ff:	80 ff ff $/;"	l
ffff800000102402	kernel.asm	/^ffff800000102402:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102404	kernel.asm	/^ffff800000102404:	48 b8 cf 1f 10 00 00 	movabs $0xffff800000101fcf,%rax$/;"	l
ffff80000010240b	kernel.asm	/^ffff80000010240b:	80 ff ff $/;"	l
ffff80000010240e	kernel.asm	/^ffff80000010240e:	ff d0                	callq  *%rax$/;"	l
ffff800000102410	kernel.asm	/^ffff800000102410:	90                   	nop$/;"	l
ffff800000102411	kernel.asm	/^ffff800000102411:	c9                   	leaveq $/;"	l
ffff800000102412	kernel.asm	/^ffff800000102412:	c3                   	retq   $/;"	l
ffff800000102413	kernel.asm	/^ffff800000102413 <ialloc>:$/;"	l
ffff800000102413	kernel.asm	/^ffff800000102413:	55                   	push   %rbp$/;"	l
ffff800000102414	kernel.asm	/^ffff800000102414:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102417	kernel.asm	/^ffff800000102417:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010241b	kernel.asm	/^ffff80000010241b:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff80000010241e	kernel.asm	/^ffff80000010241e:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000102420	kernel.asm	/^ffff800000102420:	66 89 45 d8          	mov    %ax,-0x28(%rbp)$/;"	l
ffff800000102424	kernel.asm	/^ffff800000102424:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010242b	kernel.asm	/^ffff80000010242b:	e9 d8 00 00 00       	jmpq   ffff800000102508 <ialloc+0xf5>$/;"	l
ffff800000102430	kernel.asm	/^ffff800000102430:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102433	kernel.asm	/^ffff800000102433:	48 98                	cltq   $/;"	l
ffff800000102435	kernel.asm	/^ffff800000102435:	48 c1 e8 03          	shr    $0x3,%rax$/;"	l
ffff800000102439	kernel.asm	/^ffff800000102439:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010243b	kernel.asm	/^ffff80000010243b:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff800000102442	kernel.asm	/^ffff800000102442:	80 ff ff $/;"	l
ffff800000102445	kernel.asm	/^ffff800000102445:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102448	kernel.asm	/^ffff800000102448:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010244a	kernel.asm	/^ffff80000010244a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010244d	kernel.asm	/^ffff80000010244d:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010244f	kernel.asm	/^ffff80000010244f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102451	kernel.asm	/^ffff800000102451:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102458	kernel.asm	/^ffff800000102458:	80 ff ff $/;"	l
ffff80000010245b	kernel.asm	/^ffff80000010245b:	ff d0                	callq  *%rax$/;"	l
ffff80000010245d	kernel.asm	/^ffff80000010245d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102461	kernel.asm	/^ffff800000102461:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102465	kernel.asm	/^ffff800000102465:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff80000010246c	kernel.asm	/^ffff80000010246c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010246f	kernel.asm	/^ffff80000010246f:	48 98                	cltq   $/;"	l
ffff800000102471	kernel.asm	/^ffff800000102471:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102474	kernel.asm	/^ffff800000102474:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff800000102478	kernel.asm	/^ffff800000102478:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010247b	kernel.asm	/^ffff80000010247b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010247f	kernel.asm	/^ffff80000010247f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102483	kernel.asm	/^ffff800000102483:	0f b7 00             	movzwl (%rax),%eax$/;"	l
ffff800000102486	kernel.asm	/^ffff800000102486:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102489	kernel.asm	/^ffff800000102489:	75 66                	jne    ffff8000001024f1 <ialloc+0xde>$/;"	l
ffff80000010248b	kernel.asm	/^ffff80000010248b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010248f	kernel.asm	/^ffff80000010248f:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff800000102494	kernel.asm	/^ffff800000102494:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000102499	kernel.asm	/^ffff800000102499:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010249c	kernel.asm	/^ffff80000010249c:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff8000001024a3	kernel.asm	/^ffff8000001024a3:	80 ff ff $/;"	l
ffff8000001024a6	kernel.asm	/^ffff8000001024a6:	ff d0                	callq  *%rax$/;"	l
ffff8000001024a8	kernel.asm	/^ffff8000001024a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001024ac	kernel.asm	/^ffff8000001024ac:	0f b7 55 d8          	movzwl -0x28(%rbp),%edx$/;"	l
ffff8000001024b0	kernel.asm	/^ffff8000001024b0:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001024b3	kernel.asm	/^ffff8000001024b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001024b7	kernel.asm	/^ffff8000001024b7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001024ba	kernel.asm	/^ffff8000001024ba:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff8000001024c1	kernel.asm	/^ffff8000001024c1:	80 ff ff $/;"	l
ffff8000001024c4	kernel.asm	/^ffff8000001024c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001024c6	kernel.asm	/^ffff8000001024c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001024ca	kernel.asm	/^ffff8000001024ca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001024cd	kernel.asm	/^ffff8000001024cd:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001024d4	kernel.asm	/^ffff8000001024d4:	80 ff ff $/;"	l
ffff8000001024d7	kernel.asm	/^ffff8000001024d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001024d9	kernel.asm	/^ffff8000001024d9:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001024dc	kernel.asm	/^ffff8000001024dc:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001024df	kernel.asm	/^ffff8000001024df:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001024e1	kernel.asm	/^ffff8000001024e1:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001024e3	kernel.asm	/^ffff8000001024e3:	48 b8 4a 26 10 00 00 	movabs $0xffff80000010264a,%rax$/;"	l
ffff8000001024ea	kernel.asm	/^ffff8000001024ea:	80 ff ff $/;"	l
ffff8000001024ed	kernel.asm	/^ffff8000001024ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001024ef	kernel.asm	/^ffff8000001024ef:	eb 45                	jmp    ffff800000102536 <ialloc+0x123>$/;"	l
ffff8000001024f1	kernel.asm	/^ffff8000001024f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001024f5	kernel.asm	/^ffff8000001024f5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001024f8	kernel.asm	/^ffff8000001024f8:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001024ff	kernel.asm	/^ffff8000001024ff:	80 ff ff $/;"	l
ffff800000102502	kernel.asm	/^ffff800000102502:	ff d0                	callq  *%rax$/;"	l
ffff800000102504	kernel.asm	/^ffff800000102504:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000102508	kernel.asm	/^ffff800000102508:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff80000010250f	kernel.asm	/^ffff80000010250f:	80 ff ff $/;"	l
ffff800000102512	kernel.asm	/^ffff800000102512:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000102515	kernel.asm	/^ffff800000102515:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102518	kernel.asm	/^ffff800000102518:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010251a	kernel.asm	/^ffff80000010251a:	0f 87 10 ff ff ff    	ja     ffff800000102430 <ialloc+0x1d>$/;"	l
ffff800000102520	kernel.asm	/^ffff800000102520:	48 bf 92 bc 10 00 00 	movabs $0xffff80000010bc92,%rdi$/;"	l
ffff800000102527	kernel.asm	/^ffff800000102527:	80 ff ff $/;"	l
ffff80000010252a	kernel.asm	/^ffff80000010252a:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102531	kernel.asm	/^ffff800000102531:	80 ff ff $/;"	l
ffff800000102534	kernel.asm	/^ffff800000102534:	ff d0                	callq  *%rax$/;"	l
ffff800000102536	kernel.asm	/^ffff800000102536:	c9                   	leaveq $/;"	l
ffff800000102537	kernel.asm	/^ffff800000102537:	c3                   	retq   $/;"	l
ffff800000102538	kernel.asm	/^ffff800000102538 <iupdate>:$/;"	l
ffff800000102538	kernel.asm	/^ffff800000102538:	55                   	push   %rbp$/;"	l
ffff800000102539	kernel.asm	/^ffff800000102539:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010253c	kernel.asm	/^ffff80000010253c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102540	kernel.asm	/^ffff800000102540:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000102544	kernel.asm	/^ffff800000102544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102548	kernel.asm	/^ffff800000102548:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff80000010254b	kernel.asm	/^ffff80000010254b:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff80000010254e	kernel.asm	/^ffff80000010254e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102550	kernel.asm	/^ffff800000102550:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff800000102557	kernel.asm	/^ffff800000102557:	80 ff ff $/;"	l
ffff80000010255a	kernel.asm	/^ffff80000010255a:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff80000010255d	kernel.asm	/^ffff80000010255d:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010255f	kernel.asm	/^ffff80000010255f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102563	kernel.asm	/^ffff800000102563:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102565	kernel.asm	/^ffff800000102565:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102567	kernel.asm	/^ffff800000102567:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102569	kernel.asm	/^ffff800000102569:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102570	kernel.asm	/^ffff800000102570:	80 ff ff $/;"	l
ffff800000102573	kernel.asm	/^ffff800000102573:	ff d0                	callq  *%rax$/;"	l
ffff800000102575	kernel.asm	/^ffff800000102575:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102579	kernel.asm	/^ffff800000102579:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010257d	kernel.asm	/^ffff80000010257d:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102584	kernel.asm	/^ffff800000102584:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102588	kernel.asm	/^ffff800000102588:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff80000010258b	kernel.asm	/^ffff80000010258b:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010258d	kernel.asm	/^ffff80000010258d:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102590	kernel.asm	/^ffff800000102590:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff800000102594	kernel.asm	/^ffff800000102594:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102597	kernel.asm	/^ffff800000102597:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010259b	kernel.asm	/^ffff80000010259b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010259f	kernel.asm	/^ffff80000010259f:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff8000001025a6	kernel.asm	/^ffff8000001025a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025aa	kernel.asm	/^ffff8000001025aa:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001025ad	kernel.asm	/^ffff8000001025ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001025b1	kernel.asm	/^ffff8000001025b1:	0f b7 90 96 00 00 00 	movzwl 0x96(%rax),%edx$/;"	l
ffff8000001025b8	kernel.asm	/^ffff8000001025b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025bc	kernel.asm	/^ffff8000001025bc:	66 89 50 02          	mov    %dx,0x2(%rax)$/;"	l
ffff8000001025c0	kernel.asm	/^ffff8000001025c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001025c4	kernel.asm	/^ffff8000001025c4:	0f b7 90 98 00 00 00 	movzwl 0x98(%rax),%edx$/;"	l
ffff8000001025cb	kernel.asm	/^ffff8000001025cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025cf	kernel.asm	/^ffff8000001025cf:	66 89 50 04          	mov    %dx,0x4(%rax)$/;"	l
ffff8000001025d3	kernel.asm	/^ffff8000001025d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001025d7	kernel.asm	/^ffff8000001025d7:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff8000001025de	kernel.asm	/^ffff8000001025de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025e2	kernel.asm	/^ffff8000001025e2:	66 89 50 06          	mov    %dx,0x6(%rax)$/;"	l
ffff8000001025e6	kernel.asm	/^ffff8000001025e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001025ea	kernel.asm	/^ffff8000001025ea:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001025f0	kernel.asm	/^ffff8000001025f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025f4	kernel.asm	/^ffff8000001025f4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001025f7	kernel.asm	/^ffff8000001025f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001025fb	kernel.asm	/^ffff8000001025fb:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff800000102602	kernel.asm	/^ffff800000102602:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102606	kernel.asm	/^ffff800000102606:	48 83 c0 0c          	add    $0xc,%rax$/;"	l
ffff80000010260a	kernel.asm	/^ffff80000010260a:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff80000010260f	kernel.asm	/^ffff80000010260f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102612	kernel.asm	/^ffff800000102612:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102615	kernel.asm	/^ffff800000102615:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010261c	kernel.asm	/^ffff80000010261c:	80 ff ff $/;"	l
ffff80000010261f	kernel.asm	/^ffff80000010261f:	ff d0                	callq  *%rax$/;"	l
ffff800000102621	kernel.asm	/^ffff800000102621:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102625	kernel.asm	/^ffff800000102625:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102628	kernel.asm	/^ffff800000102628:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff80000010262f	kernel.asm	/^ffff80000010262f:	80 ff ff $/;"	l
ffff800000102632	kernel.asm	/^ffff800000102632:	ff d0                	callq  *%rax$/;"	l
ffff800000102634	kernel.asm	/^ffff800000102634:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102638	kernel.asm	/^ffff800000102638:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010263b	kernel.asm	/^ffff80000010263b:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102642	kernel.asm	/^ffff800000102642:	80 ff ff $/;"	l
ffff800000102645	kernel.asm	/^ffff800000102645:	ff d0                	callq  *%rax$/;"	l
ffff800000102647	kernel.asm	/^ffff800000102647:	90                   	nop$/;"	l
ffff800000102648	kernel.asm	/^ffff800000102648:	c9                   	leaveq $/;"	l
ffff800000102649	kernel.asm	/^ffff800000102649:	c3                   	retq   $/;"	l
ffff80000010264a	kernel.asm	/^ffff80000010264a <iget>:$/;"	l
ffff80000010264a	kernel.asm	/^ffff80000010264a:	55                   	push   %rbp$/;"	l
ffff80000010264b	kernel.asm	/^ffff80000010264b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010264e	kernel.asm	/^ffff80000010264e:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102652	kernel.asm	/^ffff800000102652:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102655	kernel.asm	/^ffff800000102655:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102658	kernel.asm	/^ffff800000102658:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff80000010265f	kernel.asm	/^ffff80000010265f:	80 ff ff $/;"	l
ffff800000102662	kernel.asm	/^ffff800000102662:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000102669	kernel.asm	/^ffff800000102669:	80 ff ff $/;"	l
ffff80000010266c	kernel.asm	/^ffff80000010266c:	ff d0                	callq  *%rax$/;"	l
ffff80000010266e	kernel.asm	/^ffff80000010266e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102675	kernel.asm	/^ffff800000102675:	00 $/;"	l
ffff800000102676	kernel.asm	/^ffff800000102676:	48 b8 88 46 11 00 00 	movabs $0xffff800000114688,%rax$/;"	l
ffff80000010267d	kernel.asm	/^ffff80000010267d:	80 ff ff $/;"	l
ffff800000102680	kernel.asm	/^ffff800000102680:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102684	kernel.asm	/^ffff800000102684:	eb 74                	jmp    ffff8000001026fa <iget+0xb0>$/;"	l
ffff800000102686	kernel.asm	/^ffff800000102686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010268a	kernel.asm	/^ffff80000010268a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff80000010268d	kernel.asm	/^ffff80000010268d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010268f	kernel.asm	/^ffff80000010268f:	7e 47                	jle    ffff8000001026d8 <iget+0x8e>$/;"	l
ffff800000102691	kernel.asm	/^ffff800000102691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102695	kernel.asm	/^ffff800000102695:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102697	kernel.asm	/^ffff800000102697:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff80000010269a	kernel.asm	/^ffff80000010269a:	75 3c                	jne    ffff8000001026d8 <iget+0x8e>$/;"	l
ffff80000010269c	kernel.asm	/^ffff80000010269c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026a0	kernel.asm	/^ffff8000001026a0:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001026a3	kernel.asm	/^ffff8000001026a3:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff8000001026a6	kernel.asm	/^ffff8000001026a6:	75 30                	jne    ffff8000001026d8 <iget+0x8e>$/;"	l
ffff8000001026a8	kernel.asm	/^ffff8000001026a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026ac	kernel.asm	/^ffff8000001026ac:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001026af	kernel.asm	/^ffff8000001026af:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001026b2	kernel.asm	/^ffff8000001026b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026b6	kernel.asm	/^ffff8000001026b6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001026b9	kernel.asm	/^ffff8000001026b9:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff8000001026c0	kernel.asm	/^ffff8000001026c0:	80 ff ff $/;"	l
ffff8000001026c3	kernel.asm	/^ffff8000001026c3:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001026ca	kernel.asm	/^ffff8000001026ca:	80 ff ff $/;"	l
ffff8000001026cd	kernel.asm	/^ffff8000001026cd:	ff d0                	callq  *%rax$/;"	l
ffff8000001026cf	kernel.asm	/^ffff8000001026cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026d3	kernel.asm	/^ffff8000001026d3:	e9 a1 00 00 00       	jmpq   ffff800000102779 <iget+0x12f>$/;"	l
ffff8000001026d8	kernel.asm	/^ffff8000001026d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001026dd	kernel.asm	/^ffff8000001026dd:	75 13                	jne    ffff8000001026f2 <iget+0xa8>$/;"	l
ffff8000001026df	kernel.asm	/^ffff8000001026df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026e3	kernel.asm	/^ffff8000001026e3:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001026e6	kernel.asm	/^ffff8000001026e6:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001026e8	kernel.asm	/^ffff8000001026e8:	75 08                	jne    ffff8000001026f2 <iget+0xa8>$/;"	l
ffff8000001026ea	kernel.asm	/^ffff8000001026ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001026ee	kernel.asm	/^ffff8000001026ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001026f2	kernel.asm	/^ffff8000001026f2:	48 81 45 f8 d8 00 00 	addq   $0xd8,-0x8(%rbp)$/;"	l
ffff8000001026f9	kernel.asm	/^ffff8000001026f9:	00 $/;"	l
ffff8000001026fa	kernel.asm	/^ffff8000001026fa:	48 b8 b8 70 11 00 00 	movabs $0xffff8000001170b8,%rax$/;"	l
ffff800000102701	kernel.asm	/^ffff800000102701:	80 ff ff $/;"	l
ffff800000102704	kernel.asm	/^ffff800000102704:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000102708	kernel.asm	/^ffff800000102708:	0f 82 78 ff ff ff    	jb     ffff800000102686 <iget+0x3c>$/;"	l
ffff80000010270e	kernel.asm	/^ffff80000010270e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102713	kernel.asm	/^ffff800000102713:	75 16                	jne    ffff80000010272b <iget+0xe1>$/;"	l
ffff800000102715	kernel.asm	/^ffff800000102715:	48 bf a4 bc 10 00 00 	movabs $0xffff80000010bca4,%rdi$/;"	l
ffff80000010271c	kernel.asm	/^ffff80000010271c:	80 ff ff $/;"	l
ffff80000010271f	kernel.asm	/^ffff80000010271f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102726	kernel.asm	/^ffff800000102726:	80 ff ff $/;"	l
ffff800000102729	kernel.asm	/^ffff800000102729:	ff d0                	callq  *%rax$/;"	l
ffff80000010272b	kernel.asm	/^ffff80000010272b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010272f	kernel.asm	/^ffff80000010272f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102733	kernel.asm	/^ffff800000102733:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102737	kernel.asm	/^ffff800000102737:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010273a	kernel.asm	/^ffff80000010273a:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010273c	kernel.asm	/^ffff80000010273c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102740	kernel.asm	/^ffff800000102740:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000102743	kernel.asm	/^ffff800000102743:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000102746	kernel.asm	/^ffff800000102746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010274a	kernel.asm	/^ffff80000010274a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)$/;"	l
ffff800000102751	kernel.asm	/^ffff800000102751:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102755	kernel.asm	/^ffff800000102755:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff80000010275c	kernel.asm	/^ffff80000010275c:	00 00 00 $/;"	l
ffff80000010275f	kernel.asm	/^ffff80000010275f:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff800000102766	kernel.asm	/^ffff800000102766:	80 ff ff $/;"	l
ffff800000102769	kernel.asm	/^ffff800000102769:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000102770	kernel.asm	/^ffff800000102770:	80 ff ff $/;"	l
ffff800000102773	kernel.asm	/^ffff800000102773:	ff d0                	callq  *%rax$/;"	l
ffff800000102775	kernel.asm	/^ffff800000102775:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102779	kernel.asm	/^ffff800000102779:	c9                   	leaveq $/;"	l
ffff80000010277a	kernel.asm	/^ffff80000010277a:	c3                   	retq   $/;"	l
ffff80000010277b	kernel.asm	/^ffff80000010277b <idup>:$/;"	l
ffff80000010277b	kernel.asm	/^ffff80000010277b:	55                   	push   %rbp$/;"	l
ffff80000010277c	kernel.asm	/^ffff80000010277c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010277f	kernel.asm	/^ffff80000010277f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102783	kernel.asm	/^ffff800000102783:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102787	kernel.asm	/^ffff800000102787:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff80000010278e	kernel.asm	/^ffff80000010278e:	80 ff ff $/;"	l
ffff800000102791	kernel.asm	/^ffff800000102791:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000102798	kernel.asm	/^ffff800000102798:	80 ff ff $/;"	l
ffff80000010279b	kernel.asm	/^ffff80000010279b:	ff d0                	callq  *%rax$/;"	l
ffff80000010279d	kernel.asm	/^ffff80000010279d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001027a1	kernel.asm	/^ffff8000001027a1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001027a4	kernel.asm	/^ffff8000001027a4:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001027a7	kernel.asm	/^ffff8000001027a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001027ab	kernel.asm	/^ffff8000001027ab:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001027ae	kernel.asm	/^ffff8000001027ae:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff8000001027b5	kernel.asm	/^ffff8000001027b5:	80 ff ff $/;"	l
ffff8000001027b8	kernel.asm	/^ffff8000001027b8:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001027bf	kernel.asm	/^ffff8000001027bf:	80 ff ff $/;"	l
ffff8000001027c2	kernel.asm	/^ffff8000001027c2:	ff d0                	callq  *%rax$/;"	l
ffff8000001027c4	kernel.asm	/^ffff8000001027c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001027c8	kernel.asm	/^ffff8000001027c8:	c9                   	leaveq $/;"	l
ffff8000001027c9	kernel.asm	/^ffff8000001027c9:	c3                   	retq   $/;"	l
ffff8000001027ca	kernel.asm	/^ffff8000001027ca <ilock>:$/;"	l
ffff8000001027ca	kernel.asm	/^ffff8000001027ca:	55                   	push   %rbp$/;"	l
ffff8000001027cb	kernel.asm	/^ffff8000001027cb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001027ce	kernel.asm	/^ffff8000001027ce:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001027d2	kernel.asm	/^ffff8000001027d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001027d6	kernel.asm	/^ffff8000001027d6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff8000001027db	kernel.asm	/^ffff8000001027db:	74 0b                	je     ffff8000001027e8 <ilock+0x1e>$/;"	l
ffff8000001027dd	kernel.asm	/^ffff8000001027dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027e1	kernel.asm	/^ffff8000001027e1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001027e4	kernel.asm	/^ffff8000001027e4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001027e6	kernel.asm	/^ffff8000001027e6:	7f 16                	jg     ffff8000001027fe <ilock+0x34>$/;"	l
ffff8000001027e8	kernel.asm	/^ffff8000001027e8:	48 bf b4 bc 10 00 00 	movabs $0xffff80000010bcb4,%rdi$/;"	l
ffff8000001027ef	kernel.asm	/^ffff8000001027ef:	80 ff ff $/;"	l
ffff8000001027f2	kernel.asm	/^ffff8000001027f2:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001027f9	kernel.asm	/^ffff8000001027f9:	80 ff ff $/;"	l
ffff8000001027fc	kernel.asm	/^ffff8000001027fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001027fe	kernel.asm	/^ffff8000001027fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102802	kernel.asm	/^ffff800000102802:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102806	kernel.asm	/^ffff800000102806:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102809	kernel.asm	/^ffff800000102809:	48 b8 19 71 10 00 00 	movabs $0xffff800000107119,%rax$/;"	l
ffff800000102810	kernel.asm	/^ffff800000102810:	80 ff ff $/;"	l
ffff800000102813	kernel.asm	/^ffff800000102813:	ff d0                	callq  *%rax$/;"	l
ffff800000102815	kernel.asm	/^ffff800000102815:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102819	kernel.asm	/^ffff800000102819:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010281f	kernel.asm	/^ffff80000010281f:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102822	kernel.asm	/^ffff800000102822:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102824	kernel.asm	/^ffff800000102824:	0f 85 2e 01 00 00    	jne    ffff800000102958 <ilock+0x18e>$/;"	l
ffff80000010282a	kernel.asm	/^ffff80000010282a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010282e	kernel.asm	/^ffff80000010282e:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102831	kernel.asm	/^ffff800000102831:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff800000102834	kernel.asm	/^ffff800000102834:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102836	kernel.asm	/^ffff800000102836:	48 b8 00 46 11 00 00 	movabs $0xffff800000114600,%rax$/;"	l
ffff80000010283d	kernel.asm	/^ffff80000010283d:	80 ff ff $/;"	l
ffff800000102840	kernel.asm	/^ffff800000102840:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102843	kernel.asm	/^ffff800000102843:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102845	kernel.asm	/^ffff800000102845:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102849	kernel.asm	/^ffff800000102849:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010284b	kernel.asm	/^ffff80000010284b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010284d	kernel.asm	/^ffff80000010284d:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010284f	kernel.asm	/^ffff80000010284f:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102856	kernel.asm	/^ffff800000102856:	80 ff ff $/;"	l
ffff800000102859	kernel.asm	/^ffff800000102859:	ff d0                	callq  *%rax$/;"	l
ffff80000010285b	kernel.asm	/^ffff80000010285b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010285f	kernel.asm	/^ffff80000010285f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102863	kernel.asm	/^ffff800000102863:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff80000010286a	kernel.asm	/^ffff80000010286a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010286e	kernel.asm	/^ffff80000010286e:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102871	kernel.asm	/^ffff800000102871:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000102873	kernel.asm	/^ffff800000102873:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102876	kernel.asm	/^ffff800000102876:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff80000010287a	kernel.asm	/^ffff80000010287a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010287d	kernel.asm	/^ffff80000010287d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102881	kernel.asm	/^ffff800000102881:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102885	kernel.asm	/^ffff800000102885:	0f b7 10             	movzwl (%rax),%edx$/;"	l
ffff800000102888	kernel.asm	/^ffff800000102888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010288c	kernel.asm	/^ffff80000010288c:	66 89 90 94 00 00 00 	mov    %dx,0x94(%rax)$/;"	l
ffff800000102893	kernel.asm	/^ffff800000102893:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102897	kernel.asm	/^ffff800000102897:	0f b7 50 02          	movzwl 0x2(%rax),%edx$/;"	l
ffff80000010289b	kernel.asm	/^ffff80000010289b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010289f	kernel.asm	/^ffff80000010289f:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff8000001028a6	kernel.asm	/^ffff8000001028a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028aa	kernel.asm	/^ffff8000001028aa:	0f b7 50 04          	movzwl 0x4(%rax),%edx$/;"	l
ffff8000001028ae	kernel.asm	/^ffff8000001028ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001028b2	kernel.asm	/^ffff8000001028b2:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff8000001028b9	kernel.asm	/^ffff8000001028b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028bd	kernel.asm	/^ffff8000001028bd:	0f b7 50 06          	movzwl 0x6(%rax),%edx$/;"	l
ffff8000001028c1	kernel.asm	/^ffff8000001028c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001028c5	kernel.asm	/^ffff8000001028c5:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001028cc	kernel.asm	/^ffff8000001028cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028d0	kernel.asm	/^ffff8000001028d0:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff8000001028d3	kernel.asm	/^ffff8000001028d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001028d7	kernel.asm	/^ffff8000001028d7:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff8000001028dd	kernel.asm	/^ffff8000001028dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028e1	kernel.asm	/^ffff8000001028e1:	48 8d 48 0c          	lea    0xc(%rax),%rcx$/;"	l
ffff8000001028e5	kernel.asm	/^ffff8000001028e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001028e9	kernel.asm	/^ffff8000001028e9:	48 05 a0 00 00 00    	add    $0xa0,%rax$/;"	l
ffff8000001028ef	kernel.asm	/^ffff8000001028ef:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff8000001028f4	kernel.asm	/^ffff8000001028f4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001028f7	kernel.asm	/^ffff8000001028f7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001028fa	kernel.asm	/^ffff8000001028fa:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000102901	kernel.asm	/^ffff800000102901:	80 ff ff $/;"	l
ffff800000102904	kernel.asm	/^ffff800000102904:	ff d0                	callq  *%rax$/;"	l
ffff800000102906	kernel.asm	/^ffff800000102906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010290a	kernel.asm	/^ffff80000010290a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010290d	kernel.asm	/^ffff80000010290d:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102914	kernel.asm	/^ffff800000102914:	80 ff ff $/;"	l
ffff800000102917	kernel.asm	/^ffff800000102917:	ff d0                	callq  *%rax$/;"	l
ffff800000102919	kernel.asm	/^ffff800000102919:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010291d	kernel.asm	/^ffff80000010291d:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102923	kernel.asm	/^ffff800000102923:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000102926	kernel.asm	/^ffff800000102926:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102928	kernel.asm	/^ffff800000102928:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010292c	kernel.asm	/^ffff80000010292c:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff800000102932	kernel.asm	/^ffff800000102932:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102936	kernel.asm	/^ffff800000102936:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010293d	kernel.asm	/^ffff80000010293d:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102940	kernel.asm	/^ffff800000102940:	75 16                	jne    ffff800000102958 <ilock+0x18e>$/;"	l
ffff800000102942	kernel.asm	/^ffff800000102942:	48 bf ba bc 10 00 00 	movabs $0xffff80000010bcba,%rdi$/;"	l
ffff800000102949	kernel.asm	/^ffff800000102949:	80 ff ff $/;"	l
ffff80000010294c	kernel.asm	/^ffff80000010294c:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102953	kernel.asm	/^ffff800000102953:	80 ff ff $/;"	l
ffff800000102956	kernel.asm	/^ffff800000102956:	ff d0                	callq  *%rax$/;"	l
ffff800000102958	kernel.asm	/^ffff800000102958:	90                   	nop$/;"	l
ffff800000102959	kernel.asm	/^ffff800000102959:	c9                   	leaveq $/;"	l
ffff80000010295a	kernel.asm	/^ffff80000010295a:	c3                   	retq   $/;"	l
ffff80000010295b	kernel.asm	/^ffff80000010295b <iunlock>:$/;"	l
ffff80000010295b	kernel.asm	/^ffff80000010295b:	55                   	push   %rbp$/;"	l
ffff80000010295c	kernel.asm	/^ffff80000010295c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010295f	kernel.asm	/^ffff80000010295f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102963	kernel.asm	/^ffff800000102963:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102967	kernel.asm	/^ffff800000102967:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010296c	kernel.asm	/^ffff80000010296c:	74 26                	je     ffff800000102994 <iunlock+0x39>$/;"	l
ffff80000010296e	kernel.asm	/^ffff80000010296e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102972	kernel.asm	/^ffff800000102972:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102976	kernel.asm	/^ffff800000102976:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102979	kernel.asm	/^ffff800000102979:	48 b8 04 72 10 00 00 	movabs $0xffff800000107204,%rax$/;"	l
ffff800000102980	kernel.asm	/^ffff800000102980:	80 ff ff $/;"	l
ffff800000102983	kernel.asm	/^ffff800000102983:	ff d0                	callq  *%rax$/;"	l
ffff800000102985	kernel.asm	/^ffff800000102985:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102987	kernel.asm	/^ffff800000102987:	74 0b                	je     ffff800000102994 <iunlock+0x39>$/;"	l
ffff800000102989	kernel.asm	/^ffff800000102989:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010298d	kernel.asm	/^ffff80000010298d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102990	kernel.asm	/^ffff800000102990:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102992	kernel.asm	/^ffff800000102992:	7f 16                	jg     ffff8000001029aa <iunlock+0x4f>$/;"	l
ffff800000102994	kernel.asm	/^ffff800000102994:	48 bf c9 bc 10 00 00 	movabs $0xffff80000010bcc9,%rdi$/;"	l
ffff80000010299b	kernel.asm	/^ffff80000010299b:	80 ff ff $/;"	l
ffff80000010299e	kernel.asm	/^ffff80000010299e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001029a5	kernel.asm	/^ffff8000001029a5:	80 ff ff $/;"	l
ffff8000001029a8	kernel.asm	/^ffff8000001029a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001029aa	kernel.asm	/^ffff8000001029aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029ae	kernel.asm	/^ffff8000001029ae:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001029b2	kernel.asm	/^ffff8000001029b2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001029b5	kernel.asm	/^ffff8000001029b5:	48 b8 9f 71 10 00 00 	movabs $0xffff80000010719f,%rax$/;"	l
ffff8000001029bc	kernel.asm	/^ffff8000001029bc:	80 ff ff $/;"	l
ffff8000001029bf	kernel.asm	/^ffff8000001029bf:	ff d0                	callq  *%rax$/;"	l
ffff8000001029c1	kernel.asm	/^ffff8000001029c1:	90                   	nop$/;"	l
ffff8000001029c2	kernel.asm	/^ffff8000001029c2:	c9                   	leaveq $/;"	l
ffff8000001029c3	kernel.asm	/^ffff8000001029c3:	c3                   	retq   $/;"	l
ffff8000001029c4	kernel.asm	/^ffff8000001029c4 <iput>:$/;"	l
ffff8000001029c4	kernel.asm	/^ffff8000001029c4:	55                   	push   %rbp$/;"	l
ffff8000001029c5	kernel.asm	/^ffff8000001029c5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001029c8	kernel.asm	/^ffff8000001029c8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001029cc	kernel.asm	/^ffff8000001029cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001029d0	kernel.asm	/^ffff8000001029d0:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff8000001029d7	kernel.asm	/^ffff8000001029d7:	80 ff ff $/;"	l
ffff8000001029da	kernel.asm	/^ffff8000001029da:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001029e1	kernel.asm	/^ffff8000001029e1:	80 ff ff $/;"	l
ffff8000001029e4	kernel.asm	/^ffff8000001029e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001029e6	kernel.asm	/^ffff8000001029e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029ea	kernel.asm	/^ffff8000001029ea:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001029ed	kernel.asm	/^ffff8000001029ed:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff8000001029f0	kernel.asm	/^ffff8000001029f0:	0f 85 8e 00 00 00    	jne    ffff800000102a84 <iput+0xc0>$/;"	l
ffff8000001029f6	kernel.asm	/^ffff8000001029f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029fa	kernel.asm	/^ffff8000001029fa:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102a00	kernel.asm	/^ffff800000102a00:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102a03	kernel.asm	/^ffff800000102a03:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102a05	kernel.asm	/^ffff800000102a05:	74 7d                	je     ffff800000102a84 <iput+0xc0>$/;"	l
ffff800000102a07	kernel.asm	/^ffff800000102a07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a0b	kernel.asm	/^ffff800000102a0b:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000102a12	kernel.asm	/^ffff800000102a12:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102a15	kernel.asm	/^ffff800000102a15:	75 6d                	jne    ffff800000102a84 <iput+0xc0>$/;"	l
ffff800000102a17	kernel.asm	/^ffff800000102a17:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff800000102a1e	kernel.asm	/^ffff800000102a1e:	80 ff ff $/;"	l
ffff800000102a21	kernel.asm	/^ffff800000102a21:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000102a28	kernel.asm	/^ffff800000102a28:	80 ff ff $/;"	l
ffff800000102a2b	kernel.asm	/^ffff800000102a2b:	ff d0                	callq  *%rax$/;"	l
ffff800000102a2d	kernel.asm	/^ffff800000102a2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a31	kernel.asm	/^ffff800000102a31:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102a34	kernel.asm	/^ffff800000102a34:	48 b8 44 2c 10 00 00 	movabs $0xffff800000102c44,%rax$/;"	l
ffff800000102a3b	kernel.asm	/^ffff800000102a3b:	80 ff ff $/;"	l
ffff800000102a3e	kernel.asm	/^ffff800000102a3e:	ff d0                	callq  *%rax$/;"	l
ffff800000102a40	kernel.asm	/^ffff800000102a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a44	kernel.asm	/^ffff800000102a44:	66 c7 80 94 00 00 00 	movw   $0x0,0x94(%rax)$/;"	l
ffff800000102a4b	kernel.asm	/^ffff800000102a4b:	00 00 $/;"	l
ffff800000102a4d	kernel.asm	/^ffff800000102a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a51	kernel.asm	/^ffff800000102a51:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102a54	kernel.asm	/^ffff800000102a54:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000102a5b	kernel.asm	/^ffff800000102a5b:	80 ff ff $/;"	l
ffff800000102a5e	kernel.asm	/^ffff800000102a5e:	ff d0                	callq  *%rax$/;"	l
ffff800000102a60	kernel.asm	/^ffff800000102a60:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff800000102a67	kernel.asm	/^ffff800000102a67:	80 ff ff $/;"	l
ffff800000102a6a	kernel.asm	/^ffff800000102a6a:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000102a71	kernel.asm	/^ffff800000102a71:	80 ff ff $/;"	l
ffff800000102a74	kernel.asm	/^ffff800000102a74:	ff d0                	callq  *%rax$/;"	l
ffff800000102a76	kernel.asm	/^ffff800000102a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a7a	kernel.asm	/^ffff800000102a7a:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff800000102a81	kernel.asm	/^ffff800000102a81:	00 00 00 $/;"	l
ffff800000102a84	kernel.asm	/^ffff800000102a84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a88	kernel.asm	/^ffff800000102a88:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102a8b	kernel.asm	/^ffff800000102a8b:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000102a8e	kernel.asm	/^ffff800000102a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a92	kernel.asm	/^ffff800000102a92:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102a95	kernel.asm	/^ffff800000102a95:	48 bf 20 46 11 00 00 	movabs $0xffff800000114620,%rdi$/;"	l
ffff800000102a9c	kernel.asm	/^ffff800000102a9c:	80 ff ff $/;"	l
ffff800000102a9f	kernel.asm	/^ffff800000102a9f:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000102aa6	kernel.asm	/^ffff800000102aa6:	80 ff ff $/;"	l
ffff800000102aa9	kernel.asm	/^ffff800000102aa9:	ff d0                	callq  *%rax$/;"	l
ffff800000102aab	kernel.asm	/^ffff800000102aab:	90                   	nop$/;"	l
ffff800000102aac	kernel.asm	/^ffff800000102aac:	c9                   	leaveq $/;"	l
ffff800000102aad	kernel.asm	/^ffff800000102aad:	c3                   	retq   $/;"	l
ffff800000102aae	kernel.asm	/^ffff800000102aae <iunlockput>:$/;"	l
ffff800000102aae	kernel.asm	/^ffff800000102aae:	55                   	push   %rbp$/;"	l
ffff800000102aaf	kernel.asm	/^ffff800000102aaf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102ab2	kernel.asm	/^ffff800000102ab2:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102ab6	kernel.asm	/^ffff800000102ab6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102aba	kernel.asm	/^ffff800000102aba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102abe	kernel.asm	/^ffff800000102abe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102ac1	kernel.asm	/^ffff800000102ac1:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000102ac8	kernel.asm	/^ffff800000102ac8:	80 ff ff $/;"	l
ffff800000102acb	kernel.asm	/^ffff800000102acb:	ff d0                	callq  *%rax$/;"	l
ffff800000102acd	kernel.asm	/^ffff800000102acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ad1	kernel.asm	/^ffff800000102ad1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102ad4	kernel.asm	/^ffff800000102ad4:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff800000102adb	kernel.asm	/^ffff800000102adb:	80 ff ff $/;"	l
ffff800000102ade	kernel.asm	/^ffff800000102ade:	ff d0                	callq  *%rax$/;"	l
ffff800000102ae0	kernel.asm	/^ffff800000102ae0:	90                   	nop$/;"	l
ffff800000102ae1	kernel.asm	/^ffff800000102ae1:	c9                   	leaveq $/;"	l
ffff800000102ae2	kernel.asm	/^ffff800000102ae2:	c3                   	retq   $/;"	l
ffff800000102ae3	kernel.asm	/^ffff800000102ae3 <bmap>:$/;"	l
ffff800000102ae3	kernel.asm	/^ffff800000102ae3:	55                   	push   %rbp$/;"	l
ffff800000102ae4	kernel.asm	/^ffff800000102ae4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102ae7	kernel.asm	/^ffff800000102ae7:	53                   	push   %rbx$/;"	l
ffff800000102ae8	kernel.asm	/^ffff800000102ae8:	48 83 ec 38          	sub    $0x38,%rsp$/;"	l
ffff800000102aec	kernel.asm	/^ffff800000102aec:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000102af0	kernel.asm	/^ffff800000102af0:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff800000102af3	kernel.asm	/^ffff800000102af3:	83 7d c4 0b          	cmpl   $0xb,-0x3c(%rbp)$/;"	l
ffff800000102af7	kernel.asm	/^ffff800000102af7:	77 47                	ja     ffff800000102b40 <bmap+0x5d>$/;"	l
ffff800000102af9	kernel.asm	/^ffff800000102af9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102afd	kernel.asm	/^ffff800000102afd:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102b00	kernel.asm	/^ffff800000102b00:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102b04	kernel.asm	/^ffff800000102b04:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102b07	kernel.asm	/^ffff800000102b07:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102b0a	kernel.asm	/^ffff800000102b0a:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102b0e	kernel.asm	/^ffff800000102b0e:	75 28                	jne    ffff800000102b38 <bmap+0x55>$/;"	l
ffff800000102b10	kernel.asm	/^ffff800000102b10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b14	kernel.asm	/^ffff800000102b14:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102b16	kernel.asm	/^ffff800000102b16:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102b18	kernel.asm	/^ffff800000102b18:	48 b8 a8 20 10 00 00 	movabs $0xffff8000001020a8,%rax$/;"	l
ffff800000102b1f	kernel.asm	/^ffff800000102b1f:	80 ff ff $/;"	l
ffff800000102b22	kernel.asm	/^ffff800000102b22:	ff d0                	callq  *%rax$/;"	l
ffff800000102b24	kernel.asm	/^ffff800000102b24:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102b27	kernel.asm	/^ffff800000102b27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b2b	kernel.asm	/^ffff800000102b2b:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102b2e	kernel.asm	/^ffff800000102b2e:	48 8d 4a 28          	lea    0x28(%rdx),%rcx$/;"	l
ffff800000102b32	kernel.asm	/^ffff800000102b32:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102b35	kernel.asm	/^ffff800000102b35:	89 14 88             	mov    %edx,(%rax,%rcx,4)$/;"	l
ffff800000102b38	kernel.asm	/^ffff800000102b38:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102b3b	kernel.asm	/^ffff800000102b3b:	e9 fd 00 00 00       	jmpq   ffff800000102c3d <bmap+0x15a>$/;"	l
ffff800000102b40	kernel.asm	/^ffff800000102b40:	83 6d c4 0c          	subl   $0xc,-0x3c(%rbp)$/;"	l
ffff800000102b44	kernel.asm	/^ffff800000102b44:	83 7d c4 7f          	cmpl   $0x7f,-0x3c(%rbp)$/;"	l
ffff800000102b48	kernel.asm	/^ffff800000102b48:	0f 87 d9 00 00 00    	ja     ffff800000102c27 <bmap+0x144>$/;"	l
ffff800000102b4e	kernel.asm	/^ffff800000102b4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b52	kernel.asm	/^ffff800000102b52:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102b58	kernel.asm	/^ffff800000102b58:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102b5b	kernel.asm	/^ffff800000102b5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102b5f	kernel.asm	/^ffff800000102b5f:	75 24                	jne    ffff800000102b85 <bmap+0xa2>$/;"	l
ffff800000102b61	kernel.asm	/^ffff800000102b61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b65	kernel.asm	/^ffff800000102b65:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102b67	kernel.asm	/^ffff800000102b67:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102b69	kernel.asm	/^ffff800000102b69:	48 b8 a8 20 10 00 00 	movabs $0xffff8000001020a8,%rax$/;"	l
ffff800000102b70	kernel.asm	/^ffff800000102b70:	80 ff ff $/;"	l
ffff800000102b73	kernel.asm	/^ffff800000102b73:	ff d0                	callq  *%rax$/;"	l
ffff800000102b75	kernel.asm	/^ffff800000102b75:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102b78	kernel.asm	/^ffff800000102b78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b7c	kernel.asm	/^ffff800000102b7c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102b7f	kernel.asm	/^ffff800000102b7f:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)$/;"	l
ffff800000102b85	kernel.asm	/^ffff800000102b85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102b89	kernel.asm	/^ffff800000102b89:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102b8b	kernel.asm	/^ffff800000102b8b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102b8e	kernel.asm	/^ffff800000102b8e:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102b90	kernel.asm	/^ffff800000102b90:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102b92	kernel.asm	/^ffff800000102b92:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102b99	kernel.asm	/^ffff800000102b99:	80 ff ff $/;"	l
ffff800000102b9c	kernel.asm	/^ffff800000102b9c:	ff d0                	callq  *%rax$/;"	l
ffff800000102b9e	kernel.asm	/^ffff800000102b9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff800000102ba2	kernel.asm	/^ffff800000102ba2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102ba6	kernel.asm	/^ffff800000102ba6:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102bac	kernel.asm	/^ffff800000102bac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000102bb0	kernel.asm	/^ffff800000102bb0:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102bb3	kernel.asm	/^ffff800000102bb3:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102bba	kernel.asm	/^ffff800000102bba:	00 $/;"	l
ffff800000102bbb	kernel.asm	/^ffff800000102bbb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102bbf	kernel.asm	/^ffff800000102bbf:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102bc2	kernel.asm	/^ffff800000102bc2:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102bc4	kernel.asm	/^ffff800000102bc4:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102bc7	kernel.asm	/^ffff800000102bc7:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102bcb	kernel.asm	/^ffff800000102bcb:	75 42                	jne    ffff800000102c0f <bmap+0x12c>$/;"	l
ffff800000102bcd	kernel.asm	/^ffff800000102bcd:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102bd0	kernel.asm	/^ffff800000102bd0:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102bd7	kernel.asm	/^ffff800000102bd7:	00 $/;"	l
ffff800000102bd8	kernel.asm	/^ffff800000102bd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102bdc	kernel.asm	/^ffff800000102bdc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx$/;"	l
ffff800000102be0	kernel.asm	/^ffff800000102be0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102be4	kernel.asm	/^ffff800000102be4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102be6	kernel.asm	/^ffff800000102be6:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102be8	kernel.asm	/^ffff800000102be8:	48 b8 a8 20 10 00 00 	movabs $0xffff8000001020a8,%rax$/;"	l
ffff800000102bef	kernel.asm	/^ffff800000102bef:	80 ff ff $/;"	l
ffff800000102bf2	kernel.asm	/^ffff800000102bf2:	ff d0                	callq  *%rax$/;"	l
ffff800000102bf4	kernel.asm	/^ffff800000102bf4:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102bf7	kernel.asm	/^ffff800000102bf7:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102bfa	kernel.asm	/^ffff800000102bfa:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff800000102bfc	kernel.asm	/^ffff800000102bfc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102c00	kernel.asm	/^ffff800000102c00:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102c03	kernel.asm	/^ffff800000102c03:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff800000102c0a	kernel.asm	/^ffff800000102c0a:	80 ff ff $/;"	l
ffff800000102c0d	kernel.asm	/^ffff800000102c0d:	ff d0                	callq  *%rax$/;"	l
ffff800000102c0f	kernel.asm	/^ffff800000102c0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102c13	kernel.asm	/^ffff800000102c13:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102c16	kernel.asm	/^ffff800000102c16:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102c1d	kernel.asm	/^ffff800000102c1d:	80 ff ff $/;"	l
ffff800000102c20	kernel.asm	/^ffff800000102c20:	ff d0                	callq  *%rax$/;"	l
ffff800000102c22	kernel.asm	/^ffff800000102c22:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102c25	kernel.asm	/^ffff800000102c25:	eb 16                	jmp    ffff800000102c3d <bmap+0x15a>$/;"	l
ffff800000102c27	kernel.asm	/^ffff800000102c27:	48 bf d1 bc 10 00 00 	movabs $0xffff80000010bcd1,%rdi$/;"	l
ffff800000102c2e	kernel.asm	/^ffff800000102c2e:	80 ff ff $/;"	l
ffff800000102c31	kernel.asm	/^ffff800000102c31:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102c38	kernel.asm	/^ffff800000102c38:	80 ff ff $/;"	l
ffff800000102c3b	kernel.asm	/^ffff800000102c3b:	ff d0                	callq  *%rax$/;"	l
ffff800000102c3d	kernel.asm	/^ffff800000102c3d:	48 83 c4 38          	add    $0x38,%rsp$/;"	l
ffff800000102c41	kernel.asm	/^ffff800000102c41:	5b                   	pop    %rbx$/;"	l
ffff800000102c42	kernel.asm	/^ffff800000102c42:	5d                   	pop    %rbp$/;"	l
ffff800000102c43	kernel.asm	/^ffff800000102c43:	c3                   	retq   $/;"	l
ffff800000102c44	kernel.asm	/^ffff800000102c44 <itrunc>:$/;"	l
ffff800000102c44	kernel.asm	/^ffff800000102c44:	55                   	push   %rbp$/;"	l
ffff800000102c45	kernel.asm	/^ffff800000102c45:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102c48	kernel.asm	/^ffff800000102c48:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000102c4c	kernel.asm	/^ffff800000102c4c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000102c50	kernel.asm	/^ffff800000102c50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102c57	kernel.asm	/^ffff800000102c57:	eb 55                	jmp    ffff800000102cae <itrunc+0x6a>$/;"	l
ffff800000102c59	kernel.asm	/^ffff800000102c59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102c5d	kernel.asm	/^ffff800000102c5d:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102c60	kernel.asm	/^ffff800000102c60:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102c63	kernel.asm	/^ffff800000102c63:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102c67	kernel.asm	/^ffff800000102c67:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102c6a	kernel.asm	/^ffff800000102c6a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102c6c	kernel.asm	/^ffff800000102c6c:	74 3c                	je     ffff800000102caa <itrunc+0x66>$/;"	l
ffff800000102c6e	kernel.asm	/^ffff800000102c6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102c72	kernel.asm	/^ffff800000102c72:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102c75	kernel.asm	/^ffff800000102c75:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102c78	kernel.asm	/^ffff800000102c78:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102c7c	kernel.asm	/^ffff800000102c7c:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102c7f	kernel.asm	/^ffff800000102c7f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102c83	kernel.asm	/^ffff800000102c83:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102c85	kernel.asm	/^ffff800000102c85:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102c87	kernel.asm	/^ffff800000102c87:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102c89	kernel.asm	/^ffff800000102c89:	48 b8 48 22 10 00 00 	movabs $0xffff800000102248,%rax$/;"	l
ffff800000102c90	kernel.asm	/^ffff800000102c90:	80 ff ff $/;"	l
ffff800000102c93	kernel.asm	/^ffff800000102c93:	ff d0                	callq  *%rax$/;"	l
ffff800000102c95	kernel.asm	/^ffff800000102c95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102c99	kernel.asm	/^ffff800000102c99:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102c9c	kernel.asm	/^ffff800000102c9c:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102c9f	kernel.asm	/^ffff800000102c9f:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102ca3	kernel.asm	/^ffff800000102ca3:	c7 04 90 00 00 00 00 	movl   $0x0,(%rax,%rdx,4)$/;"	l
ffff800000102caa	kernel.asm	/^ffff800000102caa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000102cae	kernel.asm	/^ffff800000102cae:	83 7d fc 0b          	cmpl   $0xb,-0x4(%rbp)$/;"	l
ffff800000102cb2	kernel.asm	/^ffff800000102cb2:	7e a5                	jle    ffff800000102c59 <itrunc+0x15>$/;"	l
ffff800000102cb4	kernel.asm	/^ffff800000102cb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102cb8	kernel.asm	/^ffff800000102cb8:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102cbe	kernel.asm	/^ffff800000102cbe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102cc0	kernel.asm	/^ffff800000102cc0:	0f 84 ce 00 00 00    	je     ffff800000102d94 <itrunc+0x150>$/;"	l
ffff800000102cc6	kernel.asm	/^ffff800000102cc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102cca	kernel.asm	/^ffff800000102cca:	8b 90 d0 00 00 00    	mov    0xd0(%rax),%edx$/;"	l
ffff800000102cd0	kernel.asm	/^ffff800000102cd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102cd4	kernel.asm	/^ffff800000102cd4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102cd6	kernel.asm	/^ffff800000102cd6:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102cd8	kernel.asm	/^ffff800000102cd8:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102cda	kernel.asm	/^ffff800000102cda:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102ce1	kernel.asm	/^ffff800000102ce1:	80 ff ff $/;"	l
ffff800000102ce4	kernel.asm	/^ffff800000102ce4:	ff d0                	callq  *%rax$/;"	l
ffff800000102ce6	kernel.asm	/^ffff800000102ce6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102cea	kernel.asm	/^ffff800000102cea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102cee	kernel.asm	/^ffff800000102cee:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102cf4	kernel.asm	/^ffff800000102cf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000102cf8	kernel.asm	/^ffff800000102cf8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff800000102cff	kernel.asm	/^ffff800000102cff:	eb 4a                	jmp    ffff800000102d4b <itrunc+0x107>$/;"	l
ffff800000102d01	kernel.asm	/^ffff800000102d01:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102d04	kernel.asm	/^ffff800000102d04:	48 98                	cltq   $/;"	l
ffff800000102d06	kernel.asm	/^ffff800000102d06:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102d0d	kernel.asm	/^ffff800000102d0d:	00 $/;"	l
ffff800000102d0e	kernel.asm	/^ffff800000102d0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102d12	kernel.asm	/^ffff800000102d12:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102d15	kernel.asm	/^ffff800000102d15:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102d17	kernel.asm	/^ffff800000102d17:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102d19	kernel.asm	/^ffff800000102d19:	74 2c                	je     ffff800000102d47 <itrunc+0x103>$/;"	l
ffff800000102d1b	kernel.asm	/^ffff800000102d1b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102d1e	kernel.asm	/^ffff800000102d1e:	48 98                	cltq   $/;"	l
ffff800000102d20	kernel.asm	/^ffff800000102d20:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102d27	kernel.asm	/^ffff800000102d27:	00 $/;"	l
ffff800000102d28	kernel.asm	/^ffff800000102d28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102d2c	kernel.asm	/^ffff800000102d2c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102d2f	kernel.asm	/^ffff800000102d2f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102d31	kernel.asm	/^ffff800000102d31:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102d35	kernel.asm	/^ffff800000102d35:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102d37	kernel.asm	/^ffff800000102d37:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102d39	kernel.asm	/^ffff800000102d39:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102d3b	kernel.asm	/^ffff800000102d3b:	48 b8 48 22 10 00 00 	movabs $0xffff800000102248,%rax$/;"	l
ffff800000102d42	kernel.asm	/^ffff800000102d42:	80 ff ff $/;"	l
ffff800000102d45	kernel.asm	/^ffff800000102d45:	ff d0                	callq  *%rax$/;"	l
ffff800000102d47	kernel.asm	/^ffff800000102d47:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff800000102d4b	kernel.asm	/^ffff800000102d4b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102d4e	kernel.asm	/^ffff800000102d4e:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000102d51	kernel.asm	/^ffff800000102d51:	76 ae                	jbe    ffff800000102d01 <itrunc+0xbd>$/;"	l
ffff800000102d53	kernel.asm	/^ffff800000102d53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102d57	kernel.asm	/^ffff800000102d57:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102d5a	kernel.asm	/^ffff800000102d5a:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102d61	kernel.asm	/^ffff800000102d61:	80 ff ff $/;"	l
ffff800000102d64	kernel.asm	/^ffff800000102d64:	ff d0                	callq  *%rax$/;"	l
ffff800000102d66	kernel.asm	/^ffff800000102d66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102d6a	kernel.asm	/^ffff800000102d6a:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102d70	kernel.asm	/^ffff800000102d70:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102d74	kernel.asm	/^ffff800000102d74:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102d76	kernel.asm	/^ffff800000102d76:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102d78	kernel.asm	/^ffff800000102d78:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102d7a	kernel.asm	/^ffff800000102d7a:	48 b8 48 22 10 00 00 	movabs $0xffff800000102248,%rax$/;"	l
ffff800000102d81	kernel.asm	/^ffff800000102d81:	80 ff ff $/;"	l
ffff800000102d84	kernel.asm	/^ffff800000102d84:	ff d0                	callq  *%rax$/;"	l
ffff800000102d86	kernel.asm	/^ffff800000102d86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102d8a	kernel.asm	/^ffff800000102d8a:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)$/;"	l
ffff800000102d91	kernel.asm	/^ffff800000102d91:	00 00 00 $/;"	l
ffff800000102d94	kernel.asm	/^ffff800000102d94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102d98	kernel.asm	/^ffff800000102d98:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%rax)$/;"	l
ffff800000102d9f	kernel.asm	/^ffff800000102d9f:	00 00 00 $/;"	l
ffff800000102da2	kernel.asm	/^ffff800000102da2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102da6	kernel.asm	/^ffff800000102da6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102da9	kernel.asm	/^ffff800000102da9:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000102db0	kernel.asm	/^ffff800000102db0:	80 ff ff $/;"	l
ffff800000102db3	kernel.asm	/^ffff800000102db3:	ff d0                	callq  *%rax$/;"	l
ffff800000102db5	kernel.asm	/^ffff800000102db5:	90                   	nop$/;"	l
ffff800000102db6	kernel.asm	/^ffff800000102db6:	c9                   	leaveq $/;"	l
ffff800000102db7	kernel.asm	/^ffff800000102db7:	c3                   	retq   $/;"	l
ffff800000102db8	kernel.asm	/^ffff800000102db8 <stati>:$/;"	l
ffff800000102db8	kernel.asm	/^ffff800000102db8:	55                   	push   %rbp$/;"	l
ffff800000102db9	kernel.asm	/^ffff800000102db9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102dbc	kernel.asm	/^ffff800000102dbc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102dc0	kernel.asm	/^ffff800000102dc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102dc4	kernel.asm	/^ffff800000102dc4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000102dc8	kernel.asm	/^ffff800000102dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102dcc	kernel.asm	/^ffff800000102dcc:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102dce	kernel.asm	/^ffff800000102dce:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102dd0	kernel.asm	/^ffff800000102dd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102dd4	kernel.asm	/^ffff800000102dd4:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000102dd7	kernel.asm	/^ffff800000102dd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ddb	kernel.asm	/^ffff800000102ddb:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000102dde	kernel.asm	/^ffff800000102dde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102de2	kernel.asm	/^ffff800000102de2:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102de5	kernel.asm	/^ffff800000102de5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102de9	kernel.asm	/^ffff800000102de9:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff800000102df0	kernel.asm	/^ffff800000102df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102df4	kernel.asm	/^ffff800000102df4:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000102df7	kernel.asm	/^ffff800000102df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102dfb	kernel.asm	/^ffff800000102dfb:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff800000102e02	kernel.asm	/^ffff800000102e02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102e06	kernel.asm	/^ffff800000102e06:	66 89 50 0c          	mov    %dx,0xc(%rax)$/;"	l
ffff800000102e0a	kernel.asm	/^ffff800000102e0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e0e	kernel.asm	/^ffff800000102e0e:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff800000102e14	kernel.asm	/^ffff800000102e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102e18	kernel.asm	/^ffff800000102e18:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000102e1b	kernel.asm	/^ffff800000102e1b:	90                   	nop$/;"	l
ffff800000102e1c	kernel.asm	/^ffff800000102e1c:	c9                   	leaveq $/;"	l
ffff800000102e1d	kernel.asm	/^ffff800000102e1d:	c3                   	retq   $/;"	l
ffff800000102e1e	kernel.asm	/^ffff800000102e1e <readi>:$/;"	l
ffff800000102e1e	kernel.asm	/^ffff800000102e1e:	55                   	push   %rbp$/;"	l
ffff800000102e1f	kernel.asm	/^ffff800000102e1f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102e22	kernel.asm	/^ffff800000102e22:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000102e26	kernel.asm	/^ffff800000102e26:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000102e2a	kernel.asm	/^ffff800000102e2a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000102e2e	kernel.asm	/^ffff800000102e2e:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000102e31	kernel.asm	/^ffff800000102e31:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000102e34	kernel.asm	/^ffff800000102e34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e38	kernel.asm	/^ffff800000102e38:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000102e3f	kernel.asm	/^ffff800000102e3f:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff800000102e43	kernel.asm	/^ffff800000102e43:	0f 85 8f 00 00 00    	jne    ffff800000102ed8 <readi+0xba>$/;"	l
ffff800000102e49	kernel.asm	/^ffff800000102e49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e4d	kernel.asm	/^ffff800000102e4d:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102e54	kernel.asm	/^ffff800000102e54:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102e57	kernel.asm	/^ffff800000102e57:	78 3b                	js     ffff800000102e94 <readi+0x76>$/;"	l
ffff800000102e59	kernel.asm	/^ffff800000102e59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e5d	kernel.asm	/^ffff800000102e5d:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102e64	kernel.asm	/^ffff800000102e64:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff800000102e68	kernel.asm	/^ffff800000102e68:	7f 2a                	jg     ffff800000102e94 <readi+0x76>$/;"	l
ffff800000102e6a	kernel.asm	/^ffff800000102e6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e6e	kernel.asm	/^ffff800000102e6e:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102e75	kernel.asm	/^ffff800000102e75:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000102e78	kernel.asm	/^ffff800000102e78:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff800000102e7f	kernel.asm	/^ffff800000102e7f:	80 ff ff $/;"	l
ffff800000102e82	kernel.asm	/^ffff800000102e82:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102e85	kernel.asm	/^ffff800000102e85:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000102e89	kernel.asm	/^ffff800000102e89:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102e8c	kernel.asm	/^ffff800000102e8c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000102e8f	kernel.asm	/^ffff800000102e8f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000102e92	kernel.asm	/^ffff800000102e92:	75 0a                	jne    ffff800000102e9e <readi+0x80>$/;"	l
ffff800000102e94	kernel.asm	/^ffff800000102e94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102e99	kernel.asm	/^ffff800000102e99:	e9 4d 01 00 00       	jmpq   ffff800000102feb <readi+0x1cd>$/;"	l
ffff800000102e9e	kernel.asm	/^ffff800000102e9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102ea2	kernel.asm	/^ffff800000102ea2:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102ea9	kernel.asm	/^ffff800000102ea9:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000102eac	kernel.asm	/^ffff800000102eac:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff800000102eb3	kernel.asm	/^ffff800000102eb3:	80 ff ff $/;"	l
ffff800000102eb6	kernel.asm	/^ffff800000102eb6:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102eb9	kernel.asm	/^ffff800000102eb9:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000102ebd	kernel.asm	/^ffff800000102ebd:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102ec0	kernel.asm	/^ffff800000102ec0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000102ec3	kernel.asm	/^ffff800000102ec3:	8b 55 c8             	mov    -0x38(%rbp),%edx$/;"	l
ffff800000102ec6	kernel.asm	/^ffff800000102ec6:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi$/;"	l
ffff800000102eca	kernel.asm	/^ffff800000102eca:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
ffff800000102ece	kernel.asm	/^ffff800000102ece:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000102ed1	kernel.asm	/^ffff800000102ed1:	ff d0                	callq  *%rax$/;"	l
ffff800000102ed3	kernel.asm	/^ffff800000102ed3:	e9 13 01 00 00       	jmpq   ffff800000102feb <readi+0x1cd>$/;"	l
ffff800000102ed8	kernel.asm	/^ffff800000102ed8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102edc	kernel.asm	/^ffff800000102edc:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000102ee2	kernel.asm	/^ffff800000102ee2:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000102ee5	kernel.asm	/^ffff800000102ee5:	72 0d                	jb     ffff800000102ef4 <readi+0xd6>$/;"	l
ffff800000102ee7	kernel.asm	/^ffff800000102ee7:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000102eea	kernel.asm	/^ffff800000102eea:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000102eed	kernel.asm	/^ffff800000102eed:	01 d0                	add    %edx,%eax$/;"	l
ffff800000102eef	kernel.asm	/^ffff800000102eef:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000102ef2	kernel.asm	/^ffff800000102ef2:	73 0a                	jae    ffff800000102efe <readi+0xe0>$/;"	l
ffff800000102ef4	kernel.asm	/^ffff800000102ef4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102ef9	kernel.asm	/^ffff800000102ef9:	e9 ed 00 00 00       	jmpq   ffff800000102feb <readi+0x1cd>$/;"	l
ffff800000102efe	kernel.asm	/^ffff800000102efe:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000102f01	kernel.asm	/^ffff800000102f01:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000102f04	kernel.asm	/^ffff800000102f04:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102f06	kernel.asm	/^ffff800000102f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f0a	kernel.asm	/^ffff800000102f0a:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000102f10	kernel.asm	/^ffff800000102f10:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000102f12	kernel.asm	/^ffff800000102f12:	76 10                	jbe    ffff800000102f24 <readi+0x106>$/;"	l
ffff800000102f14	kernel.asm	/^ffff800000102f14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f18	kernel.asm	/^ffff800000102f18:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000102f1e	kernel.asm	/^ffff800000102f1e:	2b 45 cc             	sub    -0x34(%rbp),%eax$/;"	l
ffff800000102f21	kernel.asm	/^ffff800000102f21:	89 45 c8             	mov    %eax,-0x38(%rbp)$/;"	l
ffff800000102f24	kernel.asm	/^ffff800000102f24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102f2b	kernel.asm	/^ffff800000102f2b:	e9 ac 00 00 00       	jmpq   ffff800000102fdc <readi+0x1be>$/;"	l
ffff800000102f30	kernel.asm	/^ffff800000102f30:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000102f33	kernel.asm	/^ffff800000102f33:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff800000102f36	kernel.asm	/^ffff800000102f36:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102f38	kernel.asm	/^ffff800000102f38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f3c	kernel.asm	/^ffff800000102f3c:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102f3e	kernel.asm	/^ffff800000102f3e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102f41	kernel.asm	/^ffff800000102f41:	48 b8 e3 2a 10 00 00 	movabs $0xffff800000102ae3,%rax$/;"	l
ffff800000102f48	kernel.asm	/^ffff800000102f48:	80 ff ff $/;"	l
ffff800000102f4b	kernel.asm	/^ffff800000102f4b:	ff d0                	callq  *%rax$/;"	l
ffff800000102f4d	kernel.asm	/^ffff800000102f4d:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102f4f	kernel.asm	/^ffff800000102f4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f53	kernel.asm	/^ffff800000102f53:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102f55	kernel.asm	/^ffff800000102f55:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102f57	kernel.asm	/^ffff800000102f57:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102f59	kernel.asm	/^ffff800000102f59:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102f60	kernel.asm	/^ffff800000102f60:	80 ff ff $/;"	l
ffff800000102f63	kernel.asm	/^ffff800000102f63:	ff d0                	callq  *%rax$/;"	l
ffff800000102f65	kernel.asm	/^ffff800000102f65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102f69	kernel.asm	/^ffff800000102f69:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000102f6c	kernel.asm	/^ffff800000102f6c:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000102f71	kernel.asm	/^ffff800000102f71:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000102f76	kernel.asm	/^ffff800000102f76:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000102f78	kernel.asm	/^ffff800000102f78:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000102f7b	kernel.asm	/^ffff800000102f7b:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000102f7e	kernel.asm	/^ffff800000102f7e:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000102f80	kernel.asm	/^ffff800000102f80:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff800000102f83	kernel.asm	/^ffff800000102f83:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102f86	kernel.asm	/^ffff800000102f86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102f8a	kernel.asm	/^ffff800000102f8a:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102f91	kernel.asm	/^ffff800000102f91:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000102f94	kernel.asm	/^ffff800000102f94:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000102f99	kernel.asm	/^ffff800000102f99:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff800000102f9d	kernel.asm	/^ffff800000102f9d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102fa0	kernel.asm	/^ffff800000102fa0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000102fa4	kernel.asm	/^ffff800000102fa4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102fa7	kernel.asm	/^ffff800000102fa7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102faa	kernel.asm	/^ffff800000102faa:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000102fb1	kernel.asm	/^ffff800000102fb1:	80 ff ff $/;"	l
ffff800000102fb4	kernel.asm	/^ffff800000102fb4:	ff d0                	callq  *%rax$/;"	l
ffff800000102fb6	kernel.asm	/^ffff800000102fb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102fba	kernel.asm	/^ffff800000102fba:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102fbd	kernel.asm	/^ffff800000102fbd:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102fc4	kernel.asm	/^ffff800000102fc4:	80 ff ff $/;"	l
ffff800000102fc7	kernel.asm	/^ffff800000102fc7:	ff d0                	callq  *%rax$/;"	l
ffff800000102fc9	kernel.asm	/^ffff800000102fc9:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102fcc	kernel.asm	/^ffff800000102fcc:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000102fcf	kernel.asm	/^ffff800000102fcf:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102fd2	kernel.asm	/^ffff800000102fd2:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff800000102fd5	kernel.asm	/^ffff800000102fd5:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102fd8	kernel.asm	/^ffff800000102fd8:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff800000102fdc	kernel.asm	/^ffff800000102fdc:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102fdf	kernel.asm	/^ffff800000102fdf:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff800000102fe2	kernel.asm	/^ffff800000102fe2:	0f 82 48 ff ff ff    	jb     ffff800000102f30 <readi+0x112>$/;"	l
ffff800000102fe8	kernel.asm	/^ffff800000102fe8:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000102feb	kernel.asm	/^ffff800000102feb:	c9                   	leaveq $/;"	l
ffff800000102fec	kernel.asm	/^ffff800000102fec:	c3                   	retq   $/;"	l
ffff800000102fed	kernel.asm	/^ffff800000102fed <writei>:$/;"	l
ffff800000102fed	kernel.asm	/^ffff800000102fed:	55                   	push   %rbp$/;"	l
ffff800000102fee	kernel.asm	/^ffff800000102fee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102ff1	kernel.asm	/^ffff800000102ff1:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000102ff5	kernel.asm	/^ffff800000102ff5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000102ff9	kernel.asm	/^ffff800000102ff9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000102ffd	kernel.asm	/^ffff800000102ffd:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103000	kernel.asm	/^ffff800000103000:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000103003	kernel.asm	/^ffff800000103003:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103007	kernel.asm	/^ffff800000103007:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010300e	kernel.asm	/^ffff80000010300e:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff800000103012	kernel.asm	/^ffff800000103012:	0f 85 97 00 00 00    	jne    ffff8000001030af <writei+0xc2>$/;"	l
ffff800000103018	kernel.asm	/^ffff800000103018:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010301c	kernel.asm	/^ffff80000010301c:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000103023	kernel.asm	/^ffff800000103023:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000103026	kernel.asm	/^ffff800000103026:	78 3f                	js     ffff800000103067 <writei+0x7a>$/;"	l
ffff800000103028	kernel.asm	/^ffff800000103028:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010302c	kernel.asm	/^ffff80000010302c:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000103033	kernel.asm	/^ffff800000103033:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff800000103037	kernel.asm	/^ffff800000103037:	7f 2e                	jg     ffff800000103067 <writei+0x7a>$/;"	l
ffff800000103039	kernel.asm	/^ffff800000103039:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010303d	kernel.asm	/^ffff80000010303d:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000103044	kernel.asm	/^ffff800000103044:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000103047	kernel.asm	/^ffff800000103047:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff80000010304e	kernel.asm	/^ffff80000010304e:	80 ff ff $/;"	l
ffff800000103051	kernel.asm	/^ffff800000103051:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000103054	kernel.asm	/^ffff800000103054:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000103058	kernel.asm	/^ffff800000103058:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010305b	kernel.asm	/^ffff80000010305b:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010305f	kernel.asm	/^ffff80000010305f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103062	kernel.asm	/^ffff800000103062:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103065	kernel.asm	/^ffff800000103065:	75 0a                	jne    ffff800000103071 <writei+0x84>$/;"	l
ffff800000103067	kernel.asm	/^ffff800000103067:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010306c	kernel.asm	/^ffff80000010306c:	e9 8c 01 00 00       	jmpq   ffff8000001031fd <writei+0x210>$/;"	l
ffff800000103071	kernel.asm	/^ffff800000103071:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103075	kernel.asm	/^ffff800000103075:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff80000010307c	kernel.asm	/^ffff80000010307c:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff80000010307f	kernel.asm	/^ffff80000010307f:	48 b8 40 35 11 00 00 	movabs $0xffff800000113540,%rax$/;"	l
ffff800000103086	kernel.asm	/^ffff800000103086:	80 ff ff $/;"	l
ffff800000103089	kernel.asm	/^ffff800000103089:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010308c	kernel.asm	/^ffff80000010308c:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000103090	kernel.asm	/^ffff800000103090:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000103093	kernel.asm	/^ffff800000103093:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000103097	kernel.asm	/^ffff800000103097:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010309a	kernel.asm	/^ffff80000010309a:	8b 55 c8             	mov    -0x38(%rbp),%edx$/;"	l
ffff80000010309d	kernel.asm	/^ffff80000010309d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi$/;"	l
ffff8000001030a1	kernel.asm	/^ffff8000001030a1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
ffff8000001030a5	kernel.asm	/^ffff8000001030a5:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff8000001030a8	kernel.asm	/^ffff8000001030a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001030aa	kernel.asm	/^ffff8000001030aa:	e9 4e 01 00 00       	jmpq   ffff8000001031fd <writei+0x210>$/;"	l
ffff8000001030af	kernel.asm	/^ffff8000001030af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001030b3	kernel.asm	/^ffff8000001030b3:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff8000001030b9	kernel.asm	/^ffff8000001030b9:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff8000001030bc	kernel.asm	/^ffff8000001030bc:	72 0d                	jb     ffff8000001030cb <writei+0xde>$/;"	l
ffff8000001030be	kernel.asm	/^ffff8000001030be:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff8000001030c1	kernel.asm	/^ffff8000001030c1:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001030c4	kernel.asm	/^ffff8000001030c4:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001030c6	kernel.asm	/^ffff8000001030c6:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff8000001030c9	kernel.asm	/^ffff8000001030c9:	73 0a                	jae    ffff8000001030d5 <writei+0xe8>$/;"	l
ffff8000001030cb	kernel.asm	/^ffff8000001030cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001030d0	kernel.asm	/^ffff8000001030d0:	e9 28 01 00 00       	jmpq   ffff8000001031fd <writei+0x210>$/;"	l
ffff8000001030d5	kernel.asm	/^ffff8000001030d5:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff8000001030d8	kernel.asm	/^ffff8000001030d8:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001030db	kernel.asm	/^ffff8000001030db:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001030dd	kernel.asm	/^ffff8000001030dd:	3d 00 18 01 00       	cmp    $0x11800,%eax$/;"	l
ffff8000001030e2	kernel.asm	/^ffff8000001030e2:	76 0a                	jbe    ffff8000001030ee <writei+0x101>$/;"	l
ffff8000001030e4	kernel.asm	/^ffff8000001030e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001030e9	kernel.asm	/^ffff8000001030e9:	e9 0f 01 00 00       	jmpq   ffff8000001031fd <writei+0x210>$/;"	l
ffff8000001030ee	kernel.asm	/^ffff8000001030ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001030f5	kernel.asm	/^ffff8000001030f5:	e9 bf 00 00 00       	jmpq   ffff8000001031b9 <writei+0x1cc>$/;"	l
ffff8000001030fa	kernel.asm	/^ffff8000001030fa:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001030fd	kernel.asm	/^ffff8000001030fd:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff800000103100	kernel.asm	/^ffff800000103100:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103102	kernel.asm	/^ffff800000103102:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103106	kernel.asm	/^ffff800000103106:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103108	kernel.asm	/^ffff800000103108:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010310b	kernel.asm	/^ffff80000010310b:	48 b8 e3 2a 10 00 00 	movabs $0xffff800000102ae3,%rax$/;"	l
ffff800000103112	kernel.asm	/^ffff800000103112:	80 ff ff $/;"	l
ffff800000103115	kernel.asm	/^ffff800000103115:	ff d0                	callq  *%rax$/;"	l
ffff800000103117	kernel.asm	/^ffff800000103117:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103119	kernel.asm	/^ffff800000103119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010311d	kernel.asm	/^ffff80000010311d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010311f	kernel.asm	/^ffff80000010311f:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103121	kernel.asm	/^ffff800000103121:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103123	kernel.asm	/^ffff800000103123:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff80000010312a	kernel.asm	/^ffff80000010312a:	80 ff ff $/;"	l
ffff80000010312d	kernel.asm	/^ffff80000010312d:	ff d0                	callq  *%rax$/;"	l
ffff80000010312f	kernel.asm	/^ffff80000010312f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000103133	kernel.asm	/^ffff800000103133:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103136	kernel.asm	/^ffff800000103136:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010313b	kernel.asm	/^ffff80000010313b:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000103140	kernel.asm	/^ffff800000103140:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000103142	kernel.asm	/^ffff800000103142:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103145	kernel.asm	/^ffff800000103145:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000103148	kernel.asm	/^ffff800000103148:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010314a	kernel.asm	/^ffff80000010314a:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff80000010314d	kernel.asm	/^ffff80000010314d:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000103150	kernel.asm	/^ffff800000103150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103154	kernel.asm	/^ffff800000103154:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff80000010315b	kernel.asm	/^ffff80000010315b:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff80000010315e	kernel.asm	/^ffff80000010315e:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000103163	kernel.asm	/^ffff800000103163:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff800000103167	kernel.asm	/^ffff800000103167:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010316a	kernel.asm	/^ffff80000010316a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010316e	kernel.asm	/^ffff80000010316e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103171	kernel.asm	/^ffff800000103171:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000103174	kernel.asm	/^ffff800000103174:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010317b	kernel.asm	/^ffff80000010317b:	80 ff ff $/;"	l
ffff80000010317e	kernel.asm	/^ffff80000010317e:	ff d0                	callq  *%rax$/;"	l
ffff800000103180	kernel.asm	/^ffff800000103180:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103184	kernel.asm	/^ffff800000103184:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103187	kernel.asm	/^ffff800000103187:	48 b8 46 51 10 00 00 	movabs $0xffff800000105146,%rax$/;"	l
ffff80000010318e	kernel.asm	/^ffff80000010318e:	80 ff ff $/;"	l
ffff800000103191	kernel.asm	/^ffff800000103191:	ff d0                	callq  *%rax$/;"	l
ffff800000103193	kernel.asm	/^ffff800000103193:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103197	kernel.asm	/^ffff800000103197:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010319a	kernel.asm	/^ffff80000010319a:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001031a1	kernel.asm	/^ffff8000001031a1:	80 ff ff $/;"	l
ffff8000001031a4	kernel.asm	/^ffff8000001031a4:	ff d0                	callq  *%rax$/;"	l
ffff8000001031a6	kernel.asm	/^ffff8000001031a6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001031a9	kernel.asm	/^ffff8000001031a9:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff8000001031ac	kernel.asm	/^ffff8000001031ac:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001031af	kernel.asm	/^ffff8000001031af:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff8000001031b2	kernel.asm	/^ffff8000001031b2:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001031b5	kernel.asm	/^ffff8000001031b5:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff8000001031b9	kernel.asm	/^ffff8000001031b9:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001031bc	kernel.asm	/^ffff8000001031bc:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff8000001031bf	kernel.asm	/^ffff8000001031bf:	0f 82 35 ff ff ff    	jb     ffff8000001030fa <writei+0x10d>$/;"	l
ffff8000001031c5	kernel.asm	/^ffff8000001031c5:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)$/;"	l
ffff8000001031c9	kernel.asm	/^ffff8000001031c9:	74 2f                	je     ffff8000001031fa <writei+0x20d>$/;"	l
ffff8000001031cb	kernel.asm	/^ffff8000001031cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001031cf	kernel.asm	/^ffff8000001031cf:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff8000001031d5	kernel.asm	/^ffff8000001031d5:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff8000001031d8	kernel.asm	/^ffff8000001031d8:	73 20                	jae    ffff8000001031fa <writei+0x20d>$/;"	l
ffff8000001031da	kernel.asm	/^ffff8000001031da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001031de	kernel.asm	/^ffff8000001031de:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff8000001031e1	kernel.asm	/^ffff8000001031e1:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff8000001031e7	kernel.asm	/^ffff8000001031e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001031eb	kernel.asm	/^ffff8000001031eb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001031ee	kernel.asm	/^ffff8000001031ee:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff8000001031f5	kernel.asm	/^ffff8000001031f5:	80 ff ff $/;"	l
ffff8000001031f8	kernel.asm	/^ffff8000001031f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001031fa	kernel.asm	/^ffff8000001031fa:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001031fd	kernel.asm	/^ffff8000001031fd:	c9                   	leaveq $/;"	l
ffff8000001031fe	kernel.asm	/^ffff8000001031fe:	c3                   	retq   $/;"	l
ffff8000001031ff	kernel.asm	/^ffff8000001031ff <namecmp>:$/;"	l
ffff8000001031ff	kernel.asm	/^ffff8000001031ff:	55                   	push   %rbp$/;"	l
ffff800000103200	kernel.asm	/^ffff800000103200:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103203	kernel.asm	/^ffff800000103203:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103207	kernel.asm	/^ffff800000103207:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010320b	kernel.asm	/^ffff80000010320b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff80000010320f	kernel.asm	/^ffff80000010320f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000103213	kernel.asm	/^ffff800000103213:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103217	kernel.asm	/^ffff800000103217:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff80000010321c	kernel.asm	/^ffff80000010321c:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010321f	kernel.asm	/^ffff80000010321f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103222	kernel.asm	/^ffff800000103222:	48 b8 3a 78 10 00 00 	movabs $0xffff80000010783a,%rax$/;"	l
ffff800000103229	kernel.asm	/^ffff800000103229:	80 ff ff $/;"	l
ffff80000010322c	kernel.asm	/^ffff80000010322c:	ff d0                	callq  *%rax$/;"	l
ffff80000010322e	kernel.asm	/^ffff80000010322e:	c9                   	leaveq $/;"	l
ffff80000010322f	kernel.asm	/^ffff80000010322f:	c3                   	retq   $/;"	l
ffff800000103230	kernel.asm	/^ffff800000103230 <dirlookup>:$/;"	l
ffff800000103230	kernel.asm	/^ffff800000103230:	55                   	push   %rbp$/;"	l
ffff800000103231	kernel.asm	/^ffff800000103231:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103234	kernel.asm	/^ffff800000103234:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000103238	kernel.asm	/^ffff800000103238:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010323c	kernel.asm	/^ffff80000010323c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103240	kernel.asm	/^ffff800000103240:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff800000103244	kernel.asm	/^ffff800000103244:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103248	kernel.asm	/^ffff800000103248:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010324f	kernel.asm	/^ffff80000010324f:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000103253	kernel.asm	/^ffff800000103253:	74 16                	je     ffff80000010326b <dirlookup+0x3b>$/;"	l
ffff800000103255	kernel.asm	/^ffff800000103255:	48 bf e4 bc 10 00 00 	movabs $0xffff80000010bce4,%rdi$/;"	l
ffff80000010325c	kernel.asm	/^ffff80000010325c:	80 ff ff $/;"	l
ffff80000010325f	kernel.asm	/^ffff80000010325f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103266	kernel.asm	/^ffff800000103266:	80 ff ff $/;"	l
ffff800000103269	kernel.asm	/^ffff800000103269:	ff d0                	callq  *%rax$/;"	l
ffff80000010326b	kernel.asm	/^ffff80000010326b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103272	kernel.asm	/^ffff800000103272:	e9 9f 00 00 00       	jmpq   ffff800000103316 <dirlookup+0xe6>$/;"	l
ffff800000103277	kernel.asm	/^ffff800000103277:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010327a	kernel.asm	/^ffff80000010327a:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010327e	kernel.asm	/^ffff80000010327e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103282	kernel.asm	/^ffff800000103282:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000103287	kernel.asm	/^ffff800000103287:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010328a	kernel.asm	/^ffff80000010328a:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff800000103291	kernel.asm	/^ffff800000103291:	80 ff ff $/;"	l
ffff800000103294	kernel.asm	/^ffff800000103294:	ff d0                	callq  *%rax$/;"	l
ffff800000103296	kernel.asm	/^ffff800000103296:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000103299	kernel.asm	/^ffff800000103299:	74 16                	je     ffff8000001032b1 <dirlookup+0x81>$/;"	l
ffff80000010329b	kernel.asm	/^ffff80000010329b:	48 bf f6 bc 10 00 00 	movabs $0xffff80000010bcf6,%rdi$/;"	l
ffff8000001032a2	kernel.asm	/^ffff8000001032a2:	80 ff ff $/;"	l
ffff8000001032a5	kernel.asm	/^ffff8000001032a5:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001032ac	kernel.asm	/^ffff8000001032ac:	80 ff ff $/;"	l
ffff8000001032af	kernel.asm	/^ffff8000001032af:	ff d0                	callq  *%rax$/;"	l
ffff8000001032b1	kernel.asm	/^ffff8000001032b1:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001032b5	kernel.asm	/^ffff8000001032b5:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001032b8	kernel.asm	/^ffff8000001032b8:	74 57                	je     ffff800000103311 <dirlookup+0xe1>$/;"	l
ffff8000001032ba	kernel.asm	/^ffff8000001032ba:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff8000001032be	kernel.asm	/^ffff8000001032be:	48 8d 50 02          	lea    0x2(%rax),%rdx$/;"	l
ffff8000001032c2	kernel.asm	/^ffff8000001032c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001032c6	kernel.asm	/^ffff8000001032c6:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001032c9	kernel.asm	/^ffff8000001032c9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001032cc	kernel.asm	/^ffff8000001032cc:	48 b8 ff 31 10 00 00 	movabs $0xffff8000001031ff,%rax$/;"	l
ffff8000001032d3	kernel.asm	/^ffff8000001032d3:	80 ff ff $/;"	l
ffff8000001032d6	kernel.asm	/^ffff8000001032d6:	ff d0                	callq  *%rax$/;"	l
ffff8000001032d8	kernel.asm	/^ffff8000001032d8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001032da	kernel.asm	/^ffff8000001032da:	75 36                	jne    ffff800000103312 <dirlookup+0xe2>$/;"	l
ffff8000001032dc	kernel.asm	/^ffff8000001032dc:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001032e1	kernel.asm	/^ffff8000001032e1:	74 09                	je     ffff8000001032ec <dirlookup+0xbc>$/;"	l
ffff8000001032e3	kernel.asm	/^ffff8000001032e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001032e7	kernel.asm	/^ffff8000001032e7:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001032ea	kernel.asm	/^ffff8000001032ea:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001032ec	kernel.asm	/^ffff8000001032ec:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001032f0	kernel.asm	/^ffff8000001032f0:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff8000001032f3	kernel.asm	/^ffff8000001032f3:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001032f6	kernel.asm	/^ffff8000001032f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001032fa	kernel.asm	/^ffff8000001032fa:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001032fc	kernel.asm	/^ffff8000001032fc:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff8000001032ff	kernel.asm	/^ffff8000001032ff:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103301	kernel.asm	/^ffff800000103301:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103303	kernel.asm	/^ffff800000103303:	48 b8 4a 26 10 00 00 	movabs $0xffff80000010264a,%rax$/;"	l
ffff80000010330a	kernel.asm	/^ffff80000010330a:	80 ff ff $/;"	l
ffff80000010330d	kernel.asm	/^ffff80000010330d:	ff d0                	callq  *%rax$/;"	l
ffff80000010330f	kernel.asm	/^ffff80000010330f:	eb 1d                	jmp    ffff80000010332e <dirlookup+0xfe>$/;"	l
ffff800000103311	kernel.asm	/^ffff800000103311:	90                   	nop$/;"	l
ffff800000103312	kernel.asm	/^ffff800000103312:	83 45 fc 10          	addl   $0x10,-0x4(%rbp)$/;"	l
ffff800000103316	kernel.asm	/^ffff800000103316:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010331a	kernel.asm	/^ffff80000010331a:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000103320	kernel.asm	/^ffff800000103320:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000103323	kernel.asm	/^ffff800000103323:	0f 87 4e ff ff ff    	ja     ffff800000103277 <dirlookup+0x47>$/;"	l
ffff800000103329	kernel.asm	/^ffff800000103329:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010332e	kernel.asm	/^ffff80000010332e:	c9                   	leaveq $/;"	l
ffff80000010332f	kernel.asm	/^ffff80000010332f:	c3                   	retq   $/;"	l
ffff800000103330	kernel.asm	/^ffff800000103330 <dirlink>:$/;"	l
ffff800000103330	kernel.asm	/^ffff800000103330:	55                   	push   %rbp$/;"	l
ffff800000103331	kernel.asm	/^ffff800000103331:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103334	kernel.asm	/^ffff800000103334:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000103338	kernel.asm	/^ffff800000103338:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010333c	kernel.asm	/^ffff80000010333c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103340	kernel.asm	/^ffff800000103340:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103343	kernel.asm	/^ffff800000103343:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx$/;"	l
ffff800000103347	kernel.asm	/^ffff800000103347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010334b	kernel.asm	/^ffff80000010334b:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000103350	kernel.asm	/^ffff800000103350:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103353	kernel.asm	/^ffff800000103353:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103356	kernel.asm	/^ffff800000103356:	48 b8 30 32 10 00 00 	movabs $0xffff800000103230,%rax$/;"	l
ffff80000010335d	kernel.asm	/^ffff80000010335d:	80 ff ff $/;"	l
ffff800000103360	kernel.asm	/^ffff800000103360:	ff d0                	callq  *%rax$/;"	l
ffff800000103362	kernel.asm	/^ffff800000103362:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000103366	kernel.asm	/^ffff800000103366:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010336b	kernel.asm	/^ffff80000010336b:	74 1d                	je     ffff80000010338a <dirlink+0x5a>$/;"	l
ffff80000010336d	kernel.asm	/^ffff80000010336d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103371	kernel.asm	/^ffff800000103371:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103374	kernel.asm	/^ffff800000103374:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff80000010337b	kernel.asm	/^ffff80000010337b:	80 ff ff $/;"	l
ffff80000010337e	kernel.asm	/^ffff80000010337e:	ff d0                	callq  *%rax$/;"	l
ffff800000103380	kernel.asm	/^ffff800000103380:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103385	kernel.asm	/^ffff800000103385:	e9 d2 00 00 00       	jmpq   ffff80000010345c <dirlink+0x12c>$/;"	l
ffff80000010338a	kernel.asm	/^ffff80000010338a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103391	kernel.asm	/^ffff800000103391:	eb 4c                	jmp    ffff8000001033df <dirlink+0xaf>$/;"	l
ffff800000103393	kernel.asm	/^ffff800000103393:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103396	kernel.asm	/^ffff800000103396:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010339a	kernel.asm	/^ffff80000010339a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010339e	kernel.asm	/^ffff80000010339e:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff8000001033a3	kernel.asm	/^ffff8000001033a3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001033a6	kernel.asm	/^ffff8000001033a6:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff8000001033ad	kernel.asm	/^ffff8000001033ad:	80 ff ff $/;"	l
ffff8000001033b0	kernel.asm	/^ffff8000001033b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001033b2	kernel.asm	/^ffff8000001033b2:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff8000001033b5	kernel.asm	/^ffff8000001033b5:	74 16                	je     ffff8000001033cd <dirlink+0x9d>$/;"	l
ffff8000001033b7	kernel.asm	/^ffff8000001033b7:	48 bf 05 bd 10 00 00 	movabs $0xffff80000010bd05,%rdi$/;"	l
ffff8000001033be	kernel.asm	/^ffff8000001033be:	80 ff ff $/;"	l
ffff8000001033c1	kernel.asm	/^ffff8000001033c1:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001033c8	kernel.asm	/^ffff8000001033c8:	80 ff ff $/;"	l
ffff8000001033cb	kernel.asm	/^ffff8000001033cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001033cd	kernel.asm	/^ffff8000001033cd:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001033d1	kernel.asm	/^ffff8000001033d1:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001033d4	kernel.asm	/^ffff8000001033d4:	74 1c                	je     ffff8000001033f2 <dirlink+0xc2>$/;"	l
ffff8000001033d6	kernel.asm	/^ffff8000001033d6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001033d9	kernel.asm	/^ffff8000001033d9:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff8000001033dc	kernel.asm	/^ffff8000001033dc:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001033df	kernel.asm	/^ffff8000001033df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001033e3	kernel.asm	/^ffff8000001033e3:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001033e9	kernel.asm	/^ffff8000001033e9:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001033ec	kernel.asm	/^ffff8000001033ec:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001033ee	kernel.asm	/^ffff8000001033ee:	77 a3                	ja     ffff800000103393 <dirlink+0x63>$/;"	l
ffff8000001033f0	kernel.asm	/^ffff8000001033f0:	eb 01                	jmp    ffff8000001033f3 <dirlink+0xc3>$/;"	l
ffff8000001033f2	kernel.asm	/^ffff8000001033f2:	90                   	nop$/;"	l
ffff8000001033f3	kernel.asm	/^ffff8000001033f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001033f7	kernel.asm	/^ffff8000001033f7:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff8000001033fb	kernel.asm	/^ffff8000001033fb:	48 8d 4a 02          	lea    0x2(%rdx),%rcx$/;"	l
ffff8000001033ff	kernel.asm	/^ffff8000001033ff:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff800000103404	kernel.asm	/^ffff800000103404:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103407	kernel.asm	/^ffff800000103407:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff80000010340a	kernel.asm	/^ffff80000010340a:	48 b8 a7 78 10 00 00 	movabs $0xffff8000001078a7,%rax$/;"	l
ffff800000103411	kernel.asm	/^ffff800000103411:	80 ff ff $/;"	l
ffff800000103414	kernel.asm	/^ffff800000103414:	ff d0                	callq  *%rax$/;"	l
ffff800000103416	kernel.asm	/^ffff800000103416:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103419	kernel.asm	/^ffff800000103419:	66 89 45 e0          	mov    %ax,-0x20(%rbp)$/;"	l
ffff80000010341d	kernel.asm	/^ffff80000010341d:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103420	kernel.asm	/^ffff800000103420:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff800000103424	kernel.asm	/^ffff800000103424:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103428	kernel.asm	/^ffff800000103428:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff80000010342d	kernel.asm	/^ffff80000010342d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103430	kernel.asm	/^ffff800000103430:	48 b8 ed 2f 10 00 00 	movabs $0xffff800000102fed,%rax$/;"	l
ffff800000103437	kernel.asm	/^ffff800000103437:	80 ff ff $/;"	l
ffff80000010343a	kernel.asm	/^ffff80000010343a:	ff d0                	callq  *%rax$/;"	l
ffff80000010343c	kernel.asm	/^ffff80000010343c:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff80000010343f	kernel.asm	/^ffff80000010343f:	74 16                	je     ffff800000103457 <dirlink+0x127>$/;"	l
ffff800000103441	kernel.asm	/^ffff800000103441:	48 bf 12 bd 10 00 00 	movabs $0xffff80000010bd12,%rdi$/;"	l
ffff800000103448	kernel.asm	/^ffff800000103448:	80 ff ff $/;"	l
ffff80000010344b	kernel.asm	/^ffff80000010344b:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103452	kernel.asm	/^ffff800000103452:	80 ff ff $/;"	l
ffff800000103455	kernel.asm	/^ffff800000103455:	ff d0                	callq  *%rax$/;"	l
ffff800000103457	kernel.asm	/^ffff800000103457:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010345c	kernel.asm	/^ffff80000010345c:	c9                   	leaveq $/;"	l
ffff80000010345d	kernel.asm	/^ffff80000010345d:	c3                   	retq   $/;"	l
ffff80000010345e	kernel.asm	/^ffff80000010345e <skipelem>:$/;"	l
ffff80000010345e	kernel.asm	/^ffff80000010345e:	55                   	push   %rbp$/;"	l
ffff80000010345f	kernel.asm	/^ffff80000010345f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103462	kernel.asm	/^ffff800000103462:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103466	kernel.asm	/^ffff800000103466:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010346a	kernel.asm	/^ffff80000010346a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010346e	kernel.asm	/^ffff80000010346e:	eb 05                	jmp    ffff800000103475 <skipelem+0x17>$/;"	l
ffff800000103470	kernel.asm	/^ffff800000103470:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff800000103475	kernel.asm	/^ffff800000103475:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103479	kernel.asm	/^ffff800000103479:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010347c	kernel.asm	/^ffff80000010347c:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff80000010347e	kernel.asm	/^ffff80000010347e:	74 f0                	je     ffff800000103470 <skipelem+0x12>$/;"	l
ffff800000103480	kernel.asm	/^ffff800000103480:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103484	kernel.asm	/^ffff800000103484:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103487	kernel.asm	/^ffff800000103487:	84 c0                	test   %al,%al$/;"	l
ffff800000103489	kernel.asm	/^ffff800000103489:	75 0a                	jne    ffff800000103495 <skipelem+0x37>$/;"	l
ffff80000010348b	kernel.asm	/^ffff80000010348b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103490	kernel.asm	/^ffff800000103490:	e9 a0 00 00 00       	jmpq   ffff800000103535 <skipelem+0xd7>$/;"	l
ffff800000103495	kernel.asm	/^ffff800000103495:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103499	kernel.asm	/^ffff800000103499:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010349d	kernel.asm	/^ffff80000010349d:	eb 05                	jmp    ffff8000001034a4 <skipelem+0x46>$/;"	l
ffff80000010349f	kernel.asm	/^ffff80000010349f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff8000001034a4	kernel.asm	/^ffff8000001034a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001034a8	kernel.asm	/^ffff8000001034a8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001034ab	kernel.asm	/^ffff8000001034ab:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff8000001034ad	kernel.asm	/^ffff8000001034ad:	74 0b                	je     ffff8000001034ba <skipelem+0x5c>$/;"	l
ffff8000001034af	kernel.asm	/^ffff8000001034af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001034b3	kernel.asm	/^ffff8000001034b3:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001034b6	kernel.asm	/^ffff8000001034b6:	84 c0                	test   %al,%al$/;"	l
ffff8000001034b8	kernel.asm	/^ffff8000001034b8:	75 e5                	jne    ffff80000010349f <skipelem+0x41>$/;"	l
ffff8000001034ba	kernel.asm	/^ffff8000001034ba:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001034be	kernel.asm	/^ffff8000001034be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001034c2	kernel.asm	/^ffff8000001034c2:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff8000001034c5	kernel.asm	/^ffff8000001034c5:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001034c8	kernel.asm	/^ffff8000001034c8:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001034cb	kernel.asm	/^ffff8000001034cb:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)$/;"	l
ffff8000001034cf	kernel.asm	/^ffff8000001034cf:	7e 21                	jle    ffff8000001034f2 <skipelem+0x94>$/;"	l
ffff8000001034d1	kernel.asm	/^ffff8000001034d1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff8000001034d5	kernel.asm	/^ffff8000001034d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001034d9	kernel.asm	/^ffff8000001034d9:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff8000001034de	kernel.asm	/^ffff8000001034de:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001034e1	kernel.asm	/^ffff8000001034e1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001034e4	kernel.asm	/^ffff8000001034e4:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff8000001034eb	kernel.asm	/^ffff8000001034eb:	80 ff ff $/;"	l
ffff8000001034ee	kernel.asm	/^ffff8000001034ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001034f0	kernel.asm	/^ffff8000001034f0:	eb 34                	jmp    ffff800000103526 <skipelem+0xc8>$/;"	l
ffff8000001034f2	kernel.asm	/^ffff8000001034f2:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001034f5	kernel.asm	/^ffff8000001034f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff8000001034f9	kernel.asm	/^ffff8000001034f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001034fd	kernel.asm	/^ffff8000001034fd:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103500	kernel.asm	/^ffff800000103500:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103503	kernel.asm	/^ffff800000103503:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010350a	kernel.asm	/^ffff80000010350a:	80 ff ff $/;"	l
ffff80000010350d	kernel.asm	/^ffff80000010350d:	ff d0                	callq  *%rax$/;"	l
ffff80000010350f	kernel.asm	/^ffff80000010350f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000103512	kernel.asm	/^ffff800000103512:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000103515	kernel.asm	/^ffff800000103515:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000103519	kernel.asm	/^ffff800000103519:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010351c	kernel.asm	/^ffff80000010351c:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff80000010351f	kernel.asm	/^ffff80000010351f:	eb 05                	jmp    ffff800000103526 <skipelem+0xc8>$/;"	l
ffff800000103521	kernel.asm	/^ffff800000103521:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff800000103526	kernel.asm	/^ffff800000103526:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010352a	kernel.asm	/^ffff80000010352a:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010352d	kernel.asm	/^ffff80000010352d:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff80000010352f	kernel.asm	/^ffff80000010352f:	74 f0                	je     ffff800000103521 <skipelem+0xc3>$/;"	l
ffff800000103531	kernel.asm	/^ffff800000103531:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103535	kernel.asm	/^ffff800000103535:	c9                   	leaveq $/;"	l
ffff800000103536	kernel.asm	/^ffff800000103536:	c3                   	retq   $/;"	l
ffff800000103537	kernel.asm	/^ffff800000103537 <namex>:$/;"	l
ffff800000103537	kernel.asm	/^ffff800000103537:	55                   	push   %rbp$/;"	l
ffff800000103538	kernel.asm	/^ffff800000103538:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010353b	kernel.asm	/^ffff80000010353b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010353f	kernel.asm	/^ffff80000010353f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103543	kernel.asm	/^ffff800000103543:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff800000103546	kernel.asm	/^ffff800000103546:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff80000010354a	kernel.asm	/^ffff80000010354a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010354e	kernel.asm	/^ffff80000010354e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103551	kernel.asm	/^ffff800000103551:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103553	kernel.asm	/^ffff800000103553:	75 1f                	jne    ffff800000103574 <namex+0x3d>$/;"	l
ffff800000103555	kernel.asm	/^ffff800000103555:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010355a	kernel.asm	/^ffff80000010355a:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010355f	kernel.asm	/^ffff80000010355f:	48 b8 4a 26 10 00 00 	movabs $0xffff80000010264a,%rax$/;"	l
ffff800000103566	kernel.asm	/^ffff800000103566:	80 ff ff $/;"	l
ffff800000103569	kernel.asm	/^ffff800000103569:	ff d0                	callq  *%rax$/;"	l
ffff80000010356b	kernel.asm	/^ffff80000010356b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010356f	kernel.asm	/^ffff80000010356f:	e9 f7 00 00 00       	jmpq   ffff80000010366b <namex+0x134>$/;"	l
ffff800000103574	kernel.asm	/^ffff800000103574:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010357b	kernel.asm	/^ffff80000010357b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010357f	kernel.asm	/^ffff80000010357f:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000103586	kernel.asm	/^ffff800000103586:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103589	kernel.asm	/^ffff800000103589:	48 b8 7b 27 10 00 00 	movabs $0xffff80000010277b,%rax$/;"	l
ffff800000103590	kernel.asm	/^ffff800000103590:	80 ff ff $/;"	l
ffff800000103593	kernel.asm	/^ffff800000103593:	ff d0                	callq  *%rax$/;"	l
ffff800000103595	kernel.asm	/^ffff800000103595:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103599	kernel.asm	/^ffff800000103599:	e9 cd 00 00 00       	jmpq   ffff80000010366b <namex+0x134>$/;"	l
ffff80000010359e	kernel.asm	/^ffff80000010359e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001035a2	kernel.asm	/^ffff8000001035a2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035a5	kernel.asm	/^ffff8000001035a5:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001035ac	kernel.asm	/^ffff8000001035ac:	80 ff ff $/;"	l
ffff8000001035af	kernel.asm	/^ffff8000001035af:	ff d0                	callq  *%rax$/;"	l
ffff8000001035b1	kernel.asm	/^ffff8000001035b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001035b5	kernel.asm	/^ffff8000001035b5:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001035bc	kernel.asm	/^ffff8000001035bc:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001035c0	kernel.asm	/^ffff8000001035c0:	74 1d                	je     ffff8000001035df <namex+0xa8>$/;"	l
ffff8000001035c2	kernel.asm	/^ffff8000001035c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001035c6	kernel.asm	/^ffff8000001035c6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035c9	kernel.asm	/^ffff8000001035c9:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff8000001035d0	kernel.asm	/^ffff8000001035d0:	80 ff ff $/;"	l
ffff8000001035d3	kernel.asm	/^ffff8000001035d3:	ff d0                	callq  *%rax$/;"	l
ffff8000001035d5	kernel.asm	/^ffff8000001035d5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001035da	kernel.asm	/^ffff8000001035da:	e9 d9 00 00 00       	jmpq   ffff8000001036b8 <namex+0x181>$/;"	l
ffff8000001035df	kernel.asm	/^ffff8000001035df:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff8000001035e3	kernel.asm	/^ffff8000001035e3:	74 27                	je     ffff80000010360c <namex+0xd5>$/;"	l
ffff8000001035e5	kernel.asm	/^ffff8000001035e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001035e9	kernel.asm	/^ffff8000001035e9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001035ec	kernel.asm	/^ffff8000001035ec:	84 c0                	test   %al,%al$/;"	l
ffff8000001035ee	kernel.asm	/^ffff8000001035ee:	75 1c                	jne    ffff80000010360c <namex+0xd5>$/;"	l
ffff8000001035f0	kernel.asm	/^ffff8000001035f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001035f4	kernel.asm	/^ffff8000001035f4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035f7	kernel.asm	/^ffff8000001035f7:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff8000001035fe	kernel.asm	/^ffff8000001035fe:	80 ff ff $/;"	l
ffff800000103601	kernel.asm	/^ffff800000103601:	ff d0                	callq  *%rax$/;"	l
ffff800000103603	kernel.asm	/^ffff800000103603:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103607	kernel.asm	/^ffff800000103607:	e9 ac 00 00 00       	jmpq   ffff8000001036b8 <namex+0x181>$/;"	l
ffff80000010360c	kernel.asm	/^ffff80000010360c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
ffff800000103610	kernel.asm	/^ffff800000103610:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103614	kernel.asm	/^ffff800000103614:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000103619	kernel.asm	/^ffff800000103619:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010361c	kernel.asm	/^ffff80000010361c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010361f	kernel.asm	/^ffff80000010361f:	48 b8 30 32 10 00 00 	movabs $0xffff800000103230,%rax$/;"	l
ffff800000103626	kernel.asm	/^ffff800000103626:	80 ff ff $/;"	l
ffff800000103629	kernel.asm	/^ffff800000103629:	ff d0                	callq  *%rax$/;"	l
ffff80000010362b	kernel.asm	/^ffff80000010362b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010362f	kernel.asm	/^ffff80000010362f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000103634	kernel.asm	/^ffff800000103634:	75 1a                	jne    ffff800000103650 <namex+0x119>$/;"	l
ffff800000103636	kernel.asm	/^ffff800000103636:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010363a	kernel.asm	/^ffff80000010363a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010363d	kernel.asm	/^ffff80000010363d:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000103644	kernel.asm	/^ffff800000103644:	80 ff ff $/;"	l
ffff800000103647	kernel.asm	/^ffff800000103647:	ff d0                	callq  *%rax$/;"	l
ffff800000103649	kernel.asm	/^ffff800000103649:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010364e	kernel.asm	/^ffff80000010364e:	eb 68                	jmp    ffff8000001036b8 <namex+0x181>$/;"	l
ffff800000103650	kernel.asm	/^ffff800000103650:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103654	kernel.asm	/^ffff800000103654:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103657	kernel.asm	/^ffff800000103657:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff80000010365e	kernel.asm	/^ffff80000010365e:	80 ff ff $/;"	l
ffff800000103661	kernel.asm	/^ffff800000103661:	ff d0                	callq  *%rax$/;"	l
ffff800000103663	kernel.asm	/^ffff800000103663:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103667	kernel.asm	/^ffff800000103667:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010366b	kernel.asm	/^ffff80000010366b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010366f	kernel.asm	/^ffff80000010366f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103673	kernel.asm	/^ffff800000103673:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103676	kernel.asm	/^ffff800000103676:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103679	kernel.asm	/^ffff800000103679:	48 b8 5e 34 10 00 00 	movabs $0xffff80000010345e,%rax$/;"	l
ffff800000103680	kernel.asm	/^ffff800000103680:	80 ff ff $/;"	l
ffff800000103683	kernel.asm	/^ffff800000103683:	ff d0                	callq  *%rax$/;"	l
ffff800000103685	kernel.asm	/^ffff800000103685:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000103689	kernel.asm	/^ffff800000103689:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010368e	kernel.asm	/^ffff80000010368e:	0f 85 0a ff ff ff    	jne    ffff80000010359e <namex+0x67>$/;"	l
ffff800000103694	kernel.asm	/^ffff800000103694:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff800000103698	kernel.asm	/^ffff800000103698:	74 1a                	je     ffff8000001036b4 <namex+0x17d>$/;"	l
ffff80000010369a	kernel.asm	/^ffff80000010369a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010369e	kernel.asm	/^ffff80000010369e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001036a1	kernel.asm	/^ffff8000001036a1:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff8000001036a8	kernel.asm	/^ffff8000001036a8:	80 ff ff $/;"	l
ffff8000001036ab	kernel.asm	/^ffff8000001036ab:	ff d0                	callq  *%rax$/;"	l
ffff8000001036ad	kernel.asm	/^ffff8000001036ad:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001036b2	kernel.asm	/^ffff8000001036b2:	eb 04                	jmp    ffff8000001036b8 <namex+0x181>$/;"	l
ffff8000001036b4	kernel.asm	/^ffff8000001036b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036b8	kernel.asm	/^ffff8000001036b8:	c9                   	leaveq $/;"	l
ffff8000001036b9	kernel.asm	/^ffff8000001036b9:	c3                   	retq   $/;"	l
ffff8000001036ba	kernel.asm	/^ffff8000001036ba <namei>:$/;"	l
ffff8000001036ba	kernel.asm	/^ffff8000001036ba:	55                   	push   %rbp$/;"	l
ffff8000001036bb	kernel.asm	/^ffff8000001036bb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001036be	kernel.asm	/^ffff8000001036be:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001036c2	kernel.asm	/^ffff8000001036c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001036c6	kernel.asm	/^ffff8000001036c6:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff8000001036ca	kernel.asm	/^ffff8000001036ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001036ce	kernel.asm	/^ffff8000001036ce:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001036d3	kernel.asm	/^ffff8000001036d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001036d6	kernel.asm	/^ffff8000001036d6:	48 b8 37 35 10 00 00 	movabs $0xffff800000103537,%rax$/;"	l
ffff8000001036dd	kernel.asm	/^ffff8000001036dd:	80 ff ff $/;"	l
ffff8000001036e0	kernel.asm	/^ffff8000001036e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001036e2	kernel.asm	/^ffff8000001036e2:	c9                   	leaveq $/;"	l
ffff8000001036e3	kernel.asm	/^ffff8000001036e3:	c3                   	retq   $/;"	l
ffff8000001036e4	kernel.asm	/^ffff8000001036e4 <nameiparent>:$/;"	l
ffff8000001036e4	kernel.asm	/^ffff8000001036e4:	55                   	push   %rbp$/;"	l
ffff8000001036e5	kernel.asm	/^ffff8000001036e5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001036e8	kernel.asm	/^ffff8000001036e8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001036ec	kernel.asm	/^ffff8000001036ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001036f0	kernel.asm	/^ffff8000001036f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001036f4	kernel.asm	/^ffff8000001036f4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001036f8	kernel.asm	/^ffff8000001036f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036fc	kernel.asm	/^ffff8000001036fc:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000103701	kernel.asm	/^ffff800000103701:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103704	kernel.asm	/^ffff800000103704:	48 b8 37 35 10 00 00 	movabs $0xffff800000103537,%rax$/;"	l
ffff80000010370b	kernel.asm	/^ffff80000010370b:	80 ff ff $/;"	l
ffff80000010370e	kernel.asm	/^ffff80000010370e:	ff d0                	callq  *%rax$/;"	l
ffff800000103710	kernel.asm	/^ffff800000103710:	c9                   	leaveq $/;"	l
ffff800000103711	kernel.asm	/^ffff800000103711:	c3                   	retq   $/;"	l
ffff800000103712	kernel.asm	/^ffff800000103712 <inb>:$/;"	l
ffff800000103712	kernel.asm	/^ffff800000103712:	55                   	push   %rbp$/;"	l
ffff800000103713	kernel.asm	/^ffff800000103713:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103716	kernel.asm	/^ffff800000103716:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010371a	kernel.asm	/^ffff80000010371a:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010371c	kernel.asm	/^ffff80000010371c:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000103720	kernel.asm	/^ffff800000103720:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000103724	kernel.asm	/^ffff800000103724:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103726	kernel.asm	/^ffff800000103726:	ec                   	in     (%dx),%al$/;"	l
ffff800000103727	kernel.asm	/^ffff800000103727:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010372a	kernel.asm	/^ffff80000010372a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010372e	kernel.asm	/^ffff80000010372e:	c9                   	leaveq $/;"	l
ffff80000010372f	kernel.asm	/^ffff80000010372f:	c3                   	retq   $/;"	l
ffff800000103730	kernel.asm	/^ffff800000103730 <insl>:$/;"	l
ffff800000103730	kernel.asm	/^ffff800000103730:	55                   	push   %rbp$/;"	l
ffff800000103731	kernel.asm	/^ffff800000103731:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103734	kernel.asm	/^ffff800000103734:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103738	kernel.asm	/^ffff800000103738:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff80000010373b	kernel.asm	/^ffff80000010373b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff80000010373f	kernel.asm	/^ffff80000010373f:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff800000103742	kernel.asm	/^ffff800000103742:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103745	kernel.asm	/^ffff800000103745:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000103749	kernel.asm	/^ffff800000103749:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010374c	kernel.asm	/^ffff80000010374c:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010374f	kernel.asm	/^ffff80000010374f:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff800000103752	kernel.asm	/^ffff800000103752:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000103754	kernel.asm	/^ffff800000103754:	fc                   	cld    $/;"	l
ffff800000103755	kernel.asm	/^ffff800000103755:	f3 6d                	rep insl (%dx),%es:(%rdi)$/;"	l
ffff800000103757	kernel.asm	/^ffff800000103757:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000103759	kernel.asm	/^ffff800000103759:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010375c	kernel.asm	/^ffff80000010375c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103760	kernel.asm	/^ffff800000103760:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103763	kernel.asm	/^ffff800000103763:	90                   	nop$/;"	l
ffff800000103764	kernel.asm	/^ffff800000103764:	c9                   	leaveq $/;"	l
ffff800000103765	kernel.asm	/^ffff800000103765:	c3                   	retq   $/;"	l
ffff800000103766	kernel.asm	/^ffff800000103766 <outb>:$/;"	l
ffff800000103766	kernel.asm	/^ffff800000103766:	55                   	push   %rbp$/;"	l
ffff800000103767	kernel.asm	/^ffff800000103767:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010376a	kernel.asm	/^ffff80000010376a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010376e	kernel.asm	/^ffff80000010376e:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000103770	kernel.asm	/^ffff800000103770:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000103772	kernel.asm	/^ffff800000103772:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000103776	kernel.asm	/^ffff800000103776:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000103779	kernel.asm	/^ffff800000103779:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010377d	kernel.asm	/^ffff80000010377d:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000103781	kernel.asm	/^ffff800000103781:	ee                   	out    %al,(%dx)$/;"	l
ffff800000103782	kernel.asm	/^ffff800000103782:	90                   	nop$/;"	l
ffff800000103783	kernel.asm	/^ffff800000103783:	c9                   	leaveq $/;"	l
ffff800000103784	kernel.asm	/^ffff800000103784:	c3                   	retq   $/;"	l
ffff800000103785	kernel.asm	/^ffff800000103785 <outsl>:$/;"	l
ffff800000103785	kernel.asm	/^ffff800000103785:	55                   	push   %rbp$/;"	l
ffff800000103786	kernel.asm	/^ffff800000103786:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103789	kernel.asm	/^ffff800000103789:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010378d	kernel.asm	/^ffff80000010378d:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103790	kernel.asm	/^ffff800000103790:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103794	kernel.asm	/^ffff800000103794:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff800000103797	kernel.asm	/^ffff800000103797:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010379a	kernel.asm	/^ffff80000010379a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff80000010379e	kernel.asm	/^ffff80000010379e:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001037a1	kernel.asm	/^ffff8000001037a1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001037a4	kernel.asm	/^ffff8000001037a4:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001037a6	kernel.asm	/^ffff8000001037a6:	fc                   	cld    $/;"	l
ffff8000001037a7	kernel.asm	/^ffff8000001037a7:	f3 6f                	rep outsl %ds:(%rsi),(%dx)$/;"	l
ffff8000001037a9	kernel.asm	/^ffff8000001037a9:	89 c8                	mov    %ecx,%eax$/;"	l
ffff8000001037ab	kernel.asm	/^ffff8000001037ab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001037af	kernel.asm	/^ffff8000001037af:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001037b2	kernel.asm	/^ffff8000001037b2:	90                   	nop$/;"	l
ffff8000001037b3	kernel.asm	/^ffff8000001037b3:	c9                   	leaveq $/;"	l
ffff8000001037b4	kernel.asm	/^ffff8000001037b4:	c3                   	retq   $/;"	l
ffff8000001037b5	kernel.asm	/^ffff8000001037b5 <idewait>:$/;"	l
ffff8000001037b5	kernel.asm	/^ffff8000001037b5:	55                   	push   %rbp$/;"	l
ffff8000001037b6	kernel.asm	/^ffff8000001037b6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001037b9	kernel.asm	/^ffff8000001037b9:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001037bd	kernel.asm	/^ffff8000001037bd:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001037c0	kernel.asm	/^ffff8000001037c0:	90                   	nop$/;"	l
ffff8000001037c1	kernel.asm	/^ffff8000001037c1:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff8000001037c6	kernel.asm	/^ffff8000001037c6:	48 b8 12 37 10 00 00 	movabs $0xffff800000103712,%rax$/;"	l
ffff8000001037cd	kernel.asm	/^ffff8000001037cd:	80 ff ff $/;"	l
ffff8000001037d0	kernel.asm	/^ffff8000001037d0:	ff d0                	callq  *%rax$/;"	l
ffff8000001037d2	kernel.asm	/^ffff8000001037d2:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001037d5	kernel.asm	/^ffff8000001037d5:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001037d8	kernel.asm	/^ffff8000001037d8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001037db	kernel.asm	/^ffff8000001037db:	25 c0 00 00 00       	and    $0xc0,%eax$/;"	l
ffff8000001037e0	kernel.asm	/^ffff8000001037e0:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff8000001037e3	kernel.asm	/^ffff8000001037e3:	75 dc                	jne    ffff8000001037c1 <idewait+0xc>$/;"	l
ffff8000001037e5	kernel.asm	/^ffff8000001037e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001037e9	kernel.asm	/^ffff8000001037e9:	74 11                	je     ffff8000001037fc <idewait+0x47>$/;"	l
ffff8000001037eb	kernel.asm	/^ffff8000001037eb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001037ee	kernel.asm	/^ffff8000001037ee:	83 e0 21             	and    $0x21,%eax$/;"	l
ffff8000001037f1	kernel.asm	/^ffff8000001037f1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001037f3	kernel.asm	/^ffff8000001037f3:	74 07                	je     ffff8000001037fc <idewait+0x47>$/;"	l
ffff8000001037f5	kernel.asm	/^ffff8000001037f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001037fa	kernel.asm	/^ffff8000001037fa:	eb 05                	jmp    ffff800000103801 <idewait+0x4c>$/;"	l
ffff8000001037fc	kernel.asm	/^ffff8000001037fc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103801	kernel.asm	/^ffff800000103801:	c9                   	leaveq $/;"	l
ffff800000103802	kernel.asm	/^ffff800000103802:	c3                   	retq   $/;"	l
ffff800000103803	kernel.asm	/^ffff800000103803 <ideinit>:$/;"	l
ffff800000103803	kernel.asm	/^ffff800000103803:	55                   	push   %rbp$/;"	l
ffff800000103804	kernel.asm	/^ffff800000103804:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103807	kernel.asm	/^ffff800000103807:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010380b	kernel.asm	/^ffff80000010380b:	48 be 1a bd 10 00 00 	movabs $0xffff80000010bd1a,%rsi$/;"	l
ffff800000103812	kernel.asm	/^ffff800000103812:	80 ff ff $/;"	l
ffff800000103815	kernel.asm	/^ffff800000103815:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff80000010381c	kernel.asm	/^ffff80000010381c:	80 ff ff $/;"	l
ffff80000010381f	kernel.asm	/^ffff80000010381f:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000103826	kernel.asm	/^ffff800000103826:	80 ff ff $/;"	l
ffff800000103829	kernel.asm	/^ffff800000103829:	ff d0                	callq  *%rax$/;"	l
ffff80000010382b	kernel.asm	/^ffff80000010382b:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff800000103832	kernel.asm	/^ffff800000103832:	80 ff ff $/;"	l
ffff800000103835	kernel.asm	/^ffff800000103835:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103837	kernel.asm	/^ffff800000103837:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010383a	kernel.asm	/^ffff80000010383a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010383c	kernel.asm	/^ffff80000010383c:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff800000103841	kernel.asm	/^ffff800000103841:	48 b8 65 3e 10 00 00 	movabs $0xffff800000103e65,%rax$/;"	l
ffff800000103848	kernel.asm	/^ffff800000103848:	80 ff ff $/;"	l
ffff80000010384b	kernel.asm	/^ffff80000010384b:	ff d0                	callq  *%rax$/;"	l
ffff80000010384d	kernel.asm	/^ffff80000010384d:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103852	kernel.asm	/^ffff800000103852:	48 b8 b5 37 10 00 00 	movabs $0xffff8000001037b5,%rax$/;"	l
ffff800000103859	kernel.asm	/^ffff800000103859:	80 ff ff $/;"	l
ffff80000010385c	kernel.asm	/^ffff80000010385c:	ff d0                	callq  *%rax$/;"	l
ffff80000010385e	kernel.asm	/^ffff80000010385e:	be f0 00 00 00       	mov    $0xf0,%esi$/;"	l
ffff800000103863	kernel.asm	/^ffff800000103863:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103868	kernel.asm	/^ffff800000103868:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff80000010386f	kernel.asm	/^ffff80000010386f:	80 ff ff $/;"	l
ffff800000103872	kernel.asm	/^ffff800000103872:	ff d0                	callq  *%rax$/;"	l
ffff800000103874	kernel.asm	/^ffff800000103874:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010387b	kernel.asm	/^ffff80000010387b:	eb 2b                	jmp    ffff8000001038a8 <ideinit+0xa5>$/;"	l
ffff80000010387d	kernel.asm	/^ffff80000010387d:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103882	kernel.asm	/^ffff800000103882:	48 b8 12 37 10 00 00 	movabs $0xffff800000103712,%rax$/;"	l
ffff800000103889	kernel.asm	/^ffff800000103889:	80 ff ff $/;"	l
ffff80000010388c	kernel.asm	/^ffff80000010388c:	ff d0                	callq  *%rax$/;"	l
ffff80000010388e	kernel.asm	/^ffff80000010388e:	84 c0                	test   %al,%al$/;"	l
ffff800000103890	kernel.asm	/^ffff800000103890:	74 12                	je     ffff8000001038a4 <ideinit+0xa1>$/;"	l
ffff800000103892	kernel.asm	/^ffff800000103892:	48 b8 30 71 11 00 00 	movabs $0xffff800000117130,%rax$/;"	l
ffff800000103899	kernel.asm	/^ffff800000103899:	80 ff ff $/;"	l
ffff80000010389c	kernel.asm	/^ffff80000010389c:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff8000001038a2	kernel.asm	/^ffff8000001038a2:	eb 0d                	jmp    ffff8000001038b1 <ideinit+0xae>$/;"	l
ffff8000001038a4	kernel.asm	/^ffff8000001038a4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001038a8	kernel.asm	/^ffff8000001038a8:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ffff8000001038af	kernel.asm	/^ffff8000001038af:	7e cc                	jle    ffff80000010387d <ideinit+0x7a>$/;"	l
ffff8000001038b1	kernel.asm	/^ffff8000001038b1:	be e0 00 00 00       	mov    $0xe0,%esi$/;"	l
ffff8000001038b6	kernel.asm	/^ffff8000001038b6:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff8000001038bb	kernel.asm	/^ffff8000001038bb:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff8000001038c2	kernel.asm	/^ffff8000001038c2:	80 ff ff $/;"	l
ffff8000001038c5	kernel.asm	/^ffff8000001038c5:	ff d0                	callq  *%rax$/;"	l
ffff8000001038c7	kernel.asm	/^ffff8000001038c7:	90                   	nop$/;"	l
ffff8000001038c8	kernel.asm	/^ffff8000001038c8:	c9                   	leaveq $/;"	l
ffff8000001038c9	kernel.asm	/^ffff8000001038c9:	c3                   	retq   $/;"	l
ffff8000001038ca	kernel.asm	/^ffff8000001038ca <idestart>:$/;"	l
ffff8000001038ca	kernel.asm	/^ffff8000001038ca:	55                   	push   %rbp$/;"	l
ffff8000001038cb	kernel.asm	/^ffff8000001038cb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001038ce	kernel.asm	/^ffff8000001038ce:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001038d2	kernel.asm	/^ffff8000001038d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001038d6	kernel.asm	/^ffff8000001038d6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff8000001038db	kernel.asm	/^ffff8000001038db:	75 16                	jne    ffff8000001038f3 <idestart+0x29>$/;"	l
ffff8000001038dd	kernel.asm	/^ffff8000001038dd:	48 bf 1e bd 10 00 00 	movabs $0xffff80000010bd1e,%rdi$/;"	l
ffff8000001038e4	kernel.asm	/^ffff8000001038e4:	80 ff ff $/;"	l
ffff8000001038e7	kernel.asm	/^ffff8000001038e7:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001038ee	kernel.asm	/^ffff8000001038ee:	80 ff ff $/;"	l
ffff8000001038f1	kernel.asm	/^ffff8000001038f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001038f3	kernel.asm	/^ffff8000001038f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001038f7	kernel.asm	/^ffff8000001038f7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001038fa	kernel.asm	/^ffff8000001038fa:	3d e7 03 00 00       	cmp    $0x3e7,%eax$/;"	l
ffff8000001038ff	kernel.asm	/^ffff8000001038ff:	76 16                	jbe    ffff800000103917 <idestart+0x4d>$/;"	l
ffff800000103901	kernel.asm	/^ffff800000103901:	48 bf 27 bd 10 00 00 	movabs $0xffff80000010bd27,%rdi$/;"	l
ffff800000103908	kernel.asm	/^ffff800000103908:	80 ff ff $/;"	l
ffff80000010390b	kernel.asm	/^ffff80000010390b:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103912	kernel.asm	/^ffff800000103912:	80 ff ff $/;"	l
ffff800000103915	kernel.asm	/^ffff800000103915:	ff d0                	callq  *%rax$/;"	l
ffff800000103917	kernel.asm	/^ffff800000103917:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010391e	kernel.asm	/^ffff80000010391e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103922	kernel.asm	/^ffff800000103922:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000103925	kernel.asm	/^ffff800000103925:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103928	kernel.asm	/^ffff800000103928:	0f af c2             	imul   %edx,%eax$/;"	l
ffff80000010392b	kernel.asm	/^ffff80000010392b:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010392e	kernel.asm	/^ffff80000010392e:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103932	kernel.asm	/^ffff800000103932:	75 07                	jne    ffff80000010393b <idestart+0x71>$/;"	l
ffff800000103934	kernel.asm	/^ffff800000103934:	b8 20 00 00 00       	mov    $0x20,%eax$/;"	l
ffff800000103939	kernel.asm	/^ffff800000103939:	eb 05                	jmp    ffff800000103940 <idestart+0x76>$/;"	l
ffff80000010393b	kernel.asm	/^ffff80000010393b:	b8 c4 00 00 00       	mov    $0xc4,%eax$/;"	l
ffff800000103940	kernel.asm	/^ffff800000103940:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103943	kernel.asm	/^ffff800000103943:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103947	kernel.asm	/^ffff800000103947:	75 07                	jne    ffff800000103950 <idestart+0x86>$/;"	l
ffff800000103949	kernel.asm	/^ffff800000103949:	b8 30 00 00 00       	mov    $0x30,%eax$/;"	l
ffff80000010394e	kernel.asm	/^ffff80000010394e:	eb 05                	jmp    ffff800000103955 <idestart+0x8b>$/;"	l
ffff800000103950	kernel.asm	/^ffff800000103950:	b8 c5 00 00 00       	mov    $0xc5,%eax$/;"	l
ffff800000103955	kernel.asm	/^ffff800000103955:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000103958	kernel.asm	/^ffff800000103958:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)$/;"	l
ffff80000010395c	kernel.asm	/^ffff80000010395c:	7e 16                	jle    ffff800000103974 <idestart+0xaa>$/;"	l
ffff80000010395e	kernel.asm	/^ffff80000010395e:	48 bf 1e bd 10 00 00 	movabs $0xffff80000010bd1e,%rdi$/;"	l
ffff800000103965	kernel.asm	/^ffff800000103965:	80 ff ff $/;"	l
ffff800000103968	kernel.asm	/^ffff800000103968:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010396f	kernel.asm	/^ffff80000010396f:	80 ff ff $/;"	l
ffff800000103972	kernel.asm	/^ffff800000103972:	ff d0                	callq  *%rax$/;"	l
ffff800000103974	kernel.asm	/^ffff800000103974:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103979	kernel.asm	/^ffff800000103979:	48 b8 b5 37 10 00 00 	movabs $0xffff8000001037b5,%rax$/;"	l
ffff800000103980	kernel.asm	/^ffff800000103980:	80 ff ff $/;"	l
ffff800000103983	kernel.asm	/^ffff800000103983:	ff d0                	callq  *%rax$/;"	l
ffff800000103985	kernel.asm	/^ffff800000103985:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010398a	kernel.asm	/^ffff80000010398a:	bf f6 03 00 00       	mov    $0x3f6,%edi$/;"	l
ffff80000010398f	kernel.asm	/^ffff80000010398f:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff800000103996	kernel.asm	/^ffff800000103996:	80 ff ff $/;"	l
ffff800000103999	kernel.asm	/^ffff800000103999:	ff d0                	callq  *%rax$/;"	l
ffff80000010399b	kernel.asm	/^ffff80000010399b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010399e	kernel.asm	/^ffff80000010399e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001039a1	kernel.asm	/^ffff8000001039a1:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001039a3	kernel.asm	/^ffff8000001039a3:	bf f2 01 00 00       	mov    $0x1f2,%edi$/;"	l
ffff8000001039a8	kernel.asm	/^ffff8000001039a8:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff8000001039af	kernel.asm	/^ffff8000001039af:	80 ff ff $/;"	l
ffff8000001039b2	kernel.asm	/^ffff8000001039b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001039b4	kernel.asm	/^ffff8000001039b4:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001039b7	kernel.asm	/^ffff8000001039b7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001039ba	kernel.asm	/^ffff8000001039ba:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001039bc	kernel.asm	/^ffff8000001039bc:	bf f3 01 00 00       	mov    $0x1f3,%edi$/;"	l
ffff8000001039c1	kernel.asm	/^ffff8000001039c1:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff8000001039c8	kernel.asm	/^ffff8000001039c8:	80 ff ff $/;"	l
ffff8000001039cb	kernel.asm	/^ffff8000001039cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001039cd	kernel.asm	/^ffff8000001039cd:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001039d0	kernel.asm	/^ffff8000001039d0:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff8000001039d3	kernel.asm	/^ffff8000001039d3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001039d6	kernel.asm	/^ffff8000001039d6:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001039d8	kernel.asm	/^ffff8000001039d8:	bf f4 01 00 00       	mov    $0x1f4,%edi$/;"	l
ffff8000001039dd	kernel.asm	/^ffff8000001039dd:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff8000001039e4	kernel.asm	/^ffff8000001039e4:	80 ff ff $/;"	l
ffff8000001039e7	kernel.asm	/^ffff8000001039e7:	ff d0                	callq  *%rax$/;"	l
ffff8000001039e9	kernel.asm	/^ffff8000001039e9:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001039ec	kernel.asm	/^ffff8000001039ec:	c1 f8 10             	sar    $0x10,%eax$/;"	l
ffff8000001039ef	kernel.asm	/^ffff8000001039ef:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001039f2	kernel.asm	/^ffff8000001039f2:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001039f4	kernel.asm	/^ffff8000001039f4:	bf f5 01 00 00       	mov    $0x1f5,%edi$/;"	l
ffff8000001039f9	kernel.asm	/^ffff8000001039f9:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff800000103a00	kernel.asm	/^ffff800000103a00:	80 ff ff $/;"	l
ffff800000103a03	kernel.asm	/^ffff800000103a03:	ff d0                	callq  *%rax$/;"	l
ffff800000103a05	kernel.asm	/^ffff800000103a05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103a09	kernel.asm	/^ffff800000103a09:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103a0c	kernel.asm	/^ffff800000103a0c:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000103a0f	kernel.asm	/^ffff800000103a0f:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000103a12	kernel.asm	/^ffff800000103a12:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103a14	kernel.asm	/^ffff800000103a14:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103a17	kernel.asm	/^ffff800000103a17:	c1 f8 18             	sar    $0x18,%eax$/;"	l
ffff800000103a1a	kernel.asm	/^ffff800000103a1a:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000103a1d	kernel.asm	/^ffff800000103a1d:	09 d0                	or     %edx,%eax$/;"	l
ffff800000103a1f	kernel.asm	/^ffff800000103a1f:	83 c8 e0             	or     $0xffffffe0,%eax$/;"	l
ffff800000103a22	kernel.asm	/^ffff800000103a22:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a25	kernel.asm	/^ffff800000103a25:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a27	kernel.asm	/^ffff800000103a27:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103a2c	kernel.asm	/^ffff800000103a2c:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff800000103a33	kernel.asm	/^ffff800000103a33:	80 ff ff $/;"	l
ffff800000103a36	kernel.asm	/^ffff800000103a36:	ff d0                	callq  *%rax$/;"	l
ffff800000103a38	kernel.asm	/^ffff800000103a38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103a3c	kernel.asm	/^ffff800000103a3c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103a3e	kernel.asm	/^ffff800000103a3e:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103a41	kernel.asm	/^ffff800000103a41:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103a43	kernel.asm	/^ffff800000103a43:	74 3e                	je     ffff800000103a83 <idestart+0x1b9>$/;"	l
ffff800000103a45	kernel.asm	/^ffff800000103a45:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000103a48	kernel.asm	/^ffff800000103a48:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a4b	kernel.asm	/^ffff800000103a4b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a4d	kernel.asm	/^ffff800000103a4d:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103a52	kernel.asm	/^ffff800000103a52:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff800000103a59	kernel.asm	/^ffff800000103a59:	80 ff ff $/;"	l
ffff800000103a5c	kernel.asm	/^ffff800000103a5c:	ff d0                	callq  *%rax$/;"	l
ffff800000103a5e	kernel.asm	/^ffff800000103a5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103a62	kernel.asm	/^ffff800000103a62:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103a68	kernel.asm	/^ffff800000103a68:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103a6d	kernel.asm	/^ffff800000103a6d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103a70	kernel.asm	/^ffff800000103a70:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103a75	kernel.asm	/^ffff800000103a75:	48 b8 85 37 10 00 00 	movabs $0xffff800000103785,%rax$/;"	l
ffff800000103a7c	kernel.asm	/^ffff800000103a7c:	80 ff ff $/;"	l
ffff800000103a7f	kernel.asm	/^ffff800000103a7f:	ff d0                	callq  *%rax$/;"	l
ffff800000103a81	kernel.asm	/^ffff800000103a81:	eb 19                	jmp    ffff800000103a9c <idestart+0x1d2>$/;"	l
ffff800000103a83	kernel.asm	/^ffff800000103a83:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000103a86	kernel.asm	/^ffff800000103a86:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a89	kernel.asm	/^ffff800000103a89:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a8b	kernel.asm	/^ffff800000103a8b:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103a90	kernel.asm	/^ffff800000103a90:	48 b8 66 37 10 00 00 	movabs $0xffff800000103766,%rax$/;"	l
ffff800000103a97	kernel.asm	/^ffff800000103a97:	80 ff ff $/;"	l
ffff800000103a9a	kernel.asm	/^ffff800000103a9a:	ff d0                	callq  *%rax$/;"	l
ffff800000103a9c	kernel.asm	/^ffff800000103a9c:	90                   	nop$/;"	l
ffff800000103a9d	kernel.asm	/^ffff800000103a9d:	c9                   	leaveq $/;"	l
ffff800000103a9e	kernel.asm	/^ffff800000103a9e:	c3                   	retq   $/;"	l
ffff800000103a9f	kernel.asm	/^ffff800000103a9f <ideintr>:$/;"	l
ffff800000103a9f	kernel.asm	/^ffff800000103a9f:	55                   	push   %rbp$/;"	l
ffff800000103aa0	kernel.asm	/^ffff800000103aa0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103aa3	kernel.asm	/^ffff800000103aa3:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103aa7	kernel.asm	/^ffff800000103aa7:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff800000103aae	kernel.asm	/^ffff800000103aae:	80 ff ff $/;"	l
ffff800000103ab1	kernel.asm	/^ffff800000103ab1:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000103ab8	kernel.asm	/^ffff800000103ab8:	80 ff ff $/;"	l
ffff800000103abb	kernel.asm	/^ffff800000103abb:	ff d0                	callq  *%rax$/;"	l
ffff800000103abd	kernel.asm	/^ffff800000103abd:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103ac4	kernel.asm	/^ffff800000103ac4:	80 ff ff $/;"	l
ffff800000103ac7	kernel.asm	/^ffff800000103ac7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103aca	kernel.asm	/^ffff800000103aca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103ace	kernel.asm	/^ffff800000103ace:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000103ad3	kernel.asm	/^ffff800000103ad3:	75 1b                	jne    ffff800000103af0 <ideintr+0x51>$/;"	l
ffff800000103ad5	kernel.asm	/^ffff800000103ad5:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff800000103adc	kernel.asm	/^ffff800000103adc:	80 ff ff $/;"	l
ffff800000103adf	kernel.asm	/^ffff800000103adf:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000103ae6	kernel.asm	/^ffff800000103ae6:	80 ff ff $/;"	l
ffff800000103ae9	kernel.asm	/^ffff800000103ae9:	ff d0                	callq  *%rax$/;"	l
ffff800000103aeb	kernel.asm	/^ffff800000103aeb:	e9 d6 00 00 00       	jmpq   ffff800000103bc6 <ideintr+0x127>$/;"	l
ffff800000103af0	kernel.asm	/^ffff800000103af0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103af4	kernel.asm	/^ffff800000103af4:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx$/;"	l
ffff800000103afb	kernel.asm	/^ffff800000103afb:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103b02	kernel.asm	/^ffff800000103b02:	80 ff ff $/;"	l
ffff800000103b05	kernel.asm	/^ffff800000103b05:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103b08	kernel.asm	/^ffff800000103b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b0c	kernel.asm	/^ffff800000103b0c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103b0e	kernel.asm	/^ffff800000103b0e:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103b11	kernel.asm	/^ffff800000103b11:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103b13	kernel.asm	/^ffff800000103b13:	75 38                	jne    ffff800000103b4d <ideintr+0xae>$/;"	l
ffff800000103b15	kernel.asm	/^ffff800000103b15:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103b1a	kernel.asm	/^ffff800000103b1a:	48 b8 b5 37 10 00 00 	movabs $0xffff8000001037b5,%rax$/;"	l
ffff800000103b21	kernel.asm	/^ffff800000103b21:	80 ff ff $/;"	l
ffff800000103b24	kernel.asm	/^ffff800000103b24:	ff d0                	callq  *%rax$/;"	l
ffff800000103b26	kernel.asm	/^ffff800000103b26:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103b28	kernel.asm	/^ffff800000103b28:	78 23                	js     ffff800000103b4d <ideintr+0xae>$/;"	l
ffff800000103b2a	kernel.asm	/^ffff800000103b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b2e	kernel.asm	/^ffff800000103b2e:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103b34	kernel.asm	/^ffff800000103b34:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103b39	kernel.asm	/^ffff800000103b39:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103b3c	kernel.asm	/^ffff800000103b3c:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103b41	kernel.asm	/^ffff800000103b41:	48 b8 30 37 10 00 00 	movabs $0xffff800000103730,%rax$/;"	l
ffff800000103b48	kernel.asm	/^ffff800000103b48:	80 ff ff $/;"	l
ffff800000103b4b	kernel.asm	/^ffff800000103b4b:	ff d0                	callq  *%rax$/;"	l
ffff800000103b4d	kernel.asm	/^ffff800000103b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b51	kernel.asm	/^ffff800000103b51:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103b53	kernel.asm	/^ffff800000103b53:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000103b56	kernel.asm	/^ffff800000103b56:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103b58	kernel.asm	/^ffff800000103b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b5c	kernel.asm	/^ffff800000103b5c:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103b5e	kernel.asm	/^ffff800000103b5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b62	kernel.asm	/^ffff800000103b62:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103b64	kernel.asm	/^ffff800000103b64:	83 e0 fb             	and    $0xfffffffb,%eax$/;"	l
ffff800000103b67	kernel.asm	/^ffff800000103b67:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103b69	kernel.asm	/^ffff800000103b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b6d	kernel.asm	/^ffff800000103b6d:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103b6f	kernel.asm	/^ffff800000103b6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103b73	kernel.asm	/^ffff800000103b73:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103b76	kernel.asm	/^ffff800000103b76:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000103b7d	kernel.asm	/^ffff800000103b7d:	80 ff ff $/;"	l
ffff800000103b80	kernel.asm	/^ffff800000103b80:	ff d0                	callq  *%rax$/;"	l
ffff800000103b82	kernel.asm	/^ffff800000103b82:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103b89	kernel.asm	/^ffff800000103b89:	80 ff ff $/;"	l
ffff800000103b8c	kernel.asm	/^ffff800000103b8c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103b8f	kernel.asm	/^ffff800000103b8f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103b92	kernel.asm	/^ffff800000103b92:	74 1c                	je     ffff800000103bb0 <ideintr+0x111>$/;"	l
ffff800000103b94	kernel.asm	/^ffff800000103b94:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103b9b	kernel.asm	/^ffff800000103b9b:	80 ff ff $/;"	l
ffff800000103b9e	kernel.asm	/^ffff800000103b9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103ba1	kernel.asm	/^ffff800000103ba1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103ba4	kernel.asm	/^ffff800000103ba4:	48 b8 ca 38 10 00 00 	movabs $0xffff8000001038ca,%rax$/;"	l
ffff800000103bab	kernel.asm	/^ffff800000103bab:	80 ff ff $/;"	l
ffff800000103bae	kernel.asm	/^ffff800000103bae:	ff d0                	callq  *%rax$/;"	l
ffff800000103bb0	kernel.asm	/^ffff800000103bb0:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff800000103bb7	kernel.asm	/^ffff800000103bb7:	80 ff ff $/;"	l
ffff800000103bba	kernel.asm	/^ffff800000103bba:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000103bc1	kernel.asm	/^ffff800000103bc1:	80 ff ff $/;"	l
ffff800000103bc4	kernel.asm	/^ffff800000103bc4:	ff d0                	callq  *%rax$/;"	l
ffff800000103bc6	kernel.asm	/^ffff800000103bc6:	c9                   	leaveq $/;"	l
ffff800000103bc7	kernel.asm	/^ffff800000103bc7:	c3                   	retq   $/;"	l
ffff800000103bc8	kernel.asm	/^ffff800000103bc8 <iderw>:$/;"	l
ffff800000103bc8	kernel.asm	/^ffff800000103bc8:	55                   	push   %rbp$/;"	l
ffff800000103bc9	kernel.asm	/^ffff800000103bc9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103bcc	kernel.asm	/^ffff800000103bcc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103bd0	kernel.asm	/^ffff800000103bd0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103bd4	kernel.asm	/^ffff800000103bd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103bd8	kernel.asm	/^ffff800000103bd8:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000103bdc	kernel.asm	/^ffff800000103bdc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103bdf	kernel.asm	/^ffff800000103bdf:	48 b8 04 72 10 00 00 	movabs $0xffff800000107204,%rax$/;"	l
ffff800000103be6	kernel.asm	/^ffff800000103be6:	80 ff ff $/;"	l
ffff800000103be9	kernel.asm	/^ffff800000103be9:	ff d0                	callq  *%rax$/;"	l
ffff800000103beb	kernel.asm	/^ffff800000103beb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103bed	kernel.asm	/^ffff800000103bed:	75 16                	jne    ffff800000103c05 <iderw+0x3d>$/;"	l
ffff800000103bef	kernel.asm	/^ffff800000103bef:	48 bf 39 bd 10 00 00 	movabs $0xffff80000010bd39,%rdi$/;"	l
ffff800000103bf6	kernel.asm	/^ffff800000103bf6:	80 ff ff $/;"	l
ffff800000103bf9	kernel.asm	/^ffff800000103bf9:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103c00	kernel.asm	/^ffff800000103c00:	80 ff ff $/;"	l
ffff800000103c03	kernel.asm	/^ffff800000103c03:	ff d0                	callq  *%rax$/;"	l
ffff800000103c05	kernel.asm	/^ffff800000103c05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103c09	kernel.asm	/^ffff800000103c09:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103c0b	kernel.asm	/^ffff800000103c0b:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103c0e	kernel.asm	/^ffff800000103c0e:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103c11	kernel.asm	/^ffff800000103c11:	75 16                	jne    ffff800000103c29 <iderw+0x61>$/;"	l
ffff800000103c13	kernel.asm	/^ffff800000103c13:	48 bf 4f bd 10 00 00 	movabs $0xffff80000010bd4f,%rdi$/;"	l
ffff800000103c1a	kernel.asm	/^ffff800000103c1a:	80 ff ff $/;"	l
ffff800000103c1d	kernel.asm	/^ffff800000103c1d:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103c24	kernel.asm	/^ffff800000103c24:	80 ff ff $/;"	l
ffff800000103c27	kernel.asm	/^ffff800000103c27:	ff d0                	callq  *%rax$/;"	l
ffff800000103c29	kernel.asm	/^ffff800000103c29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103c2d	kernel.asm	/^ffff800000103c2d:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103c30	kernel.asm	/^ffff800000103c30:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103c32	kernel.asm	/^ffff800000103c32:	74 26                	je     ffff800000103c5a <iderw+0x92>$/;"	l
ffff800000103c34	kernel.asm	/^ffff800000103c34:	48 b8 30 71 11 00 00 	movabs $0xffff800000117130,%rax$/;"	l
ffff800000103c3b	kernel.asm	/^ffff800000103c3b:	80 ff ff $/;"	l
ffff800000103c3e	kernel.asm	/^ffff800000103c3e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103c40	kernel.asm	/^ffff800000103c40:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103c42	kernel.asm	/^ffff800000103c42:	75 16                	jne    ffff800000103c5a <iderw+0x92>$/;"	l
ffff800000103c44	kernel.asm	/^ffff800000103c44:	48 bf 64 bd 10 00 00 	movabs $0xffff80000010bd64,%rdi$/;"	l
ffff800000103c4b	kernel.asm	/^ffff800000103c4b:	80 ff ff $/;"	l
ffff800000103c4e	kernel.asm	/^ffff800000103c4e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103c55	kernel.asm	/^ffff800000103c55:	80 ff ff $/;"	l
ffff800000103c58	kernel.asm	/^ffff800000103c58:	ff d0                	callq  *%rax$/;"	l
ffff800000103c5a	kernel.asm	/^ffff800000103c5a:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff800000103c61	kernel.asm	/^ffff800000103c61:	80 ff ff $/;"	l
ffff800000103c64	kernel.asm	/^ffff800000103c64:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000103c6b	kernel.asm	/^ffff800000103c6b:	80 ff ff $/;"	l
ffff800000103c6e	kernel.asm	/^ffff800000103c6e:	ff d0                	callq  *%rax$/;"	l
ffff800000103c70	kernel.asm	/^ffff800000103c70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103c74	kernel.asm	/^ffff800000103c74:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)$/;"	l
ffff800000103c7b	kernel.asm	/^ffff800000103c7b:	00 00 00 00 $/;"	l
ffff800000103c7f	kernel.asm	/^ffff800000103c7f:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103c86	kernel.asm	/^ffff800000103c86:	80 ff ff $/;"	l
ffff800000103c89	kernel.asm	/^ffff800000103c89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103c8d	kernel.asm	/^ffff800000103c8d:	eb 11                	jmp    ffff800000103ca0 <iderw+0xd8>$/;"	l
ffff800000103c8f	kernel.asm	/^ffff800000103c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c93	kernel.asm	/^ffff800000103c93:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103c96	kernel.asm	/^ffff800000103c96:	48 05 a8 00 00 00    	add    $0xa8,%rax$/;"	l
ffff800000103c9c	kernel.asm	/^ffff800000103c9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103ca0	kernel.asm	/^ffff800000103ca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103ca4	kernel.asm	/^ffff800000103ca4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103ca7	kernel.asm	/^ffff800000103ca7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103caa	kernel.asm	/^ffff800000103caa:	75 e3                	jne    ffff800000103c8f <iderw+0xc7>$/;"	l
ffff800000103cac	kernel.asm	/^ffff800000103cac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103cb0	kernel.asm	/^ffff800000103cb0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000103cb4	kernel.asm	/^ffff800000103cb4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103cb7	kernel.asm	/^ffff800000103cb7:	48 b8 28 71 11 00 00 	movabs $0xffff800000117128,%rax$/;"	l
ffff800000103cbe	kernel.asm	/^ffff800000103cbe:	80 ff ff $/;"	l
ffff800000103cc1	kernel.asm	/^ffff800000103cc1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103cc4	kernel.asm	/^ffff800000103cc4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000103cc8	kernel.asm	/^ffff800000103cc8:	75 32                	jne    ffff800000103cfc <iderw+0x134>$/;"	l
ffff800000103cca	kernel.asm	/^ffff800000103cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103cce	kernel.asm	/^ffff800000103cce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103cd1	kernel.asm	/^ffff800000103cd1:	48 b8 ca 38 10 00 00 	movabs $0xffff8000001038ca,%rax$/;"	l
ffff800000103cd8	kernel.asm	/^ffff800000103cd8:	80 ff ff $/;"	l
ffff800000103cdb	kernel.asm	/^ffff800000103cdb:	ff d0                	callq  *%rax$/;"	l
ffff800000103cdd	kernel.asm	/^ffff800000103cdd:	eb 1d                	jmp    ffff800000103cfc <iderw+0x134>$/;"	l
ffff800000103cdf	kernel.asm	/^ffff800000103cdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103ce3	kernel.asm	/^ffff800000103ce3:	48 be c0 70 11 00 00 	movabs $0xffff8000001170c0,%rsi$/;"	l
ffff800000103cea	kernel.asm	/^ffff800000103cea:	80 ff ff $/;"	l
ffff800000103ced	kernel.asm	/^ffff800000103ced:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103cf0	kernel.asm	/^ffff800000103cf0:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000103cf7	kernel.asm	/^ffff800000103cf7:	80 ff ff $/;"	l
ffff800000103cfa	kernel.asm	/^ffff800000103cfa:	ff d0                	callq  *%rax$/;"	l
ffff800000103cfc	kernel.asm	/^ffff800000103cfc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103d00	kernel.asm	/^ffff800000103d00:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103d02	kernel.asm	/^ffff800000103d02:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103d05	kernel.asm	/^ffff800000103d05:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103d08	kernel.asm	/^ffff800000103d08:	75 d5                	jne    ffff800000103cdf <iderw+0x117>$/;"	l
ffff800000103d0a	kernel.asm	/^ffff800000103d0a:	48 bf c0 70 11 00 00 	movabs $0xffff8000001170c0,%rdi$/;"	l
ffff800000103d11	kernel.asm	/^ffff800000103d11:	80 ff ff $/;"	l
ffff800000103d14	kernel.asm	/^ffff800000103d14:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000103d1b	kernel.asm	/^ffff800000103d1b:	80 ff ff $/;"	l
ffff800000103d1e	kernel.asm	/^ffff800000103d1e:	ff d0                	callq  *%rax$/;"	l
ffff800000103d20	kernel.asm	/^ffff800000103d20:	90                   	nop$/;"	l
ffff800000103d21	kernel.asm	/^ffff800000103d21:	c9                   	leaveq $/;"	l
ffff800000103d22	kernel.asm	/^ffff800000103d22:	c3                   	retq   $/;"	l
ffff800000103d23	kernel.asm	/^ffff800000103d23 <ioapicread>:$/;"	l
ffff800000103d23	kernel.asm	/^ffff800000103d23:	55                   	push   %rbp$/;"	l
ffff800000103d24	kernel.asm	/^ffff800000103d24:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103d27	kernel.asm	/^ffff800000103d27:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103d2b	kernel.asm	/^ffff800000103d2b:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103d2e	kernel.asm	/^ffff800000103d2e:	48 b8 38 71 11 00 00 	movabs $0xffff800000117138,%rax$/;"	l
ffff800000103d35	kernel.asm	/^ffff800000103d35:	80 ff ff $/;"	l
ffff800000103d38	kernel.asm	/^ffff800000103d38:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d3b	kernel.asm	/^ffff800000103d3b:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103d3e	kernel.asm	/^ffff800000103d3e:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103d40	kernel.asm	/^ffff800000103d40:	48 b8 38 71 11 00 00 	movabs $0xffff800000117138,%rax$/;"	l
ffff800000103d47	kernel.asm	/^ffff800000103d47:	80 ff ff $/;"	l
ffff800000103d4a	kernel.asm	/^ffff800000103d4a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d4d	kernel.asm	/^ffff800000103d4d:	8b 40 10             	mov    0x10(%rax),%eax$/;"	l
ffff800000103d50	kernel.asm	/^ffff800000103d50:	c9                   	leaveq $/;"	l
ffff800000103d51	kernel.asm	/^ffff800000103d51:	c3                   	retq   $/;"	l
ffff800000103d52	kernel.asm	/^ffff800000103d52 <ioapicwrite>:$/;"	l
ffff800000103d52	kernel.asm	/^ffff800000103d52:	55                   	push   %rbp$/;"	l
ffff800000103d53	kernel.asm	/^ffff800000103d53:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103d56	kernel.asm	/^ffff800000103d56:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103d5a	kernel.asm	/^ffff800000103d5a:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103d5d	kernel.asm	/^ffff800000103d5d:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000103d60	kernel.asm	/^ffff800000103d60:	48 b8 38 71 11 00 00 	movabs $0xffff800000117138,%rax$/;"	l
ffff800000103d67	kernel.asm	/^ffff800000103d67:	80 ff ff $/;"	l
ffff800000103d6a	kernel.asm	/^ffff800000103d6a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d6d	kernel.asm	/^ffff800000103d6d:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103d70	kernel.asm	/^ffff800000103d70:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103d72	kernel.asm	/^ffff800000103d72:	48 b8 38 71 11 00 00 	movabs $0xffff800000117138,%rax$/;"	l
ffff800000103d79	kernel.asm	/^ffff800000103d79:	80 ff ff $/;"	l
ffff800000103d7c	kernel.asm	/^ffff800000103d7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d7f	kernel.asm	/^ffff800000103d7f:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000103d82	kernel.asm	/^ffff800000103d82:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000103d85	kernel.asm	/^ffff800000103d85:	90                   	nop$/;"	l
ffff800000103d86	kernel.asm	/^ffff800000103d86:	c9                   	leaveq $/;"	l
ffff800000103d87	kernel.asm	/^ffff800000103d87:	c3                   	retq   $/;"	l
ffff800000103d88	kernel.asm	/^ffff800000103d88 <ioapicinit>:$/;"	l
ffff800000103d88	kernel.asm	/^ffff800000103d88:	55                   	push   %rbp$/;"	l
ffff800000103d89	kernel.asm	/^ffff800000103d89:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103d8c	kernel.asm	/^ffff800000103d8c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103d90	kernel.asm	/^ffff800000103d90:	48 b8 38 71 11 00 00 	movabs $0xffff800000117138,%rax$/;"	l
ffff800000103d97	kernel.asm	/^ffff800000103d97:	80 ff ff $/;"	l
ffff800000103d9a	kernel.asm	/^ffff800000103d9a:	48 b9 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rcx$/;"	l
ffff800000103da1	kernel.asm	/^ffff800000103da1:	80 ff ff $/;"	l
ffff800000103da4	kernel.asm	/^ffff800000103da4:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff800000103da7	kernel.asm	/^ffff800000103da7:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103dac	kernel.asm	/^ffff800000103dac:	48 b8 23 3d 10 00 00 	movabs $0xffff800000103d23,%rax$/;"	l
ffff800000103db3	kernel.asm	/^ffff800000103db3:	80 ff ff $/;"	l
ffff800000103db6	kernel.asm	/^ffff800000103db6:	ff d0                	callq  *%rax$/;"	l
ffff800000103db8	kernel.asm	/^ffff800000103db8:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff800000103dbb	kernel.asm	/^ffff800000103dbb:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000103dc0	kernel.asm	/^ffff800000103dc0:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103dc3	kernel.asm	/^ffff800000103dc3:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103dc8	kernel.asm	/^ffff800000103dc8:	48 b8 23 3d 10 00 00 	movabs $0xffff800000103d23,%rax$/;"	l
ffff800000103dcf	kernel.asm	/^ffff800000103dcf:	80 ff ff $/;"	l
ffff800000103dd2	kernel.asm	/^ffff800000103dd2:	ff d0                	callq  *%rax$/;"	l
ffff800000103dd4	kernel.asm	/^ffff800000103dd4:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff800000103dd7	kernel.asm	/^ffff800000103dd7:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103dda	kernel.asm	/^ffff800000103dda:	48 b8 a4 7a 11 00 00 	movabs $0xffff800000117aa4,%rax$/;"	l
ffff800000103de1	kernel.asm	/^ffff800000103de1:	80 ff ff $/;"	l
ffff800000103de4	kernel.asm	/^ffff800000103de4:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103de7	kernel.asm	/^ffff800000103de7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103dea	kernel.asm	/^ffff800000103dea:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff800000103ded	kernel.asm	/^ffff800000103ded:	74 1b                	je     ffff800000103e0a <ioapicinit+0x82>$/;"	l
ffff800000103def	kernel.asm	/^ffff800000103def:	48 bf 88 bd 10 00 00 	movabs $0xffff80000010bd88,%rdi$/;"	l
ffff800000103df6	kernel.asm	/^ffff800000103df6:	80 ff ff $/;"	l
ffff800000103df9	kernel.asm	/^ffff800000103df9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103dfe	kernel.asm	/^ffff800000103dfe:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000103e05	kernel.asm	/^ffff800000103e05:	80 ff ff $/;"	l
ffff800000103e08	kernel.asm	/^ffff800000103e08:	ff d2                	callq  *%rdx$/;"	l
ffff800000103e0a	kernel.asm	/^ffff800000103e0a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103e11	kernel.asm	/^ffff800000103e11:	eb 47                	jmp    ffff800000103e5a <ioapicinit+0xd2>$/;"	l
ffff800000103e13	kernel.asm	/^ffff800000103e13:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e16	kernel.asm	/^ffff800000103e16:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff800000103e19	kernel.asm	/^ffff800000103e19:	0d 00 00 01 00       	or     $0x10000,%eax$/;"	l
ffff800000103e1e	kernel.asm	/^ffff800000103e1e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103e20	kernel.asm	/^ffff800000103e20:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e23	kernel.asm	/^ffff800000103e23:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103e26	kernel.asm	/^ffff800000103e26:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103e28	kernel.asm	/^ffff800000103e28:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103e2a	kernel.asm	/^ffff800000103e2a:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103e2c	kernel.asm	/^ffff800000103e2c:	48 b8 52 3d 10 00 00 	movabs $0xffff800000103d52,%rax$/;"	l
ffff800000103e33	kernel.asm	/^ffff800000103e33:	80 ff ff $/;"	l
ffff800000103e36	kernel.asm	/^ffff800000103e36:	ff d0                	callq  *%rax$/;"	l
ffff800000103e38	kernel.asm	/^ffff800000103e38:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e3b	kernel.asm	/^ffff800000103e3b:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103e3e	kernel.asm	/^ffff800000103e3e:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103e40	kernel.asm	/^ffff800000103e40:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000103e43	kernel.asm	/^ffff800000103e43:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103e48	kernel.asm	/^ffff800000103e48:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103e4a	kernel.asm	/^ffff800000103e4a:	48 b8 52 3d 10 00 00 	movabs $0xffff800000103d52,%rax$/;"	l
ffff800000103e51	kernel.asm	/^ffff800000103e51:	80 ff ff $/;"	l
ffff800000103e54	kernel.asm	/^ffff800000103e54:	ff d0                	callq  *%rax$/;"	l
ffff800000103e56	kernel.asm	/^ffff800000103e56:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103e5a	kernel.asm	/^ffff800000103e5a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e5d	kernel.asm	/^ffff800000103e5d:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000103e60	kernel.asm	/^ffff800000103e60:	7e b1                	jle    ffff800000103e13 <ioapicinit+0x8b>$/;"	l
ffff800000103e62	kernel.asm	/^ffff800000103e62:	90                   	nop$/;"	l
ffff800000103e63	kernel.asm	/^ffff800000103e63:	c9                   	leaveq $/;"	l
ffff800000103e64	kernel.asm	/^ffff800000103e64:	c3                   	retq   $/;"	l
ffff800000103e65	kernel.asm	/^ffff800000103e65 <ioapicenable>:$/;"	l
ffff800000103e65	kernel.asm	/^ffff800000103e65:	55                   	push   %rbp$/;"	l
ffff800000103e66	kernel.asm	/^ffff800000103e66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103e69	kernel.asm	/^ffff800000103e69:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103e6d	kernel.asm	/^ffff800000103e6d:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103e70	kernel.asm	/^ffff800000103e70:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000103e73	kernel.asm	/^ffff800000103e73:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e76	kernel.asm	/^ffff800000103e76:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff800000103e79	kernel.asm	/^ffff800000103e79:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103e7b	kernel.asm	/^ffff800000103e7b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e7e	kernel.asm	/^ffff800000103e7e:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103e81	kernel.asm	/^ffff800000103e81:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103e83	kernel.asm	/^ffff800000103e83:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103e85	kernel.asm	/^ffff800000103e85:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103e87	kernel.asm	/^ffff800000103e87:	48 b8 52 3d 10 00 00 	movabs $0xffff800000103d52,%rax$/;"	l
ffff800000103e8e	kernel.asm	/^ffff800000103e8e:	80 ff ff $/;"	l
ffff800000103e91	kernel.asm	/^ffff800000103e91:	ff d0                	callq  *%rax$/;"	l
ffff800000103e93	kernel.asm	/^ffff800000103e93:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103e96	kernel.asm	/^ffff800000103e96:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff800000103e99	kernel.asm	/^ffff800000103e99:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103e9b	kernel.asm	/^ffff800000103e9b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103e9e	kernel.asm	/^ffff800000103e9e:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103ea1	kernel.asm	/^ffff800000103ea1:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103ea3	kernel.asm	/^ffff800000103ea3:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000103ea6	kernel.asm	/^ffff800000103ea6:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103ea8	kernel.asm	/^ffff800000103ea8:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103eaa	kernel.asm	/^ffff800000103eaa:	48 b8 52 3d 10 00 00 	movabs $0xffff800000103d52,%rax$/;"	l
ffff800000103eb1	kernel.asm	/^ffff800000103eb1:	80 ff ff $/;"	l
ffff800000103eb4	kernel.asm	/^ffff800000103eb4:	ff d0                	callq  *%rax$/;"	l
ffff800000103eb6	kernel.asm	/^ffff800000103eb6:	90                   	nop$/;"	l
ffff800000103eb7	kernel.asm	/^ffff800000103eb7:	c9                   	leaveq $/;"	l
ffff800000103eb8	kernel.asm	/^ffff800000103eb8:	c3                   	retq   $/;"	l
ffff800000103eb9	kernel.asm	/^ffff800000103eb9 <kinit1>:$/;"	l
ffff800000103eb9	kernel.asm	/^ffff800000103eb9:	55                   	push   %rbp$/;"	l
ffff800000103eba	kernel.asm	/^ffff800000103eba:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103ebd	kernel.asm	/^ffff800000103ebd:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103ec1	kernel.asm	/^ffff800000103ec1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000103ec5	kernel.asm	/^ffff800000103ec5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103ec9	kernel.asm	/^ffff800000103ec9:	48 be ba bd 10 00 00 	movabs $0xffff80000010bdba,%rsi$/;"	l
ffff800000103ed0	kernel.asm	/^ffff800000103ed0:	80 ff ff $/;"	l
ffff800000103ed3	kernel.asm	/^ffff800000103ed3:	48 bf 40 71 11 00 00 	movabs $0xffff800000117140,%rdi$/;"	l
ffff800000103eda	kernel.asm	/^ffff800000103eda:	80 ff ff $/;"	l
ffff800000103edd	kernel.asm	/^ffff800000103edd:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000103ee4	kernel.asm	/^ffff800000103ee4:	80 ff ff $/;"	l
ffff800000103ee7	kernel.asm	/^ffff800000103ee7:	ff d0                	callq  *%rax$/;"	l
ffff800000103ee9	kernel.asm	/^ffff800000103ee9:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000103ef0	kernel.asm	/^ffff800000103ef0:	80 ff ff $/;"	l
ffff800000103ef3	kernel.asm	/^ffff800000103ef3:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff800000103efa	kernel.asm	/^ffff800000103efa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000103efe	kernel.asm	/^ffff800000103efe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103f02	kernel.asm	/^ffff800000103f02:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103f05	kernel.asm	/^ffff800000103f05:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103f08	kernel.asm	/^ffff800000103f08:	48 b8 98 3f 10 00 00 	movabs $0xffff800000103f98,%rax$/;"	l
ffff800000103f0f	kernel.asm	/^ffff800000103f0f:	80 ff ff $/;"	l
ffff800000103f12	kernel.asm	/^ffff800000103f12:	ff d0                	callq  *%rax$/;"	l
ffff800000103f14	kernel.asm	/^ffff800000103f14:	90                   	nop$/;"	l
ffff800000103f15	kernel.asm	/^ffff800000103f15:	c9                   	leaveq $/;"	l
ffff800000103f16	kernel.asm	/^ffff800000103f16:	c3                   	retq   $/;"	l
ffff800000103f17	kernel.asm	/^ffff800000103f17 <kinit2>:$/;"	l
ffff800000103f17	kernel.asm	/^ffff800000103f17:	55                   	push   %rbp$/;"	l
ffff800000103f18	kernel.asm	/^ffff800000103f18:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103f1b	kernel.asm	/^ffff800000103f1b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103f1f	kernel.asm	/^ffff800000103f1f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000103f23	kernel.asm	/^ffff800000103f23:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103f27	kernel.asm	/^ffff800000103f27:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000103f2b	kernel.asm	/^ffff800000103f2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103f2f	kernel.asm	/^ffff800000103f2f:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103f32	kernel.asm	/^ffff800000103f32:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103f35	kernel.asm	/^ffff800000103f35:	48 b8 98 3f 10 00 00 	movabs $0xffff800000103f98,%rax$/;"	l
ffff800000103f3c	kernel.asm	/^ffff800000103f3c:	80 ff ff $/;"	l
ffff800000103f3f	kernel.asm	/^ffff800000103f3f:	ff d0                	callq  *%rax$/;"	l
ffff800000103f41	kernel.asm	/^ffff800000103f41:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000103f48	kernel.asm	/^ffff800000103f48:	80 ff ff $/;"	l
ffff800000103f4b	kernel.asm	/^ffff800000103f4b:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff800000103f52	kernel.asm	/^ffff800000103f52:	90                   	nop$/;"	l
ffff800000103f53	kernel.asm	/^ffff800000103f53:	c9                   	leaveq $/;"	l
ffff800000103f54	kernel.asm	/^ffff800000103f54:	c3                   	retq   $/;"	l
ffff800000103f55	kernel.asm	/^ffff800000103f55 <kfreepagecount>:$/;"	l
ffff800000103f55	kernel.asm	/^ffff800000103f55:	55                   	push   %rbp$/;"	l
ffff800000103f56	kernel.asm	/^ffff800000103f56:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103f59	kernel.asm	/^ffff800000103f59:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103f5d	kernel.asm	/^ffff800000103f5d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103f64	kernel.asm	/^ffff800000103f64:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000103f6b	kernel.asm	/^ffff800000103f6b:	80 ff ff $/;"	l
ffff800000103f6e	kernel.asm	/^ffff800000103f6e:	48 8b 40 70          	mov    0x70(%rax),%rax$/;"	l
ffff800000103f72	kernel.asm	/^ffff800000103f72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000103f76	kernel.asm	/^ffff800000103f76:	eb 0f                	jmp    ffff800000103f87 <kfreepagecount+0x32>$/;"	l
ffff800000103f78	kernel.asm	/^ffff800000103f78:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103f7c	kernel.asm	/^ffff800000103f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103f80	kernel.asm	/^ffff800000103f80:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103f83	kernel.asm	/^ffff800000103f83:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000103f87	kernel.asm	/^ffff800000103f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103f8b	kernel.asm	/^ffff800000103f8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103f8e	kernel.asm	/^ffff800000103f8e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103f91	kernel.asm	/^ffff800000103f91:	75 e5                	jne    ffff800000103f78 <kfreepagecount+0x23>$/;"	l
ffff800000103f93	kernel.asm	/^ffff800000103f93:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103f96	kernel.asm	/^ffff800000103f96:	c9                   	leaveq $/;"	l
ffff800000103f97	kernel.asm	/^ffff800000103f97:	c3                   	retq   $/;"	l
ffff800000103f98	kernel.asm	/^ffff800000103f98 <freerange>:$/;"	l
ffff800000103f98	kernel.asm	/^ffff800000103f98:	55                   	push   %rbp$/;"	l
ffff800000103f99	kernel.asm	/^ffff800000103f99:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103f9c	kernel.asm	/^ffff800000103f9c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103fa0	kernel.asm	/^ffff800000103fa0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103fa4	kernel.asm	/^ffff800000103fa4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000103fa8	kernel.asm	/^ffff800000103fa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103fac	kernel.asm	/^ffff800000103fac:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff800000103fb2	kernel.asm	/^ffff800000103fb2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff800000103fb8	kernel.asm	/^ffff800000103fb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103fbc	kernel.asm	/^ffff800000103fbc:	eb 1b                	jmp    ffff800000103fd9 <freerange+0x41>$/;"	l
ffff800000103fbe	kernel.asm	/^ffff800000103fbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103fc2	kernel.asm	/^ffff800000103fc2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103fc5	kernel.asm	/^ffff800000103fc5:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff800000103fcc	kernel.asm	/^ffff800000103fcc:	80 ff ff $/;"	l
ffff800000103fcf	kernel.asm	/^ffff800000103fcf:	ff d0                	callq  *%rax$/;"	l
ffff800000103fd1	kernel.asm	/^ffff800000103fd1:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff800000103fd8	kernel.asm	/^ffff800000103fd8:	00 $/;"	l
ffff800000103fd9	kernel.asm	/^ffff800000103fd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103fdd	kernel.asm	/^ffff800000103fdd:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000103fe3	kernel.asm	/^ffff800000103fe3:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax$/;"	l
ffff800000103fe7	kernel.asm	/^ffff800000103fe7:	76 d5                	jbe    ffff800000103fbe <freerange+0x26>$/;"	l
ffff800000103fe9	kernel.asm	/^ffff800000103fe9:	90                   	nop$/;"	l
ffff800000103fea	kernel.asm	/^ffff800000103fea:	c9                   	leaveq $/;"	l
ffff800000103feb	kernel.asm	/^ffff800000103feb:	c3                   	retq   $/;"	l
ffff800000103fec	kernel.asm	/^ffff800000103fec <kfree>:$/;"	l
ffff800000103fec	kernel.asm	/^ffff800000103fec:	55                   	push   %rbp$/;"	l
ffff800000103fed	kernel.asm	/^ffff800000103fed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103ff0	kernel.asm	/^ffff800000103ff0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103ff4	kernel.asm	/^ffff800000103ff4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103ff8	kernel.asm	/^ffff800000103ff8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103ffc	kernel.asm	/^ffff800000103ffc:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff800000104001	kernel.asm	/^ffff800000104001:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104004	kernel.asm	/^ffff800000104004:	75 29                	jne    ffff80000010402f <kfree+0x43>$/;"	l
ffff800000104006	kernel.asm	/^ffff800000104006:	48 b8 00 c0 11 00 00 	movabs $0xffff80000011c000,%rax$/;"	l
ffff80000010400d	kernel.asm	/^ffff80000010400d:	80 ff ff $/;"	l
ffff800000104010	kernel.asm	/^ffff800000104010:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000104014	kernel.asm	/^ffff800000104014:	72 19                	jb     ffff80000010402f <kfree+0x43>$/;"	l
ffff800000104016	kernel.asm	/^ffff800000104016:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010401a	kernel.asm	/^ffff80000010401a:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff800000104021	kernel.asm	/^ffff800000104021:	80 00 00 $/;"	l
ffff800000104024	kernel.asm	/^ffff800000104024:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000104027	kernel.asm	/^ffff800000104027:	48 3d ff ff ff 0d    	cmp    $0xdffffff,%rax$/;"	l
ffff80000010402d	kernel.asm	/^ffff80000010402d:	76 16                	jbe    ffff800000104045 <kfree+0x59>$/;"	l
ffff80000010402f	kernel.asm	/^ffff80000010402f:	48 bf bf bd 10 00 00 	movabs $0xffff80000010bdbf,%rdi$/;"	l
ffff800000104036	kernel.asm	/^ffff800000104036:	80 ff ff $/;"	l
ffff800000104039	kernel.asm	/^ffff800000104039:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000104040	kernel.asm	/^ffff800000104040:	80 ff ff $/;"	l
ffff800000104043	kernel.asm	/^ffff800000104043:	ff d0                	callq  *%rax$/;"	l
ffff800000104045	kernel.asm	/^ffff800000104045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104049	kernel.asm	/^ffff800000104049:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010404e	kernel.asm	/^ffff80000010404e:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000104053	kernel.asm	/^ffff800000104053:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104056	kernel.asm	/^ffff800000104056:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010405d	kernel.asm	/^ffff80000010405d:	80 ff ff $/;"	l
ffff800000104060	kernel.asm	/^ffff800000104060:	ff d0                	callq  *%rax$/;"	l
ffff800000104062	kernel.asm	/^ffff800000104062:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000104069	kernel.asm	/^ffff800000104069:	80 ff ff $/;"	l
ffff80000010406c	kernel.asm	/^ffff80000010406c:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff80000010406f	kernel.asm	/^ffff80000010406f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104071	kernel.asm	/^ffff800000104071:	74 16                	je     ffff800000104089 <kfree+0x9d>$/;"	l
ffff800000104073	kernel.asm	/^ffff800000104073:	48 bf 40 71 11 00 00 	movabs $0xffff800000117140,%rdi$/;"	l
ffff80000010407a	kernel.asm	/^ffff80000010407a:	80 ff ff $/;"	l
ffff80000010407d	kernel.asm	/^ffff80000010407d:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000104084	kernel.asm	/^ffff800000104084:	80 ff ff $/;"	l
ffff800000104087	kernel.asm	/^ffff800000104087:	ff d0                	callq  *%rax$/;"	l
ffff800000104089	kernel.asm	/^ffff800000104089:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010408d	kernel.asm	/^ffff80000010408d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104091	kernel.asm	/^ffff800000104091:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000104098	kernel.asm	/^ffff800000104098:	80 ff ff $/;"	l
ffff80000010409b	kernel.asm	/^ffff80000010409b:	48 8b 50 70          	mov    0x70(%rax),%rdx$/;"	l
ffff80000010409f	kernel.asm	/^ffff80000010409f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001040a3	kernel.asm	/^ffff8000001040a3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001040a6	kernel.asm	/^ffff8000001040a6:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff8000001040ad	kernel.asm	/^ffff8000001040ad:	80 ff ff $/;"	l
ffff8000001040b0	kernel.asm	/^ffff8000001040b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001040b4	kernel.asm	/^ffff8000001040b4:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff8000001040b8	kernel.asm	/^ffff8000001040b8:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff8000001040bf	kernel.asm	/^ffff8000001040bf:	80 ff ff $/;"	l
ffff8000001040c2	kernel.asm	/^ffff8000001040c2:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff8000001040c5	kernel.asm	/^ffff8000001040c5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001040c7	kernel.asm	/^ffff8000001040c7:	74 16                	je     ffff8000001040df <kfree+0xf3>$/;"	l
ffff8000001040c9	kernel.asm	/^ffff8000001040c9:	48 bf 40 71 11 00 00 	movabs $0xffff800000117140,%rdi$/;"	l
ffff8000001040d0	kernel.asm	/^ffff8000001040d0:	80 ff ff $/;"	l
ffff8000001040d3	kernel.asm	/^ffff8000001040d3:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001040da	kernel.asm	/^ffff8000001040da:	80 ff ff $/;"	l
ffff8000001040dd	kernel.asm	/^ffff8000001040dd:	ff d0                	callq  *%rax$/;"	l
ffff8000001040df	kernel.asm	/^ffff8000001040df:	90                   	nop$/;"	l
ffff8000001040e0	kernel.asm	/^ffff8000001040e0:	c9                   	leaveq $/;"	l
ffff8000001040e1	kernel.asm	/^ffff8000001040e1:	c3                   	retq   $/;"	l
ffff8000001040e2	kernel.asm	/^ffff8000001040e2 <kalloc>:$/;"	l
ffff8000001040e2	kernel.asm	/^ffff8000001040e2:	55                   	push   %rbp$/;"	l
ffff8000001040e3	kernel.asm	/^ffff8000001040e3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001040e6	kernel.asm	/^ffff8000001040e6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001040ea	kernel.asm	/^ffff8000001040ea:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff8000001040f1	kernel.asm	/^ffff8000001040f1:	80 ff ff $/;"	l
ffff8000001040f4	kernel.asm	/^ffff8000001040f4:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff8000001040f7	kernel.asm	/^ffff8000001040f7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001040f9	kernel.asm	/^ffff8000001040f9:	74 16                	je     ffff800000104111 <kalloc+0x2f>$/;"	l
ffff8000001040fb	kernel.asm	/^ffff8000001040fb:	48 bf 40 71 11 00 00 	movabs $0xffff800000117140,%rdi$/;"	l
ffff800000104102	kernel.asm	/^ffff800000104102:	80 ff ff $/;"	l
ffff800000104105	kernel.asm	/^ffff800000104105:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff80000010410c	kernel.asm	/^ffff80000010410c:	80 ff ff $/;"	l
ffff80000010410f	kernel.asm	/^ffff80000010410f:	ff d0                	callq  *%rax$/;"	l
ffff800000104111	kernel.asm	/^ffff800000104111:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000104118	kernel.asm	/^ffff800000104118:	80 ff ff $/;"	l
ffff80000010411b	kernel.asm	/^ffff80000010411b:	48 8b 40 70          	mov    0x70(%rax),%rax$/;"	l
ffff80000010411f	kernel.asm	/^ffff80000010411f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104123	kernel.asm	/^ffff800000104123:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000104128	kernel.asm	/^ffff800000104128:	74 15                	je     ffff80000010413f <kalloc+0x5d>$/;"	l
ffff80000010412a	kernel.asm	/^ffff80000010412a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010412e	kernel.asm	/^ffff80000010412e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000104131	kernel.asm	/^ffff800000104131:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000104138	kernel.asm	/^ffff800000104138:	80 ff ff $/;"	l
ffff80000010413b	kernel.asm	/^ffff80000010413b:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff80000010413f	kernel.asm	/^ffff80000010413f:	48 b8 40 71 11 00 00 	movabs $0xffff800000117140,%rax$/;"	l
ffff800000104146	kernel.asm	/^ffff800000104146:	80 ff ff $/;"	l
ffff800000104149	kernel.asm	/^ffff800000104149:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff80000010414c	kernel.asm	/^ffff80000010414c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010414e	kernel.asm	/^ffff80000010414e:	74 16                	je     ffff800000104166 <kalloc+0x84>$/;"	l
ffff800000104150	kernel.asm	/^ffff800000104150:	48 bf 40 71 11 00 00 	movabs $0xffff800000117140,%rdi$/;"	l
ffff800000104157	kernel.asm	/^ffff800000104157:	80 ff ff $/;"	l
ffff80000010415a	kernel.asm	/^ffff80000010415a:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000104161	kernel.asm	/^ffff800000104161:	80 ff ff $/;"	l
ffff800000104164	kernel.asm	/^ffff800000104164:	ff d0                	callq  *%rax$/;"	l
ffff800000104166	kernel.asm	/^ffff800000104166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010416a	kernel.asm	/^ffff80000010416a:	c9                   	leaveq $/;"	l
ffff80000010416b	kernel.asm	/^ffff80000010416b:	c3                   	retq   $/;"	l
ffff80000010416c	kernel.asm	/^ffff80000010416c <inb>:$/;"	l
ffff80000010416c	kernel.asm	/^ffff80000010416c:	55                   	push   %rbp$/;"	l
ffff80000010416d	kernel.asm	/^ffff80000010416d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104170	kernel.asm	/^ffff800000104170:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000104174	kernel.asm	/^ffff800000104174:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000104176	kernel.asm	/^ffff800000104176:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff80000010417a	kernel.asm	/^ffff80000010417a:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010417e	kernel.asm	/^ffff80000010417e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104180	kernel.asm	/^ffff800000104180:	ec                   	in     (%dx),%al$/;"	l
ffff800000104181	kernel.asm	/^ffff800000104181:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000104184	kernel.asm	/^ffff800000104184:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000104188	kernel.asm	/^ffff800000104188:	c9                   	leaveq $/;"	l
ffff800000104189	kernel.asm	/^ffff800000104189:	c3                   	retq   $/;"	l
ffff80000010418a	kernel.asm	/^ffff80000010418a <kbdgetc>:$/;"	l
ffff80000010418a	kernel.asm	/^ffff80000010418a:	55                   	push   %rbp$/;"	l
ffff80000010418b	kernel.asm	/^ffff80000010418b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010418e	kernel.asm	/^ffff80000010418e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104192	kernel.asm	/^ffff800000104192:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff800000104197	kernel.asm	/^ffff800000104197:	48 b8 6c 41 10 00 00 	movabs $0xffff80000010416c,%rax$/;"	l
ffff80000010419e	kernel.asm	/^ffff80000010419e:	80 ff ff $/;"	l
ffff8000001041a1	kernel.asm	/^ffff8000001041a1:	ff d0                	callq  *%rax$/;"	l
ffff8000001041a3	kernel.asm	/^ffff8000001041a3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001041a6	kernel.asm	/^ffff8000001041a6:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001041a9	kernel.asm	/^ffff8000001041a9:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001041ac	kernel.asm	/^ffff8000001041ac:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff8000001041af	kernel.asm	/^ffff8000001041af:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001041b1	kernel.asm	/^ffff8000001041b1:	75 0a                	jne    ffff8000001041bd <kbdgetc+0x33>$/;"	l
ffff8000001041b3	kernel.asm	/^ffff8000001041b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001041b8	kernel.asm	/^ffff8000001041b8:	e9 ae 01 00 00       	jmpq   ffff80000010436b <kbdgetc+0x1e1>$/;"	l
ffff8000001041bd	kernel.asm	/^ffff8000001041bd:	bf 60 00 00 00       	mov    $0x60,%edi$/;"	l
ffff8000001041c2	kernel.asm	/^ffff8000001041c2:	48 b8 6c 41 10 00 00 	movabs $0xffff80000010416c,%rax$/;"	l
ffff8000001041c9	kernel.asm	/^ffff8000001041c9:	80 ff ff $/;"	l
ffff8000001041cc	kernel.asm	/^ffff8000001041cc:	ff d0                	callq  *%rax$/;"	l
ffff8000001041ce	kernel.asm	/^ffff8000001041ce:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001041d1	kernel.asm	/^ffff8000001041d1:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001041d4	kernel.asm	/^ffff8000001041d4:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%rbp)$/;"	l
ffff8000001041db	kernel.asm	/^ffff8000001041db:	75 27                	jne    ffff800000104204 <kbdgetc+0x7a>$/;"	l
ffff8000001041dd	kernel.asm	/^ffff8000001041dd:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001041e4	kernel.asm	/^ffff8000001041e4:	80 ff ff $/;"	l
ffff8000001041e7	kernel.asm	/^ffff8000001041e7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001041e9	kernel.asm	/^ffff8000001041e9:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff8000001041ec	kernel.asm	/^ffff8000001041ec:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001041ee	kernel.asm	/^ffff8000001041ee:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001041f5	kernel.asm	/^ffff8000001041f5:	80 ff ff $/;"	l
ffff8000001041f8	kernel.asm	/^ffff8000001041f8:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001041fa	kernel.asm	/^ffff8000001041fa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001041ff	kernel.asm	/^ffff8000001041ff:	e9 67 01 00 00       	jmpq   ffff80000010436b <kbdgetc+0x1e1>$/;"	l
ffff800000104204	kernel.asm	/^ffff800000104204:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104207	kernel.asm	/^ffff800000104207:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff80000010420c	kernel.asm	/^ffff80000010420c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010420e	kernel.asm	/^ffff80000010420e:	74 60                	je     ffff800000104270 <kbdgetc+0xe6>$/;"	l
ffff800000104210	kernel.asm	/^ffff800000104210:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff800000104217	kernel.asm	/^ffff800000104217:	80 ff ff $/;"	l
ffff80000010421a	kernel.asm	/^ffff80000010421a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010421c	kernel.asm	/^ffff80000010421c:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff80000010421f	kernel.asm	/^ffff80000010421f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104221	kernel.asm	/^ffff800000104221:	75 08                	jne    ffff80000010422b <kbdgetc+0xa1>$/;"	l
ffff800000104223	kernel.asm	/^ffff800000104223:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104226	kernel.asm	/^ffff800000104226:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff800000104229	kernel.asm	/^ffff800000104229:	eb 03                	jmp    ffff80000010422e <kbdgetc+0xa4>$/;"	l
ffff80000010422b	kernel.asm	/^ffff80000010422b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010422e	kernel.asm	/^ffff80000010422e:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104231	kernel.asm	/^ffff800000104231:	48 ba 20 d0 10 00 00 	movabs $0xffff80000010d020,%rdx$/;"	l
ffff800000104238	kernel.asm	/^ffff800000104238:	80 ff ff $/;"	l
ffff80000010423b	kernel.asm	/^ffff80000010423b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010423e	kernel.asm	/^ffff80000010423e:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff800000104242	kernel.asm	/^ffff800000104242:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff800000104245	kernel.asm	/^ffff800000104245:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104248	kernel.asm	/^ffff800000104248:	f7 d0                	not    %eax$/;"	l
ffff80000010424a	kernel.asm	/^ffff80000010424a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010424c	kernel.asm	/^ffff80000010424c:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff800000104253	kernel.asm	/^ffff800000104253:	80 ff ff $/;"	l
ffff800000104256	kernel.asm	/^ffff800000104256:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104258	kernel.asm	/^ffff800000104258:	21 c2                	and    %eax,%edx$/;"	l
ffff80000010425a	kernel.asm	/^ffff80000010425a:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff800000104261	kernel.asm	/^ffff800000104261:	80 ff ff $/;"	l
ffff800000104264	kernel.asm	/^ffff800000104264:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104266	kernel.asm	/^ffff800000104266:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010426b	kernel.asm	/^ffff80000010426b:	e9 fb 00 00 00       	jmpq   ffff80000010436b <kbdgetc+0x1e1>$/;"	l
ffff800000104270	kernel.asm	/^ffff800000104270:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff800000104277	kernel.asm	/^ffff800000104277:	80 ff ff $/;"	l
ffff80000010427a	kernel.asm	/^ffff80000010427a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010427c	kernel.asm	/^ffff80000010427c:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff80000010427f	kernel.asm	/^ffff80000010427f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104281	kernel.asm	/^ffff800000104281:	74 24                	je     ffff8000001042a7 <kbdgetc+0x11d>$/;"	l
ffff800000104283	kernel.asm	/^ffff800000104283:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%rbp)$/;"	l
ffff80000010428a	kernel.asm	/^ffff80000010428a:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff800000104291	kernel.asm	/^ffff800000104291:	80 ff ff $/;"	l
ffff800000104294	kernel.asm	/^ffff800000104294:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104296	kernel.asm	/^ffff800000104296:	83 e0 bf             	and    $0xffffffbf,%eax$/;"	l
ffff800000104299	kernel.asm	/^ffff800000104299:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010429b	kernel.asm	/^ffff80000010429b:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001042a2	kernel.asm	/^ffff8000001042a2:	80 ff ff $/;"	l
ffff8000001042a5	kernel.asm	/^ffff8000001042a5:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001042a7	kernel.asm	/^ffff8000001042a7:	48 ba 20 d0 10 00 00 	movabs $0xffff80000010d020,%rdx$/;"	l
ffff8000001042ae	kernel.asm	/^ffff8000001042ae:	80 ff ff $/;"	l
ffff8000001042b1	kernel.asm	/^ffff8000001042b1:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001042b4	kernel.asm	/^ffff8000001042b4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff8000001042b8	kernel.asm	/^ffff8000001042b8:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff8000001042bb	kernel.asm	/^ffff8000001042bb:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001042c2	kernel.asm	/^ffff8000001042c2:	80 ff ff $/;"	l
ffff8000001042c5	kernel.asm	/^ffff8000001042c5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001042c7	kernel.asm	/^ffff8000001042c7:	09 c2                	or     %eax,%edx$/;"	l
ffff8000001042c9	kernel.asm	/^ffff8000001042c9:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001042d0	kernel.asm	/^ffff8000001042d0:	80 ff ff $/;"	l
ffff8000001042d3	kernel.asm	/^ffff8000001042d3:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001042d5	kernel.asm	/^ffff8000001042d5:	48 ba 20 d1 10 00 00 	movabs $0xffff80000010d120,%rdx$/;"	l
ffff8000001042dc	kernel.asm	/^ffff8000001042dc:	80 ff ff $/;"	l
ffff8000001042df	kernel.asm	/^ffff8000001042df:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001042e2	kernel.asm	/^ffff8000001042e2:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff8000001042e6	kernel.asm	/^ffff8000001042e6:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff8000001042e9	kernel.asm	/^ffff8000001042e9:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001042f0	kernel.asm	/^ffff8000001042f0:	80 ff ff $/;"	l
ffff8000001042f3	kernel.asm	/^ffff8000001042f3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001042f5	kernel.asm	/^ffff8000001042f5:	31 c2                	xor    %eax,%edx$/;"	l
ffff8000001042f7	kernel.asm	/^ffff8000001042f7:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff8000001042fe	kernel.asm	/^ffff8000001042fe:	80 ff ff $/;"	l
ffff800000104301	kernel.asm	/^ffff800000104301:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104303	kernel.asm	/^ffff800000104303:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff80000010430a	kernel.asm	/^ffff80000010430a:	80 ff ff $/;"	l
ffff80000010430d	kernel.asm	/^ffff80000010430d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010430f	kernel.asm	/^ffff80000010430f:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000104312	kernel.asm	/^ffff800000104312:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104314	kernel.asm	/^ffff800000104314:	48 b8 20 d5 10 00 00 	movabs $0xffff80000010d520,%rax$/;"	l
ffff80000010431b	kernel.asm	/^ffff80000010431b:	80 ff ff $/;"	l
ffff80000010431e	kernel.asm	/^ffff80000010431e:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000104320	kernel.asm	/^ffff800000104320:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx$/;"	l
ffff800000104324	kernel.asm	/^ffff800000104324:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104327	kernel.asm	/^ffff800000104327:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010432a	kernel.asm	/^ffff80000010432a:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010432d	kernel.asm	/^ffff80000010432d:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104330	kernel.asm	/^ffff800000104330:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104333	kernel.asm	/^ffff800000104333:	48 b8 b8 71 11 00 00 	movabs $0xffff8000001171b8,%rax$/;"	l
ffff80000010433a	kernel.asm	/^ffff80000010433a:	80 ff ff $/;"	l
ffff80000010433d	kernel.asm	/^ffff80000010433d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010433f	kernel.asm	/^ffff80000010433f:	83 e0 08             	and    $0x8,%eax$/;"	l
ffff800000104342	kernel.asm	/^ffff800000104342:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104344	kernel.asm	/^ffff800000104344:	74 22                	je     ffff800000104368 <kbdgetc+0x1de>$/;"	l
ffff800000104346	kernel.asm	/^ffff800000104346:	83 7d f8 60          	cmpl   $0x60,-0x8(%rbp)$/;"	l
ffff80000010434a	kernel.asm	/^ffff80000010434a:	76 0c                	jbe    ffff800000104358 <kbdgetc+0x1ce>$/;"	l
ffff80000010434c	kernel.asm	/^ffff80000010434c:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%rbp)$/;"	l
ffff800000104350	kernel.asm	/^ffff800000104350:	77 06                	ja     ffff800000104358 <kbdgetc+0x1ce>$/;"	l
ffff800000104352	kernel.asm	/^ffff800000104352:	83 6d f8 20          	subl   $0x20,-0x8(%rbp)$/;"	l
ffff800000104356	kernel.asm	/^ffff800000104356:	eb 10                	jmp    ffff800000104368 <kbdgetc+0x1de>$/;"	l
ffff800000104358	kernel.asm	/^ffff800000104358:	83 7d f8 40          	cmpl   $0x40,-0x8(%rbp)$/;"	l
ffff80000010435c	kernel.asm	/^ffff80000010435c:	76 0a                	jbe    ffff800000104368 <kbdgetc+0x1de>$/;"	l
ffff80000010435e	kernel.asm	/^ffff80000010435e:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%rbp)$/;"	l
ffff800000104362	kernel.asm	/^ffff800000104362:	77 04                	ja     ffff800000104368 <kbdgetc+0x1de>$/;"	l
ffff800000104364	kernel.asm	/^ffff800000104364:	83 45 f8 20          	addl   $0x20,-0x8(%rbp)$/;"	l
ffff800000104368	kernel.asm	/^ffff800000104368:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010436b	kernel.asm	/^ffff80000010436b:	c9                   	leaveq $/;"	l
ffff80000010436c	kernel.asm	/^ffff80000010436c:	c3                   	retq   $/;"	l
ffff80000010436d	kernel.asm	/^ffff80000010436d <kbdintr>:$/;"	l
ffff80000010436d	kernel.asm	/^ffff80000010436d:	55                   	push   %rbp$/;"	l
ffff80000010436e	kernel.asm	/^ffff80000010436e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104371	kernel.asm	/^ffff800000104371:	48 bf 8a 41 10 00 00 	movabs $0xffff80000010418a,%rdi$/;"	l
ffff800000104378	kernel.asm	/^ffff800000104378:	80 ff ff $/;"	l
ffff80000010437b	kernel.asm	/^ffff80000010437b:	48 b8 c7 0e 10 00 00 	movabs $0xffff800000100ec7,%rax$/;"	l
ffff800000104382	kernel.asm	/^ffff800000104382:	80 ff ff $/;"	l
ffff800000104385	kernel.asm	/^ffff800000104385:	ff d0                	callq  *%rax$/;"	l
ffff800000104387	kernel.asm	/^ffff800000104387:	90                   	nop$/;"	l
ffff800000104388	kernel.asm	/^ffff800000104388:	5d                   	pop    %rbp$/;"	l
ffff800000104389	kernel.asm	/^ffff800000104389:	c3                   	retq   $/;"	l
ffff80000010438a	kernel.asm	/^ffff80000010438a <inb>:$/;"	l
ffff80000010438a	kernel.asm	/^ffff80000010438a:	55                   	push   %rbp$/;"	l
ffff80000010438b	kernel.asm	/^ffff80000010438b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010438e	kernel.asm	/^ffff80000010438e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000104392	kernel.asm	/^ffff800000104392:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000104394	kernel.asm	/^ffff800000104394:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000104398	kernel.asm	/^ffff800000104398:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010439c	kernel.asm	/^ffff80000010439c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010439e	kernel.asm	/^ffff80000010439e:	ec                   	in     (%dx),%al$/;"	l
ffff80000010439f	kernel.asm	/^ffff80000010439f:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001043a2	kernel.asm	/^ffff8000001043a2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001043a6	kernel.asm	/^ffff8000001043a6:	c9                   	leaveq $/;"	l
ffff8000001043a7	kernel.asm	/^ffff8000001043a7:	c3                   	retq   $/;"	l
ffff8000001043a8	kernel.asm	/^ffff8000001043a8 <outb>:$/;"	l
ffff8000001043a8	kernel.asm	/^ffff8000001043a8:	55                   	push   %rbp$/;"	l
ffff8000001043a9	kernel.asm	/^ffff8000001043a9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043ac	kernel.asm	/^ffff8000001043ac:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001043b0	kernel.asm	/^ffff8000001043b0:	89 fa                	mov    %edi,%edx$/;"	l
ffff8000001043b2	kernel.asm	/^ffff8000001043b2:	89 f0                	mov    %esi,%eax$/;"	l
ffff8000001043b4	kernel.asm	/^ffff8000001043b4:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff8000001043b8	kernel.asm	/^ffff8000001043b8:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff8000001043bb	kernel.asm	/^ffff8000001043bb:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff8000001043bf	kernel.asm	/^ffff8000001043bf:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff8000001043c3	kernel.asm	/^ffff8000001043c3:	ee                   	out    %al,(%dx)$/;"	l
ffff8000001043c4	kernel.asm	/^ffff8000001043c4:	90                   	nop$/;"	l
ffff8000001043c5	kernel.asm	/^ffff8000001043c5:	c9                   	leaveq $/;"	l
ffff8000001043c6	kernel.asm	/^ffff8000001043c6:	c3                   	retq   $/;"	l
ffff8000001043c7	kernel.asm	/^ffff8000001043c7 <readeflags>:$/;"	l
ffff8000001043c7	kernel.asm	/^ffff8000001043c7:	55                   	push   %rbp$/;"	l
ffff8000001043c8	kernel.asm	/^ffff8000001043c8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043cb	kernel.asm	/^ffff8000001043cb:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001043cf	kernel.asm	/^ffff8000001043cf:	9c                   	pushfq $/;"	l
ffff8000001043d0	kernel.asm	/^ffff8000001043d0:	58                   	pop    %rax$/;"	l
ffff8000001043d1	kernel.asm	/^ffff8000001043d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001043d5	kernel.asm	/^ffff8000001043d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001043d9	kernel.asm	/^ffff8000001043d9:	c9                   	leaveq $/;"	l
ffff8000001043da	kernel.asm	/^ffff8000001043da:	c3                   	retq   $/;"	l
ffff8000001043db	kernel.asm	/^ffff8000001043db <lapicw>:$/;"	l
ffff8000001043db	kernel.asm	/^ffff8000001043db:	55                   	push   %rbp$/;"	l
ffff8000001043dc	kernel.asm	/^ffff8000001043dc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043df	kernel.asm	/^ffff8000001043df:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001043e3	kernel.asm	/^ffff8000001043e3:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff8000001043e6	kernel.asm	/^ffff8000001043e6:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff8000001043e9	kernel.asm	/^ffff8000001043e9:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff8000001043f0	kernel.asm	/^ffff8000001043f0:	80 ff ff $/;"	l
ffff8000001043f3	kernel.asm	/^ffff8000001043f3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001043f6	kernel.asm	/^ffff8000001043f6:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001043f9	kernel.asm	/^ffff8000001043f9:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001043fc	kernel.asm	/^ffff8000001043fc:	48 c1 e2 02          	shl    $0x2,%rdx$/;"	l
ffff800000104400	kernel.asm	/^ffff800000104400:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000104403	kernel.asm	/^ffff800000104403:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000104406	kernel.asm	/^ffff800000104406:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff800000104408	kernel.asm	/^ffff800000104408:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff80000010440f	kernel.asm	/^ffff80000010440f:	80 ff ff $/;"	l
ffff800000104412	kernel.asm	/^ffff800000104412:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104415	kernel.asm	/^ffff800000104415:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff800000104419	kernel.asm	/^ffff800000104419:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010441b	kernel.asm	/^ffff80000010441b:	90                   	nop$/;"	l
ffff80000010441c	kernel.asm	/^ffff80000010441c:	c9                   	leaveq $/;"	l
ffff80000010441d	kernel.asm	/^ffff80000010441d:	c3                   	retq   $/;"	l
ffff80000010441e	kernel.asm	/^ffff80000010441e <lapicinit>:$/;"	l
ffff80000010441e	kernel.asm	/^ffff80000010441e:	55                   	push   %rbp$/;"	l
ffff80000010441f	kernel.asm	/^ffff80000010441f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104422	kernel.asm	/^ffff800000104422:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff800000104429	kernel.asm	/^ffff800000104429:	80 ff ff $/;"	l
ffff80000010442c	kernel.asm	/^ffff80000010442c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010442f	kernel.asm	/^ffff80000010442f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104432	kernel.asm	/^ffff800000104432:	0f 84 73 01 00 00    	je     ffff8000001045ab <lapicinit+0x18d>$/;"	l
ffff800000104438	kernel.asm	/^ffff800000104438:	be 3f 01 00 00       	mov    $0x13f,%esi$/;"	l
ffff80000010443d	kernel.asm	/^ffff80000010443d:	bf 3c 00 00 00       	mov    $0x3c,%edi$/;"	l
ffff800000104442	kernel.asm	/^ffff800000104442:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104449	kernel.asm	/^ffff800000104449:	80 ff ff $/;"	l
ffff80000010444c	kernel.asm	/^ffff80000010444c:	ff d0                	callq  *%rax$/;"	l
ffff80000010444e	kernel.asm	/^ffff80000010444e:	be 0b 00 00 00       	mov    $0xb,%esi$/;"	l
ffff800000104453	kernel.asm	/^ffff800000104453:	bf f8 00 00 00       	mov    $0xf8,%edi$/;"	l
ffff800000104458	kernel.asm	/^ffff800000104458:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff80000010445f	kernel.asm	/^ffff80000010445f:	80 ff ff $/;"	l
ffff800000104462	kernel.asm	/^ffff800000104462:	ff d0                	callq  *%rax$/;"	l
ffff800000104464	kernel.asm	/^ffff800000104464:	be 20 00 02 00       	mov    $0x20020,%esi$/;"	l
ffff800000104469	kernel.asm	/^ffff800000104469:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff80000010446e	kernel.asm	/^ffff80000010446e:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104475	kernel.asm	/^ffff800000104475:	80 ff ff $/;"	l
ffff800000104478	kernel.asm	/^ffff800000104478:	ff d0                	callq  *%rax$/;"	l
ffff80000010447a	kernel.asm	/^ffff80000010447a:	be 80 96 98 00       	mov    $0x989680,%esi$/;"	l
ffff80000010447f	kernel.asm	/^ffff80000010447f:	bf e0 00 00 00       	mov    $0xe0,%edi$/;"	l
ffff800000104484	kernel.asm	/^ffff800000104484:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff80000010448b	kernel.asm	/^ffff80000010448b:	80 ff ff $/;"	l
ffff80000010448e	kernel.asm	/^ffff80000010448e:	ff d0                	callq  *%rax$/;"	l
ffff800000104490	kernel.asm	/^ffff800000104490:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff800000104495	kernel.asm	/^ffff800000104495:	bf d4 00 00 00       	mov    $0xd4,%edi$/;"	l
ffff80000010449a	kernel.asm	/^ffff80000010449a:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001044a1	kernel.asm	/^ffff8000001044a1:	80 ff ff $/;"	l
ffff8000001044a4	kernel.asm	/^ffff8000001044a4:	ff d0                	callq  *%rax$/;"	l
ffff8000001044a6	kernel.asm	/^ffff8000001044a6:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff8000001044ab	kernel.asm	/^ffff8000001044ab:	bf d8 00 00 00       	mov    $0xd8,%edi$/;"	l
ffff8000001044b0	kernel.asm	/^ffff8000001044b0:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001044b7	kernel.asm	/^ffff8000001044b7:	80 ff ff $/;"	l
ffff8000001044ba	kernel.asm	/^ffff8000001044ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001044bc	kernel.asm	/^ffff8000001044bc:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff8000001044c3	kernel.asm	/^ffff8000001044c3:	80 ff ff $/;"	l
ffff8000001044c6	kernel.asm	/^ffff8000001044c6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001044c9	kernel.asm	/^ffff8000001044c9:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff8000001044cd	kernel.asm	/^ffff8000001044cd:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001044cf	kernel.asm	/^ffff8000001044cf:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff8000001044d2	kernel.asm	/^ffff8000001044d2:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001044d5	kernel.asm	/^ffff8000001044d5:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff8000001044d8	kernel.asm	/^ffff8000001044d8:	76 16                	jbe    ffff8000001044f0 <lapicinit+0xd2>$/;"	l
ffff8000001044da	kernel.asm	/^ffff8000001044da:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff8000001044df	kernel.asm	/^ffff8000001044df:	bf d0 00 00 00       	mov    $0xd0,%edi$/;"	l
ffff8000001044e4	kernel.asm	/^ffff8000001044e4:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001044eb	kernel.asm	/^ffff8000001044eb:	80 ff ff $/;"	l
ffff8000001044ee	kernel.asm	/^ffff8000001044ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001044f0	kernel.asm	/^ffff8000001044f0:	be 33 00 00 00       	mov    $0x33,%esi$/;"	l
ffff8000001044f5	kernel.asm	/^ffff8000001044f5:	bf dc 00 00 00       	mov    $0xdc,%edi$/;"	l
ffff8000001044fa	kernel.asm	/^ffff8000001044fa:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104501	kernel.asm	/^ffff800000104501:	80 ff ff $/;"	l
ffff800000104504	kernel.asm	/^ffff800000104504:	ff d0                	callq  *%rax$/;"	l
ffff800000104506	kernel.asm	/^ffff800000104506:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010450b	kernel.asm	/^ffff80000010450b:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff800000104510	kernel.asm	/^ffff800000104510:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104517	kernel.asm	/^ffff800000104517:	80 ff ff $/;"	l
ffff80000010451a	kernel.asm	/^ffff80000010451a:	ff d0                	callq  *%rax$/;"	l
ffff80000010451c	kernel.asm	/^ffff80000010451c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104521	kernel.asm	/^ffff800000104521:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff800000104526	kernel.asm	/^ffff800000104526:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff80000010452d	kernel.asm	/^ffff80000010452d:	80 ff ff $/;"	l
ffff800000104530	kernel.asm	/^ffff800000104530:	ff d0                	callq  *%rax$/;"	l
ffff800000104532	kernel.asm	/^ffff800000104532:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104537	kernel.asm	/^ffff800000104537:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff80000010453c	kernel.asm	/^ffff80000010453c:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104543	kernel.asm	/^ffff800000104543:	80 ff ff $/;"	l
ffff800000104546	kernel.asm	/^ffff800000104546:	ff d0                	callq  *%rax$/;"	l
ffff800000104548	kernel.asm	/^ffff800000104548:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010454d	kernel.asm	/^ffff80000010454d:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff800000104552	kernel.asm	/^ffff800000104552:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104559	kernel.asm	/^ffff800000104559:	80 ff ff $/;"	l
ffff80000010455c	kernel.asm	/^ffff80000010455c:	ff d0                	callq  *%rax$/;"	l
ffff80000010455e	kernel.asm	/^ffff80000010455e:	be 00 85 08 00       	mov    $0x88500,%esi$/;"	l
ffff800000104563	kernel.asm	/^ffff800000104563:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff800000104568	kernel.asm	/^ffff800000104568:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff80000010456f	kernel.asm	/^ffff80000010456f:	80 ff ff $/;"	l
ffff800000104572	kernel.asm	/^ffff800000104572:	ff d0                	callq  *%rax$/;"	l
ffff800000104574	kernel.asm	/^ffff800000104574:	90                   	nop$/;"	l
ffff800000104575	kernel.asm	/^ffff800000104575:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff80000010457c	kernel.asm	/^ffff80000010457c:	80 ff ff $/;"	l
ffff80000010457f	kernel.asm	/^ffff80000010457f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104582	kernel.asm	/^ffff800000104582:	48 05 00 03 00 00    	add    $0x300,%rax$/;"	l
ffff800000104588	kernel.asm	/^ffff800000104588:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010458a	kernel.asm	/^ffff80000010458a:	25 00 10 00 00       	and    $0x1000,%eax$/;"	l
ffff80000010458f	kernel.asm	/^ffff80000010458f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104591	kernel.asm	/^ffff800000104591:	75 e2                	jne    ffff800000104575 <lapicinit+0x157>$/;"	l
ffff800000104593	kernel.asm	/^ffff800000104593:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104598	kernel.asm	/^ffff800000104598:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff80000010459d	kernel.asm	/^ffff80000010459d:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001045a4	kernel.asm	/^ffff8000001045a4:	80 ff ff $/;"	l
ffff8000001045a7	kernel.asm	/^ffff8000001045a7:	ff d0                	callq  *%rax$/;"	l
ffff8000001045a9	kernel.asm	/^ffff8000001045a9:	eb 01                	jmp    ffff8000001045ac <lapicinit+0x18e>$/;"	l
ffff8000001045ab	kernel.asm	/^ffff8000001045ab:	90                   	nop$/;"	l
ffff8000001045ac	kernel.asm	/^ffff8000001045ac:	5d                   	pop    %rbp$/;"	l
ffff8000001045ad	kernel.asm	/^ffff8000001045ad:	c3                   	retq   $/;"	l
ffff8000001045ae	kernel.asm	/^ffff8000001045ae <cpunum>:$/;"	l
ffff8000001045ae	kernel.asm	/^ffff8000001045ae:	55                   	push   %rbp$/;"	l
ffff8000001045af	kernel.asm	/^ffff8000001045af:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001045b2	kernel.asm	/^ffff8000001045b2:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001045b6	kernel.asm	/^ffff8000001045b6:	48 b8 c7 43 10 00 00 	movabs $0xffff8000001043c7,%rax$/;"	l
ffff8000001045bd	kernel.asm	/^ffff8000001045bd:	80 ff ff $/;"	l
ffff8000001045c0	kernel.asm	/^ffff8000001045c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001045c2	kernel.asm	/^ffff8000001045c2:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff8000001045c7	kernel.asm	/^ffff8000001045c7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001045ca	kernel.asm	/^ffff8000001045ca:	74 41                	je     ffff80000010460d <cpunum+0x5f>$/;"	l
ffff8000001045cc	kernel.asm	/^ffff8000001045cc:	48 b8 c8 71 11 00 00 	movabs $0xffff8000001171c8,%rax$/;"	l
ffff8000001045d3	kernel.asm	/^ffff8000001045d3:	80 ff ff $/;"	l
ffff8000001045d6	kernel.asm	/^ffff8000001045d6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001045d8	kernel.asm	/^ffff8000001045d8:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001045db	kernel.asm	/^ffff8000001045db:	48 ba c8 71 11 00 00 	movabs $0xffff8000001171c8,%rdx$/;"	l
ffff8000001045e2	kernel.asm	/^ffff8000001045e2:	80 ff ff $/;"	l
ffff8000001045e5	kernel.asm	/^ffff8000001045e5:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff8000001045e7	kernel.asm	/^ffff8000001045e7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001045e9	kernel.asm	/^ffff8000001045e9:	75 22                	jne    ffff80000010460d <cpunum+0x5f>$/;"	l
ffff8000001045eb	kernel.asm	/^ffff8000001045eb:	48 8b 45 08          	mov    0x8(%rbp),%rax$/;"	l
ffff8000001045ef	kernel.asm	/^ffff8000001045ef:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001045f2	kernel.asm	/^ffff8000001045f2:	48 bf c8 bd 10 00 00 	movabs $0xffff80000010bdc8,%rdi$/;"	l
ffff8000001045f9	kernel.asm	/^ffff8000001045f9:	80 ff ff $/;"	l
ffff8000001045fc	kernel.asm	/^ffff8000001045fc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104601	kernel.asm	/^ffff800000104601:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000104608	kernel.asm	/^ffff800000104608:	80 ff ff $/;"	l
ffff80000010460b	kernel.asm	/^ffff80000010460b:	ff d2                	callq  *%rdx$/;"	l
ffff80000010460d	kernel.asm	/^ffff80000010460d:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff800000104614	kernel.asm	/^ffff800000104614:	80 ff ff $/;"	l
ffff800000104617	kernel.asm	/^ffff800000104617:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010461a	kernel.asm	/^ffff80000010461a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010461d	kernel.asm	/^ffff80000010461d:	75 0a                	jne    ffff800000104629 <cpunum+0x7b>$/;"	l
ffff80000010461f	kernel.asm	/^ffff80000010461f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104624	kernel.asm	/^ffff800000104624:	e9 8b 00 00 00       	jmpq   ffff8000001046b4 <cpunum+0x106>$/;"	l
ffff800000104629	kernel.asm	/^ffff800000104629:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff800000104630	kernel.asm	/^ffff800000104630:	80 ff ff $/;"	l
ffff800000104633	kernel.asm	/^ffff800000104633:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104636	kernel.asm	/^ffff800000104636:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010463a	kernel.asm	/^ffff80000010463a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010463c	kernel.asm	/^ffff80000010463c:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff80000010463f	kernel.asm	/^ffff80000010463f:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104642	kernel.asm	/^ffff800000104642:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104649	kernel.asm	/^ffff800000104649:	eb 42                	jmp    ffff80000010468d <cpunum+0xdf>$/;"	l
ffff80000010464b	kernel.asm	/^ffff80000010464b:	48 b9 e0 72 11 00 00 	movabs $0xffff8000001172e0,%rcx$/;"	l
ffff800000104652	kernel.asm	/^ffff800000104652:	80 ff ff $/;"	l
ffff800000104655	kernel.asm	/^ffff800000104655:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104658	kernel.asm	/^ffff800000104658:	48 98                	cltq   $/;"	l
ffff80000010465a	kernel.asm	/^ffff80000010465a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010465d	kernel.asm	/^ffff80000010465d:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax$/;"	l
ffff800000104664	kernel.asm	/^ffff800000104664:	00 $/;"	l
ffff800000104665	kernel.asm	/^ffff800000104665:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000104668	kernel.asm	/^ffff800000104668:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010466b	kernel.asm	/^ffff80000010466b:	48 c1 e0 05          	shl    $0x5,%rax$/;"	l
ffff80000010466f	kernel.asm	/^ffff80000010466f:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff800000104672	kernel.asm	/^ffff800000104672:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000104675	kernel.asm	/^ffff800000104675:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000104679	kernel.asm	/^ffff800000104679:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010467c	kernel.asm	/^ffff80000010467c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010467f	kernel.asm	/^ffff80000010467f:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000104682	kernel.asm	/^ffff800000104682:	75 05                	jne    ffff800000104689 <cpunum+0xdb>$/;"	l
ffff800000104684	kernel.asm	/^ffff800000104684:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104687	kernel.asm	/^ffff800000104687:	eb 2b                	jmp    ffff8000001046b4 <cpunum+0x106>$/;"	l
ffff800000104689	kernel.asm	/^ffff800000104689:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010468d	kernel.asm	/^ffff80000010468d:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff800000104694	kernel.asm	/^ffff800000104694:	80 ff ff $/;"	l
ffff800000104697	kernel.asm	/^ffff800000104697:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104699	kernel.asm	/^ffff800000104699:	39 45 fc             	cmp    %eax,-0x4(%rbp)$/;"	l
ffff80000010469c	kernel.asm	/^ffff80000010469c:	7c ad                	jl     ffff80000010464b <cpunum+0x9d>$/;"	l
ffff80000010469e	kernel.asm	/^ffff80000010469e:	48 bf f4 bd 10 00 00 	movabs $0xffff80000010bdf4,%rdi$/;"	l
ffff8000001046a5	kernel.asm	/^ffff8000001046a5:	80 ff ff $/;"	l
ffff8000001046a8	kernel.asm	/^ffff8000001046a8:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001046af	kernel.asm	/^ffff8000001046af:	80 ff ff $/;"	l
ffff8000001046b2	kernel.asm	/^ffff8000001046b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001046b4	kernel.asm	/^ffff8000001046b4:	c9                   	leaveq $/;"	l
ffff8000001046b5	kernel.asm	/^ffff8000001046b5:	c3                   	retq   $/;"	l
ffff8000001046b6	kernel.asm	/^ffff8000001046b6 <lapiceoi>:$/;"	l
ffff8000001046b6	kernel.asm	/^ffff8000001046b6:	55                   	push   %rbp$/;"	l
ffff8000001046b7	kernel.asm	/^ffff8000001046b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001046ba	kernel.asm	/^ffff8000001046ba:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff8000001046c1	kernel.asm	/^ffff8000001046c1:	80 ff ff $/;"	l
ffff8000001046c4	kernel.asm	/^ffff8000001046c4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001046c7	kernel.asm	/^ffff8000001046c7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001046ca	kernel.asm	/^ffff8000001046ca:	74 16                	je     ffff8000001046e2 <lapiceoi+0x2c>$/;"	l
ffff8000001046cc	kernel.asm	/^ffff8000001046cc:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001046d1	kernel.asm	/^ffff8000001046d1:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff8000001046d6	kernel.asm	/^ffff8000001046d6:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001046dd	kernel.asm	/^ffff8000001046dd:	80 ff ff $/;"	l
ffff8000001046e0	kernel.asm	/^ffff8000001046e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001046e2	kernel.asm	/^ffff8000001046e2:	90                   	nop$/;"	l
ffff8000001046e3	kernel.asm	/^ffff8000001046e3:	5d                   	pop    %rbp$/;"	l
ffff8000001046e4	kernel.asm	/^ffff8000001046e4:	c3                   	retq   $/;"	l
ffff8000001046e5	kernel.asm	/^ffff8000001046e5 <microdelay>:$/;"	l
ffff8000001046e5	kernel.asm	/^ffff8000001046e5:	55                   	push   %rbp$/;"	l
ffff8000001046e6	kernel.asm	/^ffff8000001046e6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001046e9	kernel.asm	/^ffff8000001046e9:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001046ed	kernel.asm	/^ffff8000001046ed:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff8000001046f0	kernel.asm	/^ffff8000001046f0:	90                   	nop$/;"	l
ffff8000001046f1	kernel.asm	/^ffff8000001046f1:	c9                   	leaveq $/;"	l
ffff8000001046f2	kernel.asm	/^ffff8000001046f2:	c3                   	retq   $/;"	l
ffff8000001046f3	kernel.asm	/^ffff8000001046f3 <lapicstartap>:$/;"	l
ffff8000001046f3	kernel.asm	/^ffff8000001046f3:	55                   	push   %rbp$/;"	l
ffff8000001046f4	kernel.asm	/^ffff8000001046f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001046f7	kernel.asm	/^ffff8000001046f7:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001046fb	kernel.asm	/^ffff8000001046fb:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001046fd	kernel.asm	/^ffff8000001046fd:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000104700	kernel.asm	/^ffff800000104700:	88 45 ec             	mov    %al,-0x14(%rbp)$/;"	l
ffff800000104703	kernel.asm	/^ffff800000104703:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000104708	kernel.asm	/^ffff800000104708:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff80000010470d	kernel.asm	/^ffff80000010470d:	48 b8 a8 43 10 00 00 	movabs $0xffff8000001043a8,%rax$/;"	l
ffff800000104714	kernel.asm	/^ffff800000104714:	80 ff ff $/;"	l
ffff800000104717	kernel.asm	/^ffff800000104717:	ff d0                	callq  *%rax$/;"	l
ffff800000104719	kernel.asm	/^ffff800000104719:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff80000010471e	kernel.asm	/^ffff80000010471e:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff800000104723	kernel.asm	/^ffff800000104723:	48 b8 a8 43 10 00 00 	movabs $0xffff8000001043a8,%rax$/;"	l
ffff80000010472a	kernel.asm	/^ffff80000010472a:	80 ff ff $/;"	l
ffff80000010472d	kernel.asm	/^ffff80000010472d:	ff d0                	callq  *%rax$/;"	l
ffff80000010472f	kernel.asm	/^ffff80000010472f:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax$/;"	l
ffff800000104736	kernel.asm	/^ffff800000104736:	80 ff ff $/;"	l
ffff800000104739	kernel.asm	/^ffff800000104739:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010473d	kernel.asm	/^ffff80000010473d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104741	kernel.asm	/^ffff800000104741:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff800000104746	kernel.asm	/^ffff800000104746:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010474a	kernel.asm	/^ffff80000010474a:	48 83 c0 02          	add    $0x2,%rax$/;"	l
ffff80000010474e	kernel.asm	/^ffff80000010474e:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000104751	kernel.asm	/^ffff800000104751:	c1 ea 04             	shr    $0x4,%edx$/;"	l
ffff800000104754	kernel.asm	/^ffff800000104754:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000104757	kernel.asm	/^ffff800000104757:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff80000010475b	kernel.asm	/^ffff80000010475b:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff80000010475e	kernel.asm	/^ffff80000010475e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000104760	kernel.asm	/^ffff800000104760:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff800000104765	kernel.asm	/^ffff800000104765:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff80000010476c	kernel.asm	/^ffff80000010476c:	80 ff ff $/;"	l
ffff80000010476f	kernel.asm	/^ffff80000010476f:	ff d0                	callq  *%rax$/;"	l
ffff800000104771	kernel.asm	/^ffff800000104771:	be 00 c5 00 00       	mov    $0xc500,%esi$/;"	l
ffff800000104776	kernel.asm	/^ffff800000104776:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff80000010477b	kernel.asm	/^ffff80000010477b:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff800000104782	kernel.asm	/^ffff800000104782:	80 ff ff $/;"	l
ffff800000104785	kernel.asm	/^ffff800000104785:	ff d0                	callq  *%rax$/;"	l
ffff800000104787	kernel.asm	/^ffff800000104787:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff80000010478c	kernel.asm	/^ffff80000010478c:	48 b8 e5 46 10 00 00 	movabs $0xffff8000001046e5,%rax$/;"	l
ffff800000104793	kernel.asm	/^ffff800000104793:	80 ff ff $/;"	l
ffff800000104796	kernel.asm	/^ffff800000104796:	ff d0                	callq  *%rax$/;"	l
ffff800000104798	kernel.asm	/^ffff800000104798:	be 00 85 00 00       	mov    $0x8500,%esi$/;"	l
ffff80000010479d	kernel.asm	/^ffff80000010479d:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001047a2	kernel.asm	/^ffff8000001047a2:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001047a9	kernel.asm	/^ffff8000001047a9:	80 ff ff $/;"	l
ffff8000001047ac	kernel.asm	/^ffff8000001047ac:	ff d0                	callq  *%rax$/;"	l
ffff8000001047ae	kernel.asm	/^ffff8000001047ae:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff8000001047b3	kernel.asm	/^ffff8000001047b3:	48 b8 e5 46 10 00 00 	movabs $0xffff8000001046e5,%rax$/;"	l
ffff8000001047ba	kernel.asm	/^ffff8000001047ba:	80 ff ff $/;"	l
ffff8000001047bd	kernel.asm	/^ffff8000001047bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001047bf	kernel.asm	/^ffff8000001047bf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001047c6	kernel.asm	/^ffff8000001047c6:	eb 4b                	jmp    ffff800000104813 <lapicstartap+0x120>$/;"	l
ffff8000001047c8	kernel.asm	/^ffff8000001047c8:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff8000001047cc	kernel.asm	/^ffff8000001047cc:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001047cf	kernel.asm	/^ffff8000001047cf:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001047d1	kernel.asm	/^ffff8000001047d1:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff8000001047d6	kernel.asm	/^ffff8000001047d6:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001047dd	kernel.asm	/^ffff8000001047dd:	80 ff ff $/;"	l
ffff8000001047e0	kernel.asm	/^ffff8000001047e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001047e2	kernel.asm	/^ffff8000001047e2:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff8000001047e5	kernel.asm	/^ffff8000001047e5:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff8000001047e8	kernel.asm	/^ffff8000001047e8:	80 cc 06             	or     $0x6,%ah$/;"	l
ffff8000001047eb	kernel.asm	/^ffff8000001047eb:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001047ed	kernel.asm	/^ffff8000001047ed:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001047f2	kernel.asm	/^ffff8000001047f2:	48 b8 db 43 10 00 00 	movabs $0xffff8000001043db,%rax$/;"	l
ffff8000001047f9	kernel.asm	/^ffff8000001047f9:	80 ff ff $/;"	l
ffff8000001047fc	kernel.asm	/^ffff8000001047fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001047fe	kernel.asm	/^ffff8000001047fe:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff800000104803	kernel.asm	/^ffff800000104803:	48 b8 e5 46 10 00 00 	movabs $0xffff8000001046e5,%rax$/;"	l
ffff80000010480a	kernel.asm	/^ffff80000010480a:	80 ff ff $/;"	l
ffff80000010480d	kernel.asm	/^ffff80000010480d:	ff d0                	callq  *%rax$/;"	l
ffff80000010480f	kernel.asm	/^ffff80000010480f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104813	kernel.asm	/^ffff800000104813:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104817	kernel.asm	/^ffff800000104817:	7e af                	jle    ffff8000001047c8 <lapicstartap+0xd5>$/;"	l
ffff800000104819	kernel.asm	/^ffff800000104819:	90                   	nop$/;"	l
ffff80000010481a	kernel.asm	/^ffff80000010481a:	c9                   	leaveq $/;"	l
ffff80000010481b	kernel.asm	/^ffff80000010481b:	c3                   	retq   $/;"	l
ffff80000010481c	kernel.asm	/^ffff80000010481c <cmos_read>:$/;"	l
ffff80000010481c	kernel.asm	/^ffff80000010481c:	55                   	push   %rbp$/;"	l
ffff80000010481d	kernel.asm	/^ffff80000010481d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104820	kernel.asm	/^ffff800000104820:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104824	kernel.asm	/^ffff800000104824:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104827	kernel.asm	/^ffff800000104827:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010482a	kernel.asm	/^ffff80000010482a:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010482d	kernel.asm	/^ffff80000010482d:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010482f	kernel.asm	/^ffff80000010482f:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff800000104834	kernel.asm	/^ffff800000104834:	48 b8 a8 43 10 00 00 	movabs $0xffff8000001043a8,%rax$/;"	l
ffff80000010483b	kernel.asm	/^ffff80000010483b:	80 ff ff $/;"	l
ffff80000010483e	kernel.asm	/^ffff80000010483e:	ff d0                	callq  *%rax$/;"	l
ffff800000104840	kernel.asm	/^ffff800000104840:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff800000104845	kernel.asm	/^ffff800000104845:	48 b8 e5 46 10 00 00 	movabs $0xffff8000001046e5,%rax$/;"	l
ffff80000010484c	kernel.asm	/^ffff80000010484c:	80 ff ff $/;"	l
ffff80000010484f	kernel.asm	/^ffff80000010484f:	ff d0                	callq  *%rax$/;"	l
ffff800000104851	kernel.asm	/^ffff800000104851:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff800000104856	kernel.asm	/^ffff800000104856:	48 b8 8a 43 10 00 00 	movabs $0xffff80000010438a,%rax$/;"	l
ffff80000010485d	kernel.asm	/^ffff80000010485d:	80 ff ff $/;"	l
ffff800000104860	kernel.asm	/^ffff800000104860:	ff d0                	callq  *%rax$/;"	l
ffff800000104862	kernel.asm	/^ffff800000104862:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104865	kernel.asm	/^ffff800000104865:	c9                   	leaveq $/;"	l
ffff800000104866	kernel.asm	/^ffff800000104866:	c3                   	retq   $/;"	l
ffff800000104867	kernel.asm	/^ffff800000104867 <fill_rtcdate>:$/;"	l
ffff800000104867	kernel.asm	/^ffff800000104867:	55                   	push   %rbp$/;"	l
ffff800000104868	kernel.asm	/^ffff800000104868:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010486b	kernel.asm	/^ffff80000010486b:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010486f	kernel.asm	/^ffff80000010486f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000104873	kernel.asm	/^ffff800000104873:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000104878	kernel.asm	/^ffff800000104878:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff80000010487f	kernel.asm	/^ffff80000010487f:	80 ff ff $/;"	l
ffff800000104882	kernel.asm	/^ffff800000104882:	ff d0                	callq  *%rax$/;"	l
ffff800000104884	kernel.asm	/^ffff800000104884:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104886	kernel.asm	/^ffff800000104886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010488a	kernel.asm	/^ffff80000010488a:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010488c	kernel.asm	/^ffff80000010488c:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000104891	kernel.asm	/^ffff800000104891:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff800000104898	kernel.asm	/^ffff800000104898:	80 ff ff $/;"	l
ffff80000010489b	kernel.asm	/^ffff80000010489b:	ff d0                	callq  *%rax$/;"	l
ffff80000010489d	kernel.asm	/^ffff80000010489d:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010489f	kernel.asm	/^ffff80000010489f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001048a3	kernel.asm	/^ffff8000001048a3:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff8000001048a6	kernel.asm	/^ffff8000001048a6:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff8000001048ab	kernel.asm	/^ffff8000001048ab:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff8000001048b2	kernel.asm	/^ffff8000001048b2:	80 ff ff $/;"	l
ffff8000001048b5	kernel.asm	/^ffff8000001048b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001048b7	kernel.asm	/^ffff8000001048b7:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001048b9	kernel.asm	/^ffff8000001048b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001048bd	kernel.asm	/^ffff8000001048bd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001048c0	kernel.asm	/^ffff8000001048c0:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff8000001048c5	kernel.asm	/^ffff8000001048c5:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff8000001048cc	kernel.asm	/^ffff8000001048cc:	80 ff ff $/;"	l
ffff8000001048cf	kernel.asm	/^ffff8000001048cf:	ff d0                	callq  *%rax$/;"	l
ffff8000001048d1	kernel.asm	/^ffff8000001048d1:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001048d3	kernel.asm	/^ffff8000001048d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001048d7	kernel.asm	/^ffff8000001048d7:	89 50 0c             	mov    %edx,0xc(%rax)$/;"	l
ffff8000001048da	kernel.asm	/^ffff8000001048da:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff8000001048df	kernel.asm	/^ffff8000001048df:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff8000001048e6	kernel.asm	/^ffff8000001048e6:	80 ff ff $/;"	l
ffff8000001048e9	kernel.asm	/^ffff8000001048e9:	ff d0                	callq  *%rax$/;"	l
ffff8000001048eb	kernel.asm	/^ffff8000001048eb:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001048ed	kernel.asm	/^ffff8000001048ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001048f1	kernel.asm	/^ffff8000001048f1:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff8000001048f4	kernel.asm	/^ffff8000001048f4:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff8000001048f9	kernel.asm	/^ffff8000001048f9:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff800000104900	kernel.asm	/^ffff800000104900:	80 ff ff $/;"	l
ffff800000104903	kernel.asm	/^ffff800000104903:	ff d0                	callq  *%rax$/;"	l
ffff800000104905	kernel.asm	/^ffff800000104905:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104907	kernel.asm	/^ffff800000104907:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010490b	kernel.asm	/^ffff80000010490b:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff80000010490e	kernel.asm	/^ffff80000010490e:	90                   	nop$/;"	l
ffff80000010490f	kernel.asm	/^ffff80000010490f:	c9                   	leaveq $/;"	l
ffff800000104910	kernel.asm	/^ffff800000104910:	c3                   	retq   $/;"	l
ffff800000104911	kernel.asm	/^ffff800000104911 <cmostime>:$/;"	l
ffff800000104911	kernel.asm	/^ffff800000104911:	55                   	push   %rbp$/;"	l
ffff800000104912	kernel.asm	/^ffff800000104912:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104915	kernel.asm	/^ffff800000104915:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff800000104919	kernel.asm	/^ffff800000104919:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)$/;"	l
ffff80000010491d	kernel.asm	/^ffff80000010491d:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff800000104922	kernel.asm	/^ffff800000104922:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff800000104929	kernel.asm	/^ffff800000104929:	80 ff ff $/;"	l
ffff80000010492c	kernel.asm	/^ffff80000010492c:	ff d0                	callq  *%rax$/;"	l
ffff80000010492e	kernel.asm	/^ffff80000010492e:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104931	kernel.asm	/^ffff800000104931:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104934	kernel.asm	/^ffff800000104934:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000104937	kernel.asm	/^ffff800000104937:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104939	kernel.asm	/^ffff800000104939:	0f 94 c0             	sete   %al$/;"	l
ffff80000010493c	kernel.asm	/^ffff80000010493c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010493f	kernel.asm	/^ffff80000010493f:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104942	kernel.asm	/^ffff800000104942:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000104946	kernel.asm	/^ffff800000104946:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104949	kernel.asm	/^ffff800000104949:	48 b8 67 48 10 00 00 	movabs $0xffff800000104867,%rax$/;"	l
ffff800000104950	kernel.asm	/^ffff800000104950:	80 ff ff $/;"	l
ffff800000104953	kernel.asm	/^ffff800000104953:	ff d0                	callq  *%rax$/;"	l
ffff800000104955	kernel.asm	/^ffff800000104955:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010495a	kernel.asm	/^ffff80000010495a:	48 b8 1c 48 10 00 00 	movabs $0xffff80000010481c,%rax$/;"	l
ffff800000104961	kernel.asm	/^ffff800000104961:	80 ff ff $/;"	l
ffff800000104964	kernel.asm	/^ffff800000104964:	ff d0                	callq  *%rax$/;"	l
ffff800000104966	kernel.asm	/^ffff800000104966:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff80000010496b	kernel.asm	/^ffff80000010496b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010496d	kernel.asm	/^ffff80000010496d:	75 38                	jne    ffff8000001049a7 <cmostime+0x96>$/;"	l
ffff80000010496f	kernel.asm	/^ffff80000010496f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax$/;"	l
ffff800000104973	kernel.asm	/^ffff800000104973:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104976	kernel.asm	/^ffff800000104976:	48 b8 67 48 10 00 00 	movabs $0xffff800000104867,%rax$/;"	l
ffff80000010497d	kernel.asm	/^ffff80000010497d:	80 ff ff $/;"	l
ffff800000104980	kernel.asm	/^ffff800000104980:	ff d0                	callq  *%rax$/;"	l
ffff800000104982	kernel.asm	/^ffff800000104982:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx$/;"	l
ffff800000104986	kernel.asm	/^ffff800000104986:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff80000010498a	kernel.asm	/^ffff80000010498a:	ba 18 00 00 00       	mov    $0x18,%edx$/;"	l
ffff80000010498f	kernel.asm	/^ffff80000010498f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104992	kernel.asm	/^ffff800000104992:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104995	kernel.asm	/^ffff800000104995:	48 b8 f6 76 10 00 00 	movabs $0xffff8000001076f6,%rax$/;"	l
ffff80000010499c	kernel.asm	/^ffff80000010499c:	80 ff ff $/;"	l
ffff80000010499f	kernel.asm	/^ffff80000010499f:	ff d0                	callq  *%rax$/;"	l
ffff8000001049a1	kernel.asm	/^ffff8000001049a1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001049a3	kernel.asm	/^ffff8000001049a3:	74 05                	je     ffff8000001049aa <cmostime+0x99>$/;"	l
ffff8000001049a5	kernel.asm	/^ffff8000001049a5:	eb 9b                	jmp    ffff800000104942 <cmostime+0x31>$/;"	l
ffff8000001049a7	kernel.asm	/^ffff8000001049a7:	90                   	nop$/;"	l
ffff8000001049a8	kernel.asm	/^ffff8000001049a8:	eb 98                	jmp    ffff800000104942 <cmostime+0x31>$/;"	l
ffff8000001049aa	kernel.asm	/^ffff8000001049aa:	90                   	nop$/;"	l
ffff8000001049ab	kernel.asm	/^ffff8000001049ab:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001049af	kernel.asm	/^ffff8000001049af:	0f 84 b4 00 00 00    	je     ffff800000104a69 <cmostime+0x158>$/;"	l
ffff8000001049b5	kernel.asm	/^ffff8000001049b5:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff8000001049b8	kernel.asm	/^ffff8000001049b8:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff8000001049bb	kernel.asm	/^ffff8000001049bb:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001049bd	kernel.asm	/^ffff8000001049bd:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001049bf	kernel.asm	/^ffff8000001049bf:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff8000001049c2	kernel.asm	/^ffff8000001049c2:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001049c4	kernel.asm	/^ffff8000001049c4:	01 c0                	add    %eax,%eax$/;"	l
ffff8000001049c6	kernel.asm	/^ffff8000001049c6:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001049c8	kernel.asm	/^ffff8000001049c8:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff8000001049cb	kernel.asm	/^ffff8000001049cb:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff8000001049ce	kernel.asm	/^ffff8000001049ce:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001049d0	kernel.asm	/^ffff8000001049d0:	89 45 e0             	mov    %eax,-0x20(%rbp)$/;"	l
ffff8000001049d3	kernel.asm	/^ffff8000001049d3:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001049d6	kernel.asm	/^ffff8000001049d6:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff8000001049d9	kernel.asm	/^ffff8000001049d9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001049db	kernel.asm	/^ffff8000001049db:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001049dd	kernel.asm	/^ffff8000001049dd:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff8000001049e0	kernel.asm	/^ffff8000001049e0:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001049e2	kernel.asm	/^ffff8000001049e2:	01 c0                	add    %eax,%eax$/;"	l
ffff8000001049e4	kernel.asm	/^ffff8000001049e4:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001049e6	kernel.asm	/^ffff8000001049e6:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001049e9	kernel.asm	/^ffff8000001049e9:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff8000001049ec	kernel.asm	/^ffff8000001049ec:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001049ee	kernel.asm	/^ffff8000001049ee:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
ffff8000001049f1	kernel.asm	/^ffff8000001049f1:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff8000001049f4	kernel.asm	/^ffff8000001049f4:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff8000001049f7	kernel.asm	/^ffff8000001049f7:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001049f9	kernel.asm	/^ffff8000001049f9:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001049fb	kernel.asm	/^ffff8000001049fb:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff8000001049fe	kernel.asm	/^ffff8000001049fe:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a00	kernel.asm	/^ffff800000104a00:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a02	kernel.asm	/^ffff800000104a02:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a04	kernel.asm	/^ffff800000104a04:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104a07	kernel.asm	/^ffff800000104a07:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a0a	kernel.asm	/^ffff800000104a0a:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a0c	kernel.asm	/^ffff800000104a0c:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000104a0f	kernel.asm	/^ffff800000104a0f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104a12	kernel.asm	/^ffff800000104a12:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a15	kernel.asm	/^ffff800000104a15:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a17	kernel.asm	/^ffff800000104a17:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a19	kernel.asm	/^ffff800000104a19:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a1c	kernel.asm	/^ffff800000104a1c:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a1e	kernel.asm	/^ffff800000104a1e:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a20	kernel.asm	/^ffff800000104a20:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a22	kernel.asm	/^ffff800000104a22:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104a25	kernel.asm	/^ffff800000104a25:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a28	kernel.asm	/^ffff800000104a28:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a2a	kernel.asm	/^ffff800000104a2a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000104a2d	kernel.asm	/^ffff800000104a2d:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104a30	kernel.asm	/^ffff800000104a30:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a33	kernel.asm	/^ffff800000104a33:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a35	kernel.asm	/^ffff800000104a35:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a37	kernel.asm	/^ffff800000104a37:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a3a	kernel.asm	/^ffff800000104a3a:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a3c	kernel.asm	/^ffff800000104a3c:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a3e	kernel.asm	/^ffff800000104a3e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a40	kernel.asm	/^ffff800000104a40:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104a43	kernel.asm	/^ffff800000104a43:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a46	kernel.asm	/^ffff800000104a46:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a48	kernel.asm	/^ffff800000104a48:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000104a4b	kernel.asm	/^ffff800000104a4b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104a4e	kernel.asm	/^ffff800000104a4e:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a51	kernel.asm	/^ffff800000104a51:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a53	kernel.asm	/^ffff800000104a53:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a55	kernel.asm	/^ffff800000104a55:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a58	kernel.asm	/^ffff800000104a58:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a5a	kernel.asm	/^ffff800000104a5a:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a5c	kernel.asm	/^ffff800000104a5c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a5e	kernel.asm	/^ffff800000104a5e:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104a61	kernel.asm	/^ffff800000104a61:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a64	kernel.asm	/^ffff800000104a64:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a66	kernel.asm	/^ffff800000104a66:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000104a69	kernel.asm	/^ffff800000104a69:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104a6d	kernel.asm	/^ffff800000104a6d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000104a71	kernel.asm	/^ffff800000104a71:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000104a74	kernel.asm	/^ffff800000104a74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000104a78	kernel.asm	/^ffff800000104a78:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000104a7c	kernel.asm	/^ffff800000104a7c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000104a80	kernel.asm	/^ffff800000104a80:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000104a84	kernel.asm	/^ffff800000104a84:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104a88	kernel.asm	/^ffff800000104a88:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000104a8b	kernel.asm	/^ffff800000104a8b:	8d 90 d0 07 00 00    	lea    0x7d0(%rax),%edx$/;"	l
ffff800000104a91	kernel.asm	/^ffff800000104a91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104a95	kernel.asm	/^ffff800000104a95:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff800000104a98	kernel.asm	/^ffff800000104a98:	90                   	nop$/;"	l
ffff800000104a99	kernel.asm	/^ffff800000104a99:	c9                   	leaveq $/;"	l
ffff800000104a9a	kernel.asm	/^ffff800000104a9a:	c3                   	retq   $/;"	l
ffff800000104a9b	kernel.asm	/^ffff800000104a9b <initlog>:$/;"	l
ffff800000104a9b	kernel.asm	/^ffff800000104a9b:	55                   	push   %rbp$/;"	l
ffff800000104a9c	kernel.asm	/^ffff800000104a9c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104a9f	kernel.asm	/^ffff800000104a9f:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000104aa3	kernel.asm	/^ffff800000104aa3:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000104aa6	kernel.asm	/^ffff800000104aa6:	48 be 04 be 10 00 00 	movabs $0xffff80000010be04,%rsi$/;"	l
ffff800000104aad	kernel.asm	/^ffff800000104aad:	80 ff ff $/;"	l
ffff800000104ab0	kernel.asm	/^ffff800000104ab0:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104ab7	kernel.asm	/^ffff800000104ab7:	80 ff ff $/;"	l
ffff800000104aba	kernel.asm	/^ffff800000104aba:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000104ac1	kernel.asm	/^ffff800000104ac1:	80 ff ff $/;"	l
ffff800000104ac4	kernel.asm	/^ffff800000104ac4:	ff d0                	callq  *%rax$/;"	l
ffff800000104ac6	kernel.asm	/^ffff800000104ac6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000104aca	kernel.asm	/^ffff800000104aca:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000104acd	kernel.asm	/^ffff800000104acd:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000104ad0	kernel.asm	/^ffff800000104ad0:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104ad2	kernel.asm	/^ffff800000104ad2:	48 b8 cf 1f 10 00 00 	movabs $0xffff800000101fcf,%rax$/;"	l
ffff800000104ad9	kernel.asm	/^ffff800000104ad9:	80 ff ff $/;"	l
ffff800000104adc	kernel.asm	/^ffff800000104adc:	ff d0                	callq  *%rax$/;"	l
ffff800000104ade	kernel.asm	/^ffff800000104ade:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104ae1	kernel.asm	/^ffff800000104ae1:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104ae3	kernel.asm	/^ffff800000104ae3:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104aea	kernel.asm	/^ffff800000104aea:	80 ff ff $/;"	l
ffff800000104aed	kernel.asm	/^ffff800000104aed:	89 50 68             	mov    %edx,0x68(%rax)$/;"	l
ffff800000104af0	kernel.asm	/^ffff800000104af0:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104af3	kernel.asm	/^ffff800000104af3:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104af5	kernel.asm	/^ffff800000104af5:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104afc	kernel.asm	/^ffff800000104afc:	80 ff ff $/;"	l
ffff800000104aff	kernel.asm	/^ffff800000104aff:	89 50 6c             	mov    %edx,0x6c(%rax)$/;"	l
ffff800000104b02	kernel.asm	/^ffff800000104b02:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104b09	kernel.asm	/^ffff800000104b09:	80 ff ff $/;"	l
ffff800000104b0c	kernel.asm	/^ffff800000104b0c:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000104b0f	kernel.asm	/^ffff800000104b0f:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff800000104b12	kernel.asm	/^ffff800000104b12:	48 b8 a5 4d 10 00 00 	movabs $0xffff800000104da5,%rax$/;"	l
ffff800000104b19	kernel.asm	/^ffff800000104b19:	80 ff ff $/;"	l
ffff800000104b1c	kernel.asm	/^ffff800000104b1c:	ff d0                	callq  *%rax$/;"	l
ffff800000104b1e	kernel.asm	/^ffff800000104b1e:	90                   	nop$/;"	l
ffff800000104b1f	kernel.asm	/^ffff800000104b1f:	c9                   	leaveq $/;"	l
ffff800000104b20	kernel.asm	/^ffff800000104b20:	c3                   	retq   $/;"	l
ffff800000104b21	kernel.asm	/^ffff800000104b21 <install_trans>:$/;"	l
ffff800000104b21	kernel.asm	/^ffff800000104b21:	55                   	push   %rbp$/;"	l
ffff800000104b22	kernel.asm	/^ffff800000104b22:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104b25	kernel.asm	/^ffff800000104b25:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104b29	kernel.asm	/^ffff800000104b29:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104b30	kernel.asm	/^ffff800000104b30:	e9 dc 00 00 00       	jmpq   ffff800000104c11 <install_trans+0xf0>$/;"	l
ffff800000104b35	kernel.asm	/^ffff800000104b35:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104b3c	kernel.asm	/^ffff800000104b3c:	80 ff ff $/;"	l
ffff800000104b3f	kernel.asm	/^ffff800000104b3f:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000104b42	kernel.asm	/^ffff800000104b42:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104b45	kernel.asm	/^ffff800000104b45:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104b47	kernel.asm	/^ffff800000104b47:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000104b4a	kernel.asm	/^ffff800000104b4a:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b4c	kernel.asm	/^ffff800000104b4c:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104b53	kernel.asm	/^ffff800000104b53:	80 ff ff $/;"	l
ffff800000104b56	kernel.asm	/^ffff800000104b56:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104b59	kernel.asm	/^ffff800000104b59:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104b5b	kernel.asm	/^ffff800000104b5b:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104b5d	kernel.asm	/^ffff800000104b5d:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104b64	kernel.asm	/^ffff800000104b64:	80 ff ff $/;"	l
ffff800000104b67	kernel.asm	/^ffff800000104b67:	ff d0                	callq  *%rax$/;"	l
ffff800000104b69	kernel.asm	/^ffff800000104b69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104b6d	kernel.asm	/^ffff800000104b6d:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104b74	kernel.asm	/^ffff800000104b74:	80 ff ff $/;"	l
ffff800000104b77	kernel.asm	/^ffff800000104b77:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104b7a	kernel.asm	/^ffff800000104b7a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104b7d	kernel.asm	/^ffff800000104b7d:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104b81	kernel.asm	/^ffff800000104b81:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000104b85	kernel.asm	/^ffff800000104b85:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b87	kernel.asm	/^ffff800000104b87:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104b8e	kernel.asm	/^ffff800000104b8e:	80 ff ff $/;"	l
ffff800000104b91	kernel.asm	/^ffff800000104b91:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104b94	kernel.asm	/^ffff800000104b94:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104b96	kernel.asm	/^ffff800000104b96:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104b98	kernel.asm	/^ffff800000104b98:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104b9f	kernel.asm	/^ffff800000104b9f:	80 ff ff $/;"	l
ffff800000104ba2	kernel.asm	/^ffff800000104ba2:	ff d0                	callq  *%rax$/;"	l
ffff800000104ba4	kernel.asm	/^ffff800000104ba4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104ba8	kernel.asm	/^ffff800000104ba8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104bac	kernel.asm	/^ffff800000104bac:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000104bb3	kernel.asm	/^ffff800000104bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104bb7	kernel.asm	/^ffff800000104bb7:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104bbd	kernel.asm	/^ffff800000104bbd:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000104bc2	kernel.asm	/^ffff800000104bc2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104bc5	kernel.asm	/^ffff800000104bc5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104bc8	kernel.asm	/^ffff800000104bc8:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000104bcf	kernel.asm	/^ffff800000104bcf:	80 ff ff $/;"	l
ffff800000104bd2	kernel.asm	/^ffff800000104bd2:	ff d0                	callq  *%rax$/;"	l
ffff800000104bd4	kernel.asm	/^ffff800000104bd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104bd8	kernel.asm	/^ffff800000104bd8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104bdb	kernel.asm	/^ffff800000104bdb:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104be2	kernel.asm	/^ffff800000104be2:	80 ff ff $/;"	l
ffff800000104be5	kernel.asm	/^ffff800000104be5:	ff d0                	callq  *%rax$/;"	l
ffff800000104be7	kernel.asm	/^ffff800000104be7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104beb	kernel.asm	/^ffff800000104beb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104bee	kernel.asm	/^ffff800000104bee:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104bf5	kernel.asm	/^ffff800000104bf5:	80 ff ff $/;"	l
ffff800000104bf8	kernel.asm	/^ffff800000104bf8:	ff d0                	callq  *%rax$/;"	l
ffff800000104bfa	kernel.asm	/^ffff800000104bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104bfe	kernel.asm	/^ffff800000104bfe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104c01	kernel.asm	/^ffff800000104c01:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104c08	kernel.asm	/^ffff800000104c08:	80 ff ff $/;"	l
ffff800000104c0b	kernel.asm	/^ffff800000104c0b:	ff d0                	callq  *%rax$/;"	l
ffff800000104c0d	kernel.asm	/^ffff800000104c0d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104c11	kernel.asm	/^ffff800000104c11:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104c18	kernel.asm	/^ffff800000104c18:	80 ff ff $/;"	l
ffff800000104c1b	kernel.asm	/^ffff800000104c1b:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104c1e	kernel.asm	/^ffff800000104c1e:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104c21	kernel.asm	/^ffff800000104c21:	0f 8f 0e ff ff ff    	jg     ffff800000104b35 <install_trans+0x14>$/;"	l
ffff800000104c27	kernel.asm	/^ffff800000104c27:	90                   	nop$/;"	l
ffff800000104c28	kernel.asm	/^ffff800000104c28:	c9                   	leaveq $/;"	l
ffff800000104c29	kernel.asm	/^ffff800000104c29:	c3                   	retq   $/;"	l
ffff800000104c2a	kernel.asm	/^ffff800000104c2a <read_head>:$/;"	l
ffff800000104c2a	kernel.asm	/^ffff800000104c2a:	55                   	push   %rbp$/;"	l
ffff800000104c2b	kernel.asm	/^ffff800000104c2b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104c2e	kernel.asm	/^ffff800000104c2e:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104c32	kernel.asm	/^ffff800000104c32:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104c39	kernel.asm	/^ffff800000104c39:	80 ff ff $/;"	l
ffff800000104c3c	kernel.asm	/^ffff800000104c3c:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104c3f	kernel.asm	/^ffff800000104c3f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c41	kernel.asm	/^ffff800000104c41:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104c48	kernel.asm	/^ffff800000104c48:	80 ff ff $/;"	l
ffff800000104c4b	kernel.asm	/^ffff800000104c4b:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104c4e	kernel.asm	/^ffff800000104c4e:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104c50	kernel.asm	/^ffff800000104c50:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104c52	kernel.asm	/^ffff800000104c52:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104c59	kernel.asm	/^ffff800000104c59:	80 ff ff $/;"	l
ffff800000104c5c	kernel.asm	/^ffff800000104c5c:	ff d0                	callq  *%rax$/;"	l
ffff800000104c5e	kernel.asm	/^ffff800000104c5e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104c62	kernel.asm	/^ffff800000104c62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104c66	kernel.asm	/^ffff800000104c66:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104c6c	kernel.asm	/^ffff800000104c6c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104c70	kernel.asm	/^ffff800000104c70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104c74	kernel.asm	/^ffff800000104c74:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000104c76	kernel.asm	/^ffff800000104c76:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104c7d	kernel.asm	/^ffff800000104c7d:	80 ff ff $/;"	l
ffff800000104c80	kernel.asm	/^ffff800000104c80:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff800000104c83	kernel.asm	/^ffff800000104c83:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104c8a	kernel.asm	/^ffff800000104c8a:	eb 2a                	jmp    ffff800000104cb6 <read_head+0x8c>$/;"	l
ffff800000104c8c	kernel.asm	/^ffff800000104c8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104c90	kernel.asm	/^ffff800000104c90:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104c93	kernel.asm	/^ffff800000104c93:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104c96	kernel.asm	/^ffff800000104c96:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx$/;"	l
ffff800000104c9a	kernel.asm	/^ffff800000104c9a:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104ca1	kernel.asm	/^ffff800000104ca1:	80 ff ff $/;"	l
ffff800000104ca4	kernel.asm	/^ffff800000104ca4:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000104ca7	kernel.asm	/^ffff800000104ca7:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000104caa	kernel.asm	/^ffff800000104caa:	48 83 c1 1c          	add    $0x1c,%rcx$/;"	l
ffff800000104cae	kernel.asm	/^ffff800000104cae:	89 54 88 10          	mov    %edx,0x10(%rax,%rcx,4)$/;"	l
ffff800000104cb2	kernel.asm	/^ffff800000104cb2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104cb6	kernel.asm	/^ffff800000104cb6:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104cbd	kernel.asm	/^ffff800000104cbd:	80 ff ff $/;"	l
ffff800000104cc0	kernel.asm	/^ffff800000104cc0:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104cc3	kernel.asm	/^ffff800000104cc3:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104cc6	kernel.asm	/^ffff800000104cc6:	7f c4                	jg     ffff800000104c8c <read_head+0x62>$/;"	l
ffff800000104cc8	kernel.asm	/^ffff800000104cc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104ccc	kernel.asm	/^ffff800000104ccc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104ccf	kernel.asm	/^ffff800000104ccf:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104cd6	kernel.asm	/^ffff800000104cd6:	80 ff ff $/;"	l
ffff800000104cd9	kernel.asm	/^ffff800000104cd9:	ff d0                	callq  *%rax$/;"	l
ffff800000104cdb	kernel.asm	/^ffff800000104cdb:	90                   	nop$/;"	l
ffff800000104cdc	kernel.asm	/^ffff800000104cdc:	c9                   	leaveq $/;"	l
ffff800000104cdd	kernel.asm	/^ffff800000104cdd:	c3                   	retq   $/;"	l
ffff800000104cde	kernel.asm	/^ffff800000104cde <write_head>:$/;"	l
ffff800000104cde	kernel.asm	/^ffff800000104cde:	55                   	push   %rbp$/;"	l
ffff800000104cdf	kernel.asm	/^ffff800000104cdf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104ce2	kernel.asm	/^ffff800000104ce2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104ce6	kernel.asm	/^ffff800000104ce6:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104ced	kernel.asm	/^ffff800000104ced:	80 ff ff $/;"	l
ffff800000104cf0	kernel.asm	/^ffff800000104cf0:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104cf3	kernel.asm	/^ffff800000104cf3:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104cf5	kernel.asm	/^ffff800000104cf5:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104cfc	kernel.asm	/^ffff800000104cfc:	80 ff ff $/;"	l
ffff800000104cff	kernel.asm	/^ffff800000104cff:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104d02	kernel.asm	/^ffff800000104d02:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104d04	kernel.asm	/^ffff800000104d04:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104d06	kernel.asm	/^ffff800000104d06:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104d0d	kernel.asm	/^ffff800000104d0d:	80 ff ff $/;"	l
ffff800000104d10	kernel.asm	/^ffff800000104d10:	ff d0                	callq  *%rax$/;"	l
ffff800000104d12	kernel.asm	/^ffff800000104d12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104d16	kernel.asm	/^ffff800000104d16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104d1a	kernel.asm	/^ffff800000104d1a:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104d20	kernel.asm	/^ffff800000104d20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104d24	kernel.asm	/^ffff800000104d24:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104d2b	kernel.asm	/^ffff800000104d2b:	80 ff ff $/;"	l
ffff800000104d2e	kernel.asm	/^ffff800000104d2e:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff800000104d31	kernel.asm	/^ffff800000104d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104d35	kernel.asm	/^ffff800000104d35:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104d37	kernel.asm	/^ffff800000104d37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104d3e	kernel.asm	/^ffff800000104d3e:	eb 2a                	jmp    ffff800000104d6a <write_head+0x8c>$/;"	l
ffff800000104d40	kernel.asm	/^ffff800000104d40:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104d47	kernel.asm	/^ffff800000104d47:	80 ff ff $/;"	l
ffff800000104d4a	kernel.asm	/^ffff800000104d4a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104d4d	kernel.asm	/^ffff800000104d4d:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104d50	kernel.asm	/^ffff800000104d50:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104d54	kernel.asm	/^ffff800000104d54:	8b 4c 90 10          	mov    0x10(%rax,%rdx,4),%ecx$/;"	l
ffff800000104d58	kernel.asm	/^ffff800000104d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104d5c	kernel.asm	/^ffff800000104d5c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104d5f	kernel.asm	/^ffff800000104d5f:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104d62	kernel.asm	/^ffff800000104d62:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)$/;"	l
ffff800000104d66	kernel.asm	/^ffff800000104d66:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104d6a	kernel.asm	/^ffff800000104d6a:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104d71	kernel.asm	/^ffff800000104d71:	80 ff ff $/;"	l
ffff800000104d74	kernel.asm	/^ffff800000104d74:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104d77	kernel.asm	/^ffff800000104d77:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104d7a	kernel.asm	/^ffff800000104d7a:	7f c4                	jg     ffff800000104d40 <write_head+0x62>$/;"	l
ffff800000104d7c	kernel.asm	/^ffff800000104d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104d80	kernel.asm	/^ffff800000104d80:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104d83	kernel.asm	/^ffff800000104d83:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104d8a	kernel.asm	/^ffff800000104d8a:	80 ff ff $/;"	l
ffff800000104d8d	kernel.asm	/^ffff800000104d8d:	ff d0                	callq  *%rax$/;"	l
ffff800000104d8f	kernel.asm	/^ffff800000104d8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104d93	kernel.asm	/^ffff800000104d93:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104d96	kernel.asm	/^ffff800000104d96:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104d9d	kernel.asm	/^ffff800000104d9d:	80 ff ff $/;"	l
ffff800000104da0	kernel.asm	/^ffff800000104da0:	ff d0                	callq  *%rax$/;"	l
ffff800000104da2	kernel.asm	/^ffff800000104da2:	90                   	nop$/;"	l
ffff800000104da3	kernel.asm	/^ffff800000104da3:	c9                   	leaveq $/;"	l
ffff800000104da4	kernel.asm	/^ffff800000104da4:	c3                   	retq   $/;"	l
ffff800000104da5	kernel.asm	/^ffff800000104da5 <recover_from_log>:$/;"	l
ffff800000104da5	kernel.asm	/^ffff800000104da5:	55                   	push   %rbp$/;"	l
ffff800000104da6	kernel.asm	/^ffff800000104da6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104da9	kernel.asm	/^ffff800000104da9:	48 b8 2a 4c 10 00 00 	movabs $0xffff800000104c2a,%rax$/;"	l
ffff800000104db0	kernel.asm	/^ffff800000104db0:	80 ff ff $/;"	l
ffff800000104db3	kernel.asm	/^ffff800000104db3:	ff d0                	callq  *%rax$/;"	l
ffff800000104db5	kernel.asm	/^ffff800000104db5:	48 b8 21 4b 10 00 00 	movabs $0xffff800000104b21,%rax$/;"	l
ffff800000104dbc	kernel.asm	/^ffff800000104dbc:	80 ff ff $/;"	l
ffff800000104dbf	kernel.asm	/^ffff800000104dbf:	ff d0                	callq  *%rax$/;"	l
ffff800000104dc1	kernel.asm	/^ffff800000104dc1:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104dc8	kernel.asm	/^ffff800000104dc8:	80 ff ff $/;"	l
ffff800000104dcb	kernel.asm	/^ffff800000104dcb:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff800000104dd2	kernel.asm	/^ffff800000104dd2:	48 b8 de 4c 10 00 00 	movabs $0xffff800000104cde,%rax$/;"	l
ffff800000104dd9	kernel.asm	/^ffff800000104dd9:	80 ff ff $/;"	l
ffff800000104ddc	kernel.asm	/^ffff800000104ddc:	ff d0                	callq  *%rax$/;"	l
ffff800000104dde	kernel.asm	/^ffff800000104dde:	90                   	nop$/;"	l
ffff800000104ddf	kernel.asm	/^ffff800000104ddf:	5d                   	pop    %rbp$/;"	l
ffff800000104de0	kernel.asm	/^ffff800000104de0:	c3                   	retq   $/;"	l
ffff800000104de1	kernel.asm	/^ffff800000104de1 <begin_op>:$/;"	l
ffff800000104de1	kernel.asm	/^ffff800000104de1:	55                   	push   %rbp$/;"	l
ffff800000104de2	kernel.asm	/^ffff800000104de2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104de5	kernel.asm	/^ffff800000104de5:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104dec	kernel.asm	/^ffff800000104dec:	80 ff ff $/;"	l
ffff800000104def	kernel.asm	/^ffff800000104def:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000104df6	kernel.asm	/^ffff800000104df6:	80 ff ff $/;"	l
ffff800000104df9	kernel.asm	/^ffff800000104df9:	ff d0                	callq  *%rax$/;"	l
ffff800000104dfb	kernel.asm	/^ffff800000104dfb:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104e02	kernel.asm	/^ffff800000104e02:	80 ff ff $/;"	l
ffff800000104e05	kernel.asm	/^ffff800000104e05:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000104e08	kernel.asm	/^ffff800000104e08:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104e0a	kernel.asm	/^ffff800000104e0a:	74 22                	je     ffff800000104e2e <begin_op+0x4d>$/;"	l
ffff800000104e0c	kernel.asm	/^ffff800000104e0c:	48 be e0 71 11 00 00 	movabs $0xffff8000001171e0,%rsi$/;"	l
ffff800000104e13	kernel.asm	/^ffff800000104e13:	80 ff ff $/;"	l
ffff800000104e16	kernel.asm	/^ffff800000104e16:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104e1d	kernel.asm	/^ffff800000104e1d:	80 ff ff $/;"	l
ffff800000104e20	kernel.asm	/^ffff800000104e20:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000104e27	kernel.asm	/^ffff800000104e27:	80 ff ff $/;"	l
ffff800000104e2a	kernel.asm	/^ffff800000104e2a:	ff d0                	callq  *%rax$/;"	l
ffff800000104e2c	kernel.asm	/^ffff800000104e2c:	eb cd                	jmp    ffff800000104dfb <begin_op+0x1a>$/;"	l
ffff800000104e2e	kernel.asm	/^ffff800000104e2e:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104e35	kernel.asm	/^ffff800000104e35:	80 ff ff $/;"	l
ffff800000104e38	kernel.asm	/^ffff800000104e38:	8b 48 7c             	mov    0x7c(%rax),%ecx$/;"	l
ffff800000104e3b	kernel.asm	/^ffff800000104e3b:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104e42	kernel.asm	/^ffff800000104e42:	80 ff ff $/;"	l
ffff800000104e45	kernel.asm	/^ffff800000104e45:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104e48	kernel.asm	/^ffff800000104e48:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000104e4b	kernel.asm	/^ffff800000104e4b:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104e4d	kernel.asm	/^ffff800000104e4d:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104e50	kernel.asm	/^ffff800000104e50:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104e52	kernel.asm	/^ffff800000104e52:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104e54	kernel.asm	/^ffff800000104e54:	01 c8                	add    %ecx,%eax$/;"	l
ffff800000104e56	kernel.asm	/^ffff800000104e56:	83 f8 1e             	cmp    $0x1e,%eax$/;"	l
ffff800000104e59	kernel.asm	/^ffff800000104e59:	7e 25                	jle    ffff800000104e80 <begin_op+0x9f>$/;"	l
ffff800000104e5b	kernel.asm	/^ffff800000104e5b:	48 be e0 71 11 00 00 	movabs $0xffff8000001171e0,%rsi$/;"	l
ffff800000104e62	kernel.asm	/^ffff800000104e62:	80 ff ff $/;"	l
ffff800000104e65	kernel.asm	/^ffff800000104e65:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104e6c	kernel.asm	/^ffff800000104e6c:	80 ff ff $/;"	l
ffff800000104e6f	kernel.asm	/^ffff800000104e6f:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000104e76	kernel.asm	/^ffff800000104e76:	80 ff ff $/;"	l
ffff800000104e79	kernel.asm	/^ffff800000104e79:	ff d0                	callq  *%rax$/;"	l
ffff800000104e7b	kernel.asm	/^ffff800000104e7b:	e9 7b ff ff ff       	jmpq   ffff800000104dfb <begin_op+0x1a>$/;"	l
ffff800000104e80	kernel.asm	/^ffff800000104e80:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104e87	kernel.asm	/^ffff800000104e87:	80 ff ff $/;"	l
ffff800000104e8a	kernel.asm	/^ffff800000104e8a:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104e8d	kernel.asm	/^ffff800000104e8d:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000104e90	kernel.asm	/^ffff800000104e90:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104e97	kernel.asm	/^ffff800000104e97:	80 ff ff $/;"	l
ffff800000104e9a	kernel.asm	/^ffff800000104e9a:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff800000104e9d	kernel.asm	/^ffff800000104e9d:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104ea4	kernel.asm	/^ffff800000104ea4:	80 ff ff $/;"	l
ffff800000104ea7	kernel.asm	/^ffff800000104ea7:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000104eae	kernel.asm	/^ffff800000104eae:	80 ff ff $/;"	l
ffff800000104eb1	kernel.asm	/^ffff800000104eb1:	ff d0                	callq  *%rax$/;"	l
ffff800000104eb3	kernel.asm	/^ffff800000104eb3:	90                   	nop$/;"	l
ffff800000104eb4	kernel.asm	/^ffff800000104eb4:	90                   	nop$/;"	l
ffff800000104eb5	kernel.asm	/^ffff800000104eb5:	5d                   	pop    %rbp$/;"	l
ffff800000104eb6	kernel.asm	/^ffff800000104eb6:	c3                   	retq   $/;"	l
ffff800000104eb7	kernel.asm	/^ffff800000104eb7 <end_op>:$/;"	l
ffff800000104eb7	kernel.asm	/^ffff800000104eb7:	55                   	push   %rbp$/;"	l
ffff800000104eb8	kernel.asm	/^ffff800000104eb8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104ebb	kernel.asm	/^ffff800000104ebb:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104ebf	kernel.asm	/^ffff800000104ebf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104ec6	kernel.asm	/^ffff800000104ec6:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104ecd	kernel.asm	/^ffff800000104ecd:	80 ff ff $/;"	l
ffff800000104ed0	kernel.asm	/^ffff800000104ed0:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000104ed7	kernel.asm	/^ffff800000104ed7:	80 ff ff $/;"	l
ffff800000104eda	kernel.asm	/^ffff800000104eda:	ff d0                	callq  *%rax$/;"	l
ffff800000104edc	kernel.asm	/^ffff800000104edc:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104ee3	kernel.asm	/^ffff800000104ee3:	80 ff ff $/;"	l
ffff800000104ee6	kernel.asm	/^ffff800000104ee6:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104ee9	kernel.asm	/^ffff800000104ee9:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000104eec	kernel.asm	/^ffff800000104eec:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104ef3	kernel.asm	/^ffff800000104ef3:	80 ff ff $/;"	l
ffff800000104ef6	kernel.asm	/^ffff800000104ef6:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff800000104ef9	kernel.asm	/^ffff800000104ef9:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104f00	kernel.asm	/^ffff800000104f00:	80 ff ff $/;"	l
ffff800000104f03	kernel.asm	/^ffff800000104f03:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000104f06	kernel.asm	/^ffff800000104f06:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104f08	kernel.asm	/^ffff800000104f08:	74 16                	je     ffff800000104f20 <end_op+0x69>$/;"	l
ffff800000104f0a	kernel.asm	/^ffff800000104f0a:	48 bf 08 be 10 00 00 	movabs $0xffff80000010be08,%rdi$/;"	l
ffff800000104f11	kernel.asm	/^ffff800000104f11:	80 ff ff $/;"	l
ffff800000104f14	kernel.asm	/^ffff800000104f14:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000104f1b	kernel.asm	/^ffff800000104f1b:	80 ff ff $/;"	l
ffff800000104f1e	kernel.asm	/^ffff800000104f1e:	ff d0                	callq  *%rax$/;"	l
ffff800000104f20	kernel.asm	/^ffff800000104f20:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104f27	kernel.asm	/^ffff800000104f27:	80 ff ff $/;"	l
ffff800000104f2a	kernel.asm	/^ffff800000104f2a:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104f2d	kernel.asm	/^ffff800000104f2d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104f2f	kernel.asm	/^ffff800000104f2f:	75 1a                	jne    ffff800000104f4b <end_op+0x94>$/;"	l
ffff800000104f31	kernel.asm	/^ffff800000104f31:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104f38	kernel.asm	/^ffff800000104f38:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104f3f	kernel.asm	/^ffff800000104f3f:	80 ff ff $/;"	l
ffff800000104f42	kernel.asm	/^ffff800000104f42:	c7 40 74 01 00 00 00 	movl   $0x1,0x74(%rax)$/;"	l
ffff800000104f49	kernel.asm	/^ffff800000104f49:	eb 16                	jmp    ffff800000104f61 <end_op+0xaa>$/;"	l
ffff800000104f4b	kernel.asm	/^ffff800000104f4b:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104f52	kernel.asm	/^ffff800000104f52:	80 ff ff $/;"	l
ffff800000104f55	kernel.asm	/^ffff800000104f55:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000104f5c	kernel.asm	/^ffff800000104f5c:	80 ff ff $/;"	l
ffff800000104f5f	kernel.asm	/^ffff800000104f5f:	ff d0                	callq  *%rax$/;"	l
ffff800000104f61	kernel.asm	/^ffff800000104f61:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104f68	kernel.asm	/^ffff800000104f68:	80 ff ff $/;"	l
ffff800000104f6b	kernel.asm	/^ffff800000104f6b:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000104f72	kernel.asm	/^ffff800000104f72:	80 ff ff $/;"	l
ffff800000104f75	kernel.asm	/^ffff800000104f75:	ff d0                	callq  *%rax$/;"	l
ffff800000104f77	kernel.asm	/^ffff800000104f77:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104f7b	kernel.asm	/^ffff800000104f7b:	74 64                	je     ffff800000104fe1 <end_op+0x12a>$/;"	l
ffff800000104f7d	kernel.asm	/^ffff800000104f7d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104f82	kernel.asm	/^ffff800000104f82:	48 ba ed 50 10 00 00 	movabs $0xffff8000001050ed,%rdx$/;"	l
ffff800000104f89	kernel.asm	/^ffff800000104f89:	80 ff ff $/;"	l
ffff800000104f8c	kernel.asm	/^ffff800000104f8c:	ff d2                	callq  *%rdx$/;"	l
ffff800000104f8e	kernel.asm	/^ffff800000104f8e:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104f95	kernel.asm	/^ffff800000104f95:	80 ff ff $/;"	l
ffff800000104f98	kernel.asm	/^ffff800000104f98:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000104f9f	kernel.asm	/^ffff800000104f9f:	80 ff ff $/;"	l
ffff800000104fa2	kernel.asm	/^ffff800000104fa2:	ff d0                	callq  *%rax$/;"	l
ffff800000104fa4	kernel.asm	/^ffff800000104fa4:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104fab	kernel.asm	/^ffff800000104fab:	80 ff ff $/;"	l
ffff800000104fae	kernel.asm	/^ffff800000104fae:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%rax)$/;"	l
ffff800000104fb5	kernel.asm	/^ffff800000104fb5:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104fbc	kernel.asm	/^ffff800000104fbc:	80 ff ff $/;"	l
ffff800000104fbf	kernel.asm	/^ffff800000104fbf:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000104fc6	kernel.asm	/^ffff800000104fc6:	80 ff ff $/;"	l
ffff800000104fc9	kernel.asm	/^ffff800000104fc9:	ff d0                	callq  *%rax$/;"	l
ffff800000104fcb	kernel.asm	/^ffff800000104fcb:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000104fd2	kernel.asm	/^ffff800000104fd2:	80 ff ff $/;"	l
ffff800000104fd5	kernel.asm	/^ffff800000104fd5:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000104fdc	kernel.asm	/^ffff800000104fdc:	80 ff ff $/;"	l
ffff800000104fdf	kernel.asm	/^ffff800000104fdf:	ff d0                	callq  *%rax$/;"	l
ffff800000104fe1	kernel.asm	/^ffff800000104fe1:	90                   	nop$/;"	l
ffff800000104fe2	kernel.asm	/^ffff800000104fe2:	c9                   	leaveq $/;"	l
ffff800000104fe3	kernel.asm	/^ffff800000104fe3:	c3                   	retq   $/;"	l
ffff800000104fe4	kernel.asm	/^ffff800000104fe4 <write_log>:$/;"	l
ffff800000104fe4	kernel.asm	/^ffff800000104fe4:	55                   	push   %rbp$/;"	l
ffff800000104fe5	kernel.asm	/^ffff800000104fe5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104fe8	kernel.asm	/^ffff800000104fe8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104fec	kernel.asm	/^ffff800000104fec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104ff3	kernel.asm	/^ffff800000104ff3:	e9 dc 00 00 00       	jmpq   ffff8000001050d4 <write_log+0xf0>$/;"	l
ffff800000104ff8	kernel.asm	/^ffff800000104ff8:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000104fff	kernel.asm	/^ffff800000104fff:	80 ff ff $/;"	l
ffff800000105002	kernel.asm	/^ffff800000105002:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000105005	kernel.asm	/^ffff800000105005:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105008	kernel.asm	/^ffff800000105008:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010500a	kernel.asm	/^ffff80000010500a:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010500d	kernel.asm	/^ffff80000010500d:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010500f	kernel.asm	/^ffff80000010500f:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105016	kernel.asm	/^ffff800000105016:	80 ff ff $/;"	l
ffff800000105019	kernel.asm	/^ffff800000105019:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff80000010501c	kernel.asm	/^ffff80000010501c:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010501e	kernel.asm	/^ffff80000010501e:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000105020	kernel.asm	/^ffff800000105020:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000105027	kernel.asm	/^ffff800000105027:	80 ff ff $/;"	l
ffff80000010502a	kernel.asm	/^ffff80000010502a:	ff d0                	callq  *%rax$/;"	l
ffff80000010502c	kernel.asm	/^ffff80000010502c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000105030	kernel.asm	/^ffff800000105030:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105037	kernel.asm	/^ffff800000105037:	80 ff ff $/;"	l
ffff80000010503a	kernel.asm	/^ffff80000010503a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010503d	kernel.asm	/^ffff80000010503d:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105040	kernel.asm	/^ffff800000105040:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000105044	kernel.asm	/^ffff800000105044:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000105048	kernel.asm	/^ffff800000105048:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010504a	kernel.asm	/^ffff80000010504a:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105051	kernel.asm	/^ffff800000105051:	80 ff ff $/;"	l
ffff800000105054	kernel.asm	/^ffff800000105054:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000105057	kernel.asm	/^ffff800000105057:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000105059	kernel.asm	/^ffff800000105059:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010505b	kernel.asm	/^ffff80000010505b:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000105062	kernel.asm	/^ffff800000105062:	80 ff ff $/;"	l
ffff800000105065	kernel.asm	/^ffff800000105065:	ff d0                	callq  *%rax$/;"	l
ffff800000105067	kernel.asm	/^ffff800000105067:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010506b	kernel.asm	/^ffff80000010506b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010506f	kernel.asm	/^ffff80000010506f:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000105076	kernel.asm	/^ffff800000105076:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010507a	kernel.asm	/^ffff80000010507a:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000105080	kernel.asm	/^ffff800000105080:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000105085	kernel.asm	/^ffff800000105085:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000105088	kernel.asm	/^ffff800000105088:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010508b	kernel.asm	/^ffff80000010508b:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000105092	kernel.asm	/^ffff800000105092:	80 ff ff $/;"	l
ffff800000105095	kernel.asm	/^ffff800000105095:	ff d0                	callq  *%rax$/;"	l
ffff800000105097	kernel.asm	/^ffff800000105097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010509b	kernel.asm	/^ffff80000010509b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010509e	kernel.asm	/^ffff80000010509e:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff8000001050a5	kernel.asm	/^ffff8000001050a5:	80 ff ff $/;"	l
ffff8000001050a8	kernel.asm	/^ffff8000001050a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001050aa	kernel.asm	/^ffff8000001050aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001050ae	kernel.asm	/^ffff8000001050ae:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001050b1	kernel.asm	/^ffff8000001050b1:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001050b8	kernel.asm	/^ffff8000001050b8:	80 ff ff $/;"	l
ffff8000001050bb	kernel.asm	/^ffff8000001050bb:	ff d0                	callq  *%rax$/;"	l
ffff8000001050bd	kernel.asm	/^ffff8000001050bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001050c1	kernel.asm	/^ffff8000001050c1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001050c4	kernel.asm	/^ffff8000001050c4:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001050cb	kernel.asm	/^ffff8000001050cb:	80 ff ff $/;"	l
ffff8000001050ce	kernel.asm	/^ffff8000001050ce:	ff d0                	callq  *%rax$/;"	l
ffff8000001050d0	kernel.asm	/^ffff8000001050d0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001050d4	kernel.asm	/^ffff8000001050d4:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff8000001050db	kernel.asm	/^ffff8000001050db:	80 ff ff $/;"	l
ffff8000001050de	kernel.asm	/^ffff8000001050de:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001050e1	kernel.asm	/^ffff8000001050e1:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001050e4	kernel.asm	/^ffff8000001050e4:	0f 8f 0e ff ff ff    	jg     ffff800000104ff8 <write_log+0x14>$/;"	l
ffff8000001050ea	kernel.asm	/^ffff8000001050ea:	90                   	nop$/;"	l
ffff8000001050eb	kernel.asm	/^ffff8000001050eb:	c9                   	leaveq $/;"	l
ffff8000001050ec	kernel.asm	/^ffff8000001050ec:	c3                   	retq   $/;"	l
ffff8000001050ed	kernel.asm	/^ffff8000001050ed <commit>:$/;"	l
ffff8000001050ed	kernel.asm	/^ffff8000001050ed:	55                   	push   %rbp$/;"	l
ffff8000001050ee	kernel.asm	/^ffff8000001050ee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001050f1	kernel.asm	/^ffff8000001050f1:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff8000001050f8	kernel.asm	/^ffff8000001050f8:	80 ff ff $/;"	l
ffff8000001050fb	kernel.asm	/^ffff8000001050fb:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001050fe	kernel.asm	/^ffff8000001050fe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105100	kernel.asm	/^ffff800000105100:	7e 41                	jle    ffff800000105143 <commit+0x56>$/;"	l
ffff800000105102	kernel.asm	/^ffff800000105102:	48 b8 e4 4f 10 00 00 	movabs $0xffff800000104fe4,%rax$/;"	l
ffff800000105109	kernel.asm	/^ffff800000105109:	80 ff ff $/;"	l
ffff80000010510c	kernel.asm	/^ffff80000010510c:	ff d0                	callq  *%rax$/;"	l
ffff80000010510e	kernel.asm	/^ffff80000010510e:	48 b8 de 4c 10 00 00 	movabs $0xffff800000104cde,%rax$/;"	l
ffff800000105115	kernel.asm	/^ffff800000105115:	80 ff ff $/;"	l
ffff800000105118	kernel.asm	/^ffff800000105118:	ff d0                	callq  *%rax$/;"	l
ffff80000010511a	kernel.asm	/^ffff80000010511a:	48 b8 21 4b 10 00 00 	movabs $0xffff800000104b21,%rax$/;"	l
ffff800000105121	kernel.asm	/^ffff800000105121:	80 ff ff $/;"	l
ffff800000105124	kernel.asm	/^ffff800000105124:	ff d0                	callq  *%rax$/;"	l
ffff800000105126	kernel.asm	/^ffff800000105126:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff80000010512d	kernel.asm	/^ffff80000010512d:	80 ff ff $/;"	l
ffff800000105130	kernel.asm	/^ffff800000105130:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff800000105137	kernel.asm	/^ffff800000105137:	48 b8 de 4c 10 00 00 	movabs $0xffff800000104cde,%rax$/;"	l
ffff80000010513e	kernel.asm	/^ffff80000010513e:	80 ff ff $/;"	l
ffff800000105141	kernel.asm	/^ffff800000105141:	ff d0                	callq  *%rax$/;"	l
ffff800000105143	kernel.asm	/^ffff800000105143:	90                   	nop$/;"	l
ffff800000105144	kernel.asm	/^ffff800000105144:	5d                   	pop    %rbp$/;"	l
ffff800000105145	kernel.asm	/^ffff800000105145:	c3                   	retq   $/;"	l
ffff800000105146	kernel.asm	/^ffff800000105146 <log_write>:$/;"	l
ffff800000105146	kernel.asm	/^ffff800000105146:	55                   	push   %rbp$/;"	l
ffff800000105147	kernel.asm	/^ffff800000105147:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010514a	kernel.asm	/^ffff80000010514a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010514e	kernel.asm	/^ffff80000010514e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105152	kernel.asm	/^ffff800000105152:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105159	kernel.asm	/^ffff800000105159:	80 ff ff $/;"	l
ffff80000010515c	kernel.asm	/^ffff80000010515c:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010515f	kernel.asm	/^ffff80000010515f:	83 f8 1d             	cmp    $0x1d,%eax$/;"	l
ffff800000105162	kernel.asm	/^ffff800000105162:	7f 21                	jg     ffff800000105185 <log_write+0x3f>$/;"	l
ffff800000105164	kernel.asm	/^ffff800000105164:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff80000010516b	kernel.asm	/^ffff80000010516b:	80 ff ff $/;"	l
ffff80000010516e	kernel.asm	/^ffff80000010516e:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff800000105171	kernel.asm	/^ffff800000105171:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105178	kernel.asm	/^ffff800000105178:	80 ff ff $/;"	l
ffff80000010517b	kernel.asm	/^ffff80000010517b:	8b 40 6c             	mov    0x6c(%rax),%eax$/;"	l
ffff80000010517e	kernel.asm	/^ffff80000010517e:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000105181	kernel.asm	/^ffff800000105181:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105183	kernel.asm	/^ffff800000105183:	7c 16                	jl     ffff80000010519b <log_write+0x55>$/;"	l
ffff800000105185	kernel.asm	/^ffff800000105185:	48 bf 17 be 10 00 00 	movabs $0xffff80000010be17,%rdi$/;"	l
ffff80000010518c	kernel.asm	/^ffff80000010518c:	80 ff ff $/;"	l
ffff80000010518f	kernel.asm	/^ffff80000010518f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000105196	kernel.asm	/^ffff800000105196:	80 ff ff $/;"	l
ffff800000105199	kernel.asm	/^ffff800000105199:	ff d0                	callq  *%rax$/;"	l
ffff80000010519b	kernel.asm	/^ffff80000010519b:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff8000001051a2	kernel.asm	/^ffff8000001051a2:	80 ff ff $/;"	l
ffff8000001051a5	kernel.asm	/^ffff8000001051a5:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff8000001051a8	kernel.asm	/^ffff8000001051a8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001051aa	kernel.asm	/^ffff8000001051aa:	7f 16                	jg     ffff8000001051c2 <log_write+0x7c>$/;"	l
ffff8000001051ac	kernel.asm	/^ffff8000001051ac:	48 bf 2d be 10 00 00 	movabs $0xffff80000010be2d,%rdi$/;"	l
ffff8000001051b3	kernel.asm	/^ffff8000001051b3:	80 ff ff $/;"	l
ffff8000001051b6	kernel.asm	/^ffff8000001051b6:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001051bd	kernel.asm	/^ffff8000001051bd:	80 ff ff $/;"	l
ffff8000001051c0	kernel.asm	/^ffff8000001051c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001051c2	kernel.asm	/^ffff8000001051c2:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff8000001051c9	kernel.asm	/^ffff8000001051c9:	80 ff ff $/;"	l
ffff8000001051cc	kernel.asm	/^ffff8000001051cc:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001051d3	kernel.asm	/^ffff8000001051d3:	80 ff ff $/;"	l
ffff8000001051d6	kernel.asm	/^ffff8000001051d6:	ff d0                	callq  *%rax$/;"	l
ffff8000001051d8	kernel.asm	/^ffff8000001051d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001051df	kernel.asm	/^ffff8000001051df:	eb 29                	jmp    ffff80000010520a <log_write+0xc4>$/;"	l
ffff8000001051e1	kernel.asm	/^ffff8000001051e1:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff8000001051e8	kernel.asm	/^ffff8000001051e8:	80 ff ff $/;"	l
ffff8000001051eb	kernel.asm	/^ffff8000001051eb:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001051ee	kernel.asm	/^ffff8000001051ee:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001051f1	kernel.asm	/^ffff8000001051f1:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff8000001051f5	kernel.asm	/^ffff8000001051f5:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff8000001051f9	kernel.asm	/^ffff8000001051f9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001051fb	kernel.asm	/^ffff8000001051fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001051ff	kernel.asm	/^ffff8000001051ff:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000105202	kernel.asm	/^ffff800000105202:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105204	kernel.asm	/^ffff800000105204:	74 18                	je     ffff80000010521e <log_write+0xd8>$/;"	l
ffff800000105206	kernel.asm	/^ffff800000105206:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010520a	kernel.asm	/^ffff80000010520a:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105211	kernel.asm	/^ffff800000105211:	80 ff ff $/;"	l
ffff800000105214	kernel.asm	/^ffff800000105214:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000105217	kernel.asm	/^ffff800000105217:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff80000010521a	kernel.asm	/^ffff80000010521a:	7f c5                	jg     ffff8000001051e1 <log_write+0x9b>$/;"	l
ffff80000010521c	kernel.asm	/^ffff80000010521c:	eb 01                	jmp    ffff80000010521f <log_write+0xd9>$/;"	l
ffff80000010521e	kernel.asm	/^ffff80000010521e:	90                   	nop$/;"	l
ffff80000010521f	kernel.asm	/^ffff80000010521f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105223	kernel.asm	/^ffff800000105223:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000105226	kernel.asm	/^ffff800000105226:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000105228	kernel.asm	/^ffff800000105228:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff80000010522f	kernel.asm	/^ffff80000010522f:	80 ff ff $/;"	l
ffff800000105232	kernel.asm	/^ffff800000105232:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000105235	kernel.asm	/^ffff800000105235:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105238	kernel.asm	/^ffff800000105238:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff80000010523c	kernel.asm	/^ffff80000010523c:	89 4c 90 10          	mov    %ecx,0x10(%rax,%rdx,4)$/;"	l
ffff800000105240	kernel.asm	/^ffff800000105240:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105247	kernel.asm	/^ffff800000105247:	80 ff ff $/;"	l
ffff80000010524a	kernel.asm	/^ffff80000010524a:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010524d	kernel.asm	/^ffff80000010524d:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000105250	kernel.asm	/^ffff800000105250:	75 1d                	jne    ffff80000010526f <log_write+0x129>$/;"	l
ffff800000105252	kernel.asm	/^ffff800000105252:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105259	kernel.asm	/^ffff800000105259:	80 ff ff $/;"	l
ffff80000010525c	kernel.asm	/^ffff80000010525c:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010525f	kernel.asm	/^ffff80000010525f:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000105262	kernel.asm	/^ffff800000105262:	48 b8 e0 71 11 00 00 	movabs $0xffff8000001171e0,%rax$/;"	l
ffff800000105269	kernel.asm	/^ffff800000105269:	80 ff ff $/;"	l
ffff80000010526c	kernel.asm	/^ffff80000010526c:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff80000010526f	kernel.asm	/^ffff80000010526f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105273	kernel.asm	/^ffff800000105273:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105275	kernel.asm	/^ffff800000105275:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff800000105278	kernel.asm	/^ffff800000105278:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010527a	kernel.asm	/^ffff80000010527a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010527e	kernel.asm	/^ffff80000010527e:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000105280	kernel.asm	/^ffff800000105280:	48 bf e0 71 11 00 00 	movabs $0xffff8000001171e0,%rdi$/;"	l
ffff800000105287	kernel.asm	/^ffff800000105287:	80 ff ff $/;"	l
ffff80000010528a	kernel.asm	/^ffff80000010528a:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105291	kernel.asm	/^ffff800000105291:	80 ff ff $/;"	l
ffff800000105294	kernel.asm	/^ffff800000105294:	ff d0                	callq  *%rax$/;"	l
ffff800000105296	kernel.asm	/^ffff800000105296:	90                   	nop$/;"	l
ffff800000105297	kernel.asm	/^ffff800000105297:	c9                   	leaveq $/;"	l
ffff800000105298	kernel.asm	/^ffff800000105298:	c3                   	retq   $/;"	l
ffff800000105299	kernel.asm	/^ffff800000105299 <v2p>:$/;"	l
ffff800000105299	kernel.asm	/^ffff800000105299:	55                   	push   %rbp$/;"	l
ffff80000010529a	kernel.asm	/^ffff80000010529a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010529d	kernel.asm	/^ffff80000010529d:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001052a1	kernel.asm	/^ffff8000001052a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001052a5	kernel.asm	/^ffff8000001052a5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001052a9	kernel.asm	/^ffff8000001052a9:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff8000001052b0	kernel.asm	/^ffff8000001052b0:	80 00 00 $/;"	l
ffff8000001052b3	kernel.asm	/^ffff8000001052b3:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001052b6	kernel.asm	/^ffff8000001052b6:	c9                   	leaveq $/;"	l
ffff8000001052b7	kernel.asm	/^ffff8000001052b7:	c3                   	retq   $/;"	l
ffff8000001052b8	kernel.asm	/^ffff8000001052b8 <xchg>:$/;"	l
ffff8000001052b8	kernel.asm	/^ffff8000001052b8:	55                   	push   %rbp$/;"	l
ffff8000001052b9	kernel.asm	/^ffff8000001052b9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001052bc	kernel.asm	/^ffff8000001052bc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001052c0	kernel.asm	/^ffff8000001052c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001052c4	kernel.asm	/^ffff8000001052c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001052c8	kernel.asm	/^ffff8000001052c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001052cc	kernel.asm	/^ffff8000001052cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001052d0	kernel.asm	/^ffff8000001052d0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff8000001052d4	kernel.asm	/^ffff8000001052d4:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff8000001052d7	kernel.asm	/^ffff8000001052d7:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001052da	kernel.asm	/^ffff8000001052da:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001052dd	kernel.asm	/^ffff8000001052dd:	c9                   	leaveq $/;"	l
ffff8000001052de	kernel.asm	/^ffff8000001052de:	c3                   	retq   $/;"	l
ffff8000001052df	kernel.asm	/^ffff8000001052df <main>:$/;"	l
ffff8000001052df	kernel.asm	/^ffff8000001052df:	55                   	push   %rbp$/;"	l
ffff8000001052e0	kernel.asm	/^ffff8000001052e0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001052e3	kernel.asm	/^ffff8000001052e3:	48 b8 35 9a 10 00 00 	movabs $0xffff800000109a35,%rax$/;"	l
ffff8000001052ea	kernel.asm	/^ffff8000001052ea:	80 ff ff $/;"	l
ffff8000001052ed	kernel.asm	/^ffff8000001052ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001052ef	kernel.asm	/^ffff8000001052ef:	48 be 00 00 40 00 00 	movabs $0xffff800000400000,%rsi$/;"	l
ffff8000001052f6	kernel.asm	/^ffff8000001052f6:	80 ff ff $/;"	l
ffff8000001052f9	kernel.asm	/^ffff8000001052f9:	48 bf 00 c0 11 00 00 	movabs $0xffff80000011c000,%rdi$/;"	l
ffff800000105300	kernel.asm	/^ffff800000105300:	80 ff ff $/;"	l
ffff800000105303	kernel.asm	/^ffff800000105303:	48 b8 b9 3e 10 00 00 	movabs $0xffff800000103eb9,%rax$/;"	l
ffff80000010530a	kernel.asm	/^ffff80000010530a:	80 ff ff $/;"	l
ffff80000010530d	kernel.asm	/^ffff80000010530d:	ff d0                	callq  *%rax$/;"	l
ffff80000010530f	kernel.asm	/^ffff80000010530f:	48 b8 0a ad 10 00 00 	movabs $0xffff80000010ad0a,%rax$/;"	l
ffff800000105316	kernel.asm	/^ffff800000105316:	80 ff ff $/;"	l
ffff800000105319	kernel.asm	/^ffff800000105319:	ff d0                	callq  *%rax$/;"	l
ffff80000010531b	kernel.asm	/^ffff80000010531b:	48 b8 e2 58 10 00 00 	movabs $0xffff8000001058e2,%rax$/;"	l
ffff800000105322	kernel.asm	/^ffff800000105322:	80 ff ff $/;"	l
ffff800000105325	kernel.asm	/^ffff800000105325:	ff d0                	callq  *%rax$/;"	l
ffff800000105327	kernel.asm	/^ffff800000105327:	48 b8 1e 44 10 00 00 	movabs $0xffff80000010441e,%rax$/;"	l
ffff80000010532e	kernel.asm	/^ffff80000010532e:	80 ff ff $/;"	l
ffff800000105331	kernel.asm	/^ffff800000105331:	ff d0                	callq  *%rax$/;"	l
ffff800000105333	kernel.asm	/^ffff800000105333:	48 b8 fd 94 10 00 00 	movabs $0xffff8000001094fd,%rax$/;"	l
ffff80000010533a	kernel.asm	/^ffff80000010533a:	80 ff ff $/;"	l
ffff80000010533d	kernel.asm	/^ffff80000010533d:	ff d0                	callq  *%rax$/;"	l
ffff80000010533f	kernel.asm	/^ffff80000010533f:	48 b8 4c a8 10 00 00 	movabs $0xffff80000010a84c,%rax$/;"	l
ffff800000105346	kernel.asm	/^ffff800000105346:	80 ff ff $/;"	l
ffff800000105349	kernel.asm	/^ffff800000105349:	ff d0                	callq  *%rax$/;"	l
ffff80000010534b	kernel.asm	/^ffff80000010534b:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff800000105352	kernel.asm	/^ffff800000105352:	80 ff ff $/;"	l
ffff800000105355	kernel.asm	/^ffff800000105355:	ff d0                	callq  *%rax$/;"	l
ffff800000105357	kernel.asm	/^ffff800000105357:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105359	kernel.asm	/^ffff800000105359:	48 bf 48 be 10 00 00 	movabs $0xffff80000010be48,%rdi$/;"	l
ffff800000105360	kernel.asm	/^ffff800000105360:	80 ff ff $/;"	l
ffff800000105363	kernel.asm	/^ffff800000105363:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105368	kernel.asm	/^ffff800000105368:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010536f	kernel.asm	/^ffff80000010536f:	80 ff ff $/;"	l
ffff800000105372	kernel.asm	/^ffff800000105372:	ff d2                	callq  *%rdx$/;"	l
ffff800000105374	kernel.asm	/^ffff800000105374:	48 b8 88 3d 10 00 00 	movabs $0xffff800000103d88,%rax$/;"	l
ffff80000010537b	kernel.asm	/^ffff80000010537b:	80 ff ff $/;"	l
ffff80000010537e	kernel.asm	/^ffff80000010537e:	ff d0                	callq  *%rax$/;"	l
ffff800000105380	kernel.asm	/^ffff800000105380:	48 b8 bb 13 10 00 00 	movabs $0xffff8000001013bb,%rax$/;"	l
ffff800000105387	kernel.asm	/^ffff800000105387:	80 ff ff $/;"	l
ffff80000010538a	kernel.asm	/^ffff80000010538a:	ff d0                	callq  *%rax$/;"	l
ffff80000010538c	kernel.asm	/^ffff80000010538c:	48 b8 39 9b 10 00 00 	movabs $0xffff800000109b39,%rax$/;"	l
ffff800000105393	kernel.asm	/^ffff800000105393:	80 ff ff $/;"	l
ffff800000105396	kernel.asm	/^ffff800000105396:	ff d0                	callq  *%rax$/;"	l
ffff800000105398	kernel.asm	/^ffff800000105398:	48 b8 09 60 10 00 00 	movabs $0xffff800000106009,%rax$/;"	l
ffff80000010539f	kernel.asm	/^ffff80000010539f:	80 ff ff $/;"	l
ffff8000001053a2	kernel.asm	/^ffff8000001053a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001053a4	kernel.asm	/^ffff8000001053a4:	48 b8 53 01 10 00 00 	movabs $0xffff800000100153,%rax$/;"	l
ffff8000001053ab	kernel.asm	/^ffff8000001053ab:	80 ff ff $/;"	l
ffff8000001053ae	kernel.asm	/^ffff8000001053ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001053b0	kernel.asm	/^ffff8000001053b0:	48 b8 79 1a 10 00 00 	movabs $0xffff800000101a79,%rax$/;"	l
ffff8000001053b7	kernel.asm	/^ffff8000001053b7:	80 ff ff $/;"	l
ffff8000001053ba	kernel.asm	/^ffff8000001053ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001053bc	kernel.asm	/^ffff8000001053bc:	48 b8 03 38 10 00 00 	movabs $0xffff800000103803,%rax$/;"	l
ffff8000001053c3	kernel.asm	/^ffff8000001053c3:	80 ff ff $/;"	l
ffff8000001053c6	kernel.asm	/^ffff8000001053c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001053c8	kernel.asm	/^ffff8000001053c8:	48 b8 bb 54 10 00 00 	movabs $0xffff8000001054bb,%rax$/;"	l
ffff8000001053cf	kernel.asm	/^ffff8000001053cf:	80 ff ff $/;"	l
ffff8000001053d2	kernel.asm	/^ffff8000001053d2:	ff d0                	callq  *%rax$/;"	l
ffff8000001053d4	kernel.asm	/^ffff8000001053d4:	48 be 00 00 00 0e 00 	movabs $0xffff80000e000000,%rsi$/;"	l
ffff8000001053db	kernel.asm	/^ffff8000001053db:	80 ff ff $/;"	l
ffff8000001053de	kernel.asm	/^ffff8000001053de:	48 bf 00 00 40 00 00 	movabs $0xffff800000400000,%rdi$/;"	l
ffff8000001053e5	kernel.asm	/^ffff8000001053e5:	80 ff ff $/;"	l
ffff8000001053e8	kernel.asm	/^ffff8000001053e8:	48 b8 17 3f 10 00 00 	movabs $0xffff800000103f17,%rax$/;"	l
ffff8000001053ef	kernel.asm	/^ffff8000001053ef:	80 ff ff $/;"	l
ffff8000001053f2	kernel.asm	/^ffff8000001053f2:	ff d0                	callq  *%rax$/;"	l
ffff8000001053f4	kernel.asm	/^ffff8000001053f4:	48 b8 a8 61 10 00 00 	movabs $0xffff8000001061a8,%rax$/;"	l
ffff8000001053fb	kernel.asm	/^ffff8000001053fb:	80 ff ff $/;"	l
ffff8000001053fe	kernel.asm	/^ffff8000001053fe:	ff d0                	callq  *%rax$/;"	l
ffff800000105400	kernel.asm	/^ffff800000105400:	48 b8 40 54 10 00 00 	movabs $0xffff800000105440,%rax$/;"	l
ffff800000105407	kernel.asm	/^ffff800000105407:	80 ff ff $/;"	l
ffff80000010540a	kernel.asm	/^ffff80000010540a:	ff d0                	callq  *%rax$/;"	l
ffff80000010540c	kernel.asm	/^ffff80000010540c <mpenter>:$/;"	l
ffff80000010540c	kernel.asm	/^ffff80000010540c:	55                   	push   %rbp$/;"	l
ffff80000010540d	kernel.asm	/^ffff80000010540d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105410	kernel.asm	/^ffff800000105410:	48 b8 0f ae 10 00 00 	movabs $0xffff80000010ae0f,%rax$/;"	l
ffff800000105417	kernel.asm	/^ffff800000105417:	80 ff ff $/;"	l
ffff80000010541a	kernel.asm	/^ffff80000010541a:	ff d0                	callq  *%rax$/;"	l
ffff80000010541c	kernel.asm	/^ffff80000010541c:	48 b8 4c a8 10 00 00 	movabs $0xffff80000010a84c,%rax$/;"	l
ffff800000105423	kernel.asm	/^ffff800000105423:	80 ff ff $/;"	l
ffff800000105426	kernel.asm	/^ffff800000105426:	ff d0                	callq  *%rax$/;"	l
ffff800000105428	kernel.asm	/^ffff800000105428:	48 b8 1e 44 10 00 00 	movabs $0xffff80000010441e,%rax$/;"	l
ffff80000010542f	kernel.asm	/^ffff80000010542f:	80 ff ff $/;"	l
ffff800000105432	kernel.asm	/^ffff800000105432:	ff d0                	callq  *%rax$/;"	l
ffff800000105434	kernel.asm	/^ffff800000105434:	48 b8 40 54 10 00 00 	movabs $0xffff800000105440,%rax$/;"	l
ffff80000010543b	kernel.asm	/^ffff80000010543b:	80 ff ff $/;"	l
ffff80000010543e	kernel.asm	/^ffff80000010543e:	ff d0                	callq  *%rax$/;"	l
ffff800000105440	kernel.asm	/^ffff800000105440 <mpmain>:$/;"	l
ffff800000105440	kernel.asm	/^ffff800000105440:	55                   	push   %rbp$/;"	l
ffff800000105441	kernel.asm	/^ffff800000105441:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105444	kernel.asm	/^ffff800000105444:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff80000010544b	kernel.asm	/^ffff80000010544b:	80 ff ff $/;"	l
ffff80000010544e	kernel.asm	/^ffff80000010544e:	ff d0                	callq  *%rax$/;"	l
ffff800000105450	kernel.asm	/^ffff800000105450:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105452	kernel.asm	/^ffff800000105452:	48 bf 5f be 10 00 00 	movabs $0xffff80000010be5f,%rdi$/;"	l
ffff800000105459	kernel.asm	/^ffff800000105459:	80 ff ff $/;"	l
ffff80000010545c	kernel.asm	/^ffff80000010545c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105461	kernel.asm	/^ffff800000105461:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000105468	kernel.asm	/^ffff800000105468:	80 ff ff $/;"	l
ffff80000010546b	kernel.asm	/^ffff80000010546b:	ff d2                	callq  *%rdx$/;"	l
ffff80000010546d	kernel.asm	/^ffff80000010546d:	48 b8 d5 94 10 00 00 	movabs $0xffff8000001094d5,%rax$/;"	l
ffff800000105474	kernel.asm	/^ffff800000105474:	80 ff ff $/;"	l
ffff800000105477	kernel.asm	/^ffff800000105477:	ff d0                	callq  *%rax$/;"	l
ffff800000105479	kernel.asm	/^ffff800000105479:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010547e	kernel.asm	/^ffff80000010547e:	48 ba d8 a7 10 00 00 	movabs $0xffff80000010a7d8,%rdx$/;"	l
ffff800000105485	kernel.asm	/^ffff800000105485:	80 ff ff $/;"	l
ffff800000105488	kernel.asm	/^ffff800000105488:	ff d2                	callq  *%rdx$/;"	l
ffff80000010548a	kernel.asm	/^ffff80000010548a:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000105491	kernel.asm	/^ffff800000105491:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105495	kernel.asm	/^ffff800000105495:	48 05 e0 00 00 00    	add    $0xe0,%rax$/;"	l
ffff80000010549b	kernel.asm	/^ffff80000010549b:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001054a0	kernel.asm	/^ffff8000001054a0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001054a3	kernel.asm	/^ffff8000001054a3:	48 b8 b8 52 10 00 00 	movabs $0xffff8000001052b8,%rax$/;"	l
ffff8000001054aa	kernel.asm	/^ffff8000001054aa:	80 ff ff $/;"	l
ffff8000001054ad	kernel.asm	/^ffff8000001054ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001054af	kernel.asm	/^ffff8000001054af:	48 b8 ec 69 10 00 00 	movabs $0xffff8000001069ec,%rax$/;"	l
ffff8000001054b6	kernel.asm	/^ffff8000001054b6:	80 ff ff $/;"	l
ffff8000001054b9	kernel.asm	/^ffff8000001054b9:	ff d0                	callq  *%rax$/;"	l
ffff8000001054bb	kernel.asm	/^ffff8000001054bb <startothers>:$/;"	l
ffff8000001054bb	kernel.asm	/^ffff8000001054bb:	55                   	push   %rbp$/;"	l
ffff8000001054bc	kernel.asm	/^ffff8000001054bc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001054bf	kernel.asm	/^ffff8000001054bf:	53                   	push   %rbx$/;"	l
ffff8000001054c0	kernel.asm	/^ffff8000001054c0:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff8000001054c4	kernel.asm	/^ffff8000001054c4:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax$/;"	l
ffff8000001054cb	kernel.asm	/^ffff8000001054cb:	80 ff ff $/;"	l
ffff8000001054ce	kernel.asm	/^ffff8000001054ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff8000001054d2	kernel.asm	/^ffff8000001054d2:	48 b8 72 00 00 00 00 	movabs $0x72,%rax$/;"	l
ffff8000001054d9	kernel.asm	/^ffff8000001054d9:	00 00 00 $/;"	l
ffff8000001054dc	kernel.asm	/^ffff8000001054dc:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001054de	kernel.asm	/^ffff8000001054de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001054e2	kernel.asm	/^ffff8000001054e2:	48 be 94 de 10 00 00 	movabs $0xffff80000010de94,%rsi$/;"	l
ffff8000001054e9	kernel.asm	/^ffff8000001054e9:	80 ff ff $/;"	l
ffff8000001054ec	kernel.asm	/^ffff8000001054ec:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001054ef	kernel.asm	/^ffff8000001054ef:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff8000001054f6	kernel.asm	/^ffff8000001054f6:	80 ff ff $/;"	l
ffff8000001054f9	kernel.asm	/^ffff8000001054f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001054fb	kernel.asm	/^ffff8000001054fb:	48 b8 e0 72 11 00 00 	movabs $0xffff8000001172e0,%rax$/;"	l
ffff800000105502	kernel.asm	/^ffff800000105502:	80 ff ff $/;"	l
ffff800000105505	kernel.asm	/^ffff800000105505:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105509	kernel.asm	/^ffff800000105509:	e9 c2 00 00 00       	jmpq   ffff8000001055d0 <startothers+0x115>$/;"	l
ffff80000010550e	kernel.asm	/^ffff80000010550e:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff800000105515	kernel.asm	/^ffff800000105515:	80 ff ff $/;"	l
ffff800000105518	kernel.asm	/^ffff800000105518:	ff d0                	callq  *%rax$/;"	l
ffff80000010551a	kernel.asm	/^ffff80000010551a:	48 98                	cltq   $/;"	l
ffff80000010551c	kernel.asm	/^ffff80000010551c:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff800000105520	kernel.asm	/^ffff800000105520:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105523	kernel.asm	/^ffff800000105523:	48 c1 e2 05          	shl    $0x5,%rdx$/;"	l
ffff800000105527	kernel.asm	/^ffff800000105527:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010552a	kernel.asm	/^ffff80000010552a:	48 b8 e0 72 11 00 00 	movabs $0xffff8000001172e0,%rax$/;"	l
ffff800000105531	kernel.asm	/^ffff800000105531:	80 ff ff $/;"	l
ffff800000105534	kernel.asm	/^ffff800000105534:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105537	kernel.asm	/^ffff800000105537:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff80000010553b	kernel.asm	/^ffff80000010553b:	0f 84 86 00 00 00    	je     ffff8000001055c7 <startothers+0x10c>$/;"	l
ffff800000105541	kernel.asm	/^ffff800000105541:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff800000105548	kernel.asm	/^ffff800000105548:	80 ff ff $/;"	l
ffff80000010554b	kernel.asm	/^ffff80000010554b:	ff d0                	callq  *%rax$/;"	l
ffff80000010554d	kernel.asm	/^ffff80000010554d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000105551	kernel.asm	/^ffff800000105551:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105555	kernel.asm	/^ffff800000105555:	48 83 e8 04          	sub    $0x4,%rax$/;"	l
ffff800000105559	kernel.asm	/^ffff800000105559:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)$/;"	l
ffff80000010555f	kernel.asm	/^ffff80000010555f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105563	kernel.asm	/^ffff800000105563:	48 8d 58 f8          	lea    -0x8(%rax),%rbx$/;"	l
ffff800000105567	kernel.asm	/^ffff800000105567:	48 bf 49 00 10 00 00 	movabs $0xffff800000100049,%rdi$/;"	l
ffff80000010556e	kernel.asm	/^ffff80000010556e:	80 ff ff $/;"	l
ffff800000105571	kernel.asm	/^ffff800000105571:	48 b8 99 52 10 00 00 	movabs $0xffff800000105299,%rax$/;"	l
ffff800000105578	kernel.asm	/^ffff800000105578:	80 ff ff $/;"	l
ffff80000010557b	kernel.asm	/^ffff80000010557b:	ff d0                	callq  *%rax$/;"	l
ffff80000010557d	kernel.asm	/^ffff80000010557d:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff80000010557f	kernel.asm	/^ffff80000010557f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105583	kernel.asm	/^ffff800000105583:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff800000105587	kernel.asm	/^ffff800000105587:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010558b	kernel.asm	/^ffff80000010558b:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx$/;"	l
ffff800000105592	kernel.asm	/^ffff800000105592:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105595	kernel.asm	/^ffff800000105595:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105599	kernel.asm	/^ffff800000105599:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010559b	kernel.asm	/^ffff80000010559b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010559f	kernel.asm	/^ffff80000010559f:	0f b6 40 01          	movzbl 0x1(%rax),%eax$/;"	l
ffff8000001055a3	kernel.asm	/^ffff8000001055a3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001055a6	kernel.asm	/^ffff8000001055a6:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001055a8	kernel.asm	/^ffff8000001055a8:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001055aa	kernel.asm	/^ffff8000001055aa:	48 b8 f3 46 10 00 00 	movabs $0xffff8000001046f3,%rax$/;"	l
ffff8000001055b1	kernel.asm	/^ffff8000001055b1:	80 ff ff $/;"	l
ffff8000001055b4	kernel.asm	/^ffff8000001055b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001055b6	kernel.asm	/^ffff8000001055b6:	90                   	nop$/;"	l
ffff8000001055b7	kernel.asm	/^ffff8000001055b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001055bb	kernel.asm	/^ffff8000001055bb:	8b 80 e0 00 00 00    	mov    0xe0(%rax),%eax$/;"	l
ffff8000001055c1	kernel.asm	/^ffff8000001055c1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001055c3	kernel.asm	/^ffff8000001055c3:	74 f2                	je     ffff8000001055b7 <startothers+0xfc>$/;"	l
ffff8000001055c5	kernel.asm	/^ffff8000001055c5:	eb 01                	jmp    ffff8000001055c8 <startothers+0x10d>$/;"	l
ffff8000001055c7	kernel.asm	/^ffff8000001055c7:	90                   	nop$/;"	l
ffff8000001055c8	kernel.asm	/^ffff8000001055c8:	48 81 45 e8 f8 00 00 	addq   $0xf8,-0x18(%rbp)$/;"	l
ffff8000001055cf	kernel.asm	/^ffff8000001055cf:	00 $/;"	l
ffff8000001055d0	kernel.asm	/^ffff8000001055d0:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff8000001055d7	kernel.asm	/^ffff8000001055d7:	80 ff ff $/;"	l
ffff8000001055da	kernel.asm	/^ffff8000001055da:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001055dc	kernel.asm	/^ffff8000001055dc:	48 98                	cltq   $/;"	l
ffff8000001055de	kernel.asm	/^ffff8000001055de:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001055e2	kernel.asm	/^ffff8000001055e2:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001055e5	kernel.asm	/^ffff8000001055e5:	48 c1 e2 05          	shl    $0x5,%rdx$/;"	l
ffff8000001055e9	kernel.asm	/^ffff8000001055e9:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff8000001055ec	kernel.asm	/^ffff8000001055ec:	48 b8 e0 72 11 00 00 	movabs $0xffff8000001172e0,%rax$/;"	l
ffff8000001055f3	kernel.asm	/^ffff8000001055f3:	80 ff ff $/;"	l
ffff8000001055f6	kernel.asm	/^ffff8000001055f6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001055f9	kernel.asm	/^ffff8000001055f9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff8000001055fd	kernel.asm	/^ffff8000001055fd:	0f 87 0b ff ff ff    	ja     ffff80000010550e <startothers+0x53>$/;"	l
ffff800000105603	kernel.asm	/^ffff800000105603:	90                   	nop$/;"	l
ffff800000105604	kernel.asm	/^ffff800000105604:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff800000105608	kernel.asm	/^ffff800000105608:	5b                   	pop    %rbx$/;"	l
ffff800000105609	kernel.asm	/^ffff800000105609:	5d                   	pop    %rbp$/;"	l
ffff80000010560a	kernel.asm	/^ffff80000010560a:	c3                   	retq   $/;"	l
ffff80000010560b	kernel.asm	/^ffff80000010560b <inb>:$/;"	l
ffff80000010560b	kernel.asm	/^ffff80000010560b:	55                   	push   %rbp$/;"	l
ffff80000010560c	kernel.asm	/^ffff80000010560c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010560f	kernel.asm	/^ffff80000010560f:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000105613	kernel.asm	/^ffff800000105613:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000105615	kernel.asm	/^ffff800000105615:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000105619	kernel.asm	/^ffff800000105619:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010561d	kernel.asm	/^ffff80000010561d:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010561f	kernel.asm	/^ffff80000010561f:	ec                   	in     (%dx),%al$/;"	l
ffff800000105620	kernel.asm	/^ffff800000105620:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000105623	kernel.asm	/^ffff800000105623:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000105627	kernel.asm	/^ffff800000105627:	c9                   	leaveq $/;"	l
ffff800000105628	kernel.asm	/^ffff800000105628:	c3                   	retq   $/;"	l
ffff800000105629	kernel.asm	/^ffff800000105629 <outb>:$/;"	l
ffff800000105629	kernel.asm	/^ffff800000105629:	55                   	push   %rbp$/;"	l
ffff80000010562a	kernel.asm	/^ffff80000010562a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010562d	kernel.asm	/^ffff80000010562d:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000105631	kernel.asm	/^ffff800000105631:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000105633	kernel.asm	/^ffff800000105633:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000105635	kernel.asm	/^ffff800000105635:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000105639	kernel.asm	/^ffff800000105639:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010563c	kernel.asm	/^ffff80000010563c:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000105640	kernel.asm	/^ffff800000105640:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000105644	kernel.asm	/^ffff800000105644:	ee                   	out    %al,(%dx)$/;"	l
ffff800000105645	kernel.asm	/^ffff800000105645:	90                   	nop$/;"	l
ffff800000105646	kernel.asm	/^ffff800000105646:	c9                   	leaveq $/;"	l
ffff800000105647	kernel.asm	/^ffff800000105647:	c3                   	retq   $/;"	l
ffff800000105648	kernel.asm	/^ffff800000105648 <sum>:$/;"	l
ffff800000105648	kernel.asm	/^ffff800000105648:	55                   	push   %rbp$/;"	l
ffff800000105649	kernel.asm	/^ffff800000105649:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010564c	kernel.asm	/^ffff80000010564c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105650	kernel.asm	/^ffff800000105650:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105654	kernel.asm	/^ffff800000105654:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff800000105657	kernel.asm	/^ffff800000105657:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010565e	kernel.asm	/^ffff80000010565e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105665	kernel.asm	/^ffff800000105665:	eb 1a                	jmp    ffff800000105681 <sum+0x39>$/;"	l
ffff800000105667	kernel.asm	/^ffff800000105667:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010566a	kernel.asm	/^ffff80000010566a:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff80000010566d	kernel.asm	/^ffff80000010566d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105671	kernel.asm	/^ffff800000105671:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105674	kernel.asm	/^ffff800000105674:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105677	kernel.asm	/^ffff800000105677:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010567a	kernel.asm	/^ffff80000010567a:	01 45 f8             	add    %eax,-0x8(%rbp)$/;"	l
ffff80000010567d	kernel.asm	/^ffff80000010567d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105681	kernel.asm	/^ffff800000105681:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105684	kernel.asm	/^ffff800000105684:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff800000105687	kernel.asm	/^ffff800000105687:	7c de                	jl     ffff800000105667 <sum+0x1f>$/;"	l
ffff800000105689	kernel.asm	/^ffff800000105689:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010568c	kernel.asm	/^ffff80000010568c:	c9                   	leaveq $/;"	l
ffff80000010568d	kernel.asm	/^ffff80000010568d:	c3                   	retq   $/;"	l
ffff80000010568e	kernel.asm	/^ffff80000010568e <mpsearch1>:$/;"	l
ffff80000010568e	kernel.asm	/^ffff80000010568e:	55                   	push   %rbp$/;"	l
ffff80000010568f	kernel.asm	/^ffff80000010568f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105692	kernel.asm	/^ffff800000105692:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105696	kernel.asm	/^ffff800000105696:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010569a	kernel.asm	/^ffff80000010569a:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff80000010569d	kernel.asm	/^ffff80000010569d:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff8000001056a4	kernel.asm	/^ffff8000001056a4:	80 ff ff $/;"	l
ffff8000001056a7	kernel.asm	/^ffff8000001056a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001056ab	kernel.asm	/^ffff8000001056ab:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001056ae	kernel.asm	/^ffff8000001056ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001056b2	kernel.asm	/^ffff8000001056b2:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff8000001056b5	kernel.asm	/^ffff8000001056b5:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001056b8	kernel.asm	/^ffff8000001056b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001056bc	kernel.asm	/^ffff8000001056bc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001056bf	kernel.asm	/^ffff8000001056bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001056c3	kernel.asm	/^ffff8000001056c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001056c7	kernel.asm	/^ffff8000001056c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001056cb	kernel.asm	/^ffff8000001056cb:	eb 4d                	jmp    ffff80000010571a <mpsearch1+0x8c>$/;"	l
ffff8000001056cd	kernel.asm	/^ffff8000001056cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001056d1	kernel.asm	/^ffff8000001056d1:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff8000001056d6	kernel.asm	/^ffff8000001056d6:	48 be 70 be 10 00 00 	movabs $0xffff80000010be70,%rsi$/;"	l
ffff8000001056dd	kernel.asm	/^ffff8000001056dd:	80 ff ff $/;"	l
ffff8000001056e0	kernel.asm	/^ffff8000001056e0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001056e3	kernel.asm	/^ffff8000001056e3:	48 b8 f6 76 10 00 00 	movabs $0xffff8000001076f6,%rax$/;"	l
ffff8000001056ea	kernel.asm	/^ffff8000001056ea:	80 ff ff $/;"	l
ffff8000001056ed	kernel.asm	/^ffff8000001056ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001056ef	kernel.asm	/^ffff8000001056ef:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001056f1	kernel.asm	/^ffff8000001056f1:	75 22                	jne    ffff800000105715 <mpsearch1+0x87>$/;"	l
ffff8000001056f3	kernel.asm	/^ffff8000001056f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001056f7	kernel.asm	/^ffff8000001056f7:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff8000001056fc	kernel.asm	/^ffff8000001056fc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001056ff	kernel.asm	/^ffff8000001056ff:	48 b8 48 56 10 00 00 	movabs $0xffff800000105648,%rax$/;"	l
ffff800000105706	kernel.asm	/^ffff800000105706:	80 ff ff $/;"	l
ffff800000105709	kernel.asm	/^ffff800000105709:	ff d0                	callq  *%rax$/;"	l
ffff80000010570b	kernel.asm	/^ffff80000010570b:	84 c0                	test   %al,%al$/;"	l
ffff80000010570d	kernel.asm	/^ffff80000010570d:	75 06                	jne    ffff800000105715 <mpsearch1+0x87>$/;"	l
ffff80000010570f	kernel.asm	/^ffff80000010570f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105713	kernel.asm	/^ffff800000105713:	eb 14                	jmp    ffff800000105729 <mpsearch1+0x9b>$/;"	l
ffff800000105715	kernel.asm	/^ffff800000105715:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)$/;"	l
ffff80000010571a	kernel.asm	/^ffff80000010571a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010571e	kernel.asm	/^ffff80000010571e:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105722	kernel.asm	/^ffff800000105722:	72 a9                	jb     ffff8000001056cd <mpsearch1+0x3f>$/;"	l
ffff800000105724	kernel.asm	/^ffff800000105724:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105729	kernel.asm	/^ffff800000105729:	c9                   	leaveq $/;"	l
ffff80000010572a	kernel.asm	/^ffff80000010572a:	c3                   	retq   $/;"	l
ffff80000010572b	kernel.asm	/^ffff80000010572b <mpsearch>:$/;"	l
ffff80000010572b	kernel.asm	/^ffff80000010572b:	55                   	push   %rbp$/;"	l
ffff80000010572c	kernel.asm	/^ffff80000010572c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010572f	kernel.asm	/^ffff80000010572f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105733	kernel.asm	/^ffff800000105733:	48 b8 00 04 00 00 00 	movabs $0xffff800000000400,%rax$/;"	l
ffff80000010573a	kernel.asm	/^ffff80000010573a:	80 ff ff $/;"	l
ffff80000010573d	kernel.asm	/^ffff80000010573d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105741	kernel.asm	/^ffff800000105741:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105745	kernel.asm	/^ffff800000105745:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ffff800000105749	kernel.asm	/^ffff800000105749:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010574c	kernel.asm	/^ffff80000010574c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010574f	kernel.asm	/^ffff80000010574f:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000105752	kernel.asm	/^ffff800000105752:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105754	kernel.asm	/^ffff800000105754:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105758	kernel.asm	/^ffff800000105758:	48 83 c0 0e          	add    $0xe,%rax$/;"	l
ffff80000010575c	kernel.asm	/^ffff80000010575c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010575f	kernel.asm	/^ffff80000010575f:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105762	kernel.asm	/^ffff800000105762:	09 d0                	or     %edx,%eax$/;"	l
ffff800000105764	kernel.asm	/^ffff800000105764:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000105767	kernel.asm	/^ffff800000105767:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff80000010576a	kernel.asm	/^ffff80000010576a:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff80000010576e	kernel.asm	/^ffff80000010576e:	74 28                	je     ffff800000105798 <mpsearch+0x6d>$/;"	l
ffff800000105770	kernel.asm	/^ffff800000105770:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000105773	kernel.asm	/^ffff800000105773:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff800000105778	kernel.asm	/^ffff800000105778:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010577b	kernel.asm	/^ffff80000010577b:	48 b8 8e 56 10 00 00 	movabs $0xffff80000010568e,%rax$/;"	l
ffff800000105782	kernel.asm	/^ffff800000105782:	80 ff ff $/;"	l
ffff800000105785	kernel.asm	/^ffff800000105785:	ff d0                	callq  *%rax$/;"	l
ffff800000105787	kernel.asm	/^ffff800000105787:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010578b	kernel.asm	/^ffff80000010578b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000105790	kernel.asm	/^ffff800000105790:	74 5e                	je     ffff8000001057f0 <mpsearch+0xc5>$/;"	l
ffff800000105792	kernel.asm	/^ffff800000105792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105796	kernel.asm	/^ffff800000105796:	eb 6e                	jmp    ffff800000105806 <mpsearch+0xdb>$/;"	l
ffff800000105798	kernel.asm	/^ffff800000105798:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010579c	kernel.asm	/^ffff80000010579c:	48 83 c0 14          	add    $0x14,%rax$/;"	l
ffff8000001057a0	kernel.asm	/^ffff8000001057a0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001057a3	kernel.asm	/^ffff8000001057a3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001057a6	kernel.asm	/^ffff8000001057a6:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001057a9	kernel.asm	/^ffff8000001057a9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001057ab	kernel.asm	/^ffff8000001057ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001057af	kernel.asm	/^ffff8000001057af:	48 83 c0 13          	add    $0x13,%rax$/;"	l
ffff8000001057b3	kernel.asm	/^ffff8000001057b3:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001057b6	kernel.asm	/^ffff8000001057b6:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001057b9	kernel.asm	/^ffff8000001057b9:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001057bb	kernel.asm	/^ffff8000001057bb:	c1 e0 0a             	shl    $0xa,%eax$/;"	l
ffff8000001057be	kernel.asm	/^ffff8000001057be:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001057c1	kernel.asm	/^ffff8000001057c1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001057c4	kernel.asm	/^ffff8000001057c4:	2d 00 04 00 00       	sub    $0x400,%eax$/;"	l
ffff8000001057c9	kernel.asm	/^ffff8000001057c9:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001057cb	kernel.asm	/^ffff8000001057cb:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff8000001057d0	kernel.asm	/^ffff8000001057d0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001057d3	kernel.asm	/^ffff8000001057d3:	48 b8 8e 56 10 00 00 	movabs $0xffff80000010568e,%rax$/;"	l
ffff8000001057da	kernel.asm	/^ffff8000001057da:	80 ff ff $/;"	l
ffff8000001057dd	kernel.asm	/^ffff8000001057dd:	ff d0                	callq  *%rax$/;"	l
ffff8000001057df	kernel.asm	/^ffff8000001057df:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001057e3	kernel.asm	/^ffff8000001057e3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff8000001057e8	kernel.asm	/^ffff8000001057e8:	74 06                	je     ffff8000001057f0 <mpsearch+0xc5>$/;"	l
ffff8000001057ea	kernel.asm	/^ffff8000001057ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001057ee	kernel.asm	/^ffff8000001057ee:	eb 16                	jmp    ffff800000105806 <mpsearch+0xdb>$/;"	l
ffff8000001057f0	kernel.asm	/^ffff8000001057f0:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff8000001057f5	kernel.asm	/^ffff8000001057f5:	bf 00 00 0f 00       	mov    $0xf0000,%edi$/;"	l
ffff8000001057fa	kernel.asm	/^ffff8000001057fa:	48 b8 8e 56 10 00 00 	movabs $0xffff80000010568e,%rax$/;"	l
ffff800000105801	kernel.asm	/^ffff800000105801:	80 ff ff $/;"	l
ffff800000105804	kernel.asm	/^ffff800000105804:	ff d0                	callq  *%rax$/;"	l
ffff800000105806	kernel.asm	/^ffff800000105806:	c9                   	leaveq $/;"	l
ffff800000105807	kernel.asm	/^ffff800000105807:	c3                   	retq   $/;"	l
ffff800000105808	kernel.asm	/^ffff800000105808 <mpconfig>:$/;"	l
ffff800000105808	kernel.asm	/^ffff800000105808:	55                   	push   %rbp$/;"	l
ffff800000105809	kernel.asm	/^ffff800000105809:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010580c	kernel.asm	/^ffff80000010580c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105810	kernel.asm	/^ffff800000105810:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105814	kernel.asm	/^ffff800000105814:	48 b8 2b 57 10 00 00 	movabs $0xffff80000010572b,%rax$/;"	l
ffff80000010581b	kernel.asm	/^ffff80000010581b:	80 ff ff $/;"	l
ffff80000010581e	kernel.asm	/^ffff80000010581e:	ff d0                	callq  *%rax$/;"	l
ffff800000105820	kernel.asm	/^ffff800000105820:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105824	kernel.asm	/^ffff800000105824:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105829	kernel.asm	/^ffff800000105829:	74 0b                	je     ffff800000105836 <mpconfig+0x2e>$/;"	l
ffff80000010582b	kernel.asm	/^ffff80000010582b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010582f	kernel.asm	/^ffff80000010582f:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000105832	kernel.asm	/^ffff800000105832:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105834	kernel.asm	/^ffff800000105834:	75 0a                	jne    ffff800000105840 <mpconfig+0x38>$/;"	l
ffff800000105836	kernel.asm	/^ffff800000105836:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010583b	kernel.asm	/^ffff80000010583b:	e9 a0 00 00 00       	jmpq   ffff8000001058e0 <mpconfig+0xd8>$/;"	l
ffff800000105840	kernel.asm	/^ffff800000105840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105844	kernel.asm	/^ffff800000105844:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000105847	kernel.asm	/^ffff800000105847:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105849	kernel.asm	/^ffff800000105849:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff800000105850	kernel.asm	/^ffff800000105850:	80 ff ff $/;"	l
ffff800000105853	kernel.asm	/^ffff800000105853:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105856	kernel.asm	/^ffff800000105856:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010585a	kernel.asm	/^ffff80000010585a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010585e	kernel.asm	/^ffff80000010585e:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff800000105863	kernel.asm	/^ffff800000105863:	48 be 75 be 10 00 00 	movabs $0xffff80000010be75,%rsi$/;"	l
ffff80000010586a	kernel.asm	/^ffff80000010586a:	80 ff ff $/;"	l
ffff80000010586d	kernel.asm	/^ffff80000010586d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105870	kernel.asm	/^ffff800000105870:	48 b8 f6 76 10 00 00 	movabs $0xffff8000001076f6,%rax$/;"	l
ffff800000105877	kernel.asm	/^ffff800000105877:	80 ff ff $/;"	l
ffff80000010587a	kernel.asm	/^ffff80000010587a:	ff d0                	callq  *%rax$/;"	l
ffff80000010587c	kernel.asm	/^ffff80000010587c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010587e	kernel.asm	/^ffff80000010587e:	74 07                	je     ffff800000105887 <mpconfig+0x7f>$/;"	l
ffff800000105880	kernel.asm	/^ffff800000105880:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105885	kernel.asm	/^ffff800000105885:	eb 59                	jmp    ffff8000001058e0 <mpconfig+0xd8>$/;"	l
ffff800000105887	kernel.asm	/^ffff800000105887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010588b	kernel.asm	/^ffff80000010588b:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff80000010588f	kernel.asm	/^ffff80000010588f:	3c 01                	cmp    $0x1,%al$/;"	l
ffff800000105891	kernel.asm	/^ffff800000105891:	74 13                	je     ffff8000001058a6 <mpconfig+0x9e>$/;"	l
ffff800000105893	kernel.asm	/^ffff800000105893:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105897	kernel.asm	/^ffff800000105897:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff80000010589b	kernel.asm	/^ffff80000010589b:	3c 04                	cmp    $0x4,%al$/;"	l
ffff80000010589d	kernel.asm	/^ffff80000010589d:	74 07                	je     ffff8000001058a6 <mpconfig+0x9e>$/;"	l
ffff80000010589f	kernel.asm	/^ffff80000010589f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001058a4	kernel.asm	/^ffff8000001058a4:	eb 3a                	jmp    ffff8000001058e0 <mpconfig+0xd8>$/;"	l
ffff8000001058a6	kernel.asm	/^ffff8000001058a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001058aa	kernel.asm	/^ffff8000001058aa:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff8000001058ae	kernel.asm	/^ffff8000001058ae:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff8000001058b1	kernel.asm	/^ffff8000001058b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001058b5	kernel.asm	/^ffff8000001058b5:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001058b7	kernel.asm	/^ffff8000001058b7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001058ba	kernel.asm	/^ffff8000001058ba:	48 b8 48 56 10 00 00 	movabs $0xffff800000105648,%rax$/;"	l
ffff8000001058c1	kernel.asm	/^ffff8000001058c1:	80 ff ff $/;"	l
ffff8000001058c4	kernel.asm	/^ffff8000001058c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001058c6	kernel.asm	/^ffff8000001058c6:	84 c0                	test   %al,%al$/;"	l
ffff8000001058c8	kernel.asm	/^ffff8000001058c8:	74 07                	je     ffff8000001058d1 <mpconfig+0xc9>$/;"	l
ffff8000001058ca	kernel.asm	/^ffff8000001058ca:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001058cf	kernel.asm	/^ffff8000001058cf:	eb 0f                	jmp    ffff8000001058e0 <mpconfig+0xd8>$/;"	l
ffff8000001058d1	kernel.asm	/^ffff8000001058d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001058d5	kernel.asm	/^ffff8000001058d5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001058d9	kernel.asm	/^ffff8000001058d9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001058dc	kernel.asm	/^ffff8000001058dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001058e0	kernel.asm	/^ffff8000001058e0:	c9                   	leaveq $/;"	l
ffff8000001058e1	kernel.asm	/^ffff8000001058e1:	c3                   	retq   $/;"	l
ffff8000001058e2	kernel.asm	/^ffff8000001058e2 <mpinit>:$/;"	l
ffff8000001058e2	kernel.asm	/^ffff8000001058e2:	55                   	push   %rbp$/;"	l
ffff8000001058e3	kernel.asm	/^ffff8000001058e3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001058e6	kernel.asm	/^ffff8000001058e6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001058ea	kernel.asm	/^ffff8000001058ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff8000001058ee	kernel.asm	/^ffff8000001058ee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001058f1	kernel.asm	/^ffff8000001058f1:	48 b8 08 58 10 00 00 	movabs $0xffff800000105808,%rax$/;"	l
ffff8000001058f8	kernel.asm	/^ffff8000001058f8:	80 ff ff $/;"	l
ffff8000001058fb	kernel.asm	/^ffff8000001058fb:	ff d0                	callq  *%rax$/;"	l
ffff8000001058fd	kernel.asm	/^ffff8000001058fd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000105901	kernel.asm	/^ffff800000105901:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000105906	kernel.asm	/^ffff800000105906:	75 20                	jne    ffff800000105928 <mpinit+0x46>$/;"	l
ffff800000105908	kernel.asm	/^ffff800000105908:	48 bf 7a be 10 00 00 	movabs $0xffff80000010be7a,%rdi$/;"	l
ffff80000010590f	kernel.asm	/^ffff80000010590f:	80 ff ff $/;"	l
ffff800000105912	kernel.asm	/^ffff800000105912:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105917	kernel.asm	/^ffff800000105917:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010591e	kernel.asm	/^ffff80000010591e:	80 ff ff $/;"	l
ffff800000105921	kernel.asm	/^ffff800000105921:	ff d2                	callq  *%rdx$/;"	l
ffff800000105923	kernel.asm	/^ffff800000105923:	e9 bc 01 00 00       	jmpq   ffff800000105ae4 <mpinit+0x202>$/;"	l
ffff800000105928	kernel.asm	/^ffff800000105928:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010592c	kernel.asm	/^ffff80000010592c:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
ffff80000010592f	kernel.asm	/^ffff80000010592f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105931	kernel.asm	/^ffff800000105931:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff800000105938	kernel.asm	/^ffff800000105938:	80 ff ff $/;"	l
ffff80000010593b	kernel.asm	/^ffff80000010593b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010593e	kernel.asm	/^ffff80000010593e:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105941	kernel.asm	/^ffff800000105941:	48 b8 c0 71 11 00 00 	movabs $0xffff8000001171c0,%rax$/;"	l
ffff800000105948	kernel.asm	/^ffff800000105948:	80 ff ff $/;"	l
ffff80000010594b	kernel.asm	/^ffff80000010594b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010594e	kernel.asm	/^ffff80000010594e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105952	kernel.asm	/^ffff800000105952:	48 83 c0 2c          	add    $0x2c,%rax$/;"	l
ffff800000105956	kernel.asm	/^ffff800000105956:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010595a	kernel.asm	/^ffff80000010595a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010595e	kernel.asm	/^ffff80000010595e:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff800000105962	kernel.asm	/^ffff800000105962:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff800000105965	kernel.asm	/^ffff800000105965:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105969	kernel.asm	/^ffff800000105969:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010596c	kernel.asm	/^ffff80000010596c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105970	kernel.asm	/^ffff800000105970:	e9 ec 00 00 00       	jmpq   ffff800000105a61 <mpinit+0x17f>$/;"	l
ffff800000105975	kernel.asm	/^ffff800000105975:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105979	kernel.asm	/^ffff800000105979:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010597c	kernel.asm	/^ffff80000010597c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010597f	kernel.asm	/^ffff80000010597f:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000105982	kernel.asm	/^ffff800000105982:	0f 87 c3 00 00 00    	ja     ffff800000105a4b <mpinit+0x169>$/;"	l
ffff800000105988	kernel.asm	/^ffff800000105988:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010598a	kernel.asm	/^ffff80000010598a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000105991	kernel.asm	/^ffff800000105991:	00 $/;"	l
ffff800000105992	kernel.asm	/^ffff800000105992:	48 b8 d0 be 10 00 00 	movabs $0xffff80000010bed0,%rax$/;"	l
ffff800000105999	kernel.asm	/^ffff800000105999:	80 ff ff $/;"	l
ffff80000010599c	kernel.asm	/^ffff80000010599c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010599f	kernel.asm	/^ffff80000010599f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001059a2	kernel.asm	/^ffff8000001059a2:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001059a4	kernel.asm	/^ffff8000001059a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001059a8	kernel.asm	/^ffff8000001059a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff8000001059ac	kernel.asm	/^ffff8000001059ac:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff8000001059b3	kernel.asm	/^ffff8000001059b3:	80 ff ff $/;"	l
ffff8000001059b6	kernel.asm	/^ffff8000001059b6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001059b8	kernel.asm	/^ffff8000001059b8:	83 f8 07             	cmp    $0x7,%eax$/;"	l
ffff8000001059bb	kernel.asm	/^ffff8000001059bb:	7f 5d                	jg     ffff800000105a1a <mpinit+0x138>$/;"	l
ffff8000001059bd	kernel.asm	/^ffff8000001059bd:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff8000001059c4	kernel.asm	/^ffff8000001059c4:	80 ff ff $/;"	l
ffff8000001059c7	kernel.asm	/^ffff8000001059c7:	8b 10                	mov    (%rax),%edx$/;"	l
ffff8000001059c9	kernel.asm	/^ffff8000001059c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001059cd	kernel.asm	/^ffff8000001059cd:	0f b6 48 01          	movzbl 0x1(%rax),%ecx$/;"	l
ffff8000001059d1	kernel.asm	/^ffff8000001059d1:	48 be e0 72 11 00 00 	movabs $0xffff8000001172e0,%rsi$/;"	l
ffff8000001059d8	kernel.asm	/^ffff8000001059d8:	80 ff ff $/;"	l
ffff8000001059db	kernel.asm	/^ffff8000001059db:	48 63 c2             	movslq %edx,%rax$/;"	l
ffff8000001059de	kernel.asm	/^ffff8000001059de:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001059e1	kernel.asm	/^ffff8000001059e1:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax$/;"	l
ffff8000001059e8	kernel.asm	/^ffff8000001059e8:	00 $/;"	l
ffff8000001059e9	kernel.asm	/^ffff8000001059e9:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001059ec	kernel.asm	/^ffff8000001059ec:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001059ef	kernel.asm	/^ffff8000001059ef:	48 c1 e0 05          	shl    $0x5,%rax$/;"	l
ffff8000001059f3	kernel.asm	/^ffff8000001059f3:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff8000001059f6	kernel.asm	/^ffff8000001059f6:	48 01 f0             	add    %rsi,%rax$/;"	l
ffff8000001059f9	kernel.asm	/^ffff8000001059f9:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff8000001059fd	kernel.asm	/^ffff8000001059fd:	88 08                	mov    %cl,(%rax)$/;"	l
ffff8000001059ff	kernel.asm	/^ffff8000001059ff:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff800000105a06	kernel.asm	/^ffff800000105a06:	80 ff ff $/;"	l
ffff800000105a09	kernel.asm	/^ffff800000105a09:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105a0b	kernel.asm	/^ffff800000105a0b:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000105a0e	kernel.asm	/^ffff800000105a0e:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff800000105a15	kernel.asm	/^ffff800000105a15:	80 ff ff $/;"	l
ffff800000105a18	kernel.asm	/^ffff800000105a18:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000105a1a	kernel.asm	/^ffff800000105a1a:	48 83 45 f8 14       	addq   $0x14,-0x8(%rbp)$/;"	l
ffff800000105a1f	kernel.asm	/^ffff800000105a1f:	eb 40                	jmp    ffff800000105a61 <mpinit+0x17f>$/;"	l
ffff800000105a21	kernel.asm	/^ffff800000105a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a25	kernel.asm	/^ffff800000105a25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000105a29	kernel.asm	/^ffff800000105a29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000105a2d	kernel.asm	/^ffff800000105a2d:	0f b6 50 01          	movzbl 0x1(%rax),%edx$/;"	l
ffff800000105a31	kernel.asm	/^ffff800000105a31:	48 b8 a4 7a 11 00 00 	movabs $0xffff800000117aa4,%rax$/;"	l
ffff800000105a38	kernel.asm	/^ffff800000105a38:	80 ff ff $/;"	l
ffff800000105a3b	kernel.asm	/^ffff800000105a3b:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000105a3d	kernel.asm	/^ffff800000105a3d:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105a42	kernel.asm	/^ffff800000105a42:	eb 1d                	jmp    ffff800000105a61 <mpinit+0x17f>$/;"	l
ffff800000105a44	kernel.asm	/^ffff800000105a44:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105a49	kernel.asm	/^ffff800000105a49:	eb 16                	jmp    ffff800000105a61 <mpinit+0x17f>$/;"	l
ffff800000105a4b	kernel.asm	/^ffff800000105a4b:	48 bf 90 be 10 00 00 	movabs $0xffff80000010be90,%rdi$/;"	l
ffff800000105a52	kernel.asm	/^ffff800000105a52:	80 ff ff $/;"	l
ffff800000105a55	kernel.asm	/^ffff800000105a55:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000105a5c	kernel.asm	/^ffff800000105a5c:	80 ff ff $/;"	l
ffff800000105a5f	kernel.asm	/^ffff800000105a5f:	ff d0                	callq  *%rax$/;"	l
ffff800000105a61	kernel.asm	/^ffff800000105a61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a65	kernel.asm	/^ffff800000105a65:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105a69	kernel.asm	/^ffff800000105a69:	0f 82 06 ff ff ff    	jb     ffff800000105975 <mpinit+0x93>$/;"	l
ffff800000105a6f	kernel.asm	/^ffff800000105a6f:	48 b8 a0 7a 11 00 00 	movabs $0xffff800000117aa0,%rax$/;"	l
ffff800000105a76	kernel.asm	/^ffff800000105a76:	80 ff ff $/;"	l
ffff800000105a79	kernel.asm	/^ffff800000105a79:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105a7b	kernel.asm	/^ffff800000105a7b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105a7d	kernel.asm	/^ffff800000105a7d:	48 bf b1 be 10 00 00 	movabs $0xffff80000010beb1,%rdi$/;"	l
ffff800000105a84	kernel.asm	/^ffff800000105a84:	80 ff ff $/;"	l
ffff800000105a87	kernel.asm	/^ffff800000105a87:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105a8c	kernel.asm	/^ffff800000105a8c:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000105a93	kernel.asm	/^ffff800000105a93:	80 ff ff $/;"	l
ffff800000105a96	kernel.asm	/^ffff800000105a96:	ff d2                	callq  *%rdx$/;"	l
ffff800000105a98	kernel.asm	/^ffff800000105a98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000105a9c	kernel.asm	/^ffff800000105a9c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax$/;"	l
ffff800000105aa0	kernel.asm	/^ffff800000105aa0:	84 c0                	test   %al,%al$/;"	l
ffff800000105aa2	kernel.asm	/^ffff800000105aa2:	74 40                	je     ffff800000105ae4 <mpinit+0x202>$/;"	l
ffff800000105aa4	kernel.asm	/^ffff800000105aa4:	be 70 00 00 00       	mov    $0x70,%esi$/;"	l
ffff800000105aa9	kernel.asm	/^ffff800000105aa9:	bf 22 00 00 00       	mov    $0x22,%edi$/;"	l
ffff800000105aae	kernel.asm	/^ffff800000105aae:	48 b8 29 56 10 00 00 	movabs $0xffff800000105629,%rax$/;"	l
ffff800000105ab5	kernel.asm	/^ffff800000105ab5:	80 ff ff $/;"	l
ffff800000105ab8	kernel.asm	/^ffff800000105ab8:	ff d0                	callq  *%rax$/;"	l
ffff800000105aba	kernel.asm	/^ffff800000105aba:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105abf	kernel.asm	/^ffff800000105abf:	48 b8 0b 56 10 00 00 	movabs $0xffff80000010560b,%rax$/;"	l
ffff800000105ac6	kernel.asm	/^ffff800000105ac6:	80 ff ff $/;"	l
ffff800000105ac9	kernel.asm	/^ffff800000105ac9:	ff d0                	callq  *%rax$/;"	l
ffff800000105acb	kernel.asm	/^ffff800000105acb:	83 c8 01             	or     $0x1,%eax$/;"	l
ffff800000105ace	kernel.asm	/^ffff800000105ace:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105ad1	kernel.asm	/^ffff800000105ad1:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105ad3	kernel.asm	/^ffff800000105ad3:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105ad8	kernel.asm	/^ffff800000105ad8:	48 b8 29 56 10 00 00 	movabs $0xffff800000105629,%rax$/;"	l
ffff800000105adf	kernel.asm	/^ffff800000105adf:	80 ff ff $/;"	l
ffff800000105ae2	kernel.asm	/^ffff800000105ae2:	ff d0                	callq  *%rax$/;"	l
ffff800000105ae4	kernel.asm	/^ffff800000105ae4:	c9                   	leaveq $/;"	l
ffff800000105ae5	kernel.asm	/^ffff800000105ae5:	c3                   	retq   $/;"	l
ffff800000105ae6	kernel.asm	/^ffff800000105ae6 <pipealloc>:$/;"	l
ffff800000105ae6	kernel.asm	/^ffff800000105ae6:	55                   	push   %rbp$/;"	l
ffff800000105ae7	kernel.asm	/^ffff800000105ae7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105aea	kernel.asm	/^ffff800000105aea:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105aee	kernel.asm	/^ffff800000105aee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105af2	kernel.asm	/^ffff800000105af2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105af6	kernel.asm	/^ffff800000105af6:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105afd	kernel.asm	/^ffff800000105afd:	00 $/;"	l
ffff800000105afe	kernel.asm	/^ffff800000105afe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b02	kernel.asm	/^ffff800000105b02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000105b09	kernel.asm	/^ffff800000105b09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b0d	kernel.asm	/^ffff800000105b0d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000105b10	kernel.asm	/^ffff800000105b10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105b14	kernel.asm	/^ffff800000105b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105b17	kernel.asm	/^ffff800000105b17:	48 b8 a0 1a 10 00 00 	movabs $0xffff800000101aa0,%rax$/;"	l
ffff800000105b1e	kernel.asm	/^ffff800000105b1e:	80 ff ff $/;"	l
ffff800000105b21	kernel.asm	/^ffff800000105b21:	ff d0                	callq  *%rax$/;"	l
ffff800000105b23	kernel.asm	/^ffff800000105b23:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105b26	kernel.asm	/^ffff800000105b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105b2a	kernel.asm	/^ffff800000105b2a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105b2d	kernel.asm	/^ffff800000105b2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105b31	kernel.asm	/^ffff800000105b31:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105b34	kernel.asm	/^ffff800000105b34:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105b37	kernel.asm	/^ffff800000105b37:	0f 84 02 01 00 00    	je     ffff800000105c3f <pipealloc+0x159>$/;"	l
ffff800000105b3d	kernel.asm	/^ffff800000105b3d:	48 b8 a0 1a 10 00 00 	movabs $0xffff800000101aa0,%rax$/;"	l
ffff800000105b44	kernel.asm	/^ffff800000105b44:	80 ff ff $/;"	l
ffff800000105b47	kernel.asm	/^ffff800000105b47:	ff d0                	callq  *%rax$/;"	l
ffff800000105b49	kernel.asm	/^ffff800000105b49:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105b4c	kernel.asm	/^ffff800000105b4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b50	kernel.asm	/^ffff800000105b50:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105b53	kernel.asm	/^ffff800000105b53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b57	kernel.asm	/^ffff800000105b57:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105b5a	kernel.asm	/^ffff800000105b5a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105b5d	kernel.asm	/^ffff800000105b5d:	0f 84 dc 00 00 00    	je     ffff800000105c3f <pipealloc+0x159>$/;"	l
ffff800000105b63	kernel.asm	/^ffff800000105b63:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff800000105b6a	kernel.asm	/^ffff800000105b6a:	80 ff ff $/;"	l
ffff800000105b6d	kernel.asm	/^ffff800000105b6d:	ff d0                	callq  *%rax$/;"	l
ffff800000105b6f	kernel.asm	/^ffff800000105b6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105b73	kernel.asm	/^ffff800000105b73:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105b78	kernel.asm	/^ffff800000105b78:	0f 84 c0 00 00 00    	je     ffff800000105c3e <pipealloc+0x158>$/;"	l
ffff800000105b7e	kernel.asm	/^ffff800000105b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105b82	kernel.asm	/^ffff800000105b82:	c7 80 70 02 00 00 01 	movl   $0x1,0x270(%rax)$/;"	l
ffff800000105b89	kernel.asm	/^ffff800000105b89:	00 00 00 $/;"	l
ffff800000105b8c	kernel.asm	/^ffff800000105b8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105b90	kernel.asm	/^ffff800000105b90:	c7 80 74 02 00 00 01 	movl   $0x1,0x274(%rax)$/;"	l
ffff800000105b97	kernel.asm	/^ffff800000105b97:	00 00 00 $/;"	l
ffff800000105b9a	kernel.asm	/^ffff800000105b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105b9e	kernel.asm	/^ffff800000105b9e:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)$/;"	l
ffff800000105ba5	kernel.asm	/^ffff800000105ba5:	00 00 00 $/;"	l
ffff800000105ba8	kernel.asm	/^ffff800000105ba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105bac	kernel.asm	/^ffff800000105bac:	c7 80 68 02 00 00 00 	movl   $0x0,0x268(%rax)$/;"	l
ffff800000105bb3	kernel.asm	/^ffff800000105bb3:	00 00 00 $/;"	l
ffff800000105bb6	kernel.asm	/^ffff800000105bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105bba	kernel.asm	/^ffff800000105bba:	48 be f8 be 10 00 00 	movabs $0xffff80000010bef8,%rsi$/;"	l
ffff800000105bc1	kernel.asm	/^ffff800000105bc1:	80 ff ff $/;"	l
ffff800000105bc4	kernel.asm	/^ffff800000105bc4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105bc7	kernel.asm	/^ffff800000105bc7:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000105bce	kernel.asm	/^ffff800000105bce:	80 ff ff $/;"	l
ffff800000105bd1	kernel.asm	/^ffff800000105bd1:	ff d0                	callq  *%rax$/;"	l
ffff800000105bd3	kernel.asm	/^ffff800000105bd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105bd7	kernel.asm	/^ffff800000105bd7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105bda	kernel.asm	/^ffff800000105bda:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105be0	kernel.asm	/^ffff800000105be0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105be4	kernel.asm	/^ffff800000105be4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105be7	kernel.asm	/^ffff800000105be7:	c6 40 08 01          	movb   $0x1,0x8(%rax)$/;"	l
ffff800000105beb	kernel.asm	/^ffff800000105beb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105bef	kernel.asm	/^ffff800000105bef:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105bf2	kernel.asm	/^ffff800000105bf2:	c6 40 09 00          	movb   $0x0,0x9(%rax)$/;"	l
ffff800000105bf6	kernel.asm	/^ffff800000105bf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105bfa	kernel.asm	/^ffff800000105bfa:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105bfd	kernel.asm	/^ffff800000105bfd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105c01	kernel.asm	/^ffff800000105c01:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105c05	kernel.asm	/^ffff800000105c05:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c09	kernel.asm	/^ffff800000105c09:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c0c	kernel.asm	/^ffff800000105c0c:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105c12	kernel.asm	/^ffff800000105c12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c16	kernel.asm	/^ffff800000105c16:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c19	kernel.asm	/^ffff800000105c19:	c6 40 08 00          	movb   $0x0,0x8(%rax)$/;"	l
ffff800000105c1d	kernel.asm	/^ffff800000105c1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c21	kernel.asm	/^ffff800000105c21:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c24	kernel.asm	/^ffff800000105c24:	c6 40 09 01          	movb   $0x1,0x9(%rax)$/;"	l
ffff800000105c28	kernel.asm	/^ffff800000105c28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c2c	kernel.asm	/^ffff800000105c2c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c2f	kernel.asm	/^ffff800000105c2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105c33	kernel.asm	/^ffff800000105c33:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105c37	kernel.asm	/^ffff800000105c37:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105c3c	kernel.asm	/^ffff800000105c3c:	eb 64                	jmp    ffff800000105ca2 <pipealloc+0x1bc>$/;"	l
ffff800000105c3e	kernel.asm	/^ffff800000105c3e:	90                   	nop$/;"	l
ffff800000105c3f	kernel.asm	/^ffff800000105c3f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105c44	kernel.asm	/^ffff800000105c44:	74 13                	je     ffff800000105c59 <pipealloc+0x173>$/;"	l
ffff800000105c46	kernel.asm	/^ffff800000105c46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c4a	kernel.asm	/^ffff800000105c4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105c4d	kernel.asm	/^ffff800000105c4d:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff800000105c54	kernel.asm	/^ffff800000105c54:	80 ff ff $/;"	l
ffff800000105c57	kernel.asm	/^ffff800000105c57:	ff d0                	callq  *%rax$/;"	l
ffff800000105c59	kernel.asm	/^ffff800000105c59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c5d	kernel.asm	/^ffff800000105c5d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c60	kernel.asm	/^ffff800000105c60:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105c63	kernel.asm	/^ffff800000105c63:	74 16                	je     ffff800000105c7b <pipealloc+0x195>$/;"	l
ffff800000105c65	kernel.asm	/^ffff800000105c65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c69	kernel.asm	/^ffff800000105c69:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c6c	kernel.asm	/^ffff800000105c6c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105c6f	kernel.asm	/^ffff800000105c6f:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff800000105c76	kernel.asm	/^ffff800000105c76:	80 ff ff $/;"	l
ffff800000105c79	kernel.asm	/^ffff800000105c79:	ff d0                	callq  *%rax$/;"	l
ffff800000105c7b	kernel.asm	/^ffff800000105c7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c7f	kernel.asm	/^ffff800000105c7f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c82	kernel.asm	/^ffff800000105c82:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105c85	kernel.asm	/^ffff800000105c85:	74 16                	je     ffff800000105c9d <pipealloc+0x1b7>$/;"	l
ffff800000105c87	kernel.asm	/^ffff800000105c87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c8b	kernel.asm	/^ffff800000105c8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c8e	kernel.asm	/^ffff800000105c8e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105c91	kernel.asm	/^ffff800000105c91:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff800000105c98	kernel.asm	/^ffff800000105c98:	80 ff ff $/;"	l
ffff800000105c9b	kernel.asm	/^ffff800000105c9b:	ff d0                	callq  *%rax$/;"	l
ffff800000105c9d	kernel.asm	/^ffff800000105c9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105ca2	kernel.asm	/^ffff800000105ca2:	c9                   	leaveq $/;"	l
ffff800000105ca3	kernel.asm	/^ffff800000105ca3:	c3                   	retq   $/;"	l
ffff800000105ca4	kernel.asm	/^ffff800000105ca4 <pipeclose>:$/;"	l
ffff800000105ca4	kernel.asm	/^ffff800000105ca4:	55                   	push   %rbp$/;"	l
ffff800000105ca5	kernel.asm	/^ffff800000105ca5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105ca8	kernel.asm	/^ffff800000105ca8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000105cac	kernel.asm	/^ffff800000105cac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000105cb0	kernel.asm	/^ffff800000105cb0:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000105cb3	kernel.asm	/^ffff800000105cb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cb7	kernel.asm	/^ffff800000105cb7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105cba	kernel.asm	/^ffff800000105cba:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000105cc1	kernel.asm	/^ffff800000105cc1:	80 ff ff $/;"	l
ffff800000105cc4	kernel.asm	/^ffff800000105cc4:	ff d0                	callq  *%rax$/;"	l
ffff800000105cc6	kernel.asm	/^ffff800000105cc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff800000105cca	kernel.asm	/^ffff800000105cca:	74 29                	je     ffff800000105cf5 <pipeclose+0x51>$/;"	l
ffff800000105ccc	kernel.asm	/^ffff800000105ccc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cd0	kernel.asm	/^ffff800000105cd0:	c7 80 74 02 00 00 00 	movl   $0x0,0x274(%rax)$/;"	l
ffff800000105cd7	kernel.asm	/^ffff800000105cd7:	00 00 00 $/;"	l
ffff800000105cda	kernel.asm	/^ffff800000105cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cde	kernel.asm	/^ffff800000105cde:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105ce4	kernel.asm	/^ffff800000105ce4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ce7	kernel.asm	/^ffff800000105ce7:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000105cee	kernel.asm	/^ffff800000105cee:	80 ff ff $/;"	l
ffff800000105cf1	kernel.asm	/^ffff800000105cf1:	ff d0                	callq  *%rax$/;"	l
ffff800000105cf3	kernel.asm	/^ffff800000105cf3:	eb 27                	jmp    ffff800000105d1c <pipeclose+0x78>$/;"	l
ffff800000105cf5	kernel.asm	/^ffff800000105cf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cf9	kernel.asm	/^ffff800000105cf9:	c7 80 70 02 00 00 00 	movl   $0x0,0x270(%rax)$/;"	l
ffff800000105d00	kernel.asm	/^ffff800000105d00:	00 00 00 $/;"	l
ffff800000105d03	kernel.asm	/^ffff800000105d03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d07	kernel.asm	/^ffff800000105d07:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000105d0d	kernel.asm	/^ffff800000105d0d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d10	kernel.asm	/^ffff800000105d10:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000105d17	kernel.asm	/^ffff800000105d17:	80 ff ff $/;"	l
ffff800000105d1a	kernel.asm	/^ffff800000105d1a:	ff d0                	callq  *%rax$/;"	l
ffff800000105d1c	kernel.asm	/^ffff800000105d1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d20	kernel.asm	/^ffff800000105d20:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff800000105d26	kernel.asm	/^ffff800000105d26:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105d28	kernel.asm	/^ffff800000105d28:	75 36                	jne    ffff800000105d60 <pipeclose+0xbc>$/;"	l
ffff800000105d2a	kernel.asm	/^ffff800000105d2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d2e	kernel.asm	/^ffff800000105d2e:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff800000105d34	kernel.asm	/^ffff800000105d34:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105d36	kernel.asm	/^ffff800000105d36:	75 28                	jne    ffff800000105d60 <pipeclose+0xbc>$/;"	l
ffff800000105d38	kernel.asm	/^ffff800000105d38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d3c	kernel.asm	/^ffff800000105d3c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d3f	kernel.asm	/^ffff800000105d3f:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105d46	kernel.asm	/^ffff800000105d46:	80 ff ff $/;"	l
ffff800000105d49	kernel.asm	/^ffff800000105d49:	ff d0                	callq  *%rax$/;"	l
ffff800000105d4b	kernel.asm	/^ffff800000105d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d4f	kernel.asm	/^ffff800000105d4f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d52	kernel.asm	/^ffff800000105d52:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff800000105d59	kernel.asm	/^ffff800000105d59:	80 ff ff $/;"	l
ffff800000105d5c	kernel.asm	/^ffff800000105d5c:	ff d0                	callq  *%rax$/;"	l
ffff800000105d5e	kernel.asm	/^ffff800000105d5e:	eb 13                	jmp    ffff800000105d73 <pipeclose+0xcf>$/;"	l
ffff800000105d60	kernel.asm	/^ffff800000105d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d64	kernel.asm	/^ffff800000105d64:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d67	kernel.asm	/^ffff800000105d67:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105d6e	kernel.asm	/^ffff800000105d6e:	80 ff ff $/;"	l
ffff800000105d71	kernel.asm	/^ffff800000105d71:	ff d0                	callq  *%rax$/;"	l
ffff800000105d73	kernel.asm	/^ffff800000105d73:	90                   	nop$/;"	l
ffff800000105d74	kernel.asm	/^ffff800000105d74:	c9                   	leaveq $/;"	l
ffff800000105d75	kernel.asm	/^ffff800000105d75:	c3                   	retq   $/;"	l
ffff800000105d76	kernel.asm	/^ffff800000105d76 <pipewrite>:$/;"	l
ffff800000105d76	kernel.asm	/^ffff800000105d76:	55                   	push   %rbp$/;"	l
ffff800000105d77	kernel.asm	/^ffff800000105d77:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105d7a	kernel.asm	/^ffff800000105d7a:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105d7e	kernel.asm	/^ffff800000105d7e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105d82	kernel.asm	/^ffff800000105d82:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105d86	kernel.asm	/^ffff800000105d86:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000105d89	kernel.asm	/^ffff800000105d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105d8d	kernel.asm	/^ffff800000105d8d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d90	kernel.asm	/^ffff800000105d90:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000105d97	kernel.asm	/^ffff800000105d97:	80 ff ff $/;"	l
ffff800000105d9a	kernel.asm	/^ffff800000105d9a:	ff d0                	callq  *%rax$/;"	l
ffff800000105d9c	kernel.asm	/^ffff800000105d9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105da3	kernel.asm	/^ffff800000105da3:	e9 d4 00 00 00       	jmpq   ffff800000105e7c <pipewrite+0x106>$/;"	l
ffff800000105da8	kernel.asm	/^ffff800000105da8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105dac	kernel.asm	/^ffff800000105dac:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff800000105db2	kernel.asm	/^ffff800000105db2:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105db4	kernel.asm	/^ffff800000105db4:	74 12                	je     ffff800000105dc8 <pipewrite+0x52>$/;"	l
ffff800000105db6	kernel.asm	/^ffff800000105db6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000105dbd	kernel.asm	/^ffff800000105dbd:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105dc1	kernel.asm	/^ffff800000105dc1:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000105dc4	kernel.asm	/^ffff800000105dc4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105dc6	kernel.asm	/^ffff800000105dc6:	74 1d                	je     ffff800000105de5 <pipewrite+0x6f>$/;"	l
ffff800000105dc8	kernel.asm	/^ffff800000105dc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105dcc	kernel.asm	/^ffff800000105dcc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105dcf	kernel.asm	/^ffff800000105dcf:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105dd6	kernel.asm	/^ffff800000105dd6:	80 ff ff $/;"	l
ffff800000105dd9	kernel.asm	/^ffff800000105dd9:	ff d0                	callq  *%rax$/;"	l
ffff800000105ddb	kernel.asm	/^ffff800000105ddb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105de0	kernel.asm	/^ffff800000105de0:	e9 ce 00 00 00       	jmpq   ffff800000105eb3 <pipewrite+0x13d>$/;"	l
ffff800000105de5	kernel.asm	/^ffff800000105de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105de9	kernel.asm	/^ffff800000105de9:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105def	kernel.asm	/^ffff800000105def:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105df2	kernel.asm	/^ffff800000105df2:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000105df9	kernel.asm	/^ffff800000105df9:	80 ff ff $/;"	l
ffff800000105dfc	kernel.asm	/^ffff800000105dfc:	ff d0                	callq  *%rax$/;"	l
ffff800000105dfe	kernel.asm	/^ffff800000105dfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e02	kernel.asm	/^ffff800000105e02:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105e06	kernel.asm	/^ffff800000105e06:	48 81 c2 6c 02 00 00 	add    $0x26c,%rdx$/;"	l
ffff800000105e0d	kernel.asm	/^ffff800000105e0d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000105e10	kernel.asm	/^ffff800000105e10:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000105e13	kernel.asm	/^ffff800000105e13:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000105e1a	kernel.asm	/^ffff800000105e1a:	80 ff ff $/;"	l
ffff800000105e1d	kernel.asm	/^ffff800000105e1d:	ff d0                	callq  *%rax$/;"	l
ffff800000105e1f	kernel.asm	/^ffff800000105e1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e23	kernel.asm	/^ffff800000105e23:	8b 90 6c 02 00 00    	mov    0x26c(%rax),%edx$/;"	l
ffff800000105e29	kernel.asm	/^ffff800000105e29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e2d	kernel.asm	/^ffff800000105e2d:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff800000105e33	kernel.asm	/^ffff800000105e33:	05 00 02 00 00       	add    $0x200,%eax$/;"	l
ffff800000105e38	kernel.asm	/^ffff800000105e38:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105e3a	kernel.asm	/^ffff800000105e3a:	0f 84 68 ff ff ff    	je     ffff800000105da8 <pipewrite+0x32>$/;"	l
ffff800000105e40	kernel.asm	/^ffff800000105e40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e44	kernel.asm	/^ffff800000105e44:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105e4a	kernel.asm	/^ffff800000105e4a:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000105e4d	kernel.asm	/^ffff800000105e4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105e51	kernel.asm	/^ffff800000105e51:	89 8a 6c 02 00 00    	mov    %ecx,0x26c(%rdx)$/;"	l
ffff800000105e57	kernel.asm	/^ffff800000105e57:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000105e5c	kernel.asm	/^ffff800000105e5c:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000105e5e	kernel.asm	/^ffff800000105e5e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105e61	kernel.asm	/^ffff800000105e61:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000105e64	kernel.asm	/^ffff800000105e64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105e68	kernel.asm	/^ffff800000105e68:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105e6b	kernel.asm	/^ffff800000105e6b:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000105e6e	kernel.asm	/^ffff800000105e6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e72	kernel.asm	/^ffff800000105e72:	89 c9                	mov    %ecx,%ecx$/;"	l
ffff800000105e74	kernel.asm	/^ffff800000105e74:	88 54 08 68          	mov    %dl,0x68(%rax,%rcx,1)$/;"	l
ffff800000105e78	kernel.asm	/^ffff800000105e78:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105e7c	kernel.asm	/^ffff800000105e7c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105e7f	kernel.asm	/^ffff800000105e7f:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000105e82	kernel.asm	/^ffff800000105e82:	7c 9b                	jl     ffff800000105e1f <pipewrite+0xa9>$/;"	l
ffff800000105e84	kernel.asm	/^ffff800000105e84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e88	kernel.asm	/^ffff800000105e88:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105e8e	kernel.asm	/^ffff800000105e8e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105e91	kernel.asm	/^ffff800000105e91:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000105e98	kernel.asm	/^ffff800000105e98:	80 ff ff $/;"	l
ffff800000105e9b	kernel.asm	/^ffff800000105e9b:	ff d0                	callq  *%rax$/;"	l
ffff800000105e9d	kernel.asm	/^ffff800000105e9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ea1	kernel.asm	/^ffff800000105ea1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ea4	kernel.asm	/^ffff800000105ea4:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105eab	kernel.asm	/^ffff800000105eab:	80 ff ff $/;"	l
ffff800000105eae	kernel.asm	/^ffff800000105eae:	ff d0                	callq  *%rax$/;"	l
ffff800000105eb0	kernel.asm	/^ffff800000105eb0:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000105eb3	kernel.asm	/^ffff800000105eb3:	c9                   	leaveq $/;"	l
ffff800000105eb4	kernel.asm	/^ffff800000105eb4:	c3                   	retq   $/;"	l
ffff800000105eb5	kernel.asm	/^ffff800000105eb5 <piperead>:$/;"	l
ffff800000105eb5	kernel.asm	/^ffff800000105eb5:	55                   	push   %rbp$/;"	l
ffff800000105eb6	kernel.asm	/^ffff800000105eb6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105eb9	kernel.asm	/^ffff800000105eb9:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105ebd	kernel.asm	/^ffff800000105ebd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105ec1	kernel.asm	/^ffff800000105ec1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105ec5	kernel.asm	/^ffff800000105ec5:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000105ec8	kernel.asm	/^ffff800000105ec8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ecc	kernel.asm	/^ffff800000105ecc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ecf	kernel.asm	/^ffff800000105ecf:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000105ed6	kernel.asm	/^ffff800000105ed6:	80 ff ff $/;"	l
ffff800000105ed9	kernel.asm	/^ffff800000105ed9:	ff d0                	callq  *%rax$/;"	l
ffff800000105edb	kernel.asm	/^ffff800000105edb:	eb 50                	jmp    ffff800000105f2d <piperead+0x78>$/;"	l
ffff800000105edd	kernel.asm	/^ffff800000105edd:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000105ee4	kernel.asm	/^ffff800000105ee4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105ee8	kernel.asm	/^ffff800000105ee8:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000105eeb	kernel.asm	/^ffff800000105eeb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105eed	kernel.asm	/^ffff800000105eed:	74 1d                	je     ffff800000105f0c <piperead+0x57>$/;"	l
ffff800000105eef	kernel.asm	/^ffff800000105eef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ef3	kernel.asm	/^ffff800000105ef3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ef6	kernel.asm	/^ffff800000105ef6:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105efd	kernel.asm	/^ffff800000105efd:	80 ff ff $/;"	l
ffff800000105f00	kernel.asm	/^ffff800000105f00:	ff d0                	callq  *%rax$/;"	l
ffff800000105f02	kernel.asm	/^ffff800000105f02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105f07	kernel.asm	/^ffff800000105f07:	e9 df 00 00 00       	jmpq   ffff800000105feb <piperead+0x136>$/;"	l
ffff800000105f0c	kernel.asm	/^ffff800000105f0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f10	kernel.asm	/^ffff800000105f10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105f14	kernel.asm	/^ffff800000105f14:	48 81 c2 68 02 00 00 	add    $0x268,%rdx$/;"	l
ffff800000105f1b	kernel.asm	/^ffff800000105f1b:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000105f1e	kernel.asm	/^ffff800000105f1e:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000105f21	kernel.asm	/^ffff800000105f21:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000105f28	kernel.asm	/^ffff800000105f28:	80 ff ff $/;"	l
ffff800000105f2b	kernel.asm	/^ffff800000105f2b:	ff d0                	callq  *%rax$/;"	l
ffff800000105f2d	kernel.asm	/^ffff800000105f2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f31	kernel.asm	/^ffff800000105f31:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff800000105f37	kernel.asm	/^ffff800000105f37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f3b	kernel.asm	/^ffff800000105f3b:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105f41	kernel.asm	/^ffff800000105f41:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105f43	kernel.asm	/^ffff800000105f43:	75 0e                	jne    ffff800000105f53 <piperead+0x9e>$/;"	l
ffff800000105f45	kernel.asm	/^ffff800000105f45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f49	kernel.asm	/^ffff800000105f49:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff800000105f4f	kernel.asm	/^ffff800000105f4f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105f51	kernel.asm	/^ffff800000105f51:	75 8a                	jne    ffff800000105edd <piperead+0x28>$/;"	l
ffff800000105f53	kernel.asm	/^ffff800000105f53:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105f5a	kernel.asm	/^ffff800000105f5a:	eb 55                	jmp    ffff800000105fb1 <piperead+0xfc>$/;"	l
ffff800000105f5c	kernel.asm	/^ffff800000105f5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f60	kernel.asm	/^ffff800000105f60:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff800000105f66	kernel.asm	/^ffff800000105f66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f6a	kernel.asm	/^ffff800000105f6a:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105f70	kernel.asm	/^ffff800000105f70:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105f72	kernel.asm	/^ffff800000105f72:	74 47                	je     ffff800000105fbb <piperead+0x106>$/;"	l
ffff800000105f74	kernel.asm	/^ffff800000105f74:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105f77	kernel.asm	/^ffff800000105f77:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000105f7a	kernel.asm	/^ffff800000105f7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105f7e	kernel.asm	/^ffff800000105f7e:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi$/;"	l
ffff800000105f82	kernel.asm	/^ffff800000105f82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f86	kernel.asm	/^ffff800000105f86:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff800000105f8c	kernel.asm	/^ffff800000105f8c:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000105f8f	kernel.asm	/^ffff800000105f8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105f93	kernel.asm	/^ffff800000105f93:	89 8a 68 02 00 00    	mov    %ecx,0x268(%rdx)$/;"	l
ffff800000105f99	kernel.asm	/^ffff800000105f99:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000105f9e	kernel.asm	/^ffff800000105f9e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105fa0	kernel.asm	/^ffff800000105fa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fa4	kernel.asm	/^ffff800000105fa4:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000105fa6	kernel.asm	/^ffff800000105fa6:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000105fab	kernel.asm	/^ffff800000105fab:	88 06                	mov    %al,(%rsi)$/;"	l
ffff800000105fad	kernel.asm	/^ffff800000105fad:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105fb1	kernel.asm	/^ffff800000105fb1:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105fb4	kernel.asm	/^ffff800000105fb4:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000105fb7	kernel.asm	/^ffff800000105fb7:	7c a3                	jl     ffff800000105f5c <piperead+0xa7>$/;"	l
ffff800000105fb9	kernel.asm	/^ffff800000105fb9:	eb 01                	jmp    ffff800000105fbc <piperead+0x107>$/;"	l
ffff800000105fbb	kernel.asm	/^ffff800000105fbb:	90                   	nop$/;"	l
ffff800000105fbc	kernel.asm	/^ffff800000105fbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fc0	kernel.asm	/^ffff800000105fc0:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000105fc6	kernel.asm	/^ffff800000105fc6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105fc9	kernel.asm	/^ffff800000105fc9:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000105fd0	kernel.asm	/^ffff800000105fd0:	80 ff ff $/;"	l
ffff800000105fd3	kernel.asm	/^ffff800000105fd3:	ff d0                	callq  *%rax$/;"	l
ffff800000105fd5	kernel.asm	/^ffff800000105fd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fd9	kernel.asm	/^ffff800000105fd9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105fdc	kernel.asm	/^ffff800000105fdc:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000105fe3	kernel.asm	/^ffff800000105fe3:	80 ff ff $/;"	l
ffff800000105fe6	kernel.asm	/^ffff800000105fe6:	ff d0                	callq  *%rax$/;"	l
ffff800000105fe8	kernel.asm	/^ffff800000105fe8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105feb	kernel.asm	/^ffff800000105feb:	c9                   	leaveq $/;"	l
ffff800000105fec	kernel.asm	/^ffff800000105fec:	c3                   	retq   $/;"	l
ffff800000105fed	kernel.asm	/^ffff800000105fed <readeflags>:$/;"	l
ffff800000105fed	kernel.asm	/^ffff800000105fed:	55                   	push   %rbp$/;"	l
ffff800000105fee	kernel.asm	/^ffff800000105fee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105ff1	kernel.asm	/^ffff800000105ff1:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000105ff5	kernel.asm	/^ffff800000105ff5:	9c                   	pushfq $/;"	l
ffff800000105ff6	kernel.asm	/^ffff800000105ff6:	58                   	pop    %rax$/;"	l
ffff800000105ff7	kernel.asm	/^ffff800000105ff7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105ffb	kernel.asm	/^ffff800000105ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105fff	kernel.asm	/^ffff800000105fff:	c9                   	leaveq $/;"	l
ffff800000106000	kernel.asm	/^ffff800000106000:	c3                   	retq   $/;"	l
ffff800000106001	kernel.asm	/^ffff800000106001 <sti>:$/;"	l
ffff800000106001	kernel.asm	/^ffff800000106001:	55                   	push   %rbp$/;"	l
ffff800000106002	kernel.asm	/^ffff800000106002:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106005	kernel.asm	/^ffff800000106005:	fb                   	sti    $/;"	l
ffff800000106006	kernel.asm	/^ffff800000106006:	90                   	nop$/;"	l
ffff800000106007	kernel.asm	/^ffff800000106007:	5d                   	pop    %rbp$/;"	l
ffff800000106008	kernel.asm	/^ffff800000106008:	c3                   	retq   $/;"	l
ffff800000106009	kernel.asm	/^ffff800000106009 <pinit>:$/;"	l
ffff800000106009	kernel.asm	/^ffff800000106009:	55                   	push   %rbp$/;"	l
ffff80000010600a	kernel.asm	/^ffff80000010600a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010600d	kernel.asm	/^ffff80000010600d:	48 be 00 bf 10 00 00 	movabs $0xffff80000010bf00,%rsi$/;"	l
ffff800000106014	kernel.asm	/^ffff800000106014:	80 ff ff $/;"	l
ffff800000106017	kernel.asm	/^ffff800000106017:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff80000010601e	kernel.asm	/^ffff80000010601e:	80 ff ff $/;"	l
ffff800000106021	kernel.asm	/^ffff800000106021:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff800000106028	kernel.asm	/^ffff800000106028:	80 ff ff $/;"	l
ffff80000010602b	kernel.asm	/^ffff80000010602b:	ff d0                	callq  *%rax$/;"	l
ffff80000010602d	kernel.asm	/^ffff80000010602d:	90                   	nop$/;"	l
ffff80000010602e	kernel.asm	/^ffff80000010602e:	5d                   	pop    %rbp$/;"	l
ffff80000010602f	kernel.asm	/^ffff80000010602f:	c3                   	retq   $/;"	l
ffff800000106030	kernel.asm	/^ffff800000106030 <allocproc>:$/;"	l
ffff800000106030	kernel.asm	/^ffff800000106030:	55                   	push   %rbp$/;"	l
ffff800000106031	kernel.asm	/^ffff800000106031:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106034	kernel.asm	/^ffff800000106034:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106038	kernel.asm	/^ffff800000106038:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff80000010603f	kernel.asm	/^ffff80000010603f:	80 ff ff $/;"	l
ffff800000106042	kernel.asm	/^ffff800000106042:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106049	kernel.asm	/^ffff800000106049:	80 ff ff $/;"	l
ffff80000010604c	kernel.asm	/^ffff80000010604c:	ff d0                	callq  *%rax$/;"	l
ffff80000010604e	kernel.asm	/^ffff80000010604e:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106055	kernel.asm	/^ffff800000106055:	80 ff ff $/;"	l
ffff800000106058	kernel.asm	/^ffff800000106058:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010605c	kernel.asm	/^ffff80000010605c:	eb 13                	jmp    ffff800000106071 <allocproc+0x41>$/;"	l
ffff80000010605e	kernel.asm	/^ffff80000010605e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106062	kernel.asm	/^ffff800000106062:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106065	kernel.asm	/^ffff800000106065:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106067	kernel.asm	/^ffff800000106067:	74 38                	je     ffff8000001060a1 <allocproc+0x71>$/;"	l
ffff800000106069	kernel.asm	/^ffff800000106069:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106070	kernel.asm	/^ffff800000106070:	00 $/;"	l
ffff800000106071	kernel.asm	/^ffff800000106071:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106078	kernel.asm	/^ffff800000106078:	80 ff ff $/;"	l
ffff80000010607b	kernel.asm	/^ffff80000010607b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff80000010607f	kernel.asm	/^ffff80000010607f:	72 dd                	jb     ffff80000010605e <allocproc+0x2e>$/;"	l
ffff800000106081	kernel.asm	/^ffff800000106081:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106088	kernel.asm	/^ffff800000106088:	80 ff ff $/;"	l
ffff80000010608b	kernel.asm	/^ffff80000010608b:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106092	kernel.asm	/^ffff800000106092:	80 ff ff $/;"	l
ffff800000106095	kernel.asm	/^ffff800000106095:	ff d0                	callq  *%rax$/;"	l
ffff800000106097	kernel.asm	/^ffff800000106097:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010609c	kernel.asm	/^ffff80000010609c:	e9 05 01 00 00       	jmpq   ffff8000001061a6 <allocproc+0x176>$/;"	l
ffff8000001060a1	kernel.asm	/^ffff8000001060a1:	90                   	nop$/;"	l
ffff8000001060a2	kernel.asm	/^ffff8000001060a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001060a6	kernel.asm	/^ffff8000001060a6:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)$/;"	l
ffff8000001060ad	kernel.asm	/^ffff8000001060ad:	48 b8 40 d5 10 00 00 	movabs $0xffff80000010d540,%rax$/;"	l
ffff8000001060b4	kernel.asm	/^ffff8000001060b4:	80 ff ff $/;"	l
ffff8000001060b7	kernel.asm	/^ffff8000001060b7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001060b9	kernel.asm	/^ffff8000001060b9:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001060bc	kernel.asm	/^ffff8000001060bc:	48 ba 40 d5 10 00 00 	movabs $0xffff80000010d540,%rdx$/;"	l
ffff8000001060c3	kernel.asm	/^ffff8000001060c3:	80 ff ff $/;"	l
ffff8000001060c6	kernel.asm	/^ffff8000001060c6:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff8000001060c8	kernel.asm	/^ffff8000001060c8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001060cc	kernel.asm	/^ffff8000001060cc:	89 42 1c             	mov    %eax,0x1c(%rdx)$/;"	l
ffff8000001060cf	kernel.asm	/^ffff8000001060cf:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff8000001060d6	kernel.asm	/^ffff8000001060d6:	80 ff ff $/;"	l
ffff8000001060d9	kernel.asm	/^ffff8000001060d9:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001060e0	kernel.asm	/^ffff8000001060e0:	80 ff ff $/;"	l
ffff8000001060e3	kernel.asm	/^ffff8000001060e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001060e5	kernel.asm	/^ffff8000001060e5:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff8000001060ec	kernel.asm	/^ffff8000001060ec:	80 ff ff $/;"	l
ffff8000001060ef	kernel.asm	/^ffff8000001060ef:	ff d0                	callq  *%rax$/;"	l
ffff8000001060f1	kernel.asm	/^ffff8000001060f1:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001060f4	kernel.asm	/^ffff8000001060f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001060f8	kernel.asm	/^ffff8000001060f8:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff8000001060fc	kernel.asm	/^ffff8000001060fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106100	kernel.asm	/^ffff800000106100:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106104	kernel.asm	/^ffff800000106104:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106107	kernel.asm	/^ffff800000106107:	75 15                	jne    ffff80000010611e <allocproc+0xee>$/;"	l
ffff800000106109	kernel.asm	/^ffff800000106109:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010610d	kernel.asm	/^ffff80000010610d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106114	kernel.asm	/^ffff800000106114:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106119	kernel.asm	/^ffff800000106119:	e9 88 00 00 00       	jmpq   ffff8000001061a6 <allocproc+0x176>$/;"	l
ffff80000010611e	kernel.asm	/^ffff80000010611e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106122	kernel.asm	/^ffff800000106122:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106126	kernel.asm	/^ffff800000106126:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff80000010612c	kernel.asm	/^ffff80000010612c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106130	kernel.asm	/^ffff800000106130:	48 81 6d f0 b0 00 00 	subq   $0xb0,-0x10(%rbp)$/;"	l
ffff800000106137	kernel.asm	/^ffff800000106137:	00 $/;"	l
ffff800000106138	kernel.asm	/^ffff800000106138:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010613c	kernel.asm	/^ffff80000010613c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000106140	kernel.asm	/^ffff800000106140:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff800000106144	kernel.asm	/^ffff800000106144:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)$/;"	l
ffff800000106149	kernel.asm	/^ffff800000106149:	48 ba 5b 93 10 00 00 	movabs $0xffff80000010935b,%rdx$/;"	l
ffff800000106150	kernel.asm	/^ffff800000106150:	80 ff ff $/;"	l
ffff800000106153	kernel.asm	/^ffff800000106153:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106157	kernel.asm	/^ffff800000106157:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010615a	kernel.asm	/^ffff80000010615a:	48 83 6d f0 40       	subq   $0x40,-0x10(%rbp)$/;"	l
ffff80000010615f	kernel.asm	/^ffff80000010615f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106163	kernel.asm	/^ffff800000106163:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000106167	kernel.asm	/^ffff800000106167:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff80000010616b	kernel.asm	/^ffff80000010616b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010616f	kernel.asm	/^ffff80000010616f:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106173	kernel.asm	/^ffff800000106173:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff800000106178	kernel.asm	/^ffff800000106178:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010617d	kernel.asm	/^ffff80000010617d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106180	kernel.asm	/^ffff800000106180:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff800000106187	kernel.asm	/^ffff800000106187:	80 ff ff $/;"	l
ffff80000010618a	kernel.asm	/^ffff80000010618a:	ff d0                	callq  *%rax$/;"	l
ffff80000010618c	kernel.asm	/^ffff80000010618c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106190	kernel.asm	/^ffff800000106190:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106194	kernel.asm	/^ffff800000106194:	48 ba 50 6c 10 00 00 	movabs $0xffff800000106c50,%rdx$/;"	l
ffff80000010619b	kernel.asm	/^ffff80000010619b:	80 ff ff $/;"	l
ffff80000010619e	kernel.asm	/^ffff80000010619e:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff8000001061a2	kernel.asm	/^ffff8000001061a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061a6	kernel.asm	/^ffff8000001061a6:	c9                   	leaveq $/;"	l
ffff8000001061a7	kernel.asm	/^ffff8000001061a7:	c3                   	retq   $/;"	l
ffff8000001061a8	kernel.asm	/^ffff8000001061a8 <userinit>:$/;"	l
ffff8000001061a8	kernel.asm	/^ffff8000001061a8:	55                   	push   %rbp$/;"	l
ffff8000001061a9	kernel.asm	/^ffff8000001061a9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001061ac	kernel.asm	/^ffff8000001061ac:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001061b0	kernel.asm	/^ffff8000001061b0:	48 b8 30 60 10 00 00 	movabs $0xffff800000106030,%rax$/;"	l
ffff8000001061b7	kernel.asm	/^ffff8000001061b7:	80 ff ff $/;"	l
ffff8000001061ba	kernel.asm	/^ffff8000001061ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001061bc	kernel.asm	/^ffff8000001061bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001061c0	kernel.asm	/^ffff8000001061c0:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff8000001061c7	kernel.asm	/^ffff8000001061c7:	80 ff ff $/;"	l
ffff8000001061ca	kernel.asm	/^ffff8000001061ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001061ce	kernel.asm	/^ffff8000001061ce:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001061d1	kernel.asm	/^ffff8000001061d1:	48 b8 9b ac 10 00 00 	movabs $0xffff80000010ac9b,%rax$/;"	l
ffff8000001061d8	kernel.asm	/^ffff8000001061d8:	80 ff ff $/;"	l
ffff8000001061db	kernel.asm	/^ffff8000001061db:	ff d0                	callq  *%rax$/;"	l
ffff8000001061dd	kernel.asm	/^ffff8000001061dd:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001061e0	kernel.asm	/^ffff8000001061e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061e4	kernel.asm	/^ffff8000001061e4:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff8000001061e8	kernel.asm	/^ffff8000001061e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061ec	kernel.asm	/^ffff8000001061ec:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001061f0	kernel.asm	/^ffff8000001061f0:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001061f3	kernel.asm	/^ffff8000001061f3:	75 16                	jne    ffff80000010620b <userinit+0x63>$/;"	l
ffff8000001061f5	kernel.asm	/^ffff8000001061f5:	48 bf 07 bf 10 00 00 	movabs $0xffff80000010bf07,%rdi$/;"	l
ffff8000001061fc	kernel.asm	/^ffff8000001061fc:	80 ff ff $/;"	l
ffff8000001061ff	kernel.asm	/^ffff8000001061ff:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106206	kernel.asm	/^ffff800000106206:	80 ff ff $/;"	l
ffff800000106209	kernel.asm	/^ffff800000106209:	ff d0                	callq  *%rax$/;"	l
ffff80000010620b	kernel.asm	/^ffff80000010620b:	48 b8 3c 00 00 00 00 	movabs $0x3c,%rax$/;"	l
ffff800000106212	kernel.asm	/^ffff800000106212:	00 00 00 $/;"	l
ffff800000106215	kernel.asm	/^ffff800000106215:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000106217	kernel.asm	/^ffff800000106217:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010621b	kernel.asm	/^ffff80000010621b:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010621f	kernel.asm	/^ffff80000010621f:	48 be 58 de 10 00 00 	movabs $0xffff80000010de58,%rsi$/;"	l
ffff800000106226	kernel.asm	/^ffff800000106226:	80 ff ff $/;"	l
ffff800000106229	kernel.asm	/^ffff800000106229:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010622c	kernel.asm	/^ffff80000010622c:	48 b8 1b b2 10 00 00 	movabs $0xffff80000010b21b,%rax$/;"	l
ffff800000106233	kernel.asm	/^ffff800000106233:	80 ff ff $/;"	l
ffff800000106236	kernel.asm	/^ffff800000106236:	ff d0                	callq  *%rax$/;"	l
ffff800000106238	kernel.asm	/^ffff800000106238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010623c	kernel.asm	/^ffff80000010623c:	48 c7 00 00 10 00 00 	movq   $0x1000,(%rax)$/;"	l
ffff800000106243	kernel.asm	/^ffff800000106243:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106247	kernel.asm	/^ffff800000106247:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010624b	kernel.asm	/^ffff80000010624b:	ba b0 00 00 00       	mov    $0xb0,%edx$/;"	l
ffff800000106250	kernel.asm	/^ffff800000106250:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000106255	kernel.asm	/^ffff800000106255:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106258	kernel.asm	/^ffff800000106258:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010625f	kernel.asm	/^ffff80000010625f:	80 ff ff $/;"	l
ffff800000106262	kernel.asm	/^ffff800000106262:	ff d0                	callq  *%rax$/;"	l
ffff800000106264	kernel.asm	/^ffff800000106264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106268	kernel.asm	/^ffff800000106268:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010626c	kernel.asm	/^ffff80000010626c:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)$/;"	l
ffff800000106273	kernel.asm	/^ffff800000106273:	2b 00 00 00 $/;"	l
ffff800000106277	kernel.asm	/^ffff800000106277:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010627b	kernel.asm	/^ffff80000010627b:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010627f	kernel.asm	/^ffff80000010627f:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)$/;"	l
ffff800000106286	kernel.asm	/^ffff800000106286:	23 00 00 00 $/;"	l
ffff80000010628a	kernel.asm	/^ffff80000010628a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010628e	kernel.asm	/^ffff80000010628e:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106292	kernel.asm	/^ffff800000106292:	48 c7 80 98 00 00 00 	movq   $0x200,0x98(%rax)$/;"	l
ffff800000106299	kernel.asm	/^ffff800000106299:	00 02 00 00 $/;"	l
ffff80000010629d	kernel.asm	/^ffff80000010629d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062a1	kernel.asm	/^ffff8000001062a1:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001062a5	kernel.asm	/^ffff8000001062a5:	48 c7 80 a0 00 00 00 	movq   $0x1000,0xa0(%rax)$/;"	l
ffff8000001062ac	kernel.asm	/^ffff8000001062ac:	00 10 00 00 $/;"	l
ffff8000001062b0	kernel.asm	/^ffff8000001062b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062b4	kernel.asm	/^ffff8000001062b4:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001062b8	kernel.asm	/^ffff8000001062b8:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)$/;"	l
ffff8000001062bf	kernel.asm	/^ffff8000001062bf:	00 00 00 00 $/;"	l
ffff8000001062c3	kernel.asm	/^ffff8000001062c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062c7	kernel.asm	/^ffff8000001062c7:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001062cb	kernel.asm	/^ffff8000001062cb:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001062d2	kernel.asm	/^ffff8000001062d2:	00 $/;"	l
ffff8000001062d3	kernel.asm	/^ffff8000001062d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062d7	kernel.asm	/^ffff8000001062d7:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff8000001062dd	kernel.asm	/^ffff8000001062dd:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff8000001062e2	kernel.asm	/^ffff8000001062e2:	48 be 20 bf 10 00 00 	movabs $0xffff80000010bf20,%rsi$/;"	l
ffff8000001062e9	kernel.asm	/^ffff8000001062e9:	80 ff ff $/;"	l
ffff8000001062ec	kernel.asm	/^ffff8000001062ec:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001062ef	kernel.asm	/^ffff8000001062ef:	48 b8 18 79 10 00 00 	movabs $0xffff800000107918,%rax$/;"	l
ffff8000001062f6	kernel.asm	/^ffff8000001062f6:	80 ff ff $/;"	l
ffff8000001062f9	kernel.asm	/^ffff8000001062f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001062fb	kernel.asm	/^ffff8000001062fb:	48 bf 29 bf 10 00 00 	movabs $0xffff80000010bf29,%rdi$/;"	l
ffff800000106302	kernel.asm	/^ffff800000106302:	80 ff ff $/;"	l
ffff800000106305	kernel.asm	/^ffff800000106305:	48 b8 ba 36 10 00 00 	movabs $0xffff8000001036ba,%rax$/;"	l
ffff80000010630c	kernel.asm	/^ffff80000010630c:	80 ff ff $/;"	l
ffff80000010630f	kernel.asm	/^ffff80000010630f:	ff d0                	callq  *%rax$/;"	l
ffff800000106311	kernel.asm	/^ffff800000106311:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106314	kernel.asm	/^ffff800000106314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106318	kernel.asm	/^ffff800000106318:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff80000010631f	kernel.asm	/^ffff80000010631f:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106326	kernel.asm	/^ffff800000106326:	80 ff ff $/;"	l
ffff800000106329	kernel.asm	/^ffff800000106329:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106330	kernel.asm	/^ffff800000106330:	80 ff ff $/;"	l
ffff800000106333	kernel.asm	/^ffff800000106333:	ff d0                	callq  *%rax$/;"	l
ffff800000106335	kernel.asm	/^ffff800000106335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106339	kernel.asm	/^ffff800000106339:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106340	kernel.asm	/^ffff800000106340:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106347	kernel.asm	/^ffff800000106347:	80 ff ff $/;"	l
ffff80000010634a	kernel.asm	/^ffff80000010634a:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106351	kernel.asm	/^ffff800000106351:	80 ff ff $/;"	l
ffff800000106354	kernel.asm	/^ffff800000106354:	ff d0                	callq  *%rax$/;"	l
ffff800000106356	kernel.asm	/^ffff800000106356:	90                   	nop$/;"	l
ffff800000106357	kernel.asm	/^ffff800000106357:	c9                   	leaveq $/;"	l
ffff800000106358	kernel.asm	/^ffff800000106358:	c3                   	retq   $/;"	l
ffff800000106359	kernel.asm	/^ffff800000106359 <growproc>:$/;"	l
ffff800000106359	kernel.asm	/^ffff800000106359:	55                   	push   %rbp$/;"	l
ffff80000010635a	kernel.asm	/^ffff80000010635a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010635d	kernel.asm	/^ffff80000010635d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000106361	kernel.asm	/^ffff800000106361:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000106364	kernel.asm	/^ffff800000106364:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010636b	kernel.asm	/^ffff80000010636b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010636f	kernel.asm	/^ffff80000010636f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000106372	kernel.asm	/^ffff800000106372:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106375	kernel.asm	/^ffff800000106375:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000106379	kernel.asm	/^ffff800000106379:	7e 3b                	jle    ffff8000001063b6 <growproc+0x5d>$/;"	l
ffff80000010637b	kernel.asm	/^ffff80000010637b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010637e	kernel.asm	/^ffff80000010637e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000106381	kernel.asm	/^ffff800000106381:	01 c2                	add    %eax,%edx$/;"	l
ffff800000106383	kernel.asm	/^ffff800000106383:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010638a	kernel.asm	/^ffff80000010638a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010638e	kernel.asm	/^ffff80000010638e:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106392	kernel.asm	/^ffff800000106392:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000106395	kernel.asm	/^ffff800000106395:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000106397	kernel.asm	/^ffff800000106397:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010639a	kernel.asm	/^ffff80000010639a:	48 b8 f3 b3 10 00 00 	movabs $0xffff80000010b3f3,%rax$/;"	l
ffff8000001063a1	kernel.asm	/^ffff8000001063a1:	80 ff ff $/;"	l
ffff8000001063a4	kernel.asm	/^ffff8000001063a4:	ff d0                	callq  *%rax$/;"	l
ffff8000001063a6	kernel.asm	/^ffff8000001063a6:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001063a9	kernel.asm	/^ffff8000001063a9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001063ad	kernel.asm	/^ffff8000001063ad:	75 4b                	jne    ffff8000001063fa <growproc+0xa1>$/;"	l
ffff8000001063af	kernel.asm	/^ffff8000001063af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001063b4	kernel.asm	/^ffff8000001063b4:	eb 74                	jmp    ffff80000010642a <growproc+0xd1>$/;"	l
ffff8000001063b6	kernel.asm	/^ffff8000001063b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001063ba	kernel.asm	/^ffff8000001063ba:	79 3e                	jns    ffff8000001063fa <growproc+0xa1>$/;"	l
ffff8000001063bc	kernel.asm	/^ffff8000001063bc:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff8000001063bf	kernel.asm	/^ffff8000001063bf:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001063c2	kernel.asm	/^ffff8000001063c2:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001063c4	kernel.asm	/^ffff8000001063c4:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001063c6	kernel.asm	/^ffff8000001063c6:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff8000001063c9	kernel.asm	/^ffff8000001063c9:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001063d0	kernel.asm	/^ffff8000001063d0:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001063d4	kernel.asm	/^ffff8000001063d4:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001063d8	kernel.asm	/^ffff8000001063d8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001063db	kernel.asm	/^ffff8000001063db:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001063de	kernel.asm	/^ffff8000001063de:	48 b8 47 b5 10 00 00 	movabs $0xffff80000010b547,%rax$/;"	l
ffff8000001063e5	kernel.asm	/^ffff8000001063e5:	80 ff ff $/;"	l
ffff8000001063e8	kernel.asm	/^ffff8000001063e8:	ff d0                	callq  *%rax$/;"	l
ffff8000001063ea	kernel.asm	/^ffff8000001063ea:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001063ed	kernel.asm	/^ffff8000001063ed:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001063f1	kernel.asm	/^ffff8000001063f1:	75 07                	jne    ffff8000001063fa <growproc+0xa1>$/;"	l
ffff8000001063f3	kernel.asm	/^ffff8000001063f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001063f8	kernel.asm	/^ffff8000001063f8:	eb 30                	jmp    ffff80000010642a <growproc+0xd1>$/;"	l
ffff8000001063fa	kernel.asm	/^ffff8000001063fa:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106401	kernel.asm	/^ffff800000106401:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106405	kernel.asm	/^ffff800000106405:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106408	kernel.asm	/^ffff800000106408:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010640b	kernel.asm	/^ffff80000010640b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106412	kernel.asm	/^ffff800000106412:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106416	kernel.asm	/^ffff800000106416:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106419	kernel.asm	/^ffff800000106419:	48 b8 41 ae 10 00 00 	movabs $0xffff80000010ae41,%rax$/;"	l
ffff800000106420	kernel.asm	/^ffff800000106420:	80 ff ff $/;"	l
ffff800000106423	kernel.asm	/^ffff800000106423:	ff d0                	callq  *%rax$/;"	l
ffff800000106425	kernel.asm	/^ffff800000106425:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010642a	kernel.asm	/^ffff80000010642a:	c9                   	leaveq $/;"	l
ffff80000010642b	kernel.asm	/^ffff80000010642b:	c3                   	retq   $/;"	l
ffff80000010642c	kernel.asm	/^ffff80000010642c <fork>:$/;"	l
ffff80000010642c	kernel.asm	/^ffff80000010642c:	55                   	push   %rbp$/;"	l
ffff80000010642d	kernel.asm	/^ffff80000010642d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106430	kernel.asm	/^ffff800000106430:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000106434	kernel.asm	/^ffff800000106434:	48 b8 30 60 10 00 00 	movabs $0xffff800000106030,%rax$/;"	l
ffff80000010643b	kernel.asm	/^ffff80000010643b:	80 ff ff $/;"	l
ffff80000010643e	kernel.asm	/^ffff80000010643e:	ff d0                	callq  *%rax$/;"	l
ffff800000106440	kernel.asm	/^ffff800000106440:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106444	kernel.asm	/^ffff800000106444:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000106449	kernel.asm	/^ffff800000106449:	75 0a                	jne    ffff800000106455 <fork+0x29>$/;"	l
ffff80000010644b	kernel.asm	/^ffff80000010644b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106450	kernel.asm	/^ffff800000106450:	e9 f6 01 00 00       	jmpq   ffff80000010664b <fork+0x21f>$/;"	l
ffff800000106455	kernel.asm	/^ffff800000106455:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010645c	kernel.asm	/^ffff80000010645c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106460	kernel.asm	/^ffff800000106460:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000106463	kernel.asm	/^ffff800000106463:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000106465	kernel.asm	/^ffff800000106465:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010646c	kernel.asm	/^ffff80000010646c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106470	kernel.asm	/^ffff800000106470:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106474	kernel.asm	/^ffff800000106474:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000106476	kernel.asm	/^ffff800000106476:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106479	kernel.asm	/^ffff800000106479:	48 b8 d9 b8 10 00 00 	movabs $0xffff80000010b8d9,%rax$/;"	l
ffff800000106480	kernel.asm	/^ffff800000106480:	80 ff ff $/;"	l
ffff800000106483	kernel.asm	/^ffff800000106483:	ff d0                	callq  *%rax$/;"	l
ffff800000106485	kernel.asm	/^ffff800000106485:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106488	kernel.asm	/^ffff800000106488:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010648c	kernel.asm	/^ffff80000010648c:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000106490	kernel.asm	/^ffff800000106490:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106494	kernel.asm	/^ffff800000106494:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106498	kernel.asm	/^ffff800000106498:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010649b	kernel.asm	/^ffff80000010649b:	75 38                	jne    ffff8000001064d5 <fork+0xa9>$/;"	l
ffff80000010649d	kernel.asm	/^ffff80000010649d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001064a1	kernel.asm	/^ffff8000001064a1:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff8000001064a5	kernel.asm	/^ffff8000001064a5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001064a8	kernel.asm	/^ffff8000001064a8:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff8000001064af	kernel.asm	/^ffff8000001064af:	80 ff ff $/;"	l
ffff8000001064b2	kernel.asm	/^ffff8000001064b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001064b4	kernel.asm	/^ffff8000001064b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001064b8	kernel.asm	/^ffff8000001064b8:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001064bf	kernel.asm	/^ffff8000001064bf:	00 $/;"	l
ffff8000001064c0	kernel.asm	/^ffff8000001064c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001064c4	kernel.asm	/^ffff8000001064c4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff8000001064cb	kernel.asm	/^ffff8000001064cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001064d0	kernel.asm	/^ffff8000001064d0:	e9 76 01 00 00       	jmpq   ffff80000010664b <fork+0x21f>$/;"	l
ffff8000001064d5	kernel.asm	/^ffff8000001064d5:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001064dc	kernel.asm	/^ffff8000001064dc:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001064e0	kernel.asm	/^ffff8000001064e0:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff8000001064e3	kernel.asm	/^ffff8000001064e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001064e7	kernel.asm	/^ffff8000001064e7:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001064ea	kernel.asm	/^ffff8000001064ea:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001064f1	kernel.asm	/^ffff8000001064f1:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff8000001064f5	kernel.asm	/^ffff8000001064f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001064f9	kernel.asm	/^ffff8000001064f9:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff8000001064fd	kernel.asm	/^ffff8000001064fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106501	kernel.asm	/^ffff800000106501:	48 8b 50 28          	mov    0x28(%rax),%rdx$/;"	l
ffff800000106505	kernel.asm	/^ffff800000106505:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010650c	kernel.asm	/^ffff80000010650c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106510	kernel.asm	/^ffff800000106510:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106514	kernel.asm	/^ffff800000106514:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106517	kernel.asm	/^ffff800000106517:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
ffff80000010651c	kernel.asm	/^ffff80000010651c:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff80000010651f	kernel.asm	/^ffff80000010651f:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff800000106522	kernel.asm	/^ffff800000106522:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)$/;"	l
ffff800000106525	kernel.asm	/^ffff800000106525:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106529	kernel.asm	/^ffff800000106529:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010652d	kernel.asm	/^ffff80000010652d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000106534	kernel.asm	/^ffff800000106534:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010653b	kernel.asm	/^ffff80000010653b:	eb 62                	jmp    ffff80000010659f <fork+0x173>$/;"	l
ffff80000010653d	kernel.asm	/^ffff80000010653d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106544	kernel.asm	/^ffff800000106544:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106548	kernel.asm	/^ffff800000106548:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010654b	kernel.asm	/^ffff80000010654b:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010654e	kernel.asm	/^ffff80000010654e:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106552	kernel.asm	/^ffff800000106552:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106557	kernel.asm	/^ffff800000106557:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010655a	kernel.asm	/^ffff80000010655a:	74 3f                	je     ffff80000010659b <fork+0x16f>$/;"	l
ffff80000010655c	kernel.asm	/^ffff80000010655c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106563	kernel.asm	/^ffff800000106563:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106567	kernel.asm	/^ffff800000106567:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010656a	kernel.asm	/^ffff80000010656a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010656d	kernel.asm	/^ffff80000010656d:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106571	kernel.asm	/^ffff800000106571:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106576	kernel.asm	/^ffff800000106576:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106579	kernel.asm	/^ffff800000106579:	48 b8 32 1b 10 00 00 	movabs $0xffff800000101b32,%rax$/;"	l
ffff800000106580	kernel.asm	/^ffff800000106580:	80 ff ff $/;"	l
ffff800000106583	kernel.asm	/^ffff800000106583:	ff d0                	callq  *%rax$/;"	l
ffff800000106585	kernel.asm	/^ffff800000106585:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff800000106588	kernel.asm	/^ffff800000106588:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010658c	kernel.asm	/^ffff80000010658c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010658f	kernel.asm	/^ffff80000010658f:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000106592	kernel.asm	/^ffff800000106592:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106596	kernel.asm	/^ffff800000106596:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
ffff80000010659b	kernel.asm	/^ffff80000010659b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010659f	kernel.asm	/^ffff80000010659f:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff8000001065a3	kernel.asm	/^ffff8000001065a3:	7e 98                	jle    ffff80000010653d <fork+0x111>$/;"	l
ffff8000001065a5	kernel.asm	/^ffff8000001065a5:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065ac	kernel.asm	/^ffff8000001065ac:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065b0	kernel.asm	/^ffff8000001065b0:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff8000001065b7	kernel.asm	/^ffff8000001065b7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001065ba	kernel.asm	/^ffff8000001065ba:	48 b8 7b 27 10 00 00 	movabs $0xffff80000010277b,%rax$/;"	l
ffff8000001065c1	kernel.asm	/^ffff8000001065c1:	80 ff ff $/;"	l
ffff8000001065c4	kernel.asm	/^ffff8000001065c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001065c6	kernel.asm	/^ffff8000001065c6:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001065c9	kernel.asm	/^ffff8000001065c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001065cd	kernel.asm	/^ffff8000001065cd:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff8000001065d4	kernel.asm	/^ffff8000001065d4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065db	kernel.asm	/^ffff8000001065db:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065df	kernel.asm	/^ffff8000001065df:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff8000001065e6	kernel.asm	/^ffff8000001065e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001065ea	kernel.asm	/^ffff8000001065ea:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff8000001065f0	kernel.asm	/^ffff8000001065f0:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff8000001065f5	kernel.asm	/^ffff8000001065f5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001065f8	kernel.asm	/^ffff8000001065f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001065fb	kernel.asm	/^ffff8000001065fb:	48 b8 18 79 10 00 00 	movabs $0xffff800000107918,%rax$/;"	l
ffff800000106602	kernel.asm	/^ffff800000106602:	80 ff ff $/;"	l
ffff800000106605	kernel.asm	/^ffff800000106605:	ff d0                	callq  *%rax$/;"	l
ffff800000106607	kernel.asm	/^ffff800000106607:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010660b	kernel.asm	/^ffff80000010660b:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff80000010660e	kernel.asm	/^ffff80000010660e:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000106611	kernel.asm	/^ffff800000106611:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106618	kernel.asm	/^ffff800000106618:	80 ff ff $/;"	l
ffff80000010661b	kernel.asm	/^ffff80000010661b:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106622	kernel.asm	/^ffff800000106622:	80 ff ff $/;"	l
ffff800000106625	kernel.asm	/^ffff800000106625:	ff d0                	callq  *%rax$/;"	l
ffff800000106627	kernel.asm	/^ffff800000106627:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010662b	kernel.asm	/^ffff80000010662b:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106632	kernel.asm	/^ffff800000106632:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106639	kernel.asm	/^ffff800000106639:	80 ff ff $/;"	l
ffff80000010663c	kernel.asm	/^ffff80000010663c:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106643	kernel.asm	/^ffff800000106643:	80 ff ff $/;"	l
ffff800000106646	kernel.asm	/^ffff800000106646:	ff d0                	callq  *%rax$/;"	l
ffff800000106648	kernel.asm	/^ffff800000106648:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010664b	kernel.asm	/^ffff80000010664b:	c9                   	leaveq $/;"	l
ffff80000010664c	kernel.asm	/^ffff80000010664c:	c3                   	retq   $/;"	l
ffff80000010664d	kernel.asm	/^ffff80000010664d <exit>:$/;"	l
ffff80000010664d	kernel.asm	/^ffff80000010664d:	55                   	push   %rbp$/;"	l
ffff80000010664e	kernel.asm	/^ffff80000010664e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106651	kernel.asm	/^ffff800000106651:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106655	kernel.asm	/^ffff800000106655:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010665a	kernel.asm	/^ffff80000010665a:	48 ba 55 3f 10 00 00 	movabs $0xffff800000103f55,%rdx$/;"	l
ffff800000106661	kernel.asm	/^ffff800000106661:	80 ff ff $/;"	l
ffff800000106664	kernel.asm	/^ffff800000106664:	ff d2                	callq  *%rdx$/;"	l
ffff800000106666	kernel.asm	/^ffff800000106666:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000106668	kernel.asm	/^ffff800000106668:	48 bf 30 bf 10 00 00 	movabs $0xffff80000010bf30,%rdi$/;"	l
ffff80000010666f	kernel.asm	/^ffff80000010666f:	80 ff ff $/;"	l
ffff800000106672	kernel.asm	/^ffff800000106672:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106677	kernel.asm	/^ffff800000106677:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010667e	kernel.asm	/^ffff80000010667e:	80 ff ff $/;"	l
ffff800000106681	kernel.asm	/^ffff800000106681:	ff d2                	callq  *%rdx$/;"	l
ffff800000106683	kernel.asm	/^ffff800000106683:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010668a	kernel.asm	/^ffff80000010668a:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff80000010668e	kernel.asm	/^ffff80000010668e:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106695	kernel.asm	/^ffff800000106695:	80 ff ff $/;"	l
ffff800000106698	kernel.asm	/^ffff800000106698:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010669b	kernel.asm	/^ffff80000010669b:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff80000010669e	kernel.asm	/^ffff80000010669e:	75 16                	jne    ffff8000001066b6 <exit+0x69>$/;"	l
ffff8000001066a0	kernel.asm	/^ffff8000001066a0:	48 bf 5a bf 10 00 00 	movabs $0xffff80000010bf5a,%rdi$/;"	l
ffff8000001066a7	kernel.asm	/^ffff8000001066a7:	80 ff ff $/;"	l
ffff8000001066aa	kernel.asm	/^ffff8000001066aa:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001066b1	kernel.asm	/^ffff8000001066b1:	80 ff ff $/;"	l
ffff8000001066b4	kernel.asm	/^ffff8000001066b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001066b6	kernel.asm	/^ffff8000001066b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001066bd	kernel.asm	/^ffff8000001066bd:	eb 6a                	jmp    ffff800000106729 <exit+0xdc>$/;"	l
ffff8000001066bf	kernel.asm	/^ffff8000001066bf:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001066c6	kernel.asm	/^ffff8000001066c6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001066ca	kernel.asm	/^ffff8000001066ca:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001066cd	kernel.asm	/^ffff8000001066cd:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001066d0	kernel.asm	/^ffff8000001066d0:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001066d4	kernel.asm	/^ffff8000001066d4:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001066d9	kernel.asm	/^ffff8000001066d9:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001066dc	kernel.asm	/^ffff8000001066dc:	74 47                	je     ffff800000106725 <exit+0xd8>$/;"	l
ffff8000001066de	kernel.asm	/^ffff8000001066de:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001066e5	kernel.asm	/^ffff8000001066e5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001066e9	kernel.asm	/^ffff8000001066e9:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001066ec	kernel.asm	/^ffff8000001066ec:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001066ef	kernel.asm	/^ffff8000001066ef:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001066f3	kernel.asm	/^ffff8000001066f3:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001066f8	kernel.asm	/^ffff8000001066f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001066fb	kernel.asm	/^ffff8000001066fb:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff800000106702	kernel.asm	/^ffff800000106702:	80 ff ff $/;"	l
ffff800000106705	kernel.asm	/^ffff800000106705:	ff d0                	callq  *%rax$/;"	l
ffff800000106707	kernel.asm	/^ffff800000106707:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010670e	kernel.asm	/^ffff80000010670e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106712	kernel.asm	/^ffff800000106712:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000106715	kernel.asm	/^ffff800000106715:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000106718	kernel.asm	/^ffff800000106718:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff80000010671c	kernel.asm	/^ffff80000010671c:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff800000106723	kernel.asm	/^ffff800000106723:	00 00 $/;"	l
ffff800000106725	kernel.asm	/^ffff800000106725:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff800000106729	kernel.asm	/^ffff800000106729:	83 7d f4 0f          	cmpl   $0xf,-0xc(%rbp)$/;"	l
ffff80000010672d	kernel.asm	/^ffff80000010672d:	7e 90                	jle    ffff8000001066bf <exit+0x72>$/;"	l
ffff80000010672f	kernel.asm	/^ffff80000010672f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106734	kernel.asm	/^ffff800000106734:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff80000010673b	kernel.asm	/^ffff80000010673b:	80 ff ff $/;"	l
ffff80000010673e	kernel.asm	/^ffff80000010673e:	ff d2                	callq  *%rdx$/;"	l
ffff800000106740	kernel.asm	/^ffff800000106740:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106747	kernel.asm	/^ffff800000106747:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010674b	kernel.asm	/^ffff80000010674b:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000106752	kernel.asm	/^ffff800000106752:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106755	kernel.asm	/^ffff800000106755:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff80000010675c	kernel.asm	/^ffff80000010675c:	80 ff ff $/;"	l
ffff80000010675f	kernel.asm	/^ffff80000010675f:	ff d0                	callq  *%rax$/;"	l
ffff800000106761	kernel.asm	/^ffff800000106761:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106766	kernel.asm	/^ffff800000106766:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff80000010676d	kernel.asm	/^ffff80000010676d:	80 ff ff $/;"	l
ffff800000106770	kernel.asm	/^ffff800000106770:	ff d2                	callq  *%rdx$/;"	l
ffff800000106772	kernel.asm	/^ffff800000106772:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106779	kernel.asm	/^ffff800000106779:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010677d	kernel.asm	/^ffff80000010677d:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)$/;"	l
ffff800000106784	kernel.asm	/^ffff800000106784:	00 00 00 00 $/;"	l
ffff800000106788	kernel.asm	/^ffff800000106788:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff80000010678f	kernel.asm	/^ffff80000010678f:	80 ff ff $/;"	l
ffff800000106792	kernel.asm	/^ffff800000106792:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106799	kernel.asm	/^ffff800000106799:	80 ff ff $/;"	l
ffff80000010679c	kernel.asm	/^ffff80000010679c:	ff d0                	callq  *%rax$/;"	l
ffff80000010679e	kernel.asm	/^ffff80000010679e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067a5	kernel.asm	/^ffff8000001067a5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067a9	kernel.asm	/^ffff8000001067a9:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff8000001067ad	kernel.asm	/^ffff8000001067ad:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001067b0	kernel.asm	/^ffff8000001067b0:	48 b8 ce 6d 10 00 00 	movabs $0xffff800000106dce,%rax$/;"	l
ffff8000001067b7	kernel.asm	/^ffff8000001067b7:	80 ff ff $/;"	l
ffff8000001067ba	kernel.asm	/^ffff8000001067ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001067bc	kernel.asm	/^ffff8000001067bc:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff8000001067c3	kernel.asm	/^ffff8000001067c3:	80 ff ff $/;"	l
ffff8000001067c6	kernel.asm	/^ffff8000001067c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001067ca	kernel.asm	/^ffff8000001067ca:	eb 5d                	jmp    ffff800000106829 <exit+0x1dc>$/;"	l
ffff8000001067cc	kernel.asm	/^ffff8000001067cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001067d0	kernel.asm	/^ffff8000001067d0:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff8000001067d4	kernel.asm	/^ffff8000001067d4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067db	kernel.asm	/^ffff8000001067db:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067df	kernel.asm	/^ffff8000001067df:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001067e2	kernel.asm	/^ffff8000001067e2:	75 3d                	jne    ffff800000106821 <exit+0x1d4>$/;"	l
ffff8000001067e4	kernel.asm	/^ffff8000001067e4:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff8000001067eb	kernel.asm	/^ffff8000001067eb:	80 ff ff $/;"	l
ffff8000001067ee	kernel.asm	/^ffff8000001067ee:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff8000001067f1	kernel.asm	/^ffff8000001067f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001067f5	kernel.asm	/^ffff8000001067f5:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff8000001067f9	kernel.asm	/^ffff8000001067f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001067fd	kernel.asm	/^ffff8000001067fd:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106800	kernel.asm	/^ffff800000106800:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff800000106803	kernel.asm	/^ffff800000106803:	75 1c                	jne    ffff800000106821 <exit+0x1d4>$/;"	l
ffff800000106805	kernel.asm	/^ffff800000106805:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff80000010680c	kernel.asm	/^ffff80000010680c:	80 ff ff $/;"	l
ffff80000010680f	kernel.asm	/^ffff80000010680f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000106812	kernel.asm	/^ffff800000106812:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106815	kernel.asm	/^ffff800000106815:	48 b8 ce 6d 10 00 00 	movabs $0xffff800000106dce,%rax$/;"	l
ffff80000010681c	kernel.asm	/^ffff80000010681c:	80 ff ff $/;"	l
ffff80000010681f	kernel.asm	/^ffff80000010681f:	ff d0                	callq  *%rax$/;"	l
ffff800000106821	kernel.asm	/^ffff800000106821:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106828	kernel.asm	/^ffff800000106828:	00 $/;"	l
ffff800000106829	kernel.asm	/^ffff800000106829:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106830	kernel.asm	/^ffff800000106830:	80 ff ff $/;"	l
ffff800000106833	kernel.asm	/^ffff800000106833:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106837	kernel.asm	/^ffff800000106837:	72 93                	jb     ffff8000001067cc <exit+0x17f>$/;"	l
ffff800000106839	kernel.asm	/^ffff800000106839:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106840	kernel.asm	/^ffff800000106840:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106844	kernel.asm	/^ffff800000106844:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%rax)$/;"	l
ffff80000010684b	kernel.asm	/^ffff80000010684b:	48 b8 eb 6a 10 00 00 	movabs $0xffff800000106aeb,%rax$/;"	l
ffff800000106852	kernel.asm	/^ffff800000106852:	80 ff ff $/;"	l
ffff800000106855	kernel.asm	/^ffff800000106855:	ff d0                	callq  *%rax$/;"	l
ffff800000106857	kernel.asm	/^ffff800000106857:	48 bf 67 bf 10 00 00 	movabs $0xffff80000010bf67,%rdi$/;"	l
ffff80000010685e	kernel.asm	/^ffff80000010685e:	80 ff ff $/;"	l
ffff800000106861	kernel.asm	/^ffff800000106861:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106868	kernel.asm	/^ffff800000106868:	80 ff ff $/;"	l
ffff80000010686b	kernel.asm	/^ffff80000010686b:	ff d0                	callq  *%rax$/;"	l
ffff80000010686d	kernel.asm	/^ffff80000010686d <wait>:$/;"	l
ffff80000010686d	kernel.asm	/^ffff80000010686d:	55                   	push   %rbp$/;"	l
ffff80000010686e	kernel.asm	/^ffff80000010686e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106871	kernel.asm	/^ffff800000106871:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106875	kernel.asm	/^ffff800000106875:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff80000010687c	kernel.asm	/^ffff80000010687c:	80 ff ff $/;"	l
ffff80000010687f	kernel.asm	/^ffff80000010687f:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106886	kernel.asm	/^ffff800000106886:	80 ff ff $/;"	l
ffff800000106889	kernel.asm	/^ffff800000106889:	ff d0                	callq  *%rax$/;"	l
ffff80000010688b	kernel.asm	/^ffff80000010688b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff800000106892	kernel.asm	/^ffff800000106892:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106899	kernel.asm	/^ffff800000106899:	80 ff ff $/;"	l
ffff80000010689c	kernel.asm	/^ffff80000010689c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001068a0	kernel.asm	/^ffff8000001068a0:	e9 d3 00 00 00       	jmpq   ffff800000106978 <wait+0x10b>$/;"	l
ffff8000001068a5	kernel.asm	/^ffff8000001068a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001068a9	kernel.asm	/^ffff8000001068a9:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff8000001068ad	kernel.asm	/^ffff8000001068ad:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001068b4	kernel.asm	/^ffff8000001068b4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001068b8	kernel.asm	/^ffff8000001068b8:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001068bb	kernel.asm	/^ffff8000001068bb:	0f 85 ae 00 00 00    	jne    ffff80000010696f <wait+0x102>$/;"	l
ffff8000001068c1	kernel.asm	/^ffff8000001068c1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)$/;"	l
ffff8000001068c8	kernel.asm	/^ffff8000001068c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001068cc	kernel.asm	/^ffff8000001068cc:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001068cf	kernel.asm	/^ffff8000001068cf:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff8000001068d2	kernel.asm	/^ffff8000001068d2:	0f 85 98 00 00 00    	jne    ffff800000106970 <wait+0x103>$/;"	l
ffff8000001068d8	kernel.asm	/^ffff8000001068d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001068dc	kernel.asm	/^ffff8000001068dc:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001068df	kernel.asm	/^ffff8000001068df:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff8000001068e2	kernel.asm	/^ffff8000001068e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001068e6	kernel.asm	/^ffff8000001068e6:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff8000001068ea	kernel.asm	/^ffff8000001068ea:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001068ed	kernel.asm	/^ffff8000001068ed:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff8000001068f4	kernel.asm	/^ffff8000001068f4:	80 ff ff $/;"	l
ffff8000001068f7	kernel.asm	/^ffff8000001068f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001068f9	kernel.asm	/^ffff8000001068f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001068fd	kernel.asm	/^ffff8000001068fd:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff800000106904	kernel.asm	/^ffff800000106904:	00 $/;"	l
ffff800000106905	kernel.asm	/^ffff800000106905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106909	kernel.asm	/^ffff800000106909:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010690d	kernel.asm	/^ffff80000010690d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106910	kernel.asm	/^ffff800000106910:	48 b8 3d b6 10 00 00 	movabs $0xffff80000010b63d,%rax$/;"	l
ffff800000106917	kernel.asm	/^ffff800000106917:	80 ff ff $/;"	l
ffff80000010691a	kernel.asm	/^ffff80000010691a:	ff d0                	callq  *%rax$/;"	l
ffff80000010691c	kernel.asm	/^ffff80000010691c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106920	kernel.asm	/^ffff800000106920:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)$/;"	l
ffff800000106927	kernel.asm	/^ffff800000106927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010692b	kernel.asm	/^ffff80000010692b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)$/;"	l
ffff800000106932	kernel.asm	/^ffff800000106932:	00 $/;"	l
ffff800000106933	kernel.asm	/^ffff800000106933:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106937	kernel.asm	/^ffff800000106937:	c6 80 d0 00 00 00 00 	movb   $0x0,0xd0(%rax)$/;"	l
ffff80000010693e	kernel.asm	/^ffff80000010693e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106942	kernel.asm	/^ffff800000106942:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)$/;"	l
ffff800000106949	kernel.asm	/^ffff800000106949:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010694d	kernel.asm	/^ffff80000010694d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106954	kernel.asm	/^ffff800000106954:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff80000010695b	kernel.asm	/^ffff80000010695b:	80 ff ff $/;"	l
ffff80000010695e	kernel.asm	/^ffff80000010695e:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106965	kernel.asm	/^ffff800000106965:	80 ff ff $/;"	l
ffff800000106968	kernel.asm	/^ffff800000106968:	ff d0                	callq  *%rax$/;"	l
ffff80000010696a	kernel.asm	/^ffff80000010696a:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010696d	kernel.asm	/^ffff80000010696d:	eb 7b                	jmp    ffff8000001069ea <wait+0x17d>$/;"	l
ffff80000010696f	kernel.asm	/^ffff80000010696f:	90                   	nop$/;"	l
ffff800000106970	kernel.asm	/^ffff800000106970:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106977	kernel.asm	/^ffff800000106977:	00 $/;"	l
ffff800000106978	kernel.asm	/^ffff800000106978:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff80000010697f	kernel.asm	/^ffff80000010697f:	80 ff ff $/;"	l
ffff800000106982	kernel.asm	/^ffff800000106982:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106986	kernel.asm	/^ffff800000106986:	0f 82 19 ff ff ff    	jb     ffff8000001068a5 <wait+0x38>$/;"	l
ffff80000010698c	kernel.asm	/^ffff80000010698c:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff800000106990	kernel.asm	/^ffff800000106990:	74 12                	je     ffff8000001069a4 <wait+0x137>$/;"	l
ffff800000106992	kernel.asm	/^ffff800000106992:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106999	kernel.asm	/^ffff800000106999:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010699d	kernel.asm	/^ffff80000010699d:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001069a0	kernel.asm	/^ffff8000001069a0:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001069a2	kernel.asm	/^ffff8000001069a2:	74 1d                	je     ffff8000001069c1 <wait+0x154>$/;"	l
ffff8000001069a4	kernel.asm	/^ffff8000001069a4:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff8000001069ab	kernel.asm	/^ffff8000001069ab:	80 ff ff $/;"	l
ffff8000001069ae	kernel.asm	/^ffff8000001069ae:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001069b5	kernel.asm	/^ffff8000001069b5:	80 ff ff $/;"	l
ffff8000001069b8	kernel.asm	/^ffff8000001069b8:	ff d0                	callq  *%rax$/;"	l
ffff8000001069ba	kernel.asm	/^ffff8000001069ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001069bf	kernel.asm	/^ffff8000001069bf:	eb 29                	jmp    ffff8000001069ea <wait+0x17d>$/;"	l
ffff8000001069c1	kernel.asm	/^ffff8000001069c1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001069c8	kernel.asm	/^ffff8000001069c8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001069cc	kernel.asm	/^ffff8000001069cc:	48 be c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rsi$/;"	l
ffff8000001069d3	kernel.asm	/^ffff8000001069d3:	80 ff ff $/;"	l
ffff8000001069d6	kernel.asm	/^ffff8000001069d6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001069d9	kernel.asm	/^ffff8000001069d9:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff8000001069e0	kernel.asm	/^ffff8000001069e0:	80 ff ff $/;"	l
ffff8000001069e3	kernel.asm	/^ffff8000001069e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001069e5	kernel.asm	/^ffff8000001069e5:	e9 a1 fe ff ff       	jmpq   ffff80000010688b <wait+0x1e>$/;"	l
ffff8000001069ea	kernel.asm	/^ffff8000001069ea:	c9                   	leaveq $/;"	l
ffff8000001069eb	kernel.asm	/^ffff8000001069eb:	c3                   	retq   $/;"	l
ffff8000001069ec	kernel.asm	/^ffff8000001069ec <scheduler>:$/;"	l
ffff8000001069ec	kernel.asm	/^ffff8000001069ec:	55                   	push   %rbp$/;"	l
ffff8000001069ed	kernel.asm	/^ffff8000001069ed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001069f0	kernel.asm	/^ffff8000001069f0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001069f4	kernel.asm	/^ffff8000001069f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001069fb	kernel.asm	/^ffff8000001069fb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001069ff	kernel.asm	/^ffff8000001069ff:	48 b8 01 60 10 00 00 	movabs $0xffff800000106001,%rax$/;"	l
ffff800000106a06	kernel.asm	/^ffff800000106a06:	80 ff ff $/;"	l
ffff800000106a09	kernel.asm	/^ffff800000106a09:	ff d0                	callq  *%rax$/;"	l
ffff800000106a0b	kernel.asm	/^ffff800000106a0b:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106a12	kernel.asm	/^ffff800000106a12:	80 ff ff $/;"	l
ffff800000106a15	kernel.asm	/^ffff800000106a15:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106a1c	kernel.asm	/^ffff800000106a1c:	80 ff ff $/;"	l
ffff800000106a1f	kernel.asm	/^ffff800000106a1f:	ff d0                	callq  *%rax$/;"	l
ffff800000106a21	kernel.asm	/^ffff800000106a21:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106a28	kernel.asm	/^ffff800000106a28:	80 ff ff $/;"	l
ffff800000106a2b	kernel.asm	/^ffff800000106a2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106a2f	kernel.asm	/^ffff800000106a2f:	e9 88 00 00 00       	jmpq   ffff800000106abc <scheduler+0xd0>$/;"	l
ffff800000106a34	kernel.asm	/^ffff800000106a34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106a38	kernel.asm	/^ffff800000106a38:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106a3b	kernel.asm	/^ffff800000106a3b:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff800000106a3e	kernel.asm	/^ffff800000106a3e:	75 73                	jne    ffff800000106ab3 <scheduler+0xc7>$/;"	l
ffff800000106a40	kernel.asm	/^ffff800000106a40:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106a47	kernel.asm	/^ffff800000106a47:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000106a4b	kernel.asm	/^ffff800000106a4b:	64 48 89 10          	mov    %rdx,%fs:(%rax)$/;"	l
ffff800000106a4f	kernel.asm	/^ffff800000106a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106a53	kernel.asm	/^ffff800000106a53:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106a56	kernel.asm	/^ffff800000106a56:	48 b8 41 ae 10 00 00 	movabs $0xffff80000010ae41,%rax$/;"	l
ffff800000106a5d	kernel.asm	/^ffff800000106a5d:	80 ff ff $/;"	l
ffff800000106a60	kernel.asm	/^ffff800000106a60:	ff d0                	callq  *%rax$/;"	l
ffff800000106a62	kernel.asm	/^ffff800000106a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106a66	kernel.asm	/^ffff800000106a66:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%rax)$/;"	l
ffff800000106a6d	kernel.asm	/^ffff800000106a6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106a71	kernel.asm	/^ffff800000106a71:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106a75	kernel.asm	/^ffff800000106a75:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000106a7c	kernel.asm	/^ffff800000106a7c:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106a80	kernel.asm	/^ffff800000106a80:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106a84	kernel.asm	/^ffff800000106a84:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106a87	kernel.asm	/^ffff800000106a87:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106a8a	kernel.asm	/^ffff800000106a8a:	48 b8 ac 79 10 00 00 	movabs $0xffff8000001079ac,%rax$/;"	l
ffff800000106a91	kernel.asm	/^ffff800000106a91:	80 ff ff $/;"	l
ffff800000106a94	kernel.asm	/^ffff800000106a94:	ff d0                	callq  *%rax$/;"	l
ffff800000106a96	kernel.asm	/^ffff800000106a96:	48 b8 0f ae 10 00 00 	movabs $0xffff80000010ae0f,%rax$/;"	l
ffff800000106a9d	kernel.asm	/^ffff800000106a9d:	80 ff ff $/;"	l
ffff800000106aa0	kernel.asm	/^ffff800000106aa0:	ff d0                	callq  *%rax$/;"	l
ffff800000106aa2	kernel.asm	/^ffff800000106aa2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106aa9	kernel.asm	/^ffff800000106aa9:	64 48 c7 00 00 00 00 	movq   $0x0,%fs:(%rax)$/;"	l
ffff800000106ab0	kernel.asm	/^ffff800000106ab0:	00 $/;"	l
ffff800000106ab1	kernel.asm	/^ffff800000106ab1:	eb 01                	jmp    ffff800000106ab4 <scheduler+0xc8>$/;"	l
ffff800000106ab3	kernel.asm	/^ffff800000106ab3:	90                   	nop$/;"	l
ffff800000106ab4	kernel.asm	/^ffff800000106ab4:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff800000106abb	kernel.asm	/^ffff800000106abb:	00 $/;"	l
ffff800000106abc	kernel.asm	/^ffff800000106abc:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106ac3	kernel.asm	/^ffff800000106ac3:	80 ff ff $/;"	l
ffff800000106ac6	kernel.asm	/^ffff800000106ac6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106aca	kernel.asm	/^ffff800000106aca:	0f 82 64 ff ff ff    	jb     ffff800000106a34 <scheduler+0x48>$/;"	l
ffff800000106ad0	kernel.asm	/^ffff800000106ad0:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106ad7	kernel.asm	/^ffff800000106ad7:	80 ff ff $/;"	l
ffff800000106ada	kernel.asm	/^ffff800000106ada:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106ae1	kernel.asm	/^ffff800000106ae1:	80 ff ff $/;"	l
ffff800000106ae4	kernel.asm	/^ffff800000106ae4:	ff d0                	callq  *%rax$/;"	l
ffff800000106ae6	kernel.asm	/^ffff800000106ae6:	e9 10 ff ff ff       	jmpq   ffff8000001069fb <scheduler+0xf>$/;"	l
ffff800000106aeb	kernel.asm	/^ffff800000106aeb <sched>:$/;"	l
ffff800000106aeb	kernel.asm	/^ffff800000106aeb:	55                   	push   %rbp$/;"	l
ffff800000106aec	kernel.asm	/^ffff800000106aec:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106aef	kernel.asm	/^ffff800000106aef:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106af3	kernel.asm	/^ffff800000106af3:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106afa	kernel.asm	/^ffff800000106afa:	80 ff ff $/;"	l
ffff800000106afd	kernel.asm	/^ffff800000106afd:	48 b8 a3 74 10 00 00 	movabs $0xffff8000001074a3,%rax$/;"	l
ffff800000106b04	kernel.asm	/^ffff800000106b04:	80 ff ff $/;"	l
ffff800000106b07	kernel.asm	/^ffff800000106b07:	ff d0                	callq  *%rax$/;"	l
ffff800000106b09	kernel.asm	/^ffff800000106b09:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106b0b	kernel.asm	/^ffff800000106b0b:	75 16                	jne    ffff800000106b23 <sched+0x38>$/;"	l
ffff800000106b0d	kernel.asm	/^ffff800000106b0d:	48 bf 73 bf 10 00 00 	movabs $0xffff80000010bf73,%rdi$/;"	l
ffff800000106b14	kernel.asm	/^ffff800000106b14:	80 ff ff $/;"	l
ffff800000106b17	kernel.asm	/^ffff800000106b17:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106b1e	kernel.asm	/^ffff800000106b1e:	80 ff ff $/;"	l
ffff800000106b21	kernel.asm	/^ffff800000106b21:	ff d0                	callq  *%rax$/;"	l
ffff800000106b23	kernel.asm	/^ffff800000106b23:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106b2a	kernel.asm	/^ffff800000106b2a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106b2e	kernel.asm	/^ffff800000106b2e:	8b 80 e4 00 00 00    	mov    0xe4(%rax),%eax$/;"	l
ffff800000106b34	kernel.asm	/^ffff800000106b34:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000106b37	kernel.asm	/^ffff800000106b37:	74 16                	je     ffff800000106b4f <sched+0x64>$/;"	l
ffff800000106b39	kernel.asm	/^ffff800000106b39:	48 bf 85 bf 10 00 00 	movabs $0xffff80000010bf85,%rdi$/;"	l
ffff800000106b40	kernel.asm	/^ffff800000106b40:	80 ff ff $/;"	l
ffff800000106b43	kernel.asm	/^ffff800000106b43:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106b4a	kernel.asm	/^ffff800000106b4a:	80 ff ff $/;"	l
ffff800000106b4d	kernel.asm	/^ffff800000106b4d:	ff d0                	callq  *%rax$/;"	l
ffff800000106b4f	kernel.asm	/^ffff800000106b4f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106b56	kernel.asm	/^ffff800000106b56:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106b5a	kernel.asm	/^ffff800000106b5a:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106b5d	kernel.asm	/^ffff800000106b5d:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000106b60	kernel.asm	/^ffff800000106b60:	75 16                	jne    ffff800000106b78 <sched+0x8d>$/;"	l
ffff800000106b62	kernel.asm	/^ffff800000106b62:	48 bf 91 bf 10 00 00 	movabs $0xffff80000010bf91,%rdi$/;"	l
ffff800000106b69	kernel.asm	/^ffff800000106b69:	80 ff ff $/;"	l
ffff800000106b6c	kernel.asm	/^ffff800000106b6c:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106b73	kernel.asm	/^ffff800000106b73:	80 ff ff $/;"	l
ffff800000106b76	kernel.asm	/^ffff800000106b76:	ff d0                	callq  *%rax$/;"	l
ffff800000106b78	kernel.asm	/^ffff800000106b78:	48 b8 ed 5f 10 00 00 	movabs $0xffff800000105fed,%rax$/;"	l
ffff800000106b7f	kernel.asm	/^ffff800000106b7f:	80 ff ff $/;"	l
ffff800000106b82	kernel.asm	/^ffff800000106b82:	ff d0                	callq  *%rax$/;"	l
ffff800000106b84	kernel.asm	/^ffff800000106b84:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000106b89	kernel.asm	/^ffff800000106b89:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106b8c	kernel.asm	/^ffff800000106b8c:	74 16                	je     ffff800000106ba4 <sched+0xb9>$/;"	l
ffff800000106b8e	kernel.asm	/^ffff800000106b8e:	48 bf 9f bf 10 00 00 	movabs $0xffff80000010bf9f,%rdi$/;"	l
ffff800000106b95	kernel.asm	/^ffff800000106b95:	80 ff ff $/;"	l
ffff800000106b98	kernel.asm	/^ffff800000106b98:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106b9f	kernel.asm	/^ffff800000106b9f:	80 ff ff $/;"	l
ffff800000106ba2	kernel.asm	/^ffff800000106ba2:	ff d0                	callq  *%rax$/;"	l
ffff800000106ba4	kernel.asm	/^ffff800000106ba4:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106bab	kernel.asm	/^ffff800000106bab:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106baf	kernel.asm	/^ffff800000106baf:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000106bb5	kernel.asm	/^ffff800000106bb5:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106bb8	kernel.asm	/^ffff800000106bb8:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106bbf	kernel.asm	/^ffff800000106bbf:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106bc3	kernel.asm	/^ffff800000106bc3:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106bc7	kernel.asm	/^ffff800000106bc7:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx$/;"	l
ffff800000106bce	kernel.asm	/^ffff800000106bce:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106bd2	kernel.asm	/^ffff800000106bd2:	48 83 c2 30          	add    $0x30,%rdx$/;"	l
ffff800000106bd6	kernel.asm	/^ffff800000106bd6:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106bd9	kernel.asm	/^ffff800000106bd9:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106bdc	kernel.asm	/^ffff800000106bdc:	48 b8 ac 79 10 00 00 	movabs $0xffff8000001079ac,%rax$/;"	l
ffff800000106be3	kernel.asm	/^ffff800000106be3:	80 ff ff $/;"	l
ffff800000106be6	kernel.asm	/^ffff800000106be6:	ff d0                	callq  *%rax$/;"	l
ffff800000106be8	kernel.asm	/^ffff800000106be8:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106bef	kernel.asm	/^ffff800000106bef:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106bf3	kernel.asm	/^ffff800000106bf3:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106bf6	kernel.asm	/^ffff800000106bf6:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)$/;"	l
ffff800000106bfc	kernel.asm	/^ffff800000106bfc:	90                   	nop$/;"	l
ffff800000106bfd	kernel.asm	/^ffff800000106bfd:	c9                   	leaveq $/;"	l
ffff800000106bfe	kernel.asm	/^ffff800000106bfe:	c3                   	retq   $/;"	l
ffff800000106bff	kernel.asm	/^ffff800000106bff <yield>:$/;"	l
ffff800000106bff	kernel.asm	/^ffff800000106bff:	55                   	push   %rbp$/;"	l
ffff800000106c00	kernel.asm	/^ffff800000106c00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106c03	kernel.asm	/^ffff800000106c03:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106c0a	kernel.asm	/^ffff800000106c0a:	80 ff ff $/;"	l
ffff800000106c0d	kernel.asm	/^ffff800000106c0d:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106c14	kernel.asm	/^ffff800000106c14:	80 ff ff $/;"	l
ffff800000106c17	kernel.asm	/^ffff800000106c17:	ff d0                	callq  *%rax$/;"	l
ffff800000106c19	kernel.asm	/^ffff800000106c19:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106c20	kernel.asm	/^ffff800000106c20:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106c24	kernel.asm	/^ffff800000106c24:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106c2b	kernel.asm	/^ffff800000106c2b:	48 b8 eb 6a 10 00 00 	movabs $0xffff800000106aeb,%rax$/;"	l
ffff800000106c32	kernel.asm	/^ffff800000106c32:	80 ff ff $/;"	l
ffff800000106c35	kernel.asm	/^ffff800000106c35:	ff d0                	callq  *%rax$/;"	l
ffff800000106c37	kernel.asm	/^ffff800000106c37:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106c3e	kernel.asm	/^ffff800000106c3e:	80 ff ff $/;"	l
ffff800000106c41	kernel.asm	/^ffff800000106c41:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106c48	kernel.asm	/^ffff800000106c48:	80 ff ff $/;"	l
ffff800000106c4b	kernel.asm	/^ffff800000106c4b:	ff d0                	callq  *%rax$/;"	l
ffff800000106c4d	kernel.asm	/^ffff800000106c4d:	90                   	nop$/;"	l
ffff800000106c4e	kernel.asm	/^ffff800000106c4e:	5d                   	pop    %rbp$/;"	l
ffff800000106c4f	kernel.asm	/^ffff800000106c4f:	c3                   	retq   $/;"	l
ffff800000106c50	kernel.asm	/^ffff800000106c50 <forkret>:$/;"	l
ffff800000106c50	kernel.asm	/^ffff800000106c50:	55                   	push   %rbp$/;"	l
ffff800000106c51	kernel.asm	/^ffff800000106c51:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106c54	kernel.asm	/^ffff800000106c54:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106c58	kernel.asm	/^ffff800000106c58:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106c5f	kernel.asm	/^ffff800000106c5f:	80 ff ff $/;"	l
ffff800000106c62	kernel.asm	/^ffff800000106c62:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106c69	kernel.asm	/^ffff800000106c69:	80 ff ff $/;"	l
ffff800000106c6c	kernel.asm	/^ffff800000106c6c:	ff d0                	callq  *%rax$/;"	l
ffff800000106c6e	kernel.asm	/^ffff800000106c6e:	48 b8 44 d5 10 00 00 	movabs $0xffff80000010d544,%rax$/;"	l
ffff800000106c75	kernel.asm	/^ffff800000106c75:	80 ff ff $/;"	l
ffff800000106c78	kernel.asm	/^ffff800000106c78:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000106c7a	kernel.asm	/^ffff800000106c7a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106c7c	kernel.asm	/^ffff800000106c7c:	74 32                	je     ffff800000106cb0 <forkret+0x60>$/;"	l
ffff800000106c7e	kernel.asm	/^ffff800000106c7e:	48 b8 44 d5 10 00 00 	movabs $0xffff80000010d544,%rax$/;"	l
ffff800000106c85	kernel.asm	/^ffff800000106c85:	80 ff ff $/;"	l
ffff800000106c88	kernel.asm	/^ffff800000106c88:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000106c8e	kernel.asm	/^ffff800000106c8e:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106c93	kernel.asm	/^ffff800000106c93:	48 b8 64 23 10 00 00 	movabs $0xffff800000102364,%rax$/;"	l
ffff800000106c9a	kernel.asm	/^ffff800000106c9a:	80 ff ff $/;"	l
ffff800000106c9d	kernel.asm	/^ffff800000106c9d:	ff d0                	callq  *%rax$/;"	l
ffff800000106c9f	kernel.asm	/^ffff800000106c9f:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106ca4	kernel.asm	/^ffff800000106ca4:	48 b8 9b 4a 10 00 00 	movabs $0xffff800000104a9b,%rax$/;"	l
ffff800000106cab	kernel.asm	/^ffff800000106cab:	80 ff ff $/;"	l
ffff800000106cae	kernel.asm	/^ffff800000106cae:	ff d0                	callq  *%rax$/;"	l
ffff800000106cb0	kernel.asm	/^ffff800000106cb0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106cb7	kernel.asm	/^ffff800000106cb7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106cbb	kernel.asm	/^ffff800000106cbb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106cbf	kernel.asm	/^ffff800000106cbf:	90                   	nop$/;"	l
ffff800000106cc0	kernel.asm	/^ffff800000106cc0:	c9                   	leaveq $/;"	l
ffff800000106cc1	kernel.asm	/^ffff800000106cc1:	c3                   	retq   $/;"	l
ffff800000106cc2	kernel.asm	/^ffff800000106cc2 <sleep>:$/;"	l
ffff800000106cc2	kernel.asm	/^ffff800000106cc2:	55                   	push   %rbp$/;"	l
ffff800000106cc3	kernel.asm	/^ffff800000106cc3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106cc6	kernel.asm	/^ffff800000106cc6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106cca	kernel.asm	/^ffff800000106cca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000106cce	kernel.asm	/^ffff800000106cce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000106cd2	kernel.asm	/^ffff800000106cd2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106cd9	kernel.asm	/^ffff800000106cd9:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106cdd	kernel.asm	/^ffff800000106cdd:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106ce0	kernel.asm	/^ffff800000106ce0:	75 16                	jne    ffff800000106cf8 <sleep+0x36>$/;"	l
ffff800000106ce2	kernel.asm	/^ffff800000106ce2:	48 bf b3 bf 10 00 00 	movabs $0xffff80000010bfb3,%rdi$/;"	l
ffff800000106ce9	kernel.asm	/^ffff800000106ce9:	80 ff ff $/;"	l
ffff800000106cec	kernel.asm	/^ffff800000106cec:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106cf3	kernel.asm	/^ffff800000106cf3:	80 ff ff $/;"	l
ffff800000106cf6	kernel.asm	/^ffff800000106cf6:	ff d0                	callq  *%rax$/;"	l
ffff800000106cf8	kernel.asm	/^ffff800000106cf8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000106cfd	kernel.asm	/^ffff800000106cfd:	75 16                	jne    ffff800000106d15 <sleep+0x53>$/;"	l
ffff800000106cff	kernel.asm	/^ffff800000106cff:	48 bf b9 bf 10 00 00 	movabs $0xffff80000010bfb9,%rdi$/;"	l
ffff800000106d06	kernel.asm	/^ffff800000106d06:	80 ff ff $/;"	l
ffff800000106d09	kernel.asm	/^ffff800000106d09:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106d10	kernel.asm	/^ffff800000106d10:	80 ff ff $/;"	l
ffff800000106d13	kernel.asm	/^ffff800000106d13:	ff d0                	callq  *%rax$/;"	l
ffff800000106d15	kernel.asm	/^ffff800000106d15:	48 b8 c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rax$/;"	l
ffff800000106d1c	kernel.asm	/^ffff800000106d1c:	80 ff ff $/;"	l
ffff800000106d1f	kernel.asm	/^ffff800000106d1f:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106d23	kernel.asm	/^ffff800000106d23:	74 29                	je     ffff800000106d4e <sleep+0x8c>$/;"	l
ffff800000106d25	kernel.asm	/^ffff800000106d25:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106d2c	kernel.asm	/^ffff800000106d2c:	80 ff ff $/;"	l
ffff800000106d2f	kernel.asm	/^ffff800000106d2f:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106d36	kernel.asm	/^ffff800000106d36:	80 ff ff $/;"	l
ffff800000106d39	kernel.asm	/^ffff800000106d39:	ff d0                	callq  *%rax$/;"	l
ffff800000106d3b	kernel.asm	/^ffff800000106d3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106d3f	kernel.asm	/^ffff800000106d3f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106d42	kernel.asm	/^ffff800000106d42:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106d49	kernel.asm	/^ffff800000106d49:	80 ff ff $/;"	l
ffff800000106d4c	kernel.asm	/^ffff800000106d4c:	ff d0                	callq  *%rax$/;"	l
ffff800000106d4e	kernel.asm	/^ffff800000106d4e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d55	kernel.asm	/^ffff800000106d55:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d59	kernel.asm	/^ffff800000106d59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106d5d	kernel.asm	/^ffff800000106d5d:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff800000106d61	kernel.asm	/^ffff800000106d61:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d68	kernel.asm	/^ffff800000106d68:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d6c	kernel.asm	/^ffff800000106d6c:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%rax)$/;"	l
ffff800000106d73	kernel.asm	/^ffff800000106d73:	48 b8 eb 6a 10 00 00 	movabs $0xffff800000106aeb,%rax$/;"	l
ffff800000106d7a	kernel.asm	/^ffff800000106d7a:	80 ff ff $/;"	l
ffff800000106d7d	kernel.asm	/^ffff800000106d7d:	ff d0                	callq  *%rax$/;"	l
ffff800000106d7f	kernel.asm	/^ffff800000106d7f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d86	kernel.asm	/^ffff800000106d86:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d8a	kernel.asm	/^ffff800000106d8a:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)$/;"	l
ffff800000106d91	kernel.asm	/^ffff800000106d91:	00 $/;"	l
ffff800000106d92	kernel.asm	/^ffff800000106d92:	48 b8 c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rax$/;"	l
ffff800000106d99	kernel.asm	/^ffff800000106d99:	80 ff ff $/;"	l
ffff800000106d9c	kernel.asm	/^ffff800000106d9c:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106da0	kernel.asm	/^ffff800000106da0:	74 29                	je     ffff800000106dcb <sleep+0x109>$/;"	l
ffff800000106da2	kernel.asm	/^ffff800000106da2:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106da9	kernel.asm	/^ffff800000106da9:	80 ff ff $/;"	l
ffff800000106dac	kernel.asm	/^ffff800000106dac:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106db3	kernel.asm	/^ffff800000106db3:	80 ff ff $/;"	l
ffff800000106db6	kernel.asm	/^ffff800000106db6:	ff d0                	callq  *%rax$/;"	l
ffff800000106db8	kernel.asm	/^ffff800000106db8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106dbc	kernel.asm	/^ffff800000106dbc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106dbf	kernel.asm	/^ffff800000106dbf:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106dc6	kernel.asm	/^ffff800000106dc6:	80 ff ff $/;"	l
ffff800000106dc9	kernel.asm	/^ffff800000106dc9:	ff d0                	callq  *%rax$/;"	l
ffff800000106dcb	kernel.asm	/^ffff800000106dcb:	90                   	nop$/;"	l
ffff800000106dcc	kernel.asm	/^ffff800000106dcc:	c9                   	leaveq $/;"	l
ffff800000106dcd	kernel.asm	/^ffff800000106dcd:	c3                   	retq   $/;"	l
ffff800000106dce	kernel.asm	/^ffff800000106dce <wakeup1>:$/;"	l
ffff800000106dce	kernel.asm	/^ffff800000106dce:	55                   	push   %rbp$/;"	l
ffff800000106dcf	kernel.asm	/^ffff800000106dcf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106dd2	kernel.asm	/^ffff800000106dd2:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000106dd6	kernel.asm	/^ffff800000106dd6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000106dda	kernel.asm	/^ffff800000106dda:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106de1	kernel.asm	/^ffff800000106de1:	80 ff ff $/;"	l
ffff800000106de4	kernel.asm	/^ffff800000106de4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106de8	kernel.asm	/^ffff800000106de8:	eb 2d                	jmp    ffff800000106e17 <wakeup1+0x49>$/;"	l
ffff800000106dea	kernel.asm	/^ffff800000106dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106dee	kernel.asm	/^ffff800000106dee:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106df1	kernel.asm	/^ffff800000106df1:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000106df4	kernel.asm	/^ffff800000106df4:	75 19                	jne    ffff800000106e0f <wakeup1+0x41>$/;"	l
ffff800000106df6	kernel.asm	/^ffff800000106df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106dfa	kernel.asm	/^ffff800000106dfa:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff800000106dfe	kernel.asm	/^ffff800000106dfe:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000106e02	kernel.asm	/^ffff800000106e02:	75 0b                	jne    ffff800000106e0f <wakeup1+0x41>$/;"	l
ffff800000106e04	kernel.asm	/^ffff800000106e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106e08	kernel.asm	/^ffff800000106e08:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106e0f	kernel.asm	/^ffff800000106e0f:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106e16	kernel.asm	/^ffff800000106e16:	00 $/;"	l
ffff800000106e17	kernel.asm	/^ffff800000106e17:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106e1e	kernel.asm	/^ffff800000106e1e:	80 ff ff $/;"	l
ffff800000106e21	kernel.asm	/^ffff800000106e21:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106e25	kernel.asm	/^ffff800000106e25:	72 c3                	jb     ffff800000106dea <wakeup1+0x1c>$/;"	l
ffff800000106e27	kernel.asm	/^ffff800000106e27:	90                   	nop$/;"	l
ffff800000106e28	kernel.asm	/^ffff800000106e28:	c9                   	leaveq $/;"	l
ffff800000106e29	kernel.asm	/^ffff800000106e29:	c3                   	retq   $/;"	l
ffff800000106e2a	kernel.asm	/^ffff800000106e2a <wakeup>:$/;"	l
ffff800000106e2a	kernel.asm	/^ffff800000106e2a:	55                   	push   %rbp$/;"	l
ffff800000106e2b	kernel.asm	/^ffff800000106e2b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e2e	kernel.asm	/^ffff800000106e2e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106e32	kernel.asm	/^ffff800000106e32:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000106e36	kernel.asm	/^ffff800000106e36:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106e3d	kernel.asm	/^ffff800000106e3d:	80 ff ff $/;"	l
ffff800000106e40	kernel.asm	/^ffff800000106e40:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106e47	kernel.asm	/^ffff800000106e47:	80 ff ff $/;"	l
ffff800000106e4a	kernel.asm	/^ffff800000106e4a:	ff d0                	callq  *%rax$/;"	l
ffff800000106e4c	kernel.asm	/^ffff800000106e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106e50	kernel.asm	/^ffff800000106e50:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106e53	kernel.asm	/^ffff800000106e53:	48 b8 ce 6d 10 00 00 	movabs $0xffff800000106dce,%rax$/;"	l
ffff800000106e5a	kernel.asm	/^ffff800000106e5a:	80 ff ff $/;"	l
ffff800000106e5d	kernel.asm	/^ffff800000106e5d:	ff d0                	callq  *%rax$/;"	l
ffff800000106e5f	kernel.asm	/^ffff800000106e5f:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106e66	kernel.asm	/^ffff800000106e66:	80 ff ff $/;"	l
ffff800000106e69	kernel.asm	/^ffff800000106e69:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106e70	kernel.asm	/^ffff800000106e70:	80 ff ff $/;"	l
ffff800000106e73	kernel.asm	/^ffff800000106e73:	ff d0                	callq  *%rax$/;"	l
ffff800000106e75	kernel.asm	/^ffff800000106e75:	90                   	nop$/;"	l
ffff800000106e76	kernel.asm	/^ffff800000106e76:	c9                   	leaveq $/;"	l
ffff800000106e77	kernel.asm	/^ffff800000106e77:	c3                   	retq   $/;"	l
ffff800000106e78	kernel.asm	/^ffff800000106e78 <kill>:$/;"	l
ffff800000106e78	kernel.asm	/^ffff800000106e78:	55                   	push   %rbp$/;"	l
ffff800000106e79	kernel.asm	/^ffff800000106e79:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e7c	kernel.asm	/^ffff800000106e7c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000106e80	kernel.asm	/^ffff800000106e80:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000106e83	kernel.asm	/^ffff800000106e83:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106e8a	kernel.asm	/^ffff800000106e8a:	80 ff ff $/;"	l
ffff800000106e8d	kernel.asm	/^ffff800000106e8d:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000106e94	kernel.asm	/^ffff800000106e94:	80 ff ff $/;"	l
ffff800000106e97	kernel.asm	/^ffff800000106e97:	ff d0                	callq  *%rax$/;"	l
ffff800000106e99	kernel.asm	/^ffff800000106e99:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106ea0	kernel.asm	/^ffff800000106ea0:	80 ff ff $/;"	l
ffff800000106ea3	kernel.asm	/^ffff800000106ea3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106ea7	kernel.asm	/^ffff800000106ea7:	eb 53                	jmp    ffff800000106efc <kill+0x84>$/;"	l
ffff800000106ea9	kernel.asm	/^ffff800000106ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106ead	kernel.asm	/^ffff800000106ead:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000106eb0	kernel.asm	/^ffff800000106eb0:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000106eb3	kernel.asm	/^ffff800000106eb3:	75 3f                	jne    ffff800000106ef4 <kill+0x7c>$/;"	l
ffff800000106eb5	kernel.asm	/^ffff800000106eb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106eb9	kernel.asm	/^ffff800000106eb9:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff800000106ec0	kernel.asm	/^ffff800000106ec0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106ec4	kernel.asm	/^ffff800000106ec4:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106ec7	kernel.asm	/^ffff800000106ec7:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000106eca	kernel.asm	/^ffff800000106eca:	75 0b                	jne    ffff800000106ed7 <kill+0x5f>$/;"	l
ffff800000106ecc	kernel.asm	/^ffff800000106ecc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106ed0	kernel.asm	/^ffff800000106ed0:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106ed7	kernel.asm	/^ffff800000106ed7:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106ede	kernel.asm	/^ffff800000106ede:	80 ff ff $/;"	l
ffff800000106ee1	kernel.asm	/^ffff800000106ee1:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106ee8	kernel.asm	/^ffff800000106ee8:	80 ff ff $/;"	l
ffff800000106eeb	kernel.asm	/^ffff800000106eeb:	ff d0                	callq  *%rax$/;"	l
ffff800000106eed	kernel.asm	/^ffff800000106eed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106ef2	kernel.asm	/^ffff800000106ef2:	eb 33                	jmp    ffff800000106f27 <kill+0xaf>$/;"	l
ffff800000106ef4	kernel.asm	/^ffff800000106ef4:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106efb	kernel.asm	/^ffff800000106efb:	00 $/;"	l
ffff800000106efc	kernel.asm	/^ffff800000106efc:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000106f03	kernel.asm	/^ffff800000106f03:	80 ff ff $/;"	l
ffff800000106f06	kernel.asm	/^ffff800000106f06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106f0a	kernel.asm	/^ffff800000106f0a:	72 9d                	jb     ffff800000106ea9 <kill+0x31>$/;"	l
ffff800000106f0c	kernel.asm	/^ffff800000106f0c:	48 bf c0 7a 11 00 00 	movabs $0xffff800000117ac0,%rdi$/;"	l
ffff800000106f13	kernel.asm	/^ffff800000106f13:	80 ff ff $/;"	l
ffff800000106f16	kernel.asm	/^ffff800000106f16:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000106f1d	kernel.asm	/^ffff800000106f1d:	80 ff ff $/;"	l
ffff800000106f20	kernel.asm	/^ffff800000106f20:	ff d0                	callq  *%rax$/;"	l
ffff800000106f22	kernel.asm	/^ffff800000106f22:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106f27	kernel.asm	/^ffff800000106f27:	c9                   	leaveq $/;"	l
ffff800000106f28	kernel.asm	/^ffff800000106f28:	c3                   	retq   $/;"	l
ffff800000106f29	kernel.asm	/^ffff800000106f29 <procdump>:$/;"	l
ffff800000106f29	kernel.asm	/^ffff800000106f29:	55                   	push   %rbp$/;"	l
ffff800000106f2a	kernel.asm	/^ffff800000106f2a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106f2d	kernel.asm	/^ffff800000106f2d:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff800000106f31	kernel.asm	/^ffff800000106f31:	48 b8 28 7b 11 00 00 	movabs $0xffff800000117b28,%rax$/;"	l
ffff800000106f38	kernel.asm	/^ffff800000106f38:	80 ff ff $/;"	l
ffff800000106f3b	kernel.asm	/^ffff800000106f3b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106f3f	kernel.asm	/^ffff800000106f3f:	e9 3b 01 00 00       	jmpq   ffff80000010707f <procdump+0x156>$/;"	l
ffff800000106f44	kernel.asm	/^ffff800000106f44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106f48	kernel.asm	/^ffff800000106f48:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106f4b	kernel.asm	/^ffff800000106f4b:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106f4d	kernel.asm	/^ffff800000106f4d:	0f 84 23 01 00 00    	je     ffff800000107076 <procdump+0x14d>$/;"	l
ffff800000106f53	kernel.asm	/^ffff800000106f53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106f57	kernel.asm	/^ffff800000106f57:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106f5a	kernel.asm	/^ffff800000106f5a:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff800000106f5d	kernel.asm	/^ffff800000106f5d:	77 39                	ja     ffff800000106f98 <procdump+0x6f>$/;"	l
ffff800000106f5f	kernel.asm	/^ffff800000106f5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106f63	kernel.asm	/^ffff800000106f63:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff800000106f66	kernel.asm	/^ffff800000106f66:	48 b8 60 d5 10 00 00 	movabs $0xffff80000010d560,%rax$/;"	l
ffff800000106f6d	kernel.asm	/^ffff800000106f6d:	80 ff ff $/;"	l
ffff800000106f70	kernel.asm	/^ffff800000106f70:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106f72	kernel.asm	/^ffff800000106f72:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000106f76	kernel.asm	/^ffff800000106f76:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106f79	kernel.asm	/^ffff800000106f79:	74 1d                	je     ffff800000106f98 <procdump+0x6f>$/;"	l
ffff800000106f7b	kernel.asm	/^ffff800000106f7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106f7f	kernel.asm	/^ffff800000106f7f:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff800000106f82	kernel.asm	/^ffff800000106f82:	48 b8 60 d5 10 00 00 	movabs $0xffff80000010d560,%rax$/;"	l
ffff800000106f89	kernel.asm	/^ffff800000106f89:	80 ff ff $/;"	l
ffff800000106f8c	kernel.asm	/^ffff800000106f8c:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106f8e	kernel.asm	/^ffff800000106f8e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000106f92	kernel.asm	/^ffff800000106f92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000106f96	kernel.asm	/^ffff800000106f96:	eb 0e                	jmp    ffff800000106fa6 <procdump+0x7d>$/;"	l
ffff800000106f98	kernel.asm	/^ffff800000106f98:	48 b8 ca bf 10 00 00 	movabs $0xffff80000010bfca,%rax$/;"	l
ffff800000106f9f	kernel.asm	/^ffff800000106f9f:	80 ff ff $/;"	l
ffff800000106fa2	kernel.asm	/^ffff800000106fa2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000106fa6	kernel.asm	/^ffff800000106fa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106faa	kernel.asm	/^ffff800000106faa:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000106fb1	kernel.asm	/^ffff800000106fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fb5	kernel.asm	/^ffff800000106fb5:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000106fb8	kernel.asm	/^ffff800000106fb8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000106fbc	kernel.asm	/^ffff800000106fbc:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000106fbe	kernel.asm	/^ffff800000106fbe:	48 bf ce bf 10 00 00 	movabs $0xffff80000010bfce,%rdi$/;"	l
ffff800000106fc5	kernel.asm	/^ffff800000106fc5:	80 ff ff $/;"	l
ffff800000106fc8	kernel.asm	/^ffff800000106fc8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106fcd	kernel.asm	/^ffff800000106fcd:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff800000106fd4	kernel.asm	/^ffff800000106fd4:	80 ff ff $/;"	l
ffff800000106fd7	kernel.asm	/^ffff800000106fd7:	41 ff d0             	callq  *%r8$/;"	l
ffff800000106fda	kernel.asm	/^ffff800000106fda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fde	kernel.asm	/^ffff800000106fde:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106fe1	kernel.asm	/^ffff800000106fe1:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000106fe4	kernel.asm	/^ffff800000106fe4:	75 73                	jne    ffff800000107059 <procdump+0x130>$/;"	l
ffff800000106fe6	kernel.asm	/^ffff800000106fe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fea	kernel.asm	/^ffff800000106fea:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106fee	kernel.asm	/^ffff800000106fee:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106ff2	kernel.asm	/^ffff800000106ff2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000106ff6	kernel.asm	/^ffff800000106ff6:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106ff9	kernel.asm	/^ffff800000106ff9:	48 8d 45 90          	lea    -0x70(%rbp),%rax$/;"	l
ffff800000106ffd	kernel.asm	/^ffff800000106ffd:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107000	kernel.asm	/^ffff800000107000:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000107003	kernel.asm	/^ffff800000107003:	48 b8 0a 74 10 00 00 	movabs $0xffff80000010740a,%rax$/;"	l
ffff80000010700a	kernel.asm	/^ffff80000010700a:	80 ff ff $/;"	l
ffff80000010700d	kernel.asm	/^ffff80000010700d:	ff d0                	callq  *%rax$/;"	l
ffff80000010700f	kernel.asm	/^ffff80000010700f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107016	kernel.asm	/^ffff800000107016:	eb 2c                	jmp    ffff800000107044 <procdump+0x11b>$/;"	l
ffff800000107018	kernel.asm	/^ffff800000107018:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010701b	kernel.asm	/^ffff80000010701b:	48 98                	cltq   $/;"	l
ffff80000010701d	kernel.asm	/^ffff80000010701d:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff800000107022	kernel.asm	/^ffff800000107022:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107025	kernel.asm	/^ffff800000107025:	48 bf d7 bf 10 00 00 	movabs $0xffff80000010bfd7,%rdi$/;"	l
ffff80000010702c	kernel.asm	/^ffff80000010702c:	80 ff ff $/;"	l
ffff80000010702f	kernel.asm	/^ffff80000010702f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107034	kernel.asm	/^ffff800000107034:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010703b	kernel.asm	/^ffff80000010703b:	80 ff ff $/;"	l
ffff80000010703e	kernel.asm	/^ffff80000010703e:	ff d2                	callq  *%rdx$/;"	l
ffff800000107040	kernel.asm	/^ffff800000107040:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107044	kernel.asm	/^ffff800000107044:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000107048	kernel.asm	/^ffff800000107048:	7f 0f                	jg     ffff800000107059 <procdump+0x130>$/;"	l
ffff80000010704a	kernel.asm	/^ffff80000010704a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010704d	kernel.asm	/^ffff80000010704d:	48 98                	cltq   $/;"	l
ffff80000010704f	kernel.asm	/^ffff80000010704f:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff800000107054	kernel.asm	/^ffff800000107054:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107057	kernel.asm	/^ffff800000107057:	75 bf                	jne    ffff800000107018 <procdump+0xef>$/;"	l
ffff800000107059	kernel.asm	/^ffff800000107059:	48 bf db bf 10 00 00 	movabs $0xffff80000010bfdb,%rdi$/;"	l
ffff800000107060	kernel.asm	/^ffff800000107060:	80 ff ff $/;"	l
ffff800000107063	kernel.asm	/^ffff800000107063:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107068	kernel.asm	/^ffff800000107068:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010706f	kernel.asm	/^ffff80000010706f:	80 ff ff $/;"	l
ffff800000107072	kernel.asm	/^ffff800000107072:	ff d2                	callq  *%rdx$/;"	l
ffff800000107074	kernel.asm	/^ffff800000107074:	eb 01                	jmp    ffff800000107077 <procdump+0x14e>$/;"	l
ffff800000107076	kernel.asm	/^ffff800000107076:	90                   	nop$/;"	l
ffff800000107077	kernel.asm	/^ffff800000107077:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff80000010707e	kernel.asm	/^ffff80000010707e:	00 $/;"	l
ffff80000010707f	kernel.asm	/^ffff80000010707f:	48 b8 28 b3 11 00 00 	movabs $0xffff80000011b328,%rax$/;"	l
ffff800000107086	kernel.asm	/^ffff800000107086:	80 ff ff $/;"	l
ffff800000107089	kernel.asm	/^ffff800000107089:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff80000010708d	kernel.asm	/^ffff80000010708d:	0f 82 b1 fe ff ff    	jb     ffff800000106f44 <procdump+0x1b>$/;"	l
ffff800000107093	kernel.asm	/^ffff800000107093:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107098	kernel.asm	/^ffff800000107098:	48 ba 55 3f 10 00 00 	movabs $0xffff800000103f55,%rdx$/;"	l
ffff80000010709f	kernel.asm	/^ffff80000010709f:	80 ff ff $/;"	l
ffff8000001070a2	kernel.asm	/^ffff8000001070a2:	ff d2                	callq  *%rdx$/;"	l
ffff8000001070a4	kernel.asm	/^ffff8000001070a4:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001070a6	kernel.asm	/^ffff8000001070a6:	48 bf dd bf 10 00 00 	movabs $0xffff80000010bfdd,%rdi$/;"	l
ffff8000001070ad	kernel.asm	/^ffff8000001070ad:	80 ff ff $/;"	l
ffff8000001070b0	kernel.asm	/^ffff8000001070b0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001070b5	kernel.asm	/^ffff8000001070b5:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001070bc	kernel.asm	/^ffff8000001070bc:	80 ff ff $/;"	l
ffff8000001070bf	kernel.asm	/^ffff8000001070bf:	ff d2                	callq  *%rdx$/;"	l
ffff8000001070c1	kernel.asm	/^ffff8000001070c1:	90                   	nop$/;"	l
ffff8000001070c2	kernel.asm	/^ffff8000001070c2:	c9                   	leaveq $/;"	l
ffff8000001070c3	kernel.asm	/^ffff8000001070c3:	c3                   	retq   $/;"	l
ffff8000001070c4	kernel.asm	/^ffff8000001070c4 <initsleeplock>:$/;"	l
ffff8000001070c4	kernel.asm	/^ffff8000001070c4:	55                   	push   %rbp$/;"	l
ffff8000001070c5	kernel.asm	/^ffff8000001070c5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001070c8	kernel.asm	/^ffff8000001070c8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001070cc	kernel.asm	/^ffff8000001070cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001070d0	kernel.asm	/^ffff8000001070d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001070d4	kernel.asm	/^ffff8000001070d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070d8	kernel.asm	/^ffff8000001070d8:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001070dc	kernel.asm	/^ffff8000001070dc:	48 be 17 c0 10 00 00 	movabs $0xffff80000010c017,%rsi$/;"	l
ffff8000001070e3	kernel.asm	/^ffff8000001070e3:	80 ff ff $/;"	l
ffff8000001070e6	kernel.asm	/^ffff8000001070e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001070e9	kernel.asm	/^ffff8000001070e9:	48 b8 97 72 10 00 00 	movabs $0xffff800000107297,%rax$/;"	l
ffff8000001070f0	kernel.asm	/^ffff8000001070f0:	80 ff ff $/;"	l
ffff8000001070f3	kernel.asm	/^ffff8000001070f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001070f5	kernel.asm	/^ffff8000001070f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070f9	kernel.asm	/^ffff8000001070f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001070fd	kernel.asm	/^ffff8000001070fd:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff800000107101	kernel.asm	/^ffff800000107101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107105	kernel.asm	/^ffff800000107105:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff80000010710b	kernel.asm	/^ffff80000010710b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010710f	kernel.asm	/^ffff80000010710f:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff800000107116	kernel.asm	/^ffff800000107116:	90                   	nop$/;"	l
ffff800000107117	kernel.asm	/^ffff800000107117:	c9                   	leaveq $/;"	l
ffff800000107118	kernel.asm	/^ffff800000107118:	c3                   	retq   $/;"	l
ffff800000107119	kernel.asm	/^ffff800000107119 <acquiresleep>:$/;"	l
ffff800000107119	kernel.asm	/^ffff800000107119:	55                   	push   %rbp$/;"	l
ffff80000010711a	kernel.asm	/^ffff80000010711a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010711d	kernel.asm	/^ffff80000010711d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107121	kernel.asm	/^ffff800000107121:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107125	kernel.asm	/^ffff800000107125:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107129	kernel.asm	/^ffff800000107129:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010712d	kernel.asm	/^ffff80000010712d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107130	kernel.asm	/^ffff800000107130:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000107137	kernel.asm	/^ffff800000107137:	80 ff ff $/;"	l
ffff80000010713a	kernel.asm	/^ffff80000010713a:	ff d0                	callq  *%rax$/;"	l
ffff80000010713c	kernel.asm	/^ffff80000010713c:	eb 1e                	jmp    ffff80000010715c <acquiresleep+0x43>$/;"	l
ffff80000010713e	kernel.asm	/^ffff80000010713e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107142	kernel.asm	/^ffff800000107142:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107146	kernel.asm	/^ffff800000107146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010714a	kernel.asm	/^ffff80000010714a:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010714d	kernel.asm	/^ffff80000010714d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107150	kernel.asm	/^ffff800000107150:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000107157	kernel.asm	/^ffff800000107157:	80 ff ff $/;"	l
ffff80000010715a	kernel.asm	/^ffff80000010715a:	ff d0                	callq  *%rax$/;"	l
ffff80000010715c	kernel.asm	/^ffff80000010715c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107160	kernel.asm	/^ffff800000107160:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000107162	kernel.asm	/^ffff800000107162:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107164	kernel.asm	/^ffff800000107164:	75 d8                	jne    ffff80000010713e <acquiresleep+0x25>$/;"	l
ffff800000107166	kernel.asm	/^ffff800000107166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010716a	kernel.asm	/^ffff80000010716a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000107170	kernel.asm	/^ffff800000107170:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107177	kernel.asm	/^ffff800000107177:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010717b	kernel.asm	/^ffff80000010717b:	8b 50 1c             	mov    0x1c(%rax),%edx$/;"	l
ffff80000010717e	kernel.asm	/^ffff80000010717e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107182	kernel.asm	/^ffff800000107182:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff800000107185	kernel.asm	/^ffff800000107185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107189	kernel.asm	/^ffff800000107189:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010718d	kernel.asm	/^ffff80000010718d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107190	kernel.asm	/^ffff800000107190:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000107197	kernel.asm	/^ffff800000107197:	80 ff ff $/;"	l
ffff80000010719a	kernel.asm	/^ffff80000010719a:	ff d0                	callq  *%rax$/;"	l
ffff80000010719c	kernel.asm	/^ffff80000010719c:	90                   	nop$/;"	l
ffff80000010719d	kernel.asm	/^ffff80000010719d:	c9                   	leaveq $/;"	l
ffff80000010719e	kernel.asm	/^ffff80000010719e:	c3                   	retq   $/;"	l
ffff80000010719f	kernel.asm	/^ffff80000010719f <releasesleep>:$/;"	l
ffff80000010719f	kernel.asm	/^ffff80000010719f:	55                   	push   %rbp$/;"	l
ffff8000001071a0	kernel.asm	/^ffff8000001071a0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001071a3	kernel.asm	/^ffff8000001071a3:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001071a7	kernel.asm	/^ffff8000001071a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001071ab	kernel.asm	/^ffff8000001071ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071af	kernel.asm	/^ffff8000001071af:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001071b3	kernel.asm	/^ffff8000001071b3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001071b6	kernel.asm	/^ffff8000001071b6:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001071bd	kernel.asm	/^ffff8000001071bd:	80 ff ff $/;"	l
ffff8000001071c0	kernel.asm	/^ffff8000001071c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001071c2	kernel.asm	/^ffff8000001071c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071c6	kernel.asm	/^ffff8000001071c6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001071cc	kernel.asm	/^ffff8000001071cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071d0	kernel.asm	/^ffff8000001071d0:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff8000001071d7	kernel.asm	/^ffff8000001071d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071db	kernel.asm	/^ffff8000001071db:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001071de	kernel.asm	/^ffff8000001071de:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff8000001071e5	kernel.asm	/^ffff8000001071e5:	80 ff ff $/;"	l
ffff8000001071e8	kernel.asm	/^ffff8000001071e8:	ff d0                	callq  *%rax$/;"	l
ffff8000001071ea	kernel.asm	/^ffff8000001071ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071ee	kernel.asm	/^ffff8000001071ee:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001071f2	kernel.asm	/^ffff8000001071f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001071f5	kernel.asm	/^ffff8000001071f5:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001071fc	kernel.asm	/^ffff8000001071fc:	80 ff ff $/;"	l
ffff8000001071ff	kernel.asm	/^ffff8000001071ff:	ff d0                	callq  *%rax$/;"	l
ffff800000107201	kernel.asm	/^ffff800000107201:	90                   	nop$/;"	l
ffff800000107202	kernel.asm	/^ffff800000107202:	c9                   	leaveq $/;"	l
ffff800000107203	kernel.asm	/^ffff800000107203:	c3                   	retq   $/;"	l
ffff800000107204	kernel.asm	/^ffff800000107204 <holdingsleep>:$/;"	l
ffff800000107204	kernel.asm	/^ffff800000107204:	55                   	push   %rbp$/;"	l
ffff800000107205	kernel.asm	/^ffff800000107205:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107208	kernel.asm	/^ffff800000107208:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010720c	kernel.asm	/^ffff80000010720c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107210	kernel.asm	/^ffff800000107210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107214	kernel.asm	/^ffff800000107214:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107218	kernel.asm	/^ffff800000107218:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010721b	kernel.asm	/^ffff80000010721b:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000107222	kernel.asm	/^ffff800000107222:	80 ff ff $/;"	l
ffff800000107225	kernel.asm	/^ffff800000107225:	ff d0                	callq  *%rax$/;"	l
ffff800000107227	kernel.asm	/^ffff800000107227:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010722b	kernel.asm	/^ffff80000010722b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010722d	kernel.asm	/^ffff80000010722d:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107230	kernel.asm	/^ffff800000107230:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107234	kernel.asm	/^ffff800000107234:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107238	kernel.asm	/^ffff800000107238:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010723b	kernel.asm	/^ffff80000010723b:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000107242	kernel.asm	/^ffff800000107242:	80 ff ff $/;"	l
ffff800000107245	kernel.asm	/^ffff800000107245:	ff d0                	callq  *%rax$/;"	l
ffff800000107247	kernel.asm	/^ffff800000107247:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010724a	kernel.asm	/^ffff80000010724a:	c9                   	leaveq $/;"	l
ffff80000010724b	kernel.asm	/^ffff80000010724b:	c3                   	retq   $/;"	l
ffff80000010724c	kernel.asm	/^ffff80000010724c <readeflags>:$/;"	l
ffff80000010724c	kernel.asm	/^ffff80000010724c:	55                   	push   %rbp$/;"	l
ffff80000010724d	kernel.asm	/^ffff80000010724d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107250	kernel.asm	/^ffff800000107250:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107254	kernel.asm	/^ffff800000107254:	9c                   	pushfq $/;"	l
ffff800000107255	kernel.asm	/^ffff800000107255:	58                   	pop    %rax$/;"	l
ffff800000107256	kernel.asm	/^ffff800000107256:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010725a	kernel.asm	/^ffff80000010725a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010725e	kernel.asm	/^ffff80000010725e:	c9                   	leaveq $/;"	l
ffff80000010725f	kernel.asm	/^ffff80000010725f:	c3                   	retq   $/;"	l
ffff800000107260	kernel.asm	/^ffff800000107260 <cli>:$/;"	l
ffff800000107260	kernel.asm	/^ffff800000107260:	55                   	push   %rbp$/;"	l
ffff800000107261	kernel.asm	/^ffff800000107261:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107264	kernel.asm	/^ffff800000107264:	fa                   	cli    $/;"	l
ffff800000107265	kernel.asm	/^ffff800000107265:	90                   	nop$/;"	l
ffff800000107266	kernel.asm	/^ffff800000107266:	5d                   	pop    %rbp$/;"	l
ffff800000107267	kernel.asm	/^ffff800000107267:	c3                   	retq   $/;"	l
ffff800000107268	kernel.asm	/^ffff800000107268 <sti>:$/;"	l
ffff800000107268	kernel.asm	/^ffff800000107268:	55                   	push   %rbp$/;"	l
ffff800000107269	kernel.asm	/^ffff800000107269:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010726c	kernel.asm	/^ffff80000010726c:	fb                   	sti    $/;"	l
ffff80000010726d	kernel.asm	/^ffff80000010726d:	90                   	nop$/;"	l
ffff80000010726e	kernel.asm	/^ffff80000010726e:	5d                   	pop    %rbp$/;"	l
ffff80000010726f	kernel.asm	/^ffff80000010726f:	c3                   	retq   $/;"	l
ffff800000107270	kernel.asm	/^ffff800000107270 <xchg>:$/;"	l
ffff800000107270	kernel.asm	/^ffff800000107270:	55                   	push   %rbp$/;"	l
ffff800000107271	kernel.asm	/^ffff800000107271:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107274	kernel.asm	/^ffff800000107274:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107278	kernel.asm	/^ffff800000107278:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010727c	kernel.asm	/^ffff80000010727c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107280	kernel.asm	/^ffff800000107280:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107284	kernel.asm	/^ffff800000107284:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107288	kernel.asm	/^ffff800000107288:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff80000010728c	kernel.asm	/^ffff80000010728c:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff80000010728f	kernel.asm	/^ffff80000010728f:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107292	kernel.asm	/^ffff800000107292:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107295	kernel.asm	/^ffff800000107295:	c9                   	leaveq $/;"	l
ffff800000107296	kernel.asm	/^ffff800000107296:	c3                   	retq   $/;"	l
ffff800000107297	kernel.asm	/^ffff800000107297 <initlock>:$/;"	l
ffff800000107297	kernel.asm	/^ffff800000107297:	55                   	push   %rbp$/;"	l
ffff800000107298	kernel.asm	/^ffff800000107298:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010729b	kernel.asm	/^ffff80000010729b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010729f	kernel.asm	/^ffff80000010729f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001072a3	kernel.asm	/^ffff8000001072a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001072a7	kernel.asm	/^ffff8000001072a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072ab	kernel.asm	/^ffff8000001072ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001072af	kernel.asm	/^ffff8000001072af:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff8000001072b3	kernel.asm	/^ffff8000001072b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072b7	kernel.asm	/^ffff8000001072b7:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001072bd	kernel.asm	/^ffff8000001072bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072c1	kernel.asm	/^ffff8000001072c1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001072c8	kernel.asm	/^ffff8000001072c8:	00 $/;"	l
ffff8000001072c9	kernel.asm	/^ffff8000001072c9:	90                   	nop$/;"	l
ffff8000001072ca	kernel.asm	/^ffff8000001072ca:	c9                   	leaveq $/;"	l
ffff8000001072cb	kernel.asm	/^ffff8000001072cb:	c3                   	retq   $/;"	l
ffff8000001072cc	kernel.asm	/^ffff8000001072cc <acquire>:$/;"	l
ffff8000001072cc	kernel.asm	/^ffff8000001072cc:	55                   	push   %rbp$/;"	l
ffff8000001072cd	kernel.asm	/^ffff8000001072cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001072d0	kernel.asm	/^ffff8000001072d0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001072d4	kernel.asm	/^ffff8000001072d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001072d8	kernel.asm	/^ffff8000001072d8:	48 b8 df 74 10 00 00 	movabs $0xffff8000001074df,%rax$/;"	l
ffff8000001072df	kernel.asm	/^ffff8000001072df:	80 ff ff $/;"	l
ffff8000001072e2	kernel.asm	/^ffff8000001072e2:	ff d0                	callq  *%rax$/;"	l
ffff8000001072e4	kernel.asm	/^ffff8000001072e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072e8	kernel.asm	/^ffff8000001072e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001072eb	kernel.asm	/^ffff8000001072eb:	48 b8 a3 74 10 00 00 	movabs $0xffff8000001074a3,%rax$/;"	l
ffff8000001072f2	kernel.asm	/^ffff8000001072f2:	80 ff ff $/;"	l
ffff8000001072f5	kernel.asm	/^ffff8000001072f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001072f7	kernel.asm	/^ffff8000001072f7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001072f9	kernel.asm	/^ffff8000001072f9:	74 16                	je     ffff800000107311 <acquire+0x45>$/;"	l
ffff8000001072fb	kernel.asm	/^ffff8000001072fb:	48 bf 22 c0 10 00 00 	movabs $0xffff80000010c022,%rdi$/;"	l
ffff800000107302	kernel.asm	/^ffff800000107302:	80 ff ff $/;"	l
ffff800000107305	kernel.asm	/^ffff800000107305:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010730c	kernel.asm	/^ffff80000010730c:	80 ff ff $/;"	l
ffff80000010730f	kernel.asm	/^ffff80000010730f:	ff d0                	callq  *%rax$/;"	l
ffff800000107311	kernel.asm	/^ffff800000107311:	90                   	nop$/;"	l
ffff800000107312	kernel.asm	/^ffff800000107312:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107316	kernel.asm	/^ffff800000107316:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010731b	kernel.asm	/^ffff80000010731b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010731e	kernel.asm	/^ffff80000010731e:	48 b8 70 72 10 00 00 	movabs $0xffff800000107270,%rax$/;"	l
ffff800000107325	kernel.asm	/^ffff800000107325:	80 ff ff $/;"	l
ffff800000107328	kernel.asm	/^ffff800000107328:	ff d0                	callq  *%rax$/;"	l
ffff80000010732a	kernel.asm	/^ffff80000010732a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010732c	kernel.asm	/^ffff80000010732c:	75 e4                	jne    ffff800000107312 <acquire+0x46>$/;"	l
ffff80000010732e	kernel.asm	/^ffff80000010732e:	0f ae f0             	mfence $/;"	l
ffff800000107331	kernel.asm	/^ffff800000107331:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107335	kernel.asm	/^ffff800000107335:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff80000010733c	kernel.asm	/^ffff80000010733c:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000107340	kernel.asm	/^ffff800000107340:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000107344	kernel.asm	/^ffff800000107344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107348	kernel.asm	/^ffff800000107348:	48 8d 50 18          	lea    0x18(%rax),%rdx$/;"	l
ffff80000010734c	kernel.asm	/^ffff80000010734c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000107350	kernel.asm	/^ffff800000107350:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107353	kernel.asm	/^ffff800000107353:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107356	kernel.asm	/^ffff800000107356:	48 b8 d6 73 10 00 00 	movabs $0xffff8000001073d6,%rax$/;"	l
ffff80000010735d	kernel.asm	/^ffff80000010735d:	80 ff ff $/;"	l
ffff800000107360	kernel.asm	/^ffff800000107360:	ff d0                	callq  *%rax$/;"	l
ffff800000107362	kernel.asm	/^ffff800000107362:	90                   	nop$/;"	l
ffff800000107363	kernel.asm	/^ffff800000107363:	c9                   	leaveq $/;"	l
ffff800000107364	kernel.asm	/^ffff800000107364:	c3                   	retq   $/;"	l
ffff800000107365	kernel.asm	/^ffff800000107365 <release>:$/;"	l
ffff800000107365	kernel.asm	/^ffff800000107365:	55                   	push   %rbp$/;"	l
ffff800000107366	kernel.asm	/^ffff800000107366:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107369	kernel.asm	/^ffff800000107369:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010736d	kernel.asm	/^ffff80000010736d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107371	kernel.asm	/^ffff800000107371:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107375	kernel.asm	/^ffff800000107375:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107378	kernel.asm	/^ffff800000107378:	48 b8 a3 74 10 00 00 	movabs $0xffff8000001074a3,%rax$/;"	l
ffff80000010737f	kernel.asm	/^ffff80000010737f:	80 ff ff $/;"	l
ffff800000107382	kernel.asm	/^ffff800000107382:	ff d0                	callq  *%rax$/;"	l
ffff800000107384	kernel.asm	/^ffff800000107384:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107386	kernel.asm	/^ffff800000107386:	75 16                	jne    ffff80000010739e <release+0x39>$/;"	l
ffff800000107388	kernel.asm	/^ffff800000107388:	48 bf 2a c0 10 00 00 	movabs $0xffff80000010c02a,%rdi$/;"	l
ffff80000010738f	kernel.asm	/^ffff80000010738f:	80 ff ff $/;"	l
ffff800000107392	kernel.asm	/^ffff800000107392:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000107399	kernel.asm	/^ffff800000107399:	80 ff ff $/;"	l
ffff80000010739c	kernel.asm	/^ffff80000010739c:	ff d0                	callq  *%rax$/;"	l
ffff80000010739e	kernel.asm	/^ffff80000010739e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073a2	kernel.asm	/^ffff8000001073a2:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)$/;"	l
ffff8000001073a9	kernel.asm	/^ffff8000001073a9:	00 $/;"	l
ffff8000001073aa	kernel.asm	/^ffff8000001073aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073ae	kernel.asm	/^ffff8000001073ae:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001073b5	kernel.asm	/^ffff8000001073b5:	00 $/;"	l
ffff8000001073b6	kernel.asm	/^ffff8000001073b6:	0f ae f0             	mfence $/;"	l
ffff8000001073b9	kernel.asm	/^ffff8000001073b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073bd	kernel.asm	/^ffff8000001073bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001073c1	kernel.asm	/^ffff8000001073c1:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001073c7	kernel.asm	/^ffff8000001073c7:	48 b8 59 75 10 00 00 	movabs $0xffff800000107559,%rax$/;"	l
ffff8000001073ce	kernel.asm	/^ffff8000001073ce:	80 ff ff $/;"	l
ffff8000001073d1	kernel.asm	/^ffff8000001073d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001073d3	kernel.asm	/^ffff8000001073d3:	90                   	nop$/;"	l
ffff8000001073d4	kernel.asm	/^ffff8000001073d4:	c9                   	leaveq $/;"	l
ffff8000001073d5	kernel.asm	/^ffff8000001073d5:	c3                   	retq   $/;"	l
ffff8000001073d6	kernel.asm	/^ffff8000001073d6 <getcallerpcs>:$/;"	l
ffff8000001073d6	kernel.asm	/^ffff8000001073d6:	55                   	push   %rbp$/;"	l
ffff8000001073d7	kernel.asm	/^ffff8000001073d7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001073da	kernel.asm	/^ffff8000001073da:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001073de	kernel.asm	/^ffff8000001073de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001073e2	kernel.asm	/^ffff8000001073e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001073e6	kernel.asm	/^ffff8000001073e6:	48 89 e8             	mov    %rbp,%rax$/;"	l
ffff8000001073e9	kernel.asm	/^ffff8000001073e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001073ed	kernel.asm	/^ffff8000001073ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff8000001073f1	kernel.asm	/^ffff8000001073f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073f5	kernel.asm	/^ffff8000001073f5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001073f8	kernel.asm	/^ffff8000001073f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001073fb	kernel.asm	/^ffff8000001073fb:	48 b8 0a 74 10 00 00 	movabs $0xffff80000010740a,%rax$/;"	l
ffff800000107402	kernel.asm	/^ffff800000107402:	80 ff ff $/;"	l
ffff800000107405	kernel.asm	/^ffff800000107405:	ff d0                	callq  *%rax$/;"	l
ffff800000107407	kernel.asm	/^ffff800000107407:	90                   	nop$/;"	l
ffff800000107408	kernel.asm	/^ffff800000107408:	c9                   	leaveq $/;"	l
ffff800000107409	kernel.asm	/^ffff800000107409:	c3                   	retq   $/;"	l
ffff80000010740a	kernel.asm	/^ffff80000010740a <getstackpcs>:$/;"	l
ffff80000010740a	kernel.asm	/^ffff80000010740a:	55                   	push   %rbp$/;"	l
ffff80000010740b	kernel.asm	/^ffff80000010740b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010740e	kernel.asm	/^ffff80000010740e:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107412	kernel.asm	/^ffff800000107412:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107416	kernel.asm	/^ffff800000107416:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010741a	kernel.asm	/^ffff80000010741a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107421	kernel.asm	/^ffff800000107421:	eb 50                	jmp    ffff800000107473 <getstackpcs+0x69>$/;"	l
ffff800000107423	kernel.asm	/^ffff800000107423:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000107428	kernel.asm	/^ffff800000107428:	74 70                	je     ffff80000010749a <getstackpcs+0x90>$/;"	l
ffff80000010742a	kernel.asm	/^ffff80000010742a:	48 b8 ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rax$/;"	l
ffff800000107431	kernel.asm	/^ffff800000107431:	7f ff ff $/;"	l
ffff800000107434	kernel.asm	/^ffff800000107434:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107438	kernel.asm	/^ffff800000107438:	76 60                	jbe    ffff80000010749a <getstackpcs+0x90>$/;"	l
ffff80000010743a	kernel.asm	/^ffff80000010743a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010743f	kernel.asm	/^ffff80000010743f:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107443	kernel.asm	/^ffff800000107443:	74 55                	je     ffff80000010749a <getstackpcs+0x90>$/;"	l
ffff800000107445	kernel.asm	/^ffff800000107445:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107448	kernel.asm	/^ffff800000107448:	48 98                	cltq   $/;"	l
ffff80000010744a	kernel.asm	/^ffff80000010744a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107451	kernel.asm	/^ffff800000107451:	00 $/;"	l
ffff800000107452	kernel.asm	/^ffff800000107452:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107456	kernel.asm	/^ffff800000107456:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000107459	kernel.asm	/^ffff800000107459:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010745d	kernel.asm	/^ffff80000010745d:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000107461	kernel.asm	/^ffff800000107461:	48 89 02             	mov    %rax,(%rdx)$/;"	l
ffff800000107464	kernel.asm	/^ffff800000107464:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107468	kernel.asm	/^ffff800000107468:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010746b	kernel.asm	/^ffff80000010746b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010746f	kernel.asm	/^ffff80000010746f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107473	kernel.asm	/^ffff800000107473:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000107477	kernel.asm	/^ffff800000107477:	7e aa                	jle    ffff800000107423 <getstackpcs+0x19>$/;"	l
ffff800000107479	kernel.asm	/^ffff800000107479:	eb 1f                	jmp    ffff80000010749a <getstackpcs+0x90>$/;"	l
ffff80000010747b	kernel.asm	/^ffff80000010747b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010747e	kernel.asm	/^ffff80000010747e:	48 98                	cltq   $/;"	l
ffff800000107480	kernel.asm	/^ffff800000107480:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107487	kernel.asm	/^ffff800000107487:	00 $/;"	l
ffff800000107488	kernel.asm	/^ffff800000107488:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010748c	kernel.asm	/^ffff80000010748c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010748f	kernel.asm	/^ffff80000010748f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000107496	kernel.asm	/^ffff800000107496:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010749a	kernel.asm	/^ffff80000010749a:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff80000010749e	kernel.asm	/^ffff80000010749e:	7e db                	jle    ffff80000010747b <getstackpcs+0x71>$/;"	l
ffff8000001074a0	kernel.asm	/^ffff8000001074a0:	90                   	nop$/;"	l
ffff8000001074a1	kernel.asm	/^ffff8000001074a1:	c9                   	leaveq $/;"	l
ffff8000001074a2	kernel.asm	/^ffff8000001074a2:	c3                   	retq   $/;"	l
ffff8000001074a3	kernel.asm	/^ffff8000001074a3 <holding>:$/;"	l
ffff8000001074a3	kernel.asm	/^ffff8000001074a3:	55                   	push   %rbp$/;"	l
ffff8000001074a4	kernel.asm	/^ffff8000001074a4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001074a7	kernel.asm	/^ffff8000001074a7:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001074ab	kernel.asm	/^ffff8000001074ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001074af	kernel.asm	/^ffff8000001074af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074b3	kernel.asm	/^ffff8000001074b3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001074b5	kernel.asm	/^ffff8000001074b5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001074b7	kernel.asm	/^ffff8000001074b7:	74 1f                	je     ffff8000001074d8 <holding+0x35>$/;"	l
ffff8000001074b9	kernel.asm	/^ffff8000001074b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074bd	kernel.asm	/^ffff8000001074bd:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff8000001074c1	kernel.asm	/^ffff8000001074c1:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001074c8	kernel.asm	/^ffff8000001074c8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001074cc	kernel.asm	/^ffff8000001074cc:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001074cf	kernel.asm	/^ffff8000001074cf:	75 07                	jne    ffff8000001074d8 <holding+0x35>$/;"	l
ffff8000001074d1	kernel.asm	/^ffff8000001074d1:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001074d6	kernel.asm	/^ffff8000001074d6:	eb 05                	jmp    ffff8000001074dd <holding+0x3a>$/;"	l
ffff8000001074d8	kernel.asm	/^ffff8000001074d8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001074dd	kernel.asm	/^ffff8000001074dd:	c9                   	leaveq $/;"	l
ffff8000001074de	kernel.asm	/^ffff8000001074de:	c3                   	retq   $/;"	l
ffff8000001074df	kernel.asm	/^ffff8000001074df <pushcli>:$/;"	l
ffff8000001074df	kernel.asm	/^ffff8000001074df:	55                   	push   %rbp$/;"	l
ffff8000001074e0	kernel.asm	/^ffff8000001074e0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001074e3	kernel.asm	/^ffff8000001074e3:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001074e7	kernel.asm	/^ffff8000001074e7:	48 b8 4c 72 10 00 00 	movabs $0xffff80000010724c,%rax$/;"	l
ffff8000001074ee	kernel.asm	/^ffff8000001074ee:	80 ff ff $/;"	l
ffff8000001074f1	kernel.asm	/^ffff8000001074f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001074f3	kernel.asm	/^ffff8000001074f3:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001074f6	kernel.asm	/^ffff8000001074f6:	48 b8 60 72 10 00 00 	movabs $0xffff800000107260,%rax$/;"	l
ffff8000001074fd	kernel.asm	/^ffff8000001074fd:	80 ff ff $/;"	l
ffff800000107500	kernel.asm	/^ffff800000107500:	ff d0                	callq  *%rax$/;"	l
ffff800000107502	kernel.asm	/^ffff800000107502:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107509	kernel.asm	/^ffff800000107509:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010750d	kernel.asm	/^ffff80000010750d:	8b 80 e4 00 00 00    	mov    0xe4(%rax),%eax$/;"	l
ffff800000107513	kernel.asm	/^ffff800000107513:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107515	kernel.asm	/^ffff800000107515:	75 1a                	jne    ffff800000107531 <pushcli+0x52>$/;"	l
ffff800000107517	kernel.asm	/^ffff800000107517:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff80000010751e	kernel.asm	/^ffff80000010751e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107522	kernel.asm	/^ffff800000107522:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107525	kernel.asm	/^ffff800000107525:	81 e2 00 02 00 00    	and    $0x200,%edx$/;"	l
ffff80000010752b	kernel.asm	/^ffff80000010752b:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)$/;"	l
ffff800000107531	kernel.asm	/^ffff800000107531:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107538	kernel.asm	/^ffff800000107538:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010753c	kernel.asm	/^ffff80000010753c:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000107543	kernel.asm	/^ffff800000107543:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000107547	kernel.asm	/^ffff800000107547:	8b 92 e4 00 00 00    	mov    0xe4(%rdx),%edx$/;"	l
ffff80000010754d	kernel.asm	/^ffff80000010754d:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff800000107550	kernel.asm	/^ffff800000107550:	89 90 e4 00 00 00    	mov    %edx,0xe4(%rax)$/;"	l
ffff800000107556	kernel.asm	/^ffff800000107556:	90                   	nop$/;"	l
ffff800000107557	kernel.asm	/^ffff800000107557:	c9                   	leaveq $/;"	l
ffff800000107558	kernel.asm	/^ffff800000107558:	c3                   	retq   $/;"	l
ffff800000107559	kernel.asm	/^ffff800000107559 <popcli>:$/;"	l
ffff800000107559	kernel.asm	/^ffff800000107559:	55                   	push   %rbp$/;"	l
ffff80000010755a	kernel.asm	/^ffff80000010755a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010755d	kernel.asm	/^ffff80000010755d:	48 b8 4c 72 10 00 00 	movabs $0xffff80000010724c,%rax$/;"	l
ffff800000107564	kernel.asm	/^ffff800000107564:	80 ff ff $/;"	l
ffff800000107567	kernel.asm	/^ffff800000107567:	ff d0                	callq  *%rax$/;"	l
ffff800000107569	kernel.asm	/^ffff800000107569:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff80000010756e	kernel.asm	/^ffff80000010756e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107571	kernel.asm	/^ffff800000107571:	74 16                	je     ffff800000107589 <popcli+0x30>$/;"	l
ffff800000107573	kernel.asm	/^ffff800000107573:	48 bf 32 c0 10 00 00 	movabs $0xffff80000010c032,%rdi$/;"	l
ffff80000010757a	kernel.asm	/^ffff80000010757a:	80 ff ff $/;"	l
ffff80000010757d	kernel.asm	/^ffff80000010757d:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000107584	kernel.asm	/^ffff800000107584:	80 ff ff $/;"	l
ffff800000107587	kernel.asm	/^ffff800000107587:	ff d0                	callq  *%rax$/;"	l
ffff800000107589	kernel.asm	/^ffff800000107589:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107590	kernel.asm	/^ffff800000107590:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107594	kernel.asm	/^ffff800000107594:	8b 90 e4 00 00 00    	mov    0xe4(%rax),%edx$/;"	l
ffff80000010759a	kernel.asm	/^ffff80000010759a:	83 ea 01             	sub    $0x1,%edx$/;"	l
ffff80000010759d	kernel.asm	/^ffff80000010759d:	89 90 e4 00 00 00    	mov    %edx,0xe4(%rax)$/;"	l
ffff8000001075a3	kernel.asm	/^ffff8000001075a3:	8b 80 e4 00 00 00    	mov    0xe4(%rax),%eax$/;"	l
ffff8000001075a9	kernel.asm	/^ffff8000001075a9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001075ab	kernel.asm	/^ffff8000001075ab:	79 16                	jns    ffff8000001075c3 <popcli+0x6a>$/;"	l
ffff8000001075ad	kernel.asm	/^ffff8000001075ad:	48 bf 49 c0 10 00 00 	movabs $0xffff80000010c049,%rdi$/;"	l
ffff8000001075b4	kernel.asm	/^ffff8000001075b4:	80 ff ff $/;"	l
ffff8000001075b7	kernel.asm	/^ffff8000001075b7:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001075be	kernel.asm	/^ffff8000001075be:	80 ff ff $/;"	l
ffff8000001075c1	kernel.asm	/^ffff8000001075c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001075c3	kernel.asm	/^ffff8000001075c3:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001075ca	kernel.asm	/^ffff8000001075ca:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001075ce	kernel.asm	/^ffff8000001075ce:	8b 80 e4 00 00 00    	mov    0xe4(%rax),%eax$/;"	l
ffff8000001075d4	kernel.asm	/^ffff8000001075d4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001075d6	kernel.asm	/^ffff8000001075d6:	75 21                	jne    ffff8000001075f9 <popcli+0xa0>$/;"	l
ffff8000001075d8	kernel.asm	/^ffff8000001075d8:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001075df	kernel.asm	/^ffff8000001075df:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001075e3	kernel.asm	/^ffff8000001075e3:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff8000001075e9	kernel.asm	/^ffff8000001075e9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001075eb	kernel.asm	/^ffff8000001075eb:	74 0c                	je     ffff8000001075f9 <popcli+0xa0>$/;"	l
ffff8000001075ed	kernel.asm	/^ffff8000001075ed:	48 b8 68 72 10 00 00 	movabs $0xffff800000107268,%rax$/;"	l
ffff8000001075f4	kernel.asm	/^ffff8000001075f4:	80 ff ff $/;"	l
ffff8000001075f7	kernel.asm	/^ffff8000001075f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001075f9	kernel.asm	/^ffff8000001075f9:	90                   	nop$/;"	l
ffff8000001075fa	kernel.asm	/^ffff8000001075fa:	5d                   	pop    %rbp$/;"	l
ffff8000001075fb	kernel.asm	/^ffff8000001075fb:	c3                   	retq   $/;"	l
ffff8000001075fc	kernel.asm	/^ffff8000001075fc <stosb>:$/;"	l
ffff8000001075fc	kernel.asm	/^ffff8000001075fc:	55                   	push   %rbp$/;"	l
ffff8000001075fd	kernel.asm	/^ffff8000001075fd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107600	kernel.asm	/^ffff800000107600:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107604	kernel.asm	/^ffff800000107604:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107608	kernel.asm	/^ffff800000107608:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010760b	kernel.asm	/^ffff80000010760b:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010760e	kernel.asm	/^ffff80000010760e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107612	kernel.asm	/^ffff800000107612:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000107615	kernel.asm	/^ffff800000107615:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107618	kernel.asm	/^ffff800000107618:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010761b	kernel.asm	/^ffff80000010761b:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff80000010761e	kernel.asm	/^ffff80000010761e:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107620	kernel.asm	/^ffff800000107620:	fc                   	cld    $/;"	l
ffff800000107621	kernel.asm	/^ffff800000107621:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff800000107623	kernel.asm	/^ffff800000107623:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000107625	kernel.asm	/^ffff800000107625:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff800000107628	kernel.asm	/^ffff800000107628:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff80000010762c	kernel.asm	/^ffff80000010762c:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010762f	kernel.asm	/^ffff80000010762f:	90                   	nop$/;"	l
ffff800000107630	kernel.asm	/^ffff800000107630:	c9                   	leaveq $/;"	l
ffff800000107631	kernel.asm	/^ffff800000107631:	c3                   	retq   $/;"	l
ffff800000107632	kernel.asm	/^ffff800000107632 <stosl>:$/;"	l
ffff800000107632	kernel.asm	/^ffff800000107632:	55                   	push   %rbp$/;"	l
ffff800000107633	kernel.asm	/^ffff800000107633:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107636	kernel.asm	/^ffff800000107636:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010763a	kernel.asm	/^ffff80000010763a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010763e	kernel.asm	/^ffff80000010763e:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000107641	kernel.asm	/^ffff800000107641:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107644	kernel.asm	/^ffff800000107644:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107648	kernel.asm	/^ffff800000107648:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff80000010764b	kernel.asm	/^ffff80000010764b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010764e	kernel.asm	/^ffff80000010764e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107651	kernel.asm	/^ffff800000107651:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff800000107654	kernel.asm	/^ffff800000107654:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107656	kernel.asm	/^ffff800000107656:	fc                   	cld    $/;"	l
ffff800000107657	kernel.asm	/^ffff800000107657:	f3 ab                	rep stos %eax,%es:(%rdi)$/;"	l
ffff800000107659	kernel.asm	/^ffff800000107659:	89 ca                	mov    %ecx,%edx$/;"	l
ffff80000010765b	kernel.asm	/^ffff80000010765b:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010765e	kernel.asm	/^ffff80000010765e:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff800000107662	kernel.asm	/^ffff800000107662:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107665	kernel.asm	/^ffff800000107665:	90                   	nop$/;"	l
ffff800000107666	kernel.asm	/^ffff800000107666:	c9                   	leaveq $/;"	l
ffff800000107667	kernel.asm	/^ffff800000107667:	c3                   	retq   $/;"	l
ffff800000107668	kernel.asm	/^ffff800000107668 <memset>:$/;"	l
ffff800000107668	kernel.asm	/^ffff800000107668:	55                   	push   %rbp$/;"	l
ffff800000107669	kernel.asm	/^ffff800000107669:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010766c	kernel.asm	/^ffff80000010766c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107670	kernel.asm	/^ffff800000107670:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107674	kernel.asm	/^ffff800000107674:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000107677	kernel.asm	/^ffff800000107677:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010767a	kernel.asm	/^ffff80000010767a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010767e	kernel.asm	/^ffff80000010767e:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000107681	kernel.asm	/^ffff800000107681:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107684	kernel.asm	/^ffff800000107684:	75 4f                	jne    ffff8000001076d5 <memset+0x6d>$/;"	l
ffff800000107686	kernel.asm	/^ffff800000107686:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000107689	kernel.asm	/^ffff800000107689:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff80000010768c	kernel.asm	/^ffff80000010768c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010768e	kernel.asm	/^ffff80000010768e:	75 45                	jne    ffff8000001076d5 <memset+0x6d>$/;"	l
ffff800000107690	kernel.asm	/^ffff800000107690:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)$/;"	l
ffff800000107697	kernel.asm	/^ffff800000107697:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010769a	kernel.asm	/^ffff80000010769a:	c1 e8 02             	shr    $0x2,%eax$/;"	l
ffff80000010769d	kernel.asm	/^ffff80000010769d:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010769f	kernel.asm	/^ffff80000010769f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076a2	kernel.asm	/^ffff8000001076a2:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001076a5	kernel.asm	/^ffff8000001076a5:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001076a7	kernel.asm	/^ffff8000001076a7:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076aa	kernel.asm	/^ffff8000001076aa:	c1 e0 10             	shl    $0x10,%eax$/;"	l
ffff8000001076ad	kernel.asm	/^ffff8000001076ad:	09 c2                	or     %eax,%edx$/;"	l
ffff8000001076af	kernel.asm	/^ffff8000001076af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076b2	kernel.asm	/^ffff8000001076b2:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001076b5	kernel.asm	/^ffff8000001076b5:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001076b7	kernel.asm	/^ffff8000001076b7:	0b 45 f4             	or     -0xc(%rbp),%eax$/;"	l
ffff8000001076ba	kernel.asm	/^ffff8000001076ba:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001076bc	kernel.asm	/^ffff8000001076bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076c0	kernel.asm	/^ffff8000001076c0:	89 f2                	mov    %esi,%edx$/;"	l
ffff8000001076c2	kernel.asm	/^ffff8000001076c2:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001076c4	kernel.asm	/^ffff8000001076c4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001076c7	kernel.asm	/^ffff8000001076c7:	48 b8 32 76 10 00 00 	movabs $0xffff800000107632,%rax$/;"	l
ffff8000001076ce	kernel.asm	/^ffff8000001076ce:	80 ff ff $/;"	l
ffff8000001076d1	kernel.asm	/^ffff8000001076d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001076d3	kernel.asm	/^ffff8000001076d3:	eb 1b                	jmp    ffff8000001076f0 <memset+0x88>$/;"	l
ffff8000001076d5	kernel.asm	/^ffff8000001076d5:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff8000001076d8	kernel.asm	/^ffff8000001076d8:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff8000001076db	kernel.asm	/^ffff8000001076db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076df	kernel.asm	/^ffff8000001076df:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001076e1	kernel.asm	/^ffff8000001076e1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001076e4	kernel.asm	/^ffff8000001076e4:	48 b8 fc 75 10 00 00 	movabs $0xffff8000001075fc,%rax$/;"	l
ffff8000001076eb	kernel.asm	/^ffff8000001076eb:	80 ff ff $/;"	l
ffff8000001076ee	kernel.asm	/^ffff8000001076ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001076f0	kernel.asm	/^ffff8000001076f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076f4	kernel.asm	/^ffff8000001076f4:	c9                   	leaveq $/;"	l
ffff8000001076f5	kernel.asm	/^ffff8000001076f5:	c3                   	retq   $/;"	l
ffff8000001076f6	kernel.asm	/^ffff8000001076f6 <memcmp>:$/;"	l
ffff8000001076f6	kernel.asm	/^ffff8000001076f6:	55                   	push   %rbp$/;"	l
ffff8000001076f7	kernel.asm	/^ffff8000001076f7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001076fa	kernel.asm	/^ffff8000001076fa:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff8000001076fe	kernel.asm	/^ffff8000001076fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107702	kernel.asm	/^ffff800000107702:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107706	kernel.asm	/^ffff800000107706:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107709	kernel.asm	/^ffff800000107709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010770d	kernel.asm	/^ffff80000010770d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107711	kernel.asm	/^ffff800000107711:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107715	kernel.asm	/^ffff800000107715:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107719	kernel.asm	/^ffff800000107719:	eb 36                	jmp    ffff800000107751 <memcmp+0x5b>$/;"	l
ffff80000010771b	kernel.asm	/^ffff80000010771b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010771f	kernel.asm	/^ffff80000010771f:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000107722	kernel.asm	/^ffff800000107722:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107726	kernel.asm	/^ffff800000107726:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107729	kernel.asm	/^ffff800000107729:	38 c2                	cmp    %al,%dl$/;"	l
ffff80000010772b	kernel.asm	/^ffff80000010772b:	74 1a                	je     ffff800000107747 <memcmp+0x51>$/;"	l
ffff80000010772d	kernel.asm	/^ffff80000010772d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107731	kernel.asm	/^ffff800000107731:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107734	kernel.asm	/^ffff800000107734:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000107737	kernel.asm	/^ffff800000107737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010773b	kernel.asm	/^ffff80000010773b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010773e	kernel.asm	/^ffff80000010773e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000107741	kernel.asm	/^ffff800000107741:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000107743	kernel.asm	/^ffff800000107743:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000107745	kernel.asm	/^ffff800000107745:	eb 1c                	jmp    ffff800000107763 <memcmp+0x6d>$/;"	l
ffff800000107747	kernel.asm	/^ffff800000107747:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff80000010774c	kernel.asm	/^ffff80000010774c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff800000107751	kernel.asm	/^ffff800000107751:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107754	kernel.asm	/^ffff800000107754:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107757	kernel.asm	/^ffff800000107757:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010775a	kernel.asm	/^ffff80000010775a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010775c	kernel.asm	/^ffff80000010775c:	75 bd                	jne    ffff80000010771b <memcmp+0x25>$/;"	l
ffff80000010775e	kernel.asm	/^ffff80000010775e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107763	kernel.asm	/^ffff800000107763:	c9                   	leaveq $/;"	l
ffff800000107764	kernel.asm	/^ffff800000107764:	c3                   	retq   $/;"	l
ffff800000107765	kernel.asm	/^ffff800000107765 <memmove>:$/;"	l
ffff800000107765	kernel.asm	/^ffff800000107765:	55                   	push   %rbp$/;"	l
ffff800000107766	kernel.asm	/^ffff800000107766:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107769	kernel.asm	/^ffff800000107769:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010776d	kernel.asm	/^ffff80000010776d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107771	kernel.asm	/^ffff800000107771:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107775	kernel.asm	/^ffff800000107775:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107778	kernel.asm	/^ffff800000107778:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010777c	kernel.asm	/^ffff80000010777c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107780	kernel.asm	/^ffff800000107780:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107784	kernel.asm	/^ffff800000107784:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107788	kernel.asm	/^ffff800000107788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010778c	kernel.asm	/^ffff80000010778c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff800000107790	kernel.asm	/^ffff800000107790:	73 63                	jae    ffff8000001077f5 <memmove+0x90>$/;"	l
ffff800000107792	kernel.asm	/^ffff800000107792:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000107795	kernel.asm	/^ffff800000107795:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107799	kernel.asm	/^ffff800000107799:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010779c	kernel.asm	/^ffff80000010779c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff8000001077a0	kernel.asm	/^ffff8000001077a0:	76 53                	jbe    ffff8000001077f5 <memmove+0x90>$/;"	l
ffff8000001077a2	kernel.asm	/^ffff8000001077a2:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077a5	kernel.asm	/^ffff8000001077a5:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff8000001077a9	kernel.asm	/^ffff8000001077a9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077ac	kernel.asm	/^ffff8000001077ac:	48 01 45 f0          	add    %rax,-0x10(%rbp)$/;"	l
ffff8000001077b0	kernel.asm	/^ffff8000001077b0:	eb 17                	jmp    ffff8000001077c9 <memmove+0x64>$/;"	l
ffff8000001077b2	kernel.asm	/^ffff8000001077b2:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)$/;"	l
ffff8000001077b7	kernel.asm	/^ffff8000001077b7:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)$/;"	l
ffff8000001077bc	kernel.asm	/^ffff8000001077bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001077c0	kernel.asm	/^ffff8000001077c0:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff8000001077c3	kernel.asm	/^ffff8000001077c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001077c7	kernel.asm	/^ffff8000001077c7:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001077c9	kernel.asm	/^ffff8000001077c9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077cc	kernel.asm	/^ffff8000001077cc:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001077cf	kernel.asm	/^ffff8000001077cf:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001077d2	kernel.asm	/^ffff8000001077d2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001077d4	kernel.asm	/^ffff8000001077d4:	75 dc                	jne    ffff8000001077b2 <memmove+0x4d>$/;"	l
ffff8000001077d6	kernel.asm	/^ffff8000001077d6:	eb 2a                	jmp    ffff800000107802 <memmove+0x9d>$/;"	l
ffff8000001077d8	kernel.asm	/^ffff8000001077d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001077dc	kernel.asm	/^ffff8000001077dc:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001077e0	kernel.asm	/^ffff8000001077e0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)$/;"	l
ffff8000001077e4	kernel.asm	/^ffff8000001077e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001077e8	kernel.asm	/^ffff8000001077e8:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff8000001077ec	kernel.asm	/^ffff8000001077ec:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)$/;"	l
ffff8000001077f0	kernel.asm	/^ffff8000001077f0:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff8000001077f3	kernel.asm	/^ffff8000001077f3:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001077f5	kernel.asm	/^ffff8000001077f5:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077f8	kernel.asm	/^ffff8000001077f8:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001077fb	kernel.asm	/^ffff8000001077fb:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001077fe	kernel.asm	/^ffff8000001077fe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107800	kernel.asm	/^ffff800000107800:	75 d6                	jne    ffff8000001077d8 <memmove+0x73>$/;"	l
ffff800000107802	kernel.asm	/^ffff800000107802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107806	kernel.asm	/^ffff800000107806:	c9                   	leaveq $/;"	l
ffff800000107807	kernel.asm	/^ffff800000107807:	c3                   	retq   $/;"	l
ffff800000107808	kernel.asm	/^ffff800000107808 <memcpy>:$/;"	l
ffff800000107808	kernel.asm	/^ffff800000107808:	55                   	push   %rbp$/;"	l
ffff800000107809	kernel.asm	/^ffff800000107809:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010780c	kernel.asm	/^ffff80000010780c:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107810	kernel.asm	/^ffff800000107810:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107814	kernel.asm	/^ffff800000107814:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107818	kernel.asm	/^ffff800000107818:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff80000010781b	kernel.asm	/^ffff80000010781b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010781e	kernel.asm	/^ffff80000010781e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000107822	kernel.asm	/^ffff800000107822:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107826	kernel.asm	/^ffff800000107826:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107829	kernel.asm	/^ffff800000107829:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010782c	kernel.asm	/^ffff80000010782c:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff800000107833	kernel.asm	/^ffff800000107833:	80 ff ff $/;"	l
ffff800000107836	kernel.asm	/^ffff800000107836:	ff d0                	callq  *%rax$/;"	l
ffff800000107838	kernel.asm	/^ffff800000107838:	c9                   	leaveq $/;"	l
ffff800000107839	kernel.asm	/^ffff800000107839:	c3                   	retq   $/;"	l
ffff80000010783a	kernel.asm	/^ffff80000010783a <strncmp>:$/;"	l
ffff80000010783a	kernel.asm	/^ffff80000010783a:	55                   	push   %rbp$/;"	l
ffff80000010783b	kernel.asm	/^ffff80000010783b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010783e	kernel.asm	/^ffff80000010783e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107842	kernel.asm	/^ffff800000107842:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107846	kernel.asm	/^ffff800000107846:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff80000010784a	kernel.asm	/^ffff80000010784a:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff80000010784d	kernel.asm	/^ffff80000010784d:	eb 0e                	jmp    ffff80000010785d <strncmp+0x23>$/;"	l
ffff80000010784f	kernel.asm	/^ffff80000010784f:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)$/;"	l
ffff800000107853	kernel.asm	/^ffff800000107853:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107858	kernel.asm	/^ffff800000107858:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff80000010785d	kernel.asm	/^ffff80000010785d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107861	kernel.asm	/^ffff800000107861:	74 1d                	je     ffff800000107880 <strncmp+0x46>$/;"	l
ffff800000107863	kernel.asm	/^ffff800000107863:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107867	kernel.asm	/^ffff800000107867:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010786a	kernel.asm	/^ffff80000010786a:	84 c0                	test   %al,%al$/;"	l
ffff80000010786c	kernel.asm	/^ffff80000010786c:	74 12                	je     ffff800000107880 <strncmp+0x46>$/;"	l
ffff80000010786e	kernel.asm	/^ffff80000010786e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107872	kernel.asm	/^ffff800000107872:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000107875	kernel.asm	/^ffff800000107875:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107879	kernel.asm	/^ffff800000107879:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010787c	kernel.asm	/^ffff80000010787c:	38 c2                	cmp    %al,%dl$/;"	l
ffff80000010787e	kernel.asm	/^ffff80000010787e:	74 cf                	je     ffff80000010784f <strncmp+0x15>$/;"	l
ffff800000107880	kernel.asm	/^ffff800000107880:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107884	kernel.asm	/^ffff800000107884:	75 07                	jne    ffff80000010788d <strncmp+0x53>$/;"	l
ffff800000107886	kernel.asm	/^ffff800000107886:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010788b	kernel.asm	/^ffff80000010788b:	eb 18                	jmp    ffff8000001078a5 <strncmp+0x6b>$/;"	l
ffff80000010788d	kernel.asm	/^ffff80000010788d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107891	kernel.asm	/^ffff800000107891:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107894	kernel.asm	/^ffff800000107894:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000107897	kernel.asm	/^ffff800000107897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010789b	kernel.asm	/^ffff80000010789b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010789e	kernel.asm	/^ffff80000010789e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001078a1	kernel.asm	/^ffff8000001078a1:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001078a3	kernel.asm	/^ffff8000001078a3:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001078a5	kernel.asm	/^ffff8000001078a5:	c9                   	leaveq $/;"	l
ffff8000001078a6	kernel.asm	/^ffff8000001078a6:	c3                   	retq   $/;"	l
ffff8000001078a7	kernel.asm	/^ffff8000001078a7 <strncpy>:$/;"	l
ffff8000001078a7	kernel.asm	/^ffff8000001078a7:	55                   	push   %rbp$/;"	l
ffff8000001078a8	kernel.asm	/^ffff8000001078a8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001078ab	kernel.asm	/^ffff8000001078ab:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff8000001078af	kernel.asm	/^ffff8000001078af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001078b3	kernel.asm	/^ffff8000001078b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001078b7	kernel.asm	/^ffff8000001078b7:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001078ba	kernel.asm	/^ffff8000001078ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001078be	kernel.asm	/^ffff8000001078be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001078c2	kernel.asm	/^ffff8000001078c2:	90                   	nop$/;"	l
ffff8000001078c3	kernel.asm	/^ffff8000001078c3:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001078c6	kernel.asm	/^ffff8000001078c6:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001078c9	kernel.asm	/^ffff8000001078c9:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001078cc	kernel.asm	/^ffff8000001078cc:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001078ce	kernel.asm	/^ffff8000001078ce:	7e 35                	jle    ffff800000107905 <strncpy+0x5e>$/;"	l
ffff8000001078d0	kernel.asm	/^ffff8000001078d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001078d4	kernel.asm	/^ffff8000001078d4:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001078d8	kernel.asm	/^ffff8000001078d8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff8000001078dc	kernel.asm	/^ffff8000001078dc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff8000001078e0	kernel.asm	/^ffff8000001078e0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff8000001078e4	kernel.asm	/^ffff8000001078e4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff8000001078e8	kernel.asm	/^ffff8000001078e8:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff8000001078eb	kernel.asm	/^ffff8000001078eb:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001078ed	kernel.asm	/^ffff8000001078ed:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001078f0	kernel.asm	/^ffff8000001078f0:	84 c0                	test   %al,%al$/;"	l
ffff8000001078f2	kernel.asm	/^ffff8000001078f2:	75 cf                	jne    ffff8000001078c3 <strncpy+0x1c>$/;"	l
ffff8000001078f4	kernel.asm	/^ffff8000001078f4:	eb 0f                	jmp    ffff800000107905 <strncpy+0x5e>$/;"	l
ffff8000001078f6	kernel.asm	/^ffff8000001078f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001078fa	kernel.asm	/^ffff8000001078fa:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001078fe	kernel.asm	/^ffff8000001078fe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107902	kernel.asm	/^ffff800000107902:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff800000107905	kernel.asm	/^ffff800000107905:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107908	kernel.asm	/^ffff800000107908:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff80000010790b	kernel.asm	/^ffff80000010790b:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010790e	kernel.asm	/^ffff80000010790e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107910	kernel.asm	/^ffff800000107910:	7f e4                	jg     ffff8000001078f6 <strncpy+0x4f>$/;"	l
ffff800000107912	kernel.asm	/^ffff800000107912:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107916	kernel.asm	/^ffff800000107916:	c9                   	leaveq $/;"	l
ffff800000107917	kernel.asm	/^ffff800000107917:	c3                   	retq   $/;"	l
ffff800000107918	kernel.asm	/^ffff800000107918 <safestrcpy>:$/;"	l
ffff800000107918	kernel.asm	/^ffff800000107918:	55                   	push   %rbp$/;"	l
ffff800000107919	kernel.asm	/^ffff800000107919:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010791c	kernel.asm	/^ffff80000010791c:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff800000107920	kernel.asm	/^ffff800000107920:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107924	kernel.asm	/^ffff800000107924:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107928	kernel.asm	/^ffff800000107928:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010792b	kernel.asm	/^ffff80000010792b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010792f	kernel.asm	/^ffff80000010792f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107933	kernel.asm	/^ffff800000107933:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107937	kernel.asm	/^ffff800000107937:	7f 06                	jg     ffff80000010793f <safestrcpy+0x27>$/;"	l
ffff800000107939	kernel.asm	/^ffff800000107939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010793d	kernel.asm	/^ffff80000010793d:	eb 39                	jmp    ffff800000107978 <safestrcpy+0x60>$/;"	l
ffff80000010793f	kernel.asm	/^ffff80000010793f:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff800000107943	kernel.asm	/^ffff800000107943:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107947	kernel.asm	/^ffff800000107947:	7e 24                	jle    ffff80000010796d <safestrcpy+0x55>$/;"	l
ffff800000107949	kernel.asm	/^ffff800000107949:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010794d	kernel.asm	/^ffff80000010794d:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000107951	kernel.asm	/^ffff800000107951:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107955	kernel.asm	/^ffff800000107955:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107959	kernel.asm	/^ffff800000107959:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff80000010795d	kernel.asm	/^ffff80000010795d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff800000107961	kernel.asm	/^ffff800000107961:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107964	kernel.asm	/^ffff800000107964:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000107966	kernel.asm	/^ffff800000107966:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107969	kernel.asm	/^ffff800000107969:	84 c0                	test   %al,%al$/;"	l
ffff80000010796b	kernel.asm	/^ffff80000010796b:	75 d2                	jne    ffff80000010793f <safestrcpy+0x27>$/;"	l
ffff80000010796d	kernel.asm	/^ffff80000010796d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107971	kernel.asm	/^ffff800000107971:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff800000107974	kernel.asm	/^ffff800000107974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107978	kernel.asm	/^ffff800000107978:	c9                   	leaveq $/;"	l
ffff800000107979	kernel.asm	/^ffff800000107979:	c3                   	retq   $/;"	l
ffff80000010797a	kernel.asm	/^ffff80000010797a <strlen>:$/;"	l
ffff80000010797a	kernel.asm	/^ffff80000010797a:	55                   	push   %rbp$/;"	l
ffff80000010797b	kernel.asm	/^ffff80000010797b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010797e	kernel.asm	/^ffff80000010797e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107982	kernel.asm	/^ffff800000107982:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107986	kernel.asm	/^ffff800000107986:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010798d	kernel.asm	/^ffff80000010798d:	eb 04                	jmp    ffff800000107993 <strlen+0x19>$/;"	l
ffff80000010798f	kernel.asm	/^ffff80000010798f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107993	kernel.asm	/^ffff800000107993:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107996	kernel.asm	/^ffff800000107996:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000107999	kernel.asm	/^ffff800000107999:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010799d	kernel.asm	/^ffff80000010799d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001079a0	kernel.asm	/^ffff8000001079a0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001079a3	kernel.asm	/^ffff8000001079a3:	84 c0                	test   %al,%al$/;"	l
ffff8000001079a5	kernel.asm	/^ffff8000001079a5:	75 e8                	jne    ffff80000010798f <strlen+0x15>$/;"	l
ffff8000001079a7	kernel.asm	/^ffff8000001079a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001079aa	kernel.asm	/^ffff8000001079aa:	c9                   	leaveq $/;"	l
ffff8000001079ab	kernel.asm	/^ffff8000001079ab:	c3                   	retq   $/;"	l
ffff8000001079ac	kernel.asm	/^ffff8000001079ac <swtch>:$/;"	l
ffff8000001079ac	kernel.asm	/^ffff8000001079ac:	55                   	push   %rbp$/;"	l
ffff8000001079ad	kernel.asm	/^ffff8000001079ad:	53                   	push   %rbx$/;"	l
ffff8000001079ae	kernel.asm	/^ffff8000001079ae:	41 53                	push   %r11$/;"	l
ffff8000001079b0	kernel.asm	/^ffff8000001079b0:	41 54                	push   %r12$/;"	l
ffff8000001079b2	kernel.asm	/^ffff8000001079b2:	41 55                	push   %r13$/;"	l
ffff8000001079b4	kernel.asm	/^ffff8000001079b4:	41 56                	push   %r14$/;"	l
ffff8000001079b6	kernel.asm	/^ffff8000001079b6:	41 57                	push   %r15$/;"	l
ffff8000001079b8	kernel.asm	/^ffff8000001079b8:	48 89 27             	mov    %rsp,(%rdi)$/;"	l
ffff8000001079bb	kernel.asm	/^ffff8000001079bb:	48 89 f4             	mov    %rsi,%rsp$/;"	l
ffff8000001079be	kernel.asm	/^ffff8000001079be:	41 5f                	pop    %r15$/;"	l
ffff8000001079c0	kernel.asm	/^ffff8000001079c0:	41 5e                	pop    %r14$/;"	l
ffff8000001079c2	kernel.asm	/^ffff8000001079c2:	41 5d                	pop    %r13$/;"	l
ffff8000001079c4	kernel.asm	/^ffff8000001079c4:	41 5c                	pop    %r12$/;"	l
ffff8000001079c6	kernel.asm	/^ffff8000001079c6:	41 5b                	pop    %r11$/;"	l
ffff8000001079c8	kernel.asm	/^ffff8000001079c8:	5b                   	pop    %rbx$/;"	l
ffff8000001079c9	kernel.asm	/^ffff8000001079c9:	5d                   	pop    %rbp$/;"	l
ffff8000001079ca	kernel.asm	/^ffff8000001079ca:	c3                   	retq   $/;"	l
ffff8000001079cb	kernel.asm	/^ffff8000001079cb <fetchint>:$/;"	l
ffff8000001079cb	kernel.asm	/^ffff8000001079cb:	55                   	push   %rbp$/;"	l
ffff8000001079cc	kernel.asm	/^ffff8000001079cc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001079cf	kernel.asm	/^ffff8000001079cf:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001079d3	kernel.asm	/^ffff8000001079d3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001079d7	kernel.asm	/^ffff8000001079d7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001079db	kernel.asm	/^ffff8000001079db:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001079e2	kernel.asm	/^ffff8000001079e2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001079e6	kernel.asm	/^ffff8000001079e6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001079e9	kernel.asm	/^ffff8000001079e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff8000001079ed	kernel.asm	/^ffff8000001079ed:	76 1b                	jbe    ffff800000107a0a <fetchint+0x3f>$/;"	l
ffff8000001079ef	kernel.asm	/^ffff8000001079ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001079f3	kernel.asm	/^ffff8000001079f3:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff8000001079f7	kernel.asm	/^ffff8000001079f7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001079fe	kernel.asm	/^ffff8000001079fe:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a02	kernel.asm	/^ffff800000107a02:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a05	kernel.asm	/^ffff800000107a05:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107a08	kernel.asm	/^ffff800000107a08:	76 07                	jbe    ffff800000107a11 <fetchint+0x46>$/;"	l
ffff800000107a0a	kernel.asm	/^ffff800000107a0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107a0f	kernel.asm	/^ffff800000107a0f:	eb 11                	jmp    ffff800000107a22 <fetchint+0x57>$/;"	l
ffff800000107a11	kernel.asm	/^ffff800000107a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a15	kernel.asm	/^ffff800000107a15:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000107a17	kernel.asm	/^ffff800000107a17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107a1b	kernel.asm	/^ffff800000107a1b:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107a1d	kernel.asm	/^ffff800000107a1d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107a22	kernel.asm	/^ffff800000107a22:	c9                   	leaveq $/;"	l
ffff800000107a23	kernel.asm	/^ffff800000107a23:	c3                   	retq   $/;"	l
ffff800000107a24	kernel.asm	/^ffff800000107a24 <fetchaddr>:$/;"	l
ffff800000107a24	kernel.asm	/^ffff800000107a24:	55                   	push   %rbp$/;"	l
ffff800000107a25	kernel.asm	/^ffff800000107a25:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107a28	kernel.asm	/^ffff800000107a28:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107a2c	kernel.asm	/^ffff800000107a2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107a30	kernel.asm	/^ffff800000107a30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107a34	kernel.asm	/^ffff800000107a34:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a3b	kernel.asm	/^ffff800000107a3b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a3f	kernel.asm	/^ffff800000107a3f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a42	kernel.asm	/^ffff800000107a42:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff800000107a46	kernel.asm	/^ffff800000107a46:	76 1b                	jbe    ffff800000107a63 <fetchaddr+0x3f>$/;"	l
ffff800000107a48	kernel.asm	/^ffff800000107a48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a4c	kernel.asm	/^ffff800000107a4c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107a50	kernel.asm	/^ffff800000107a50:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a57	kernel.asm	/^ffff800000107a57:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a5b	kernel.asm	/^ffff800000107a5b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a5e	kernel.asm	/^ffff800000107a5e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107a61	kernel.asm	/^ffff800000107a61:	76 07                	jbe    ffff800000107a6a <fetchaddr+0x46>$/;"	l
ffff800000107a63	kernel.asm	/^ffff800000107a63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107a68	kernel.asm	/^ffff800000107a68:	eb 13                	jmp    ffff800000107a7d <fetchaddr+0x59>$/;"	l
ffff800000107a6a	kernel.asm	/^ffff800000107a6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a6e	kernel.asm	/^ffff800000107a6e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000107a71	kernel.asm	/^ffff800000107a71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107a75	kernel.asm	/^ffff800000107a75:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107a78	kernel.asm	/^ffff800000107a78:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107a7d	kernel.asm	/^ffff800000107a7d:	c9                   	leaveq $/;"	l
ffff800000107a7e	kernel.asm	/^ffff800000107a7e:	c3                   	retq   $/;"	l
ffff800000107a7f	kernel.asm	/^ffff800000107a7f <fetchstr>:$/;"	l
ffff800000107a7f	kernel.asm	/^ffff800000107a7f:	55                   	push   %rbp$/;"	l
ffff800000107a80	kernel.asm	/^ffff800000107a80:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107a83	kernel.asm	/^ffff800000107a83:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107a87	kernel.asm	/^ffff800000107a87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107a8b	kernel.asm	/^ffff800000107a8b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107a8f	kernel.asm	/^ffff800000107a8f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a96	kernel.asm	/^ffff800000107a96:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a9a	kernel.asm	/^ffff800000107a9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a9d	kernel.asm	/^ffff800000107a9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000107aa1	kernel.asm	/^ffff800000107aa1:	77 07                	ja     ffff800000107aaa <fetchstr+0x2b>$/;"	l
ffff800000107aa3	kernel.asm	/^ffff800000107aa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107aa8	kernel.asm	/^ffff800000107aa8:	eb 5c                	jmp    ffff800000107b06 <fetchstr+0x87>$/;"	l
ffff800000107aaa	kernel.asm	/^ffff800000107aaa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107aae	kernel.asm	/^ffff800000107aae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ab2	kernel.asm	/^ffff800000107ab2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107ab5	kernel.asm	/^ffff800000107ab5:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107abc	kernel.asm	/^ffff800000107abc:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107ac0	kernel.asm	/^ffff800000107ac0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107ac3	kernel.asm	/^ffff800000107ac3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107ac7	kernel.asm	/^ffff800000107ac7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107acb	kernel.asm	/^ffff800000107acb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107ace	kernel.asm	/^ffff800000107ace:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107ad2	kernel.asm	/^ffff800000107ad2:	eb 23                	jmp    ffff800000107af7 <fetchstr+0x78>$/;"	l
ffff800000107ad4	kernel.asm	/^ffff800000107ad4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107ad8	kernel.asm	/^ffff800000107ad8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107adb	kernel.asm	/^ffff800000107adb:	84 c0                	test   %al,%al$/;"	l
ffff800000107add	kernel.asm	/^ffff800000107add:	75 13                	jne    ffff800000107af2 <fetchstr+0x73>$/;"	l
ffff800000107adf	kernel.asm	/^ffff800000107adf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107ae3	kernel.asm	/^ffff800000107ae3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ae7	kernel.asm	/^ffff800000107ae7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107aea	kernel.asm	/^ffff800000107aea:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000107aed	kernel.asm	/^ffff800000107aed:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000107af0	kernel.asm	/^ffff800000107af0:	eb 14                	jmp    ffff800000107b06 <fetchstr+0x87>$/;"	l
ffff800000107af2	kernel.asm	/^ffff800000107af2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107af7	kernel.asm	/^ffff800000107af7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107afb	kernel.asm	/^ffff800000107afb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff800000107aff	kernel.asm	/^ffff800000107aff:	72 d3                	jb     ffff800000107ad4 <fetchstr+0x55>$/;"	l
ffff800000107b01	kernel.asm	/^ffff800000107b01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107b06	kernel.asm	/^ffff800000107b06:	c9                   	leaveq $/;"	l
ffff800000107b07	kernel.asm	/^ffff800000107b07:	c3                   	retq   $/;"	l
ffff800000107b08	kernel.asm	/^ffff800000107b08 <fetcharg>:$/;"	l
ffff800000107b08	kernel.asm	/^ffff800000107b08:	55                   	push   %rbp$/;"	l
ffff800000107b09	kernel.asm	/^ffff800000107b09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107b0c	kernel.asm	/^ffff800000107b0c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107b10	kernel.asm	/^ffff800000107b10:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107b13	kernel.asm	/^ffff800000107b13:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)$/;"	l
ffff800000107b17	kernel.asm	/^ffff800000107b17:	0f 87 9b 00 00 00    	ja     ffff800000107bb8 <fetcharg+0xb0>$/;"	l
ffff800000107b1d	kernel.asm	/^ffff800000107b1d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107b20	kernel.asm	/^ffff800000107b20:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107b27	kernel.asm	/^ffff800000107b27:	00 $/;"	l
ffff800000107b28	kernel.asm	/^ffff800000107b28:	48 b8 60 c0 10 00 00 	movabs $0xffff80000010c060,%rax$/;"	l
ffff800000107b2f	kernel.asm	/^ffff800000107b2f:	80 ff ff $/;"	l
ffff800000107b32	kernel.asm	/^ffff800000107b32:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000107b35	kernel.asm	/^ffff800000107b35:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107b38	kernel.asm	/^ffff800000107b38:	ff e0                	jmpq   *%rax$/;"	l
ffff800000107b3a	kernel.asm	/^ffff800000107b3a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b41	kernel.asm	/^ffff800000107b41:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b45	kernel.asm	/^ffff800000107b45:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b49	kernel.asm	/^ffff800000107b49:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000107b4d	kernel.asm	/^ffff800000107b4d:	eb 7f                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107b4f	kernel.asm	/^ffff800000107b4f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b56	kernel.asm	/^ffff800000107b56:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b5a	kernel.asm	/^ffff800000107b5a:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b5e	kernel.asm	/^ffff800000107b5e:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b62	kernel.asm	/^ffff800000107b62:	eb 6a                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107b64	kernel.asm	/^ffff800000107b64:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b6b	kernel.asm	/^ffff800000107b6b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b6f	kernel.asm	/^ffff800000107b6f:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b73	kernel.asm	/^ffff800000107b73:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000107b77	kernel.asm	/^ffff800000107b77:	eb 55                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107b79	kernel.asm	/^ffff800000107b79:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b80	kernel.asm	/^ffff800000107b80:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b84	kernel.asm	/^ffff800000107b84:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b88	kernel.asm	/^ffff800000107b88:	48 8b 40 48          	mov    0x48(%rax),%rax$/;"	l
ffff800000107b8c	kernel.asm	/^ffff800000107b8c:	eb 40                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107b8e	kernel.asm	/^ffff800000107b8e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b95	kernel.asm	/^ffff800000107b95:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b99	kernel.asm	/^ffff800000107b99:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b9d	kernel.asm	/^ffff800000107b9d:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff800000107ba1	kernel.asm	/^ffff800000107ba1:	eb 2b                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107ba3	kernel.asm	/^ffff800000107ba3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107baa	kernel.asm	/^ffff800000107baa:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107bae	kernel.asm	/^ffff800000107bae:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107bb2	kernel.asm	/^ffff800000107bb2:	48 8b 40 40          	mov    0x40(%rax),%rax$/;"	l
ffff800000107bb6	kernel.asm	/^ffff800000107bb6:	eb 16                	jmp    ffff800000107bce <fetcharg+0xc6>$/;"	l
ffff800000107bb8	kernel.asm	/^ffff800000107bb8:	48 bf 50 c0 10 00 00 	movabs $0xffff80000010c050,%rdi$/;"	l
ffff800000107bbf	kernel.asm	/^ffff800000107bbf:	80 ff ff $/;"	l
ffff800000107bc2	kernel.asm	/^ffff800000107bc2:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000107bc9	kernel.asm	/^ffff800000107bc9:	80 ff ff $/;"	l
ffff800000107bcc	kernel.asm	/^ffff800000107bcc:	ff d0                	callq  *%rax$/;"	l
ffff800000107bce	kernel.asm	/^ffff800000107bce:	c9                   	leaveq $/;"	l
ffff800000107bcf	kernel.asm	/^ffff800000107bcf:	c3                   	retq   $/;"	l
ffff800000107bd0	kernel.asm	/^ffff800000107bd0 <argint>:$/;"	l
ffff800000107bd0	kernel.asm	/^ffff800000107bd0:	55                   	push   %rbp$/;"	l
ffff800000107bd1	kernel.asm	/^ffff800000107bd1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107bd4	kernel.asm	/^ffff800000107bd4:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107bd8	kernel.asm	/^ffff800000107bd8:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107bdb	kernel.asm	/^ffff800000107bdb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107bdf	kernel.asm	/^ffff800000107bdf:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107be2	kernel.asm	/^ffff800000107be2:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107be4	kernel.asm	/^ffff800000107be4:	48 b8 08 7b 10 00 00 	movabs $0xffff800000107b08,%rax$/;"	l
ffff800000107beb	kernel.asm	/^ffff800000107beb:	80 ff ff $/;"	l
ffff800000107bee	kernel.asm	/^ffff800000107bee:	ff d0                	callq  *%rax$/;"	l
ffff800000107bf0	kernel.asm	/^ffff800000107bf0:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107bf2	kernel.asm	/^ffff800000107bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107bf6	kernel.asm	/^ffff800000107bf6:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107bf8	kernel.asm	/^ffff800000107bf8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107bfd	kernel.asm	/^ffff800000107bfd:	c9                   	leaveq $/;"	l
ffff800000107bfe	kernel.asm	/^ffff800000107bfe:	c3                   	retq   $/;"	l
ffff800000107bff	kernel.asm	/^ffff800000107bff <argaddr>:$/;"	l
ffff800000107bff	kernel.asm	/^ffff800000107bff:	55                   	push   %rbp$/;"	l
ffff800000107c00	kernel.asm	/^ffff800000107c00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c03	kernel.asm	/^ffff800000107c03:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107c07	kernel.asm	/^ffff800000107c07:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107c0a	kernel.asm	/^ffff800000107c0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107c0e	kernel.asm	/^ffff800000107c0e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107c11	kernel.asm	/^ffff800000107c11:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107c13	kernel.asm	/^ffff800000107c13:	48 b8 08 7b 10 00 00 	movabs $0xffff800000107b08,%rax$/;"	l
ffff800000107c1a	kernel.asm	/^ffff800000107c1a:	80 ff ff $/;"	l
ffff800000107c1d	kernel.asm	/^ffff800000107c1d:	ff d0                	callq  *%rax$/;"	l
ffff800000107c1f	kernel.asm	/^ffff800000107c1f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107c22	kernel.asm	/^ffff800000107c22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107c26	kernel.asm	/^ffff800000107c26:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107c29	kernel.asm	/^ffff800000107c29:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107c2e	kernel.asm	/^ffff800000107c2e:	c9                   	leaveq $/;"	l
ffff800000107c2f	kernel.asm	/^ffff800000107c2f:	c3                   	retq   $/;"	l
ffff800000107c30	kernel.asm	/^ffff800000107c30 <argptr>:$/;"	l
ffff800000107c30	kernel.asm	/^ffff800000107c30:	55                   	push   %rbp$/;"	l
ffff800000107c31	kernel.asm	/^ffff800000107c31:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c34	kernel.asm	/^ffff800000107c34:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107c38	kernel.asm	/^ffff800000107c38:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107c3b	kernel.asm	/^ffff800000107c3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107c3f	kernel.asm	/^ffff800000107c3f:	89 55 e8             	mov    %edx,-0x18(%rbp)$/;"	l
ffff800000107c42	kernel.asm	/^ffff800000107c42:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx$/;"	l
ffff800000107c46	kernel.asm	/^ffff800000107c46:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107c49	kernel.asm	/^ffff800000107c49:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107c4c	kernel.asm	/^ffff800000107c4c:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107c4e	kernel.asm	/^ffff800000107c4e:	48 b8 ff 7b 10 00 00 	movabs $0xffff800000107bff,%rax$/;"	l
ffff800000107c55	kernel.asm	/^ffff800000107c55:	80 ff ff $/;"	l
ffff800000107c58	kernel.asm	/^ffff800000107c58:	ff d0                	callq  *%rax$/;"	l
ffff800000107c5a	kernel.asm	/^ffff800000107c5a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107c5c	kernel.asm	/^ffff800000107c5c:	79 07                	jns    ffff800000107c65 <argptr+0x35>$/;"	l
ffff800000107c5e	kernel.asm	/^ffff800000107c5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107c63	kernel.asm	/^ffff800000107c63:	eb 59                	jmp    ffff800000107cbe <argptr+0x8e>$/;"	l
ffff800000107c65	kernel.asm	/^ffff800000107c65:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
ffff800000107c69	kernel.asm	/^ffff800000107c69:	78 39                	js     ffff800000107ca4 <argptr+0x74>$/;"	l
ffff800000107c6b	kernel.asm	/^ffff800000107c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c6f	kernel.asm	/^ffff800000107c6f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107c71	kernel.asm	/^ffff800000107c71:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107c78	kernel.asm	/^ffff800000107c78:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c7c	kernel.asm	/^ffff800000107c7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c7f	kernel.asm	/^ffff800000107c7f:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107c82	kernel.asm	/^ffff800000107c82:	73 20                	jae    ffff800000107ca4 <argptr+0x74>$/;"	l
ffff800000107c84	kernel.asm	/^ffff800000107c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c88	kernel.asm	/^ffff800000107c88:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107c8a	kernel.asm	/^ffff800000107c8a:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000107c8d	kernel.asm	/^ffff800000107c8d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000107c8f	kernel.asm	/^ffff800000107c8f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107c91	kernel.asm	/^ffff800000107c91:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107c98	kernel.asm	/^ffff800000107c98:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c9c	kernel.asm	/^ffff800000107c9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c9f	kernel.asm	/^ffff800000107c9f:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107ca2	kernel.asm	/^ffff800000107ca2:	76 07                	jbe    ffff800000107cab <argptr+0x7b>$/;"	l
ffff800000107ca4	kernel.asm	/^ffff800000107ca4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ca9	kernel.asm	/^ffff800000107ca9:	eb 13                	jmp    ffff800000107cbe <argptr+0x8e>$/;"	l
ffff800000107cab	kernel.asm	/^ffff800000107cab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107caf	kernel.asm	/^ffff800000107caf:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107cb2	kernel.asm	/^ffff800000107cb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107cb6	kernel.asm	/^ffff800000107cb6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107cb9	kernel.asm	/^ffff800000107cb9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107cbe	kernel.asm	/^ffff800000107cbe:	c9                   	leaveq $/;"	l
ffff800000107cbf	kernel.asm	/^ffff800000107cbf:	c3                   	retq   $/;"	l
ffff800000107cc0	kernel.asm	/^ffff800000107cc0 <argstr>:$/;"	l
ffff800000107cc0	kernel.asm	/^ffff800000107cc0:	55                   	push   %rbp$/;"	l
ffff800000107cc1	kernel.asm	/^ffff800000107cc1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107cc4	kernel.asm	/^ffff800000107cc4:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107cc8	kernel.asm	/^ffff800000107cc8:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107ccb	kernel.asm	/^ffff800000107ccb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107ccf	kernel.asm	/^ffff800000107ccf:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx$/;"	l
ffff800000107cd3	kernel.asm	/^ffff800000107cd3:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107cd6	kernel.asm	/^ffff800000107cd6:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107cd9	kernel.asm	/^ffff800000107cd9:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107cdb	kernel.asm	/^ffff800000107cdb:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000107ce2	kernel.asm	/^ffff800000107ce2:	80 ff ff $/;"	l
ffff800000107ce5	kernel.asm	/^ffff800000107ce5:	ff d0                	callq  *%rax$/;"	l
ffff800000107ce7	kernel.asm	/^ffff800000107ce7:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107ce9	kernel.asm	/^ffff800000107ce9:	79 07                	jns    ffff800000107cf2 <argstr+0x32>$/;"	l
ffff800000107ceb	kernel.asm	/^ffff800000107ceb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107cf0	kernel.asm	/^ffff800000107cf0:	eb 1b                	jmp    ffff800000107d0d <argstr+0x4d>$/;"	l
ffff800000107cf2	kernel.asm	/^ffff800000107cf2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107cf5	kernel.asm	/^ffff800000107cf5:	48 98                	cltq   $/;"	l
ffff800000107cf7	kernel.asm	/^ffff800000107cf7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107cfb	kernel.asm	/^ffff800000107cfb:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107cfe	kernel.asm	/^ffff800000107cfe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107d01	kernel.asm	/^ffff800000107d01:	48 b8 7f 7a 10 00 00 	movabs $0xffff800000107a7f,%rax$/;"	l
ffff800000107d08	kernel.asm	/^ffff800000107d08:	80 ff ff $/;"	l
ffff800000107d0b	kernel.asm	/^ffff800000107d0b:	ff d0                	callq  *%rax$/;"	l
ffff800000107d0d	kernel.asm	/^ffff800000107d0d:	c9                   	leaveq $/;"	l
ffff800000107d0e	kernel.asm	/^ffff800000107d0e:	c3                   	retq   $/;"	l
ffff800000107d0f	kernel.asm	/^ffff800000107d0f <syscall>:$/;"	l
ffff800000107d0f	kernel.asm	/^ffff800000107d0f:	55                   	push   %rbp$/;"	l
ffff800000107d10	kernel.asm	/^ffff800000107d10:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107d13	kernel.asm	/^ffff800000107d13:	53                   	push   %rbx$/;"	l
ffff800000107d14	kernel.asm	/^ffff800000107d14:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107d18	kernel.asm	/^ffff800000107d18:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d1f	kernel.asm	/^ffff800000107d1f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d23	kernel.asm	/^ffff800000107d23:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d27	kernel.asm	/^ffff800000107d27:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107d2a	kernel.asm	/^ffff800000107d2a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000107d2d	kernel.asm	/^ffff800000107d2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107d31	kernel.asm	/^ffff800000107d31:	7e 4b                	jle    ffff800000107d7e <syscall+0x6f>$/;"	l
ffff800000107d33	kernel.asm	/^ffff800000107d33:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107d36	kernel.asm	/^ffff800000107d36:	83 f8 16             	cmp    $0x16,%eax$/;"	l
ffff800000107d39	kernel.asm	/^ffff800000107d39:	77 43                	ja     ffff800000107d7e <syscall+0x6f>$/;"	l
ffff800000107d3b	kernel.asm	/^ffff800000107d3b:	48 b8 a0 d5 10 00 00 	movabs $0xffff80000010d5a0,%rax$/;"	l
ffff800000107d42	kernel.asm	/^ffff800000107d42:	80 ff ff $/;"	l
ffff800000107d45	kernel.asm	/^ffff800000107d45:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107d48	kernel.asm	/^ffff800000107d48:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107d4b	kernel.asm	/^ffff800000107d4b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107d4f	kernel.asm	/^ffff800000107d4f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107d52	kernel.asm	/^ffff800000107d52:	74 2a                	je     ffff800000107d7e <syscall+0x6f>$/;"	l
ffff800000107d54	kernel.asm	/^ffff800000107d54:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d5b	kernel.asm	/^ffff800000107d5b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d5f	kernel.asm	/^ffff800000107d5f:	48 8b 58 28          	mov    0x28(%rax),%rbx$/;"	l
ffff800000107d63	kernel.asm	/^ffff800000107d63:	48 b8 a0 d5 10 00 00 	movabs $0xffff80000010d5a0,%rax$/;"	l
ffff800000107d6a	kernel.asm	/^ffff800000107d6a:	80 ff ff $/;"	l
ffff800000107d6d	kernel.asm	/^ffff800000107d6d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107d70	kernel.asm	/^ffff800000107d70:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107d73	kernel.asm	/^ffff800000107d73:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107d77	kernel.asm	/^ffff800000107d77:	ff d0                	callq  *%rax$/;"	l
ffff800000107d79	kernel.asm	/^ffff800000107d79:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff800000107d7c	kernel.asm	/^ffff800000107d7c:	eb 5c                	jmp    ffff800000107dda <syscall+0xcb>$/;"	l
ffff800000107d7e	kernel.asm	/^ffff800000107d7e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d85	kernel.asm	/^ffff800000107d85:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d89	kernel.asm	/^ffff800000107d89:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff800000107d90	kernel.asm	/^ffff800000107d90:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d97	kernel.asm	/^ffff800000107d97:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d9b	kernel.asm	/^ffff800000107d9b:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000107d9e	kernel.asm	/^ffff800000107d9e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107da1	kernel.asm	/^ffff800000107da1:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107da3	kernel.asm	/^ffff800000107da3:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff800000107da6	kernel.asm	/^ffff800000107da6:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000107da8	kernel.asm	/^ffff800000107da8:	48 bf 90 c0 10 00 00 	movabs $0xffff80000010c090,%rdi$/;"	l
ffff800000107daf	kernel.asm	/^ffff800000107daf:	80 ff ff $/;"	l
ffff800000107db2	kernel.asm	/^ffff800000107db2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107db7	kernel.asm	/^ffff800000107db7:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff800000107dbe	kernel.asm	/^ffff800000107dbe:	80 ff ff $/;"	l
ffff800000107dc1	kernel.asm	/^ffff800000107dc1:	41 ff d0             	callq  *%r8$/;"	l
ffff800000107dc4	kernel.asm	/^ffff800000107dc4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107dcb	kernel.asm	/^ffff800000107dcb:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107dcf	kernel.asm	/^ffff800000107dcf:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107dd3	kernel.asm	/^ffff800000107dd3:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)$/;"	l
ffff800000107dda	kernel.asm	/^ffff800000107dda:	90                   	nop$/;"	l
ffff800000107ddb	kernel.asm	/^ffff800000107ddb:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff800000107ddf	kernel.asm	/^ffff800000107ddf:	5b                   	pop    %rbx$/;"	l
ffff800000107de0	kernel.asm	/^ffff800000107de0:	5d                   	pop    %rbp$/;"	l
ffff800000107de1	kernel.asm	/^ffff800000107de1:	c3                   	retq   $/;"	l
ffff800000107de2	kernel.asm	/^ffff800000107de2 <argfd>:$/;"	l
ffff800000107de2	kernel.asm	/^ffff800000107de2:	55                   	push   %rbp$/;"	l
ffff800000107de3	kernel.asm	/^ffff800000107de3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107de6	kernel.asm	/^ffff800000107de6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000107dea	kernel.asm	/^ffff800000107dea:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107ded	kernel.asm	/^ffff800000107ded:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107df1	kernel.asm	/^ffff800000107df1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000107df5	kernel.asm	/^ffff800000107df5:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx$/;"	l
ffff800000107df9	kernel.asm	/^ffff800000107df9:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107dfc	kernel.asm	/^ffff800000107dfc:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107dff	kernel.asm	/^ffff800000107dff:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107e01	kernel.asm	/^ffff800000107e01:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000107e08	kernel.asm	/^ffff800000107e08:	80 ff ff $/;"	l
ffff800000107e0b	kernel.asm	/^ffff800000107e0b:	ff d0                	callq  *%rax$/;"	l
ffff800000107e0d	kernel.asm	/^ffff800000107e0d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107e0f	kernel.asm	/^ffff800000107e0f:	79 07                	jns    ffff800000107e18 <argfd+0x36>$/;"	l
ffff800000107e11	kernel.asm	/^ffff800000107e11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107e16	kernel.asm	/^ffff800000107e16:	eb 62                	jmp    ffff800000107e7a <argfd+0x98>$/;"	l
ffff800000107e18	kernel.asm	/^ffff800000107e18:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107e1b	kernel.asm	/^ffff800000107e1b:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107e1d	kernel.asm	/^ffff800000107e1d:	78 2d                	js     ffff800000107e4c <argfd+0x6a>$/;"	l
ffff800000107e1f	kernel.asm	/^ffff800000107e1f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107e22	kernel.asm	/^ffff800000107e22:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff800000107e25	kernel.asm	/^ffff800000107e25:	7f 25                	jg     ffff800000107e4c <argfd+0x6a>$/;"	l
ffff800000107e27	kernel.asm	/^ffff800000107e27:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107e2e	kernel.asm	/^ffff800000107e2e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107e32	kernel.asm	/^ffff800000107e32:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107e35	kernel.asm	/^ffff800000107e35:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107e38	kernel.asm	/^ffff800000107e38:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000107e3c	kernel.asm	/^ffff800000107e3c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000107e41	kernel.asm	/^ffff800000107e41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107e45	kernel.asm	/^ffff800000107e45:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000107e4a	kernel.asm	/^ffff800000107e4a:	75 07                	jne    ffff800000107e53 <argfd+0x71>$/;"	l
ffff800000107e4c	kernel.asm	/^ffff800000107e4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107e51	kernel.asm	/^ffff800000107e51:	eb 27                	jmp    ffff800000107e7a <argfd+0x98>$/;"	l
ffff800000107e53	kernel.asm	/^ffff800000107e53:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff800000107e58	kernel.asm	/^ffff800000107e58:	74 09                	je     ffff800000107e63 <argfd+0x81>$/;"	l
ffff800000107e5a	kernel.asm	/^ffff800000107e5a:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107e5d	kernel.asm	/^ffff800000107e5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107e61	kernel.asm	/^ffff800000107e61:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107e63	kernel.asm	/^ffff800000107e63:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff800000107e68	kernel.asm	/^ffff800000107e68:	74 0b                	je     ffff800000107e75 <argfd+0x93>$/;"	l
ffff800000107e6a	kernel.asm	/^ffff800000107e6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000107e6e	kernel.asm	/^ffff800000107e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107e72	kernel.asm	/^ffff800000107e72:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107e75	kernel.asm	/^ffff800000107e75:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107e7a	kernel.asm	/^ffff800000107e7a:	c9                   	leaveq $/;"	l
ffff800000107e7b	kernel.asm	/^ffff800000107e7b:	c3                   	retq   $/;"	l
ffff800000107e7c	kernel.asm	/^ffff800000107e7c <fdalloc>:$/;"	l
ffff800000107e7c	kernel.asm	/^ffff800000107e7c:	55                   	push   %rbp$/;"	l
ffff800000107e7d	kernel.asm	/^ffff800000107e7d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107e80	kernel.asm	/^ffff800000107e80:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107e84	kernel.asm	/^ffff800000107e84:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107e88	kernel.asm	/^ffff800000107e88:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107e8f	kernel.asm	/^ffff800000107e8f:	eb 46                	jmp    ffff800000107ed7 <fdalloc+0x5b>$/;"	l
ffff800000107e91	kernel.asm	/^ffff800000107e91:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107e98	kernel.asm	/^ffff800000107e98:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107e9c	kernel.asm	/^ffff800000107e9c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107e9f	kernel.asm	/^ffff800000107e9f:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107ea2	kernel.asm	/^ffff800000107ea2:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000107ea6	kernel.asm	/^ffff800000107ea6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000107eab	kernel.asm	/^ffff800000107eab:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107eae	kernel.asm	/^ffff800000107eae:	75 23                	jne    ffff800000107ed3 <fdalloc+0x57>$/;"	l
ffff800000107eb0	kernel.asm	/^ffff800000107eb0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107eb7	kernel.asm	/^ffff800000107eb7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107ebb	kernel.asm	/^ffff800000107ebb:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107ebe	kernel.asm	/^ffff800000107ebe:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107ec1	kernel.asm	/^ffff800000107ec1:	48 8d 4a 08          	lea    0x8(%rdx),%rcx$/;"	l
ffff800000107ec5	kernel.asm	/^ffff800000107ec5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107ec9	kernel.asm	/^ffff800000107ec9:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
ffff800000107ece	kernel.asm	/^ffff800000107ece:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107ed1	kernel.asm	/^ffff800000107ed1:	eb 0f                	jmp    ffff800000107ee2 <fdalloc+0x66>$/;"	l
ffff800000107ed3	kernel.asm	/^ffff800000107ed3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107ed7	kernel.asm	/^ffff800000107ed7:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff800000107edb	kernel.asm	/^ffff800000107edb:	7e b4                	jle    ffff800000107e91 <fdalloc+0x15>$/;"	l
ffff800000107edd	kernel.asm	/^ffff800000107edd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ee2	kernel.asm	/^ffff800000107ee2:	c9                   	leaveq $/;"	l
ffff800000107ee3	kernel.asm	/^ffff800000107ee3:	c3                   	retq   $/;"	l
ffff800000107ee4	kernel.asm	/^ffff800000107ee4 <sys_dup>:$/;"	l
ffff800000107ee4	kernel.asm	/^ffff800000107ee4:	55                   	push   %rbp$/;"	l
ffff800000107ee5	kernel.asm	/^ffff800000107ee5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107ee8	kernel.asm	/^ffff800000107ee8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107eec	kernel.asm	/^ffff800000107eec:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000107ef0	kernel.asm	/^ffff800000107ef0:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107ef3	kernel.asm	/^ffff800000107ef3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000107ef8	kernel.asm	/^ffff800000107ef8:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000107efd	kernel.asm	/^ffff800000107efd:	48 b8 e2 7d 10 00 00 	movabs $0xffff800000107de2,%rax$/;"	l
ffff800000107f04	kernel.asm	/^ffff800000107f04:	80 ff ff $/;"	l
ffff800000107f07	kernel.asm	/^ffff800000107f07:	ff d0                	callq  *%rax$/;"	l
ffff800000107f09	kernel.asm	/^ffff800000107f09:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107f0b	kernel.asm	/^ffff800000107f0b:	79 07                	jns    ffff800000107f14 <sys_dup+0x30>$/;"	l
ffff800000107f0d	kernel.asm	/^ffff800000107f0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107f12	kernel.asm	/^ffff800000107f12:	eb 39                	jmp    ffff800000107f4d <sys_dup+0x69>$/;"	l
ffff800000107f14	kernel.asm	/^ffff800000107f14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107f18	kernel.asm	/^ffff800000107f18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107f1b	kernel.asm	/^ffff800000107f1b:	48 b8 7c 7e 10 00 00 	movabs $0xffff800000107e7c,%rax$/;"	l
ffff800000107f22	kernel.asm	/^ffff800000107f22:	80 ff ff $/;"	l
ffff800000107f25	kernel.asm	/^ffff800000107f25:	ff d0                	callq  *%rax$/;"	l
ffff800000107f27	kernel.asm	/^ffff800000107f27:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107f2a	kernel.asm	/^ffff800000107f2a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107f2e	kernel.asm	/^ffff800000107f2e:	79 07                	jns    ffff800000107f37 <sys_dup+0x53>$/;"	l
ffff800000107f30	kernel.asm	/^ffff800000107f30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107f35	kernel.asm	/^ffff800000107f35:	eb 16                	jmp    ffff800000107f4d <sys_dup+0x69>$/;"	l
ffff800000107f37	kernel.asm	/^ffff800000107f37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107f3b	kernel.asm	/^ffff800000107f3b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107f3e	kernel.asm	/^ffff800000107f3e:	48 b8 32 1b 10 00 00 	movabs $0xffff800000101b32,%rax$/;"	l
ffff800000107f45	kernel.asm	/^ffff800000107f45:	80 ff ff $/;"	l
ffff800000107f48	kernel.asm	/^ffff800000107f48:	ff d0                	callq  *%rax$/;"	l
ffff800000107f4a	kernel.asm	/^ffff800000107f4a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107f4d	kernel.asm	/^ffff800000107f4d:	c9                   	leaveq $/;"	l
ffff800000107f4e	kernel.asm	/^ffff800000107f4e:	c3                   	retq   $/;"	l
ffff800000107f4f	kernel.asm	/^ffff800000107f4f <sys_read>:$/;"	l
ffff800000107f4f	kernel.asm	/^ffff800000107f4f:	55                   	push   %rbp$/;"	l
ffff800000107f50	kernel.asm	/^ffff800000107f50:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107f53	kernel.asm	/^ffff800000107f53:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107f57	kernel.asm	/^ffff800000107f57:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000107f5b	kernel.asm	/^ffff800000107f5b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107f5e	kernel.asm	/^ffff800000107f5e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000107f63	kernel.asm	/^ffff800000107f63:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000107f68	kernel.asm	/^ffff800000107f68:	48 b8 e2 7d 10 00 00 	movabs $0xffff800000107de2,%rax$/;"	l
ffff800000107f6f	kernel.asm	/^ffff800000107f6f:	80 ff ff $/;"	l
ffff800000107f72	kernel.asm	/^ffff800000107f72:	ff d0                	callq  *%rax$/;"	l
ffff800000107f74	kernel.asm	/^ffff800000107f74:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107f76	kernel.asm	/^ffff800000107f76:	78 3b                	js     ffff800000107fb3 <sys_read+0x64>$/;"	l
ffff800000107f78	kernel.asm	/^ffff800000107f78:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000107f7c	kernel.asm	/^ffff800000107f7c:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107f7f	kernel.asm	/^ffff800000107f7f:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000107f84	kernel.asm	/^ffff800000107f84:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000107f8b	kernel.asm	/^ffff800000107f8b:	80 ff ff $/;"	l
ffff800000107f8e	kernel.asm	/^ffff800000107f8e:	ff d0                	callq  *%rax$/;"	l
ffff800000107f90	kernel.asm	/^ffff800000107f90:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107f92	kernel.asm	/^ffff800000107f92:	78 1f                	js     ffff800000107fb3 <sys_read+0x64>$/;"	l
ffff800000107f94	kernel.asm	/^ffff800000107f94:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107f97	kernel.asm	/^ffff800000107f97:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000107f9b	kernel.asm	/^ffff800000107f9b:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107f9e	kernel.asm	/^ffff800000107f9e:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000107fa3	kernel.asm	/^ffff800000107fa3:	48 b8 30 7c 10 00 00 	movabs $0xffff800000107c30,%rax$/;"	l
ffff800000107faa	kernel.asm	/^ffff800000107faa:	80 ff ff $/;"	l
ffff800000107fad	kernel.asm	/^ffff800000107fad:	ff d0                	callq  *%rax$/;"	l
ffff800000107faf	kernel.asm	/^ffff800000107faf:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107fb1	kernel.asm	/^ffff800000107fb1:	79 07                	jns    ffff800000107fba <sys_read+0x6b>$/;"	l
ffff800000107fb3	kernel.asm	/^ffff800000107fb3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107fb8	kernel.asm	/^ffff800000107fb8:	eb 1d                	jmp    ffff800000107fd7 <sys_read+0x88>$/;"	l
ffff800000107fba	kernel.asm	/^ffff800000107fba:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107fbd	kernel.asm	/^ffff800000107fbd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000107fc1	kernel.asm	/^ffff800000107fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107fc5	kernel.asm	/^ffff800000107fc5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107fc8	kernel.asm	/^ffff800000107fc8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107fcb	kernel.asm	/^ffff800000107fcb:	48 b8 4c 1d 10 00 00 	movabs $0xffff800000101d4c,%rax$/;"	l
ffff800000107fd2	kernel.asm	/^ffff800000107fd2:	80 ff ff $/;"	l
ffff800000107fd5	kernel.asm	/^ffff800000107fd5:	ff d0                	callq  *%rax$/;"	l
ffff800000107fd7	kernel.asm	/^ffff800000107fd7:	c9                   	leaveq $/;"	l
ffff800000107fd8	kernel.asm	/^ffff800000107fd8:	c3                   	retq   $/;"	l
ffff800000107fd9	kernel.asm	/^ffff800000107fd9 <sys_write>:$/;"	l
ffff800000107fd9	kernel.asm	/^ffff800000107fd9:	55                   	push   %rbp$/;"	l
ffff800000107fda	kernel.asm	/^ffff800000107fda:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107fdd	kernel.asm	/^ffff800000107fdd:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107fe1	kernel.asm	/^ffff800000107fe1:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000107fe5	kernel.asm	/^ffff800000107fe5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107fe8	kernel.asm	/^ffff800000107fe8:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000107fed	kernel.asm	/^ffff800000107fed:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000107ff2	kernel.asm	/^ffff800000107ff2:	48 b8 e2 7d 10 00 00 	movabs $0xffff800000107de2,%rax$/;"	l
ffff800000107ff9	kernel.asm	/^ffff800000107ff9:	80 ff ff $/;"	l
ffff800000107ffc	kernel.asm	/^ffff800000107ffc:	ff d0                	callq  *%rax$/;"	l
ffff800000107ffe	kernel.asm	/^ffff800000107ffe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108000	kernel.asm	/^ffff800000108000:	78 3b                	js     ffff80000010803d <sys_write+0x64>$/;"	l
ffff800000108002	kernel.asm	/^ffff800000108002:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000108006	kernel.asm	/^ffff800000108006:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108009	kernel.asm	/^ffff800000108009:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010800e	kernel.asm	/^ffff80000010800e:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000108015	kernel.asm	/^ffff800000108015:	80 ff ff $/;"	l
ffff800000108018	kernel.asm	/^ffff800000108018:	ff d0                	callq  *%rax$/;"	l
ffff80000010801a	kernel.asm	/^ffff80000010801a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010801c	kernel.asm	/^ffff80000010801c:	78 1f                	js     ffff80000010803d <sys_write+0x64>$/;"	l
ffff80000010801e	kernel.asm	/^ffff80000010801e:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108021	kernel.asm	/^ffff800000108021:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108025	kernel.asm	/^ffff800000108025:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108028	kernel.asm	/^ffff800000108028:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010802d	kernel.asm	/^ffff80000010802d:	48 b8 30 7c 10 00 00 	movabs $0xffff800000107c30,%rax$/;"	l
ffff800000108034	kernel.asm	/^ffff800000108034:	80 ff ff $/;"	l
ffff800000108037	kernel.asm	/^ffff800000108037:	ff d0                	callq  *%rax$/;"	l
ffff800000108039	kernel.asm	/^ffff800000108039:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010803b	kernel.asm	/^ffff80000010803b:	79 07                	jns    ffff800000108044 <sys_write+0x6b>$/;"	l
ffff80000010803d	kernel.asm	/^ffff80000010803d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108042	kernel.asm	/^ffff800000108042:	eb 1d                	jmp    ffff800000108061 <sys_write+0x88>$/;"	l
ffff800000108044	kernel.asm	/^ffff800000108044:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108047	kernel.asm	/^ffff800000108047:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff80000010804b	kernel.asm	/^ffff80000010804b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010804f	kernel.asm	/^ffff80000010804f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000108052	kernel.asm	/^ffff800000108052:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108055	kernel.asm	/^ffff800000108055:	48 b8 3d 1e 10 00 00 	movabs $0xffff800000101e3d,%rax$/;"	l
ffff80000010805c	kernel.asm	/^ffff80000010805c:	80 ff ff $/;"	l
ffff80000010805f	kernel.asm	/^ffff80000010805f:	ff d0                	callq  *%rax$/;"	l
ffff800000108061	kernel.asm	/^ffff800000108061:	c9                   	leaveq $/;"	l
ffff800000108062	kernel.asm	/^ffff800000108062:	c3                   	retq   $/;"	l
ffff800000108063	kernel.asm	/^ffff800000108063 <sys_close>:$/;"	l
ffff800000108063	kernel.asm	/^ffff800000108063:	55                   	push   %rbp$/;"	l
ffff800000108064	kernel.asm	/^ffff800000108064:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108067	kernel.asm	/^ffff800000108067:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010806b	kernel.asm	/^ffff80000010806b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff80000010806f	kernel.asm	/^ffff80000010806f:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff800000108073	kernel.asm	/^ffff800000108073:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108076	kernel.asm	/^ffff800000108076:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010807b	kernel.asm	/^ffff80000010807b:	48 b8 e2 7d 10 00 00 	movabs $0xffff800000107de2,%rax$/;"	l
ffff800000108082	kernel.asm	/^ffff800000108082:	80 ff ff $/;"	l
ffff800000108085	kernel.asm	/^ffff800000108085:	ff d0                	callq  *%rax$/;"	l
ffff800000108087	kernel.asm	/^ffff800000108087:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108089	kernel.asm	/^ffff800000108089:	79 07                	jns    ffff800000108092 <sys_close+0x2f>$/;"	l
ffff80000010808b	kernel.asm	/^ffff80000010808b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108090	kernel.asm	/^ffff800000108090:	eb 36                	jmp    ffff8000001080c8 <sys_close+0x65>$/;"	l
ffff800000108092	kernel.asm	/^ffff800000108092:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108099	kernel.asm	/^ffff800000108099:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010809d	kernel.asm	/^ffff80000010809d:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001080a0	kernel.asm	/^ffff8000001080a0:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001080a3	kernel.asm	/^ffff8000001080a3:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001080a7	kernel.asm	/^ffff8000001080a7:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff8000001080ae	kernel.asm	/^ffff8000001080ae:	00 00 $/;"	l
ffff8000001080b0	kernel.asm	/^ffff8000001080b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001080b4	kernel.asm	/^ffff8000001080b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001080b7	kernel.asm	/^ffff8000001080b7:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff8000001080be	kernel.asm	/^ffff8000001080be:	80 ff ff $/;"	l
ffff8000001080c1	kernel.asm	/^ffff8000001080c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001080c3	kernel.asm	/^ffff8000001080c3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001080c8	kernel.asm	/^ffff8000001080c8:	c9                   	leaveq $/;"	l
ffff8000001080c9	kernel.asm	/^ffff8000001080c9:	c3                   	retq   $/;"	l
ffff8000001080ca	kernel.asm	/^ffff8000001080ca <sys_fstat>:$/;"	l
ffff8000001080ca	kernel.asm	/^ffff8000001080ca:	55                   	push   %rbp$/;"	l
ffff8000001080cb	kernel.asm	/^ffff8000001080cb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001080ce	kernel.asm	/^ffff8000001080ce:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001080d2	kernel.asm	/^ffff8000001080d2:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001080d6	kernel.asm	/^ffff8000001080d6:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001080d9	kernel.asm	/^ffff8000001080d9:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001080de	kernel.asm	/^ffff8000001080de:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001080e3	kernel.asm	/^ffff8000001080e3:	48 b8 e2 7d 10 00 00 	movabs $0xffff800000107de2,%rax$/;"	l
ffff8000001080ea	kernel.asm	/^ffff8000001080ea:	80 ff ff $/;"	l
ffff8000001080ed	kernel.asm	/^ffff8000001080ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001080ef	kernel.asm	/^ffff8000001080ef:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001080f1	kernel.asm	/^ffff8000001080f1:	78 21                	js     ffff800000108114 <sys_fstat+0x4a>$/;"	l
ffff8000001080f3	kernel.asm	/^ffff8000001080f3:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001080f7	kernel.asm	/^ffff8000001080f7:	ba 14 00 00 00       	mov    $0x14,%edx$/;"	l
ffff8000001080fc	kernel.asm	/^ffff8000001080fc:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001080ff	kernel.asm	/^ffff8000001080ff:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108104	kernel.asm	/^ffff800000108104:	48 b8 30 7c 10 00 00 	movabs $0xffff800000107c30,%rax$/;"	l
ffff80000010810b	kernel.asm	/^ffff80000010810b:	80 ff ff $/;"	l
ffff80000010810e	kernel.asm	/^ffff80000010810e:	ff d0                	callq  *%rax$/;"	l
ffff800000108110	kernel.asm	/^ffff800000108110:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108112	kernel.asm	/^ffff800000108112:	79 07                	jns    ffff80000010811b <sys_fstat+0x51>$/;"	l
ffff800000108114	kernel.asm	/^ffff800000108114:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108119	kernel.asm	/^ffff800000108119:	eb 1a                	jmp    ffff800000108135 <sys_fstat+0x6b>$/;"	l
ffff80000010811b	kernel.asm	/^ffff80000010811b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010811f	kernel.asm	/^ffff80000010811f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108123	kernel.asm	/^ffff800000108123:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108126	kernel.asm	/^ffff800000108126:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108129	kernel.asm	/^ffff800000108129:	48 b8 d7 1c 10 00 00 	movabs $0xffff800000101cd7,%rax$/;"	l
ffff800000108130	kernel.asm	/^ffff800000108130:	80 ff ff $/;"	l
ffff800000108133	kernel.asm	/^ffff800000108133:	ff d0                	callq  *%rax$/;"	l
ffff800000108135	kernel.asm	/^ffff800000108135:	c9                   	leaveq $/;"	l
ffff800000108136	kernel.asm	/^ffff800000108136:	c3                   	retq   $/;"	l
ffff800000108137	kernel.asm	/^ffff800000108137 <sys_link>:$/;"	l
ffff800000108137	kernel.asm	/^ffff800000108137:	55                   	push   %rbp$/;"	l
ffff800000108138	kernel.asm	/^ffff800000108138:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010813b	kernel.asm	/^ffff80000010813b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010813f	kernel.asm	/^ffff80000010813f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000108143	kernel.asm	/^ffff800000108143:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108146	kernel.asm	/^ffff800000108146:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010814b	kernel.asm	/^ffff80000010814b:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108152	kernel.asm	/^ffff800000108152:	80 ff ff $/;"	l
ffff800000108155	kernel.asm	/^ffff800000108155:	ff d0                	callq  *%rax$/;"	l
ffff800000108157	kernel.asm	/^ffff800000108157:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108159	kernel.asm	/^ffff800000108159:	78 1c                	js     ffff800000108177 <sys_link+0x40>$/;"	l
ffff80000010815b	kernel.asm	/^ffff80000010815b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
ffff80000010815f	kernel.asm	/^ffff80000010815f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108162	kernel.asm	/^ffff800000108162:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108167	kernel.asm	/^ffff800000108167:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff80000010816e	kernel.asm	/^ffff80000010816e:	80 ff ff $/;"	l
ffff800000108171	kernel.asm	/^ffff800000108171:	ff d0                	callq  *%rax$/;"	l
ffff800000108173	kernel.asm	/^ffff800000108173:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108175	kernel.asm	/^ffff800000108175:	79 0a                	jns    ffff800000108181 <sys_link+0x4a>$/;"	l
ffff800000108177	kernel.asm	/^ffff800000108177:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010817c	kernel.asm	/^ffff80000010817c:	e9 0c 02 00 00       	jmpq   ffff80000010838d <sys_link+0x256>$/;"	l
ffff800000108181	kernel.asm	/^ffff800000108181:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108186	kernel.asm	/^ffff800000108186:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff80000010818d	kernel.asm	/^ffff80000010818d:	80 ff ff $/;"	l
ffff800000108190	kernel.asm	/^ffff800000108190:	ff d2                	callq  *%rdx$/;"	l
ffff800000108192	kernel.asm	/^ffff800000108192:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000108196	kernel.asm	/^ffff800000108196:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108199	kernel.asm	/^ffff800000108199:	48 b8 ba 36 10 00 00 	movabs $0xffff8000001036ba,%rax$/;"	l
ffff8000001081a0	kernel.asm	/^ffff8000001081a0:	80 ff ff $/;"	l
ffff8000001081a3	kernel.asm	/^ffff8000001081a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001081a5	kernel.asm	/^ffff8000001081a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001081a9	kernel.asm	/^ffff8000001081a9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001081ae	kernel.asm	/^ffff8000001081ae:	75 1b                	jne    ffff8000001081cb <sys_link+0x94>$/;"	l
ffff8000001081b0	kernel.asm	/^ffff8000001081b0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001081b5	kernel.asm	/^ffff8000001081b5:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff8000001081bc	kernel.asm	/^ffff8000001081bc:	80 ff ff $/;"	l
ffff8000001081bf	kernel.asm	/^ffff8000001081bf:	ff d2                	callq  *%rdx$/;"	l
ffff8000001081c1	kernel.asm	/^ffff8000001081c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001081c6	kernel.asm	/^ffff8000001081c6:	e9 c2 01 00 00       	jmpq   ffff80000010838d <sys_link+0x256>$/;"	l
ffff8000001081cb	kernel.asm	/^ffff8000001081cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001081cf	kernel.asm	/^ffff8000001081cf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001081d2	kernel.asm	/^ffff8000001081d2:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001081d9	kernel.asm	/^ffff8000001081d9:	80 ff ff $/;"	l
ffff8000001081dc	kernel.asm	/^ffff8000001081dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001081de	kernel.asm	/^ffff8000001081de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001081e2	kernel.asm	/^ffff8000001081e2:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001081e9	kernel.asm	/^ffff8000001081e9:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001081ed	kernel.asm	/^ffff8000001081ed:	75 2e                	jne    ffff80000010821d <sys_link+0xe6>$/;"	l
ffff8000001081ef	kernel.asm	/^ffff8000001081ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001081f3	kernel.asm	/^ffff8000001081f3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001081f6	kernel.asm	/^ffff8000001081f6:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff8000001081fd	kernel.asm	/^ffff8000001081fd:	80 ff ff $/;"	l
ffff800000108200	kernel.asm	/^ffff800000108200:	ff d0                	callq  *%rax$/;"	l
ffff800000108202	kernel.asm	/^ffff800000108202:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108207	kernel.asm	/^ffff800000108207:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff80000010820e	kernel.asm	/^ffff80000010820e:	80 ff ff $/;"	l
ffff800000108211	kernel.asm	/^ffff800000108211:	ff d2                	callq  *%rdx$/;"	l
ffff800000108213	kernel.asm	/^ffff800000108213:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108218	kernel.asm	/^ffff800000108218:	e9 70 01 00 00       	jmpq   ffff80000010838d <sys_link+0x256>$/;"	l
ffff80000010821d	kernel.asm	/^ffff80000010821d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108221	kernel.asm	/^ffff800000108221:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108228	kernel.asm	/^ffff800000108228:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010822b	kernel.asm	/^ffff80000010822b:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010822d	kernel.asm	/^ffff80000010822d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108231	kernel.asm	/^ffff800000108231:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108238	kernel.asm	/^ffff800000108238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010823c	kernel.asm	/^ffff80000010823c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010823f	kernel.asm	/^ffff80000010823f:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000108246	kernel.asm	/^ffff800000108246:	80 ff ff $/;"	l
ffff800000108249	kernel.asm	/^ffff800000108249:	ff d0                	callq  *%rax$/;"	l
ffff80000010824b	kernel.asm	/^ffff80000010824b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010824f	kernel.asm	/^ffff80000010824f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108252	kernel.asm	/^ffff800000108252:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000108259	kernel.asm	/^ffff800000108259:	80 ff ff $/;"	l
ffff80000010825c	kernel.asm	/^ffff80000010825c:	ff d0                	callq  *%rax$/;"	l
ffff80000010825e	kernel.asm	/^ffff80000010825e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000108262	kernel.asm	/^ffff800000108262:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000108266	kernel.asm	/^ffff800000108266:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108269	kernel.asm	/^ffff800000108269:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010826c	kernel.asm	/^ffff80000010826c:	48 b8 e4 36 10 00 00 	movabs $0xffff8000001036e4,%rax$/;"	l
ffff800000108273	kernel.asm	/^ffff800000108273:	80 ff ff $/;"	l
ffff800000108276	kernel.asm	/^ffff800000108276:	ff d0                	callq  *%rax$/;"	l
ffff800000108278	kernel.asm	/^ffff800000108278:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010827c	kernel.asm	/^ffff80000010827c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108281	kernel.asm	/^ffff800000108281:	0f 84 9b 00 00 00    	je     ffff800000108322 <sys_link+0x1eb>$/;"	l
ffff800000108287	kernel.asm	/^ffff800000108287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010828b	kernel.asm	/^ffff80000010828b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010828e	kernel.asm	/^ffff80000010828e:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108295	kernel.asm	/^ffff800000108295:	80 ff ff $/;"	l
ffff800000108298	kernel.asm	/^ffff800000108298:	ff d0                	callq  *%rax$/;"	l
ffff80000010829a	kernel.asm	/^ffff80000010829a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010829e	kernel.asm	/^ffff80000010829e:	8b 10                	mov    (%rax),%edx$/;"	l
ffff8000001082a0	kernel.asm	/^ffff8000001082a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082a4	kernel.asm	/^ffff8000001082a4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001082a6	kernel.asm	/^ffff8000001082a6:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001082a8	kernel.asm	/^ffff8000001082a8:	75 25                	jne    ffff8000001082cf <sys_link+0x198>$/;"	l
ffff8000001082aa	kernel.asm	/^ffff8000001082aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082ae	kernel.asm	/^ffff8000001082ae:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff8000001082b1	kernel.asm	/^ffff8000001082b1:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx$/;"	l
ffff8000001082b5	kernel.asm	/^ffff8000001082b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001082b9	kernel.asm	/^ffff8000001082b9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001082bc	kernel.asm	/^ffff8000001082bc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082bf	kernel.asm	/^ffff8000001082bf:	48 b8 30 33 10 00 00 	movabs $0xffff800000103330,%rax$/;"	l
ffff8000001082c6	kernel.asm	/^ffff8000001082c6:	80 ff ff $/;"	l
ffff8000001082c9	kernel.asm	/^ffff8000001082c9:	ff d0                	callq  *%rax$/;"	l
ffff8000001082cb	kernel.asm	/^ffff8000001082cb:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001082cd	kernel.asm	/^ffff8000001082cd:	79 15                	jns    ffff8000001082e4 <sys_link+0x1ad>$/;"	l
ffff8000001082cf	kernel.asm	/^ffff8000001082cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001082d3	kernel.asm	/^ffff8000001082d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082d6	kernel.asm	/^ffff8000001082d6:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff8000001082dd	kernel.asm	/^ffff8000001082dd:	80 ff ff $/;"	l
ffff8000001082e0	kernel.asm	/^ffff8000001082e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001082e2	kernel.asm	/^ffff8000001082e2:	eb 3f                	jmp    ffff800000108323 <sys_link+0x1ec>$/;"	l
ffff8000001082e4	kernel.asm	/^ffff8000001082e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001082e8	kernel.asm	/^ffff8000001082e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082eb	kernel.asm	/^ffff8000001082eb:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff8000001082f2	kernel.asm	/^ffff8000001082f2:	80 ff ff $/;"	l
ffff8000001082f5	kernel.asm	/^ffff8000001082f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001082f7	kernel.asm	/^ffff8000001082f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082fb	kernel.asm	/^ffff8000001082fb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082fe	kernel.asm	/^ffff8000001082fe:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff800000108305	kernel.asm	/^ffff800000108305:	80 ff ff $/;"	l
ffff800000108308	kernel.asm	/^ffff800000108308:	ff d0                	callq  *%rax$/;"	l
ffff80000010830a	kernel.asm	/^ffff80000010830a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010830f	kernel.asm	/^ffff80000010830f:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108316	kernel.asm	/^ffff800000108316:	80 ff ff $/;"	l
ffff800000108319	kernel.asm	/^ffff800000108319:	ff d2                	callq  *%rdx$/;"	l
ffff80000010831b	kernel.asm	/^ffff80000010831b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108320	kernel.asm	/^ffff800000108320:	eb 6b                	jmp    ffff80000010838d <sys_link+0x256>$/;"	l
ffff800000108322	kernel.asm	/^ffff800000108322:	90                   	nop$/;"	l
ffff800000108323	kernel.asm	/^ffff800000108323:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108327	kernel.asm	/^ffff800000108327:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010832a	kernel.asm	/^ffff80000010832a:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108331	kernel.asm	/^ffff800000108331:	80 ff ff $/;"	l
ffff800000108334	kernel.asm	/^ffff800000108334:	ff d0                	callq  *%rax$/;"	l
ffff800000108336	kernel.asm	/^ffff800000108336:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010833a	kernel.asm	/^ffff80000010833a:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108341	kernel.asm	/^ffff800000108341:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000108344	kernel.asm	/^ffff800000108344:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108346	kernel.asm	/^ffff800000108346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010834a	kernel.asm	/^ffff80000010834a:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108351	kernel.asm	/^ffff800000108351:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108355	kernel.asm	/^ffff800000108355:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108358	kernel.asm	/^ffff800000108358:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff80000010835f	kernel.asm	/^ffff80000010835f:	80 ff ff $/;"	l
ffff800000108362	kernel.asm	/^ffff800000108362:	ff d0                	callq  *%rax$/;"	l
ffff800000108364	kernel.asm	/^ffff800000108364:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108368	kernel.asm	/^ffff800000108368:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010836b	kernel.asm	/^ffff80000010836b:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108372	kernel.asm	/^ffff800000108372:	80 ff ff $/;"	l
ffff800000108375	kernel.asm	/^ffff800000108375:	ff d0                	callq  *%rax$/;"	l
ffff800000108377	kernel.asm	/^ffff800000108377:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010837c	kernel.asm	/^ffff80000010837c:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108383	kernel.asm	/^ffff800000108383:	80 ff ff $/;"	l
ffff800000108386	kernel.asm	/^ffff800000108386:	ff d2                	callq  *%rdx$/;"	l
ffff800000108388	kernel.asm	/^ffff800000108388:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010838d	kernel.asm	/^ffff80000010838d:	c9                   	leaveq $/;"	l
ffff80000010838e	kernel.asm	/^ffff80000010838e:	c3                   	retq   $/;"	l
ffff80000010838f	kernel.asm	/^ffff80000010838f <isdirempty>:$/;"	l
ffff80000010838f	kernel.asm	/^ffff80000010838f:	55                   	push   %rbp$/;"	l
ffff800000108390	kernel.asm	/^ffff800000108390:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108393	kernel.asm	/^ffff800000108393:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000108397	kernel.asm	/^ffff800000108397:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010839b	kernel.asm	/^ffff80000010839b:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)$/;"	l
ffff8000001083a2	kernel.asm	/^ffff8000001083a2:	eb 53                	jmp    ffff8000001083f7 <isdirempty+0x68>$/;"	l
ffff8000001083a4	kernel.asm	/^ffff8000001083a4:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001083a7	kernel.asm	/^ffff8000001083a7:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff8000001083ab	kernel.asm	/^ffff8000001083ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001083af	kernel.asm	/^ffff8000001083af:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff8000001083b4	kernel.asm	/^ffff8000001083b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001083b7	kernel.asm	/^ffff8000001083b7:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff8000001083be	kernel.asm	/^ffff8000001083be:	80 ff ff $/;"	l
ffff8000001083c1	kernel.asm	/^ffff8000001083c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001083c3	kernel.asm	/^ffff8000001083c3:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff8000001083c6	kernel.asm	/^ffff8000001083c6:	74 16                	je     ffff8000001083de <isdirempty+0x4f>$/;"	l
ffff8000001083c8	kernel.asm	/^ffff8000001083c8:	48 bf ac c0 10 00 00 	movabs $0xffff80000010c0ac,%rdi$/;"	l
ffff8000001083cf	kernel.asm	/^ffff8000001083cf:	80 ff ff $/;"	l
ffff8000001083d2	kernel.asm	/^ffff8000001083d2:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001083d9	kernel.asm	/^ffff8000001083d9:	80 ff ff $/;"	l
ffff8000001083dc	kernel.asm	/^ffff8000001083dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001083de	kernel.asm	/^ffff8000001083de:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001083e2	kernel.asm	/^ffff8000001083e2:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001083e5	kernel.asm	/^ffff8000001083e5:	74 07                	je     ffff8000001083ee <isdirempty+0x5f>$/;"	l
ffff8000001083e7	kernel.asm	/^ffff8000001083e7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001083ec	kernel.asm	/^ffff8000001083ec:	eb 1f                	jmp    ffff80000010840d <isdirempty+0x7e>$/;"	l
ffff8000001083ee	kernel.asm	/^ffff8000001083ee:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001083f1	kernel.asm	/^ffff8000001083f1:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff8000001083f4	kernel.asm	/^ffff8000001083f4:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001083f7	kernel.asm	/^ffff8000001083f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001083fb	kernel.asm	/^ffff8000001083fb:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff800000108401	kernel.asm	/^ffff800000108401:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108404	kernel.asm	/^ffff800000108404:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000108406	kernel.asm	/^ffff800000108406:	77 9c                	ja     ffff8000001083a4 <isdirempty+0x15>$/;"	l
ffff800000108408	kernel.asm	/^ffff800000108408:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff80000010840d	kernel.asm	/^ffff80000010840d:	c9                   	leaveq $/;"	l
ffff80000010840e	kernel.asm	/^ffff80000010840e:	c3                   	retq   $/;"	l
ffff80000010840f	kernel.asm	/^ffff80000010840f <sys_unlink>:$/;"	l
ffff80000010840f	kernel.asm	/^ffff80000010840f:	55                   	push   %rbp$/;"	l
ffff800000108410	kernel.asm	/^ffff800000108410:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108413	kernel.asm	/^ffff800000108413:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000108417	kernel.asm	/^ffff800000108417:	48 8d 45 c8          	lea    -0x38(%rbp),%rax$/;"	l
ffff80000010841b	kernel.asm	/^ffff80000010841b:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010841e	kernel.asm	/^ffff80000010841e:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108423	kernel.asm	/^ffff800000108423:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff80000010842a	kernel.asm	/^ffff80000010842a:	80 ff ff $/;"	l
ffff80000010842d	kernel.asm	/^ffff80000010842d:	ff d0                	callq  *%rax$/;"	l
ffff80000010842f	kernel.asm	/^ffff80000010842f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108431	kernel.asm	/^ffff800000108431:	79 0a                	jns    ffff80000010843d <sys_unlink+0x2e>$/;"	l
ffff800000108433	kernel.asm	/^ffff800000108433:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108438	kernel.asm	/^ffff800000108438:	e9 80 02 00 00       	jmpq   ffff8000001086bd <sys_unlink+0x2ae>$/;"	l
ffff80000010843d	kernel.asm	/^ffff80000010843d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108442	kernel.asm	/^ffff800000108442:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000108449	kernel.asm	/^ffff800000108449:	80 ff ff $/;"	l
ffff80000010844c	kernel.asm	/^ffff80000010844c:	ff d2                	callq  *%rdx$/;"	l
ffff80000010844e	kernel.asm	/^ffff80000010844e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000108452	kernel.asm	/^ffff800000108452:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff800000108456	kernel.asm	/^ffff800000108456:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108459	kernel.asm	/^ffff800000108459:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010845c	kernel.asm	/^ffff80000010845c:	48 b8 e4 36 10 00 00 	movabs $0xffff8000001036e4,%rax$/;"	l
ffff800000108463	kernel.asm	/^ffff800000108463:	80 ff ff $/;"	l
ffff800000108466	kernel.asm	/^ffff800000108466:	ff d0                	callq  *%rax$/;"	l
ffff800000108468	kernel.asm	/^ffff800000108468:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010846c	kernel.asm	/^ffff80000010846c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108471	kernel.asm	/^ffff800000108471:	75 1b                	jne    ffff80000010848e <sys_unlink+0x7f>$/;"	l
ffff800000108473	kernel.asm	/^ffff800000108473:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108478	kernel.asm	/^ffff800000108478:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff80000010847f	kernel.asm	/^ffff80000010847f:	80 ff ff $/;"	l
ffff800000108482	kernel.asm	/^ffff800000108482:	ff d2                	callq  *%rdx$/;"	l
ffff800000108484	kernel.asm	/^ffff800000108484:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108489	kernel.asm	/^ffff800000108489:	e9 2f 02 00 00       	jmpq   ffff8000001086bd <sys_unlink+0x2ae>$/;"	l
ffff80000010848e	kernel.asm	/^ffff80000010848e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108492	kernel.asm	/^ffff800000108492:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108495	kernel.asm	/^ffff800000108495:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff80000010849c	kernel.asm	/^ffff80000010849c:	80 ff ff $/;"	l
ffff80000010849f	kernel.asm	/^ffff80000010849f:	ff d0                	callq  *%rax$/;"	l
ffff8000001084a1	kernel.asm	/^ffff8000001084a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff8000001084a5	kernel.asm	/^ffff8000001084a5:	48 be be c0 10 00 00 	movabs $0xffff80000010c0be,%rsi$/;"	l
ffff8000001084ac	kernel.asm	/^ffff8000001084ac:	80 ff ff $/;"	l
ffff8000001084af	kernel.asm	/^ffff8000001084af:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001084b2	kernel.asm	/^ffff8000001084b2:	48 b8 ff 31 10 00 00 	movabs $0xffff8000001031ff,%rax$/;"	l
ffff8000001084b9	kernel.asm	/^ffff8000001084b9:	80 ff ff $/;"	l
ffff8000001084bc	kernel.asm	/^ffff8000001084bc:	ff d0                	callq  *%rax$/;"	l
ffff8000001084be	kernel.asm	/^ffff8000001084be:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001084c0	kernel.asm	/^ffff8000001084c0:	0f 84 ce 01 00 00    	je     ffff800000108694 <sys_unlink+0x285>$/;"	l
ffff8000001084c6	kernel.asm	/^ffff8000001084c6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff8000001084ca	kernel.asm	/^ffff8000001084ca:	48 be c0 c0 10 00 00 	movabs $0xffff80000010c0c0,%rsi$/;"	l
ffff8000001084d1	kernel.asm	/^ffff8000001084d1:	80 ff ff $/;"	l
ffff8000001084d4	kernel.asm	/^ffff8000001084d4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001084d7	kernel.asm	/^ffff8000001084d7:	48 b8 ff 31 10 00 00 	movabs $0xffff8000001031ff,%rax$/;"	l
ffff8000001084de	kernel.asm	/^ffff8000001084de:	80 ff ff $/;"	l
ffff8000001084e1	kernel.asm	/^ffff8000001084e1:	ff d0                	callq  *%rax$/;"	l
ffff8000001084e3	kernel.asm	/^ffff8000001084e3:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001084e5	kernel.asm	/^ffff8000001084e5:	0f 84 a9 01 00 00    	je     ffff800000108694 <sys_unlink+0x285>$/;"	l
ffff8000001084eb	kernel.asm	/^ffff8000001084eb:	48 8d 55 c4          	lea    -0x3c(%rbp),%rdx$/;"	l
ffff8000001084ef	kernel.asm	/^ffff8000001084ef:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001084f3	kernel.asm	/^ffff8000001084f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001084f7	kernel.asm	/^ffff8000001084f7:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001084fa	kernel.asm	/^ffff8000001084fa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001084fd	kernel.asm	/^ffff8000001084fd:	48 b8 30 32 10 00 00 	movabs $0xffff800000103230,%rax$/;"	l
ffff800000108504	kernel.asm	/^ffff800000108504:	80 ff ff $/;"	l
ffff800000108507	kernel.asm	/^ffff800000108507:	ff d0                	callq  *%rax$/;"	l
ffff800000108509	kernel.asm	/^ffff800000108509:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010850d	kernel.asm	/^ffff80000010850d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108512	kernel.asm	/^ffff800000108512:	0f 84 7b 01 00 00    	je     ffff800000108693 <sys_unlink+0x284>$/;"	l
ffff800000108518	kernel.asm	/^ffff800000108518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010851c	kernel.asm	/^ffff80000010851c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010851f	kernel.asm	/^ffff80000010851f:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108526	kernel.asm	/^ffff800000108526:	80 ff ff $/;"	l
ffff800000108529	kernel.asm	/^ffff800000108529:	ff d0                	callq  *%rax$/;"	l
ffff80000010852b	kernel.asm	/^ffff80000010852b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010852f	kernel.asm	/^ffff80000010852f:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108536	kernel.asm	/^ffff800000108536:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000108539	kernel.asm	/^ffff800000108539:	7f 16                	jg     ffff800000108551 <sys_unlink+0x142>$/;"	l
ffff80000010853b	kernel.asm	/^ffff80000010853b:	48 bf c3 c0 10 00 00 	movabs $0xffff80000010c0c3,%rdi$/;"	l
ffff800000108542	kernel.asm	/^ffff800000108542:	80 ff ff $/;"	l
ffff800000108545	kernel.asm	/^ffff800000108545:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010854c	kernel.asm	/^ffff80000010854c:	80 ff ff $/;"	l
ffff80000010854f	kernel.asm	/^ffff80000010854f:	ff d0                	callq  *%rax$/;"	l
ffff800000108551	kernel.asm	/^ffff800000108551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108555	kernel.asm	/^ffff800000108555:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010855c	kernel.asm	/^ffff80000010855c:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108560	kernel.asm	/^ffff800000108560:	75 2f                	jne    ffff800000108591 <sys_unlink+0x182>$/;"	l
ffff800000108562	kernel.asm	/^ffff800000108562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108566	kernel.asm	/^ffff800000108566:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108569	kernel.asm	/^ffff800000108569:	48 b8 8f 83 10 00 00 	movabs $0xffff80000010838f,%rax$/;"	l
ffff800000108570	kernel.asm	/^ffff800000108570:	80 ff ff $/;"	l
ffff800000108573	kernel.asm	/^ffff800000108573:	ff d0                	callq  *%rax$/;"	l
ffff800000108575	kernel.asm	/^ffff800000108575:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108577	kernel.asm	/^ffff800000108577:	75 18                	jne    ffff800000108591 <sys_unlink+0x182>$/;"	l
ffff800000108579	kernel.asm	/^ffff800000108579:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010857d	kernel.asm	/^ffff80000010857d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108580	kernel.asm	/^ffff800000108580:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108587	kernel.asm	/^ffff800000108587:	80 ff ff $/;"	l
ffff80000010858a	kernel.asm	/^ffff80000010858a:	ff d0                	callq  *%rax$/;"	l
ffff80000010858c	kernel.asm	/^ffff80000010858c:	e9 03 01 00 00       	jmpq   ffff800000108694 <sys_unlink+0x285>$/;"	l
ffff800000108591	kernel.asm	/^ffff800000108591:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000108595	kernel.asm	/^ffff800000108595:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010859a	kernel.asm	/^ffff80000010859a:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010859f	kernel.asm	/^ffff80000010859f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085a2	kernel.asm	/^ffff8000001085a2:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff8000001085a9	kernel.asm	/^ffff8000001085a9:	80 ff ff $/;"	l
ffff8000001085ac	kernel.asm	/^ffff8000001085ac:	ff d0                	callq  *%rax$/;"	l
ffff8000001085ae	kernel.asm	/^ffff8000001085ae:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff8000001085b1	kernel.asm	/^ffff8000001085b1:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff8000001085b5	kernel.asm	/^ffff8000001085b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085b9	kernel.asm	/^ffff8000001085b9:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff8000001085be	kernel.asm	/^ffff8000001085be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085c1	kernel.asm	/^ffff8000001085c1:	48 b8 ed 2f 10 00 00 	movabs $0xffff800000102fed,%rax$/;"	l
ffff8000001085c8	kernel.asm	/^ffff8000001085c8:	80 ff ff $/;"	l
ffff8000001085cb	kernel.asm	/^ffff8000001085cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001085cd	kernel.asm	/^ffff8000001085cd:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff8000001085d0	kernel.asm	/^ffff8000001085d0:	74 16                	je     ffff8000001085e8 <sys_unlink+0x1d9>$/;"	l
ffff8000001085d2	kernel.asm	/^ffff8000001085d2:	48 bf d5 c0 10 00 00 	movabs $0xffff80000010c0d5,%rdi$/;"	l
ffff8000001085d9	kernel.asm	/^ffff8000001085d9:	80 ff ff $/;"	l
ffff8000001085dc	kernel.asm	/^ffff8000001085dc:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001085e3	kernel.asm	/^ffff8000001085e3:	80 ff ff $/;"	l
ffff8000001085e6	kernel.asm	/^ffff8000001085e6:	ff d0                	callq  *%rax$/;"	l
ffff8000001085e8	kernel.asm	/^ffff8000001085e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001085ec	kernel.asm	/^ffff8000001085ec:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001085f3	kernel.asm	/^ffff8000001085f3:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001085f7	kernel.asm	/^ffff8000001085f7:	75 2e                	jne    ffff800000108627 <sys_unlink+0x218>$/;"	l
ffff8000001085f9	kernel.asm	/^ffff8000001085f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085fd	kernel.asm	/^ffff8000001085fd:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108604	kernel.asm	/^ffff800000108604:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000108607	kernel.asm	/^ffff800000108607:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108609	kernel.asm	/^ffff800000108609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010860d	kernel.asm	/^ffff80000010860d:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108614	kernel.asm	/^ffff800000108614:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108618	kernel.asm	/^ffff800000108618:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010861b	kernel.asm	/^ffff80000010861b:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000108622	kernel.asm	/^ffff800000108622:	80 ff ff $/;"	l
ffff800000108625	kernel.asm	/^ffff800000108625:	ff d0                	callq  *%rax$/;"	l
ffff800000108627	kernel.asm	/^ffff800000108627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010862b	kernel.asm	/^ffff80000010862b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010862e	kernel.asm	/^ffff80000010862e:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108635	kernel.asm	/^ffff800000108635:	80 ff ff $/;"	l
ffff800000108638	kernel.asm	/^ffff800000108638:	ff d0                	callq  *%rax$/;"	l
ffff80000010863a	kernel.asm	/^ffff80000010863a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010863e	kernel.asm	/^ffff80000010863e:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108645	kernel.asm	/^ffff800000108645:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000108648	kernel.asm	/^ffff800000108648:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010864a	kernel.asm	/^ffff80000010864a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010864e	kernel.asm	/^ffff80000010864e:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108655	kernel.asm	/^ffff800000108655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108659	kernel.asm	/^ffff800000108659:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010865c	kernel.asm	/^ffff80000010865c:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000108663	kernel.asm	/^ffff800000108663:	80 ff ff $/;"	l
ffff800000108666	kernel.asm	/^ffff800000108666:	ff d0                	callq  *%rax$/;"	l
ffff800000108668	kernel.asm	/^ffff800000108668:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010866c	kernel.asm	/^ffff80000010866c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010866f	kernel.asm	/^ffff80000010866f:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108676	kernel.asm	/^ffff800000108676:	80 ff ff $/;"	l
ffff800000108679	kernel.asm	/^ffff800000108679:	ff d0                	callq  *%rax$/;"	l
ffff80000010867b	kernel.asm	/^ffff80000010867b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108680	kernel.asm	/^ffff800000108680:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108687	kernel.asm	/^ffff800000108687:	80 ff ff $/;"	l
ffff80000010868a	kernel.asm	/^ffff80000010868a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010868c	kernel.asm	/^ffff80000010868c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108691	kernel.asm	/^ffff800000108691:	eb 2a                	jmp    ffff8000001086bd <sys_unlink+0x2ae>$/;"	l
ffff800000108693	kernel.asm	/^ffff800000108693:	90                   	nop$/;"	l
ffff800000108694	kernel.asm	/^ffff800000108694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108698	kernel.asm	/^ffff800000108698:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010869b	kernel.asm	/^ffff80000010869b:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff8000001086a2	kernel.asm	/^ffff8000001086a2:	80 ff ff $/;"	l
ffff8000001086a5	kernel.asm	/^ffff8000001086a5:	ff d0                	callq  *%rax$/;"	l
ffff8000001086a7	kernel.asm	/^ffff8000001086a7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001086ac	kernel.asm	/^ffff8000001086ac:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff8000001086b3	kernel.asm	/^ffff8000001086b3:	80 ff ff $/;"	l
ffff8000001086b6	kernel.asm	/^ffff8000001086b6:	ff d2                	callq  *%rdx$/;"	l
ffff8000001086b8	kernel.asm	/^ffff8000001086b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001086bd	kernel.asm	/^ffff8000001086bd:	c9                   	leaveq $/;"	l
ffff8000001086be	kernel.asm	/^ffff8000001086be:	c3                   	retq   $/;"	l
ffff8000001086bf	kernel.asm	/^ffff8000001086bf <create>:$/;"	l
ffff8000001086bf	kernel.asm	/^ffff8000001086bf:	55                   	push   %rbp$/;"	l
ffff8000001086c0	kernel.asm	/^ffff8000001086c0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001086c3	kernel.asm	/^ffff8000001086c3:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff8000001086c7	kernel.asm	/^ffff8000001086c7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff8000001086cb	kernel.asm	/^ffff8000001086cb:	89 c8                	mov    %ecx,%eax$/;"	l
ffff8000001086cd	kernel.asm	/^ffff8000001086cd:	66 89 75 c4          	mov    %si,-0x3c(%rbp)$/;"	l
ffff8000001086d1	kernel.asm	/^ffff8000001086d1:	66 89 55 c0          	mov    %dx,-0x40(%rbp)$/;"	l
ffff8000001086d5	kernel.asm	/^ffff8000001086d5:	66 89 45 bc          	mov    %ax,-0x44(%rbp)$/;"	l
ffff8000001086d9	kernel.asm	/^ffff8000001086d9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff8000001086dd	kernel.asm	/^ffff8000001086dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001086e1	kernel.asm	/^ffff8000001086e1:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001086e4	kernel.asm	/^ffff8000001086e4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001086e7	kernel.asm	/^ffff8000001086e7:	48 b8 e4 36 10 00 00 	movabs $0xffff8000001036e4,%rax$/;"	l
ffff8000001086ee	kernel.asm	/^ffff8000001086ee:	80 ff ff $/;"	l
ffff8000001086f1	kernel.asm	/^ffff8000001086f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001086f3	kernel.asm	/^ffff8000001086f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001086f7	kernel.asm	/^ffff8000001086f7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001086fc	kernel.asm	/^ffff8000001086fc:	75 0a                	jne    ffff800000108708 <create+0x49>$/;"	l
ffff8000001086fe	kernel.asm	/^ffff8000001086fe:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108703	kernel.asm	/^ffff800000108703:	e9 1d 02 00 00       	jmpq   ffff800000108925 <create+0x266>$/;"	l
ffff800000108708	kernel.asm	/^ffff800000108708:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010870c	kernel.asm	/^ffff80000010870c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010870f	kernel.asm	/^ffff80000010870f:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108716	kernel.asm	/^ffff800000108716:	80 ff ff $/;"	l
ffff800000108719	kernel.asm	/^ffff800000108719:	ff d0                	callq  *%rax$/;"	l
ffff80000010871b	kernel.asm	/^ffff80000010871b:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx$/;"	l
ffff80000010871f	kernel.asm	/^ffff80000010871f:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff800000108723	kernel.asm	/^ffff800000108723:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108727	kernel.asm	/^ffff800000108727:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010872a	kernel.asm	/^ffff80000010872a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010872d	kernel.asm	/^ffff80000010872d:	48 b8 30 32 10 00 00 	movabs $0xffff800000103230,%rax$/;"	l
ffff800000108734	kernel.asm	/^ffff800000108734:	80 ff ff $/;"	l
ffff800000108737	kernel.asm	/^ffff800000108737:	ff d0                	callq  *%rax$/;"	l
ffff800000108739	kernel.asm	/^ffff800000108739:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010873d	kernel.asm	/^ffff80000010873d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108742	kernel.asm	/^ffff800000108742:	74 64                	je     ffff8000001087a8 <create+0xe9>$/;"	l
ffff800000108744	kernel.asm	/^ffff800000108744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108748	kernel.asm	/^ffff800000108748:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010874b	kernel.asm	/^ffff80000010874b:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108752	kernel.asm	/^ffff800000108752:	80 ff ff $/;"	l
ffff800000108755	kernel.asm	/^ffff800000108755:	ff d0                	callq  *%rax$/;"	l
ffff800000108757	kernel.asm	/^ffff800000108757:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010875b	kernel.asm	/^ffff80000010875b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010875e	kernel.asm	/^ffff80000010875e:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108765	kernel.asm	/^ffff800000108765:	80 ff ff $/;"	l
ffff800000108768	kernel.asm	/^ffff800000108768:	ff d0                	callq  *%rax$/;"	l
ffff80000010876a	kernel.asm	/^ffff80000010876a:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%rbp)$/;"	l
ffff80000010876f	kernel.asm	/^ffff80000010876f:	75 1a                	jne    ffff80000010878b <create+0xcc>$/;"	l
ffff800000108771	kernel.asm	/^ffff800000108771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108775	kernel.asm	/^ffff800000108775:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010877c	kernel.asm	/^ffff80000010877c:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
ffff800000108780	kernel.asm	/^ffff800000108780:	75 09                	jne    ffff80000010878b <create+0xcc>$/;"	l
ffff800000108782	kernel.asm	/^ffff800000108782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108786	kernel.asm	/^ffff800000108786:	e9 9a 01 00 00       	jmpq   ffff800000108925 <create+0x266>$/;"	l
ffff80000010878b	kernel.asm	/^ffff80000010878b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010878f	kernel.asm	/^ffff80000010878f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108792	kernel.asm	/^ffff800000108792:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108799	kernel.asm	/^ffff800000108799:	80 ff ff $/;"	l
ffff80000010879c	kernel.asm	/^ffff80000010879c:	ff d0                	callq  *%rax$/;"	l
ffff80000010879e	kernel.asm	/^ffff80000010879e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001087a3	kernel.asm	/^ffff8000001087a3:	e9 7d 01 00 00       	jmpq   ffff800000108925 <create+0x266>$/;"	l
ffff8000001087a8	kernel.asm	/^ffff8000001087a8:	0f bf 55 c4          	movswl -0x3c(%rbp),%edx$/;"	l
ffff8000001087ac	kernel.asm	/^ffff8000001087ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001087b0	kernel.asm	/^ffff8000001087b0:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001087b2	kernel.asm	/^ffff8000001087b2:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001087b4	kernel.asm	/^ffff8000001087b4:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001087b6	kernel.asm	/^ffff8000001087b6:	48 b8 13 24 10 00 00 	movabs $0xffff800000102413,%rax$/;"	l
ffff8000001087bd	kernel.asm	/^ffff8000001087bd:	80 ff ff $/;"	l
ffff8000001087c0	kernel.asm	/^ffff8000001087c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001087c2	kernel.asm	/^ffff8000001087c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001087c6	kernel.asm	/^ffff8000001087c6:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001087cb	kernel.asm	/^ffff8000001087cb:	75 16                	jne    ffff8000001087e3 <create+0x124>$/;"	l
ffff8000001087cd	kernel.asm	/^ffff8000001087cd:	48 bf e4 c0 10 00 00 	movabs $0xffff80000010c0e4,%rdi$/;"	l
ffff8000001087d4	kernel.asm	/^ffff8000001087d4:	80 ff ff $/;"	l
ffff8000001087d7	kernel.asm	/^ffff8000001087d7:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001087de	kernel.asm	/^ffff8000001087de:	80 ff ff $/;"	l
ffff8000001087e1	kernel.asm	/^ffff8000001087e1:	ff d0                	callq  *%rax$/;"	l
ffff8000001087e3	kernel.asm	/^ffff8000001087e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087e7	kernel.asm	/^ffff8000001087e7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087ea	kernel.asm	/^ffff8000001087ea:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff8000001087f1	kernel.asm	/^ffff8000001087f1:	80 ff ff $/;"	l
ffff8000001087f4	kernel.asm	/^ffff8000001087f4:	ff d0                	callq  *%rax$/;"	l
ffff8000001087f6	kernel.asm	/^ffff8000001087f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087fa	kernel.asm	/^ffff8000001087fa:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx$/;"	l
ffff8000001087fe	kernel.asm	/^ffff8000001087fe:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff800000108805	kernel.asm	/^ffff800000108805:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108809	kernel.asm	/^ffff800000108809:	0f b7 55 bc          	movzwl -0x44(%rbp),%edx$/;"	l
ffff80000010880d	kernel.asm	/^ffff80000010880d:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff800000108814	kernel.asm	/^ffff800000108814:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108818	kernel.asm	/^ffff800000108818:	66 c7 80 9a 00 00 00 	movw   $0x1,0x9a(%rax)$/;"	l
ffff80000010881f	kernel.asm	/^ffff80000010881f:	01 00 $/;"	l
ffff800000108821	kernel.asm	/^ffff800000108821:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108825	kernel.asm	/^ffff800000108825:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108828	kernel.asm	/^ffff800000108828:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff80000010882f	kernel.asm	/^ffff80000010882f:	80 ff ff $/;"	l
ffff800000108832	kernel.asm	/^ffff800000108832:	ff d0                	callq  *%rax$/;"	l
ffff800000108834	kernel.asm	/^ffff800000108834:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%rbp)$/;"	l
ffff800000108839	kernel.asm	/^ffff800000108839:	0f 85 94 00 00 00    	jne    ffff8000001088d3 <create+0x214>$/;"	l
ffff80000010883f	kernel.asm	/^ffff80000010883f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108843	kernel.asm	/^ffff800000108843:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff80000010884a	kernel.asm	/^ffff80000010884a:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010884d	kernel.asm	/^ffff80000010884d:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010884f	kernel.asm	/^ffff80000010884f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108853	kernel.asm	/^ffff800000108853:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff80000010885a	kernel.asm	/^ffff80000010885a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010885e	kernel.asm	/^ffff80000010885e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108861	kernel.asm	/^ffff800000108861:	48 b8 38 25 10 00 00 	movabs $0xffff800000102538,%rax$/;"	l
ffff800000108868	kernel.asm	/^ffff800000108868:	80 ff ff $/;"	l
ffff80000010886b	kernel.asm	/^ffff80000010886b:	ff d0                	callq  *%rax$/;"	l
ffff80000010886d	kernel.asm	/^ffff80000010886d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108871	kernel.asm	/^ffff800000108871:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108874	kernel.asm	/^ffff800000108874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108878	kernel.asm	/^ffff800000108878:	48 be be c0 10 00 00 	movabs $0xffff80000010c0be,%rsi$/;"	l
ffff80000010887f	kernel.asm	/^ffff80000010887f:	80 ff ff $/;"	l
ffff800000108882	kernel.asm	/^ffff800000108882:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108885	kernel.asm	/^ffff800000108885:	48 b8 30 33 10 00 00 	movabs $0xffff800000103330,%rax$/;"	l
ffff80000010888c	kernel.asm	/^ffff80000010888c:	80 ff ff $/;"	l
ffff80000010888f	kernel.asm	/^ffff80000010888f:	ff d0                	callq  *%rax$/;"	l
ffff800000108891	kernel.asm	/^ffff800000108891:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108893	kernel.asm	/^ffff800000108893:	78 28                	js     ffff8000001088bd <create+0x1fe>$/;"	l
ffff800000108895	kernel.asm	/^ffff800000108895:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108899	kernel.asm	/^ffff800000108899:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff80000010889c	kernel.asm	/^ffff80000010889c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088a0	kernel.asm	/^ffff8000001088a0:	48 be c0 c0 10 00 00 	movabs $0xffff80000010c0c0,%rsi$/;"	l
ffff8000001088a7	kernel.asm	/^ffff8000001088a7:	80 ff ff $/;"	l
ffff8000001088aa	kernel.asm	/^ffff8000001088aa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088ad	kernel.asm	/^ffff8000001088ad:	48 b8 30 33 10 00 00 	movabs $0xffff800000103330,%rax$/;"	l
ffff8000001088b4	kernel.asm	/^ffff8000001088b4:	80 ff ff $/;"	l
ffff8000001088b7	kernel.asm	/^ffff8000001088b7:	ff d0                	callq  *%rax$/;"	l
ffff8000001088b9	kernel.asm	/^ffff8000001088b9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001088bb	kernel.asm	/^ffff8000001088bb:	79 16                	jns    ffff8000001088d3 <create+0x214>$/;"	l
ffff8000001088bd	kernel.asm	/^ffff8000001088bd:	48 bf f3 c0 10 00 00 	movabs $0xffff80000010c0f3,%rdi$/;"	l
ffff8000001088c4	kernel.asm	/^ffff8000001088c4:	80 ff ff $/;"	l
ffff8000001088c7	kernel.asm	/^ffff8000001088c7:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001088ce	kernel.asm	/^ffff8000001088ce:	80 ff ff $/;"	l
ffff8000001088d1	kernel.asm	/^ffff8000001088d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001088d3	kernel.asm	/^ffff8000001088d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088d7	kernel.asm	/^ffff8000001088d7:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff8000001088da	kernel.asm	/^ffff8000001088da:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001088de	kernel.asm	/^ffff8000001088de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001088e2	kernel.asm	/^ffff8000001088e2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001088e5	kernel.asm	/^ffff8000001088e5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088e8	kernel.asm	/^ffff8000001088e8:	48 b8 30 33 10 00 00 	movabs $0xffff800000103330,%rax$/;"	l
ffff8000001088ef	kernel.asm	/^ffff8000001088ef:	80 ff ff $/;"	l
ffff8000001088f2	kernel.asm	/^ffff8000001088f2:	ff d0                	callq  *%rax$/;"	l
ffff8000001088f4	kernel.asm	/^ffff8000001088f4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001088f6	kernel.asm	/^ffff8000001088f6:	79 16                	jns    ffff80000010890e <create+0x24f>$/;"	l
ffff8000001088f8	kernel.asm	/^ffff8000001088f8:	48 bf ff c0 10 00 00 	movabs $0xffff80000010c0ff,%rdi$/;"	l
ffff8000001088ff	kernel.asm	/^ffff8000001088ff:	80 ff ff $/;"	l
ffff800000108902	kernel.asm	/^ffff800000108902:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000108909	kernel.asm	/^ffff800000108909:	80 ff ff $/;"	l
ffff80000010890c	kernel.asm	/^ffff80000010890c:	ff d0                	callq  *%rax$/;"	l
ffff80000010890e	kernel.asm	/^ffff80000010890e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108912	kernel.asm	/^ffff800000108912:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108915	kernel.asm	/^ffff800000108915:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff80000010891c	kernel.asm	/^ffff80000010891c:	80 ff ff $/;"	l
ffff80000010891f	kernel.asm	/^ffff80000010891f:	ff d0                	callq  *%rax$/;"	l
ffff800000108921	kernel.asm	/^ffff800000108921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108925	kernel.asm	/^ffff800000108925:	c9                   	leaveq $/;"	l
ffff800000108926	kernel.asm	/^ffff800000108926:	c3                   	retq   $/;"	l
ffff800000108927	kernel.asm	/^ffff800000108927 <sys_open>:$/;"	l
ffff800000108927	kernel.asm	/^ffff800000108927:	55                   	push   %rbp$/;"	l
ffff800000108928	kernel.asm	/^ffff800000108928:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010892b	kernel.asm	/^ffff80000010892b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010892f	kernel.asm	/^ffff80000010892f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000108933	kernel.asm	/^ffff800000108933:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108936	kernel.asm	/^ffff800000108936:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010893b	kernel.asm	/^ffff80000010893b:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108942	kernel.asm	/^ffff800000108942:	80 ff ff $/;"	l
ffff800000108945	kernel.asm	/^ffff800000108945:	ff d0                	callq  *%rax$/;"	l
ffff800000108947	kernel.asm	/^ffff800000108947:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108949	kernel.asm	/^ffff800000108949:	78 1c                	js     ffff800000108967 <sys_open+0x40>$/;"	l
ffff80000010894b	kernel.asm	/^ffff80000010894b:	48 8d 45 dc          	lea    -0x24(%rbp),%rax$/;"	l
ffff80000010894f	kernel.asm	/^ffff80000010894f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108952	kernel.asm	/^ffff800000108952:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108957	kernel.asm	/^ffff800000108957:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff80000010895e	kernel.asm	/^ffff80000010895e:	80 ff ff $/;"	l
ffff800000108961	kernel.asm	/^ffff800000108961:	ff d0                	callq  *%rax$/;"	l
ffff800000108963	kernel.asm	/^ffff800000108963:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108965	kernel.asm	/^ffff800000108965:	79 0a                	jns    ffff800000108971 <sys_open+0x4a>$/;"	l
ffff800000108967	kernel.asm	/^ffff800000108967:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010896c	kernel.asm	/^ffff80000010896c:	e9 fb 01 00 00       	jmpq   ffff800000108b6c <sys_open+0x245>$/;"	l
ffff800000108971	kernel.asm	/^ffff800000108971:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108976	kernel.asm	/^ffff800000108976:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff80000010897d	kernel.asm	/^ffff80000010897d:	80 ff ff $/;"	l
ffff800000108980	kernel.asm	/^ffff800000108980:	ff d2                	callq  *%rdx$/;"	l
ffff800000108982	kernel.asm	/^ffff800000108982:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108985	kernel.asm	/^ffff800000108985:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff80000010898a	kernel.asm	/^ffff80000010898a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010898c	kernel.asm	/^ffff80000010898c:	74 4c                	je     ffff8000001089da <sys_open+0xb3>$/;"	l
ffff80000010898e	kernel.asm	/^ffff80000010898e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108992	kernel.asm	/^ffff800000108992:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108997	kernel.asm	/^ffff800000108997:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010899c	kernel.asm	/^ffff80000010899c:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff8000001089a1	kernel.asm	/^ffff8000001089a1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089a4	kernel.asm	/^ffff8000001089a4:	48 b8 bf 86 10 00 00 	movabs $0xffff8000001086bf,%rax$/;"	l
ffff8000001089ab	kernel.asm	/^ffff8000001089ab:	80 ff ff $/;"	l
ffff8000001089ae	kernel.asm	/^ffff8000001089ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001089b0	kernel.asm	/^ffff8000001089b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001089b4	kernel.asm	/^ffff8000001089b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001089b9	kernel.asm	/^ffff8000001089b9:	0f 85 ad 00 00 00    	jne    ffff800000108a6c <sys_open+0x145>$/;"	l
ffff8000001089bf	kernel.asm	/^ffff8000001089bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001089c4	kernel.asm	/^ffff8000001089c4:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff8000001089cb	kernel.asm	/^ffff8000001089cb:	80 ff ff $/;"	l
ffff8000001089ce	kernel.asm	/^ffff8000001089ce:	ff d2                	callq  *%rdx$/;"	l
ffff8000001089d0	kernel.asm	/^ffff8000001089d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001089d5	kernel.asm	/^ffff8000001089d5:	e9 92 01 00 00       	jmpq   ffff800000108b6c <sys_open+0x245>$/;"	l
ffff8000001089da	kernel.asm	/^ffff8000001089da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001089de	kernel.asm	/^ffff8000001089de:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089e1	kernel.asm	/^ffff8000001089e1:	48 b8 ba 36 10 00 00 	movabs $0xffff8000001036ba,%rax$/;"	l
ffff8000001089e8	kernel.asm	/^ffff8000001089e8:	80 ff ff $/;"	l
ffff8000001089eb	kernel.asm	/^ffff8000001089eb:	ff d0                	callq  *%rax$/;"	l
ffff8000001089ed	kernel.asm	/^ffff8000001089ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001089f1	kernel.asm	/^ffff8000001089f1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001089f6	kernel.asm	/^ffff8000001089f6:	75 1b                	jne    ffff800000108a13 <sys_open+0xec>$/;"	l
ffff8000001089f8	kernel.asm	/^ffff8000001089f8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001089fd	kernel.asm	/^ffff8000001089fd:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108a04	kernel.asm	/^ffff800000108a04:	80 ff ff $/;"	l
ffff800000108a07	kernel.asm	/^ffff800000108a07:	ff d2                	callq  *%rdx$/;"	l
ffff800000108a09	kernel.asm	/^ffff800000108a09:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108a0e	kernel.asm	/^ffff800000108a0e:	e9 59 01 00 00       	jmpq   ffff800000108b6c <sys_open+0x245>$/;"	l
ffff800000108a13	kernel.asm	/^ffff800000108a13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108a17	kernel.asm	/^ffff800000108a17:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a1a	kernel.asm	/^ffff800000108a1a:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108a21	kernel.asm	/^ffff800000108a21:	80 ff ff $/;"	l
ffff800000108a24	kernel.asm	/^ffff800000108a24:	ff d0                	callq  *%rax$/;"	l
ffff800000108a26	kernel.asm	/^ffff800000108a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108a2a	kernel.asm	/^ffff800000108a2a:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108a31	kernel.asm	/^ffff800000108a31:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108a35	kernel.asm	/^ffff800000108a35:	75 35                	jne    ffff800000108a6c <sys_open+0x145>$/;"	l
ffff800000108a37	kernel.asm	/^ffff800000108a37:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108a3a	kernel.asm	/^ffff800000108a3a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108a3c	kernel.asm	/^ffff800000108a3c:	74 2e                	je     ffff800000108a6c <sys_open+0x145>$/;"	l
ffff800000108a3e	kernel.asm	/^ffff800000108a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108a42	kernel.asm	/^ffff800000108a42:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a45	kernel.asm	/^ffff800000108a45:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108a4c	kernel.asm	/^ffff800000108a4c:	80 ff ff $/;"	l
ffff800000108a4f	kernel.asm	/^ffff800000108a4f:	ff d0                	callq  *%rax$/;"	l
ffff800000108a51	kernel.asm	/^ffff800000108a51:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108a56	kernel.asm	/^ffff800000108a56:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108a5d	kernel.asm	/^ffff800000108a5d:	80 ff ff $/;"	l
ffff800000108a60	kernel.asm	/^ffff800000108a60:	ff d2                	callq  *%rdx$/;"	l
ffff800000108a62	kernel.asm	/^ffff800000108a62:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108a67	kernel.asm	/^ffff800000108a67:	e9 00 01 00 00       	jmpq   ffff800000108b6c <sys_open+0x245>$/;"	l
ffff800000108a6c	kernel.asm	/^ffff800000108a6c:	48 b8 a0 1a 10 00 00 	movabs $0xffff800000101aa0,%rax$/;"	l
ffff800000108a73	kernel.asm	/^ffff800000108a73:	80 ff ff $/;"	l
ffff800000108a76	kernel.asm	/^ffff800000108a76:	ff d0                	callq  *%rax$/;"	l
ffff800000108a78	kernel.asm	/^ffff800000108a78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108a7c	kernel.asm	/^ffff800000108a7c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108a81	kernel.asm	/^ffff800000108a81:	74 1c                	je     ffff800000108a9f <sys_open+0x178>$/;"	l
ffff800000108a83	kernel.asm	/^ffff800000108a83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a87	kernel.asm	/^ffff800000108a87:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a8a	kernel.asm	/^ffff800000108a8a:	48 b8 7c 7e 10 00 00 	movabs $0xffff800000107e7c,%rax$/;"	l
ffff800000108a91	kernel.asm	/^ffff800000108a91:	80 ff ff $/;"	l
ffff800000108a94	kernel.asm	/^ffff800000108a94:	ff d0                	callq  *%rax$/;"	l
ffff800000108a96	kernel.asm	/^ffff800000108a96:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000108a99	kernel.asm	/^ffff800000108a99:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000108a9d	kernel.asm	/^ffff800000108a9d:	79 48                	jns    ffff800000108ae7 <sys_open+0x1c0>$/;"	l
ffff800000108a9f	kernel.asm	/^ffff800000108a9f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108aa4	kernel.asm	/^ffff800000108aa4:	74 13                	je     ffff800000108ab9 <sys_open+0x192>$/;"	l
ffff800000108aa6	kernel.asm	/^ffff800000108aa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108aaa	kernel.asm	/^ffff800000108aaa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108aad	kernel.asm	/^ffff800000108aad:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff800000108ab4	kernel.asm	/^ffff800000108ab4:	80 ff ff $/;"	l
ffff800000108ab7	kernel.asm	/^ffff800000108ab7:	ff d0                	callq  *%rax$/;"	l
ffff800000108ab9	kernel.asm	/^ffff800000108ab9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108abd	kernel.asm	/^ffff800000108abd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108ac0	kernel.asm	/^ffff800000108ac0:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108ac7	kernel.asm	/^ffff800000108ac7:	80 ff ff $/;"	l
ffff800000108aca	kernel.asm	/^ffff800000108aca:	ff d0                	callq  *%rax$/;"	l
ffff800000108acc	kernel.asm	/^ffff800000108acc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108ad1	kernel.asm	/^ffff800000108ad1:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108ad8	kernel.asm	/^ffff800000108ad8:	80 ff ff $/;"	l
ffff800000108adb	kernel.asm	/^ffff800000108adb:	ff d2                	callq  *%rdx$/;"	l
ffff800000108add	kernel.asm	/^ffff800000108add:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108ae2	kernel.asm	/^ffff800000108ae2:	e9 85 00 00 00       	jmpq   ffff800000108b6c <sys_open+0x245>$/;"	l
ffff800000108ae7	kernel.asm	/^ffff800000108ae7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108aeb	kernel.asm	/^ffff800000108aeb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108aee	kernel.asm	/^ffff800000108aee:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000108af5	kernel.asm	/^ffff800000108af5:	80 ff ff $/;"	l
ffff800000108af8	kernel.asm	/^ffff800000108af8:	ff d0                	callq  *%rax$/;"	l
ffff800000108afa	kernel.asm	/^ffff800000108afa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108aff	kernel.asm	/^ffff800000108aff:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108b06	kernel.asm	/^ffff800000108b06:	80 ff ff $/;"	l
ffff800000108b09	kernel.asm	/^ffff800000108b09:	ff d2                	callq  *%rdx$/;"	l
ffff800000108b0b	kernel.asm	/^ffff800000108b0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b0f	kernel.asm	/^ffff800000108b0f:	c7 00 02 00 00 00    	movl   $0x2,(%rax)$/;"	l
ffff800000108b15	kernel.asm	/^ffff800000108b15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b19	kernel.asm	/^ffff800000108b19:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108b1d	kernel.asm	/^ffff800000108b1d:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff800000108b21	kernel.asm	/^ffff800000108b21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b25	kernel.asm	/^ffff800000108b25:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)$/;"	l
ffff800000108b2c	kernel.asm	/^ffff800000108b2c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108b2f	kernel.asm	/^ffff800000108b2f:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108b32	kernel.asm	/^ffff800000108b32:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b34	kernel.asm	/^ffff800000108b34:	0f 94 c0             	sete   %al$/;"	l
ffff800000108b37	kernel.asm	/^ffff800000108b37:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108b39	kernel.asm	/^ffff800000108b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b3d	kernel.asm	/^ffff800000108b3d:	88 50 08             	mov    %dl,0x8(%rax)$/;"	l
ffff800000108b40	kernel.asm	/^ffff800000108b40:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108b43	kernel.asm	/^ffff800000108b43:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108b46	kernel.asm	/^ffff800000108b46:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b48	kernel.asm	/^ffff800000108b48:	75 0a                	jne    ffff800000108b54 <sys_open+0x22d>$/;"	l
ffff800000108b4a	kernel.asm	/^ffff800000108b4a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108b4d	kernel.asm	/^ffff800000108b4d:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000108b50	kernel.asm	/^ffff800000108b50:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b52	kernel.asm	/^ffff800000108b52:	74 07                	je     ffff800000108b5b <sys_open+0x234>$/;"	l
ffff800000108b54	kernel.asm	/^ffff800000108b54:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff800000108b59	kernel.asm	/^ffff800000108b59:	eb 05                	jmp    ffff800000108b60 <sys_open+0x239>$/;"	l
ffff800000108b5b	kernel.asm	/^ffff800000108b5b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108b60	kernel.asm	/^ffff800000108b60:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108b62	kernel.asm	/^ffff800000108b62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b66	kernel.asm	/^ffff800000108b66:	88 50 09             	mov    %dl,0x9(%rax)$/;"	l
ffff800000108b69	kernel.asm	/^ffff800000108b69:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108b6c	kernel.asm	/^ffff800000108b6c:	c9                   	leaveq $/;"	l
ffff800000108b6d	kernel.asm	/^ffff800000108b6d:	c3                   	retq   $/;"	l
ffff800000108b6e	kernel.asm	/^ffff800000108b6e <sys_mkdir>:$/;"	l
ffff800000108b6e	kernel.asm	/^ffff800000108b6e:	55                   	push   %rbp$/;"	l
ffff800000108b6f	kernel.asm	/^ffff800000108b6f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108b72	kernel.asm	/^ffff800000108b72:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108b76	kernel.asm	/^ffff800000108b76:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108b7b	kernel.asm	/^ffff800000108b7b:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000108b82	kernel.asm	/^ffff800000108b82:	80 ff ff $/;"	l
ffff800000108b85	kernel.asm	/^ffff800000108b85:	ff d2                	callq  *%rdx$/;"	l
ffff800000108b87	kernel.asm	/^ffff800000108b87:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108b8b	kernel.asm	/^ffff800000108b8b:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108b8e	kernel.asm	/^ffff800000108b8e:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108b93	kernel.asm	/^ffff800000108b93:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108b9a	kernel.asm	/^ffff800000108b9a:	80 ff ff $/;"	l
ffff800000108b9d	kernel.asm	/^ffff800000108b9d:	ff d0                	callq  *%rax$/;"	l
ffff800000108b9f	kernel.asm	/^ffff800000108b9f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108ba1	kernel.asm	/^ffff800000108ba1:	78 2d                	js     ffff800000108bd0 <sys_mkdir+0x62>$/;"	l
ffff800000108ba3	kernel.asm	/^ffff800000108ba3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108ba7	kernel.asm	/^ffff800000108ba7:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108bac	kernel.asm	/^ffff800000108bac:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000108bb1	kernel.asm	/^ffff800000108bb1:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000108bb6	kernel.asm	/^ffff800000108bb6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108bb9	kernel.asm	/^ffff800000108bb9:	48 b8 bf 86 10 00 00 	movabs $0xffff8000001086bf,%rax$/;"	l
ffff800000108bc0	kernel.asm	/^ffff800000108bc0:	80 ff ff $/;"	l
ffff800000108bc3	kernel.asm	/^ffff800000108bc3:	ff d0                	callq  *%rax$/;"	l
ffff800000108bc5	kernel.asm	/^ffff800000108bc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108bc9	kernel.asm	/^ffff800000108bc9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108bce	kernel.asm	/^ffff800000108bce:	75 18                	jne    ffff800000108be8 <sys_mkdir+0x7a>$/;"	l
ffff800000108bd0	kernel.asm	/^ffff800000108bd0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108bd5	kernel.asm	/^ffff800000108bd5:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108bdc	kernel.asm	/^ffff800000108bdc:	80 ff ff $/;"	l
ffff800000108bdf	kernel.asm	/^ffff800000108bdf:	ff d2                	callq  *%rdx$/;"	l
ffff800000108be1	kernel.asm	/^ffff800000108be1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108be6	kernel.asm	/^ffff800000108be6:	eb 29                	jmp    ffff800000108c11 <sys_mkdir+0xa3>$/;"	l
ffff800000108be8	kernel.asm	/^ffff800000108be8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108bec	kernel.asm	/^ffff800000108bec:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108bef	kernel.asm	/^ffff800000108bef:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108bf6	kernel.asm	/^ffff800000108bf6:	80 ff ff $/;"	l
ffff800000108bf9	kernel.asm	/^ffff800000108bf9:	ff d0                	callq  *%rax$/;"	l
ffff800000108bfb	kernel.asm	/^ffff800000108bfb:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c00	kernel.asm	/^ffff800000108c00:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108c07	kernel.asm	/^ffff800000108c07:	80 ff ff $/;"	l
ffff800000108c0a	kernel.asm	/^ffff800000108c0a:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c0c	kernel.asm	/^ffff800000108c0c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c11	kernel.asm	/^ffff800000108c11:	c9                   	leaveq $/;"	l
ffff800000108c12	kernel.asm	/^ffff800000108c12:	c3                   	retq   $/;"	l
ffff800000108c13	kernel.asm	/^ffff800000108c13 <sys_mknod>:$/;"	l
ffff800000108c13	kernel.asm	/^ffff800000108c13:	55                   	push   %rbp$/;"	l
ffff800000108c14	kernel.asm	/^ffff800000108c14:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108c17	kernel.asm	/^ffff800000108c17:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108c1b	kernel.asm	/^ffff800000108c1b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c20	kernel.asm	/^ffff800000108c20:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000108c27	kernel.asm	/^ffff800000108c27:	80 ff ff $/;"	l
ffff800000108c2a	kernel.asm	/^ffff800000108c2a:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c2c	kernel.asm	/^ffff800000108c2c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108c30	kernel.asm	/^ffff800000108c30:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108c33	kernel.asm	/^ffff800000108c33:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108c38	kernel.asm	/^ffff800000108c38:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108c3f	kernel.asm	/^ffff800000108c3f:	80 ff ff $/;"	l
ffff800000108c42	kernel.asm	/^ffff800000108c42:	ff d0                	callq  *%rax$/;"	l
ffff800000108c44	kernel.asm	/^ffff800000108c44:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c46	kernel.asm	/^ffff800000108c46:	78 67                	js     ffff800000108caf <sys_mknod+0x9c>$/;"	l
ffff800000108c48	kernel.asm	/^ffff800000108c48:	48 8d 45 ec          	lea    -0x14(%rbp),%rax$/;"	l
ffff800000108c4c	kernel.asm	/^ffff800000108c4c:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108c4f	kernel.asm	/^ffff800000108c4f:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108c54	kernel.asm	/^ffff800000108c54:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000108c5b	kernel.asm	/^ffff800000108c5b:	80 ff ff $/;"	l
ffff800000108c5e	kernel.asm	/^ffff800000108c5e:	ff d0                	callq  *%rax$/;"	l
ffff800000108c60	kernel.asm	/^ffff800000108c60:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c62	kernel.asm	/^ffff800000108c62:	78 4b                	js     ffff800000108caf <sys_mknod+0x9c>$/;"	l
ffff800000108c64	kernel.asm	/^ffff800000108c64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108c68	kernel.asm	/^ffff800000108c68:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108c6b	kernel.asm	/^ffff800000108c6b:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108c70	kernel.asm	/^ffff800000108c70:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000108c77	kernel.asm	/^ffff800000108c77:	80 ff ff $/;"	l
ffff800000108c7a	kernel.asm	/^ffff800000108c7a:	ff d0                	callq  *%rax$/;"	l
ffff800000108c7c	kernel.asm	/^ffff800000108c7c:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c7e	kernel.asm	/^ffff800000108c7e:	78 2f                	js     ffff800000108caf <sys_mknod+0x9c>$/;"	l
ffff800000108c80	kernel.asm	/^ffff800000108c80:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000108c83	kernel.asm	/^ffff800000108c83:	0f bf c8             	movswl %ax,%ecx$/;"	l
ffff800000108c86	kernel.asm	/^ffff800000108c86:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108c89	kernel.asm	/^ffff800000108c89:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000108c8c	kernel.asm	/^ffff800000108c8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108c90	kernel.asm	/^ffff800000108c90:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000108c95	kernel.asm	/^ffff800000108c95:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108c98	kernel.asm	/^ffff800000108c98:	48 b8 bf 86 10 00 00 	movabs $0xffff8000001086bf,%rax$/;"	l
ffff800000108c9f	kernel.asm	/^ffff800000108c9f:	80 ff ff $/;"	l
ffff800000108ca2	kernel.asm	/^ffff800000108ca2:	ff d0                	callq  *%rax$/;"	l
ffff800000108ca4	kernel.asm	/^ffff800000108ca4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108ca8	kernel.asm	/^ffff800000108ca8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108cad	kernel.asm	/^ffff800000108cad:	75 18                	jne    ffff800000108cc7 <sys_mknod+0xb4>$/;"	l
ffff800000108caf	kernel.asm	/^ffff800000108caf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cb4	kernel.asm	/^ffff800000108cb4:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108cbb	kernel.asm	/^ffff800000108cbb:	80 ff ff $/;"	l
ffff800000108cbe	kernel.asm	/^ffff800000108cbe:	ff d2                	callq  *%rdx$/;"	l
ffff800000108cc0	kernel.asm	/^ffff800000108cc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108cc5	kernel.asm	/^ffff800000108cc5:	eb 29                	jmp    ffff800000108cf0 <sys_mknod+0xdd>$/;"	l
ffff800000108cc7	kernel.asm	/^ffff800000108cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ccb	kernel.asm	/^ffff800000108ccb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108cce	kernel.asm	/^ffff800000108cce:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108cd5	kernel.asm	/^ffff800000108cd5:	80 ff ff $/;"	l
ffff800000108cd8	kernel.asm	/^ffff800000108cd8:	ff d0                	callq  *%rax$/;"	l
ffff800000108cda	kernel.asm	/^ffff800000108cda:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cdf	kernel.asm	/^ffff800000108cdf:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108ce6	kernel.asm	/^ffff800000108ce6:	80 ff ff $/;"	l
ffff800000108ce9	kernel.asm	/^ffff800000108ce9:	ff d2                	callq  *%rdx$/;"	l
ffff800000108ceb	kernel.asm	/^ffff800000108ceb:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cf0	kernel.asm	/^ffff800000108cf0:	c9                   	leaveq $/;"	l
ffff800000108cf1	kernel.asm	/^ffff800000108cf1:	c3                   	retq   $/;"	l
ffff800000108cf2	kernel.asm	/^ffff800000108cf2 <sys_chdir>:$/;"	l
ffff800000108cf2	kernel.asm	/^ffff800000108cf2:	55                   	push   %rbp$/;"	l
ffff800000108cf3	kernel.asm	/^ffff800000108cf3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108cf6	kernel.asm	/^ffff800000108cf6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108cfa	kernel.asm	/^ffff800000108cfa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cff	kernel.asm	/^ffff800000108cff:	48 ba e1 4d 10 00 00 	movabs $0xffff800000104de1,%rdx$/;"	l
ffff800000108d06	kernel.asm	/^ffff800000108d06:	80 ff ff $/;"	l
ffff800000108d09	kernel.asm	/^ffff800000108d09:	ff d2                	callq  *%rdx$/;"	l
ffff800000108d0b	kernel.asm	/^ffff800000108d0b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108d0f	kernel.asm	/^ffff800000108d0f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108d12	kernel.asm	/^ffff800000108d12:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108d17	kernel.asm	/^ffff800000108d17:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108d1e	kernel.asm	/^ffff800000108d1e:	80 ff ff $/;"	l
ffff800000108d21	kernel.asm	/^ffff800000108d21:	ff d0                	callq  *%rax$/;"	l
ffff800000108d23	kernel.asm	/^ffff800000108d23:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108d25	kernel.asm	/^ffff800000108d25:	78 1e                	js     ffff800000108d45 <sys_chdir+0x53>$/;"	l
ffff800000108d27	kernel.asm	/^ffff800000108d27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108d2b	kernel.asm	/^ffff800000108d2b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d2e	kernel.asm	/^ffff800000108d2e:	48 b8 ba 36 10 00 00 	movabs $0xffff8000001036ba,%rax$/;"	l
ffff800000108d35	kernel.asm	/^ffff800000108d35:	80 ff ff $/;"	l
ffff800000108d38	kernel.asm	/^ffff800000108d38:	ff d0                	callq  *%rax$/;"	l
ffff800000108d3a	kernel.asm	/^ffff800000108d3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108d3e	kernel.asm	/^ffff800000108d3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108d43	kernel.asm	/^ffff800000108d43:	75 1b                	jne    ffff800000108d60 <sys_chdir+0x6e>$/;"	l
ffff800000108d45	kernel.asm	/^ffff800000108d45:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108d4a	kernel.asm	/^ffff800000108d4a:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108d51	kernel.asm	/^ffff800000108d51:	80 ff ff $/;"	l
ffff800000108d54	kernel.asm	/^ffff800000108d54:	ff d2                	callq  *%rdx$/;"	l
ffff800000108d56	kernel.asm	/^ffff800000108d56:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108d5b	kernel.asm	/^ffff800000108d5b:	e9 af 00 00 00       	jmpq   ffff800000108e0f <sys_chdir+0x11d>$/;"	l
ffff800000108d60	kernel.asm	/^ffff800000108d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d64	kernel.asm	/^ffff800000108d64:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d67	kernel.asm	/^ffff800000108d67:	48 b8 ca 27 10 00 00 	movabs $0xffff8000001027ca,%rax$/;"	l
ffff800000108d6e	kernel.asm	/^ffff800000108d6e:	80 ff ff $/;"	l
ffff800000108d71	kernel.asm	/^ffff800000108d71:	ff d0                	callq  *%rax$/;"	l
ffff800000108d73	kernel.asm	/^ffff800000108d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d77	kernel.asm	/^ffff800000108d77:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108d7e	kernel.asm	/^ffff800000108d7e:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108d82	kernel.asm	/^ffff800000108d82:	74 2b                	je     ffff800000108daf <sys_chdir+0xbd>$/;"	l
ffff800000108d84	kernel.asm	/^ffff800000108d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d88	kernel.asm	/^ffff800000108d88:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d8b	kernel.asm	/^ffff800000108d8b:	48 b8 ae 2a 10 00 00 	movabs $0xffff800000102aae,%rax$/;"	l
ffff800000108d92	kernel.asm	/^ffff800000108d92:	80 ff ff $/;"	l
ffff800000108d95	kernel.asm	/^ffff800000108d95:	ff d0                	callq  *%rax$/;"	l
ffff800000108d97	kernel.asm	/^ffff800000108d97:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108d9c	kernel.asm	/^ffff800000108d9c:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108da3	kernel.asm	/^ffff800000108da3:	80 ff ff $/;"	l
ffff800000108da6	kernel.asm	/^ffff800000108da6:	ff d2                	callq  *%rdx$/;"	l
ffff800000108da8	kernel.asm	/^ffff800000108da8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108dad	kernel.asm	/^ffff800000108dad:	eb 60                	jmp    ffff800000108e0f <sys_chdir+0x11d>$/;"	l
ffff800000108daf	kernel.asm	/^ffff800000108daf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108db3	kernel.asm	/^ffff800000108db3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108db6	kernel.asm	/^ffff800000108db6:	48 b8 5b 29 10 00 00 	movabs $0xffff80000010295b,%rax$/;"	l
ffff800000108dbd	kernel.asm	/^ffff800000108dbd:	80 ff ff $/;"	l
ffff800000108dc0	kernel.asm	/^ffff800000108dc0:	ff d0                	callq  *%rax$/;"	l
ffff800000108dc2	kernel.asm	/^ffff800000108dc2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108dc9	kernel.asm	/^ffff800000108dc9:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000108dcd	kernel.asm	/^ffff800000108dcd:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000108dd4	kernel.asm	/^ffff800000108dd4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108dd7	kernel.asm	/^ffff800000108dd7:	48 b8 c4 29 10 00 00 	movabs $0xffff8000001029c4,%rax$/;"	l
ffff800000108dde	kernel.asm	/^ffff800000108dde:	80 ff ff $/;"	l
ffff800000108de1	kernel.asm	/^ffff800000108de1:	ff d0                	callq  *%rax$/;"	l
ffff800000108de3	kernel.asm	/^ffff800000108de3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108de8	kernel.asm	/^ffff800000108de8:	48 ba b7 4e 10 00 00 	movabs $0xffff800000104eb7,%rdx$/;"	l
ffff800000108def	kernel.asm	/^ffff800000108def:	80 ff ff $/;"	l
ffff800000108df2	kernel.asm	/^ffff800000108df2:	ff d2                	callq  *%rdx$/;"	l
ffff800000108df4	kernel.asm	/^ffff800000108df4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108dfb	kernel.asm	/^ffff800000108dfb:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000108dff	kernel.asm	/^ffff800000108dff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108e03	kernel.asm	/^ffff800000108e03:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff800000108e0a	kernel.asm	/^ffff800000108e0a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e0f	kernel.asm	/^ffff800000108e0f:	c9                   	leaveq $/;"	l
ffff800000108e10	kernel.asm	/^ffff800000108e10:	c3                   	retq   $/;"	l
ffff800000108e11	kernel.asm	/^ffff800000108e11 <sys_exec>:$/;"	l
ffff800000108e11	kernel.asm	/^ffff800000108e11:	55                   	push   %rbp$/;"	l
ffff800000108e12	kernel.asm	/^ffff800000108e12:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108e15	kernel.asm	/^ffff800000108e15:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp$/;"	l
ffff800000108e1c	kernel.asm	/^ffff800000108e1c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108e20	kernel.asm	/^ffff800000108e20:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108e23	kernel.asm	/^ffff800000108e23:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108e28	kernel.asm	/^ffff800000108e28:	48 b8 c0 7c 10 00 00 	movabs $0xffff800000107cc0,%rax$/;"	l
ffff800000108e2f	kernel.asm	/^ffff800000108e2f:	80 ff ff $/;"	l
ffff800000108e32	kernel.asm	/^ffff800000108e32:	ff d0                	callq  *%rax$/;"	l
ffff800000108e34	kernel.asm	/^ffff800000108e34:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108e36	kernel.asm	/^ffff800000108e36:	78 24                	js     ffff800000108e5c <sys_exec+0x4b>$/;"	l
ffff800000108e38	kernel.asm	/^ffff800000108e38:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax$/;"	l
ffff800000108e3f	kernel.asm	/^ffff800000108e3f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108e42	kernel.asm	/^ffff800000108e42:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108e47	kernel.asm	/^ffff800000108e47:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e4c	kernel.asm	/^ffff800000108e4c:	48 ba ff 7b 10 00 00 	movabs $0xffff800000107bff,%rdx$/;"	l
ffff800000108e53	kernel.asm	/^ffff800000108e53:	80 ff ff $/;"	l
ffff800000108e56	kernel.asm	/^ffff800000108e56:	ff d2                	callq  *%rdx$/;"	l
ffff800000108e58	kernel.asm	/^ffff800000108e58:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108e5a	kernel.asm	/^ffff800000108e5a:	79 0a                	jns    ffff800000108e66 <sys_exec+0x55>$/;"	l
ffff800000108e5c	kernel.asm	/^ffff800000108e5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108e61	kernel.asm	/^ffff800000108e61:	e9 f7 00 00 00       	jmpq   ffff800000108f5d <sys_exec+0x14c>$/;"	l
ffff800000108e66	kernel.asm	/^ffff800000108e66:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff800000108e6d	kernel.asm	/^ffff800000108e6d:	ba 00 01 00 00       	mov    $0x100,%edx$/;"	l
ffff800000108e72	kernel.asm	/^ffff800000108e72:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108e77	kernel.asm	/^ffff800000108e77:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e7a	kernel.asm	/^ffff800000108e7a:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff800000108e81	kernel.asm	/^ffff800000108e81:	80 ff ff $/;"	l
ffff800000108e84	kernel.asm	/^ffff800000108e84:	ff d0                	callq  *%rax$/;"	l
ffff800000108e86	kernel.asm	/^ffff800000108e86:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108e8d	kernel.asm	/^ffff800000108e8d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108e90	kernel.asm	/^ffff800000108e90:	83 f8 1f             	cmp    $0x1f,%eax$/;"	l
ffff800000108e93	kernel.asm	/^ffff800000108e93:	76 0a                	jbe    ffff800000108e9f <sys_exec+0x8e>$/;"	l
ffff800000108e95	kernel.asm	/^ffff800000108e95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108e9a	kernel.asm	/^ffff800000108e9a:	e9 be 00 00 00       	jmpq   ffff800000108f5d <sys_exec+0x14c>$/;"	l
ffff800000108e9f	kernel.asm	/^ffff800000108e9f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108ea2	kernel.asm	/^ffff800000108ea2:	48 98                	cltq   $/;"	l
ffff800000108ea4	kernel.asm	/^ffff800000108ea4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000108eab	kernel.asm	/^ffff800000108eab:	00 $/;"	l
ffff800000108eac	kernel.asm	/^ffff800000108eac:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax$/;"	l
ffff800000108eb3	kernel.asm	/^ffff800000108eb3:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000108eb6	kernel.asm	/^ffff800000108eb6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax$/;"	l
ffff800000108ebd	kernel.asm	/^ffff800000108ebd:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108ec0	kernel.asm	/^ffff800000108ec0:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000108ec3	kernel.asm	/^ffff800000108ec3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108ec8	kernel.asm	/^ffff800000108ec8:	48 ba 24 7a 10 00 00 	movabs $0xffff800000107a24,%rdx$/;"	l
ffff800000108ecf	kernel.asm	/^ffff800000108ecf:	80 ff ff $/;"	l
ffff800000108ed2	kernel.asm	/^ffff800000108ed2:	ff d2                	callq  *%rdx$/;"	l
ffff800000108ed4	kernel.asm	/^ffff800000108ed4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108ed6	kernel.asm	/^ffff800000108ed6:	79 07                	jns    ffff800000108edf <sys_exec+0xce>$/;"	l
ffff800000108ed8	kernel.asm	/^ffff800000108ed8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108edd	kernel.asm	/^ffff800000108edd:	eb 7e                	jmp    ffff800000108f5d <sys_exec+0x14c>$/;"	l
ffff800000108edf	kernel.asm	/^ffff800000108edf:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff800000108ee6	kernel.asm	/^ffff800000108ee6:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000108ee9	kernel.asm	/^ffff800000108ee9:	75 31                	jne    ffff800000108f1c <sys_exec+0x10b>$/;"	l
ffff800000108eeb	kernel.asm	/^ffff800000108eeb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108eee	kernel.asm	/^ffff800000108eee:	48 98                	cltq   $/;"	l
ffff800000108ef0	kernel.asm	/^ffff800000108ef0:	48 c7 84 c5 f0 fe ff 	movq   $0x0,-0x110(%rbp,%rax,8)$/;"	l
ffff800000108ef7	kernel.asm	/^ffff800000108ef7:	ff 00 00 00 00 $/;"	l
ffff800000108efc	kernel.asm	/^ffff800000108efc:	90                   	nop$/;"	l
ffff800000108efd	kernel.asm	/^ffff800000108efd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108f01	kernel.asm	/^ffff800000108f01:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx$/;"	l
ffff800000108f08	kernel.asm	/^ffff800000108f08:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108f0b	kernel.asm	/^ffff800000108f0b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108f0e	kernel.asm	/^ffff800000108f0e:	48 b8 59 14 10 00 00 	movabs $0xffff800000101459,%rax$/;"	l
ffff800000108f15	kernel.asm	/^ffff800000108f15:	80 ff ff $/;"	l
ffff800000108f18	kernel.asm	/^ffff800000108f18:	ff d0                	callq  *%rax$/;"	l
ffff800000108f1a	kernel.asm	/^ffff800000108f1a:	eb 41                	jmp    ffff800000108f5d <sys_exec+0x14c>$/;"	l
ffff800000108f1c	kernel.asm	/^ffff800000108f1c:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff800000108f23	kernel.asm	/^ffff800000108f23:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000108f26	kernel.asm	/^ffff800000108f26:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000108f29	kernel.asm	/^ffff800000108f29:	48 c1 e2 03          	shl    $0x3,%rdx$/;"	l
ffff800000108f2d	kernel.asm	/^ffff800000108f2d:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000108f30	kernel.asm	/^ffff800000108f30:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff800000108f37	kernel.asm	/^ffff800000108f37:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108f3a	kernel.asm	/^ffff800000108f3a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108f3d	kernel.asm	/^ffff800000108f3d:	48 b8 7f 7a 10 00 00 	movabs $0xffff800000107a7f,%rax$/;"	l
ffff800000108f44	kernel.asm	/^ffff800000108f44:	80 ff ff $/;"	l
ffff800000108f47	kernel.asm	/^ffff800000108f47:	ff d0                	callq  *%rax$/;"	l
ffff800000108f49	kernel.asm	/^ffff800000108f49:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108f4b	kernel.asm	/^ffff800000108f4b:	79 07                	jns    ffff800000108f54 <sys_exec+0x143>$/;"	l
ffff800000108f4d	kernel.asm	/^ffff800000108f4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f52	kernel.asm	/^ffff800000108f52:	eb 09                	jmp    ffff800000108f5d <sys_exec+0x14c>$/;"	l
ffff800000108f54	kernel.asm	/^ffff800000108f54:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000108f58	kernel.asm	/^ffff800000108f58:	e9 30 ff ff ff       	jmpq   ffff800000108e8d <sys_exec+0x7c>$/;"	l
ffff800000108f5d	kernel.asm	/^ffff800000108f5d:	c9                   	leaveq $/;"	l
ffff800000108f5e	kernel.asm	/^ffff800000108f5e:	c3                   	retq   $/;"	l
ffff800000108f5f	kernel.asm	/^ffff800000108f5f <sys_pipe>:$/;"	l
ffff800000108f5f	kernel.asm	/^ffff800000108f5f:	55                   	push   %rbp$/;"	l
ffff800000108f60	kernel.asm	/^ffff800000108f60:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108f63	kernel.asm	/^ffff800000108f63:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108f67	kernel.asm	/^ffff800000108f67:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108f6b	kernel.asm	/^ffff800000108f6b:	ba 08 00 00 00       	mov    $0x8,%edx$/;"	l
ffff800000108f70	kernel.asm	/^ffff800000108f70:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108f73	kernel.asm	/^ffff800000108f73:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108f78	kernel.asm	/^ffff800000108f78:	48 b8 30 7c 10 00 00 	movabs $0xffff800000107c30,%rax$/;"	l
ffff800000108f7f	kernel.asm	/^ffff800000108f7f:	80 ff ff $/;"	l
ffff800000108f82	kernel.asm	/^ffff800000108f82:	ff d0                	callq  *%rax$/;"	l
ffff800000108f84	kernel.asm	/^ffff800000108f84:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108f86	kernel.asm	/^ffff800000108f86:	79 0a                	jns    ffff800000108f92 <sys_pipe+0x33>$/;"	l
ffff800000108f88	kernel.asm	/^ffff800000108f88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f8d	kernel.asm	/^ffff800000108f8d:	e9 d3 00 00 00       	jmpq   ffff800000109065 <sys_pipe+0x106>$/;"	l
ffff800000108f92	kernel.asm	/^ffff800000108f92:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000108f96	kernel.asm	/^ffff800000108f96:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108f9a	kernel.asm	/^ffff800000108f9a:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108f9d	kernel.asm	/^ffff800000108f9d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fa0	kernel.asm	/^ffff800000108fa0:	48 b8 e6 5a 10 00 00 	movabs $0xffff800000105ae6,%rax$/;"	l
ffff800000108fa7	kernel.asm	/^ffff800000108fa7:	80 ff ff $/;"	l
ffff800000108faa	kernel.asm	/^ffff800000108faa:	ff d0                	callq  *%rax$/;"	l
ffff800000108fac	kernel.asm	/^ffff800000108fac:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108fae	kernel.asm	/^ffff800000108fae:	79 0a                	jns    ffff800000108fba <sys_pipe+0x5b>$/;"	l
ffff800000108fb0	kernel.asm	/^ffff800000108fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108fb5	kernel.asm	/^ffff800000108fb5:	e9 ab 00 00 00       	jmpq   ffff800000109065 <sys_pipe+0x106>$/;"	l
ffff800000108fba	kernel.asm	/^ffff800000108fba:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)$/;"	l
ffff800000108fc1	kernel.asm	/^ffff800000108fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000108fc5	kernel.asm	/^ffff800000108fc5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fc8	kernel.asm	/^ffff800000108fc8:	48 b8 7c 7e 10 00 00 	movabs $0xffff800000107e7c,%rax$/;"	l
ffff800000108fcf	kernel.asm	/^ffff800000108fcf:	80 ff ff $/;"	l
ffff800000108fd2	kernel.asm	/^ffff800000108fd2:	ff d0                	callq  *%rax$/;"	l
ffff800000108fd4	kernel.asm	/^ffff800000108fd4:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000108fd7	kernel.asm	/^ffff800000108fd7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108fdb	kernel.asm	/^ffff800000108fdb:	78 1c                	js     ffff800000108ff9 <sys_pipe+0x9a>$/;"	l
ffff800000108fdd	kernel.asm	/^ffff800000108fdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108fe1	kernel.asm	/^ffff800000108fe1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fe4	kernel.asm	/^ffff800000108fe4:	48 b8 7c 7e 10 00 00 	movabs $0xffff800000107e7c,%rax$/;"	l
ffff800000108feb	kernel.asm	/^ffff800000108feb:	80 ff ff $/;"	l
ffff800000108fee	kernel.asm	/^ffff800000108fee:	ff d0                	callq  *%rax$/;"	l
ffff800000108ff0	kernel.asm	/^ffff800000108ff0:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000108ff3	kernel.asm	/^ffff800000108ff3:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff800000108ff7	kernel.asm	/^ffff800000108ff7:	79 51                	jns    ffff80000010904a <sys_pipe+0xeb>$/;"	l
ffff800000108ff9	kernel.asm	/^ffff800000108ff9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108ffd	kernel.asm	/^ffff800000108ffd:	78 1e                	js     ffff80000010901d <sys_pipe+0xbe>$/;"	l
ffff800000108fff	kernel.asm	/^ffff800000108fff:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109006	kernel.asm	/^ffff800000109006:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010900a	kernel.asm	/^ffff80000010900a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010900d	kernel.asm	/^ffff80000010900d:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000109010	kernel.asm	/^ffff800000109010:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000109014	kernel.asm	/^ffff800000109014:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff80000010901b	kernel.asm	/^ffff80000010901b:	00 00 $/;"	l
ffff80000010901d	kernel.asm	/^ffff80000010901d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109021	kernel.asm	/^ffff800000109021:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109024	kernel.asm	/^ffff800000109024:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff80000010902b	kernel.asm	/^ffff80000010902b:	80 ff ff $/;"	l
ffff80000010902e	kernel.asm	/^ffff80000010902e:	ff d0                	callq  *%rax$/;"	l
ffff800000109030	kernel.asm	/^ffff800000109030:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000109034	kernel.asm	/^ffff800000109034:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109037	kernel.asm	/^ffff800000109037:	48 b8 a2 1b 10 00 00 	movabs $0xffff800000101ba2,%rax$/;"	l
ffff80000010903e	kernel.asm	/^ffff80000010903e:	80 ff ff $/;"	l
ffff800000109041	kernel.asm	/^ffff800000109041:	ff d0                	callq  *%rax$/;"	l
ffff800000109043	kernel.asm	/^ffff800000109043:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109048	kernel.asm	/^ffff800000109048:	eb 1b                	jmp    ffff800000109065 <sys_pipe+0x106>$/;"	l
ffff80000010904a	kernel.asm	/^ffff80000010904a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010904e	kernel.asm	/^ffff80000010904e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000109051	kernel.asm	/^ffff800000109051:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109053	kernel.asm	/^ffff800000109053:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000109057	kernel.asm	/^ffff800000109057:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff80000010905b	kernel.asm	/^ffff80000010905b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010905e	kernel.asm	/^ffff80000010905e:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff800000109060	kernel.asm	/^ffff800000109060:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109065	kernel.asm	/^ffff800000109065:	c9                   	leaveq $/;"	l
ffff800000109066	kernel.asm	/^ffff800000109066:	c3                   	retq   $/;"	l
ffff800000109067	kernel.asm	/^ffff800000109067 <sys_fork>:$/;"	l
ffff800000109067	kernel.asm	/^ffff800000109067:	55                   	push   %rbp$/;"	l
ffff800000109068	kernel.asm	/^ffff800000109068:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010906b	kernel.asm	/^ffff80000010906b:	48 b8 2c 64 10 00 00 	movabs $0xffff80000010642c,%rax$/;"	l
ffff800000109072	kernel.asm	/^ffff800000109072:	80 ff ff $/;"	l
ffff800000109075	kernel.asm	/^ffff800000109075:	ff d0                	callq  *%rax$/;"	l
ffff800000109077	kernel.asm	/^ffff800000109077:	5d                   	pop    %rbp$/;"	l
ffff800000109078	kernel.asm	/^ffff800000109078:	c3                   	retq   $/;"	l
ffff800000109079	kernel.asm	/^ffff800000109079 <sys_exit>:$/;"	l
ffff800000109079	kernel.asm	/^ffff800000109079:	55                   	push   %rbp$/;"	l
ffff80000010907a	kernel.asm	/^ffff80000010907a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010907d	kernel.asm	/^ffff80000010907d:	48 b8 4d 66 10 00 00 	movabs $0xffff80000010664d,%rax$/;"	l
ffff800000109084	kernel.asm	/^ffff800000109084:	80 ff ff $/;"	l
ffff800000109087	kernel.asm	/^ffff800000109087:	ff d0                	callq  *%rax$/;"	l
ffff800000109089	kernel.asm	/^ffff800000109089:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010908e	kernel.asm	/^ffff80000010908e:	5d                   	pop    %rbp$/;"	l
ffff80000010908f	kernel.asm	/^ffff80000010908f:	c3                   	retq   $/;"	l
ffff800000109090	kernel.asm	/^ffff800000109090 <sys_wait>:$/;"	l
ffff800000109090	kernel.asm	/^ffff800000109090:	55                   	push   %rbp$/;"	l
ffff800000109091	kernel.asm	/^ffff800000109091:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109094	kernel.asm	/^ffff800000109094:	48 b8 6d 68 10 00 00 	movabs $0xffff80000010686d,%rax$/;"	l
ffff80000010909b	kernel.asm	/^ffff80000010909b:	80 ff ff $/;"	l
ffff80000010909e	kernel.asm	/^ffff80000010909e:	ff d0                	callq  *%rax$/;"	l
ffff8000001090a0	kernel.asm	/^ffff8000001090a0:	5d                   	pop    %rbp$/;"	l
ffff8000001090a1	kernel.asm	/^ffff8000001090a1:	c3                   	retq   $/;"	l
ffff8000001090a2	kernel.asm	/^ffff8000001090a2 <sys_kill>:$/;"	l
ffff8000001090a2	kernel.asm	/^ffff8000001090a2:	55                   	push   %rbp$/;"	l
ffff8000001090a3	kernel.asm	/^ffff8000001090a3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001090a6	kernel.asm	/^ffff8000001090a6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001090aa	kernel.asm	/^ffff8000001090aa:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff8000001090ae	kernel.asm	/^ffff8000001090ae:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001090b1	kernel.asm	/^ffff8000001090b1:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001090b6	kernel.asm	/^ffff8000001090b6:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff8000001090bd	kernel.asm	/^ffff8000001090bd:	80 ff ff $/;"	l
ffff8000001090c0	kernel.asm	/^ffff8000001090c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001090c2	kernel.asm	/^ffff8000001090c2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001090c4	kernel.asm	/^ffff8000001090c4:	79 07                	jns    ffff8000001090cd <sys_kill+0x2b>$/;"	l
ffff8000001090c6	kernel.asm	/^ffff8000001090c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001090cb	kernel.asm	/^ffff8000001090cb:	eb 11                	jmp    ffff8000001090de <sys_kill+0x3c>$/;"	l
ffff8000001090cd	kernel.asm	/^ffff8000001090cd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001090d0	kernel.asm	/^ffff8000001090d0:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001090d2	kernel.asm	/^ffff8000001090d2:	48 b8 78 6e 10 00 00 	movabs $0xffff800000106e78,%rax$/;"	l
ffff8000001090d9	kernel.asm	/^ffff8000001090d9:	80 ff ff $/;"	l
ffff8000001090dc	kernel.asm	/^ffff8000001090dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001090de	kernel.asm	/^ffff8000001090de:	c9                   	leaveq $/;"	l
ffff8000001090df	kernel.asm	/^ffff8000001090df:	c3                   	retq   $/;"	l
ffff8000001090e0	kernel.asm	/^ffff8000001090e0 <sys_getpid>:$/;"	l
ffff8000001090e0	kernel.asm	/^ffff8000001090e0:	55                   	push   %rbp$/;"	l
ffff8000001090e1	kernel.asm	/^ffff8000001090e1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001090e4	kernel.asm	/^ffff8000001090e4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001090eb	kernel.asm	/^ffff8000001090eb:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001090ef	kernel.asm	/^ffff8000001090ef:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001090f2	kernel.asm	/^ffff8000001090f2:	5d                   	pop    %rbp$/;"	l
ffff8000001090f3	kernel.asm	/^ffff8000001090f3:	c3                   	retq   $/;"	l
ffff8000001090f4	kernel.asm	/^ffff8000001090f4 <sys_sbrk>:$/;"	l
ffff8000001090f4	kernel.asm	/^ffff8000001090f4:	55                   	push   %rbp$/;"	l
ffff8000001090f5	kernel.asm	/^ffff8000001090f5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001090f8	kernel.asm	/^ffff8000001090f8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001090fc	kernel.asm	/^ffff8000001090fc:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000109100	kernel.asm	/^ffff800000109100:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109103	kernel.asm	/^ffff800000109103:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000109108	kernel.asm	/^ffff800000109108:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff80000010910f	kernel.asm	/^ffff80000010910f:	80 ff ff $/;"	l
ffff800000109112	kernel.asm	/^ffff800000109112:	ff d0                	callq  *%rax$/;"	l
ffff800000109114	kernel.asm	/^ffff800000109114:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109116	kernel.asm	/^ffff800000109116:	79 07                	jns    ffff80000010911f <sys_sbrk+0x2b>$/;"	l
ffff800000109118	kernel.asm	/^ffff800000109118:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010911d	kernel.asm	/^ffff80000010911d:	eb 30                	jmp    ffff80000010914f <sys_sbrk+0x5b>$/;"	l
ffff80000010911f	kernel.asm	/^ffff80000010911f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109126	kernel.asm	/^ffff800000109126:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010912a	kernel.asm	/^ffff80000010912a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010912d	kernel.asm	/^ffff80000010912d:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109130	kernel.asm	/^ffff800000109130:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000109133	kernel.asm	/^ffff800000109133:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109135	kernel.asm	/^ffff800000109135:	48 b8 59 63 10 00 00 	movabs $0xffff800000106359,%rax$/;"	l
ffff80000010913c	kernel.asm	/^ffff80000010913c:	80 ff ff $/;"	l
ffff80000010913f	kernel.asm	/^ffff80000010913f:	ff d0                	callq  *%rax$/;"	l
ffff800000109141	kernel.asm	/^ffff800000109141:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109143	kernel.asm	/^ffff800000109143:	79 07                	jns    ffff80000010914c <sys_sbrk+0x58>$/;"	l
ffff800000109145	kernel.asm	/^ffff800000109145:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010914a	kernel.asm	/^ffff80000010914a:	eb 03                	jmp    ffff80000010914f <sys_sbrk+0x5b>$/;"	l
ffff80000010914c	kernel.asm	/^ffff80000010914c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010914f	kernel.asm	/^ffff80000010914f:	c9                   	leaveq $/;"	l
ffff800000109150	kernel.asm	/^ffff800000109150:	c3                   	retq   $/;"	l
ffff800000109151	kernel.asm	/^ffff800000109151 <sys_mmap>:$/;"	l
ffff800000109151	kernel.asm	/^ffff800000109151:	55                   	push   %rbp$/;"	l
ffff800000109152	kernel.asm	/^ffff800000109152:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109155	kernel.asm	/^ffff800000109155:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109159	kernel.asm	/^ffff800000109159:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff80000010915d	kernel.asm	/^ffff80000010915d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109160	kernel.asm	/^ffff800000109160:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000109165	kernel.asm	/^ffff800000109165:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff80000010916c	kernel.asm	/^ffff80000010916c:	80 ff ff $/;"	l
ffff80000010916f	kernel.asm	/^ffff80000010916f:	ff d0                	callq  *%rax$/;"	l
ffff800000109171	kernel.asm	/^ffff800000109171:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109173	kernel.asm	/^ffff800000109173:	78 1c                	js     ffff800000109191 <sys_mmap+0x40>$/;"	l
ffff800000109175	kernel.asm	/^ffff800000109175:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000109179	kernel.asm	/^ffff800000109179:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010917c	kernel.asm	/^ffff80000010917c:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000109181	kernel.asm	/^ffff800000109181:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff800000109188	kernel.asm	/^ffff800000109188:	80 ff ff $/;"	l
ffff80000010918b	kernel.asm	/^ffff80000010918b:	ff d0                	callq  *%rax$/;"	l
ffff80000010918d	kernel.asm	/^ffff80000010918d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010918f	kernel.asm	/^ffff80000010918f:	79 09                	jns    ffff80000010919a <sys_mmap+0x49>$/;"	l
ffff800000109191	kernel.asm	/^ffff800000109191:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax$/;"	l
ffff800000109198	kernel.asm	/^ffff800000109198:	eb 45                	jmp    ffff8000001091df <sys_mmap+0x8e>$/;"	l
ffff80000010919a	kernel.asm	/^ffff80000010919a:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010919d	kernel.asm	/^ffff80000010919d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010919f	kernel.asm	/^ffff80000010919f:	75 0c                	jne    ffff8000001091ad <sys_mmap+0x5c>$/;"	l
ffff8000001091a1	kernel.asm	/^ffff8000001091a1:	48 b8 0f c1 10 00 00 	movabs $0xffff80000010c10f,%rax$/;"	l
ffff8000001091a8	kernel.asm	/^ffff8000001091a8:	80 ff ff $/;"	l
ffff8000001091ab	kernel.asm	/^ffff8000001091ab:	eb 0a                	jmp    ffff8000001091b7 <sys_mmap+0x66>$/;"	l
ffff8000001091ad	kernel.asm	/^ffff8000001091ad:	48 b8 15 c1 10 00 00 	movabs $0xffff80000010c115,%rax$/;"	l
ffff8000001091b4	kernel.asm	/^ffff8000001091b4:	80 ff ff $/;"	l
ffff8000001091b7	kernel.asm	/^ffff8000001091b7:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff8000001091ba	kernel.asm	/^ffff8000001091ba:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001091bd	kernel.asm	/^ffff8000001091bd:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001091bf	kernel.asm	/^ffff8000001091bf:	48 bf 1a c1 10 00 00 	movabs $0xffff80000010c11a,%rdi$/;"	l
ffff8000001091c6	kernel.asm	/^ffff8000001091c6:	80 ff ff $/;"	l
ffff8000001091c9	kernel.asm	/^ffff8000001091c9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001091ce	kernel.asm	/^ffff8000001091ce:	48 b9 ac 07 10 00 00 	movabs $0xffff8000001007ac,%rcx$/;"	l
ffff8000001091d5	kernel.asm	/^ffff8000001091d5:	80 ff ff $/;"	l
ffff8000001091d8	kernel.asm	/^ffff8000001091d8:	ff d1                	callq  *%rcx$/;"	l
ffff8000001091da	kernel.asm	/^ffff8000001091da:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001091df	kernel.asm	/^ffff8000001091df:	c9                   	leaveq $/;"	l
ffff8000001091e0	kernel.asm	/^ffff8000001091e0:	c3                   	retq   $/;"	l
ffff8000001091e1	kernel.asm	/^ffff8000001091e1 <sys_sleep>:$/;"	l
ffff8000001091e1	kernel.asm	/^ffff8000001091e1:	55                   	push   %rbp$/;"	l
ffff8000001091e2	kernel.asm	/^ffff8000001091e2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001091e5	kernel.asm	/^ffff8000001091e5:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001091e9	kernel.asm	/^ffff8000001091e9:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001091ed	kernel.asm	/^ffff8000001091ed:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001091f0	kernel.asm	/^ffff8000001091f0:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001091f5	kernel.asm	/^ffff8000001091f5:	48 b8 d0 7b 10 00 00 	movabs $0xffff800000107bd0,%rax$/;"	l
ffff8000001091fc	kernel.asm	/^ffff8000001091fc:	80 ff ff $/;"	l
ffff8000001091ff	kernel.asm	/^ffff8000001091ff:	ff d0                	callq  *%rax$/;"	l
ffff800000109201	kernel.asm	/^ffff800000109201:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109203	kernel.asm	/^ffff800000109203:	79 0a                	jns    ffff80000010920f <sys_sleep+0x2e>$/;"	l
ffff800000109205	kernel.asm	/^ffff800000109205:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010920a	kernel.asm	/^ffff80000010920a:	e9 a7 00 00 00       	jmpq   ffff8000001092b6 <sys_sleep+0xd5>$/;"	l
ffff80000010920f	kernel.asm	/^ffff80000010920f:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff800000109216	kernel.asm	/^ffff800000109216:	80 ff ff $/;"	l
ffff800000109219	kernel.asm	/^ffff800000109219:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff800000109220	kernel.asm	/^ffff800000109220:	80 ff ff $/;"	l
ffff800000109223	kernel.asm	/^ffff800000109223:	ff d0                	callq  *%rax$/;"	l
ffff800000109225	kernel.asm	/^ffff800000109225:	48 b8 c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rax$/;"	l
ffff80000010922c	kernel.asm	/^ffff80000010922c:	80 ff ff $/;"	l
ffff80000010922f	kernel.asm	/^ffff80000010922f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109231	kernel.asm	/^ffff800000109231:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109234	kernel.asm	/^ffff800000109234:	eb 4f                	jmp    ffff800000109285 <sys_sleep+0xa4>$/;"	l
ffff800000109236	kernel.asm	/^ffff800000109236:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010923d	kernel.asm	/^ffff80000010923d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109241	kernel.asm	/^ffff800000109241:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109244	kernel.asm	/^ffff800000109244:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109246	kernel.asm	/^ffff800000109246:	74 1d                	je     ffff800000109265 <sys_sleep+0x84>$/;"	l
ffff800000109248	kernel.asm	/^ffff800000109248:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff80000010924f	kernel.asm	/^ffff80000010924f:	80 ff ff $/;"	l
ffff800000109252	kernel.asm	/^ffff800000109252:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000109259	kernel.asm	/^ffff800000109259:	80 ff ff $/;"	l
ffff80000010925c	kernel.asm	/^ffff80000010925c:	ff d0                	callq  *%rax$/;"	l
ffff80000010925e	kernel.asm	/^ffff80000010925e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109263	kernel.asm	/^ffff800000109263:	eb 51                	jmp    ffff8000001092b6 <sys_sleep+0xd5>$/;"	l
ffff800000109265	kernel.asm	/^ffff800000109265:	48 be 60 b3 11 00 00 	movabs $0xffff80000011b360,%rsi$/;"	l
ffff80000010926c	kernel.asm	/^ffff80000010926c:	80 ff ff $/;"	l
ffff80000010926f	kernel.asm	/^ffff80000010926f:	48 bf c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rdi$/;"	l
ffff800000109276	kernel.asm	/^ffff800000109276:	80 ff ff $/;"	l
ffff800000109279	kernel.asm	/^ffff800000109279:	48 b8 c2 6c 10 00 00 	movabs $0xffff800000106cc2,%rax$/;"	l
ffff800000109280	kernel.asm	/^ffff800000109280:	80 ff ff $/;"	l
ffff800000109283	kernel.asm	/^ffff800000109283:	ff d0                	callq  *%rax$/;"	l
ffff800000109285	kernel.asm	/^ffff800000109285:	48 b8 c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rax$/;"	l
ffff80000010928c	kernel.asm	/^ffff80000010928c:	80 ff ff $/;"	l
ffff80000010928f	kernel.asm	/^ffff80000010928f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109291	kernel.asm	/^ffff800000109291:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000109294	kernel.asm	/^ffff800000109294:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000109297	kernel.asm	/^ffff800000109297:	39 d0                	cmp    %edx,%eax$/;"	l
ffff800000109299	kernel.asm	/^ffff800000109299:	72 9b                	jb     ffff800000109236 <sys_sleep+0x55>$/;"	l
ffff80000010929b	kernel.asm	/^ffff80000010929b:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff8000001092a2	kernel.asm	/^ffff8000001092a2:	80 ff ff $/;"	l
ffff8000001092a5	kernel.asm	/^ffff8000001092a5:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001092ac	kernel.asm	/^ffff8000001092ac:	80 ff ff $/;"	l
ffff8000001092af	kernel.asm	/^ffff8000001092af:	ff d0                	callq  *%rax$/;"	l
ffff8000001092b1	kernel.asm	/^ffff8000001092b1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001092b6	kernel.asm	/^ffff8000001092b6:	c9                   	leaveq $/;"	l
ffff8000001092b7	kernel.asm	/^ffff8000001092b7:	c3                   	retq   $/;"	l
ffff8000001092b8	kernel.asm	/^ffff8000001092b8 <sys_uptime>:$/;"	l
ffff8000001092b8	kernel.asm	/^ffff8000001092b8:	55                   	push   %rbp$/;"	l
ffff8000001092b9	kernel.asm	/^ffff8000001092b9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001092bc	kernel.asm	/^ffff8000001092bc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001092c0	kernel.asm	/^ffff8000001092c0:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff8000001092c7	kernel.asm	/^ffff8000001092c7:	80 ff ff $/;"	l
ffff8000001092ca	kernel.asm	/^ffff8000001092ca:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001092d1	kernel.asm	/^ffff8000001092d1:	80 ff ff $/;"	l
ffff8000001092d4	kernel.asm	/^ffff8000001092d4:	ff d0                	callq  *%rax$/;"	l
ffff8000001092d6	kernel.asm	/^ffff8000001092d6:	48 b8 c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rax$/;"	l
ffff8000001092dd	kernel.asm	/^ffff8000001092dd:	80 ff ff $/;"	l
ffff8000001092e0	kernel.asm	/^ffff8000001092e0:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001092e2	kernel.asm	/^ffff8000001092e2:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001092e5	kernel.asm	/^ffff8000001092e5:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff8000001092ec	kernel.asm	/^ffff8000001092ec:	80 ff ff $/;"	l
ffff8000001092ef	kernel.asm	/^ffff8000001092ef:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff8000001092f6	kernel.asm	/^ffff8000001092f6:	80 ff ff $/;"	l
ffff8000001092f9	kernel.asm	/^ffff8000001092f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001092fb	kernel.asm	/^ffff8000001092fb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001092fe	kernel.asm	/^ffff8000001092fe:	c9                   	leaveq $/;"	l
ffff8000001092ff	kernel.asm	/^ffff8000001092ff:	c3                   	retq   $/;"	l
ffff800000109300	kernel.asm	/^ffff800000109300 <alltraps>:$/;"	l
ffff800000109300	kernel.asm	/^ffff800000109300:	41 57                	push   %r15$/;"	l
ffff800000109302	kernel.asm	/^ffff800000109302:	41 56                	push   %r14$/;"	l
ffff800000109304	kernel.asm	/^ffff800000109304:	41 55                	push   %r13$/;"	l
ffff800000109306	kernel.asm	/^ffff800000109306:	41 54                	push   %r12$/;"	l
ffff800000109308	kernel.asm	/^ffff800000109308:	41 53                	push   %r11$/;"	l
ffff80000010930a	kernel.asm	/^ffff80000010930a:	41 52                	push   %r10$/;"	l
ffff80000010930c	kernel.asm	/^ffff80000010930c:	41 51                	push   %r9$/;"	l
ffff80000010930e	kernel.asm	/^ffff80000010930e:	41 50                	push   %r8$/;"	l
ffff800000109310	kernel.asm	/^ffff800000109310:	57                   	push   %rdi$/;"	l
ffff800000109311	kernel.asm	/^ffff800000109311:	56                   	push   %rsi$/;"	l
ffff800000109312	kernel.asm	/^ffff800000109312:	55                   	push   %rbp$/;"	l
ffff800000109313	kernel.asm	/^ffff800000109313:	52                   	push   %rdx$/;"	l
ffff800000109314	kernel.asm	/^ffff800000109314:	51                   	push   %rcx$/;"	l
ffff800000109315	kernel.asm	/^ffff800000109315:	53                   	push   %rbx$/;"	l
ffff800000109316	kernel.asm	/^ffff800000109316:	50                   	push   %rax$/;"	l
ffff800000109317	kernel.asm	/^ffff800000109317:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff80000010931a	kernel.asm	/^ffff80000010931a:	e8 c2 02 00 00       	callq  ffff8000001095e1 <trap>$/;"	l
ffff80000010931f	kernel.asm	/^ffff80000010931f <trapret>:$/;"	l
ffff80000010931f	kernel.asm	/^ffff80000010931f:	58                   	pop    %rax$/;"	l
ffff800000109320	kernel.asm	/^ffff800000109320:	5b                   	pop    %rbx$/;"	l
ffff800000109321	kernel.asm	/^ffff800000109321:	59                   	pop    %rcx$/;"	l
ffff800000109322	kernel.asm	/^ffff800000109322:	5a                   	pop    %rdx$/;"	l
ffff800000109323	kernel.asm	/^ffff800000109323:	5d                   	pop    %rbp$/;"	l
ffff800000109324	kernel.asm	/^ffff800000109324:	5e                   	pop    %rsi$/;"	l
ffff800000109325	kernel.asm	/^ffff800000109325:	5f                   	pop    %rdi$/;"	l
ffff800000109326	kernel.asm	/^ffff800000109326:	41 58                	pop    %r8$/;"	l
ffff800000109328	kernel.asm	/^ffff800000109328:	41 59                	pop    %r9$/;"	l
ffff80000010932a	kernel.asm	/^ffff80000010932a:	41 5a                	pop    %r10$/;"	l
ffff80000010932c	kernel.asm	/^ffff80000010932c:	41 5b                	pop    %r11$/;"	l
ffff80000010932e	kernel.asm	/^ffff80000010932e:	41 5c                	pop    %r12$/;"	l
ffff800000109330	kernel.asm	/^ffff800000109330:	41 5d                	pop    %r13$/;"	l
ffff800000109332	kernel.asm	/^ffff800000109332:	41 5e                	pop    %r14$/;"	l
ffff800000109334	kernel.asm	/^ffff800000109334:	41 5f                	pop    %r15$/;"	l
ffff800000109336	kernel.asm	/^ffff800000109336:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff80000010933a	kernel.asm	/^ffff80000010933a:	48 cf                	iretq  $/;"	l
ffff80000010933c	kernel.asm	/^ffff80000010933c <syscall_trap>:$/;"	l
ffff80000010933c	kernel.asm	/^ffff80000010933c:	41 57                	push   %r15$/;"	l
ffff80000010933e	kernel.asm	/^ffff80000010933e:	41 56                	push   %r14$/;"	l
ffff800000109340	kernel.asm	/^ffff800000109340:	41 55                	push   %r13$/;"	l
ffff800000109342	kernel.asm	/^ffff800000109342:	41 54                	push   %r12$/;"	l
ffff800000109344	kernel.asm	/^ffff800000109344:	41 53                	push   %r11$/;"	l
ffff800000109346	kernel.asm	/^ffff800000109346:	41 52                	push   %r10$/;"	l
ffff800000109348	kernel.asm	/^ffff800000109348:	41 51                	push   %r9$/;"	l
ffff80000010934a	kernel.asm	/^ffff80000010934a:	41 50                	push   %r8$/;"	l
ffff80000010934c	kernel.asm	/^ffff80000010934c:	57                   	push   %rdi$/;"	l
ffff80000010934d	kernel.asm	/^ffff80000010934d:	56                   	push   %rsi$/;"	l
ffff80000010934e	kernel.asm	/^ffff80000010934e:	55                   	push   %rbp$/;"	l
ffff80000010934f	kernel.asm	/^ffff80000010934f:	52                   	push   %rdx$/;"	l
ffff800000109350	kernel.asm	/^ffff800000109350:	51                   	push   %rcx$/;"	l
ffff800000109351	kernel.asm	/^ffff800000109351:	53                   	push   %rbx$/;"	l
ffff800000109352	kernel.asm	/^ffff800000109352:	50                   	push   %rax$/;"	l
ffff800000109353	kernel.asm	/^ffff800000109353:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff800000109356	kernel.asm	/^ffff800000109356:	e8 86 02 00 00       	callq  ffff8000001095e1 <trap>$/;"	l
ffff80000010935b	kernel.asm	/^ffff80000010935b <syscall_trapret>:$/;"	l
ffff80000010935b	kernel.asm	/^ffff80000010935b:	58                   	pop    %rax$/;"	l
ffff80000010935c	kernel.asm	/^ffff80000010935c:	5b                   	pop    %rbx$/;"	l
ffff80000010935d	kernel.asm	/^ffff80000010935d:	59                   	pop    %rcx$/;"	l
ffff80000010935e	kernel.asm	/^ffff80000010935e:	5a                   	pop    %rdx$/;"	l
ffff80000010935f	kernel.asm	/^ffff80000010935f:	5d                   	pop    %rbp$/;"	l
ffff800000109360	kernel.asm	/^ffff800000109360:	5e                   	pop    %rsi$/;"	l
ffff800000109361	kernel.asm	/^ffff800000109361:	5f                   	pop    %rdi$/;"	l
ffff800000109362	kernel.asm	/^ffff800000109362:	41 58                	pop    %r8$/;"	l
ffff800000109364	kernel.asm	/^ffff800000109364:	41 59                	pop    %r9$/;"	l
ffff800000109366	kernel.asm	/^ffff800000109366:	41 5a                	pop    %r10$/;"	l
ffff800000109368	kernel.asm	/^ffff800000109368:	41 5b                	pop    %r11$/;"	l
ffff80000010936a	kernel.asm	/^ffff80000010936a:	41 5c                	pop    %r12$/;"	l
ffff80000010936c	kernel.asm	/^ffff80000010936c:	41 5d                	pop    %r13$/;"	l
ffff80000010936e	kernel.asm	/^ffff80000010936e:	41 5e                	pop    %r14$/;"	l
ffff800000109370	kernel.asm	/^ffff800000109370:	41 5f                	pop    %r15$/;"	l
ffff800000109372	kernel.asm	/^ffff800000109372:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff800000109376	kernel.asm	/^ffff800000109376:	48 8b 24 24          	mov    (%rsp),%rsp$/;"	l
ffff80000010937a	kernel.asm	/^ffff80000010937a:	48 0f 07             	sysretq $/;"	l
ffff80000010937d	kernel.asm	/^ffff80000010937d <lidt>:$/;"	l
ffff80000010937d	kernel.asm	/^ffff80000010937d:	55                   	push   %rbp$/;"	l
ffff80000010937e	kernel.asm	/^ffff80000010937e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109381	kernel.asm	/^ffff800000109381:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109385	kernel.asm	/^ffff800000109385:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000109389	kernel.asm	/^ffff800000109389:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010938c	kernel.asm	/^ffff80000010938c:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010938f	kernel.asm	/^ffff80000010938f:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000109392	kernel.asm	/^ffff800000109392:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff800000109396	kernel.asm	/^ffff800000109396:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010939a	kernel.asm	/^ffff80000010939a:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff80000010939e	kernel.asm	/^ffff80000010939e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093a2	kernel.asm	/^ffff8000001093a2:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff8000001093a6	kernel.asm	/^ffff8000001093a6:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff8000001093aa	kernel.asm	/^ffff8000001093aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093ae	kernel.asm	/^ffff8000001093ae:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff8000001093b2	kernel.asm	/^ffff8000001093b2:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff8000001093b6	kernel.asm	/^ffff8000001093b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093ba	kernel.asm	/^ffff8000001093ba:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff8000001093be	kernel.asm	/^ffff8000001093be:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff8000001093c2	kernel.asm	/^ffff8000001093c2:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001093c6	kernel.asm	/^ffff8000001093c6:	0f 01 18             	lidt   (%rax)$/;"	l
ffff8000001093c9	kernel.asm	/^ffff8000001093c9:	90                   	nop$/;"	l
ffff8000001093ca	kernel.asm	/^ffff8000001093ca:	c9                   	leaveq $/;"	l
ffff8000001093cb	kernel.asm	/^ffff8000001093cb:	c3                   	retq   $/;"	l
ffff8000001093cc	kernel.asm	/^ffff8000001093cc <rcr2>:$/;"	l
ffff8000001093cc	kernel.asm	/^ffff8000001093cc:	55                   	push   %rbp$/;"	l
ffff8000001093cd	kernel.asm	/^ffff8000001093cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001093d0	kernel.asm	/^ffff8000001093d0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001093d4	kernel.asm	/^ffff8000001093d4:	0f 20 d0             	mov    %cr2,%rax$/;"	l
ffff8000001093d7	kernel.asm	/^ffff8000001093d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001093db	kernel.asm	/^ffff8000001093db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001093df	kernel.asm	/^ffff8000001093df:	c9                   	leaveq $/;"	l
ffff8000001093e0	kernel.asm	/^ffff8000001093e0:	c3                   	retq   $/;"	l
ffff8000001093e1	kernel.asm	/^ffff8000001093e1 <mkgate>:$/;"	l
ffff8000001093e1	kernel.asm	/^ffff8000001093e1:	55                   	push   %rbp$/;"	l
ffff8000001093e2	kernel.asm	/^ffff8000001093e2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001093e5	kernel.asm	/^ffff8000001093e5:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001093e9	kernel.asm	/^ffff8000001093e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001093ed	kernel.asm	/^ffff8000001093ed:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001093f0	kernel.asm	/^ffff8000001093f0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff8000001093f4	kernel.asm	/^ffff8000001093f4:	89 4d e0             	mov    %ecx,-0x20(%rbp)$/;"	l
ffff8000001093f7	kernel.asm	/^ffff8000001093f7:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)$/;"	l
ffff8000001093fb	kernel.asm	/^ffff8000001093fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001093ff	kernel.asm	/^ffff8000001093ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109403	kernel.asm	/^ffff800000109403:	c1 65 e4 02          	shll   $0x2,-0x1c(%rbp)$/;"	l
ffff800000109407	kernel.asm	/^ffff800000109407:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010940a	kernel.asm	/^ffff80000010940a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109411	kernel.asm	/^ffff800000109411:	00 $/;"	l
ffff800000109412	kernel.asm	/^ffff800000109412:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109416	kernel.asm	/^ffff800000109416:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000109419	kernel.asm	/^ffff800000109419:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010941d	kernel.asm	/^ffff80000010941d:	0f b7 d2             	movzwl %dx,%edx$/;"	l
ffff800000109420	kernel.asm	/^ffff800000109420:	81 ca 00 00 08 00    	or     $0x80000,%edx$/;"	l
ffff800000109426	kernel.asm	/^ffff800000109426:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109428	kernel.asm	/^ffff800000109428:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010942b	kernel.asm	/^ffff80000010942b:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010942e	kernel.asm	/^ffff80000010942e:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000109430	kernel.asm	/^ffff800000109430:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109437	kernel.asm	/^ffff800000109437:	00 $/;"	l
ffff800000109438	kernel.asm	/^ffff800000109438:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010943c	kernel.asm	/^ffff80000010943c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010943f	kernel.asm	/^ffff80000010943f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000109443	kernel.asm	/^ffff800000109443:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000109445	kernel.asm	/^ffff800000109445:	66 b9 00 00          	mov    $0x0,%cx$/;"	l
ffff800000109449	kernel.asm	/^ffff800000109449:	8b 55 e0             	mov    -0x20(%rbp),%edx$/;"	l
ffff80000010944c	kernel.asm	/^ffff80000010944c:	83 e2 03             	and    $0x3,%edx$/;"	l
ffff80000010944f	kernel.asm	/^ffff80000010944f:	c1 e2 0d             	shl    $0xd,%edx$/;"	l
ffff800000109452	kernel.asm	/^ffff800000109452:	09 ca                	or     %ecx,%edx$/;"	l
ffff800000109454	kernel.asm	/^ffff800000109454:	80 ce 8e             	or     $0x8e,%dh$/;"	l
ffff800000109457	kernel.asm	/^ffff800000109457:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109459	kernel.asm	/^ffff800000109459:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)$/;"	l
ffff80000010945d	kernel.asm	/^ffff80000010945d:	74 35                	je     ffff800000109494 <mkgate+0xb3>$/;"	l
ffff80000010945f	kernel.asm	/^ffff80000010945f:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000109462	kernel.asm	/^ffff800000109462:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000109465	kernel.asm	/^ffff800000109465:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000109467	kernel.asm	/^ffff800000109467:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010946e	kernel.asm	/^ffff80000010946e:	00 $/;"	l
ffff80000010946f	kernel.asm	/^ffff80000010946f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109473	kernel.asm	/^ffff800000109473:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000109476	kernel.asm	/^ffff800000109476:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff800000109479	kernel.asm	/^ffff800000109479:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff80000010947c	kernel.asm	/^ffff80000010947c:	89 d2                	mov    %edx,%edx$/;"	l
ffff80000010947e	kernel.asm	/^ffff80000010947e:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx$/;"	l
ffff800000109485	kernel.asm	/^ffff800000109485:	00 $/;"	l
ffff800000109486	kernel.asm	/^ffff800000109486:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010948a	kernel.asm	/^ffff80000010948a:	48 01 ca             	add    %rcx,%rdx$/;"	l
ffff80000010948d	kernel.asm	/^ffff80000010948d:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff80000010948f	kernel.asm	/^ffff80000010948f:	80 ce 01             	or     $0x1,%dh$/;"	l
ffff800000109492	kernel.asm	/^ffff800000109492:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109494	kernel.asm	/^ffff800000109494:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000109497	kernel.asm	/^ffff800000109497:	83 c0 02             	add    $0x2,%eax$/;"	l
ffff80000010949a	kernel.asm	/^ffff80000010949a:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010949c	kernel.asm	/^ffff80000010949c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001094a3	kernel.asm	/^ffff8000001094a3:	00 $/;"	l
ffff8000001094a4	kernel.asm	/^ffff8000001094a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001094a8	kernel.asm	/^ffff8000001094a8:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001094ab	kernel.asm	/^ffff8000001094ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001094af	kernel.asm	/^ffff8000001094af:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff8000001094b3	kernel.asm	/^ffff8000001094b3:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001094b5	kernel.asm	/^ffff8000001094b5:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001094b8	kernel.asm	/^ffff8000001094b8:	83 c0 03             	add    $0x3,%eax$/;"	l
ffff8000001094bb	kernel.asm	/^ffff8000001094bb:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001094bd	kernel.asm	/^ffff8000001094bd:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001094c4	kernel.asm	/^ffff8000001094c4:	00 $/;"	l
ffff8000001094c5	kernel.asm	/^ffff8000001094c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001094c9	kernel.asm	/^ffff8000001094c9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001094cc	kernel.asm	/^ffff8000001094cc:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001094d2	kernel.asm	/^ffff8000001094d2:	90                   	nop$/;"	l
ffff8000001094d3	kernel.asm	/^ffff8000001094d3:	c9                   	leaveq $/;"	l
ffff8000001094d4	kernel.asm	/^ffff8000001094d4:	c3                   	retq   $/;"	l
ffff8000001094d5	kernel.asm	/^ffff8000001094d5 <idtinit>:$/;"	l
ffff8000001094d5	kernel.asm	/^ffff8000001094d5:	55                   	push   %rbp$/;"	l
ffff8000001094d6	kernel.asm	/^ffff8000001094d6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001094d9	kernel.asm	/^ffff8000001094d9:	48 b8 40 b3 11 00 00 	movabs $0xffff80000011b340,%rax$/;"	l
ffff8000001094e0	kernel.asm	/^ffff8000001094e0:	80 ff ff $/;"	l
ffff8000001094e3	kernel.asm	/^ffff8000001094e3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001094e6	kernel.asm	/^ffff8000001094e6:	be 00 10 00 00       	mov    $0x1000,%esi$/;"	l
ffff8000001094eb	kernel.asm	/^ffff8000001094eb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001094ee	kernel.asm	/^ffff8000001094ee:	48 b8 7d 93 10 00 00 	movabs $0xffff80000010937d,%rax$/;"	l
ffff8000001094f5	kernel.asm	/^ffff8000001094f5:	80 ff ff $/;"	l
ffff8000001094f8	kernel.asm	/^ffff8000001094f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001094fa	kernel.asm	/^ffff8000001094fa:	90                   	nop$/;"	l
ffff8000001094fb	kernel.asm	/^ffff8000001094fb:	5d                   	pop    %rbp$/;"	l
ffff8000001094fc	kernel.asm	/^ffff8000001094fc:	c3                   	retq   $/;"	l
ffff8000001094fd	kernel.asm	/^ffff8000001094fd <tvinit>:$/;"	l
ffff8000001094fd	kernel.asm	/^ffff8000001094fd:	55                   	push   %rbp$/;"	l
ffff8000001094fe	kernel.asm	/^ffff8000001094fe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109501	kernel.asm	/^ffff800000109501:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109505	kernel.asm	/^ffff800000109505:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010950c	kernel.asm	/^ffff80000010950c:	80 ff ff $/;"	l
ffff80000010950f	kernel.asm	/^ffff80000010950f:	ff d0                	callq  *%rax$/;"	l
ffff800000109511	kernel.asm	/^ffff800000109511:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000109514	kernel.asm	/^ffff800000109514:	48 b8 40 b3 11 00 00 	movabs $0xffff80000011b340,%rax$/;"	l
ffff80000010951b	kernel.asm	/^ffff80000010951b:	80 ff ff $/;"	l
ffff80000010951e	kernel.asm	/^ffff80000010951e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000109521	kernel.asm	/^ffff800000109521:	48 b8 40 b3 11 00 00 	movabs $0xffff80000011b340,%rax$/;"	l
ffff800000109528	kernel.asm	/^ffff800000109528:	80 ff ff $/;"	l
ffff80000010952b	kernel.asm	/^ffff80000010952b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010952e	kernel.asm	/^ffff80000010952e:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff800000109533	kernel.asm	/^ffff800000109533:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109538	kernel.asm	/^ffff800000109538:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010953b	kernel.asm	/^ffff80000010953b:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff800000109542	kernel.asm	/^ffff800000109542:	80 ff ff $/;"	l
ffff800000109545	kernel.asm	/^ffff800000109545:	ff d0                	callq  *%rax$/;"	l
ffff800000109547	kernel.asm	/^ffff800000109547:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010954e	kernel.asm	/^ffff80000010954e:	eb 45                	jmp    ffff800000109595 <tvinit+0x98>$/;"	l
ffff800000109550	kernel.asm	/^ffff800000109550:	48 b8 58 d6 10 00 00 	movabs $0xffff80000010d658,%rax$/;"	l
ffff800000109557	kernel.asm	/^ffff800000109557:	80 ff ff $/;"	l
ffff80000010955a	kernel.asm	/^ffff80000010955a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010955d	kernel.asm	/^ffff80000010955d:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000109560	kernel.asm	/^ffff800000109560:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000109564	kernel.asm	/^ffff800000109564:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000109567	kernel.asm	/^ffff800000109567:	8b 75 fc             	mov    -0x4(%rbp),%esi$/;"	l
ffff80000010956a	kernel.asm	/^ffff80000010956a:	48 b8 40 b3 11 00 00 	movabs $0xffff80000011b340,%rax$/;"	l
ffff800000109571	kernel.asm	/^ffff800000109571:	80 ff ff $/;"	l
ffff800000109574	kernel.asm	/^ffff800000109574:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000109577	kernel.asm	/^ffff800000109577:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
ffff80000010957d	kernel.asm	/^ffff80000010957d:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000109582	kernel.asm	/^ffff800000109582:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109585	kernel.asm	/^ffff800000109585:	48 b8 e1 93 10 00 00 	movabs $0xffff8000001093e1,%rax$/;"	l
ffff80000010958c	kernel.asm	/^ffff80000010958c:	80 ff ff $/;"	l
ffff80000010958f	kernel.asm	/^ffff80000010958f:	ff d0                	callq  *%rax$/;"	l
ffff800000109591	kernel.asm	/^ffff800000109591:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000109595	kernel.asm	/^ffff800000109595:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010959c	kernel.asm	/^ffff80000010959c:	7e b2                	jle    ffff800000109550 <tvinit+0x53>$/;"	l
ffff80000010959e	kernel.asm	/^ffff80000010959e:	48 b8 58 d6 10 00 00 	movabs $0xffff80000010d658,%rax$/;"	l
ffff8000001095a5	kernel.asm	/^ffff8000001095a5:	80 ff ff $/;"	l
ffff8000001095a8	kernel.asm	/^ffff8000001095a8:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax$/;"	l
ffff8000001095af	kernel.asm	/^ffff8000001095af:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001095b2	kernel.asm	/^ffff8000001095b2:	48 b8 40 b3 11 00 00 	movabs $0xffff80000011b340,%rax$/;"	l
ffff8000001095b9	kernel.asm	/^ffff8000001095b9:	80 ff ff $/;"	l
ffff8000001095bc	kernel.asm	/^ffff8000001095bc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001095bf	kernel.asm	/^ffff8000001095bf:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
ffff8000001095c5	kernel.asm	/^ffff8000001095c5:	b9 03 00 00 00       	mov    $0x3,%ecx$/;"	l
ffff8000001095ca	kernel.asm	/^ffff8000001095ca:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff8000001095cf	kernel.asm	/^ffff8000001095cf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001095d2	kernel.asm	/^ffff8000001095d2:	48 b8 e1 93 10 00 00 	movabs $0xffff8000001093e1,%rax$/;"	l
ffff8000001095d9	kernel.asm	/^ffff8000001095d9:	80 ff ff $/;"	l
ffff8000001095dc	kernel.asm	/^ffff8000001095dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001095de	kernel.asm	/^ffff8000001095de:	90                   	nop$/;"	l
ffff8000001095df	kernel.asm	/^ffff8000001095df:	c9                   	leaveq $/;"	l
ffff8000001095e0	kernel.asm	/^ffff8000001095e0:	c3                   	retq   $/;"	l
ffff8000001095e1	kernel.asm	/^ffff8000001095e1 <trap>:$/;"	l
ffff8000001095e1	kernel.asm	/^ffff8000001095e1:	55                   	push   %rbp$/;"	l
ffff8000001095e2	kernel.asm	/^ffff8000001095e2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001095e5	kernel.asm	/^ffff8000001095e5:	41 54                	push   %r12$/;"	l
ffff8000001095e7	kernel.asm	/^ffff8000001095e7:	53                   	push   %rbx$/;"	l
ffff8000001095e8	kernel.asm	/^ffff8000001095e8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001095ec	kernel.asm	/^ffff8000001095ec:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001095f0	kernel.asm	/^ffff8000001095f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001095f4	kernel.asm	/^ffff8000001095f4:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff8000001095f8	kernel.asm	/^ffff8000001095f8:	48 83 f8 40          	cmp    $0x40,%rax$/;"	l
ffff8000001095fc	kernel.asm	/^ffff8000001095fc:	75 73                	jne    ffff800000109671 <trap+0x90>$/;"	l
ffff8000001095fe	kernel.asm	/^ffff8000001095fe:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109605	kernel.asm	/^ffff800000109605:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109609	kernel.asm	/^ffff800000109609:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff80000010960c	kernel.asm	/^ffff80000010960c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010960e	kernel.asm	/^ffff80000010960e:	74 0c                	je     ffff80000010961c <trap+0x3b>$/;"	l
ffff800000109610	kernel.asm	/^ffff800000109610:	48 b8 4d 66 10 00 00 	movabs $0xffff80000010664d,%rax$/;"	l
ffff800000109617	kernel.asm	/^ffff800000109617:	80 ff ff $/;"	l
ffff80000010961a	kernel.asm	/^ffff80000010961a:	ff d0                	callq  *%rax$/;"	l
ffff80000010961c	kernel.asm	/^ffff80000010961c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109623	kernel.asm	/^ffff800000109623:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109627	kernel.asm	/^ffff800000109627:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010962b	kernel.asm	/^ffff80000010962b:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff80000010962f	kernel.asm	/^ffff80000010962f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109636	kernel.asm	/^ffff800000109636:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010963a	kernel.asm	/^ffff80000010963a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010963e	kernel.asm	/^ffff80000010963e:	48 b8 0f 7d 10 00 00 	movabs $0xffff800000107d0f,%rax$/;"	l
ffff800000109645	kernel.asm	/^ffff800000109645:	80 ff ff $/;"	l
ffff800000109648	kernel.asm	/^ffff800000109648:	ff d0                	callq  *%rax$/;"	l
ffff80000010964a	kernel.asm	/^ffff80000010964a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109651	kernel.asm	/^ffff800000109651:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109655	kernel.asm	/^ffff800000109655:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109658	kernel.asm	/^ffff800000109658:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010965a	kernel.asm	/^ffff80000010965a:	0f 84 8e 03 00 00    	je     ffff8000001099ee <trap+0x40d>$/;"	l
ffff800000109660	kernel.asm	/^ffff800000109660:	48 b8 4d 66 10 00 00 	movabs $0xffff80000010664d,%rax$/;"	l
ffff800000109667	kernel.asm	/^ffff800000109667:	80 ff ff $/;"	l
ffff80000010966a	kernel.asm	/^ffff80000010966a:	ff d0                	callq  *%rax$/;"	l
ffff80000010966c	kernel.asm	/^ffff80000010966c:	e9 7d 03 00 00       	jmpq   ffff8000001099ee <trap+0x40d>$/;"	l
ffff800000109671	kernel.asm	/^ffff800000109671:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109675	kernel.asm	/^ffff800000109675:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109679	kernel.asm	/^ffff800000109679:	48 83 e8 20          	sub    $0x20,%rax$/;"	l
ffff80000010967d	kernel.asm	/^ffff80000010967d:	48 83 f8 1f          	cmp    $0x1f,%rax$/;"	l
ffff800000109681	kernel.asm	/^ffff800000109681:	0f 87 46 01 00 00    	ja     ffff8000001097cd <trap+0x1ec>$/;"	l
ffff800000109687	kernel.asm	/^ffff800000109687:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010968e	kernel.asm	/^ffff80000010968e:	00 $/;"	l
ffff80000010968f	kernel.asm	/^ffff80000010968f:	48 b8 f0 c1 10 00 00 	movabs $0xffff80000010c1f0,%rax$/;"	l
ffff800000109696	kernel.asm	/^ffff800000109696:	80 ff ff $/;"	l
ffff800000109699	kernel.asm	/^ffff800000109699:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010969c	kernel.asm	/^ffff80000010969c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010969f	kernel.asm	/^ffff80000010969f:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001096a1	kernel.asm	/^ffff8000001096a1:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff8000001096a8	kernel.asm	/^ffff8000001096a8:	80 ff ff $/;"	l
ffff8000001096ab	kernel.asm	/^ffff8000001096ab:	ff d0                	callq  *%rax$/;"	l
ffff8000001096ad	kernel.asm	/^ffff8000001096ad:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001096af	kernel.asm	/^ffff8000001096af:	75 5d                	jne    ffff80000010970e <trap+0x12d>$/;"	l
ffff8000001096b1	kernel.asm	/^ffff8000001096b1:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff8000001096b8	kernel.asm	/^ffff8000001096b8:	80 ff ff $/;"	l
ffff8000001096bb	kernel.asm	/^ffff8000001096bb:	48 b8 cc 72 10 00 00 	movabs $0xffff8000001072cc,%rax$/;"	l
ffff8000001096c2	kernel.asm	/^ffff8000001096c2:	80 ff ff $/;"	l
ffff8000001096c5	kernel.asm	/^ffff8000001096c5:	ff d0                	callq  *%rax$/;"	l
ffff8000001096c7	kernel.asm	/^ffff8000001096c7:	48 b8 c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rax$/;"	l
ffff8000001096ce	kernel.asm	/^ffff8000001096ce:	80 ff ff $/;"	l
ffff8000001096d1	kernel.asm	/^ffff8000001096d1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001096d3	kernel.asm	/^ffff8000001096d3:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001096d6	kernel.asm	/^ffff8000001096d6:	48 b8 c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rax$/;"	l
ffff8000001096dd	kernel.asm	/^ffff8000001096dd:	80 ff ff $/;"	l
ffff8000001096e0	kernel.asm	/^ffff8000001096e0:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001096e2	kernel.asm	/^ffff8000001096e2:	48 bf c8 b3 11 00 00 	movabs $0xffff80000011b3c8,%rdi$/;"	l
ffff8000001096e9	kernel.asm	/^ffff8000001096e9:	80 ff ff $/;"	l
ffff8000001096ec	kernel.asm	/^ffff8000001096ec:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff8000001096f3	kernel.asm	/^ffff8000001096f3:	80 ff ff $/;"	l
ffff8000001096f6	kernel.asm	/^ffff8000001096f6:	ff d0                	callq  *%rax$/;"	l
ffff8000001096f8	kernel.asm	/^ffff8000001096f8:	48 bf 60 b3 11 00 00 	movabs $0xffff80000011b360,%rdi$/;"	l
ffff8000001096ff	kernel.asm	/^ffff8000001096ff:	80 ff ff $/;"	l
ffff800000109702	kernel.asm	/^ffff800000109702:	48 b8 65 73 10 00 00 	movabs $0xffff800000107365,%rax$/;"	l
ffff800000109709	kernel.asm	/^ffff800000109709:	80 ff ff $/;"	l
ffff80000010970c	kernel.asm	/^ffff80000010970c:	ff d0                	callq  *%rax$/;"	l
ffff80000010970e	kernel.asm	/^ffff80000010970e:	48 b8 b6 46 10 00 00 	movabs $0xffff8000001046b6,%rax$/;"	l
ffff800000109715	kernel.asm	/^ffff800000109715:	80 ff ff $/;"	l
ffff800000109718	kernel.asm	/^ffff800000109718:	ff d0                	callq  *%rax$/;"	l
ffff80000010971a	kernel.asm	/^ffff80000010971a:	e9 0c 02 00 00       	jmpq   ffff80000010992b <trap+0x34a>$/;"	l
ffff80000010971f	kernel.asm	/^ffff80000010971f:	48 b8 9f 3a 10 00 00 	movabs $0xffff800000103a9f,%rax$/;"	l
ffff800000109726	kernel.asm	/^ffff800000109726:	80 ff ff $/;"	l
ffff800000109729	kernel.asm	/^ffff800000109729:	ff d0                	callq  *%rax$/;"	l
ffff80000010972b	kernel.asm	/^ffff80000010972b:	48 b8 b6 46 10 00 00 	movabs $0xffff8000001046b6,%rax$/;"	l
ffff800000109732	kernel.asm	/^ffff800000109732:	80 ff ff $/;"	l
ffff800000109735	kernel.asm	/^ffff800000109735:	ff d0                	callq  *%rax$/;"	l
ffff800000109737	kernel.asm	/^ffff800000109737:	e9 ef 01 00 00       	jmpq   ffff80000010992b <trap+0x34a>$/;"	l
ffff80000010973c	kernel.asm	/^ffff80000010973c:	48 b8 6d 43 10 00 00 	movabs $0xffff80000010436d,%rax$/;"	l
ffff800000109743	kernel.asm	/^ffff800000109743:	80 ff ff $/;"	l
ffff800000109746	kernel.asm	/^ffff800000109746:	ff d0                	callq  *%rax$/;"	l
ffff800000109748	kernel.asm	/^ffff800000109748:	48 b8 b6 46 10 00 00 	movabs $0xffff8000001046b6,%rax$/;"	l
ffff80000010974f	kernel.asm	/^ffff80000010974f:	80 ff ff $/;"	l
ffff800000109752	kernel.asm	/^ffff800000109752:	ff d0                	callq  *%rax$/;"	l
ffff800000109754	kernel.asm	/^ffff800000109754:	e9 d2 01 00 00       	jmpq   ffff80000010992b <trap+0x34a>$/;"	l
ffff800000109759	kernel.asm	/^ffff800000109759:	48 b8 55 9c 10 00 00 	movabs $0xffff800000109c55,%rax$/;"	l
ffff800000109760	kernel.asm	/^ffff800000109760:	80 ff ff $/;"	l
ffff800000109763	kernel.asm	/^ffff800000109763:	ff d0                	callq  *%rax$/;"	l
ffff800000109765	kernel.asm	/^ffff800000109765:	48 b8 b6 46 10 00 00 	movabs $0xffff8000001046b6,%rax$/;"	l
ffff80000010976c	kernel.asm	/^ffff80000010976c:	80 ff ff $/;"	l
ffff80000010976f	kernel.asm	/^ffff80000010976f:	ff d0                	callq  *%rax$/;"	l
ffff800000109771	kernel.asm	/^ffff800000109771:	e9 b5 01 00 00       	jmpq   ffff80000010992b <trap+0x34a>$/;"	l
ffff800000109776	kernel.asm	/^ffff800000109776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010977a	kernel.asm	/^ffff80000010977a:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12$/;"	l
ffff800000109781	kernel.asm	/^ffff800000109781:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109785	kernel.asm	/^ffff800000109785:	48 8b 98 90 00 00 00 	mov    0x90(%rax),%rbx$/;"	l
ffff80000010978c	kernel.asm	/^ffff80000010978c:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff800000109793	kernel.asm	/^ffff800000109793:	80 ff ff $/;"	l
ffff800000109796	kernel.asm	/^ffff800000109796:	ff d0                	callq  *%rax$/;"	l
ffff800000109798	kernel.asm	/^ffff800000109798:	4c 89 e1             	mov    %r12,%rcx$/;"	l
ffff80000010979b	kernel.asm	/^ffff80000010979b:	48 89 da             	mov    %rbx,%rdx$/;"	l
ffff80000010979e	kernel.asm	/^ffff80000010979e:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001097a0	kernel.asm	/^ffff8000001097a0:	48 bf 38 c1 10 00 00 	movabs $0xffff80000010c138,%rdi$/;"	l
ffff8000001097a7	kernel.asm	/^ffff8000001097a7:	80 ff ff $/;"	l
ffff8000001097aa	kernel.asm	/^ffff8000001097aa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001097af	kernel.asm	/^ffff8000001097af:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff8000001097b6	kernel.asm	/^ffff8000001097b6:	80 ff ff $/;"	l
ffff8000001097b9	kernel.asm	/^ffff8000001097b9:	41 ff d0             	callq  *%r8$/;"	l
ffff8000001097bc	kernel.asm	/^ffff8000001097bc:	48 b8 b6 46 10 00 00 	movabs $0xffff8000001046b6,%rax$/;"	l
ffff8000001097c3	kernel.asm	/^ffff8000001097c3:	80 ff ff $/;"	l
ffff8000001097c6	kernel.asm	/^ffff8000001097c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001097c8	kernel.asm	/^ffff8000001097c8:	e9 5e 01 00 00       	jmpq   ffff80000010992b <trap+0x34a>$/;"	l
ffff8000001097cd	kernel.asm	/^ffff8000001097cd:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001097d4	kernel.asm	/^ffff8000001097d4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001097d8	kernel.asm	/^ffff8000001097d8:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001097db	kernel.asm	/^ffff8000001097db:	74 17                	je     ffff8000001097f4 <trap+0x213>$/;"	l
ffff8000001097dd	kernel.asm	/^ffff8000001097dd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001097e1	kernel.asm	/^ffff8000001097e1:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff8000001097e8	kernel.asm	/^ffff8000001097e8:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff8000001097eb	kernel.asm	/^ffff8000001097eb:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001097ee	kernel.asm	/^ffff8000001097ee:	0f 85 96 00 00 00    	jne    ffff80000010988a <trap+0x2a9>$/;"	l
ffff8000001097f4	kernel.asm	/^ffff8000001097f4:	48 b8 cc 93 10 00 00 	movabs $0xffff8000001093cc,%rax$/;"	l
ffff8000001097fb	kernel.asm	/^ffff8000001097fb:	80 ff ff $/;"	l
ffff8000001097fe	kernel.asm	/^ffff8000001097fe:	ff d0                	callq  *%rax$/;"	l
ffff800000109800	kernel.asm	/^ffff800000109800:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff800000109803	kernel.asm	/^ffff800000109803:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109807	kernel.asm	/^ffff800000109807:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff80000010980e	kernel.asm	/^ffff80000010980e:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff800000109815	kernel.asm	/^ffff800000109815:	80 ff ff $/;"	l
ffff800000109818	kernel.asm	/^ffff800000109818:	ff d0                	callq  *%rax$/;"	l
ffff80000010981a	kernel.asm	/^ffff80000010981a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010981c	kernel.asm	/^ffff80000010981c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109820	kernel.asm	/^ffff800000109820:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109824	kernel.asm	/^ffff800000109824:	4d 89 e0             	mov    %r12,%r8$/;"	l
ffff800000109827	kernel.asm	/^ffff800000109827:	48 89 d9             	mov    %rbx,%rcx$/;"	l
ffff80000010982a	kernel.asm	/^ffff80000010982a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010982d	kernel.asm	/^ffff80000010982d:	48 bf 60 c1 10 00 00 	movabs $0xffff80000010c160,%rdi$/;"	l
ffff800000109834	kernel.asm	/^ffff800000109834:	80 ff ff $/;"	l
ffff800000109837	kernel.asm	/^ffff800000109837:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010983c	kernel.asm	/^ffff80000010983c:	49 b9 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r9$/;"	l
ffff800000109843	kernel.asm	/^ffff800000109843:	80 ff ff $/;"	l
ffff800000109846	kernel.asm	/^ffff800000109846:	41 ff d1             	callq  *%r9$/;"	l
ffff800000109849	kernel.asm	/^ffff800000109849:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109850	kernel.asm	/^ffff800000109850:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109854	kernel.asm	/^ffff800000109854:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109857	kernel.asm	/^ffff800000109857:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109859	kernel.asm	/^ffff800000109859:	48 bf 92 c1 10 00 00 	movabs $0xffff80000010c192,%rdi$/;"	l
ffff800000109860	kernel.asm	/^ffff800000109860:	80 ff ff $/;"	l
ffff800000109863	kernel.asm	/^ffff800000109863:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109868	kernel.asm	/^ffff800000109868:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010986f	kernel.asm	/^ffff80000010986f:	80 ff ff $/;"	l
ffff800000109872	kernel.asm	/^ffff800000109872:	ff d2                	callq  *%rdx$/;"	l
ffff800000109874	kernel.asm	/^ffff800000109874:	48 bf 9f c1 10 00 00 	movabs $0xffff80000010c19f,%rdi$/;"	l
ffff80000010987b	kernel.asm	/^ffff80000010987b:	80 ff ff $/;"	l
ffff80000010987e	kernel.asm	/^ffff80000010987e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000109885	kernel.asm	/^ffff800000109885:	80 ff ff $/;"	l
ffff800000109888	kernel.asm	/^ffff800000109888:	ff d0                	callq  *%rax$/;"	l
ffff80000010988a	kernel.asm	/^ffff80000010988a:	48 b8 cc 93 10 00 00 	movabs $0xffff8000001093cc,%rax$/;"	l
ffff800000109891	kernel.asm	/^ffff800000109891:	80 ff ff $/;"	l
ffff800000109894	kernel.asm	/^ffff800000109894:	ff d0                	callq  *%rax$/;"	l
ffff800000109896	kernel.asm	/^ffff800000109896:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff800000109899	kernel.asm	/^ffff800000109899:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010989d	kernel.asm	/^ffff80000010989d:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff8000001098a4	kernel.asm	/^ffff8000001098a4:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff8000001098ab	kernel.asm	/^ffff8000001098ab:	80 ff ff $/;"	l
ffff8000001098ae	kernel.asm	/^ffff8000001098ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001098b0	kernel.asm	/^ffff8000001098b0:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001098b2	kernel.asm	/^ffff8000001098b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001098b6	kernel.asm	/^ffff8000001098b6:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx$/;"	l
ffff8000001098bd	kernel.asm	/^ffff8000001098bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001098c1	kernel.asm	/^ffff8000001098c1:	48 8b 50 78          	mov    0x78(%rax),%rdx$/;"	l
ffff8000001098c5	kernel.asm	/^ffff8000001098c5:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001098cc	kernel.asm	/^ffff8000001098cc:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001098d0	kernel.asm	/^ffff8000001098d0:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff8000001098d7	kernel.asm	/^ffff8000001098d7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001098de	kernel.asm	/^ffff8000001098de:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001098e2	kernel.asm	/^ffff8000001098e2:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001098e5	kernel.asm	/^ffff8000001098e5:	41 54                	push   %r12$/;"	l
ffff8000001098e7	kernel.asm	/^ffff8000001098e7:	53                   	push   %rbx$/;"	l
ffff8000001098e8	kernel.asm	/^ffff8000001098e8:	41 89 f9             	mov    %edi,%r9d$/;"	l
ffff8000001098eb	kernel.asm	/^ffff8000001098eb:	49 89 c8             	mov    %rcx,%r8$/;"	l
ffff8000001098ee	kernel.asm	/^ffff8000001098ee:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff8000001098f1	kernel.asm	/^ffff8000001098f1:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff8000001098f4	kernel.asm	/^ffff8000001098f4:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001098f6	kernel.asm	/^ffff8000001098f6:	48 bf a8 c1 10 00 00 	movabs $0xffff80000010c1a8,%rdi$/;"	l
ffff8000001098fd	kernel.asm	/^ffff8000001098fd:	80 ff ff $/;"	l
ffff800000109900	kernel.asm	/^ffff800000109900:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109905	kernel.asm	/^ffff800000109905:	49 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%r10$/;"	l
ffff80000010990c	kernel.asm	/^ffff80000010990c:	80 ff ff $/;"	l
ffff80000010990f	kernel.asm	/^ffff80000010990f:	41 ff d2             	callq  *%r10$/;"	l
ffff800000109912	kernel.asm	/^ffff800000109912:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff800000109916	kernel.asm	/^ffff800000109916:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010991d	kernel.asm	/^ffff80000010991d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109921	kernel.asm	/^ffff800000109921:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff800000109928	kernel.asm	/^ffff800000109928:	eb 01                	jmp    ffff80000010992b <trap+0x34a>$/;"	l
ffff80000010992a	kernel.asm	/^ffff80000010992a:	90                   	nop$/;"	l
ffff80000010992b	kernel.asm	/^ffff80000010992b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109932	kernel.asm	/^ffff800000109932:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109936	kernel.asm	/^ffff800000109936:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000109939	kernel.asm	/^ffff800000109939:	74 32                	je     ffff80000010996d <trap+0x38c>$/;"	l
ffff80000010993b	kernel.asm	/^ffff80000010993b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109942	kernel.asm	/^ffff800000109942:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109946	kernel.asm	/^ffff800000109946:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109949	kernel.asm	/^ffff800000109949:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010994b	kernel.asm	/^ffff80000010994b:	74 20                	je     ffff80000010996d <trap+0x38c>$/;"	l
ffff80000010994d	kernel.asm	/^ffff80000010994d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109951	kernel.asm	/^ffff800000109951:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff800000109958	kernel.asm	/^ffff800000109958:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff80000010995b	kernel.asm	/^ffff80000010995b:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff80000010995f	kernel.asm	/^ffff80000010995f:	75 0c                	jne    ffff80000010996d <trap+0x38c>$/;"	l
ffff800000109961	kernel.asm	/^ffff800000109961:	48 b8 4d 66 10 00 00 	movabs $0xffff80000010664d,%rax$/;"	l
ffff800000109968	kernel.asm	/^ffff800000109968:	80 ff ff $/;"	l
ffff80000010996b	kernel.asm	/^ffff80000010996b:	ff d0                	callq  *%rax$/;"	l
ffff80000010996d	kernel.asm	/^ffff80000010996d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109974	kernel.asm	/^ffff800000109974:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109978	kernel.asm	/^ffff800000109978:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010997b	kernel.asm	/^ffff80000010997b:	74 2d                	je     ffff8000001099aa <trap+0x3c9>$/;"	l
ffff80000010997d	kernel.asm	/^ffff80000010997d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109984	kernel.asm	/^ffff800000109984:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109988	kernel.asm	/^ffff800000109988:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010998b	kernel.asm	/^ffff80000010998b:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff80000010998e	kernel.asm	/^ffff80000010998e:	75 1a                	jne    ffff8000001099aa <trap+0x3c9>$/;"	l
ffff800000109990	kernel.asm	/^ffff800000109990:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109994	kernel.asm	/^ffff800000109994:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109998	kernel.asm	/^ffff800000109998:	48 83 f8 20          	cmp    $0x20,%rax$/;"	l
ffff80000010999c	kernel.asm	/^ffff80000010999c:	75 0c                	jne    ffff8000001099aa <trap+0x3c9>$/;"	l
ffff80000010999e	kernel.asm	/^ffff80000010999e:	48 b8 ff 6b 10 00 00 	movabs $0xffff800000106bff,%rax$/;"	l
ffff8000001099a5	kernel.asm	/^ffff8000001099a5:	80 ff ff $/;"	l
ffff8000001099a8	kernel.asm	/^ffff8000001099a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001099aa	kernel.asm	/^ffff8000001099aa:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099b1	kernel.asm	/^ffff8000001099b1:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099b5	kernel.asm	/^ffff8000001099b5:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001099b8	kernel.asm	/^ffff8000001099b8:	74 35                	je     ffff8000001099ef <trap+0x40e>$/;"	l
ffff8000001099ba	kernel.asm	/^ffff8000001099ba:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099c1	kernel.asm	/^ffff8000001099c1:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099c5	kernel.asm	/^ffff8000001099c5:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001099c8	kernel.asm	/^ffff8000001099c8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001099ca	kernel.asm	/^ffff8000001099ca:	74 23                	je     ffff8000001099ef <trap+0x40e>$/;"	l
ffff8000001099cc	kernel.asm	/^ffff8000001099cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001099d0	kernel.asm	/^ffff8000001099d0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff8000001099d7	kernel.asm	/^ffff8000001099d7:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff8000001099da	kernel.asm	/^ffff8000001099da:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff8000001099de	kernel.asm	/^ffff8000001099de:	75 0f                	jne    ffff8000001099ef <trap+0x40e>$/;"	l
ffff8000001099e0	kernel.asm	/^ffff8000001099e0:	48 b8 4d 66 10 00 00 	movabs $0xffff80000010664d,%rax$/;"	l
ffff8000001099e7	kernel.asm	/^ffff8000001099e7:	80 ff ff $/;"	l
ffff8000001099ea	kernel.asm	/^ffff8000001099ea:	ff d0                	callq  *%rax$/;"	l
ffff8000001099ec	kernel.asm	/^ffff8000001099ec:	eb 01                	jmp    ffff8000001099ef <trap+0x40e>$/;"	l
ffff8000001099ee	kernel.asm	/^ffff8000001099ee:	90                   	nop$/;"	l
ffff8000001099ef	kernel.asm	/^ffff8000001099ef:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp$/;"	l
ffff8000001099f3	kernel.asm	/^ffff8000001099f3:	5b                   	pop    %rbx$/;"	l
ffff8000001099f4	kernel.asm	/^ffff8000001099f4:	41 5c                	pop    %r12$/;"	l
ffff8000001099f6	kernel.asm	/^ffff8000001099f6:	5d                   	pop    %rbp$/;"	l
ffff8000001099f7	kernel.asm	/^ffff8000001099f7:	c3                   	retq   $/;"	l
ffff8000001099f8	kernel.asm	/^ffff8000001099f8 <inb>:$/;"	l
ffff8000001099f8	kernel.asm	/^ffff8000001099f8:	55                   	push   %rbp$/;"	l
ffff8000001099f9	kernel.asm	/^ffff8000001099f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001099fc	kernel.asm	/^ffff8000001099fc:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000109a00	kernel.asm	/^ffff800000109a00:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000109a02	kernel.asm	/^ffff800000109a02:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000109a06	kernel.asm	/^ffff800000109a06:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000109a0a	kernel.asm	/^ffff800000109a0a:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000109a0c	kernel.asm	/^ffff800000109a0c:	ec                   	in     (%dx),%al$/;"	l
ffff800000109a0d	kernel.asm	/^ffff800000109a0d:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000109a10	kernel.asm	/^ffff800000109a10:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000109a14	kernel.asm	/^ffff800000109a14:	c9                   	leaveq $/;"	l
ffff800000109a15	kernel.asm	/^ffff800000109a15:	c3                   	retq   $/;"	l
ffff800000109a16	kernel.asm	/^ffff800000109a16 <outb>:$/;"	l
ffff800000109a16	kernel.asm	/^ffff800000109a16:	55                   	push   %rbp$/;"	l
ffff800000109a17	kernel.asm	/^ffff800000109a17:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109a1a	kernel.asm	/^ffff800000109a1a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000109a1e	kernel.asm	/^ffff800000109a1e:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000109a20	kernel.asm	/^ffff800000109a20:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000109a22	kernel.asm	/^ffff800000109a22:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000109a26	kernel.asm	/^ffff800000109a26:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000109a29	kernel.asm	/^ffff800000109a29:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000109a2d	kernel.asm	/^ffff800000109a2d:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000109a31	kernel.asm	/^ffff800000109a31:	ee                   	out    %al,(%dx)$/;"	l
ffff800000109a32	kernel.asm	/^ffff800000109a32:	90                   	nop$/;"	l
ffff800000109a33	kernel.asm	/^ffff800000109a33:	c9                   	leaveq $/;"	l
ffff800000109a34	kernel.asm	/^ffff800000109a34:	c3                   	retq   $/;"	l
ffff800000109a35	kernel.asm	/^ffff800000109a35 <uartearlyinit>:$/;"	l
ffff800000109a35	kernel.asm	/^ffff800000109a35:	55                   	push   %rbp$/;"	l
ffff800000109a36	kernel.asm	/^ffff800000109a36:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109a39	kernel.asm	/^ffff800000109a39:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109a3d	kernel.asm	/^ffff800000109a3d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109a42	kernel.asm	/^ffff800000109a42:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109a47	kernel.asm	/^ffff800000109a47:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109a4e	kernel.asm	/^ffff800000109a4e:	80 ff ff $/;"	l
ffff800000109a51	kernel.asm	/^ffff800000109a51:	ff d0                	callq  *%rax$/;"	l
ffff800000109a53	kernel.asm	/^ffff800000109a53:	be 80 00 00 00       	mov    $0x80,%esi$/;"	l
ffff800000109a58	kernel.asm	/^ffff800000109a58:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109a5d	kernel.asm	/^ffff800000109a5d:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109a64	kernel.asm	/^ffff800000109a64:	80 ff ff $/;"	l
ffff800000109a67	kernel.asm	/^ffff800000109a67:	ff d0                	callq  *%rax$/;"	l
ffff800000109a69	kernel.asm	/^ffff800000109a69:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff800000109a6e	kernel.asm	/^ffff800000109a6e:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109a73	kernel.asm	/^ffff800000109a73:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109a7a	kernel.asm	/^ffff800000109a7a:	80 ff ff $/;"	l
ffff800000109a7d	kernel.asm	/^ffff800000109a7d:	ff d0                	callq  *%rax$/;"	l
ffff800000109a7f	kernel.asm	/^ffff800000109a7f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109a84	kernel.asm	/^ffff800000109a84:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109a89	kernel.asm	/^ffff800000109a89:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109a90	kernel.asm	/^ffff800000109a90:	80 ff ff $/;"	l
ffff800000109a93	kernel.asm	/^ffff800000109a93:	ff d0                	callq  *%rax$/;"	l
ffff800000109a95	kernel.asm	/^ffff800000109a95:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000109a9a	kernel.asm	/^ffff800000109a9a:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109a9f	kernel.asm	/^ffff800000109a9f:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109aa6	kernel.asm	/^ffff800000109aa6:	80 ff ff $/;"	l
ffff800000109aa9	kernel.asm	/^ffff800000109aa9:	ff d0                	callq  *%rax$/;"	l
ffff800000109aab	kernel.asm	/^ffff800000109aab:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109ab0	kernel.asm	/^ffff800000109ab0:	bf fc 03 00 00       	mov    $0x3fc,%edi$/;"	l
ffff800000109ab5	kernel.asm	/^ffff800000109ab5:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109abc	kernel.asm	/^ffff800000109abc:	80 ff ff $/;"	l
ffff800000109abf	kernel.asm	/^ffff800000109abf:	ff d0                	callq  *%rax$/;"	l
ffff800000109ac1	kernel.asm	/^ffff800000109ac1:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000109ac6	kernel.asm	/^ffff800000109ac6:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109acb	kernel.asm	/^ffff800000109acb:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109ad2	kernel.asm	/^ffff800000109ad2:	80 ff ff $/;"	l
ffff800000109ad5	kernel.asm	/^ffff800000109ad5:	ff d0                	callq  *%rax$/;"	l
ffff800000109ad7	kernel.asm	/^ffff800000109ad7:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109adc	kernel.asm	/^ffff800000109adc:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109ae3	kernel.asm	/^ffff800000109ae3:	80 ff ff $/;"	l
ffff800000109ae6	kernel.asm	/^ffff800000109ae6:	ff d0                	callq  *%rax$/;"	l
ffff800000109ae8	kernel.asm	/^ffff800000109ae8:	3c ff                	cmp    $0xff,%al$/;"	l
ffff800000109aea	kernel.asm	/^ffff800000109aea:	74 4a                	je     ffff800000109b36 <uartearlyinit+0x101>$/;"	l
ffff800000109aec	kernel.asm	/^ffff800000109aec:	48 b8 cc b3 11 00 00 	movabs $0xffff80000011b3cc,%rax$/;"	l
ffff800000109af3	kernel.asm	/^ffff800000109af3:	80 ff ff $/;"	l
ffff800000109af6	kernel.asm	/^ffff800000109af6:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000109afc	kernel.asm	/^ffff800000109afc:	48 b8 f0 c2 10 00 00 	movabs $0xffff80000010c2f0,%rax$/;"	l
ffff800000109b03	kernel.asm	/^ffff800000109b03:	80 ff ff $/;"	l
ffff800000109b06	kernel.asm	/^ffff800000109b06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109b0a	kernel.asm	/^ffff800000109b0a:	eb 1d                	jmp    ffff800000109b29 <uartearlyinit+0xf4>$/;"	l
ffff800000109b0c	kernel.asm	/^ffff800000109b0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109b10	kernel.asm	/^ffff800000109b10:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109b13	kernel.asm	/^ffff800000109b13:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000109b16	kernel.asm	/^ffff800000109b16:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109b18	kernel.asm	/^ffff800000109b18:	48 b8 8a 9b 10 00 00 	movabs $0xffff800000109b8a,%rax$/;"	l
ffff800000109b1f	kernel.asm	/^ffff800000109b1f:	80 ff ff $/;"	l
ffff800000109b22	kernel.asm	/^ffff800000109b22:	ff d0                	callq  *%rax$/;"	l
ffff800000109b24	kernel.asm	/^ffff800000109b24:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000109b29	kernel.asm	/^ffff800000109b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109b2d	kernel.asm	/^ffff800000109b2d:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109b30	kernel.asm	/^ffff800000109b30:	84 c0                	test   %al,%al$/;"	l
ffff800000109b32	kernel.asm	/^ffff800000109b32:	75 d8                	jne    ffff800000109b0c <uartearlyinit+0xd7>$/;"	l
ffff800000109b34	kernel.asm	/^ffff800000109b34:	eb 01                	jmp    ffff800000109b37 <uartearlyinit+0x102>$/;"	l
ffff800000109b36	kernel.asm	/^ffff800000109b36:	90                   	nop$/;"	l
ffff800000109b37	kernel.asm	/^ffff800000109b37:	c9                   	leaveq $/;"	l
ffff800000109b38	kernel.asm	/^ffff800000109b38:	c3                   	retq   $/;"	l
ffff800000109b39	kernel.asm	/^ffff800000109b39 <uartinit>:$/;"	l
ffff800000109b39	kernel.asm	/^ffff800000109b39:	55                   	push   %rbp$/;"	l
ffff800000109b3a	kernel.asm	/^ffff800000109b3a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109b3d	kernel.asm	/^ffff800000109b3d:	48 b8 cc b3 11 00 00 	movabs $0xffff80000011b3cc,%rax$/;"	l
ffff800000109b44	kernel.asm	/^ffff800000109b44:	80 ff ff $/;"	l
ffff800000109b47	kernel.asm	/^ffff800000109b47:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109b49	kernel.asm	/^ffff800000109b49:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109b4b	kernel.asm	/^ffff800000109b4b:	74 3a                	je     ffff800000109b87 <uartinit+0x4e>$/;"	l
ffff800000109b4d	kernel.asm	/^ffff800000109b4d:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109b52	kernel.asm	/^ffff800000109b52:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109b59	kernel.asm	/^ffff800000109b59:	80 ff ff $/;"	l
ffff800000109b5c	kernel.asm	/^ffff800000109b5c:	ff d0                	callq  *%rax$/;"	l
ffff800000109b5e	kernel.asm	/^ffff800000109b5e:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109b63	kernel.asm	/^ffff800000109b63:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109b6a	kernel.asm	/^ffff800000109b6a:	80 ff ff $/;"	l
ffff800000109b6d	kernel.asm	/^ffff800000109b6d:	ff d0                	callq  *%rax$/;"	l
ffff800000109b6f	kernel.asm	/^ffff800000109b6f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109b74	kernel.asm	/^ffff800000109b74:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff800000109b79	kernel.asm	/^ffff800000109b79:	48 b8 65 3e 10 00 00 	movabs $0xffff800000103e65,%rax$/;"	l
ffff800000109b80	kernel.asm	/^ffff800000109b80:	80 ff ff $/;"	l
ffff800000109b83	kernel.asm	/^ffff800000109b83:	ff d0                	callq  *%rax$/;"	l
ffff800000109b85	kernel.asm	/^ffff800000109b85:	eb 01                	jmp    ffff800000109b88 <uartinit+0x4f>$/;"	l
ffff800000109b87	kernel.asm	/^ffff800000109b87:	90                   	nop$/;"	l
ffff800000109b88	kernel.asm	/^ffff800000109b88:	5d                   	pop    %rbp$/;"	l
ffff800000109b89	kernel.asm	/^ffff800000109b89:	c3                   	retq   $/;"	l
ffff800000109b8a	kernel.asm	/^ffff800000109b8a <uartputc>:$/;"	l
ffff800000109b8a	kernel.asm	/^ffff800000109b8a:	55                   	push   %rbp$/;"	l
ffff800000109b8b	kernel.asm	/^ffff800000109b8b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109b8e	kernel.asm	/^ffff800000109b8e:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109b92	kernel.asm	/^ffff800000109b92:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000109b95	kernel.asm	/^ffff800000109b95:	48 b8 cc b3 11 00 00 	movabs $0xffff80000011b3cc,%rax$/;"	l
ffff800000109b9c	kernel.asm	/^ffff800000109b9c:	80 ff ff $/;"	l
ffff800000109b9f	kernel.asm	/^ffff800000109b9f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109ba1	kernel.asm	/^ffff800000109ba1:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109ba3	kernel.asm	/^ffff800000109ba3:	74 5a                	je     ffff800000109bff <uartputc+0x75>$/;"	l
ffff800000109ba5	kernel.asm	/^ffff800000109ba5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109bac	kernel.asm	/^ffff800000109bac:	eb 15                	jmp    ffff800000109bc3 <uartputc+0x39>$/;"	l
ffff800000109bae	kernel.asm	/^ffff800000109bae:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff800000109bb3	kernel.asm	/^ffff800000109bb3:	48 b8 e5 46 10 00 00 	movabs $0xffff8000001046e5,%rax$/;"	l
ffff800000109bba	kernel.asm	/^ffff800000109bba:	80 ff ff $/;"	l
ffff800000109bbd	kernel.asm	/^ffff800000109bbd:	ff d0                	callq  *%rax$/;"	l
ffff800000109bbf	kernel.asm	/^ffff800000109bbf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000109bc3	kernel.asm	/^ffff800000109bc3:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)$/;"	l
ffff800000109bc7	kernel.asm	/^ffff800000109bc7:	7f 1b                	jg     ffff800000109be4 <uartputc+0x5a>$/;"	l
ffff800000109bc9	kernel.asm	/^ffff800000109bc9:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109bce	kernel.asm	/^ffff800000109bce:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109bd5	kernel.asm	/^ffff800000109bd5:	80 ff ff $/;"	l
ffff800000109bd8	kernel.asm	/^ffff800000109bd8:	ff d0                	callq  *%rax$/;"	l
ffff800000109bda	kernel.asm	/^ffff800000109bda:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109bdd	kernel.asm	/^ffff800000109bdd:	83 e0 20             	and    $0x20,%eax$/;"	l
ffff800000109be0	kernel.asm	/^ffff800000109be0:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109be2	kernel.asm	/^ffff800000109be2:	74 ca                	je     ffff800000109bae <uartputc+0x24>$/;"	l
ffff800000109be4	kernel.asm	/^ffff800000109be4:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000109be7	kernel.asm	/^ffff800000109be7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109bea	kernel.asm	/^ffff800000109bea:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109bec	kernel.asm	/^ffff800000109bec:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109bf1	kernel.asm	/^ffff800000109bf1:	48 b8 16 9a 10 00 00 	movabs $0xffff800000109a16,%rax$/;"	l
ffff800000109bf8	kernel.asm	/^ffff800000109bf8:	80 ff ff $/;"	l
ffff800000109bfb	kernel.asm	/^ffff800000109bfb:	ff d0                	callq  *%rax$/;"	l
ffff800000109bfd	kernel.asm	/^ffff800000109bfd:	eb 01                	jmp    ffff800000109c00 <uartputc+0x76>$/;"	l
ffff800000109bff	kernel.asm	/^ffff800000109bff:	90                   	nop$/;"	l
ffff800000109c00	kernel.asm	/^ffff800000109c00:	c9                   	leaveq $/;"	l
ffff800000109c01	kernel.asm	/^ffff800000109c01:	c3                   	retq   $/;"	l
ffff800000109c02	kernel.asm	/^ffff800000109c02 <uartgetc>:$/;"	l
ffff800000109c02	kernel.asm	/^ffff800000109c02:	55                   	push   %rbp$/;"	l
ffff800000109c03	kernel.asm	/^ffff800000109c03:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c06	kernel.asm	/^ffff800000109c06:	48 b8 cc b3 11 00 00 	movabs $0xffff80000011b3cc,%rax$/;"	l
ffff800000109c0d	kernel.asm	/^ffff800000109c0d:	80 ff ff $/;"	l
ffff800000109c10	kernel.asm	/^ffff800000109c10:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109c12	kernel.asm	/^ffff800000109c12:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109c14	kernel.asm	/^ffff800000109c14:	75 07                	jne    ffff800000109c1d <uartgetc+0x1b>$/;"	l
ffff800000109c16	kernel.asm	/^ffff800000109c16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109c1b	kernel.asm	/^ffff800000109c1b:	eb 36                	jmp    ffff800000109c53 <uartgetc+0x51>$/;"	l
ffff800000109c1d	kernel.asm	/^ffff800000109c1d:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109c22	kernel.asm	/^ffff800000109c22:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109c29	kernel.asm	/^ffff800000109c29:	80 ff ff $/;"	l
ffff800000109c2c	kernel.asm	/^ffff800000109c2c:	ff d0                	callq  *%rax$/;"	l
ffff800000109c2e	kernel.asm	/^ffff800000109c2e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c31	kernel.asm	/^ffff800000109c31:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000109c34	kernel.asm	/^ffff800000109c34:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109c36	kernel.asm	/^ffff800000109c36:	75 07                	jne    ffff800000109c3f <uartgetc+0x3d>$/;"	l
ffff800000109c38	kernel.asm	/^ffff800000109c38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109c3d	kernel.asm	/^ffff800000109c3d:	eb 14                	jmp    ffff800000109c53 <uartgetc+0x51>$/;"	l
ffff800000109c3f	kernel.asm	/^ffff800000109c3f:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109c44	kernel.asm	/^ffff800000109c44:	48 b8 f8 99 10 00 00 	movabs $0xffff8000001099f8,%rax$/;"	l
ffff800000109c4b	kernel.asm	/^ffff800000109c4b:	80 ff ff $/;"	l
ffff800000109c4e	kernel.asm	/^ffff800000109c4e:	ff d0                	callq  *%rax$/;"	l
ffff800000109c50	kernel.asm	/^ffff800000109c50:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c53	kernel.asm	/^ffff800000109c53:	5d                   	pop    %rbp$/;"	l
ffff800000109c54	kernel.asm	/^ffff800000109c54:	c3                   	retq   $/;"	l
ffff800000109c55	kernel.asm	/^ffff800000109c55 <uartintr>:$/;"	l
ffff800000109c55	kernel.asm	/^ffff800000109c55:	55                   	push   %rbp$/;"	l
ffff800000109c56	kernel.asm	/^ffff800000109c56:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c59	kernel.asm	/^ffff800000109c59:	48 bf 02 9c 10 00 00 	movabs $0xffff800000109c02,%rdi$/;"	l
ffff800000109c60	kernel.asm	/^ffff800000109c60:	80 ff ff $/;"	l
ffff800000109c63	kernel.asm	/^ffff800000109c63:	48 b8 c7 0e 10 00 00 	movabs $0xffff800000100ec7,%rax$/;"	l
ffff800000109c6a	kernel.asm	/^ffff800000109c6a:	80 ff ff $/;"	l
ffff800000109c6d	kernel.asm	/^ffff800000109c6d:	ff d0                	callq  *%rax$/;"	l
ffff800000109c6f	kernel.asm	/^ffff800000109c6f:	90                   	nop$/;"	l
ffff800000109c70	kernel.asm	/^ffff800000109c70:	5d                   	pop    %rbp$/;"	l
ffff800000109c71	kernel.asm	/^ffff800000109c71:	c3                   	retq   $/;"	l
ffff800000109c72	kernel.asm	/^ffff800000109c72 <vector0>:$/;"	l
ffff800000109c72	kernel.asm	/^ffff800000109c72:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c74	kernel.asm	/^ffff800000109c74:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c76	kernel.asm	/^ffff800000109c76:	e9 85 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109c7b	kernel.asm	/^ffff800000109c7b <vector1>:$/;"	l
ffff800000109c7b	kernel.asm	/^ffff800000109c7b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c7d	kernel.asm	/^ffff800000109c7d:	6a 01                	pushq  $0x1$/;"	l
ffff800000109c7f	kernel.asm	/^ffff800000109c7f:	e9 7c f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109c84	kernel.asm	/^ffff800000109c84 <vector2>:$/;"	l
ffff800000109c84	kernel.asm	/^ffff800000109c84:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c86	kernel.asm	/^ffff800000109c86:	6a 02                	pushq  $0x2$/;"	l
ffff800000109c88	kernel.asm	/^ffff800000109c88:	e9 73 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109c8d	kernel.asm	/^ffff800000109c8d <vector3>:$/;"	l
ffff800000109c8d	kernel.asm	/^ffff800000109c8d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c8f	kernel.asm	/^ffff800000109c8f:	6a 03                	pushq  $0x3$/;"	l
ffff800000109c91	kernel.asm	/^ffff800000109c91:	e9 6a f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109c96	kernel.asm	/^ffff800000109c96 <vector4>:$/;"	l
ffff800000109c96	kernel.asm	/^ffff800000109c96:	6a 00                	pushq  $0x0$/;"	l
ffff800000109c98	kernel.asm	/^ffff800000109c98:	6a 04                	pushq  $0x4$/;"	l
ffff800000109c9a	kernel.asm	/^ffff800000109c9a:	e9 61 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109c9f	kernel.asm	/^ffff800000109c9f <vector5>:$/;"	l
ffff800000109c9f	kernel.asm	/^ffff800000109c9f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ca1	kernel.asm	/^ffff800000109ca1:	6a 05                	pushq  $0x5$/;"	l
ffff800000109ca3	kernel.asm	/^ffff800000109ca3:	e9 58 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ca8	kernel.asm	/^ffff800000109ca8 <vector6>:$/;"	l
ffff800000109ca8	kernel.asm	/^ffff800000109ca8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109caa	kernel.asm	/^ffff800000109caa:	6a 06                	pushq  $0x6$/;"	l
ffff800000109cac	kernel.asm	/^ffff800000109cac:	e9 4f f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cb1	kernel.asm	/^ffff800000109cb1 <vector7>:$/;"	l
ffff800000109cb1	kernel.asm	/^ffff800000109cb1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cb3	kernel.asm	/^ffff800000109cb3:	6a 07                	pushq  $0x7$/;"	l
ffff800000109cb5	kernel.asm	/^ffff800000109cb5:	e9 46 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cba	kernel.asm	/^ffff800000109cba <vector8>:$/;"	l
ffff800000109cba	kernel.asm	/^ffff800000109cba:	6a 08                	pushq  $0x8$/;"	l
ffff800000109cbc	kernel.asm	/^ffff800000109cbc:	e9 3f f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cc1	kernel.asm	/^ffff800000109cc1 <vector9>:$/;"	l
ffff800000109cc1	kernel.asm	/^ffff800000109cc1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cc3	kernel.asm	/^ffff800000109cc3:	6a 09                	pushq  $0x9$/;"	l
ffff800000109cc5	kernel.asm	/^ffff800000109cc5:	e9 36 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cca	kernel.asm	/^ffff800000109cca <vector10>:$/;"	l
ffff800000109cca	kernel.asm	/^ffff800000109cca:	6a 0a                	pushq  $0xa$/;"	l
ffff800000109ccc	kernel.asm	/^ffff800000109ccc:	e9 2f f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cd1	kernel.asm	/^ffff800000109cd1 <vector11>:$/;"	l
ffff800000109cd1	kernel.asm	/^ffff800000109cd1:	6a 0b                	pushq  $0xb$/;"	l
ffff800000109cd3	kernel.asm	/^ffff800000109cd3:	e9 28 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cd8	kernel.asm	/^ffff800000109cd8 <vector12>:$/;"	l
ffff800000109cd8	kernel.asm	/^ffff800000109cd8:	6a 0c                	pushq  $0xc$/;"	l
ffff800000109cda	kernel.asm	/^ffff800000109cda:	e9 21 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cdf	kernel.asm	/^ffff800000109cdf <vector13>:$/;"	l
ffff800000109cdf	kernel.asm	/^ffff800000109cdf:	6a 0d                	pushq  $0xd$/;"	l
ffff800000109ce1	kernel.asm	/^ffff800000109ce1:	e9 1a f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ce6	kernel.asm	/^ffff800000109ce6 <vector14>:$/;"	l
ffff800000109ce6	kernel.asm	/^ffff800000109ce6:	6a 0e                	pushq  $0xe$/;"	l
ffff800000109ce8	kernel.asm	/^ffff800000109ce8:	e9 13 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ced	kernel.asm	/^ffff800000109ced <vector15>:$/;"	l
ffff800000109ced	kernel.asm	/^ffff800000109ced:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cef	kernel.asm	/^ffff800000109cef:	6a 0f                	pushq  $0xf$/;"	l
ffff800000109cf1	kernel.asm	/^ffff800000109cf1:	e9 0a f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cf6	kernel.asm	/^ffff800000109cf6 <vector16>:$/;"	l
ffff800000109cf6	kernel.asm	/^ffff800000109cf6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cf8	kernel.asm	/^ffff800000109cf8:	6a 10                	pushq  $0x10$/;"	l
ffff800000109cfa	kernel.asm	/^ffff800000109cfa:	e9 01 f6 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109cff	kernel.asm	/^ffff800000109cff <vector17>:$/;"	l
ffff800000109cff	kernel.asm	/^ffff800000109cff:	6a 11                	pushq  $0x11$/;"	l
ffff800000109d01	kernel.asm	/^ffff800000109d01:	e9 fa f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d06	kernel.asm	/^ffff800000109d06 <vector18>:$/;"	l
ffff800000109d06	kernel.asm	/^ffff800000109d06:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d08	kernel.asm	/^ffff800000109d08:	6a 12                	pushq  $0x12$/;"	l
ffff800000109d0a	kernel.asm	/^ffff800000109d0a:	e9 f1 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d0f	kernel.asm	/^ffff800000109d0f <vector19>:$/;"	l
ffff800000109d0f	kernel.asm	/^ffff800000109d0f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d11	kernel.asm	/^ffff800000109d11:	6a 13                	pushq  $0x13$/;"	l
ffff800000109d13	kernel.asm	/^ffff800000109d13:	e9 e8 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d18	kernel.asm	/^ffff800000109d18 <vector20>:$/;"	l
ffff800000109d18	kernel.asm	/^ffff800000109d18:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d1a	kernel.asm	/^ffff800000109d1a:	6a 14                	pushq  $0x14$/;"	l
ffff800000109d1c	kernel.asm	/^ffff800000109d1c:	e9 df f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d21	kernel.asm	/^ffff800000109d21 <vector21>:$/;"	l
ffff800000109d21	kernel.asm	/^ffff800000109d21:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d23	kernel.asm	/^ffff800000109d23:	6a 15                	pushq  $0x15$/;"	l
ffff800000109d25	kernel.asm	/^ffff800000109d25:	e9 d6 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d2a	kernel.asm	/^ffff800000109d2a <vector22>:$/;"	l
ffff800000109d2a	kernel.asm	/^ffff800000109d2a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d2c	kernel.asm	/^ffff800000109d2c:	6a 16                	pushq  $0x16$/;"	l
ffff800000109d2e	kernel.asm	/^ffff800000109d2e:	e9 cd f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d33	kernel.asm	/^ffff800000109d33 <vector23>:$/;"	l
ffff800000109d33	kernel.asm	/^ffff800000109d33:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d35	kernel.asm	/^ffff800000109d35:	6a 17                	pushq  $0x17$/;"	l
ffff800000109d37	kernel.asm	/^ffff800000109d37:	e9 c4 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d3c	kernel.asm	/^ffff800000109d3c <vector24>:$/;"	l
ffff800000109d3c	kernel.asm	/^ffff800000109d3c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d3e	kernel.asm	/^ffff800000109d3e:	6a 18                	pushq  $0x18$/;"	l
ffff800000109d40	kernel.asm	/^ffff800000109d40:	e9 bb f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d45	kernel.asm	/^ffff800000109d45 <vector25>:$/;"	l
ffff800000109d45	kernel.asm	/^ffff800000109d45:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d47	kernel.asm	/^ffff800000109d47:	6a 19                	pushq  $0x19$/;"	l
ffff800000109d49	kernel.asm	/^ffff800000109d49:	e9 b2 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d4e	kernel.asm	/^ffff800000109d4e <vector26>:$/;"	l
ffff800000109d4e	kernel.asm	/^ffff800000109d4e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d50	kernel.asm	/^ffff800000109d50:	6a 1a                	pushq  $0x1a$/;"	l
ffff800000109d52	kernel.asm	/^ffff800000109d52:	e9 a9 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d57	kernel.asm	/^ffff800000109d57 <vector27>:$/;"	l
ffff800000109d57	kernel.asm	/^ffff800000109d57:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d59	kernel.asm	/^ffff800000109d59:	6a 1b                	pushq  $0x1b$/;"	l
ffff800000109d5b	kernel.asm	/^ffff800000109d5b:	e9 a0 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d60	kernel.asm	/^ffff800000109d60 <vector28>:$/;"	l
ffff800000109d60	kernel.asm	/^ffff800000109d60:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d62	kernel.asm	/^ffff800000109d62:	6a 1c                	pushq  $0x1c$/;"	l
ffff800000109d64	kernel.asm	/^ffff800000109d64:	e9 97 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d69	kernel.asm	/^ffff800000109d69 <vector29>:$/;"	l
ffff800000109d69	kernel.asm	/^ffff800000109d69:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d6b	kernel.asm	/^ffff800000109d6b:	6a 1d                	pushq  $0x1d$/;"	l
ffff800000109d6d	kernel.asm	/^ffff800000109d6d:	e9 8e f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d72	kernel.asm	/^ffff800000109d72 <vector30>:$/;"	l
ffff800000109d72	kernel.asm	/^ffff800000109d72:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d74	kernel.asm	/^ffff800000109d74:	6a 1e                	pushq  $0x1e$/;"	l
ffff800000109d76	kernel.asm	/^ffff800000109d76:	e9 85 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d7b	kernel.asm	/^ffff800000109d7b <vector31>:$/;"	l
ffff800000109d7b	kernel.asm	/^ffff800000109d7b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d7d	kernel.asm	/^ffff800000109d7d:	6a 1f                	pushq  $0x1f$/;"	l
ffff800000109d7f	kernel.asm	/^ffff800000109d7f:	e9 7c f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d84	kernel.asm	/^ffff800000109d84 <vector32>:$/;"	l
ffff800000109d84	kernel.asm	/^ffff800000109d84:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d86	kernel.asm	/^ffff800000109d86:	6a 20                	pushq  $0x20$/;"	l
ffff800000109d88	kernel.asm	/^ffff800000109d88:	e9 73 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d8d	kernel.asm	/^ffff800000109d8d <vector33>:$/;"	l
ffff800000109d8d	kernel.asm	/^ffff800000109d8d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d8f	kernel.asm	/^ffff800000109d8f:	6a 21                	pushq  $0x21$/;"	l
ffff800000109d91	kernel.asm	/^ffff800000109d91:	e9 6a f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d96	kernel.asm	/^ffff800000109d96 <vector34>:$/;"	l
ffff800000109d96	kernel.asm	/^ffff800000109d96:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d98	kernel.asm	/^ffff800000109d98:	6a 22                	pushq  $0x22$/;"	l
ffff800000109d9a	kernel.asm	/^ffff800000109d9a:	e9 61 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109d9f	kernel.asm	/^ffff800000109d9f <vector35>:$/;"	l
ffff800000109d9f	kernel.asm	/^ffff800000109d9f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109da1	kernel.asm	/^ffff800000109da1:	6a 23                	pushq  $0x23$/;"	l
ffff800000109da3	kernel.asm	/^ffff800000109da3:	e9 58 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109da8	kernel.asm	/^ffff800000109da8 <vector36>:$/;"	l
ffff800000109da8	kernel.asm	/^ffff800000109da8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109daa	kernel.asm	/^ffff800000109daa:	6a 24                	pushq  $0x24$/;"	l
ffff800000109dac	kernel.asm	/^ffff800000109dac:	e9 4f f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109db1	kernel.asm	/^ffff800000109db1 <vector37>:$/;"	l
ffff800000109db1	kernel.asm	/^ffff800000109db1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109db3	kernel.asm	/^ffff800000109db3:	6a 25                	pushq  $0x25$/;"	l
ffff800000109db5	kernel.asm	/^ffff800000109db5:	e9 46 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109dba	kernel.asm	/^ffff800000109dba <vector38>:$/;"	l
ffff800000109dba	kernel.asm	/^ffff800000109dba:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dbc	kernel.asm	/^ffff800000109dbc:	6a 26                	pushq  $0x26$/;"	l
ffff800000109dbe	kernel.asm	/^ffff800000109dbe:	e9 3d f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109dc3	kernel.asm	/^ffff800000109dc3 <vector39>:$/;"	l
ffff800000109dc3	kernel.asm	/^ffff800000109dc3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dc5	kernel.asm	/^ffff800000109dc5:	6a 27                	pushq  $0x27$/;"	l
ffff800000109dc7	kernel.asm	/^ffff800000109dc7:	e9 34 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109dcc	kernel.asm	/^ffff800000109dcc <vector40>:$/;"	l
ffff800000109dcc	kernel.asm	/^ffff800000109dcc:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dce	kernel.asm	/^ffff800000109dce:	6a 28                	pushq  $0x28$/;"	l
ffff800000109dd0	kernel.asm	/^ffff800000109dd0:	e9 2b f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109dd5	kernel.asm	/^ffff800000109dd5 <vector41>:$/;"	l
ffff800000109dd5	kernel.asm	/^ffff800000109dd5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dd7	kernel.asm	/^ffff800000109dd7:	6a 29                	pushq  $0x29$/;"	l
ffff800000109dd9	kernel.asm	/^ffff800000109dd9:	e9 22 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109dde	kernel.asm	/^ffff800000109dde <vector42>:$/;"	l
ffff800000109dde	kernel.asm	/^ffff800000109dde:	6a 00                	pushq  $0x0$/;"	l
ffff800000109de0	kernel.asm	/^ffff800000109de0:	6a 2a                	pushq  $0x2a$/;"	l
ffff800000109de2	kernel.asm	/^ffff800000109de2:	e9 19 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109de7	kernel.asm	/^ffff800000109de7 <vector43>:$/;"	l
ffff800000109de7	kernel.asm	/^ffff800000109de7:	6a 00                	pushq  $0x0$/;"	l
ffff800000109de9	kernel.asm	/^ffff800000109de9:	6a 2b                	pushq  $0x2b$/;"	l
ffff800000109deb	kernel.asm	/^ffff800000109deb:	e9 10 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109df0	kernel.asm	/^ffff800000109df0 <vector44>:$/;"	l
ffff800000109df0	kernel.asm	/^ffff800000109df0:	6a 00                	pushq  $0x0$/;"	l
ffff800000109df2	kernel.asm	/^ffff800000109df2:	6a 2c                	pushq  $0x2c$/;"	l
ffff800000109df4	kernel.asm	/^ffff800000109df4:	e9 07 f5 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109df9	kernel.asm	/^ffff800000109df9 <vector45>:$/;"	l
ffff800000109df9	kernel.asm	/^ffff800000109df9:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dfb	kernel.asm	/^ffff800000109dfb:	6a 2d                	pushq  $0x2d$/;"	l
ffff800000109dfd	kernel.asm	/^ffff800000109dfd:	e9 fe f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e02	kernel.asm	/^ffff800000109e02 <vector46>:$/;"	l
ffff800000109e02	kernel.asm	/^ffff800000109e02:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e04	kernel.asm	/^ffff800000109e04:	6a 2e                	pushq  $0x2e$/;"	l
ffff800000109e06	kernel.asm	/^ffff800000109e06:	e9 f5 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e0b	kernel.asm	/^ffff800000109e0b <vector47>:$/;"	l
ffff800000109e0b	kernel.asm	/^ffff800000109e0b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e0d	kernel.asm	/^ffff800000109e0d:	6a 2f                	pushq  $0x2f$/;"	l
ffff800000109e0f	kernel.asm	/^ffff800000109e0f:	e9 ec f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e14	kernel.asm	/^ffff800000109e14 <vector48>:$/;"	l
ffff800000109e14	kernel.asm	/^ffff800000109e14:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e16	kernel.asm	/^ffff800000109e16:	6a 30                	pushq  $0x30$/;"	l
ffff800000109e18	kernel.asm	/^ffff800000109e18:	e9 e3 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e1d	kernel.asm	/^ffff800000109e1d <vector49>:$/;"	l
ffff800000109e1d	kernel.asm	/^ffff800000109e1d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e1f	kernel.asm	/^ffff800000109e1f:	6a 31                	pushq  $0x31$/;"	l
ffff800000109e21	kernel.asm	/^ffff800000109e21:	e9 da f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e26	kernel.asm	/^ffff800000109e26 <vector50>:$/;"	l
ffff800000109e26	kernel.asm	/^ffff800000109e26:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e28	kernel.asm	/^ffff800000109e28:	6a 32                	pushq  $0x32$/;"	l
ffff800000109e2a	kernel.asm	/^ffff800000109e2a:	e9 d1 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e2f	kernel.asm	/^ffff800000109e2f <vector51>:$/;"	l
ffff800000109e2f	kernel.asm	/^ffff800000109e2f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e31	kernel.asm	/^ffff800000109e31:	6a 33                	pushq  $0x33$/;"	l
ffff800000109e33	kernel.asm	/^ffff800000109e33:	e9 c8 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e38	kernel.asm	/^ffff800000109e38 <vector52>:$/;"	l
ffff800000109e38	kernel.asm	/^ffff800000109e38:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e3a	kernel.asm	/^ffff800000109e3a:	6a 34                	pushq  $0x34$/;"	l
ffff800000109e3c	kernel.asm	/^ffff800000109e3c:	e9 bf f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e41	kernel.asm	/^ffff800000109e41 <vector53>:$/;"	l
ffff800000109e41	kernel.asm	/^ffff800000109e41:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e43	kernel.asm	/^ffff800000109e43:	6a 35                	pushq  $0x35$/;"	l
ffff800000109e45	kernel.asm	/^ffff800000109e45:	e9 b6 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e4a	kernel.asm	/^ffff800000109e4a <vector54>:$/;"	l
ffff800000109e4a	kernel.asm	/^ffff800000109e4a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e4c	kernel.asm	/^ffff800000109e4c:	6a 36                	pushq  $0x36$/;"	l
ffff800000109e4e	kernel.asm	/^ffff800000109e4e:	e9 ad f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e53	kernel.asm	/^ffff800000109e53 <vector55>:$/;"	l
ffff800000109e53	kernel.asm	/^ffff800000109e53:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e55	kernel.asm	/^ffff800000109e55:	6a 37                	pushq  $0x37$/;"	l
ffff800000109e57	kernel.asm	/^ffff800000109e57:	e9 a4 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e5c	kernel.asm	/^ffff800000109e5c <vector56>:$/;"	l
ffff800000109e5c	kernel.asm	/^ffff800000109e5c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e5e	kernel.asm	/^ffff800000109e5e:	6a 38                	pushq  $0x38$/;"	l
ffff800000109e60	kernel.asm	/^ffff800000109e60:	e9 9b f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e65	kernel.asm	/^ffff800000109e65 <vector57>:$/;"	l
ffff800000109e65	kernel.asm	/^ffff800000109e65:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e67	kernel.asm	/^ffff800000109e67:	6a 39                	pushq  $0x39$/;"	l
ffff800000109e69	kernel.asm	/^ffff800000109e69:	e9 92 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e6e	kernel.asm	/^ffff800000109e6e <vector58>:$/;"	l
ffff800000109e6e	kernel.asm	/^ffff800000109e6e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e70	kernel.asm	/^ffff800000109e70:	6a 3a                	pushq  $0x3a$/;"	l
ffff800000109e72	kernel.asm	/^ffff800000109e72:	e9 89 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e77	kernel.asm	/^ffff800000109e77 <vector59>:$/;"	l
ffff800000109e77	kernel.asm	/^ffff800000109e77:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e79	kernel.asm	/^ffff800000109e79:	6a 3b                	pushq  $0x3b$/;"	l
ffff800000109e7b	kernel.asm	/^ffff800000109e7b:	e9 80 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e80	kernel.asm	/^ffff800000109e80 <vector60>:$/;"	l
ffff800000109e80	kernel.asm	/^ffff800000109e80:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e82	kernel.asm	/^ffff800000109e82:	6a 3c                	pushq  $0x3c$/;"	l
ffff800000109e84	kernel.asm	/^ffff800000109e84:	e9 77 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e89	kernel.asm	/^ffff800000109e89 <vector61>:$/;"	l
ffff800000109e89	kernel.asm	/^ffff800000109e89:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e8b	kernel.asm	/^ffff800000109e8b:	6a 3d                	pushq  $0x3d$/;"	l
ffff800000109e8d	kernel.asm	/^ffff800000109e8d:	e9 6e f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e92	kernel.asm	/^ffff800000109e92 <vector62>:$/;"	l
ffff800000109e92	kernel.asm	/^ffff800000109e92:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e94	kernel.asm	/^ffff800000109e94:	6a 3e                	pushq  $0x3e$/;"	l
ffff800000109e96	kernel.asm	/^ffff800000109e96:	e9 65 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109e9b	kernel.asm	/^ffff800000109e9b <vector63>:$/;"	l
ffff800000109e9b	kernel.asm	/^ffff800000109e9b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e9d	kernel.asm	/^ffff800000109e9d:	6a 3f                	pushq  $0x3f$/;"	l
ffff800000109e9f	kernel.asm	/^ffff800000109e9f:	e9 5c f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ea4	kernel.asm	/^ffff800000109ea4 <vector64>:$/;"	l
ffff800000109ea4	kernel.asm	/^ffff800000109ea4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ea6	kernel.asm	/^ffff800000109ea6:	6a 40                	pushq  $0x40$/;"	l
ffff800000109ea8	kernel.asm	/^ffff800000109ea8:	e9 53 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ead	kernel.asm	/^ffff800000109ead <vector65>:$/;"	l
ffff800000109ead	kernel.asm	/^ffff800000109ead:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eaf	kernel.asm	/^ffff800000109eaf:	6a 41                	pushq  $0x41$/;"	l
ffff800000109eb1	kernel.asm	/^ffff800000109eb1:	e9 4a f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109eb6	kernel.asm	/^ffff800000109eb6 <vector66>:$/;"	l
ffff800000109eb6	kernel.asm	/^ffff800000109eb6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eb8	kernel.asm	/^ffff800000109eb8:	6a 42                	pushq  $0x42$/;"	l
ffff800000109eba	kernel.asm	/^ffff800000109eba:	e9 41 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ebf	kernel.asm	/^ffff800000109ebf <vector67>:$/;"	l
ffff800000109ebf	kernel.asm	/^ffff800000109ebf:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ec1	kernel.asm	/^ffff800000109ec1:	6a 43                	pushq  $0x43$/;"	l
ffff800000109ec3	kernel.asm	/^ffff800000109ec3:	e9 38 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ec8	kernel.asm	/^ffff800000109ec8 <vector68>:$/;"	l
ffff800000109ec8	kernel.asm	/^ffff800000109ec8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eca	kernel.asm	/^ffff800000109eca:	6a 44                	pushq  $0x44$/;"	l
ffff800000109ecc	kernel.asm	/^ffff800000109ecc:	e9 2f f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ed1	kernel.asm	/^ffff800000109ed1 <vector69>:$/;"	l
ffff800000109ed1	kernel.asm	/^ffff800000109ed1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ed3	kernel.asm	/^ffff800000109ed3:	6a 45                	pushq  $0x45$/;"	l
ffff800000109ed5	kernel.asm	/^ffff800000109ed5:	e9 26 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109eda	kernel.asm	/^ffff800000109eda <vector70>:$/;"	l
ffff800000109eda	kernel.asm	/^ffff800000109eda:	6a 00                	pushq  $0x0$/;"	l
ffff800000109edc	kernel.asm	/^ffff800000109edc:	6a 46                	pushq  $0x46$/;"	l
ffff800000109ede	kernel.asm	/^ffff800000109ede:	e9 1d f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ee3	kernel.asm	/^ffff800000109ee3 <vector71>:$/;"	l
ffff800000109ee3	kernel.asm	/^ffff800000109ee3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ee5	kernel.asm	/^ffff800000109ee5:	6a 47                	pushq  $0x47$/;"	l
ffff800000109ee7	kernel.asm	/^ffff800000109ee7:	e9 14 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109eec	kernel.asm	/^ffff800000109eec <vector72>:$/;"	l
ffff800000109eec	kernel.asm	/^ffff800000109eec:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eee	kernel.asm	/^ffff800000109eee:	6a 48                	pushq  $0x48$/;"	l
ffff800000109ef0	kernel.asm	/^ffff800000109ef0:	e9 0b f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ef5	kernel.asm	/^ffff800000109ef5 <vector73>:$/;"	l
ffff800000109ef5	kernel.asm	/^ffff800000109ef5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ef7	kernel.asm	/^ffff800000109ef7:	6a 49                	pushq  $0x49$/;"	l
ffff800000109ef9	kernel.asm	/^ffff800000109ef9:	e9 02 f4 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109efe	kernel.asm	/^ffff800000109efe <vector74>:$/;"	l
ffff800000109efe	kernel.asm	/^ffff800000109efe:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f00	kernel.asm	/^ffff800000109f00:	6a 4a                	pushq  $0x4a$/;"	l
ffff800000109f02	kernel.asm	/^ffff800000109f02:	e9 f9 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f07	kernel.asm	/^ffff800000109f07 <vector75>:$/;"	l
ffff800000109f07	kernel.asm	/^ffff800000109f07:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f09	kernel.asm	/^ffff800000109f09:	6a 4b                	pushq  $0x4b$/;"	l
ffff800000109f0b	kernel.asm	/^ffff800000109f0b:	e9 f0 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f10	kernel.asm	/^ffff800000109f10 <vector76>:$/;"	l
ffff800000109f10	kernel.asm	/^ffff800000109f10:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f12	kernel.asm	/^ffff800000109f12:	6a 4c                	pushq  $0x4c$/;"	l
ffff800000109f14	kernel.asm	/^ffff800000109f14:	e9 e7 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f19	kernel.asm	/^ffff800000109f19 <vector77>:$/;"	l
ffff800000109f19	kernel.asm	/^ffff800000109f19:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f1b	kernel.asm	/^ffff800000109f1b:	6a 4d                	pushq  $0x4d$/;"	l
ffff800000109f1d	kernel.asm	/^ffff800000109f1d:	e9 de f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f22	kernel.asm	/^ffff800000109f22 <vector78>:$/;"	l
ffff800000109f22	kernel.asm	/^ffff800000109f22:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f24	kernel.asm	/^ffff800000109f24:	6a 4e                	pushq  $0x4e$/;"	l
ffff800000109f26	kernel.asm	/^ffff800000109f26:	e9 d5 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f2b	kernel.asm	/^ffff800000109f2b <vector79>:$/;"	l
ffff800000109f2b	kernel.asm	/^ffff800000109f2b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f2d	kernel.asm	/^ffff800000109f2d:	6a 4f                	pushq  $0x4f$/;"	l
ffff800000109f2f	kernel.asm	/^ffff800000109f2f:	e9 cc f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f34	kernel.asm	/^ffff800000109f34 <vector80>:$/;"	l
ffff800000109f34	kernel.asm	/^ffff800000109f34:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f36	kernel.asm	/^ffff800000109f36:	6a 50                	pushq  $0x50$/;"	l
ffff800000109f38	kernel.asm	/^ffff800000109f38:	e9 c3 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f3d	kernel.asm	/^ffff800000109f3d <vector81>:$/;"	l
ffff800000109f3d	kernel.asm	/^ffff800000109f3d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f3f	kernel.asm	/^ffff800000109f3f:	6a 51                	pushq  $0x51$/;"	l
ffff800000109f41	kernel.asm	/^ffff800000109f41:	e9 ba f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f46	kernel.asm	/^ffff800000109f46 <vector82>:$/;"	l
ffff800000109f46	kernel.asm	/^ffff800000109f46:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f48	kernel.asm	/^ffff800000109f48:	6a 52                	pushq  $0x52$/;"	l
ffff800000109f4a	kernel.asm	/^ffff800000109f4a:	e9 b1 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f4f	kernel.asm	/^ffff800000109f4f <vector83>:$/;"	l
ffff800000109f4f	kernel.asm	/^ffff800000109f4f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f51	kernel.asm	/^ffff800000109f51:	6a 53                	pushq  $0x53$/;"	l
ffff800000109f53	kernel.asm	/^ffff800000109f53:	e9 a8 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f58	kernel.asm	/^ffff800000109f58 <vector84>:$/;"	l
ffff800000109f58	kernel.asm	/^ffff800000109f58:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f5a	kernel.asm	/^ffff800000109f5a:	6a 54                	pushq  $0x54$/;"	l
ffff800000109f5c	kernel.asm	/^ffff800000109f5c:	e9 9f f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f61	kernel.asm	/^ffff800000109f61 <vector85>:$/;"	l
ffff800000109f61	kernel.asm	/^ffff800000109f61:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f63	kernel.asm	/^ffff800000109f63:	6a 55                	pushq  $0x55$/;"	l
ffff800000109f65	kernel.asm	/^ffff800000109f65:	e9 96 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f6a	kernel.asm	/^ffff800000109f6a <vector86>:$/;"	l
ffff800000109f6a	kernel.asm	/^ffff800000109f6a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f6c	kernel.asm	/^ffff800000109f6c:	6a 56                	pushq  $0x56$/;"	l
ffff800000109f6e	kernel.asm	/^ffff800000109f6e:	e9 8d f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f73	kernel.asm	/^ffff800000109f73 <vector87>:$/;"	l
ffff800000109f73	kernel.asm	/^ffff800000109f73:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f75	kernel.asm	/^ffff800000109f75:	6a 57                	pushq  $0x57$/;"	l
ffff800000109f77	kernel.asm	/^ffff800000109f77:	e9 84 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f7c	kernel.asm	/^ffff800000109f7c <vector88>:$/;"	l
ffff800000109f7c	kernel.asm	/^ffff800000109f7c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f7e	kernel.asm	/^ffff800000109f7e:	6a 58                	pushq  $0x58$/;"	l
ffff800000109f80	kernel.asm	/^ffff800000109f80:	e9 7b f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f85	kernel.asm	/^ffff800000109f85 <vector89>:$/;"	l
ffff800000109f85	kernel.asm	/^ffff800000109f85:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f87	kernel.asm	/^ffff800000109f87:	6a 59                	pushq  $0x59$/;"	l
ffff800000109f89	kernel.asm	/^ffff800000109f89:	e9 72 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f8e	kernel.asm	/^ffff800000109f8e <vector90>:$/;"	l
ffff800000109f8e	kernel.asm	/^ffff800000109f8e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f90	kernel.asm	/^ffff800000109f90:	6a 5a                	pushq  $0x5a$/;"	l
ffff800000109f92	kernel.asm	/^ffff800000109f92:	e9 69 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109f97	kernel.asm	/^ffff800000109f97 <vector91>:$/;"	l
ffff800000109f97	kernel.asm	/^ffff800000109f97:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f99	kernel.asm	/^ffff800000109f99:	6a 5b                	pushq  $0x5b$/;"	l
ffff800000109f9b	kernel.asm	/^ffff800000109f9b:	e9 60 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fa0	kernel.asm	/^ffff800000109fa0 <vector92>:$/;"	l
ffff800000109fa0	kernel.asm	/^ffff800000109fa0:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fa2	kernel.asm	/^ffff800000109fa2:	6a 5c                	pushq  $0x5c$/;"	l
ffff800000109fa4	kernel.asm	/^ffff800000109fa4:	e9 57 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fa9	kernel.asm	/^ffff800000109fa9 <vector93>:$/;"	l
ffff800000109fa9	kernel.asm	/^ffff800000109fa9:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fab	kernel.asm	/^ffff800000109fab:	6a 5d                	pushq  $0x5d$/;"	l
ffff800000109fad	kernel.asm	/^ffff800000109fad:	e9 4e f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fb2	kernel.asm	/^ffff800000109fb2 <vector94>:$/;"	l
ffff800000109fb2	kernel.asm	/^ffff800000109fb2:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fb4	kernel.asm	/^ffff800000109fb4:	6a 5e                	pushq  $0x5e$/;"	l
ffff800000109fb6	kernel.asm	/^ffff800000109fb6:	e9 45 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fbb	kernel.asm	/^ffff800000109fbb <vector95>:$/;"	l
ffff800000109fbb	kernel.asm	/^ffff800000109fbb:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fbd	kernel.asm	/^ffff800000109fbd:	6a 5f                	pushq  $0x5f$/;"	l
ffff800000109fbf	kernel.asm	/^ffff800000109fbf:	e9 3c f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fc4	kernel.asm	/^ffff800000109fc4 <vector96>:$/;"	l
ffff800000109fc4	kernel.asm	/^ffff800000109fc4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fc6	kernel.asm	/^ffff800000109fc6:	6a 60                	pushq  $0x60$/;"	l
ffff800000109fc8	kernel.asm	/^ffff800000109fc8:	e9 33 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fcd	kernel.asm	/^ffff800000109fcd <vector97>:$/;"	l
ffff800000109fcd	kernel.asm	/^ffff800000109fcd:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fcf	kernel.asm	/^ffff800000109fcf:	6a 61                	pushq  $0x61$/;"	l
ffff800000109fd1	kernel.asm	/^ffff800000109fd1:	e9 2a f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fd6	kernel.asm	/^ffff800000109fd6 <vector98>:$/;"	l
ffff800000109fd6	kernel.asm	/^ffff800000109fd6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fd8	kernel.asm	/^ffff800000109fd8:	6a 62                	pushq  $0x62$/;"	l
ffff800000109fda	kernel.asm	/^ffff800000109fda:	e9 21 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fdf	kernel.asm	/^ffff800000109fdf <vector99>:$/;"	l
ffff800000109fdf	kernel.asm	/^ffff800000109fdf:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fe1	kernel.asm	/^ffff800000109fe1:	6a 63                	pushq  $0x63$/;"	l
ffff800000109fe3	kernel.asm	/^ffff800000109fe3:	e9 18 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109fe8	kernel.asm	/^ffff800000109fe8 <vector100>:$/;"	l
ffff800000109fe8	kernel.asm	/^ffff800000109fe8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fea	kernel.asm	/^ffff800000109fea:	6a 64                	pushq  $0x64$/;"	l
ffff800000109fec	kernel.asm	/^ffff800000109fec:	e9 0f f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ff1	kernel.asm	/^ffff800000109ff1 <vector101>:$/;"	l
ffff800000109ff1	kernel.asm	/^ffff800000109ff1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ff3	kernel.asm	/^ffff800000109ff3:	6a 65                	pushq  $0x65$/;"	l
ffff800000109ff5	kernel.asm	/^ffff800000109ff5:	e9 06 f3 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff800000109ffa	kernel.asm	/^ffff800000109ffa <vector102>:$/;"	l
ffff800000109ffa	kernel.asm	/^ffff800000109ffa:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ffc	kernel.asm	/^ffff800000109ffc:	6a 66                	pushq  $0x66$/;"	l
ffff800000109ffe	kernel.asm	/^ffff800000109ffe:	e9 fd f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a003	kernel.asm	/^ffff80000010a003 <vector103>:$/;"	l
ffff80000010a003	kernel.asm	/^ffff80000010a003:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a005	kernel.asm	/^ffff80000010a005:	6a 67                	pushq  $0x67$/;"	l
ffff80000010a007	kernel.asm	/^ffff80000010a007:	e9 f4 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a00c	kernel.asm	/^ffff80000010a00c <vector104>:$/;"	l
ffff80000010a00c	kernel.asm	/^ffff80000010a00c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a00e	kernel.asm	/^ffff80000010a00e:	6a 68                	pushq  $0x68$/;"	l
ffff80000010a010	kernel.asm	/^ffff80000010a010:	e9 eb f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a015	kernel.asm	/^ffff80000010a015 <vector105>:$/;"	l
ffff80000010a015	kernel.asm	/^ffff80000010a015:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a017	kernel.asm	/^ffff80000010a017:	6a 69                	pushq  $0x69$/;"	l
ffff80000010a019	kernel.asm	/^ffff80000010a019:	e9 e2 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a01e	kernel.asm	/^ffff80000010a01e <vector106>:$/;"	l
ffff80000010a01e	kernel.asm	/^ffff80000010a01e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a020	kernel.asm	/^ffff80000010a020:	6a 6a                	pushq  $0x6a$/;"	l
ffff80000010a022	kernel.asm	/^ffff80000010a022:	e9 d9 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a027	kernel.asm	/^ffff80000010a027 <vector107>:$/;"	l
ffff80000010a027	kernel.asm	/^ffff80000010a027:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a029	kernel.asm	/^ffff80000010a029:	6a 6b                	pushq  $0x6b$/;"	l
ffff80000010a02b	kernel.asm	/^ffff80000010a02b:	e9 d0 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a030	kernel.asm	/^ffff80000010a030 <vector108>:$/;"	l
ffff80000010a030	kernel.asm	/^ffff80000010a030:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a032	kernel.asm	/^ffff80000010a032:	6a 6c                	pushq  $0x6c$/;"	l
ffff80000010a034	kernel.asm	/^ffff80000010a034:	e9 c7 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a039	kernel.asm	/^ffff80000010a039 <vector109>:$/;"	l
ffff80000010a039	kernel.asm	/^ffff80000010a039:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a03b	kernel.asm	/^ffff80000010a03b:	6a 6d                	pushq  $0x6d$/;"	l
ffff80000010a03d	kernel.asm	/^ffff80000010a03d:	e9 be f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a042	kernel.asm	/^ffff80000010a042 <vector110>:$/;"	l
ffff80000010a042	kernel.asm	/^ffff80000010a042:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a044	kernel.asm	/^ffff80000010a044:	6a 6e                	pushq  $0x6e$/;"	l
ffff80000010a046	kernel.asm	/^ffff80000010a046:	e9 b5 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a04b	kernel.asm	/^ffff80000010a04b <vector111>:$/;"	l
ffff80000010a04b	kernel.asm	/^ffff80000010a04b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a04d	kernel.asm	/^ffff80000010a04d:	6a 6f                	pushq  $0x6f$/;"	l
ffff80000010a04f	kernel.asm	/^ffff80000010a04f:	e9 ac f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a054	kernel.asm	/^ffff80000010a054 <vector112>:$/;"	l
ffff80000010a054	kernel.asm	/^ffff80000010a054:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a056	kernel.asm	/^ffff80000010a056:	6a 70                	pushq  $0x70$/;"	l
ffff80000010a058	kernel.asm	/^ffff80000010a058:	e9 a3 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a05d	kernel.asm	/^ffff80000010a05d <vector113>:$/;"	l
ffff80000010a05d	kernel.asm	/^ffff80000010a05d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a05f	kernel.asm	/^ffff80000010a05f:	6a 71                	pushq  $0x71$/;"	l
ffff80000010a061	kernel.asm	/^ffff80000010a061:	e9 9a f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a066	kernel.asm	/^ffff80000010a066 <vector114>:$/;"	l
ffff80000010a066	kernel.asm	/^ffff80000010a066:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a068	kernel.asm	/^ffff80000010a068:	6a 72                	pushq  $0x72$/;"	l
ffff80000010a06a	kernel.asm	/^ffff80000010a06a:	e9 91 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a06f	kernel.asm	/^ffff80000010a06f <vector115>:$/;"	l
ffff80000010a06f	kernel.asm	/^ffff80000010a06f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a071	kernel.asm	/^ffff80000010a071:	6a 73                	pushq  $0x73$/;"	l
ffff80000010a073	kernel.asm	/^ffff80000010a073:	e9 88 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a078	kernel.asm	/^ffff80000010a078 <vector116>:$/;"	l
ffff80000010a078	kernel.asm	/^ffff80000010a078:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a07a	kernel.asm	/^ffff80000010a07a:	6a 74                	pushq  $0x74$/;"	l
ffff80000010a07c	kernel.asm	/^ffff80000010a07c:	e9 7f f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a081	kernel.asm	/^ffff80000010a081 <vector117>:$/;"	l
ffff80000010a081	kernel.asm	/^ffff80000010a081:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a083	kernel.asm	/^ffff80000010a083:	6a 75                	pushq  $0x75$/;"	l
ffff80000010a085	kernel.asm	/^ffff80000010a085:	e9 76 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a08a	kernel.asm	/^ffff80000010a08a <vector118>:$/;"	l
ffff80000010a08a	kernel.asm	/^ffff80000010a08a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a08c	kernel.asm	/^ffff80000010a08c:	6a 76                	pushq  $0x76$/;"	l
ffff80000010a08e	kernel.asm	/^ffff80000010a08e:	e9 6d f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a093	kernel.asm	/^ffff80000010a093 <vector119>:$/;"	l
ffff80000010a093	kernel.asm	/^ffff80000010a093:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a095	kernel.asm	/^ffff80000010a095:	6a 77                	pushq  $0x77$/;"	l
ffff80000010a097	kernel.asm	/^ffff80000010a097:	e9 64 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a09c	kernel.asm	/^ffff80000010a09c <vector120>:$/;"	l
ffff80000010a09c	kernel.asm	/^ffff80000010a09c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a09e	kernel.asm	/^ffff80000010a09e:	6a 78                	pushq  $0x78$/;"	l
ffff80000010a0a0	kernel.asm	/^ffff80000010a0a0:	e9 5b f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0a5	kernel.asm	/^ffff80000010a0a5 <vector121>:$/;"	l
ffff80000010a0a5	kernel.asm	/^ffff80000010a0a5:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0a7	kernel.asm	/^ffff80000010a0a7:	6a 79                	pushq  $0x79$/;"	l
ffff80000010a0a9	kernel.asm	/^ffff80000010a0a9:	e9 52 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0ae	kernel.asm	/^ffff80000010a0ae <vector122>:$/;"	l
ffff80000010a0ae	kernel.asm	/^ffff80000010a0ae:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0b0	kernel.asm	/^ffff80000010a0b0:	6a 7a                	pushq  $0x7a$/;"	l
ffff80000010a0b2	kernel.asm	/^ffff80000010a0b2:	e9 49 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0b7	kernel.asm	/^ffff80000010a0b7 <vector123>:$/;"	l
ffff80000010a0b7	kernel.asm	/^ffff80000010a0b7:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0b9	kernel.asm	/^ffff80000010a0b9:	6a 7b                	pushq  $0x7b$/;"	l
ffff80000010a0bb	kernel.asm	/^ffff80000010a0bb:	e9 40 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0c0	kernel.asm	/^ffff80000010a0c0 <vector124>:$/;"	l
ffff80000010a0c0	kernel.asm	/^ffff80000010a0c0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0c2	kernel.asm	/^ffff80000010a0c2:	6a 7c                	pushq  $0x7c$/;"	l
ffff80000010a0c4	kernel.asm	/^ffff80000010a0c4:	e9 37 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0c9	kernel.asm	/^ffff80000010a0c9 <vector125>:$/;"	l
ffff80000010a0c9	kernel.asm	/^ffff80000010a0c9:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0cb	kernel.asm	/^ffff80000010a0cb:	6a 7d                	pushq  $0x7d$/;"	l
ffff80000010a0cd	kernel.asm	/^ffff80000010a0cd:	e9 2e f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0d2	kernel.asm	/^ffff80000010a0d2 <vector126>:$/;"	l
ffff80000010a0d2	kernel.asm	/^ffff80000010a0d2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0d4	kernel.asm	/^ffff80000010a0d4:	6a 7e                	pushq  $0x7e$/;"	l
ffff80000010a0d6	kernel.asm	/^ffff80000010a0d6:	e9 25 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0db	kernel.asm	/^ffff80000010a0db <vector127>:$/;"	l
ffff80000010a0db	kernel.asm	/^ffff80000010a0db:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0dd	kernel.asm	/^ffff80000010a0dd:	6a 7f                	pushq  $0x7f$/;"	l
ffff80000010a0df	kernel.asm	/^ffff80000010a0df:	e9 1c f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0e4	kernel.asm	/^ffff80000010a0e4 <vector128>:$/;"	l
ffff80000010a0e4	kernel.asm	/^ffff80000010a0e4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0e6	kernel.asm	/^ffff80000010a0e6:	68 80 00 00 00       	pushq  $0x80$/;"	l
ffff80000010a0eb	kernel.asm	/^ffff80000010a0eb:	e9 10 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0f0	kernel.asm	/^ffff80000010a0f0 <vector129>:$/;"	l
ffff80000010a0f0	kernel.asm	/^ffff80000010a0f0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0f2	kernel.asm	/^ffff80000010a0f2:	68 81 00 00 00       	pushq  $0x81$/;"	l
ffff80000010a0f7	kernel.asm	/^ffff80000010a0f7:	e9 04 f2 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a0fc	kernel.asm	/^ffff80000010a0fc <vector130>:$/;"	l
ffff80000010a0fc	kernel.asm	/^ffff80000010a0fc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0fe	kernel.asm	/^ffff80000010a0fe:	68 82 00 00 00       	pushq  $0x82$/;"	l
ffff80000010a103	kernel.asm	/^ffff80000010a103:	e9 f8 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a108	kernel.asm	/^ffff80000010a108 <vector131>:$/;"	l
ffff80000010a108	kernel.asm	/^ffff80000010a108:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a10a	kernel.asm	/^ffff80000010a10a:	68 83 00 00 00       	pushq  $0x83$/;"	l
ffff80000010a10f	kernel.asm	/^ffff80000010a10f:	e9 ec f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a114	kernel.asm	/^ffff80000010a114 <vector132>:$/;"	l
ffff80000010a114	kernel.asm	/^ffff80000010a114:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a116	kernel.asm	/^ffff80000010a116:	68 84 00 00 00       	pushq  $0x84$/;"	l
ffff80000010a11b	kernel.asm	/^ffff80000010a11b:	e9 e0 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a120	kernel.asm	/^ffff80000010a120 <vector133>:$/;"	l
ffff80000010a120	kernel.asm	/^ffff80000010a120:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a122	kernel.asm	/^ffff80000010a122:	68 85 00 00 00       	pushq  $0x85$/;"	l
ffff80000010a127	kernel.asm	/^ffff80000010a127:	e9 d4 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a12c	kernel.asm	/^ffff80000010a12c <vector134>:$/;"	l
ffff80000010a12c	kernel.asm	/^ffff80000010a12c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a12e	kernel.asm	/^ffff80000010a12e:	68 86 00 00 00       	pushq  $0x86$/;"	l
ffff80000010a133	kernel.asm	/^ffff80000010a133:	e9 c8 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a138	kernel.asm	/^ffff80000010a138 <vector135>:$/;"	l
ffff80000010a138	kernel.asm	/^ffff80000010a138:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a13a	kernel.asm	/^ffff80000010a13a:	68 87 00 00 00       	pushq  $0x87$/;"	l
ffff80000010a13f	kernel.asm	/^ffff80000010a13f:	e9 bc f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a144	kernel.asm	/^ffff80000010a144 <vector136>:$/;"	l
ffff80000010a144	kernel.asm	/^ffff80000010a144:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a146	kernel.asm	/^ffff80000010a146:	68 88 00 00 00       	pushq  $0x88$/;"	l
ffff80000010a14b	kernel.asm	/^ffff80000010a14b:	e9 b0 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a150	kernel.asm	/^ffff80000010a150 <vector137>:$/;"	l
ffff80000010a150	kernel.asm	/^ffff80000010a150:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a152	kernel.asm	/^ffff80000010a152:	68 89 00 00 00       	pushq  $0x89$/;"	l
ffff80000010a157	kernel.asm	/^ffff80000010a157:	e9 a4 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a15c	kernel.asm	/^ffff80000010a15c <vector138>:$/;"	l
ffff80000010a15c	kernel.asm	/^ffff80000010a15c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a15e	kernel.asm	/^ffff80000010a15e:	68 8a 00 00 00       	pushq  $0x8a$/;"	l
ffff80000010a163	kernel.asm	/^ffff80000010a163:	e9 98 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a168	kernel.asm	/^ffff80000010a168 <vector139>:$/;"	l
ffff80000010a168	kernel.asm	/^ffff80000010a168:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a16a	kernel.asm	/^ffff80000010a16a:	68 8b 00 00 00       	pushq  $0x8b$/;"	l
ffff80000010a16f	kernel.asm	/^ffff80000010a16f:	e9 8c f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a174	kernel.asm	/^ffff80000010a174 <vector140>:$/;"	l
ffff80000010a174	kernel.asm	/^ffff80000010a174:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a176	kernel.asm	/^ffff80000010a176:	68 8c 00 00 00       	pushq  $0x8c$/;"	l
ffff80000010a17b	kernel.asm	/^ffff80000010a17b:	e9 80 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a180	kernel.asm	/^ffff80000010a180 <vector141>:$/;"	l
ffff80000010a180	kernel.asm	/^ffff80000010a180:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a182	kernel.asm	/^ffff80000010a182:	68 8d 00 00 00       	pushq  $0x8d$/;"	l
ffff80000010a187	kernel.asm	/^ffff80000010a187:	e9 74 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a18c	kernel.asm	/^ffff80000010a18c <vector142>:$/;"	l
ffff80000010a18c	kernel.asm	/^ffff80000010a18c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a18e	kernel.asm	/^ffff80000010a18e:	68 8e 00 00 00       	pushq  $0x8e$/;"	l
ffff80000010a193	kernel.asm	/^ffff80000010a193:	e9 68 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a198	kernel.asm	/^ffff80000010a198 <vector143>:$/;"	l
ffff80000010a198	kernel.asm	/^ffff80000010a198:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a19a	kernel.asm	/^ffff80000010a19a:	68 8f 00 00 00       	pushq  $0x8f$/;"	l
ffff80000010a19f	kernel.asm	/^ffff80000010a19f:	e9 5c f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1a4	kernel.asm	/^ffff80000010a1a4 <vector144>:$/;"	l
ffff80000010a1a4	kernel.asm	/^ffff80000010a1a4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1a6	kernel.asm	/^ffff80000010a1a6:	68 90 00 00 00       	pushq  $0x90$/;"	l
ffff80000010a1ab	kernel.asm	/^ffff80000010a1ab:	e9 50 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1b0	kernel.asm	/^ffff80000010a1b0 <vector145>:$/;"	l
ffff80000010a1b0	kernel.asm	/^ffff80000010a1b0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1b2	kernel.asm	/^ffff80000010a1b2:	68 91 00 00 00       	pushq  $0x91$/;"	l
ffff80000010a1b7	kernel.asm	/^ffff80000010a1b7:	e9 44 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1bc	kernel.asm	/^ffff80000010a1bc <vector146>:$/;"	l
ffff80000010a1bc	kernel.asm	/^ffff80000010a1bc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1be	kernel.asm	/^ffff80000010a1be:	68 92 00 00 00       	pushq  $0x92$/;"	l
ffff80000010a1c3	kernel.asm	/^ffff80000010a1c3:	e9 38 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1c8	kernel.asm	/^ffff80000010a1c8 <vector147>:$/;"	l
ffff80000010a1c8	kernel.asm	/^ffff80000010a1c8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1ca	kernel.asm	/^ffff80000010a1ca:	68 93 00 00 00       	pushq  $0x93$/;"	l
ffff80000010a1cf	kernel.asm	/^ffff80000010a1cf:	e9 2c f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1d4	kernel.asm	/^ffff80000010a1d4 <vector148>:$/;"	l
ffff80000010a1d4	kernel.asm	/^ffff80000010a1d4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1d6	kernel.asm	/^ffff80000010a1d6:	68 94 00 00 00       	pushq  $0x94$/;"	l
ffff80000010a1db	kernel.asm	/^ffff80000010a1db:	e9 20 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1e0	kernel.asm	/^ffff80000010a1e0 <vector149>:$/;"	l
ffff80000010a1e0	kernel.asm	/^ffff80000010a1e0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1e2	kernel.asm	/^ffff80000010a1e2:	68 95 00 00 00       	pushq  $0x95$/;"	l
ffff80000010a1e7	kernel.asm	/^ffff80000010a1e7:	e9 14 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1ec	kernel.asm	/^ffff80000010a1ec <vector150>:$/;"	l
ffff80000010a1ec	kernel.asm	/^ffff80000010a1ec:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1ee	kernel.asm	/^ffff80000010a1ee:	68 96 00 00 00       	pushq  $0x96$/;"	l
ffff80000010a1f3	kernel.asm	/^ffff80000010a1f3:	e9 08 f1 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a1f8	kernel.asm	/^ffff80000010a1f8 <vector151>:$/;"	l
ffff80000010a1f8	kernel.asm	/^ffff80000010a1f8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1fa	kernel.asm	/^ffff80000010a1fa:	68 97 00 00 00       	pushq  $0x97$/;"	l
ffff80000010a1ff	kernel.asm	/^ffff80000010a1ff:	e9 fc f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a204	kernel.asm	/^ffff80000010a204 <vector152>:$/;"	l
ffff80000010a204	kernel.asm	/^ffff80000010a204:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a206	kernel.asm	/^ffff80000010a206:	68 98 00 00 00       	pushq  $0x98$/;"	l
ffff80000010a20b	kernel.asm	/^ffff80000010a20b:	e9 f0 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a210	kernel.asm	/^ffff80000010a210 <vector153>:$/;"	l
ffff80000010a210	kernel.asm	/^ffff80000010a210:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a212	kernel.asm	/^ffff80000010a212:	68 99 00 00 00       	pushq  $0x99$/;"	l
ffff80000010a217	kernel.asm	/^ffff80000010a217:	e9 e4 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a21c	kernel.asm	/^ffff80000010a21c <vector154>:$/;"	l
ffff80000010a21c	kernel.asm	/^ffff80000010a21c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a21e	kernel.asm	/^ffff80000010a21e:	68 9a 00 00 00       	pushq  $0x9a$/;"	l
ffff80000010a223	kernel.asm	/^ffff80000010a223:	e9 d8 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a228	kernel.asm	/^ffff80000010a228 <vector155>:$/;"	l
ffff80000010a228	kernel.asm	/^ffff80000010a228:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a22a	kernel.asm	/^ffff80000010a22a:	68 9b 00 00 00       	pushq  $0x9b$/;"	l
ffff80000010a22f	kernel.asm	/^ffff80000010a22f:	e9 cc f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a234	kernel.asm	/^ffff80000010a234 <vector156>:$/;"	l
ffff80000010a234	kernel.asm	/^ffff80000010a234:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a236	kernel.asm	/^ffff80000010a236:	68 9c 00 00 00       	pushq  $0x9c$/;"	l
ffff80000010a23b	kernel.asm	/^ffff80000010a23b:	e9 c0 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a240	kernel.asm	/^ffff80000010a240 <vector157>:$/;"	l
ffff80000010a240	kernel.asm	/^ffff80000010a240:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a242	kernel.asm	/^ffff80000010a242:	68 9d 00 00 00       	pushq  $0x9d$/;"	l
ffff80000010a247	kernel.asm	/^ffff80000010a247:	e9 b4 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a24c	kernel.asm	/^ffff80000010a24c <vector158>:$/;"	l
ffff80000010a24c	kernel.asm	/^ffff80000010a24c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a24e	kernel.asm	/^ffff80000010a24e:	68 9e 00 00 00       	pushq  $0x9e$/;"	l
ffff80000010a253	kernel.asm	/^ffff80000010a253:	e9 a8 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a258	kernel.asm	/^ffff80000010a258 <vector159>:$/;"	l
ffff80000010a258	kernel.asm	/^ffff80000010a258:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a25a	kernel.asm	/^ffff80000010a25a:	68 9f 00 00 00       	pushq  $0x9f$/;"	l
ffff80000010a25f	kernel.asm	/^ffff80000010a25f:	e9 9c f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a264	kernel.asm	/^ffff80000010a264 <vector160>:$/;"	l
ffff80000010a264	kernel.asm	/^ffff80000010a264:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a266	kernel.asm	/^ffff80000010a266:	68 a0 00 00 00       	pushq  $0xa0$/;"	l
ffff80000010a26b	kernel.asm	/^ffff80000010a26b:	e9 90 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a270	kernel.asm	/^ffff80000010a270 <vector161>:$/;"	l
ffff80000010a270	kernel.asm	/^ffff80000010a270:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a272	kernel.asm	/^ffff80000010a272:	68 a1 00 00 00       	pushq  $0xa1$/;"	l
ffff80000010a277	kernel.asm	/^ffff80000010a277:	e9 84 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a27c	kernel.asm	/^ffff80000010a27c <vector162>:$/;"	l
ffff80000010a27c	kernel.asm	/^ffff80000010a27c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a27e	kernel.asm	/^ffff80000010a27e:	68 a2 00 00 00       	pushq  $0xa2$/;"	l
ffff80000010a283	kernel.asm	/^ffff80000010a283:	e9 78 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a288	kernel.asm	/^ffff80000010a288 <vector163>:$/;"	l
ffff80000010a288	kernel.asm	/^ffff80000010a288:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a28a	kernel.asm	/^ffff80000010a28a:	68 a3 00 00 00       	pushq  $0xa3$/;"	l
ffff80000010a28f	kernel.asm	/^ffff80000010a28f:	e9 6c f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a294	kernel.asm	/^ffff80000010a294 <vector164>:$/;"	l
ffff80000010a294	kernel.asm	/^ffff80000010a294:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a296	kernel.asm	/^ffff80000010a296:	68 a4 00 00 00       	pushq  $0xa4$/;"	l
ffff80000010a29b	kernel.asm	/^ffff80000010a29b:	e9 60 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2a0	kernel.asm	/^ffff80000010a2a0 <vector165>:$/;"	l
ffff80000010a2a0	kernel.asm	/^ffff80000010a2a0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2a2	kernel.asm	/^ffff80000010a2a2:	68 a5 00 00 00       	pushq  $0xa5$/;"	l
ffff80000010a2a7	kernel.asm	/^ffff80000010a2a7:	e9 54 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2ac	kernel.asm	/^ffff80000010a2ac <vector166>:$/;"	l
ffff80000010a2ac	kernel.asm	/^ffff80000010a2ac:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ae	kernel.asm	/^ffff80000010a2ae:	68 a6 00 00 00       	pushq  $0xa6$/;"	l
ffff80000010a2b3	kernel.asm	/^ffff80000010a2b3:	e9 48 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2b8	kernel.asm	/^ffff80000010a2b8 <vector167>:$/;"	l
ffff80000010a2b8	kernel.asm	/^ffff80000010a2b8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ba	kernel.asm	/^ffff80000010a2ba:	68 a7 00 00 00       	pushq  $0xa7$/;"	l
ffff80000010a2bf	kernel.asm	/^ffff80000010a2bf:	e9 3c f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2c4	kernel.asm	/^ffff80000010a2c4 <vector168>:$/;"	l
ffff80000010a2c4	kernel.asm	/^ffff80000010a2c4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2c6	kernel.asm	/^ffff80000010a2c6:	68 a8 00 00 00       	pushq  $0xa8$/;"	l
ffff80000010a2cb	kernel.asm	/^ffff80000010a2cb:	e9 30 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2d0	kernel.asm	/^ffff80000010a2d0 <vector169>:$/;"	l
ffff80000010a2d0	kernel.asm	/^ffff80000010a2d0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2d2	kernel.asm	/^ffff80000010a2d2:	68 a9 00 00 00       	pushq  $0xa9$/;"	l
ffff80000010a2d7	kernel.asm	/^ffff80000010a2d7:	e9 24 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2dc	kernel.asm	/^ffff80000010a2dc <vector170>:$/;"	l
ffff80000010a2dc	kernel.asm	/^ffff80000010a2dc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2de	kernel.asm	/^ffff80000010a2de:	68 aa 00 00 00       	pushq  $0xaa$/;"	l
ffff80000010a2e3	kernel.asm	/^ffff80000010a2e3:	e9 18 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2e8	kernel.asm	/^ffff80000010a2e8 <vector171>:$/;"	l
ffff80000010a2e8	kernel.asm	/^ffff80000010a2e8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ea	kernel.asm	/^ffff80000010a2ea:	68 ab 00 00 00       	pushq  $0xab$/;"	l
ffff80000010a2ef	kernel.asm	/^ffff80000010a2ef:	e9 0c f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a2f4	kernel.asm	/^ffff80000010a2f4 <vector172>:$/;"	l
ffff80000010a2f4	kernel.asm	/^ffff80000010a2f4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2f6	kernel.asm	/^ffff80000010a2f6:	68 ac 00 00 00       	pushq  $0xac$/;"	l
ffff80000010a2fb	kernel.asm	/^ffff80000010a2fb:	e9 00 f0 ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a300	kernel.asm	/^ffff80000010a300 <vector173>:$/;"	l
ffff80000010a300	kernel.asm	/^ffff80000010a300:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a302	kernel.asm	/^ffff80000010a302:	68 ad 00 00 00       	pushq  $0xad$/;"	l
ffff80000010a307	kernel.asm	/^ffff80000010a307:	e9 f4 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a30c	kernel.asm	/^ffff80000010a30c <vector174>:$/;"	l
ffff80000010a30c	kernel.asm	/^ffff80000010a30c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a30e	kernel.asm	/^ffff80000010a30e:	68 ae 00 00 00       	pushq  $0xae$/;"	l
ffff80000010a313	kernel.asm	/^ffff80000010a313:	e9 e8 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a318	kernel.asm	/^ffff80000010a318 <vector175>:$/;"	l
ffff80000010a318	kernel.asm	/^ffff80000010a318:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a31a	kernel.asm	/^ffff80000010a31a:	68 af 00 00 00       	pushq  $0xaf$/;"	l
ffff80000010a31f	kernel.asm	/^ffff80000010a31f:	e9 dc ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a324	kernel.asm	/^ffff80000010a324 <vector176>:$/;"	l
ffff80000010a324	kernel.asm	/^ffff80000010a324:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a326	kernel.asm	/^ffff80000010a326:	68 b0 00 00 00       	pushq  $0xb0$/;"	l
ffff80000010a32b	kernel.asm	/^ffff80000010a32b:	e9 d0 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a330	kernel.asm	/^ffff80000010a330 <vector177>:$/;"	l
ffff80000010a330	kernel.asm	/^ffff80000010a330:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a332	kernel.asm	/^ffff80000010a332:	68 b1 00 00 00       	pushq  $0xb1$/;"	l
ffff80000010a337	kernel.asm	/^ffff80000010a337:	e9 c4 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a33c	kernel.asm	/^ffff80000010a33c <vector178>:$/;"	l
ffff80000010a33c	kernel.asm	/^ffff80000010a33c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a33e	kernel.asm	/^ffff80000010a33e:	68 b2 00 00 00       	pushq  $0xb2$/;"	l
ffff80000010a343	kernel.asm	/^ffff80000010a343:	e9 b8 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a348	kernel.asm	/^ffff80000010a348 <vector179>:$/;"	l
ffff80000010a348	kernel.asm	/^ffff80000010a348:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a34a	kernel.asm	/^ffff80000010a34a:	68 b3 00 00 00       	pushq  $0xb3$/;"	l
ffff80000010a34f	kernel.asm	/^ffff80000010a34f:	e9 ac ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a354	kernel.asm	/^ffff80000010a354 <vector180>:$/;"	l
ffff80000010a354	kernel.asm	/^ffff80000010a354:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a356	kernel.asm	/^ffff80000010a356:	68 b4 00 00 00       	pushq  $0xb4$/;"	l
ffff80000010a35b	kernel.asm	/^ffff80000010a35b:	e9 a0 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a360	kernel.asm	/^ffff80000010a360 <vector181>:$/;"	l
ffff80000010a360	kernel.asm	/^ffff80000010a360:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a362	kernel.asm	/^ffff80000010a362:	68 b5 00 00 00       	pushq  $0xb5$/;"	l
ffff80000010a367	kernel.asm	/^ffff80000010a367:	e9 94 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a36c	kernel.asm	/^ffff80000010a36c <vector182>:$/;"	l
ffff80000010a36c	kernel.asm	/^ffff80000010a36c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a36e	kernel.asm	/^ffff80000010a36e:	68 b6 00 00 00       	pushq  $0xb6$/;"	l
ffff80000010a373	kernel.asm	/^ffff80000010a373:	e9 88 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a378	kernel.asm	/^ffff80000010a378 <vector183>:$/;"	l
ffff80000010a378	kernel.asm	/^ffff80000010a378:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a37a	kernel.asm	/^ffff80000010a37a:	68 b7 00 00 00       	pushq  $0xb7$/;"	l
ffff80000010a37f	kernel.asm	/^ffff80000010a37f:	e9 7c ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a384	kernel.asm	/^ffff80000010a384 <vector184>:$/;"	l
ffff80000010a384	kernel.asm	/^ffff80000010a384:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a386	kernel.asm	/^ffff80000010a386:	68 b8 00 00 00       	pushq  $0xb8$/;"	l
ffff80000010a38b	kernel.asm	/^ffff80000010a38b:	e9 70 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a390	kernel.asm	/^ffff80000010a390 <vector185>:$/;"	l
ffff80000010a390	kernel.asm	/^ffff80000010a390:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a392	kernel.asm	/^ffff80000010a392:	68 b9 00 00 00       	pushq  $0xb9$/;"	l
ffff80000010a397	kernel.asm	/^ffff80000010a397:	e9 64 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a39c	kernel.asm	/^ffff80000010a39c <vector186>:$/;"	l
ffff80000010a39c	kernel.asm	/^ffff80000010a39c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a39e	kernel.asm	/^ffff80000010a39e:	68 ba 00 00 00       	pushq  $0xba$/;"	l
ffff80000010a3a3	kernel.asm	/^ffff80000010a3a3:	e9 58 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3a8	kernel.asm	/^ffff80000010a3a8 <vector187>:$/;"	l
ffff80000010a3a8	kernel.asm	/^ffff80000010a3a8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3aa	kernel.asm	/^ffff80000010a3aa:	68 bb 00 00 00       	pushq  $0xbb$/;"	l
ffff80000010a3af	kernel.asm	/^ffff80000010a3af:	e9 4c ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3b4	kernel.asm	/^ffff80000010a3b4 <vector188>:$/;"	l
ffff80000010a3b4	kernel.asm	/^ffff80000010a3b4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3b6	kernel.asm	/^ffff80000010a3b6:	68 bc 00 00 00       	pushq  $0xbc$/;"	l
ffff80000010a3bb	kernel.asm	/^ffff80000010a3bb:	e9 40 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3c0	kernel.asm	/^ffff80000010a3c0 <vector189>:$/;"	l
ffff80000010a3c0	kernel.asm	/^ffff80000010a3c0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3c2	kernel.asm	/^ffff80000010a3c2:	68 bd 00 00 00       	pushq  $0xbd$/;"	l
ffff80000010a3c7	kernel.asm	/^ffff80000010a3c7:	e9 34 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3cc	kernel.asm	/^ffff80000010a3cc <vector190>:$/;"	l
ffff80000010a3cc	kernel.asm	/^ffff80000010a3cc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3ce	kernel.asm	/^ffff80000010a3ce:	68 be 00 00 00       	pushq  $0xbe$/;"	l
ffff80000010a3d3	kernel.asm	/^ffff80000010a3d3:	e9 28 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3d8	kernel.asm	/^ffff80000010a3d8 <vector191>:$/;"	l
ffff80000010a3d8	kernel.asm	/^ffff80000010a3d8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3da	kernel.asm	/^ffff80000010a3da:	68 bf 00 00 00       	pushq  $0xbf$/;"	l
ffff80000010a3df	kernel.asm	/^ffff80000010a3df:	e9 1c ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3e4	kernel.asm	/^ffff80000010a3e4 <vector192>:$/;"	l
ffff80000010a3e4	kernel.asm	/^ffff80000010a3e4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3e6	kernel.asm	/^ffff80000010a3e6:	68 c0 00 00 00       	pushq  $0xc0$/;"	l
ffff80000010a3eb	kernel.asm	/^ffff80000010a3eb:	e9 10 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3f0	kernel.asm	/^ffff80000010a3f0 <vector193>:$/;"	l
ffff80000010a3f0	kernel.asm	/^ffff80000010a3f0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3f2	kernel.asm	/^ffff80000010a3f2:	68 c1 00 00 00       	pushq  $0xc1$/;"	l
ffff80000010a3f7	kernel.asm	/^ffff80000010a3f7:	e9 04 ef ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a3fc	kernel.asm	/^ffff80000010a3fc <vector194>:$/;"	l
ffff80000010a3fc	kernel.asm	/^ffff80000010a3fc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3fe	kernel.asm	/^ffff80000010a3fe:	68 c2 00 00 00       	pushq  $0xc2$/;"	l
ffff80000010a403	kernel.asm	/^ffff80000010a403:	e9 f8 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a408	kernel.asm	/^ffff80000010a408 <vector195>:$/;"	l
ffff80000010a408	kernel.asm	/^ffff80000010a408:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a40a	kernel.asm	/^ffff80000010a40a:	68 c3 00 00 00       	pushq  $0xc3$/;"	l
ffff80000010a40f	kernel.asm	/^ffff80000010a40f:	e9 ec ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a414	kernel.asm	/^ffff80000010a414 <vector196>:$/;"	l
ffff80000010a414	kernel.asm	/^ffff80000010a414:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a416	kernel.asm	/^ffff80000010a416:	68 c4 00 00 00       	pushq  $0xc4$/;"	l
ffff80000010a41b	kernel.asm	/^ffff80000010a41b:	e9 e0 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a420	kernel.asm	/^ffff80000010a420 <vector197>:$/;"	l
ffff80000010a420	kernel.asm	/^ffff80000010a420:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a422	kernel.asm	/^ffff80000010a422:	68 c5 00 00 00       	pushq  $0xc5$/;"	l
ffff80000010a427	kernel.asm	/^ffff80000010a427:	e9 d4 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a42c	kernel.asm	/^ffff80000010a42c <vector198>:$/;"	l
ffff80000010a42c	kernel.asm	/^ffff80000010a42c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a42e	kernel.asm	/^ffff80000010a42e:	68 c6 00 00 00       	pushq  $0xc6$/;"	l
ffff80000010a433	kernel.asm	/^ffff80000010a433:	e9 c8 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a438	kernel.asm	/^ffff80000010a438 <vector199>:$/;"	l
ffff80000010a438	kernel.asm	/^ffff80000010a438:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a43a	kernel.asm	/^ffff80000010a43a:	68 c7 00 00 00       	pushq  $0xc7$/;"	l
ffff80000010a43f	kernel.asm	/^ffff80000010a43f:	e9 bc ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a444	kernel.asm	/^ffff80000010a444 <vector200>:$/;"	l
ffff80000010a444	kernel.asm	/^ffff80000010a444:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a446	kernel.asm	/^ffff80000010a446:	68 c8 00 00 00       	pushq  $0xc8$/;"	l
ffff80000010a44b	kernel.asm	/^ffff80000010a44b:	e9 b0 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a450	kernel.asm	/^ffff80000010a450 <vector201>:$/;"	l
ffff80000010a450	kernel.asm	/^ffff80000010a450:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a452	kernel.asm	/^ffff80000010a452:	68 c9 00 00 00       	pushq  $0xc9$/;"	l
ffff80000010a457	kernel.asm	/^ffff80000010a457:	e9 a4 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a45c	kernel.asm	/^ffff80000010a45c <vector202>:$/;"	l
ffff80000010a45c	kernel.asm	/^ffff80000010a45c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a45e	kernel.asm	/^ffff80000010a45e:	68 ca 00 00 00       	pushq  $0xca$/;"	l
ffff80000010a463	kernel.asm	/^ffff80000010a463:	e9 98 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a468	kernel.asm	/^ffff80000010a468 <vector203>:$/;"	l
ffff80000010a468	kernel.asm	/^ffff80000010a468:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a46a	kernel.asm	/^ffff80000010a46a:	68 cb 00 00 00       	pushq  $0xcb$/;"	l
ffff80000010a46f	kernel.asm	/^ffff80000010a46f:	e9 8c ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a474	kernel.asm	/^ffff80000010a474 <vector204>:$/;"	l
ffff80000010a474	kernel.asm	/^ffff80000010a474:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a476	kernel.asm	/^ffff80000010a476:	68 cc 00 00 00       	pushq  $0xcc$/;"	l
ffff80000010a47b	kernel.asm	/^ffff80000010a47b:	e9 80 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a480	kernel.asm	/^ffff80000010a480 <vector205>:$/;"	l
ffff80000010a480	kernel.asm	/^ffff80000010a480:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a482	kernel.asm	/^ffff80000010a482:	68 cd 00 00 00       	pushq  $0xcd$/;"	l
ffff80000010a487	kernel.asm	/^ffff80000010a487:	e9 74 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a48c	kernel.asm	/^ffff80000010a48c <vector206>:$/;"	l
ffff80000010a48c	kernel.asm	/^ffff80000010a48c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a48e	kernel.asm	/^ffff80000010a48e:	68 ce 00 00 00       	pushq  $0xce$/;"	l
ffff80000010a493	kernel.asm	/^ffff80000010a493:	e9 68 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a498	kernel.asm	/^ffff80000010a498 <vector207>:$/;"	l
ffff80000010a498	kernel.asm	/^ffff80000010a498:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a49a	kernel.asm	/^ffff80000010a49a:	68 cf 00 00 00       	pushq  $0xcf$/;"	l
ffff80000010a49f	kernel.asm	/^ffff80000010a49f:	e9 5c ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4a4	kernel.asm	/^ffff80000010a4a4 <vector208>:$/;"	l
ffff80000010a4a4	kernel.asm	/^ffff80000010a4a4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4a6	kernel.asm	/^ffff80000010a4a6:	68 d0 00 00 00       	pushq  $0xd0$/;"	l
ffff80000010a4ab	kernel.asm	/^ffff80000010a4ab:	e9 50 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4b0	kernel.asm	/^ffff80000010a4b0 <vector209>:$/;"	l
ffff80000010a4b0	kernel.asm	/^ffff80000010a4b0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4b2	kernel.asm	/^ffff80000010a4b2:	68 d1 00 00 00       	pushq  $0xd1$/;"	l
ffff80000010a4b7	kernel.asm	/^ffff80000010a4b7:	e9 44 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4bc	kernel.asm	/^ffff80000010a4bc <vector210>:$/;"	l
ffff80000010a4bc	kernel.asm	/^ffff80000010a4bc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4be	kernel.asm	/^ffff80000010a4be:	68 d2 00 00 00       	pushq  $0xd2$/;"	l
ffff80000010a4c3	kernel.asm	/^ffff80000010a4c3:	e9 38 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4c8	kernel.asm	/^ffff80000010a4c8 <vector211>:$/;"	l
ffff80000010a4c8	kernel.asm	/^ffff80000010a4c8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4ca	kernel.asm	/^ffff80000010a4ca:	68 d3 00 00 00       	pushq  $0xd3$/;"	l
ffff80000010a4cf	kernel.asm	/^ffff80000010a4cf:	e9 2c ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4d4	kernel.asm	/^ffff80000010a4d4 <vector212>:$/;"	l
ffff80000010a4d4	kernel.asm	/^ffff80000010a4d4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4d6	kernel.asm	/^ffff80000010a4d6:	68 d4 00 00 00       	pushq  $0xd4$/;"	l
ffff80000010a4db	kernel.asm	/^ffff80000010a4db:	e9 20 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4e0	kernel.asm	/^ffff80000010a4e0 <vector213>:$/;"	l
ffff80000010a4e0	kernel.asm	/^ffff80000010a4e0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4e2	kernel.asm	/^ffff80000010a4e2:	68 d5 00 00 00       	pushq  $0xd5$/;"	l
ffff80000010a4e7	kernel.asm	/^ffff80000010a4e7:	e9 14 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4ec	kernel.asm	/^ffff80000010a4ec <vector214>:$/;"	l
ffff80000010a4ec	kernel.asm	/^ffff80000010a4ec:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4ee	kernel.asm	/^ffff80000010a4ee:	68 d6 00 00 00       	pushq  $0xd6$/;"	l
ffff80000010a4f3	kernel.asm	/^ffff80000010a4f3:	e9 08 ee ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a4f8	kernel.asm	/^ffff80000010a4f8 <vector215>:$/;"	l
ffff80000010a4f8	kernel.asm	/^ffff80000010a4f8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4fa	kernel.asm	/^ffff80000010a4fa:	68 d7 00 00 00       	pushq  $0xd7$/;"	l
ffff80000010a4ff	kernel.asm	/^ffff80000010a4ff:	e9 fc ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a504	kernel.asm	/^ffff80000010a504 <vector216>:$/;"	l
ffff80000010a504	kernel.asm	/^ffff80000010a504:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a506	kernel.asm	/^ffff80000010a506:	68 d8 00 00 00       	pushq  $0xd8$/;"	l
ffff80000010a50b	kernel.asm	/^ffff80000010a50b:	e9 f0 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a510	kernel.asm	/^ffff80000010a510 <vector217>:$/;"	l
ffff80000010a510	kernel.asm	/^ffff80000010a510:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a512	kernel.asm	/^ffff80000010a512:	68 d9 00 00 00       	pushq  $0xd9$/;"	l
ffff80000010a517	kernel.asm	/^ffff80000010a517:	e9 e4 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a51c	kernel.asm	/^ffff80000010a51c <vector218>:$/;"	l
ffff80000010a51c	kernel.asm	/^ffff80000010a51c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a51e	kernel.asm	/^ffff80000010a51e:	68 da 00 00 00       	pushq  $0xda$/;"	l
ffff80000010a523	kernel.asm	/^ffff80000010a523:	e9 d8 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a528	kernel.asm	/^ffff80000010a528 <vector219>:$/;"	l
ffff80000010a528	kernel.asm	/^ffff80000010a528:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a52a	kernel.asm	/^ffff80000010a52a:	68 db 00 00 00       	pushq  $0xdb$/;"	l
ffff80000010a52f	kernel.asm	/^ffff80000010a52f:	e9 cc ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a534	kernel.asm	/^ffff80000010a534 <vector220>:$/;"	l
ffff80000010a534	kernel.asm	/^ffff80000010a534:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a536	kernel.asm	/^ffff80000010a536:	68 dc 00 00 00       	pushq  $0xdc$/;"	l
ffff80000010a53b	kernel.asm	/^ffff80000010a53b:	e9 c0 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a540	kernel.asm	/^ffff80000010a540 <vector221>:$/;"	l
ffff80000010a540	kernel.asm	/^ffff80000010a540:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a542	kernel.asm	/^ffff80000010a542:	68 dd 00 00 00       	pushq  $0xdd$/;"	l
ffff80000010a547	kernel.asm	/^ffff80000010a547:	e9 b4 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a54c	kernel.asm	/^ffff80000010a54c <vector222>:$/;"	l
ffff80000010a54c	kernel.asm	/^ffff80000010a54c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a54e	kernel.asm	/^ffff80000010a54e:	68 de 00 00 00       	pushq  $0xde$/;"	l
ffff80000010a553	kernel.asm	/^ffff80000010a553:	e9 a8 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a558	kernel.asm	/^ffff80000010a558 <vector223>:$/;"	l
ffff80000010a558	kernel.asm	/^ffff80000010a558:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a55a	kernel.asm	/^ffff80000010a55a:	68 df 00 00 00       	pushq  $0xdf$/;"	l
ffff80000010a55f	kernel.asm	/^ffff80000010a55f:	e9 9c ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a564	kernel.asm	/^ffff80000010a564 <vector224>:$/;"	l
ffff80000010a564	kernel.asm	/^ffff80000010a564:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a566	kernel.asm	/^ffff80000010a566:	68 e0 00 00 00       	pushq  $0xe0$/;"	l
ffff80000010a56b	kernel.asm	/^ffff80000010a56b:	e9 90 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a570	kernel.asm	/^ffff80000010a570 <vector225>:$/;"	l
ffff80000010a570	kernel.asm	/^ffff80000010a570:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a572	kernel.asm	/^ffff80000010a572:	68 e1 00 00 00       	pushq  $0xe1$/;"	l
ffff80000010a577	kernel.asm	/^ffff80000010a577:	e9 84 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a57c	kernel.asm	/^ffff80000010a57c <vector226>:$/;"	l
ffff80000010a57c	kernel.asm	/^ffff80000010a57c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a57e	kernel.asm	/^ffff80000010a57e:	68 e2 00 00 00       	pushq  $0xe2$/;"	l
ffff80000010a583	kernel.asm	/^ffff80000010a583:	e9 78 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a588	kernel.asm	/^ffff80000010a588 <vector227>:$/;"	l
ffff80000010a588	kernel.asm	/^ffff80000010a588:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a58a	kernel.asm	/^ffff80000010a58a:	68 e3 00 00 00       	pushq  $0xe3$/;"	l
ffff80000010a58f	kernel.asm	/^ffff80000010a58f:	e9 6c ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a594	kernel.asm	/^ffff80000010a594 <vector228>:$/;"	l
ffff80000010a594	kernel.asm	/^ffff80000010a594:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a596	kernel.asm	/^ffff80000010a596:	68 e4 00 00 00       	pushq  $0xe4$/;"	l
ffff80000010a59b	kernel.asm	/^ffff80000010a59b:	e9 60 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5a0	kernel.asm	/^ffff80000010a5a0 <vector229>:$/;"	l
ffff80000010a5a0	kernel.asm	/^ffff80000010a5a0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5a2	kernel.asm	/^ffff80000010a5a2:	68 e5 00 00 00       	pushq  $0xe5$/;"	l
ffff80000010a5a7	kernel.asm	/^ffff80000010a5a7:	e9 54 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5ac	kernel.asm	/^ffff80000010a5ac <vector230>:$/;"	l
ffff80000010a5ac	kernel.asm	/^ffff80000010a5ac:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ae	kernel.asm	/^ffff80000010a5ae:	68 e6 00 00 00       	pushq  $0xe6$/;"	l
ffff80000010a5b3	kernel.asm	/^ffff80000010a5b3:	e9 48 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5b8	kernel.asm	/^ffff80000010a5b8 <vector231>:$/;"	l
ffff80000010a5b8	kernel.asm	/^ffff80000010a5b8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ba	kernel.asm	/^ffff80000010a5ba:	68 e7 00 00 00       	pushq  $0xe7$/;"	l
ffff80000010a5bf	kernel.asm	/^ffff80000010a5bf:	e9 3c ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5c4	kernel.asm	/^ffff80000010a5c4 <vector232>:$/;"	l
ffff80000010a5c4	kernel.asm	/^ffff80000010a5c4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5c6	kernel.asm	/^ffff80000010a5c6:	68 e8 00 00 00       	pushq  $0xe8$/;"	l
ffff80000010a5cb	kernel.asm	/^ffff80000010a5cb:	e9 30 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5d0	kernel.asm	/^ffff80000010a5d0 <vector233>:$/;"	l
ffff80000010a5d0	kernel.asm	/^ffff80000010a5d0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5d2	kernel.asm	/^ffff80000010a5d2:	68 e9 00 00 00       	pushq  $0xe9$/;"	l
ffff80000010a5d7	kernel.asm	/^ffff80000010a5d7:	e9 24 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5dc	kernel.asm	/^ffff80000010a5dc <vector234>:$/;"	l
ffff80000010a5dc	kernel.asm	/^ffff80000010a5dc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5de	kernel.asm	/^ffff80000010a5de:	68 ea 00 00 00       	pushq  $0xea$/;"	l
ffff80000010a5e3	kernel.asm	/^ffff80000010a5e3:	e9 18 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5e8	kernel.asm	/^ffff80000010a5e8 <vector235>:$/;"	l
ffff80000010a5e8	kernel.asm	/^ffff80000010a5e8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ea	kernel.asm	/^ffff80000010a5ea:	68 eb 00 00 00       	pushq  $0xeb$/;"	l
ffff80000010a5ef	kernel.asm	/^ffff80000010a5ef:	e9 0c ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a5f4	kernel.asm	/^ffff80000010a5f4 <vector236>:$/;"	l
ffff80000010a5f4	kernel.asm	/^ffff80000010a5f4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5f6	kernel.asm	/^ffff80000010a5f6:	68 ec 00 00 00       	pushq  $0xec$/;"	l
ffff80000010a5fb	kernel.asm	/^ffff80000010a5fb:	e9 00 ed ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a600	kernel.asm	/^ffff80000010a600 <vector237>:$/;"	l
ffff80000010a600	kernel.asm	/^ffff80000010a600:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a602	kernel.asm	/^ffff80000010a602:	68 ed 00 00 00       	pushq  $0xed$/;"	l
ffff80000010a607	kernel.asm	/^ffff80000010a607:	e9 f4 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a60c	kernel.asm	/^ffff80000010a60c <vector238>:$/;"	l
ffff80000010a60c	kernel.asm	/^ffff80000010a60c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a60e	kernel.asm	/^ffff80000010a60e:	68 ee 00 00 00       	pushq  $0xee$/;"	l
ffff80000010a613	kernel.asm	/^ffff80000010a613:	e9 e8 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a618	kernel.asm	/^ffff80000010a618 <vector239>:$/;"	l
ffff80000010a618	kernel.asm	/^ffff80000010a618:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a61a	kernel.asm	/^ffff80000010a61a:	68 ef 00 00 00       	pushq  $0xef$/;"	l
ffff80000010a61f	kernel.asm	/^ffff80000010a61f:	e9 dc ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a624	kernel.asm	/^ffff80000010a624 <vector240>:$/;"	l
ffff80000010a624	kernel.asm	/^ffff80000010a624:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a626	kernel.asm	/^ffff80000010a626:	68 f0 00 00 00       	pushq  $0xf0$/;"	l
ffff80000010a62b	kernel.asm	/^ffff80000010a62b:	e9 d0 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a630	kernel.asm	/^ffff80000010a630 <vector241>:$/;"	l
ffff80000010a630	kernel.asm	/^ffff80000010a630:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a632	kernel.asm	/^ffff80000010a632:	68 f1 00 00 00       	pushq  $0xf1$/;"	l
ffff80000010a637	kernel.asm	/^ffff80000010a637:	e9 c4 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a63c	kernel.asm	/^ffff80000010a63c <vector242>:$/;"	l
ffff80000010a63c	kernel.asm	/^ffff80000010a63c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a63e	kernel.asm	/^ffff80000010a63e:	68 f2 00 00 00       	pushq  $0xf2$/;"	l
ffff80000010a643	kernel.asm	/^ffff80000010a643:	e9 b8 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a648	kernel.asm	/^ffff80000010a648 <vector243>:$/;"	l
ffff80000010a648	kernel.asm	/^ffff80000010a648:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a64a	kernel.asm	/^ffff80000010a64a:	68 f3 00 00 00       	pushq  $0xf3$/;"	l
ffff80000010a64f	kernel.asm	/^ffff80000010a64f:	e9 ac ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a654	kernel.asm	/^ffff80000010a654 <vector244>:$/;"	l
ffff80000010a654	kernel.asm	/^ffff80000010a654:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a656	kernel.asm	/^ffff80000010a656:	68 f4 00 00 00       	pushq  $0xf4$/;"	l
ffff80000010a65b	kernel.asm	/^ffff80000010a65b:	e9 a0 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a660	kernel.asm	/^ffff80000010a660 <vector245>:$/;"	l
ffff80000010a660	kernel.asm	/^ffff80000010a660:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a662	kernel.asm	/^ffff80000010a662:	68 f5 00 00 00       	pushq  $0xf5$/;"	l
ffff80000010a667	kernel.asm	/^ffff80000010a667:	e9 94 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a66c	kernel.asm	/^ffff80000010a66c <vector246>:$/;"	l
ffff80000010a66c	kernel.asm	/^ffff80000010a66c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a66e	kernel.asm	/^ffff80000010a66e:	68 f6 00 00 00       	pushq  $0xf6$/;"	l
ffff80000010a673	kernel.asm	/^ffff80000010a673:	e9 88 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a678	kernel.asm	/^ffff80000010a678 <vector247>:$/;"	l
ffff80000010a678	kernel.asm	/^ffff80000010a678:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a67a	kernel.asm	/^ffff80000010a67a:	68 f7 00 00 00       	pushq  $0xf7$/;"	l
ffff80000010a67f	kernel.asm	/^ffff80000010a67f:	e9 7c ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a684	kernel.asm	/^ffff80000010a684 <vector248>:$/;"	l
ffff80000010a684	kernel.asm	/^ffff80000010a684:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a686	kernel.asm	/^ffff80000010a686:	68 f8 00 00 00       	pushq  $0xf8$/;"	l
ffff80000010a68b	kernel.asm	/^ffff80000010a68b:	e9 70 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a690	kernel.asm	/^ffff80000010a690 <vector249>:$/;"	l
ffff80000010a690	kernel.asm	/^ffff80000010a690:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a692	kernel.asm	/^ffff80000010a692:	68 f9 00 00 00       	pushq  $0xf9$/;"	l
ffff80000010a697	kernel.asm	/^ffff80000010a697:	e9 64 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a69c	kernel.asm	/^ffff80000010a69c <vector250>:$/;"	l
ffff80000010a69c	kernel.asm	/^ffff80000010a69c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a69e	kernel.asm	/^ffff80000010a69e:	68 fa 00 00 00       	pushq  $0xfa$/;"	l
ffff80000010a6a3	kernel.asm	/^ffff80000010a6a3:	e9 58 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6a8	kernel.asm	/^ffff80000010a6a8 <vector251>:$/;"	l
ffff80000010a6a8	kernel.asm	/^ffff80000010a6a8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6aa	kernel.asm	/^ffff80000010a6aa:	68 fb 00 00 00       	pushq  $0xfb$/;"	l
ffff80000010a6af	kernel.asm	/^ffff80000010a6af:	e9 4c ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6b4	kernel.asm	/^ffff80000010a6b4 <vector252>:$/;"	l
ffff80000010a6b4	kernel.asm	/^ffff80000010a6b4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6b6	kernel.asm	/^ffff80000010a6b6:	68 fc 00 00 00       	pushq  $0xfc$/;"	l
ffff80000010a6bb	kernel.asm	/^ffff80000010a6bb:	e9 40 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6c0	kernel.asm	/^ffff80000010a6c0 <vector253>:$/;"	l
ffff80000010a6c0	kernel.asm	/^ffff80000010a6c0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6c2	kernel.asm	/^ffff80000010a6c2:	68 fd 00 00 00       	pushq  $0xfd$/;"	l
ffff80000010a6c7	kernel.asm	/^ffff80000010a6c7:	e9 34 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6cc	kernel.asm	/^ffff80000010a6cc <vector254>:$/;"	l
ffff80000010a6cc	kernel.asm	/^ffff80000010a6cc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6ce	kernel.asm	/^ffff80000010a6ce:	68 fe 00 00 00       	pushq  $0xfe$/;"	l
ffff80000010a6d3	kernel.asm	/^ffff80000010a6d3:	e9 28 ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6d8	kernel.asm	/^ffff80000010a6d8 <vector255>:$/;"	l
ffff80000010a6d8	kernel.asm	/^ffff80000010a6d8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6da	kernel.asm	/^ffff80000010a6da:	68 ff 00 00 00       	pushq  $0xff$/;"	l
ffff80000010a6df	kernel.asm	/^ffff80000010a6df:	e9 1c ec ff ff       	jmpq   ffff800000109300 <alltraps>$/;"	l
ffff80000010a6e4	kernel.asm	/^ffff80000010a6e4 <lgdt>:$/;"	l
ffff80000010a6e4	kernel.asm	/^ffff80000010a6e4:	55                   	push   %rbp$/;"	l
ffff80000010a6e5	kernel.asm	/^ffff80000010a6e5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a6e8	kernel.asm	/^ffff80000010a6e8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010a6ec	kernel.asm	/^ffff80000010a6ec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010a6f0	kernel.asm	/^ffff80000010a6f0:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010a6f3	kernel.asm	/^ffff80000010a6f3:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010a6f6	kernel.asm	/^ffff80000010a6f6:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010a6f9	kernel.asm	/^ffff80000010a6f9:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff80000010a6fd	kernel.asm	/^ffff80000010a6fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a701	kernel.asm	/^ffff80000010a701:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff80000010a705	kernel.asm	/^ffff80000010a705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a709	kernel.asm	/^ffff80000010a709:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff80000010a70d	kernel.asm	/^ffff80000010a70d:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010a711	kernel.asm	/^ffff80000010a711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a715	kernel.asm	/^ffff80000010a715:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff80000010a719	kernel.asm	/^ffff80000010a719:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff80000010a71d	kernel.asm	/^ffff80000010a71d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a721	kernel.asm	/^ffff80000010a721:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff80000010a725	kernel.asm	/^ffff80000010a725:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff80000010a729	kernel.asm	/^ffff80000010a729:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff80000010a72d	kernel.asm	/^ffff80000010a72d:	0f 01 10             	lgdt   (%rax)$/;"	l
ffff80000010a730	kernel.asm	/^ffff80000010a730:	90                   	nop$/;"	l
ffff80000010a731	kernel.asm	/^ffff80000010a731:	c9                   	leaveq $/;"	l
ffff80000010a732	kernel.asm	/^ffff80000010a732:	c3                   	retq   $/;"	l
ffff80000010a733	kernel.asm	/^ffff80000010a733 <ltr>:$/;"	l
ffff80000010a733	kernel.asm	/^ffff80000010a733:	55                   	push   %rbp$/;"	l
ffff80000010a734	kernel.asm	/^ffff80000010a734:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a737	kernel.asm	/^ffff80000010a737:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a73b	kernel.asm	/^ffff80000010a73b:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a73d	kernel.asm	/^ffff80000010a73d:	66 89 45 fc          	mov    %ax,-0x4(%rbp)$/;"	l
ffff80000010a741	kernel.asm	/^ffff80000010a741:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax$/;"	l
ffff80000010a745	kernel.asm	/^ffff80000010a745:	0f 00 d8             	ltr    %ax$/;"	l
ffff80000010a748	kernel.asm	/^ffff80000010a748:	90                   	nop$/;"	l
ffff80000010a749	kernel.asm	/^ffff80000010a749:	c9                   	leaveq $/;"	l
ffff80000010a74a	kernel.asm	/^ffff80000010a74a:	c3                   	retq   $/;"	l
ffff80000010a74b	kernel.asm	/^ffff80000010a74b <lcr3>:$/;"	l
ffff80000010a74b	kernel.asm	/^ffff80000010a74b:	55                   	push   %rbp$/;"	l
ffff80000010a74c	kernel.asm	/^ffff80000010a74c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a74f	kernel.asm	/^ffff80000010a74f:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a753	kernel.asm	/^ffff80000010a753:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010a757	kernel.asm	/^ffff80000010a757:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a75b	kernel.asm	/^ffff80000010a75b:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff80000010a75e	kernel.asm	/^ffff80000010a75e:	90                   	nop$/;"	l
ffff80000010a75f	kernel.asm	/^ffff80000010a75f:	c9                   	leaveq $/;"	l
ffff80000010a760	kernel.asm	/^ffff80000010a760:	c3                   	retq   $/;"	l
ffff80000010a761	kernel.asm	/^ffff80000010a761 <v2p>:$/;"	l
ffff80000010a761	kernel.asm	/^ffff80000010a761:	55                   	push   %rbp$/;"	l
ffff80000010a762	kernel.asm	/^ffff80000010a762:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a765	kernel.asm	/^ffff80000010a765:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a769	kernel.asm	/^ffff80000010a769:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010a76d	kernel.asm	/^ffff80000010a76d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010a771	kernel.asm	/^ffff80000010a771:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010a778	kernel.asm	/^ffff80000010a778:	80 00 00 $/;"	l
ffff80000010a77b	kernel.asm	/^ffff80000010a77b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010a77e	kernel.asm	/^ffff80000010a77e:	c9                   	leaveq $/;"	l
ffff80000010a77f	kernel.asm	/^ffff80000010a77f:	c3                   	retq   $/;"	l
ffff80000010a780	kernel.asm	/^ffff80000010a780 <tss_set_rsp>:$/;"	l
ffff80000010a780	kernel.asm	/^ffff80000010a780:	55                   	push   %rbp$/;"	l
ffff80000010a781	kernel.asm	/^ffff80000010a781:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a784	kernel.asm	/^ffff80000010a784:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010a788	kernel.asm	/^ffff80000010a788:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010a78c	kernel.asm	/^ffff80000010a78c:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010a78f	kernel.asm	/^ffff80000010a78f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff80000010a793	kernel.asm	/^ffff80000010a793:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010a796	kernel.asm	/^ffff80000010a796:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010a798	kernel.asm	/^ffff80000010a798:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010a79b	kernel.asm	/^ffff80000010a79b:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010a79d	kernel.asm	/^ffff80000010a79d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010a7a4	kernel.asm	/^ffff80000010a7a4:	00 $/;"	l
ffff80000010a7a5	kernel.asm	/^ffff80000010a7a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a7a9	kernel.asm	/^ffff80000010a7a9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010a7ac	kernel.asm	/^ffff80000010a7ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010a7b0	kernel.asm	/^ffff80000010a7b0:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010a7b2	kernel.asm	/^ffff80000010a7b2:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010a7b5	kernel.asm	/^ffff80000010a7b5:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010a7b8	kernel.asm	/^ffff80000010a7b8:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010a7ba	kernel.asm	/^ffff80000010a7ba:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010a7bc	kernel.asm	/^ffff80000010a7bc:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010a7c3	kernel.asm	/^ffff80000010a7c3:	00 $/;"	l
ffff80000010a7c4	kernel.asm	/^ffff80000010a7c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a7c8	kernel.asm	/^ffff80000010a7c8:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010a7cb	kernel.asm	/^ffff80000010a7cb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010a7cf	kernel.asm	/^ffff80000010a7cf:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010a7d3	kernel.asm	/^ffff80000010a7d3:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010a7d5	kernel.asm	/^ffff80000010a7d5:	90                   	nop$/;"	l
ffff80000010a7d6	kernel.asm	/^ffff80000010a7d6:	c9                   	leaveq $/;"	l
ffff80000010a7d7	kernel.asm	/^ffff80000010a7d7:	c3                   	retq   $/;"	l
ffff80000010a7d8	kernel.asm	/^ffff80000010a7d8 <syscallinit>:$/;"	l
ffff80000010a7d8	kernel.asm	/^ffff80000010a7d8:	55                   	push   %rbp$/;"	l
ffff80000010a7d9	kernel.asm	/^ffff80000010a7d9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a7dc	kernel.asm	/^ffff80000010a7dc:	48 be 00 00 00 00 08 	movabs $0x18000800000000,%rsi$/;"	l
ffff80000010a7e3	kernel.asm	/^ffff80000010a7e3:	00 18 00 $/;"	l
ffff80000010a7e6	kernel.asm	/^ffff80000010a7e6:	bf 81 00 00 c0       	mov    $0xc0000081,%edi$/;"	l
ffff80000010a7eb	kernel.asm	/^ffff80000010a7eb:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010a7f2	kernel.asm	/^ffff80000010a7f2:	80 ff ff $/;"	l
ffff80000010a7f5	kernel.asm	/^ffff80000010a7f5:	ff d0                	callq  *%rax$/;"	l
ffff80000010a7f7	kernel.asm	/^ffff80000010a7f7:	48 b8 1a 01 10 00 00 	movabs $0xffff80000010011a,%rax$/;"	l
ffff80000010a7fe	kernel.asm	/^ffff80000010a7fe:	80 ff ff $/;"	l
ffff80000010a801	kernel.asm	/^ffff80000010a801:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010a804	kernel.asm	/^ffff80000010a804:	bf 82 00 00 c0       	mov    $0xc0000082,%edi$/;"	l
ffff80000010a809	kernel.asm	/^ffff80000010a809:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010a810	kernel.asm	/^ffff80000010a810:	80 ff ff $/;"	l
ffff80000010a813	kernel.asm	/^ffff80000010a813:	ff d0                	callq  *%rax$/;"	l
ffff80000010a815	kernel.asm	/^ffff80000010a815:	48 b8 11 01 10 00 00 	movabs $0xffff800000100111,%rax$/;"	l
ffff80000010a81c	kernel.asm	/^ffff80000010a81c:	80 ff ff $/;"	l
ffff80000010a81f	kernel.asm	/^ffff80000010a81f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010a822	kernel.asm	/^ffff80000010a822:	bf 83 00 00 c0       	mov    $0xc0000083,%edi$/;"	l
ffff80000010a827	kernel.asm	/^ffff80000010a827:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010a82e	kernel.asm	/^ffff80000010a82e:	80 ff ff $/;"	l
ffff80000010a831	kernel.asm	/^ffff80000010a831:	ff d0                	callq  *%rax$/;"	l
ffff80000010a833	kernel.asm	/^ffff80000010a833:	be 00 77 04 00       	mov    $0x47700,%esi$/;"	l
ffff80000010a838	kernel.asm	/^ffff80000010a838:	bf 84 00 00 c0       	mov    $0xc0000084,%edi$/;"	l
ffff80000010a83d	kernel.asm	/^ffff80000010a83d:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010a844	kernel.asm	/^ffff80000010a844:	80 ff ff $/;"	l
ffff80000010a847	kernel.asm	/^ffff80000010a847:	ff d0                	callq  *%rax$/;"	l
ffff80000010a849	kernel.asm	/^ffff80000010a849:	90                   	nop$/;"	l
ffff80000010a84a	kernel.asm	/^ffff80000010a84a:	5d                   	pop    %rbp$/;"	l
ffff80000010a84b	kernel.asm	/^ffff80000010a84b:	c3                   	retq   $/;"	l
ffff80000010a84c	kernel.asm	/^ffff80000010a84c <seginit>:$/;"	l
ffff80000010a84c	kernel.asm	/^ffff80000010a84c:	55                   	push   %rbp$/;"	l
ffff80000010a84d	kernel.asm	/^ffff80000010a84d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a850	kernel.asm	/^ffff80000010a850:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010a854	kernel.asm	/^ffff80000010a854:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010a85b	kernel.asm	/^ffff80000010a85b:	80 ff ff $/;"	l
ffff80000010a85e	kernel.asm	/^ffff80000010a85e:	ff d0                	callq  *%rax$/;"	l
ffff80000010a860	kernel.asm	/^ffff80000010a860:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010a864	kernel.asm	/^ffff80000010a864:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a868	kernel.asm	/^ffff80000010a868:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010a86d	kernel.asm	/^ffff80000010a86d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010a872	kernel.asm	/^ffff80000010a872:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010a875	kernel.asm	/^ffff80000010a875:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010a87c	kernel.asm	/^ffff80000010a87c:	80 ff ff $/;"	l
ffff80000010a87f	kernel.asm	/^ffff80000010a87f:	ff d0                	callq  *%rax$/;"	l
ffff80000010a881	kernel.asm	/^ffff80000010a881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a885	kernel.asm	/^ffff80000010a885:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010a889	kernel.asm	/^ffff80000010a889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a88d	kernel.asm	/^ffff80000010a88d:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010a893	kernel.asm	/^ffff80000010a893:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010a897	kernel.asm	/^ffff80000010a897:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a89b	kernel.asm	/^ffff80000010a89b:	48 83 c0 40          	add    $0x40,%rax$/;"	l
ffff80000010a89f	kernel.asm	/^ffff80000010a89f:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)$/;"	l
ffff80000010a8a5	kernel.asm	/^ffff80000010a8a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010a8a9	kernel.asm	/^ffff80000010a8a9:	48 05 00 08 00 00    	add    $0x800,%rax$/;"	l
ffff80000010a8af	kernel.asm	/^ffff80000010a8af:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010a8b2	kernel.asm	/^ffff80000010a8b2:	bf 00 01 00 c0       	mov    $0xc0000100,%edi$/;"	l
ffff80000010a8b7	kernel.asm	/^ffff80000010a8b7:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010a8be	kernel.asm	/^ffff80000010a8be:	80 ff ff $/;"	l
ffff80000010a8c1	kernel.asm	/^ffff80000010a8c1:	ff d0                	callq  *%rax$/;"	l
ffff80000010a8c3	kernel.asm	/^ffff80000010a8c3:	48 b8 ae 45 10 00 00 	movabs $0xffff8000001045ae,%rax$/;"	l
ffff80000010a8ca	kernel.asm	/^ffff80000010a8ca:	80 ff ff $/;"	l
ffff80000010a8cd	kernel.asm	/^ffff80000010a8cd:	ff d0                	callq  *%rax$/;"	l
ffff80000010a8cf	kernel.asm	/^ffff80000010a8cf:	48 98                	cltq   $/;"	l
ffff80000010a8d1	kernel.asm	/^ffff80000010a8d1:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010a8d4	kernel.asm	/^ffff80000010a8d4:	48 8d 04 d5 00 00 00 	lea    0x0(,%rdx,8),%rax$/;"	l
ffff80000010a8db	kernel.asm	/^ffff80000010a8db:	00 $/;"	l
ffff80000010a8dc	kernel.asm	/^ffff80000010a8dc:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010a8df	kernel.asm	/^ffff80000010a8df:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010a8e2	kernel.asm	/^ffff80000010a8e2:	48 c1 e0 05          	shl    $0x5,%rax$/;"	l
ffff80000010a8e6	kernel.asm	/^ffff80000010a8e6:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff80000010a8e9	kernel.asm	/^ffff80000010a8e9:	48 ba e0 72 11 00 00 	movabs $0xffff8000001172e0,%rdx$/;"	l
ffff80000010a8f0	kernel.asm	/^ffff80000010a8f0:	80 ff ff $/;"	l
ffff80000010a8f3	kernel.asm	/^ffff80000010a8f3:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010a8f6	kernel.asm	/^ffff80000010a8f6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010a8fa	kernel.asm	/^ffff80000010a8fa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010a8fe	kernel.asm	/^ffff80000010a8fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010a902	kernel.asm	/^ffff80000010a902:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)$/;"	l
ffff80000010a909	kernel.asm	/^ffff80000010a909:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010a90d	kernel.asm	/^ffff80000010a90d:	64 48 89 04 25 f0 ff 	mov    %rax,%fs:0xfffffffffffffff0$/;"	l
ffff80000010a914	kernel.asm	/^ffff80000010a914:	ff ff $/;"	l
ffff80000010a916	kernel.asm	/^ffff80000010a916:	64 48 c7 04 25 f8 ff 	movq   $0x0,%fs:0xfffffffffffffff8$/;"	l
ffff80000010a91d	kernel.asm	/^ffff80000010a91d:	ff ff 00 00 00 00 $/;"	l
ffff80000010a923	kernel.asm	/^ffff80000010a923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010a927	kernel.asm	/^ffff80000010a927:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010a92b	kernel.asm	/^ffff80000010a92b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010a92f	kernel.asm	/^ffff80000010a92f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010a936	kernel.asm	/^ffff80000010a936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010a93a	kernel.asm	/^ffff80000010a93a:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010a93e	kernel.asm	/^ffff80000010a93e:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010a943	kernel.asm	/^ffff80000010a943:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010a949	kernel.asm	/^ffff80000010a949:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010a94d	kernel.asm	/^ffff80000010a94d:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a951	kernel.asm	/^ffff80000010a951:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010a954	kernel.asm	/^ffff80000010a954:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010a957	kernel.asm	/^ffff80000010a957:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a95a	kernel.asm	/^ffff80000010a95a:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a95e	kernel.asm	/^ffff80000010a95e:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010a961	kernel.asm	/^ffff80000010a961:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a964	kernel.asm	/^ffff80000010a964:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a968	kernel.asm	/^ffff80000010a968:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010a96b	kernel.asm	/^ffff80000010a96b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a96e	kernel.asm	/^ffff80000010a96e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a972	kernel.asm	/^ffff80000010a972:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010a975	kernel.asm	/^ffff80000010a975:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a978	kernel.asm	/^ffff80000010a978:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a97c	kernel.asm	/^ffff80000010a97c:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010a97f	kernel.asm	/^ffff80000010a97f:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a982	kernel.asm	/^ffff80000010a982:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a986	kernel.asm	/^ffff80000010a986:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010a989	kernel.asm	/^ffff80000010a989:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a98c	kernel.asm	/^ffff80000010a98c:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a990	kernel.asm	/^ffff80000010a990:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010a993	kernel.asm	/^ffff80000010a993:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a996	kernel.asm	/^ffff80000010a996:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a99a	kernel.asm	/^ffff80000010a99a:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010a99d	kernel.asm	/^ffff80000010a99d:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a9a0	kernel.asm	/^ffff80000010a9a0:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a9a4	kernel.asm	/^ffff80000010a9a4:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010a9a7	kernel.asm	/^ffff80000010a9a7:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a9aa	kernel.asm	/^ffff80000010a9aa:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010a9ae	kernel.asm	/^ffff80000010a9ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010a9b2	kernel.asm	/^ffff80000010a9b2:	48 83 c0 28          	add    $0x28,%rax$/;"	l
ffff80000010a9b6	kernel.asm	/^ffff80000010a9b6:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010a9bb	kernel.asm	/^ffff80000010a9bb:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010a9c1	kernel.asm	/^ffff80000010a9c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010a9c5	kernel.asm	/^ffff80000010a9c5:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a9c9	kernel.asm	/^ffff80000010a9c9:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010a9cc	kernel.asm	/^ffff80000010a9cc:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010a9cf	kernel.asm	/^ffff80000010a9cf:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a9d2	kernel.asm	/^ffff80000010a9d2:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a9d6	kernel.asm	/^ffff80000010a9d6:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010a9d9	kernel.asm	/^ffff80000010a9d9:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a9dc	kernel.asm	/^ffff80000010a9dc:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a9e0	kernel.asm	/^ffff80000010a9e0:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010a9e3	kernel.asm	/^ffff80000010a9e3:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a9e6	kernel.asm	/^ffff80000010a9e6:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010a9ea	kernel.asm	/^ffff80000010a9ea:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010a9ed	kernel.asm	/^ffff80000010a9ed:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010a9f0	kernel.asm	/^ffff80000010a9f0:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a9f4	kernel.asm	/^ffff80000010a9f4:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010a9f7	kernel.asm	/^ffff80000010a9f7:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010a9fa	kernel.asm	/^ffff80000010a9fa:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010a9fe	kernel.asm	/^ffff80000010a9fe:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010aa01	kernel.asm	/^ffff80000010aa01:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa04	kernel.asm	/^ffff80000010aa04:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa08	kernel.asm	/^ffff80000010aa08:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010aa0b	kernel.asm	/^ffff80000010aa0b:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa0e	kernel.asm	/^ffff80000010aa0e:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa12	kernel.asm	/^ffff80000010aa12:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010aa15	kernel.asm	/^ffff80000010aa15:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa18	kernel.asm	/^ffff80000010aa18:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa1c	kernel.asm	/^ffff80000010aa1c:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010aa1f	kernel.asm	/^ffff80000010aa1f:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa22	kernel.asm	/^ffff80000010aa22:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010aa26	kernel.asm	/^ffff80000010aa26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010aa2a	kernel.asm	/^ffff80000010aa2a:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010aa2e	kernel.asm	/^ffff80000010aa2e:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010aa33	kernel.asm	/^ffff80000010aa33:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010aa39	kernel.asm	/^ffff80000010aa39:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010aa3d	kernel.asm	/^ffff80000010aa3d:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aa41	kernel.asm	/^ffff80000010aa41:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010aa44	kernel.asm	/^ffff80000010aa44:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010aa47	kernel.asm	/^ffff80000010aa47:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aa4a	kernel.asm	/^ffff80000010aa4a:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aa4e	kernel.asm	/^ffff80000010aa4e:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010aa51	kernel.asm	/^ffff80000010aa51:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aa54	kernel.asm	/^ffff80000010aa54:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aa58	kernel.asm	/^ffff80000010aa58:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010aa5b	kernel.asm	/^ffff80000010aa5b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aa5e	kernel.asm	/^ffff80000010aa5e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aa62	kernel.asm	/^ffff80000010aa62:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010aa65	kernel.asm	/^ffff80000010aa65:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aa68	kernel.asm	/^ffff80000010aa68:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa6c	kernel.asm	/^ffff80000010aa6c:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010aa6f	kernel.asm	/^ffff80000010aa6f:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa72	kernel.asm	/^ffff80000010aa72:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa76	kernel.asm	/^ffff80000010aa76:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010aa79	kernel.asm	/^ffff80000010aa79:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa7c	kernel.asm	/^ffff80000010aa7c:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa80	kernel.asm	/^ffff80000010aa80:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010aa83	kernel.asm	/^ffff80000010aa83:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa86	kernel.asm	/^ffff80000010aa86:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa8a	kernel.asm	/^ffff80000010aa8a:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010aa8d	kernel.asm	/^ffff80000010aa8d:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa90	kernel.asm	/^ffff80000010aa90:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aa94	kernel.asm	/^ffff80000010aa94:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010aa97	kernel.asm	/^ffff80000010aa97:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aa9a	kernel.asm	/^ffff80000010aa9a:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010aa9e	kernel.asm	/^ffff80000010aa9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010aaa2	kernel.asm	/^ffff80000010aaa2:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff80000010aaa6	kernel.asm	/^ffff80000010aaa6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010aaad	kernel.asm	/^ffff80000010aaad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010aab1	kernel.asm	/^ffff80000010aab1:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010aab5	kernel.asm	/^ffff80000010aab5:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010aaba	kernel.asm	/^ffff80000010aaba:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010aac0	kernel.asm	/^ffff80000010aac0:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010aac4	kernel.asm	/^ffff80000010aac4:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aac8	kernel.asm	/^ffff80000010aac8:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010aacb	kernel.asm	/^ffff80000010aacb:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010aace	kernel.asm	/^ffff80000010aace:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aad1	kernel.asm	/^ffff80000010aad1:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aad5	kernel.asm	/^ffff80000010aad5:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010aad8	kernel.asm	/^ffff80000010aad8:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aadb	kernel.asm	/^ffff80000010aadb:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aadf	kernel.asm	/^ffff80000010aadf:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010aae2	kernel.asm	/^ffff80000010aae2:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aae5	kernel.asm	/^ffff80000010aae5:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010aae9	kernel.asm	/^ffff80000010aae9:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010aaec	kernel.asm	/^ffff80000010aaec:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010aaef	kernel.asm	/^ffff80000010aaef:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aaf3	kernel.asm	/^ffff80000010aaf3:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010aaf6	kernel.asm	/^ffff80000010aaf6:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aaf9	kernel.asm	/^ffff80000010aaf9:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aafd	kernel.asm	/^ffff80000010aafd:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ab00	kernel.asm	/^ffff80000010ab00:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab03	kernel.asm	/^ffff80000010ab03:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab07	kernel.asm	/^ffff80000010ab07:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010ab0a	kernel.asm	/^ffff80000010ab0a:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab0d	kernel.asm	/^ffff80000010ab0d:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab11	kernel.asm	/^ffff80000010ab11:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010ab14	kernel.asm	/^ffff80000010ab14:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab17	kernel.asm	/^ffff80000010ab17:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab1b	kernel.asm	/^ffff80000010ab1b:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ab1e	kernel.asm	/^ffff80000010ab1e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab21	kernel.asm	/^ffff80000010ab21:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010ab25	kernel.asm	/^ffff80000010ab25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ab29	kernel.asm	/^ffff80000010ab29:	48 83 c0 38          	add    $0x38,%rax$/;"	l
ffff80000010ab2d	kernel.asm	/^ffff80000010ab2d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ab31	kernel.asm	/^ffff80000010ab31:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010ab33	kernel.asm	/^ffff80000010ab33:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ab37	kernel.asm	/^ffff80000010ab37:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010ab3b	kernel.asm	/^ffff80000010ab3b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010ab3d	kernel.asm	/^ffff80000010ab3d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ab41	kernel.asm	/^ffff80000010ab41:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010ab45	kernel.asm	/^ffff80000010ab45:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010ab47	kernel.asm	/^ffff80000010ab47:	66 c7 00 0b 00       	movw   $0xb,(%rax)$/;"	l
ffff80000010ab4c	kernel.asm	/^ffff80000010ab4c:	66 89 78 02          	mov    %di,0x2(%rax)$/;"	l
ffff80000010ab50	kernel.asm	/^ffff80000010ab50:	40 88 70 04          	mov    %sil,0x4(%rax)$/;"	l
ffff80000010ab54	kernel.asm	/^ffff80000010ab54:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ab58	kernel.asm	/^ffff80000010ab58:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ab5b	kernel.asm	/^ffff80000010ab5b:	83 ca 09             	or     $0x9,%edx$/;"	l
ffff80000010ab5e	kernel.asm	/^ffff80000010ab5e:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ab61	kernel.asm	/^ffff80000010ab61:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ab65	kernel.asm	/^ffff80000010ab65:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ab68	kernel.asm	/^ffff80000010ab68:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ab6b	kernel.asm	/^ffff80000010ab6b:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ab6f	kernel.asm	/^ffff80000010ab6f:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010ab72	kernel.asm	/^ffff80000010ab72:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ab75	kernel.asm	/^ffff80000010ab75:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ab79	kernel.asm	/^ffff80000010ab79:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ab7c	kernel.asm	/^ffff80000010ab7c:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ab7f	kernel.asm	/^ffff80000010ab7f:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab83	kernel.asm	/^ffff80000010ab83:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ab86	kernel.asm	/^ffff80000010ab86:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab89	kernel.asm	/^ffff80000010ab89:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab8d	kernel.asm	/^ffff80000010ab8d:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ab90	kernel.asm	/^ffff80000010ab90:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab93	kernel.asm	/^ffff80000010ab93:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ab97	kernel.asm	/^ffff80000010ab97:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010ab9a	kernel.asm	/^ffff80000010ab9a:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ab9d	kernel.asm	/^ffff80000010ab9d:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010aba1	kernel.asm	/^ffff80000010aba1:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010aba4	kernel.asm	/^ffff80000010aba4:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010aba7	kernel.asm	/^ffff80000010aba7:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010abab	kernel.asm	/^ffff80000010abab:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010abae	kernel.asm	/^ffff80000010abae:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010abb1	kernel.asm	/^ffff80000010abb1:	88 48 07             	mov    %cl,0x7(%rax)$/;"	l
ffff80000010abb4	kernel.asm	/^ffff80000010abb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010abb8	kernel.asm	/^ffff80000010abb8:	48 83 c0 40          	add    $0x40,%rax$/;"	l
ffff80000010abbc	kernel.asm	/^ffff80000010abbc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010abc0	kernel.asm	/^ffff80000010abc0:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010abc4	kernel.asm	/^ffff80000010abc4:	41 89 d1             	mov    %edx,%r9d$/;"	l
ffff80000010abc7	kernel.asm	/^ffff80000010abc7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010abcb	kernel.asm	/^ffff80000010abcb:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010abcf	kernel.asm	/^ffff80000010abcf:	41 89 d0             	mov    %edx,%r8d$/;"	l
ffff80000010abd2	kernel.asm	/^ffff80000010abd2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010abd6	kernel.asm	/^ffff80000010abd6:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010abda	kernel.asm	/^ffff80000010abda:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010abde	kernel.asm	/^ffff80000010abde:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010abe0	kernel.asm	/^ffff80000010abe0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010abe4	kernel.asm	/^ffff80000010abe4:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010abe8	kernel.asm	/^ffff80000010abe8:	48 c1 ea 3c          	shr    $0x3c,%rdx$/;"	l
ffff80000010abec	kernel.asm	/^ffff80000010abec:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010abee	kernel.asm	/^ffff80000010abee:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010abf1	kernel.asm	/^ffff80000010abf1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010abf5	kernel.asm	/^ffff80000010abf5:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010abf9	kernel.asm	/^ffff80000010abf9:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010abfd	kernel.asm	/^ffff80000010abfd:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010abff	kernel.asm	/^ffff80000010abff:	66 44 89 08          	mov    %r9w,(%rax)$/;"	l
ffff80000010ac03	kernel.asm	/^ffff80000010ac03:	66 44 89 40 02       	mov    %r8w,0x2(%rax)$/;"	l
ffff80000010ac08	kernel.asm	/^ffff80000010ac08:	40 88 78 04          	mov    %dil,0x4(%rax)$/;"	l
ffff80000010ac0c	kernel.asm	/^ffff80000010ac0c:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ac10	kernel.asm	/^ffff80000010ac10:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ac13	kernel.asm	/^ffff80000010ac13:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ac16	kernel.asm	/^ffff80000010ac16:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ac1a	kernel.asm	/^ffff80000010ac1a:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ac1d	kernel.asm	/^ffff80000010ac1d:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ac20	kernel.asm	/^ffff80000010ac20:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ac24	kernel.asm	/^ffff80000010ac24:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010ac27	kernel.asm	/^ffff80000010ac27:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ac2a	kernel.asm	/^ffff80000010ac2a:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ac2e	kernel.asm	/^ffff80000010ac2e:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ac31	kernel.asm	/^ffff80000010ac31:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ac34	kernel.asm	/^ffff80000010ac34:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010ac37	kernel.asm	/^ffff80000010ac37:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ac3b	kernel.asm	/^ffff80000010ac3b:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ac3e	kernel.asm	/^ffff80000010ac3e:	09 ca                	or     %ecx,%edx$/;"	l
ffff80000010ac40	kernel.asm	/^ffff80000010ac40:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ac43	kernel.asm	/^ffff80000010ac43:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ac47	kernel.asm	/^ffff80000010ac47:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ac4a	kernel.asm	/^ffff80000010ac4a:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ac4d	kernel.asm	/^ffff80000010ac4d:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ac51	kernel.asm	/^ffff80000010ac51:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010ac54	kernel.asm	/^ffff80000010ac54:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ac57	kernel.asm	/^ffff80000010ac57:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ac5b	kernel.asm	/^ffff80000010ac5b:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010ac5e	kernel.asm	/^ffff80000010ac5e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ac61	kernel.asm	/^ffff80000010ac61:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ac65	kernel.asm	/^ffff80000010ac65:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ac68	kernel.asm	/^ffff80000010ac68:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ac6b	kernel.asm	/^ffff80000010ac6b:	40 88 70 07          	mov    %sil,0x7(%rax)$/;"	l
ffff80000010ac6f	kernel.asm	/^ffff80000010ac6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ac73	kernel.asm	/^ffff80000010ac73:	be 48 00 00 00       	mov    $0x48,%esi$/;"	l
ffff80000010ac78	kernel.asm	/^ffff80000010ac78:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ac7b	kernel.asm	/^ffff80000010ac7b:	48 b8 e4 a6 10 00 00 	movabs $0xffff80000010a6e4,%rax$/;"	l
ffff80000010ac82	kernel.asm	/^ffff80000010ac82:	80 ff ff $/;"	l
ffff80000010ac85	kernel.asm	/^ffff80000010ac85:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac87	kernel.asm	/^ffff80000010ac87:	bf 38 00 00 00       	mov    $0x38,%edi$/;"	l
ffff80000010ac8c	kernel.asm	/^ffff80000010ac8c:	48 b8 33 a7 10 00 00 	movabs $0xffff80000010a733,%rax$/;"	l
ffff80000010ac93	kernel.asm	/^ffff80000010ac93:	80 ff ff $/;"	l
ffff80000010ac96	kernel.asm	/^ffff80000010ac96:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac98	kernel.asm	/^ffff80000010ac98:	90                   	nop$/;"	l
ffff80000010ac99	kernel.asm	/^ffff80000010ac99:	c9                   	leaveq $/;"	l
ffff80000010ac9a	kernel.asm	/^ffff80000010ac9a:	c3                   	retq   $/;"	l
ffff80000010ac9b	kernel.asm	/^ffff80000010ac9b <setupkvm>:$/;"	l
ffff80000010ac9b	kernel.asm	/^ffff80000010ac9b:	55                   	push   %rbp$/;"	l
ffff80000010ac9c	kernel.asm	/^ffff80000010ac9c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ac9f	kernel.asm	/^ffff80000010ac9f:	53                   	push   %rbx$/;"	l
ffff80000010aca0	kernel.asm	/^ffff80000010aca0:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010aca4	kernel.asm	/^ffff80000010aca4:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010acab	kernel.asm	/^ffff80000010acab:	80 ff ff $/;"	l
ffff80000010acae	kernel.asm	/^ffff80000010acae:	ff d0                	callq  *%rax$/;"	l
ffff80000010acb0	kernel.asm	/^ffff80000010acb0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010acb4	kernel.asm	/^ffff80000010acb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010acb8	kernel.asm	/^ffff80000010acb8:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010acbd	kernel.asm	/^ffff80000010acbd:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010acc2	kernel.asm	/^ffff80000010acc2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010acc5	kernel.asm	/^ffff80000010acc5:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010accc	kernel.asm	/^ffff80000010accc:	80 ff ff $/;"	l
ffff80000010accf	kernel.asm	/^ffff80000010accf:	ff d0                	callq  *%rax$/;"	l
ffff80000010acd1	kernel.asm	/^ffff80000010acd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010acd5	kernel.asm	/^ffff80000010acd5:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010acdc	kernel.asm	/^ffff80000010acdc:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010ace3	kernel.asm	/^ffff80000010ace3:	80 ff ff $/;"	l
ffff80000010ace6	kernel.asm	/^ffff80000010ace6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ace9	kernel.asm	/^ffff80000010ace9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010acec	kernel.asm	/^ffff80000010acec:	48 b8 61 a7 10 00 00 	movabs $0xffff80000010a761,%rax$/;"	l
ffff80000010acf3	kernel.asm	/^ffff80000010acf3:	80 ff ff $/;"	l
ffff80000010acf6	kernel.asm	/^ffff80000010acf6:	ff d0                	callq  *%rax$/;"	l
ffff80000010acf8	kernel.asm	/^ffff80000010acf8:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010acfc	kernel.asm	/^ffff80000010acfc:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010acff	kernel.asm	/^ffff80000010acff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ad03	kernel.asm	/^ffff80000010ad03:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff80000010ad07	kernel.asm	/^ffff80000010ad07:	5b                   	pop    %rbx$/;"	l
ffff80000010ad08	kernel.asm	/^ffff80000010ad08:	5d                   	pop    %rbp$/;"	l
ffff80000010ad09	kernel.asm	/^ffff80000010ad09:	c3                   	retq   $/;"	l
ffff80000010ad0a	kernel.asm	/^ffff80000010ad0a <kvmalloc>:$/;"	l
ffff80000010ad0a	kernel.asm	/^ffff80000010ad0a:	55                   	push   %rbp$/;"	l
ffff80000010ad0b	kernel.asm	/^ffff80000010ad0b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ad0e	kernel.asm	/^ffff80000010ad0e:	53                   	push   %rbx$/;"	l
ffff80000010ad0f	kernel.asm	/^ffff80000010ad0f:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010ad13	kernel.asm	/^ffff80000010ad13:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010ad1a	kernel.asm	/^ffff80000010ad1a:	80 ff ff $/;"	l
ffff80000010ad1d	kernel.asm	/^ffff80000010ad1d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad1f	kernel.asm	/^ffff80000010ad1f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010ad22	kernel.asm	/^ffff80000010ad22:	48 b8 d8 b3 11 00 00 	movabs $0xffff80000011b3d8,%rax$/;"	l
ffff80000010ad29	kernel.asm	/^ffff80000010ad29:	80 ff ff $/;"	l
ffff80000010ad2c	kernel.asm	/^ffff80000010ad2c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010ad2f	kernel.asm	/^ffff80000010ad2f:	48 b8 d8 b3 11 00 00 	movabs $0xffff80000011b3d8,%rax$/;"	l
ffff80000010ad36	kernel.asm	/^ffff80000010ad36:	80 ff ff $/;"	l
ffff80000010ad39	kernel.asm	/^ffff80000010ad39:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ad3c	kernel.asm	/^ffff80000010ad3c:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010ad41	kernel.asm	/^ffff80000010ad41:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ad46	kernel.asm	/^ffff80000010ad46:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ad49	kernel.asm	/^ffff80000010ad49:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010ad50	kernel.asm	/^ffff80000010ad50:	80 ff ff $/;"	l
ffff80000010ad53	kernel.asm	/^ffff80000010ad53:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad55	kernel.asm	/^ffff80000010ad55:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010ad5c	kernel.asm	/^ffff80000010ad5c:	80 ff ff $/;"	l
ffff80000010ad5f	kernel.asm	/^ffff80000010ad5f:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad61	kernel.asm	/^ffff80000010ad61:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010ad64	kernel.asm	/^ffff80000010ad64:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010ad6b	kernel.asm	/^ffff80000010ad6b:	80 ff ff $/;"	l
ffff80000010ad6e	kernel.asm	/^ffff80000010ad6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010ad71	kernel.asm	/^ffff80000010ad71:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010ad78	kernel.asm	/^ffff80000010ad78:	80 ff ff $/;"	l
ffff80000010ad7b	kernel.asm	/^ffff80000010ad7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ad7e	kernel.asm	/^ffff80000010ad7e:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010ad83	kernel.asm	/^ffff80000010ad83:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ad88	kernel.asm	/^ffff80000010ad88:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ad8b	kernel.asm	/^ffff80000010ad8b:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010ad92	kernel.asm	/^ffff80000010ad92:	80 ff ff $/;"	l
ffff80000010ad95	kernel.asm	/^ffff80000010ad95:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad97	kernel.asm	/^ffff80000010ad97:	48 b8 d8 b3 11 00 00 	movabs $0xffff80000011b3d8,%rax$/;"	l
ffff80000010ad9e	kernel.asm	/^ffff80000010ad9e:	80 ff ff $/;"	l
ffff80000010ada1	kernel.asm	/^ffff80000010ada1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ada4	kernel.asm	/^ffff80000010ada4:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010adab	kernel.asm	/^ffff80000010adab:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010adb2	kernel.asm	/^ffff80000010adb2:	80 ff ff $/;"	l
ffff80000010adb5	kernel.asm	/^ffff80000010adb5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010adb8	kernel.asm	/^ffff80000010adb8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010adbb	kernel.asm	/^ffff80000010adbb:	48 b8 61 a7 10 00 00 	movabs $0xffff80000010a761,%rax$/;"	l
ffff80000010adc2	kernel.asm	/^ffff80000010adc2:	80 ff ff $/;"	l
ffff80000010adc5	kernel.asm	/^ffff80000010adc5:	ff d0                	callq  *%rax$/;"	l
ffff80000010adc7	kernel.asm	/^ffff80000010adc7:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010adcb	kernel.asm	/^ffff80000010adcb:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010adce	kernel.asm	/^ffff80000010adce:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010add5	kernel.asm	/^ffff80000010add5:	80 ff ff $/;"	l
ffff80000010add8	kernel.asm	/^ffff80000010add8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010addb	kernel.asm	/^ffff80000010addb:	48 c7 00 83 00 00 00 	movq   $0x83,(%rax)$/;"	l
ffff80000010ade2	kernel.asm	/^ffff80000010ade2:	48 b8 e0 b3 11 00 00 	movabs $0xffff80000011b3e0,%rax$/;"	l
ffff80000010ade9	kernel.asm	/^ffff80000010ade9:	80 ff ff $/;"	l
ffff80000010adec	kernel.asm	/^ffff80000010adec:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010adef	kernel.asm	/^ffff80000010adef:	48 83 c0 18          	add    $0x18,%rax$/;"	l
ffff80000010adf3	kernel.asm	/^ffff80000010adf3:	b9 9b 00 00 c0       	mov    $0xc000009b,%ecx$/;"	l
ffff80000010adf8	kernel.asm	/^ffff80000010adf8:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff80000010adfb	kernel.asm	/^ffff80000010adfb:	48 b8 0f ae 10 00 00 	movabs $0xffff80000010ae0f,%rax$/;"	l
ffff80000010ae02	kernel.asm	/^ffff80000010ae02:	80 ff ff $/;"	l
ffff80000010ae05	kernel.asm	/^ffff80000010ae05:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae07	kernel.asm	/^ffff80000010ae07:	90                   	nop$/;"	l
ffff80000010ae08	kernel.asm	/^ffff80000010ae08:	48 83 c4 08          	add    $0x8,%rsp$/;"	l
ffff80000010ae0c	kernel.asm	/^ffff80000010ae0c:	5b                   	pop    %rbx$/;"	l
ffff80000010ae0d	kernel.asm	/^ffff80000010ae0d:	5d                   	pop    %rbp$/;"	l
ffff80000010ae0e	kernel.asm	/^ffff80000010ae0e:	c3                   	retq   $/;"	l
ffff80000010ae0f	kernel.asm	/^ffff80000010ae0f <switchkvm>:$/;"	l
ffff80000010ae0f	kernel.asm	/^ffff80000010ae0f:	55                   	push   %rbp$/;"	l
ffff80000010ae10	kernel.asm	/^ffff80000010ae10:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ae13	kernel.asm	/^ffff80000010ae13:	48 b8 d8 b3 11 00 00 	movabs $0xffff80000011b3d8,%rax$/;"	l
ffff80000010ae1a	kernel.asm	/^ffff80000010ae1a:	80 ff ff $/;"	l
ffff80000010ae1d	kernel.asm	/^ffff80000010ae1d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ae20	kernel.asm	/^ffff80000010ae20:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ae23	kernel.asm	/^ffff80000010ae23:	48 b8 61 a7 10 00 00 	movabs $0xffff80000010a761,%rax$/;"	l
ffff80000010ae2a	kernel.asm	/^ffff80000010ae2a:	80 ff ff $/;"	l
ffff80000010ae2d	kernel.asm	/^ffff80000010ae2d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae2f	kernel.asm	/^ffff80000010ae2f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ae32	kernel.asm	/^ffff80000010ae32:	48 b8 4b a7 10 00 00 	movabs $0xffff80000010a74b,%rax$/;"	l
ffff80000010ae39	kernel.asm	/^ffff80000010ae39:	80 ff ff $/;"	l
ffff80000010ae3c	kernel.asm	/^ffff80000010ae3c:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae3e	kernel.asm	/^ffff80000010ae3e:	90                   	nop$/;"	l
ffff80000010ae3f	kernel.asm	/^ffff80000010ae3f:	5d                   	pop    %rbp$/;"	l
ffff80000010ae40	kernel.asm	/^ffff80000010ae40:	c3                   	retq   $/;"	l
ffff80000010ae41	kernel.asm	/^ffff80000010ae41 <switchuvm>:$/;"	l
ffff80000010ae41	kernel.asm	/^ffff80000010ae41:	55                   	push   %rbp$/;"	l
ffff80000010ae42	kernel.asm	/^ffff80000010ae42:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ae45	kernel.asm	/^ffff80000010ae45:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010ae49	kernel.asm	/^ffff80000010ae49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010ae4d	kernel.asm	/^ffff80000010ae4d:	48 b8 df 74 10 00 00 	movabs $0xffff8000001074df,%rax$/;"	l
ffff80000010ae54	kernel.asm	/^ffff80000010ae54:	80 ff ff $/;"	l
ffff80000010ae57	kernel.asm	/^ffff80000010ae57:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae59	kernel.asm	/^ffff80000010ae59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ae5d	kernel.asm	/^ffff80000010ae5d:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010ae61	kernel.asm	/^ffff80000010ae61:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010ae64	kernel.asm	/^ffff80000010ae64:	75 16                	jne    ffff80000010ae7c <switchuvm+0x3b>$/;"	l
ffff80000010ae66	kernel.asm	/^ffff80000010ae66:	48 bf f8 c2 10 00 00 	movabs $0xffff80000010c2f8,%rdi$/;"	l
ffff80000010ae6d	kernel.asm	/^ffff80000010ae6d:	80 ff ff $/;"	l
ffff80000010ae70	kernel.asm	/^ffff80000010ae70:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010ae77	kernel.asm	/^ffff80000010ae77:	80 ff ff $/;"	l
ffff80000010ae7a	kernel.asm	/^ffff80000010ae7a:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae7c	kernel.asm	/^ffff80000010ae7c:	64 48 8b 04 25 f0 ff 	mov    %fs:0xfffffffffffffff0,%rax$/;"	l
ffff80000010ae83	kernel.asm	/^ffff80000010ae83:	ff ff $/;"	l
ffff80000010ae85	kernel.asm	/^ffff80000010ae85:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax$/;"	l
ffff80000010ae8c	kernel.asm	/^ffff80000010ae8c:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010ae92	kernel.asm	/^ffff80000010ae92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010ae96	kernel.asm	/^ffff80000010ae96:	64 48 8b 04 25 f8 ff 	mov    %fs:0xfffffffffffffff8,%rax$/;"	l
ffff80000010ae9d	kernel.asm	/^ffff80000010ae9d:	ff ff $/;"	l
ffff80000010ae9f	kernel.asm	/^ffff80000010ae9f:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010aea3	kernel.asm	/^ffff80000010aea3:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx$/;"	l
ffff80000010aeaa	kernel.asm	/^ffff80000010aeaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010aeae	kernel.asm	/^ffff80000010aeae:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010aeb3	kernel.asm	/^ffff80000010aeb3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010aeb6	kernel.asm	/^ffff80000010aeb6:	48 b8 80 a7 10 00 00 	movabs $0xffff80000010a780,%rax$/;"	l
ffff80000010aebd	kernel.asm	/^ffff80000010aebd:	80 ff ff $/;"	l
ffff80000010aec0	kernel.asm	/^ffff80000010aec0:	ff d0                	callq  *%rax$/;"	l
ffff80000010aec2	kernel.asm	/^ffff80000010aec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010aec6	kernel.asm	/^ffff80000010aec6:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010aeca	kernel.asm	/^ffff80000010aeca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010aecd	kernel.asm	/^ffff80000010aecd:	48 b8 61 a7 10 00 00 	movabs $0xffff80000010a761,%rax$/;"	l
ffff80000010aed4	kernel.asm	/^ffff80000010aed4:	80 ff ff $/;"	l
ffff80000010aed7	kernel.asm	/^ffff80000010aed7:	ff d0                	callq  *%rax$/;"	l
ffff80000010aed9	kernel.asm	/^ffff80000010aed9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010aedc	kernel.asm	/^ffff80000010aedc:	48 b8 4b a7 10 00 00 	movabs $0xffff80000010a74b,%rax$/;"	l
ffff80000010aee3	kernel.asm	/^ffff80000010aee3:	80 ff ff $/;"	l
ffff80000010aee6	kernel.asm	/^ffff80000010aee6:	ff d0                	callq  *%rax$/;"	l
ffff80000010aee8	kernel.asm	/^ffff80000010aee8:	48 b8 59 75 10 00 00 	movabs $0xffff800000107559,%rax$/;"	l
ffff80000010aeef	kernel.asm	/^ffff80000010aeef:	80 ff ff $/;"	l
ffff80000010aef2	kernel.asm	/^ffff80000010aef2:	ff d0                	callq  *%rax$/;"	l
ffff80000010aef4	kernel.asm	/^ffff80000010aef4:	90                   	nop$/;"	l
ffff80000010aef5	kernel.asm	/^ffff80000010aef5:	c9                   	leaveq $/;"	l
ffff80000010aef6	kernel.asm	/^ffff80000010aef6:	c3                   	retq   $/;"	l
ffff80000010aef7	kernel.asm	/^ffff80000010aef7 <walkpgdir>:$/;"	l
ffff80000010aef7	kernel.asm	/^ffff80000010aef7:	55                   	push   %rbp$/;"	l
ffff80000010aef8	kernel.asm	/^ffff80000010aef8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010aefb	kernel.asm	/^ffff80000010aefb:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010aeff	kernel.asm	/^ffff80000010aeff:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010af03	kernel.asm	/^ffff80000010af03:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ffff80000010af07	kernel.asm	/^ffff80000010af07:	89 55 bc             	mov    %edx,-0x44(%rbp)$/;"	l
ffff80000010af0a	kernel.asm	/^ffff80000010af0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010af0e	kernel.asm	/^ffff80000010af0e:	48 c1 e8 27          	shr    $0x27,%rax$/;"	l
ffff80000010af12	kernel.asm	/^ffff80000010af12:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010af17	kernel.asm	/^ffff80000010af17:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010af1e	kernel.asm	/^ffff80000010af1e:	00 $/;"	l
ffff80000010af1f	kernel.asm	/^ffff80000010af1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010af23	kernel.asm	/^ffff80000010af23:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010af26	kernel.asm	/^ffff80000010af26:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010af2a	kernel.asm	/^ffff80000010af2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010af2e	kernel.asm	/^ffff80000010af2e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010af31	kernel.asm	/^ffff80000010af31:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010af34	kernel.asm	/^ffff80000010af34:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010af37	kernel.asm	/^ffff80000010af37:	74 23                	je     ffff80000010af5c <walkpgdir+0x65>$/;"	l
ffff80000010af39	kernel.asm	/^ffff80000010af39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010af3d	kernel.asm	/^ffff80000010af3d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010af40	kernel.asm	/^ffff80000010af40:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010af46	kernel.asm	/^ffff80000010af46:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010af49	kernel.asm	/^ffff80000010af49:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010af50	kernel.asm	/^ffff80000010af50:	80 ff ff $/;"	l
ffff80000010af53	kernel.asm	/^ffff80000010af53:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010af56	kernel.asm	/^ffff80000010af56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010af5a	kernel.asm	/^ffff80000010af5a:	eb 63                	jmp    ffff80000010afbf <walkpgdir+0xc8>$/;"	l
ffff80000010af5c	kernel.asm	/^ffff80000010af5c:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010af60	kernel.asm	/^ffff80000010af60:	74 17                	je     ffff80000010af79 <walkpgdir+0x82>$/;"	l
ffff80000010af62	kernel.asm	/^ffff80000010af62:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010af69	kernel.asm	/^ffff80000010af69:	80 ff ff $/;"	l
ffff80000010af6c	kernel.asm	/^ffff80000010af6c:	ff d0                	callq  *%rax$/;"	l
ffff80000010af6e	kernel.asm	/^ffff80000010af6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010af72	kernel.asm	/^ffff80000010af72:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010af77	kernel.asm	/^ffff80000010af77:	75 0a                	jne    ffff80000010af83 <walkpgdir+0x8c>$/;"	l
ffff80000010af79	kernel.asm	/^ffff80000010af79:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010af7e	kernel.asm	/^ffff80000010af7e:	e9 bf 01 00 00       	jmpq   ffff80000010b142 <walkpgdir+0x24b>$/;"	l
ffff80000010af83	kernel.asm	/^ffff80000010af83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010af87	kernel.asm	/^ffff80000010af87:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010af8c	kernel.asm	/^ffff80000010af8c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010af91	kernel.asm	/^ffff80000010af91:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010af94	kernel.asm	/^ffff80000010af94:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010af9b	kernel.asm	/^ffff80000010af9b:	80 ff ff $/;"	l
ffff80000010af9e	kernel.asm	/^ffff80000010af9e:	ff d0                	callq  *%rax$/;"	l
ffff80000010afa0	kernel.asm	/^ffff80000010afa0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010afa4	kernel.asm	/^ffff80000010afa4:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010afab	kernel.asm	/^ffff80000010afab:	80 00 00 $/;"	l
ffff80000010afae	kernel.asm	/^ffff80000010afae:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010afb1	kernel.asm	/^ffff80000010afb1:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010afb5	kernel.asm	/^ffff80000010afb5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010afb8	kernel.asm	/^ffff80000010afb8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010afbc	kernel.asm	/^ffff80000010afbc:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010afbf	kernel.asm	/^ffff80000010afbf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010afc3	kernel.asm	/^ffff80000010afc3:	48 c1 e8 1e          	shr    $0x1e,%rax$/;"	l
ffff80000010afc7	kernel.asm	/^ffff80000010afc7:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010afcc	kernel.asm	/^ffff80000010afcc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010afd3	kernel.asm	/^ffff80000010afd3:	00 $/;"	l
ffff80000010afd4	kernel.asm	/^ffff80000010afd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010afd8	kernel.asm	/^ffff80000010afd8:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010afdb	kernel.asm	/^ffff80000010afdb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010afdf	kernel.asm	/^ffff80000010afdf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010afe3	kernel.asm	/^ffff80000010afe3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010afe6	kernel.asm	/^ffff80000010afe6:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010afe9	kernel.asm	/^ffff80000010afe9:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010afec	kernel.asm	/^ffff80000010afec:	74 23                	je     ffff80000010b011 <walkpgdir+0x11a>$/;"	l
ffff80000010afee	kernel.asm	/^ffff80000010afee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010aff2	kernel.asm	/^ffff80000010aff2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010aff5	kernel.asm	/^ffff80000010aff5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010affb	kernel.asm	/^ffff80000010affb:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010affe	kernel.asm	/^ffff80000010affe:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b005	kernel.asm	/^ffff80000010b005:	80 ff ff $/;"	l
ffff80000010b008	kernel.asm	/^ffff80000010b008:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b00b	kernel.asm	/^ffff80000010b00b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b00f	kernel.asm	/^ffff80000010b00f:	eb 63                	jmp    ffff80000010b074 <walkpgdir+0x17d>$/;"	l
ffff80000010b011	kernel.asm	/^ffff80000010b011:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010b015	kernel.asm	/^ffff80000010b015:	74 17                	je     ffff80000010b02e <walkpgdir+0x137>$/;"	l
ffff80000010b017	kernel.asm	/^ffff80000010b017:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010b01e	kernel.asm	/^ffff80000010b01e:	80 ff ff $/;"	l
ffff80000010b021	kernel.asm	/^ffff80000010b021:	ff d0                	callq  *%rax$/;"	l
ffff80000010b023	kernel.asm	/^ffff80000010b023:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b027	kernel.asm	/^ffff80000010b027:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b02c	kernel.asm	/^ffff80000010b02c:	75 0a                	jne    ffff80000010b038 <walkpgdir+0x141>$/;"	l
ffff80000010b02e	kernel.asm	/^ffff80000010b02e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b033	kernel.asm	/^ffff80000010b033:	e9 0a 01 00 00       	jmpq   ffff80000010b142 <walkpgdir+0x24b>$/;"	l
ffff80000010b038	kernel.asm	/^ffff80000010b038:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b03c	kernel.asm	/^ffff80000010b03c:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b041	kernel.asm	/^ffff80000010b041:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b046	kernel.asm	/^ffff80000010b046:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b049	kernel.asm	/^ffff80000010b049:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010b050	kernel.asm	/^ffff80000010b050:	80 ff ff $/;"	l
ffff80000010b053	kernel.asm	/^ffff80000010b053:	ff d0                	callq  *%rax$/;"	l
ffff80000010b055	kernel.asm	/^ffff80000010b055:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010b059	kernel.asm	/^ffff80000010b059:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b060	kernel.asm	/^ffff80000010b060:	80 00 00 $/;"	l
ffff80000010b063	kernel.asm	/^ffff80000010b063:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b066	kernel.asm	/^ffff80000010b066:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010b06a	kernel.asm	/^ffff80000010b06a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b06d	kernel.asm	/^ffff80000010b06d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b071	kernel.asm	/^ffff80000010b071:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010b074	kernel.asm	/^ffff80000010b074:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010b078	kernel.asm	/^ffff80000010b078:	48 c1 e8 15          	shr    $0x15,%rax$/;"	l
ffff80000010b07c	kernel.asm	/^ffff80000010b07c:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010b081	kernel.asm	/^ffff80000010b081:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b088	kernel.asm	/^ffff80000010b088:	00 $/;"	l
ffff80000010b089	kernel.asm	/^ffff80000010b089:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b08d	kernel.asm	/^ffff80000010b08d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b090	kernel.asm	/^ffff80000010b090:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010b094	kernel.asm	/^ffff80000010b094:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b098	kernel.asm	/^ffff80000010b098:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b09b	kernel.asm	/^ffff80000010b09b:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b09e	kernel.asm	/^ffff80000010b09e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b0a1	kernel.asm	/^ffff80000010b0a1:	74 23                	je     ffff80000010b0c6 <walkpgdir+0x1cf>$/;"	l
ffff80000010b0a3	kernel.asm	/^ffff80000010b0a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b0a7	kernel.asm	/^ffff80000010b0a7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b0aa	kernel.asm	/^ffff80000010b0aa:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b0b0	kernel.asm	/^ffff80000010b0b0:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b0b3	kernel.asm	/^ffff80000010b0b3:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b0ba	kernel.asm	/^ffff80000010b0ba:	80 ff ff $/;"	l
ffff80000010b0bd	kernel.asm	/^ffff80000010b0bd:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b0c0	kernel.asm	/^ffff80000010b0c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b0c4	kernel.asm	/^ffff80000010b0c4:	eb 60                	jmp    ffff80000010b126 <walkpgdir+0x22f>$/;"	l
ffff80000010b0c6	kernel.asm	/^ffff80000010b0c6:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010b0ca	kernel.asm	/^ffff80000010b0ca:	74 17                	je     ffff80000010b0e3 <walkpgdir+0x1ec>$/;"	l
ffff80000010b0cc	kernel.asm	/^ffff80000010b0cc:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010b0d3	kernel.asm	/^ffff80000010b0d3:	80 ff ff $/;"	l
ffff80000010b0d6	kernel.asm	/^ffff80000010b0d6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0d8	kernel.asm	/^ffff80000010b0d8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b0dc	kernel.asm	/^ffff80000010b0dc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010b0e1	kernel.asm	/^ffff80000010b0e1:	75 07                	jne    ffff80000010b0ea <walkpgdir+0x1f3>$/;"	l
ffff80000010b0e3	kernel.asm	/^ffff80000010b0e3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b0e8	kernel.asm	/^ffff80000010b0e8:	eb 58                	jmp    ffff80000010b142 <walkpgdir+0x24b>$/;"	l
ffff80000010b0ea	kernel.asm	/^ffff80000010b0ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b0ee	kernel.asm	/^ffff80000010b0ee:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b0f3	kernel.asm	/^ffff80000010b0f3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b0f8	kernel.asm	/^ffff80000010b0f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b0fb	kernel.asm	/^ffff80000010b0fb:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010b102	kernel.asm	/^ffff80000010b102:	80 ff ff $/;"	l
ffff80000010b105	kernel.asm	/^ffff80000010b105:	ff d0                	callq  *%rax$/;"	l
ffff80000010b107	kernel.asm	/^ffff80000010b107:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010b10b	kernel.asm	/^ffff80000010b10b:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b112	kernel.asm	/^ffff80000010b112:	80 00 00 $/;"	l
ffff80000010b115	kernel.asm	/^ffff80000010b115:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b118	kernel.asm	/^ffff80000010b118:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010b11c	kernel.asm	/^ffff80000010b11c:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b11f	kernel.asm	/^ffff80000010b11f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b123	kernel.asm	/^ffff80000010b123:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010b126	kernel.asm	/^ffff80000010b126:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010b12a	kernel.asm	/^ffff80000010b12a:	48 c1 e8 0c          	shr    $0xc,%rax$/;"	l
ffff80000010b12e	kernel.asm	/^ffff80000010b12e:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010b133	kernel.asm	/^ffff80000010b133:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b13a	kernel.asm	/^ffff80000010b13a:	00 $/;"	l
ffff80000010b13b	kernel.asm	/^ffff80000010b13b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b13f	kernel.asm	/^ffff80000010b13f:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b142	kernel.asm	/^ffff80000010b142:	c9                   	leaveq $/;"	l
ffff80000010b143	kernel.asm	/^ffff80000010b143:	c3                   	retq   $/;"	l
ffff80000010b144	kernel.asm	/^ffff80000010b144 <mappages>:$/;"	l
ffff80000010b144	kernel.asm	/^ffff80000010b144:	55                   	push   %rbp$/;"	l
ffff80000010b145	kernel.asm	/^ffff80000010b145:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b148	kernel.asm	/^ffff80000010b148:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010b14c	kernel.asm	/^ffff80000010b14c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010b150	kernel.asm	/^ffff80000010b150:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010b154	kernel.asm	/^ffff80000010b154:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010b158	kernel.asm	/^ffff80000010b158:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)$/;"	l
ffff80000010b15c	kernel.asm	/^ffff80000010b15c:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)$/;"	l
ffff80000010b160	kernel.asm	/^ffff80000010b160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b164	kernel.asm	/^ffff80000010b164:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b16a	kernel.asm	/^ffff80000010b16a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b16e	kernel.asm	/^ffff80000010b16e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010b172	kernel.asm	/^ffff80000010b172:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b176	kernel.asm	/^ffff80000010b176:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b179	kernel.asm	/^ffff80000010b179:	48 83 e8 01          	sub    $0x1,%rax$/;"	l
ffff80000010b17d	kernel.asm	/^ffff80000010b17d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b183	kernel.asm	/^ffff80000010b183:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b187	kernel.asm	/^ffff80000010b187:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010b18b	kernel.asm	/^ffff80000010b18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b18f	kernel.asm	/^ffff80000010b18f:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010b194	kernel.asm	/^ffff80000010b194:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b197	kernel.asm	/^ffff80000010b197:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b19a	kernel.asm	/^ffff80000010b19a:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010b1a1	kernel.asm	/^ffff80000010b1a1:	80 ff ff $/;"	l
ffff80000010b1a4	kernel.asm	/^ffff80000010b1a4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1a6	kernel.asm	/^ffff80000010b1a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b1aa	kernel.asm	/^ffff80000010b1aa:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010b1af	kernel.asm	/^ffff80000010b1af:	75 07                	jne    ffff80000010b1b8 <mappages+0x74>$/;"	l
ffff80000010b1b1	kernel.asm	/^ffff80000010b1b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010b1b6	kernel.asm	/^ffff80000010b1b6:	eb 61                	jmp    ffff80000010b219 <mappages+0xd5>$/;"	l
ffff80000010b1b8	kernel.asm	/^ffff80000010b1b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b1bc	kernel.asm	/^ffff80000010b1bc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b1bf	kernel.asm	/^ffff80000010b1bf:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b1c2	kernel.asm	/^ffff80000010b1c2:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b1c5	kernel.asm	/^ffff80000010b1c5:	74 16                	je     ffff80000010b1dd <mappages+0x99>$/;"	l
ffff80000010b1c7	kernel.asm	/^ffff80000010b1c7:	48 bf 0c c3 10 00 00 	movabs $0xffff80000010c30c,%rdi$/;"	l
ffff80000010b1ce	kernel.asm	/^ffff80000010b1ce:	80 ff ff $/;"	l
ffff80000010b1d1	kernel.asm	/^ffff80000010b1d1:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b1d8	kernel.asm	/^ffff80000010b1d8:	80 ff ff $/;"	l
ffff80000010b1db	kernel.asm	/^ffff80000010b1db:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1dd	kernel.asm	/^ffff80000010b1dd:	8b 45 bc             	mov    -0x44(%rbp),%eax$/;"	l
ffff80000010b1e0	kernel.asm	/^ffff80000010b1e0:	48 98                	cltq   $/;"	l
ffff80000010b1e2	kernel.asm	/^ffff80000010b1e2:	48 0b 45 c0          	or     -0x40(%rbp),%rax$/;"	l
ffff80000010b1e6	kernel.asm	/^ffff80000010b1e6:	48 83 c8 01          	or     $0x1,%rax$/;"	l
ffff80000010b1ea	kernel.asm	/^ffff80000010b1ea:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b1ed	kernel.asm	/^ffff80000010b1ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b1f1	kernel.asm	/^ffff80000010b1f1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010b1f4	kernel.asm	/^ffff80000010b1f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b1f8	kernel.asm	/^ffff80000010b1f8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010b1fc	kernel.asm	/^ffff80000010b1fc:	74 15                	je     ffff80000010b213 <mappages+0xcf>$/;"	l
ffff80000010b1fe	kernel.asm	/^ffff80000010b1fe:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010b205	kernel.asm	/^ffff80000010b205:	00 $/;"	l
ffff80000010b206	kernel.asm	/^ffff80000010b206:	48 81 45 c0 00 10 00 	addq   $0x1000,-0x40(%rbp)$/;"	l
ffff80000010b20d	kernel.asm	/^ffff80000010b20d:	00 $/;"	l
ffff80000010b20e	kernel.asm	/^ffff80000010b20e:	e9 74 ff ff ff       	jmpq   ffff80000010b187 <mappages+0x43>$/;"	l
ffff80000010b213	kernel.asm	/^ffff80000010b213:	90                   	nop$/;"	l
ffff80000010b214	kernel.asm	/^ffff80000010b214:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b219	kernel.asm	/^ffff80000010b219:	c9                   	leaveq $/;"	l
ffff80000010b21a	kernel.asm	/^ffff80000010b21a:	c3                   	retq   $/;"	l
ffff80000010b21b	kernel.asm	/^ffff80000010b21b <inituvm>:$/;"	l
ffff80000010b21b	kernel.asm	/^ffff80000010b21b:	55                   	push   %rbp$/;"	l
ffff80000010b21c	kernel.asm	/^ffff80000010b21c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b21f	kernel.asm	/^ffff80000010b21f:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010b223	kernel.asm	/^ffff80000010b223:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010b227	kernel.asm	/^ffff80000010b227:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010b22b	kernel.asm	/^ffff80000010b22b:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010b22e	kernel.asm	/^ffff80000010b22e:	81 7d dc ff 0f 00 00 	cmpl   $0xfff,-0x24(%rbp)$/;"	l
ffff80000010b235	kernel.asm	/^ffff80000010b235:	76 16                	jbe    ffff80000010b24d <inituvm+0x32>$/;"	l
ffff80000010b237	kernel.asm	/^ffff80000010b237:	48 bf 12 c3 10 00 00 	movabs $0xffff80000010c312,%rdi$/;"	l
ffff80000010b23e	kernel.asm	/^ffff80000010b23e:	80 ff ff $/;"	l
ffff80000010b241	kernel.asm	/^ffff80000010b241:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b248	kernel.asm	/^ffff80000010b248:	80 ff ff $/;"	l
ffff80000010b24b	kernel.asm	/^ffff80000010b24b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b24d	kernel.asm	/^ffff80000010b24d:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010b254	kernel.asm	/^ffff80000010b254:	80 ff ff $/;"	l
ffff80000010b257	kernel.asm	/^ffff80000010b257:	ff d0                	callq  *%rax$/;"	l
ffff80000010b259	kernel.asm	/^ffff80000010b259:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b25d	kernel.asm	/^ffff80000010b25d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b261	kernel.asm	/^ffff80000010b261:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b266	kernel.asm	/^ffff80000010b266:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b26b	kernel.asm	/^ffff80000010b26b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b26e	kernel.asm	/^ffff80000010b26e:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010b275	kernel.asm	/^ffff80000010b275:	80 ff ff $/;"	l
ffff80000010b278	kernel.asm	/^ffff80000010b278:	ff d0                	callq  *%rax$/;"	l
ffff80000010b27a	kernel.asm	/^ffff80000010b27a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010b27e	kernel.asm	/^ffff80000010b27e:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b285	kernel.asm	/^ffff80000010b285:	80 00 00 $/;"	l
ffff80000010b288	kernel.asm	/^ffff80000010b288:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010b28b	kernel.asm	/^ffff80000010b28b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b28f	kernel.asm	/^ffff80000010b28f:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010b295	kernel.asm	/^ffff80000010b295:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010b298	kernel.asm	/^ffff80000010b298:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b29d	kernel.asm	/^ffff80000010b29d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b2a2	kernel.asm	/^ffff80000010b2a2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b2a5	kernel.asm	/^ffff80000010b2a5:	48 b8 44 b1 10 00 00 	movabs $0xffff80000010b144,%rax$/;"	l
ffff80000010b2ac	kernel.asm	/^ffff80000010b2ac:	80 ff ff $/;"	l
ffff80000010b2af	kernel.asm	/^ffff80000010b2af:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2b1	kernel.asm	/^ffff80000010b2b1:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff80000010b2b4	kernel.asm	/^ffff80000010b2b4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010b2b8	kernel.asm	/^ffff80000010b2b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b2bc	kernel.asm	/^ffff80000010b2bc:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b2bf	kernel.asm	/^ffff80000010b2bf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b2c2	kernel.asm	/^ffff80000010b2c2:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010b2c9	kernel.asm	/^ffff80000010b2c9:	80 ff ff $/;"	l
ffff80000010b2cc	kernel.asm	/^ffff80000010b2cc:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2ce	kernel.asm	/^ffff80000010b2ce:	90                   	nop$/;"	l
ffff80000010b2cf	kernel.asm	/^ffff80000010b2cf:	c9                   	leaveq $/;"	l
ffff80000010b2d0	kernel.asm	/^ffff80000010b2d0:	c3                   	retq   $/;"	l
ffff80000010b2d1	kernel.asm	/^ffff80000010b2d1 <loaduvm>:$/;"	l
ffff80000010b2d1	kernel.asm	/^ffff80000010b2d1:	55                   	push   %rbp$/;"	l
ffff80000010b2d2	kernel.asm	/^ffff80000010b2d2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b2d5	kernel.asm	/^ffff80000010b2d5:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010b2d9	kernel.asm	/^ffff80000010b2d9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010b2dd	kernel.asm	/^ffff80000010b2dd:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010b2e1	kernel.asm	/^ffff80000010b2e1:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010b2e5	kernel.asm	/^ffff80000010b2e5:	89 4d c4             	mov    %ecx,-0x3c(%rbp)$/;"	l
ffff80000010b2e8	kernel.asm	/^ffff80000010b2e8:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)$/;"	l
ffff80000010b2ec	kernel.asm	/^ffff80000010b2ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b2f0	kernel.asm	/^ffff80000010b2f0:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010b2f5	kernel.asm	/^ffff80000010b2f5:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b2f8	kernel.asm	/^ffff80000010b2f8:	74 16                	je     ffff80000010b310 <loaduvm+0x3f>$/;"	l
ffff80000010b2fa	kernel.asm	/^ffff80000010b2fa:	48 bf 30 c3 10 00 00 	movabs $0xffff80000010c330,%rdi$/;"	l
ffff80000010b301	kernel.asm	/^ffff80000010b301:	80 ff ff $/;"	l
ffff80000010b304	kernel.asm	/^ffff80000010b304:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b30b	kernel.asm	/^ffff80000010b30b:	80 ff ff $/;"	l
ffff80000010b30e	kernel.asm	/^ffff80000010b30e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b310	kernel.asm	/^ffff80000010b310:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010b317	kernel.asm	/^ffff80000010b317:	e9 c4 00 00 00       	jmpq   ffff80000010b3e0 <loaduvm+0x10f>$/;"	l
ffff80000010b31c	kernel.asm	/^ffff80000010b31c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010b31f	kernel.asm	/^ffff80000010b31f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b323	kernel.asm	/^ffff80000010b323:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010b327	kernel.asm	/^ffff80000010b327:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b32b	kernel.asm	/^ffff80000010b32b:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010b330	kernel.asm	/^ffff80000010b330:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b333	kernel.asm	/^ffff80000010b333:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b336	kernel.asm	/^ffff80000010b336:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010b33d	kernel.asm	/^ffff80000010b33d:	80 ff ff $/;"	l
ffff80000010b340	kernel.asm	/^ffff80000010b340:	ff d0                	callq  *%rax$/;"	l
ffff80000010b342	kernel.asm	/^ffff80000010b342:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b346	kernel.asm	/^ffff80000010b346:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b34b	kernel.asm	/^ffff80000010b34b:	75 16                	jne    ffff80000010b363 <loaduvm+0x92>$/;"	l
ffff80000010b34d	kernel.asm	/^ffff80000010b34d:	48 bf 53 c3 10 00 00 	movabs $0xffff80000010c353,%rdi$/;"	l
ffff80000010b354	kernel.asm	/^ffff80000010b354:	80 ff ff $/;"	l
ffff80000010b357	kernel.asm	/^ffff80000010b357:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b35e	kernel.asm	/^ffff80000010b35e:	80 ff ff $/;"	l
ffff80000010b361	kernel.asm	/^ffff80000010b361:	ff d0                	callq  *%rax$/;"	l
ffff80000010b363	kernel.asm	/^ffff80000010b363:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b367	kernel.asm	/^ffff80000010b367:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b36a	kernel.asm	/^ffff80000010b36a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b370	kernel.asm	/^ffff80000010b370:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b374	kernel.asm	/^ffff80000010b374:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010b377	kernel.asm	/^ffff80000010b377:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010b37a	kernel.asm	/^ffff80000010b37a:	3d ff 0f 00 00       	cmp    $0xfff,%eax$/;"	l
ffff80000010b37f	kernel.asm	/^ffff80000010b37f:	77 0b                	ja     ffff80000010b38c <loaduvm+0xbb>$/;"	l
ffff80000010b381	kernel.asm	/^ffff80000010b381:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010b384	kernel.asm	/^ffff80000010b384:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010b387	kernel.asm	/^ffff80000010b387:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010b38a	kernel.asm	/^ffff80000010b38a:	eb 07                	jmp    ffff80000010b393 <loaduvm+0xc2>$/;"	l
ffff80000010b38c	kernel.asm	/^ffff80000010b38c:	c7 45 f8 00 10 00 00 	movl   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010b393	kernel.asm	/^ffff80000010b393:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff80000010b396	kernel.asm	/^ffff80000010b396:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b399	kernel.asm	/^ffff80000010b399:	8d 34 02             	lea    (%rdx,%rax,1),%esi$/;"	l
ffff80000010b39c	kernel.asm	/^ffff80000010b39c:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010b3a3	kernel.asm	/^ffff80000010b3a3:	80 ff ff $/;"	l
ffff80000010b3a6	kernel.asm	/^ffff80000010b3a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b3aa	kernel.asm	/^ffff80000010b3aa:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b3ad	kernel.asm	/^ffff80000010b3ad:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b3b0	kernel.asm	/^ffff80000010b3b0:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010b3b3	kernel.asm	/^ffff80000010b3b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b3b7	kernel.asm	/^ffff80000010b3b7:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010b3b9	kernel.asm	/^ffff80000010b3b9:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010b3bb	kernel.asm	/^ffff80000010b3bb:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010b3be	kernel.asm	/^ffff80000010b3be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b3c1	kernel.asm	/^ffff80000010b3c1:	48 b8 1e 2e 10 00 00 	movabs $0xffff800000102e1e,%rax$/;"	l
ffff80000010b3c8	kernel.asm	/^ffff80000010b3c8:	80 ff ff $/;"	l
ffff80000010b3cb	kernel.asm	/^ffff80000010b3cb:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3cd	kernel.asm	/^ffff80000010b3cd:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff80000010b3d0	kernel.asm	/^ffff80000010b3d0:	74 07                	je     ffff80000010b3d9 <loaduvm+0x108>$/;"	l
ffff80000010b3d2	kernel.asm	/^ffff80000010b3d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010b3d7	kernel.asm	/^ffff80000010b3d7:	eb 18                	jmp    ffff80000010b3f1 <loaduvm+0x120>$/;"	l
ffff80000010b3d9	kernel.asm	/^ffff80000010b3d9:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff80000010b3e0	kernel.asm	/^ffff80000010b3e0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b3e3	kernel.asm	/^ffff80000010b3e3:	3b 45 c0             	cmp    -0x40(%rbp),%eax$/;"	l
ffff80000010b3e6	kernel.asm	/^ffff80000010b3e6:	0f 82 30 ff ff ff    	jb     ffff80000010b31c <loaduvm+0x4b>$/;"	l
ffff80000010b3ec	kernel.asm	/^ffff80000010b3ec:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b3f1	kernel.asm	/^ffff80000010b3f1:	c9                   	leaveq $/;"	l
ffff80000010b3f2	kernel.asm	/^ffff80000010b3f2:	c3                   	retq   $/;"	l
ffff80000010b3f3	kernel.asm	/^ffff80000010b3f3 <allocuvm>:$/;"	l
ffff80000010b3f3	kernel.asm	/^ffff80000010b3f3:	55                   	push   %rbp$/;"	l
ffff80000010b3f4	kernel.asm	/^ffff80000010b3f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b3f7	kernel.asm	/^ffff80000010b3f7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010b3fb	kernel.asm	/^ffff80000010b3fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010b3ff	kernel.asm	/^ffff80000010b3ff:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010b402	kernel.asm	/^ffff80000010b402:	89 55 e0             	mov    %edx,-0x20(%rbp)$/;"	l
ffff80000010b405	kernel.asm	/^ffff80000010b405:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010b408	kernel.asm	/^ffff80000010b408:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff80000010b40b	kernel.asm	/^ffff80000010b40b:	73 08                	jae    ffff80000010b415 <allocuvm+0x22>$/;"	l
ffff80000010b40d	kernel.asm	/^ffff80000010b40d:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010b410	kernel.asm	/^ffff80000010b410:	e9 30 01 00 00       	jmpq   ffff80000010b545 <allocuvm+0x152>$/;"	l
ffff80000010b415	kernel.asm	/^ffff80000010b415:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010b418	kernel.asm	/^ffff80000010b418:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010b41e	kernel.asm	/^ffff80000010b41e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b424	kernel.asm	/^ffff80000010b424:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b428	kernel.asm	/^ffff80000010b428:	e9 08 01 00 00       	jmpq   ffff80000010b535 <allocuvm+0x142>$/;"	l
ffff80000010b42d	kernel.asm	/^ffff80000010b42d:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010b434	kernel.asm	/^ffff80000010b434:	80 ff ff $/;"	l
ffff80000010b437	kernel.asm	/^ffff80000010b437:	ff d0                	callq  *%rax$/;"	l
ffff80000010b439	kernel.asm	/^ffff80000010b439:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b43d	kernel.asm	/^ffff80000010b43d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b442	kernel.asm	/^ffff80000010b442:	75 41                	jne    ffff80000010b485 <allocuvm+0x92>$/;"	l
ffff80000010b444	kernel.asm	/^ffff80000010b444:	48 bf 71 c3 10 00 00 	movabs $0xffff80000010c371,%rdi$/;"	l
ffff80000010b44b	kernel.asm	/^ffff80000010b44b:	80 ff ff $/;"	l
ffff80000010b44e	kernel.asm	/^ffff80000010b44e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b453	kernel.asm	/^ffff80000010b453:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010b45a	kernel.asm	/^ffff80000010b45a:	80 ff ff $/;"	l
ffff80000010b45d	kernel.asm	/^ffff80000010b45d:	ff d2                	callq  *%rdx$/;"	l
ffff80000010b45f	kernel.asm	/^ffff80000010b45f:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010b462	kernel.asm	/^ffff80000010b462:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010b465	kernel.asm	/^ffff80000010b465:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b469	kernel.asm	/^ffff80000010b469:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b46c	kernel.asm	/^ffff80000010b46c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b46f	kernel.asm	/^ffff80000010b46f:	48 b8 47 b5 10 00 00 	movabs $0xffff80000010b547,%rax$/;"	l
ffff80000010b476	kernel.asm	/^ffff80000010b476:	80 ff ff $/;"	l
ffff80000010b479	kernel.asm	/^ffff80000010b479:	ff d0                	callq  *%rax$/;"	l
ffff80000010b47b	kernel.asm	/^ffff80000010b47b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b480	kernel.asm	/^ffff80000010b480:	e9 c0 00 00 00       	jmpq   ffff80000010b545 <allocuvm+0x152>$/;"	l
ffff80000010b485	kernel.asm	/^ffff80000010b485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b489	kernel.asm	/^ffff80000010b489:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b48e	kernel.asm	/^ffff80000010b48e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b493	kernel.asm	/^ffff80000010b493:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b496	kernel.asm	/^ffff80000010b496:	48 b8 68 76 10 00 00 	movabs $0xffff800000107668,%rax$/;"	l
ffff80000010b49d	kernel.asm	/^ffff80000010b49d:	80 ff ff $/;"	l
ffff80000010b4a0	kernel.asm	/^ffff80000010b4a0:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4a2	kernel.asm	/^ffff80000010b4a2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010b4a6	kernel.asm	/^ffff80000010b4a6:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b4ad	kernel.asm	/^ffff80000010b4ad:	80 00 00 $/;"	l
ffff80000010b4b0	kernel.asm	/^ffff80000010b4b0:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010b4b3	kernel.asm	/^ffff80000010b4b3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010b4b7	kernel.asm	/^ffff80000010b4b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b4bb	kernel.asm	/^ffff80000010b4bb:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010b4c1	kernel.asm	/^ffff80000010b4c1:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010b4c4	kernel.asm	/^ffff80000010b4c4:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b4c9	kernel.asm	/^ffff80000010b4c9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b4cc	kernel.asm	/^ffff80000010b4cc:	48 b8 44 b1 10 00 00 	movabs $0xffff80000010b144,%rax$/;"	l
ffff80000010b4d3	kernel.asm	/^ffff80000010b4d3:	80 ff ff $/;"	l
ffff80000010b4d6	kernel.asm	/^ffff80000010b4d6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4d8	kernel.asm	/^ffff80000010b4d8:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010b4da	kernel.asm	/^ffff80000010b4da:	79 51                	jns    ffff80000010b52d <allocuvm+0x13a>$/;"	l
ffff80000010b4dc	kernel.asm	/^ffff80000010b4dc:	48 bf 89 c3 10 00 00 	movabs $0xffff80000010c389,%rdi$/;"	l
ffff80000010b4e3	kernel.asm	/^ffff80000010b4e3:	80 ff ff $/;"	l
ffff80000010b4e6	kernel.asm	/^ffff80000010b4e6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b4eb	kernel.asm	/^ffff80000010b4eb:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010b4f2	kernel.asm	/^ffff80000010b4f2:	80 ff ff $/;"	l
ffff80000010b4f5	kernel.asm	/^ffff80000010b4f5:	ff d2                	callq  *%rdx$/;"	l
ffff80000010b4f7	kernel.asm	/^ffff80000010b4f7:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010b4fa	kernel.asm	/^ffff80000010b4fa:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010b4fd	kernel.asm	/^ffff80000010b4fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b501	kernel.asm	/^ffff80000010b501:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b504	kernel.asm	/^ffff80000010b504:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b507	kernel.asm	/^ffff80000010b507:	48 b8 47 b5 10 00 00 	movabs $0xffff80000010b547,%rax$/;"	l
ffff80000010b50e	kernel.asm	/^ffff80000010b50e:	80 ff ff $/;"	l
ffff80000010b511	kernel.asm	/^ffff80000010b511:	ff d0                	callq  *%rax$/;"	l
ffff80000010b513	kernel.asm	/^ffff80000010b513:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b517	kernel.asm	/^ffff80000010b517:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b51a	kernel.asm	/^ffff80000010b51a:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b521	kernel.asm	/^ffff80000010b521:	80 ff ff $/;"	l
ffff80000010b524	kernel.asm	/^ffff80000010b524:	ff d0                	callq  *%rax$/;"	l
ffff80000010b526	kernel.asm	/^ffff80000010b526:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b52b	kernel.asm	/^ffff80000010b52b:	eb 18                	jmp    ffff80000010b545 <allocuvm+0x152>$/;"	l
ffff80000010b52d	kernel.asm	/^ffff80000010b52d:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010b534	kernel.asm	/^ffff80000010b534:	00 $/;"	l
ffff80000010b535	kernel.asm	/^ffff80000010b535:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010b538	kernel.asm	/^ffff80000010b538:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010b53c	kernel.asm	/^ffff80000010b53c:	0f 87 eb fe ff ff    	ja     ffff80000010b42d <allocuvm+0x3a>$/;"	l
ffff80000010b542	kernel.asm	/^ffff80000010b542:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010b545	kernel.asm	/^ffff80000010b545:	c9                   	leaveq $/;"	l
ffff80000010b546	kernel.asm	/^ffff80000010b546:	c3                   	retq   $/;"	l
ffff80000010b547	kernel.asm	/^ffff80000010b547 <deallocuvm>:$/;"	l
ffff80000010b547	kernel.asm	/^ffff80000010b547:	55                   	push   %rbp$/;"	l
ffff80000010b548	kernel.asm	/^ffff80000010b548:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b54b	kernel.asm	/^ffff80000010b54b:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010b54f	kernel.asm	/^ffff80000010b54f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010b553	kernel.asm	/^ffff80000010b553:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010b557	kernel.asm	/^ffff80000010b557:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010b55b	kernel.asm	/^ffff80000010b55b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b55f	kernel.asm	/^ffff80000010b55f:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010b563	kernel.asm	/^ffff80000010b563:	72 09                	jb     ffff80000010b56e <deallocuvm+0x27>$/;"	l
ffff80000010b565	kernel.asm	/^ffff80000010b565:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b569	kernel.asm	/^ffff80000010b569:	e9 cd 00 00 00       	jmpq   ffff80000010b63b <deallocuvm+0xf4>$/;"	l
ffff80000010b56e	kernel.asm	/^ffff80000010b56e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b572	kernel.asm	/^ffff80000010b572:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010b578	kernel.asm	/^ffff80000010b578:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b57e	kernel.asm	/^ffff80000010b57e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b582	kernel.asm	/^ffff80000010b582:	e9 a2 00 00 00       	jmpq   ffff80000010b629 <deallocuvm+0xe2>$/;"	l
ffff80000010b587	kernel.asm	/^ffff80000010b587:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010b58b	kernel.asm	/^ffff80000010b58b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b58f	kernel.asm	/^ffff80000010b58f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010b594	kernel.asm	/^ffff80000010b594:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b597	kernel.asm	/^ffff80000010b597:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b59a	kernel.asm	/^ffff80000010b59a:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010b5a1	kernel.asm	/^ffff80000010b5a1:	80 ff ff $/;"	l
ffff80000010b5a4	kernel.asm	/^ffff80000010b5a4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5a6	kernel.asm	/^ffff80000010b5a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b5aa	kernel.asm	/^ffff80000010b5aa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b5af	kernel.asm	/^ffff80000010b5af:	74 70                	je     ffff80000010b621 <deallocuvm+0xda>$/;"	l
ffff80000010b5b1	kernel.asm	/^ffff80000010b5b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b5b5	kernel.asm	/^ffff80000010b5b5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b5b8	kernel.asm	/^ffff80000010b5b8:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b5bb	kernel.asm	/^ffff80000010b5bb:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b5be	kernel.asm	/^ffff80000010b5be:	74 61                	je     ffff80000010b621 <deallocuvm+0xda>$/;"	l
ffff80000010b5c0	kernel.asm	/^ffff80000010b5c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b5c4	kernel.asm	/^ffff80000010b5c4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b5c7	kernel.asm	/^ffff80000010b5c7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b5cd	kernel.asm	/^ffff80000010b5cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b5d1	kernel.asm	/^ffff80000010b5d1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010b5d6	kernel.asm	/^ffff80000010b5d6:	75 16                	jne    ffff80000010b5ee <deallocuvm+0xa7>$/;"	l
ffff80000010b5d8	kernel.asm	/^ffff80000010b5d8:	48 bf a5 c3 10 00 00 	movabs $0xffff80000010c3a5,%rdi$/;"	l
ffff80000010b5df	kernel.asm	/^ffff80000010b5df:	80 ff ff $/;"	l
ffff80000010b5e2	kernel.asm	/^ffff80000010b5e2:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b5e9	kernel.asm	/^ffff80000010b5e9:	80 ff ff $/;"	l
ffff80000010b5ec	kernel.asm	/^ffff80000010b5ec:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5ee	kernel.asm	/^ffff80000010b5ee:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010b5f5	kernel.asm	/^ffff80000010b5f5:	80 ff ff $/;"	l
ffff80000010b5f8	kernel.asm	/^ffff80000010b5f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b5fc	kernel.asm	/^ffff80000010b5fc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b5ff	kernel.asm	/^ffff80000010b5ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010b603	kernel.asm	/^ffff80000010b603:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b607	kernel.asm	/^ffff80000010b607:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b60a	kernel.asm	/^ffff80000010b60a:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b611	kernel.asm	/^ffff80000010b611:	80 ff ff $/;"	l
ffff80000010b614	kernel.asm	/^ffff80000010b614:	ff d0                	callq  *%rax$/;"	l
ffff80000010b616	kernel.asm	/^ffff80000010b616:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b61a	kernel.asm	/^ffff80000010b61a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010b621	kernel.asm	/^ffff80000010b621:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010b628	kernel.asm	/^ffff80000010b628:	00 $/;"	l
ffff80000010b629	kernel.asm	/^ffff80000010b629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b62d	kernel.asm	/^ffff80000010b62d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010b631	kernel.asm	/^ffff80000010b631:	0f 82 50 ff ff ff    	jb     ffff80000010b587 <deallocuvm+0x40>$/;"	l
ffff80000010b637	kernel.asm	/^ffff80000010b637:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b63b	kernel.asm	/^ffff80000010b63b:	c9                   	leaveq $/;"	l
ffff80000010b63c	kernel.asm	/^ffff80000010b63c:	c3                   	retq   $/;"	l
ffff80000010b63d	kernel.asm	/^ffff80000010b63d <freevm>:$/;"	l
ffff80000010b63d	kernel.asm	/^ffff80000010b63d:	55                   	push   %rbp$/;"	l
ffff80000010b63e	kernel.asm	/^ffff80000010b63e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b641	kernel.asm	/^ffff80000010b641:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010b645	kernel.asm	/^ffff80000010b645:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010b649	kernel.asm	/^ffff80000010b649:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff80000010b64e	kernel.asm	/^ffff80000010b64e:	75 16                	jne    ffff80000010b666 <freevm+0x29>$/;"	l
ffff80000010b650	kernel.asm	/^ffff80000010b650:	48 bf ab c3 10 00 00 	movabs $0xffff80000010c3ab,%rdi$/;"	l
ffff80000010b657	kernel.asm	/^ffff80000010b657:	80 ff ff $/;"	l
ffff80000010b65a	kernel.asm	/^ffff80000010b65a:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b661	kernel.asm	/^ffff80000010b661:	80 ff ff $/;"	l
ffff80000010b664	kernel.asm	/^ffff80000010b664:	ff d0                	callq  *%rax$/;"	l
ffff80000010b666	kernel.asm	/^ffff80000010b666:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010b66d	kernel.asm	/^ffff80000010b66d:	e9 dc 01 00 00       	jmpq   ffff80000010b84e <freevm+0x211>$/;"	l
ffff80000010b672	kernel.asm	/^ffff80000010b672:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b675	kernel.asm	/^ffff80000010b675:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b67c	kernel.asm	/^ffff80000010b67c:	00 $/;"	l
ffff80000010b67d	kernel.asm	/^ffff80000010b67d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b681	kernel.asm	/^ffff80000010b681:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b684	kernel.asm	/^ffff80000010b684:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b687	kernel.asm	/^ffff80000010b687:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b68a	kernel.asm	/^ffff80000010b68a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b68d	kernel.asm	/^ffff80000010b68d:	0f 84 b7 01 00 00    	je     ffff80000010b84a <freevm+0x20d>$/;"	l
ffff80000010b693	kernel.asm	/^ffff80000010b693:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b696	kernel.asm	/^ffff80000010b696:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b69d	kernel.asm	/^ffff80000010b69d:	00 $/;"	l
ffff80000010b69e	kernel.asm	/^ffff80000010b69e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b6a2	kernel.asm	/^ffff80000010b6a2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b6a5	kernel.asm	/^ffff80000010b6a5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b6a8	kernel.asm	/^ffff80000010b6a8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b6ae	kernel.asm	/^ffff80000010b6ae:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b6b1	kernel.asm	/^ffff80000010b6b1:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b6b8	kernel.asm	/^ffff80000010b6b8:	80 ff ff $/;"	l
ffff80000010b6bb	kernel.asm	/^ffff80000010b6bb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b6be	kernel.asm	/^ffff80000010b6be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b6c2	kernel.asm	/^ffff80000010b6c2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010b6c9	kernel.asm	/^ffff80000010b6c9:	e9 5c 01 00 00       	jmpq   ffff80000010b82a <freevm+0x1ed>$/;"	l
ffff80000010b6ce	kernel.asm	/^ffff80000010b6ce:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b6d1	kernel.asm	/^ffff80000010b6d1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b6d8	kernel.asm	/^ffff80000010b6d8:	00 $/;"	l
ffff80000010b6d9	kernel.asm	/^ffff80000010b6d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b6dd	kernel.asm	/^ffff80000010b6dd:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b6e0	kernel.asm	/^ffff80000010b6e0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b6e3	kernel.asm	/^ffff80000010b6e3:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b6e6	kernel.asm	/^ffff80000010b6e6:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b6e9	kernel.asm	/^ffff80000010b6e9:	0f 84 37 01 00 00    	je     ffff80000010b826 <freevm+0x1e9>$/;"	l
ffff80000010b6ef	kernel.asm	/^ffff80000010b6ef:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b6f2	kernel.asm	/^ffff80000010b6f2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b6f9	kernel.asm	/^ffff80000010b6f9:	00 $/;"	l
ffff80000010b6fa	kernel.asm	/^ffff80000010b6fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b6fe	kernel.asm	/^ffff80000010b6fe:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b701	kernel.asm	/^ffff80000010b701:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b704	kernel.asm	/^ffff80000010b704:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b70a	kernel.asm	/^ffff80000010b70a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b70d	kernel.asm	/^ffff80000010b70d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b714	kernel.asm	/^ffff80000010b714:	80 ff ff $/;"	l
ffff80000010b717	kernel.asm	/^ffff80000010b717:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b71a	kernel.asm	/^ffff80000010b71a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010b71e	kernel.asm	/^ffff80000010b71e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff80000010b725	kernel.asm	/^ffff80000010b725:	e9 dc 00 00 00       	jmpq   ffff80000010b806 <freevm+0x1c9>$/;"	l
ffff80000010b72a	kernel.asm	/^ffff80000010b72a:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b72d	kernel.asm	/^ffff80000010b72d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b734	kernel.asm	/^ffff80000010b734:	00 $/;"	l
ffff80000010b735	kernel.asm	/^ffff80000010b735:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b739	kernel.asm	/^ffff80000010b739:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b73c	kernel.asm	/^ffff80000010b73c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b73f	kernel.asm	/^ffff80000010b73f:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b742	kernel.asm	/^ffff80000010b742:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b745	kernel.asm	/^ffff80000010b745:	0f 84 b7 00 00 00    	je     ffff80000010b802 <freevm+0x1c5>$/;"	l
ffff80000010b74b	kernel.asm	/^ffff80000010b74b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b74e	kernel.asm	/^ffff80000010b74e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b755	kernel.asm	/^ffff80000010b755:	00 $/;"	l
ffff80000010b756	kernel.asm	/^ffff80000010b756:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b75a	kernel.asm	/^ffff80000010b75a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b75d	kernel.asm	/^ffff80000010b75d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b760	kernel.asm	/^ffff80000010b760:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b766	kernel.asm	/^ffff80000010b766:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b769	kernel.asm	/^ffff80000010b769:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b770	kernel.asm	/^ffff80000010b770:	80 ff ff $/;"	l
ffff80000010b773	kernel.asm	/^ffff80000010b773:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b776	kernel.asm	/^ffff80000010b776:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010b77a	kernel.asm	/^ffff80000010b77a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b781	kernel.asm	/^ffff80000010b781:	eb 63                	jmp    ffff80000010b7e6 <freevm+0x1a9>$/;"	l
ffff80000010b783	kernel.asm	/^ffff80000010b783:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010b786	kernel.asm	/^ffff80000010b786:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b78d	kernel.asm	/^ffff80000010b78d:	00 $/;"	l
ffff80000010b78e	kernel.asm	/^ffff80000010b78e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b792	kernel.asm	/^ffff80000010b792:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b795	kernel.asm	/^ffff80000010b795:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b798	kernel.asm	/^ffff80000010b798:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b79b	kernel.asm	/^ffff80000010b79b:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b79e	kernel.asm	/^ffff80000010b79e:	74 42                	je     ffff80000010b7e2 <freevm+0x1a5>$/;"	l
ffff80000010b7a0	kernel.asm	/^ffff80000010b7a0:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010b7a3	kernel.asm	/^ffff80000010b7a3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010b7aa	kernel.asm	/^ffff80000010b7aa:	00 $/;"	l
ffff80000010b7ab	kernel.asm	/^ffff80000010b7ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b7af	kernel.asm	/^ffff80000010b7af:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b7b2	kernel.asm	/^ffff80000010b7b2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b7b5	kernel.asm	/^ffff80000010b7b5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b7bb	kernel.asm	/^ffff80000010b7bb:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b7be	kernel.asm	/^ffff80000010b7be:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010b7c5	kernel.asm	/^ffff80000010b7c5:	80 ff ff $/;"	l
ffff80000010b7c8	kernel.asm	/^ffff80000010b7c8:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b7cb	kernel.asm	/^ffff80000010b7cb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010b7cf	kernel.asm	/^ffff80000010b7cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b7d3	kernel.asm	/^ffff80000010b7d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b7d6	kernel.asm	/^ffff80000010b7d6:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b7dd	kernel.asm	/^ffff80000010b7dd:	80 ff ff $/;"	l
ffff80000010b7e0	kernel.asm	/^ffff80000010b7e0:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7e2	kernel.asm	/^ffff80000010b7e2:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)$/;"	l
ffff80000010b7e6	kernel.asm	/^ffff80000010b7e6:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%rbp)$/;"	l
ffff80000010b7ed	kernel.asm	/^ffff80000010b7ed:	76 94                	jbe    ffff80000010b783 <freevm+0x146>$/;"	l
ffff80000010b7ef	kernel.asm	/^ffff80000010b7ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b7f3	kernel.asm	/^ffff80000010b7f3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b7f6	kernel.asm	/^ffff80000010b7f6:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b7fd	kernel.asm	/^ffff80000010b7fd:	80 ff ff $/;"	l
ffff80000010b800	kernel.asm	/^ffff80000010b800:	ff d0                	callq  *%rax$/;"	l
ffff80000010b802	kernel.asm	/^ffff80000010b802:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff80000010b806	kernel.asm	/^ffff80000010b806:	81 7d f4 ff 01 00 00 	cmpl   $0x1ff,-0xc(%rbp)$/;"	l
ffff80000010b80d	kernel.asm	/^ffff80000010b80d:	0f 86 17 ff ff ff    	jbe    ffff80000010b72a <freevm+0xed>$/;"	l
ffff80000010b813	kernel.asm	/^ffff80000010b813:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b817	kernel.asm	/^ffff80000010b817:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b81a	kernel.asm	/^ffff80000010b81a:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b821	kernel.asm	/^ffff80000010b821:	80 ff ff $/;"	l
ffff80000010b824	kernel.asm	/^ffff80000010b824:	ff d0                	callq  *%rax$/;"	l
ffff80000010b826	kernel.asm	/^ffff80000010b826:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff80000010b82a	kernel.asm	/^ffff80000010b82a:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%rbp)$/;"	l
ffff80000010b831	kernel.asm	/^ffff80000010b831:	0f 86 97 fe ff ff    	jbe    ffff80000010b6ce <freevm+0x91>$/;"	l
ffff80000010b837	kernel.asm	/^ffff80000010b837:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b83b	kernel.asm	/^ffff80000010b83b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b83e	kernel.asm	/^ffff80000010b83e:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b845	kernel.asm	/^ffff80000010b845:	80 ff ff $/;"	l
ffff80000010b848	kernel.asm	/^ffff80000010b848:	ff d0                	callq  *%rax$/;"	l
ffff80000010b84a	kernel.asm	/^ffff80000010b84a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010b84e	kernel.asm	/^ffff80000010b84e:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010b855	kernel.asm	/^ffff80000010b855:	0f 86 17 fe ff ff    	jbe    ffff80000010b672 <freevm+0x35>$/;"	l
ffff80000010b85b	kernel.asm	/^ffff80000010b85b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b85f	kernel.asm	/^ffff80000010b85f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b862	kernel.asm	/^ffff80000010b862:	48 b8 ec 3f 10 00 00 	movabs $0xffff800000103fec,%rax$/;"	l
ffff80000010b869	kernel.asm	/^ffff80000010b869:	80 ff ff $/;"	l
ffff80000010b86c	kernel.asm	/^ffff80000010b86c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b86e	kernel.asm	/^ffff80000010b86e:	90                   	nop$/;"	l
ffff80000010b86f	kernel.asm	/^ffff80000010b86f:	c9                   	leaveq $/;"	l
ffff80000010b870	kernel.asm	/^ffff80000010b870:	c3                   	retq   $/;"	l
ffff80000010b871	kernel.asm	/^ffff80000010b871 <clearpteu>:$/;"	l
ffff80000010b871	kernel.asm	/^ffff80000010b871:	55                   	push   %rbp$/;"	l
ffff80000010b872	kernel.asm	/^ffff80000010b872:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b875	kernel.asm	/^ffff80000010b875:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010b879	kernel.asm	/^ffff80000010b879:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010b87d	kernel.asm	/^ffff80000010b87d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010b881	kernel.asm	/^ffff80000010b881:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010b885	kernel.asm	/^ffff80000010b885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b889	kernel.asm	/^ffff80000010b889:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010b88e	kernel.asm	/^ffff80000010b88e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b891	kernel.asm	/^ffff80000010b891:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b894	kernel.asm	/^ffff80000010b894:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010b89b	kernel.asm	/^ffff80000010b89b:	80 ff ff $/;"	l
ffff80000010b89e	kernel.asm	/^ffff80000010b89e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b8a0	kernel.asm	/^ffff80000010b8a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b8a4	kernel.asm	/^ffff80000010b8a4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010b8a9	kernel.asm	/^ffff80000010b8a9:	75 16                	jne    ffff80000010b8c1 <clearpteu+0x50>$/;"	l
ffff80000010b8ab	kernel.asm	/^ffff80000010b8ab:	48 bf bc c3 10 00 00 	movabs $0xffff80000010c3bc,%rdi$/;"	l
ffff80000010b8b2	kernel.asm	/^ffff80000010b8b2:	80 ff ff $/;"	l
ffff80000010b8b5	kernel.asm	/^ffff80000010b8b5:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b8bc	kernel.asm	/^ffff80000010b8bc:	80 ff ff $/;"	l
ffff80000010b8bf	kernel.asm	/^ffff80000010b8bf:	ff d0                	callq  *%rax$/;"	l
ffff80000010b8c1	kernel.asm	/^ffff80000010b8c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b8c5	kernel.asm	/^ffff80000010b8c5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b8c8	kernel.asm	/^ffff80000010b8c8:	48 83 e0 fb          	and    $0xfffffffffffffffb,%rax$/;"	l
ffff80000010b8cc	kernel.asm	/^ffff80000010b8cc:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b8cf	kernel.asm	/^ffff80000010b8cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b8d3	kernel.asm	/^ffff80000010b8d3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010b8d6	kernel.asm	/^ffff80000010b8d6:	90                   	nop$/;"	l
ffff80000010b8d7	kernel.asm	/^ffff80000010b8d7:	c9                   	leaveq $/;"	l
ffff80000010b8d8	kernel.asm	/^ffff80000010b8d8:	c3                   	retq   $/;"	l
ffff80000010b8d9	kernel.asm	/^ffff80000010b8d9 <copyuvm>:$/;"	l
ffff80000010b8d9	kernel.asm	/^ffff80000010b8d9:	55                   	push   %rbp$/;"	l
ffff80000010b8da	kernel.asm	/^ffff80000010b8da:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b8dd	kernel.asm	/^ffff80000010b8dd:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010b8e1	kernel.asm	/^ffff80000010b8e1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010b8e5	kernel.asm	/^ffff80000010b8e5:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff80000010b8e8	kernel.asm	/^ffff80000010b8e8:	48 b8 9b ac 10 00 00 	movabs $0xffff80000010ac9b,%rax$/;"	l
ffff80000010b8ef	kernel.asm	/^ffff80000010b8ef:	80 ff ff $/;"	l
ffff80000010b8f2	kernel.asm	/^ffff80000010b8f2:	ff d0                	callq  *%rax$/;"	l
ffff80000010b8f4	kernel.asm	/^ffff80000010b8f4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b8f8	kernel.asm	/^ffff80000010b8f8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010b8fd	kernel.asm	/^ffff80000010b8fd:	75 0a                	jne    ffff80000010b909 <copyuvm+0x30>$/;"	l
ffff80000010b8ff	kernel.asm	/^ffff80000010b8ff:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b904	kernel.asm	/^ffff80000010b904:	e9 51 01 00 00       	jmpq   ffff80000010ba5a <copyuvm+0x181>$/;"	l
ffff80000010b909	kernel.asm	/^ffff80000010b909:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010b910	kernel.asm	/^ffff80000010b910:	00 $/;"	l
ffff80000010b911	kernel.asm	/^ffff80000010b911:	e9 15 01 00 00       	jmpq   ffff80000010ba2b <copyuvm+0x152>$/;"	l
ffff80000010b916	kernel.asm	/^ffff80000010b916:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010b91a	kernel.asm	/^ffff80000010b91a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010b91e	kernel.asm	/^ffff80000010b91e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010b923	kernel.asm	/^ffff80000010b923:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b926	kernel.asm	/^ffff80000010b926:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b929	kernel.asm	/^ffff80000010b929:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010b930	kernel.asm	/^ffff80000010b930:	80 ff ff $/;"	l
ffff80000010b933	kernel.asm	/^ffff80000010b933:	ff d0                	callq  *%rax$/;"	l
ffff80000010b935	kernel.asm	/^ffff80000010b935:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b939	kernel.asm	/^ffff80000010b939:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010b93e	kernel.asm	/^ffff80000010b93e:	75 16                	jne    ffff80000010b956 <copyuvm+0x7d>$/;"	l
ffff80000010b940	kernel.asm	/^ffff80000010b940:	48 bf c6 c3 10 00 00 	movabs $0xffff80000010c3c6,%rdi$/;"	l
ffff80000010b947	kernel.asm	/^ffff80000010b947:	80 ff ff $/;"	l
ffff80000010b94a	kernel.asm	/^ffff80000010b94a:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b951	kernel.asm	/^ffff80000010b951:	80 ff ff $/;"	l
ffff80000010b954	kernel.asm	/^ffff80000010b954:	ff d0                	callq  *%rax$/;"	l
ffff80000010b956	kernel.asm	/^ffff80000010b956:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b95a	kernel.asm	/^ffff80000010b95a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b95d	kernel.asm	/^ffff80000010b95d:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010b960	kernel.asm	/^ffff80000010b960:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010b963	kernel.asm	/^ffff80000010b963:	75 16                	jne    ffff80000010b97b <copyuvm+0xa2>$/;"	l
ffff80000010b965	kernel.asm	/^ffff80000010b965:	48 bf e0 c3 10 00 00 	movabs $0xffff80000010c3e0,%rdi$/;"	l
ffff80000010b96c	kernel.asm	/^ffff80000010b96c:	80 ff ff $/;"	l
ffff80000010b96f	kernel.asm	/^ffff80000010b96f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010b976	kernel.asm	/^ffff80000010b976:	80 ff ff $/;"	l
ffff80000010b979	kernel.asm	/^ffff80000010b979:	ff d0                	callq  *%rax$/;"	l
ffff80000010b97b	kernel.asm	/^ffff80000010b97b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b97f	kernel.asm	/^ffff80000010b97f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b982	kernel.asm	/^ffff80000010b982:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010b988	kernel.asm	/^ffff80000010b988:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010b98c	kernel.asm	/^ffff80000010b98c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b990	kernel.asm	/^ffff80000010b990:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010b993	kernel.asm	/^ffff80000010b993:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010b998	kernel.asm	/^ffff80000010b998:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010b99c	kernel.asm	/^ffff80000010b99c:	48 b8 e2 40 10 00 00 	movabs $0xffff8000001040e2,%rax$/;"	l
ffff80000010b9a3	kernel.asm	/^ffff80000010b9a3:	80 ff ff $/;"	l
ffff80000010b9a6	kernel.asm	/^ffff80000010b9a6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b9a8	kernel.asm	/^ffff80000010b9a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010b9ac	kernel.asm	/^ffff80000010b9ac:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)$/;"	l
ffff80000010b9b1	kernel.asm	/^ffff80000010b9b1:	0f 84 87 00 00 00    	je     ffff80000010ba3e <copyuvm+0x165>$/;"	l
ffff80000010b9b7	kernel.asm	/^ffff80000010b9b7:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010b9be	kernel.asm	/^ffff80000010b9be:	80 ff ff $/;"	l
ffff80000010b9c1	kernel.asm	/^ffff80000010b9c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b9c5	kernel.asm	/^ffff80000010b9c5:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b9c8	kernel.asm	/^ffff80000010b9c8:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff80000010b9cb	kernel.asm	/^ffff80000010b9cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010b9cf	kernel.asm	/^ffff80000010b9cf:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b9d4	kernel.asm	/^ffff80000010b9d4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010b9d7	kernel.asm	/^ffff80000010b9d7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b9da	kernel.asm	/^ffff80000010b9da:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010b9e1	kernel.asm	/^ffff80000010b9e1:	80 ff ff $/;"	l
ffff80000010b9e4	kernel.asm	/^ffff80000010b9e4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b9e6	kernel.asm	/^ffff80000010b9e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010b9ea	kernel.asm	/^ffff80000010b9ea:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010b9ec	kernel.asm	/^ffff80000010b9ec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010b9f0	kernel.asm	/^ffff80000010b9f0:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b9f7	kernel.asm	/^ffff80000010b9f7:	80 00 00 $/;"	l
ffff80000010b9fa	kernel.asm	/^ffff80000010b9fa:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010b9fd	kernel.asm	/^ffff80000010b9fd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010ba01	kernel.asm	/^ffff80000010ba01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba05	kernel.asm	/^ffff80000010ba05:	41 89 c8             	mov    %ecx,%r8d$/;"	l
ffff80000010ba08	kernel.asm	/^ffff80000010ba08:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010ba0b	kernel.asm	/^ffff80000010ba0b:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010ba10	kernel.asm	/^ffff80000010ba10:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ba13	kernel.asm	/^ffff80000010ba13:	48 b8 44 b1 10 00 00 	movabs $0xffff80000010b144,%rax$/;"	l
ffff80000010ba1a	kernel.asm	/^ffff80000010ba1a:	80 ff ff $/;"	l
ffff80000010ba1d	kernel.asm	/^ffff80000010ba1d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ba1f	kernel.asm	/^ffff80000010ba1f:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010ba21	kernel.asm	/^ffff80000010ba21:	78 1e                	js     ffff80000010ba41 <copyuvm+0x168>$/;"	l
ffff80000010ba23	kernel.asm	/^ffff80000010ba23:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010ba2a	kernel.asm	/^ffff80000010ba2a:	00 $/;"	l
ffff80000010ba2b	kernel.asm	/^ffff80000010ba2b:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff80000010ba2e	kernel.asm	/^ffff80000010ba2e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010ba32	kernel.asm	/^ffff80000010ba32:	0f 87 de fe ff ff    	ja     ffff80000010b916 <copyuvm+0x3d>$/;"	l
ffff80000010ba38	kernel.asm	/^ffff80000010ba38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba3c	kernel.asm	/^ffff80000010ba3c:	eb 1c                	jmp    ffff80000010ba5a <copyuvm+0x181>$/;"	l
ffff80000010ba3e	kernel.asm	/^ffff80000010ba3e:	90                   	nop$/;"	l
ffff80000010ba3f	kernel.asm	/^ffff80000010ba3f:	eb 01                	jmp    ffff80000010ba42 <copyuvm+0x169>$/;"	l
ffff80000010ba41	kernel.asm	/^ffff80000010ba41:	90                   	nop$/;"	l
ffff80000010ba42	kernel.asm	/^ffff80000010ba42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba46	kernel.asm	/^ffff80000010ba46:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ba49	kernel.asm	/^ffff80000010ba49:	48 b8 3d b6 10 00 00 	movabs $0xffff80000010b63d,%rax$/;"	l
ffff80000010ba50	kernel.asm	/^ffff80000010ba50:	80 ff ff $/;"	l
ffff80000010ba53	kernel.asm	/^ffff80000010ba53:	ff d0                	callq  *%rax$/;"	l
ffff80000010ba55	kernel.asm	/^ffff80000010ba55:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010ba5a	kernel.asm	/^ffff80000010ba5a:	c9                   	leaveq $/;"	l
ffff80000010ba5b	kernel.asm	/^ffff80000010ba5b:	c3                   	retq   $/;"	l
ffff80000010ba5c	kernel.asm	/^ffff80000010ba5c <uva2ka>:$/;"	l
ffff80000010ba5c	kernel.asm	/^ffff80000010ba5c:	55                   	push   %rbp$/;"	l
ffff80000010ba5d	kernel.asm	/^ffff80000010ba5d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ba60	kernel.asm	/^ffff80000010ba60:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010ba64	kernel.asm	/^ffff80000010ba64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010ba68	kernel.asm	/^ffff80000010ba68:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010ba6c	kernel.asm	/^ffff80000010ba6c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010ba70	kernel.asm	/^ffff80000010ba70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ba74	kernel.asm	/^ffff80000010ba74:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010ba79	kernel.asm	/^ffff80000010ba79:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010ba7c	kernel.asm	/^ffff80000010ba7c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ba7f	kernel.asm	/^ffff80000010ba7f:	48 b8 f7 ae 10 00 00 	movabs $0xffff80000010aef7,%rax$/;"	l
ffff80000010ba86	kernel.asm	/^ffff80000010ba86:	80 ff ff $/;"	l
ffff80000010ba89	kernel.asm	/^ffff80000010ba89:	ff d0                	callq  *%rax$/;"	l
ffff80000010ba8b	kernel.asm	/^ffff80000010ba8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010ba8f	kernel.asm	/^ffff80000010ba8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010ba93	kernel.asm	/^ffff80000010ba93:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ba96	kernel.asm	/^ffff80000010ba96:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010ba99	kernel.asm	/^ffff80000010ba99:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010ba9c	kernel.asm	/^ffff80000010ba9c:	75 07                	jne    ffff80000010baa5 <uva2ka+0x49>$/;"	l
ffff80000010ba9e	kernel.asm	/^ffff80000010ba9e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010baa3	kernel.asm	/^ffff80000010baa3:	eb 33                	jmp    ffff80000010bad8 <uva2ka+0x7c>$/;"	l
ffff80000010baa5	kernel.asm	/^ffff80000010baa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010baa9	kernel.asm	/^ffff80000010baa9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010baac	kernel.asm	/^ffff80000010baac:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010baaf	kernel.asm	/^ffff80000010baaf:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010bab2	kernel.asm	/^ffff80000010bab2:	75 07                	jne    ffff80000010babb <uva2ka+0x5f>$/;"	l
ffff80000010bab4	kernel.asm	/^ffff80000010bab4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010bab9	kernel.asm	/^ffff80000010bab9:	eb 1d                	jmp    ffff80000010bad8 <uva2ka+0x7c>$/;"	l
ffff80000010babb	kernel.asm	/^ffff80000010babb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010babf	kernel.asm	/^ffff80000010babf:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bac2	kernel.asm	/^ffff80000010bac2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010bac8	kernel.asm	/^ffff80000010bac8:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bacb	kernel.asm	/^ffff80000010bacb:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010bad2	kernel.asm	/^ffff80000010bad2:	80 ff ff $/;"	l
ffff80000010bad5	kernel.asm	/^ffff80000010bad5:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bad8	kernel.asm	/^ffff80000010bad8:	c9                   	leaveq $/;"	l
ffff80000010bad9	kernel.asm	/^ffff80000010bad9:	c3                   	retq   $/;"	l
ffff80000010bada	kernel.asm	/^ffff80000010bada <copyout>:$/;"	l
ffff80000010bada	kernel.asm	/^ffff80000010bada:	55                   	push   %rbp$/;"	l
ffff80000010badb	kernel.asm	/^ffff80000010badb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bade	kernel.asm	/^ffff80000010bade:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010bae2	kernel.asm	/^ffff80000010bae2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010bae6	kernel.asm	/^ffff80000010bae6:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff80000010bae9	kernel.asm	/^ffff80000010bae9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010baed	kernel.asm	/^ffff80000010baed:	89 4d d0             	mov    %ecx,-0x30(%rbp)$/;"	l
ffff80000010baf0	kernel.asm	/^ffff80000010baf0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010baf4	kernel.asm	/^ffff80000010baf4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010baf8	kernel.asm	/^ffff80000010baf8:	e9 ad 00 00 00       	jmpq   ffff80000010bbaa <copyout+0xd0>$/;"	l
ffff80000010bafd	kernel.asm	/^ffff80000010bafd:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010bb00	kernel.asm	/^ffff80000010bb00:	25 00 f0 ff ff       	and    $0xfffff000,%eax$/;"	l
ffff80000010bb05	kernel.asm	/^ffff80000010bb05:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010bb09	kernel.asm	/^ffff80000010bb09:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010bb0d	kernel.asm	/^ffff80000010bb0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010bb11	kernel.asm	/^ffff80000010bb11:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010bb14	kernel.asm	/^ffff80000010bb14:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bb17	kernel.asm	/^ffff80000010bb17:	48 b8 5c ba 10 00 00 	movabs $0xffff80000010ba5c,%rax$/;"	l
ffff80000010bb1e	kernel.asm	/^ffff80000010bb1e:	80 ff ff $/;"	l
ffff80000010bb21	kernel.asm	/^ffff80000010bb21:	ff d0                	callq  *%rax$/;"	l
ffff80000010bb23	kernel.asm	/^ffff80000010bb23:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010bb27	kernel.asm	/^ffff80000010bb27:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff80000010bb2c	kernel.asm	/^ffff80000010bb2c:	75 0a                	jne    ffff80000010bb38 <copyout+0x5e>$/;"	l
ffff80000010bb2e	kernel.asm	/^ffff80000010bb2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010bb33	kernel.asm	/^ffff80000010bb33:	e9 81 00 00 00       	jmpq   ffff80000010bbb9 <copyout+0xdf>$/;"	l
ffff80000010bb38	kernel.asm	/^ffff80000010bb38:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010bb3b	kernel.asm	/^ffff80000010bb3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010bb3f	kernel.asm	/^ffff80000010bb3f:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010bb42	kernel.asm	/^ffff80000010bb42:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010bb45	kernel.asm	/^ffff80000010bb45:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff80000010bb4b	kernel.asm	/^ffff80000010bb4b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010bb4f	kernel.asm	/^ffff80000010bb4f:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010bb52	kernel.asm	/^ffff80000010bb52:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010bb56	kernel.asm	/^ffff80000010bb56:	73 07                	jae    ffff80000010bb5f <copyout+0x85>$/;"	l
ffff80000010bb58	kernel.asm	/^ffff80000010bb58:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010bb5b	kernel.asm	/^ffff80000010bb5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010bb5f	kernel.asm	/^ffff80000010bb5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb63	kernel.asm	/^ffff80000010bb63:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010bb65	kernel.asm	/^ffff80000010bb65:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010bb68	kernel.asm	/^ffff80000010bb68:	48 2b 45 e8          	sub    -0x18(%rbp),%rax$/;"	l
ffff80000010bb6c	kernel.asm	/^ffff80000010bb6c:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bb6f	kernel.asm	/^ffff80000010bb6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010bb73	kernel.asm	/^ffff80000010bb73:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010bb77	kernel.asm	/^ffff80000010bb77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010bb7b	kernel.asm	/^ffff80000010bb7b:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010bb7d	kernel.asm	/^ffff80000010bb7d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010bb80	kernel.asm	/^ffff80000010bb80:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff80000010bb83	kernel.asm	/^ffff80000010bb83:	48 b8 65 77 10 00 00 	movabs $0xffff800000107765,%rax$/;"	l
ffff80000010bb8a	kernel.asm	/^ffff80000010bb8a:	80 ff ff $/;"	l
ffff80000010bb8d	kernel.asm	/^ffff80000010bb8d:	ff d0                	callq  *%rax$/;"	l
ffff80000010bb8f	kernel.asm	/^ffff80000010bb8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb93	kernel.asm	/^ffff80000010bb93:	29 45 d0             	sub    %eax,-0x30(%rbp)$/;"	l
ffff80000010bb96	kernel.asm	/^ffff80000010bb96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb9a	kernel.asm	/^ffff80000010bb9a:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff80000010bb9e	kernel.asm	/^ffff80000010bb9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bba2	kernel.asm	/^ffff80000010bba2:	05 00 10 00 00       	add    $0x1000,%eax$/;"	l
ffff80000010bba7	kernel.asm	/^ffff80000010bba7:	89 45 d4             	mov    %eax,-0x2c(%rbp)$/;"	l
ffff80000010bbaa	kernel.asm	/^ffff80000010bbaa:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)$/;"	l
ffff80000010bbae	kernel.asm	/^ffff80000010bbae:	0f 85 49 ff ff ff    	jne    ffff80000010bafd <copyout+0x23>$/;"	l
ffff80000010bbb4	kernel.asm	/^ffff80000010bbb4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010bbb9	kernel.asm	/^ffff80000010bbb9:	c9                   	leaveq $/;"	l
ffff80000010bbba	kernel.asm	/^ffff80000010bbba:	c3                   	retq   $/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon5	typeref:struct:__anon5::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint64 filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	bootmain.c	/^  uint64 flags;$/;"	m	struct:mbheader	file:
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint32 flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon6	typeref:struct:__anon6::run	file:
freep	bad_mmap.asm	/^      freep = prevp;$/;"	d
freep	bad_mmap.asm	/^  freep = p;$/;"	d
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	eager_mmap.asm	/^      freep = prevp;$/;"	d
freep	eager_mmap.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	imshow.asm	/^      freep = prevp;$/;"	d
freep	imshow.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	lazy_mmap.asm	/^      freep = prevp;$/;"	d
freep	lazy_mmap.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	prettyprint.asm	/^      freep = prevp;$/;"	d
freep	prettyprint.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pml4)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon5
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	kernel.asm	/^  gdt = (struct segdesc*) local;$/;"	d
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt64_begin	entry.S	/^gdt64_begin:$/;"	l
gdt64_end	entry.S	/^gdt64_end:$/;"	l
gdt64_end	kernel.asm	/^gdt64_end:$/;"	l
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
gdtr64	entry.S	/^gdtr64:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, addr_t pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
getstackpcs	spinlock.c	/^getstackpcs(addr_t *ebp, addr_t pcs[])$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
header_addr	bootmain.c	/^  uint64 header_addr;$/;"	m	struct:mbheader	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
hlt	x86.h	/^hlt(void)$/;"	f
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	bad_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	eager_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	imshow.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	lazy_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	prettyprint.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	bad_mmap.asm	/^  i = 0;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	eager_mmap.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	imshow.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	lazy_mmap.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	prettyprint.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon2
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	kernel.asm	/^  idt = (uint*) kalloc();$/;"	d
idt	trap.c	/^uint *idt;$/;"	v
idtinit	trap.c	/^void idtinit(void) {$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
ignore_sysret	entry.S	/^ignore_sysret:$/;"	l
ignore_sysret	kernel.asm	/^ignore_sysret:$/;"	l
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon8
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	bad_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	bad_mmap.asm	/^int$/;"	l
int	cat.asm	/^int$/;"	l
int	divide.asm	/^int main(int argc, char *argv[]){$/;"	l
int	divide.asm	/^int str2int(char str_x[]){$/;"	l
int	eager_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	eager_mmap.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	imshow.asm	/^int main(int argc, char** argv) {$/;"	l
int	imshow.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int kfreepagecount() {$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	lazy_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	lazy_mmap.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	prettyprint.asm	/^int main(int argc, char** argv) {$/;"	l
int	prettyprint.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = P2V((volatile struct ioapic*)IOAPIC);$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf64-x86-64$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kfreepagecount	kalloc.c	/^int kfreepagecount() {$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon6
kpdpt	kernel.asm	/^  kpdpt = (pde_t*) kalloc();$/;"	d
kpdpt	vm.c	/^static pde_t *kpdpt;$/;"	v	file:
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kpml4	kernel.asm	/^  kpml4 = (pde_t*) kalloc();$/;"	d
kpml4	vm.c	/^static pde_t *kpml4;$/;"	v	file:
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = P2V((addr_t)conf->lapicaddr_p);$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr_p	mp.h	/^  uint32 lapicaddr_p;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((addr_t)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(addr_t val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
load_addr	bootmain.c	/^  uint64 load_addr;$/;"	m	struct:mbheader	file:
load_end_addr	bootmain.c	/^  uint64 load_end_addr;$/;"	m	struct:mbheader	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
local	kernel.asm	/^  local = kalloc();$/;"	d
local	proc.h	/^  void *local;$/;"	m	struct:cpu
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	file.h	/^  struct sleeplock lock;$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon7	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	bootmain.c	/^  uint64 magic;$/;"	m	struct:mbheader	file:
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	bad_mmap.c	/^int main(int argc, char** argv) {$/;"	f
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	eager_mmap.c	/^int main(int argc, char** argv) {$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	lazy_mmap.c	/^int main(int argc, char** argv) {$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	mmaptest.c	/^int main(int argc, char** argv) {$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, addr_t size, addr_t pa, int perm)$/;"	f
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mbheader	bootmain.c	/^struct mbheader {$/;"	s	file:
mboot_entry	entry.S	/^mboot_entry:$/;"	l
mboot_entry	kernel.asm	/^mboot_entry:$/;"	l
mboot_flags	entry.S	/^#define mboot_flags 0x00010000$/;"	d
mboot_header	entry.S	/^mboot_header:$/;"	l
mboot_magic	entry.S	/^#define mboot_magic 0x1badb002$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint64 memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mkgate	trap.c	/^mkgate(uint *idt, uint n, void *kva, uint pl, uint trap) {$/;"	f	file:
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(addr_t a, int len)$/;"	f	file:
n	bad_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	bad_mmap.asm	/^  n = 0;$/;"	d
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	eager_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	eager_mmap.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	imshow.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	imshow.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	lazy_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	lazy_mmap.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	prettyprint.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prettyprint.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	bad_mmap.asm	/^  name: \\$/;"	l
name	cat.asm	/^  name: \\$/;"	l
name	eager_mmap.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	imshow.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	lazy_mmap.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	prettyprint.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	bad_mmap.asm	/^    neg = 1;$/;"	d
neg	bad_mmap.asm	/^  neg = 0;$/;"	d
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	eager_mmap.asm	/^    neg = 1;$/;"	d
neg	eager_mmap.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	imshow.asm	/^    neg = 1;$/;"	d
neg	imshow.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	lazy_mmap.asm	/^    neg = 1;$/;"	d
neg	lazy_mmap.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	prettyprint.asm	/^    neg = 1;$/;"	d
neg	prettyprint.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
nega	divide.asm	/^		nega = 1;$/;"	d
nega	divide.asm	/^	nega = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	bad_mmap.asm	/^    nu = 4096;$/;"	d
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	eager_mmap.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	imshow.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	lazy_mmap.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	prettyprint.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->rax;$/;"	d
nunits	bad_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	eager_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	imshow.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	lazy_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prettyprint.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable_p	mp.h	/^  uint32 oemtable_p;               \/\/ OEM table pointer$/;"	m	struct:mpconf
off	elf.h	/^  uint64 off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
off_63_32	mmu.h	/^  uint32 off_63_32;$/;"	m	struct:gatedesc
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	bad_mmap.asm	/^  os = s;$/;"	d
os	cat.asm	/^  os = s;$/;"	d
os	eager_mmap.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	imshow.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	lazy_mmap.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	prettyprint.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	bad_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	eager_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	imshow.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((addr_t)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	lazy_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	prettyprint.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	memlayout.h	/^static inline void *p2v(addr_t a) {$/;"	f
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint64 paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  addr_t pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pd	kernel.asm	/^          pd = (pde_t*)P2V(PTE_ADDR(pdp[j]));$/;"	d
pd	kernel.asm	/^    pd = (pde_t*)P2V(PTE_ADDR(*pdpe));$/;"	d
pde	kernel.asm	/^  pde = &pd[PDX(va)]; $/;"	d
pde_t	types.h	/^typedef addr_t pde_t;$/;"	t
pdp	kernel.asm	/^      pdp = (pdpe_t*)P2V(PTE_ADDR(pml4[i])); $/;"	d
pdp	kernel.asm	/^    pdp = (pdpe_t*)P2V(PTE_ADDR(*pml4e));  $/;"	d
pdpe	kernel.asm	/^  pdpe = &pdp[PDPX(va)];  $/;"	d
pdpe_t	types.h	/^typedef addr_t pdpe_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  addr_t phoff;$/;"	m	struct:elfhdr
physaddr	mp.h	/^  uint32 physaddr;               \/\/ 32-bit phys addr of MP config table$/;"	m	struct:mp
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pml4e	kernel.asm	/^  pml4e = &pml4[PMX(va)];$/;"	d
pml4e_t	types.h	/^typedef addr_t pml4e_t;$/;"	t
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printptr	console.c	/^printptr(addr_t x) {$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon1	typeref:struct:__anon1::proc	file:
proc	proc.h	/^struct proc {$/;"	s
proc	vm.c	/^__thread struct proc *proc;$/;"	v	typeref:struct:proc
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
pt	kernel.asm	/^              pt = (pde_t*)P2V(PTE_ADDR(pd[k]));$/;"	d
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon1
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef addr_t pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon9	typeref:union:header::__anon9::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	bad_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon8	file:
r	eager_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	imshow.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	lazy_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	prettyprint.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
r10	x86.h	/^   uint64 r10;$/;"	m	struct:trapframe
r11	proc.h	/^  addr_t r11;$/;"	m	struct:context
r11	x86.h	/^   uint64 r11;$/;"	m	struct:trapframe
r12	proc.h	/^  addr_t r12;$/;"	m	struct:context
r12	x86.h	/^   uint64 r12;$/;"	m	struct:trapframe
r13	proc.h	/^  addr_t r13;$/;"	m	struct:context
r13	x86.h	/^   uint64 r13;$/;"	m	struct:trapframe
r14	proc.h	/^  addr_t r14;$/;"	m	struct:context
r14	x86.h	/^   uint64 r14;$/;"	m	struct:trapframe
r15	proc.h	/^  addr_t r15;$/;"	m	struct:context
r15	x86.h	/^   uint64 r15;$/;"	m	struct:trapframe
r8	x86.h	/^   uint64 r8;$/;"	m	struct:trapframe
r9	x86.h	/^   uint64 r9;$/;"	m	struct:trapframe
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rax	x86.h	/^   uint64 rax;      $/;"	m	struct:trapframe
rbp	x86.h	/^   uint64 rbp;$/;"	m	struct:trapframe
rbx	proc.h	/^  addr_t rbx;$/;"	m	struct:context
rbx	x86.h	/^   uint64 rbx;$/;"	m	struct:trapframe
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
rcx	x86.h	/^   uint64 rcx;$/;"	m	struct:trapframe
rdi	x86.h	/^   uint64 rdi;$/;"	m	struct:trapframe
rdx	x86.h	/^   uint64 rdx;$/;"	m	struct:trapframe
re1	divide.asm	/^	re1 = x\/y;$/;"	d
re2	divide.asm	/^    re2 = (10*x\/y)%10;$/;"	d
re3	divide.asm	/^    re3 = (100*x\/y)%10;$/;"	d
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
rflags	x86.h	/^   uint64 rflags;  $/;"	m	struct:trapframe
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rip	x86.h	/^   uint64 rip;     $/;"	m	struct:trapframe
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsi	x86.h	/^   uint64 rsi;$/;"	m	struct:trapframe
rsp	x86.h	/^   uint64 rsp;     $/;"	m	struct:trapframe
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ 64-bit segment$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rsv2	mmu.h	/^  uint32 rsv2;$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	bad_mmap.asm	/^          s = "(null)";$/;"	d
s	bad_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = va_arg(ap, char*);$/;"	d
s	eager_mmap.asm	/^          s = "(null)";$/;"	d
s	eager_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = va_arg(ap, char*);$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = va_arg(ap, char*);$/;"	d
s	imshow.asm	/^          s = "(null)";$/;"	d
s	imshow.asm	/^        s = va_arg(ap, char*);$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = va_arg(ap, char*);$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = va_arg(ap, char*);$/;"	d
s	lazy_mmap.asm	/^          s = "(null)";$/;"	d
s	lazy_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	prettyprint.asm	/^          s = "(null)";$/;"	d
s	prettyprint.asm	/^        s = va_arg(ap, char*);$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = va_arg(ap, char*);$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon9	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = va_arg(ap, char*);$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = va_arg(ap, char*);$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = va_arg(ap, char*);$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  addr_t shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon9	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~(sizeof(addr_t)-1);$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	bad_mmap.asm	/^  src = vsrc;$/;"	d
src	cat.asm	/^  src = vsrc;$/;"	d
src	eager_mmap.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	imshow.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	lazy_mmap.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	prettyprint.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^   uint64 ss;      $/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	bad_mmap.asm	/^        state = '%';$/;"	d
state	bad_mmap.asm	/^      state = 0;$/;"	d
state	bad_mmap.asm	/^  state = 0;$/;"	d
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	eager_mmap.asm	/^        state = '%';$/;"	d
state	eager_mmap.asm	/^      state = 0;$/;"	d
state	eager_mmap.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	imshow.asm	/^        state = '%';$/;"	d
state	imshow.asm	/^      state = 0;$/;"	d
state	imshow.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	lazy_mmap.asm	/^        state = '%';$/;"	d
state	lazy_mmap.asm	/^      state = 0;$/;"	d
state	lazy_mmap.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	prettyprint.asm	/^        state = '%';$/;"	d
state	prettyprint.asm	/^      state = 0;$/;"	d
state	prettyprint.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bad_mmap.asm	/^static Header *freep;$/;"	l
static	bad_mmap.asm	/^static Header base;$/;"	l
static	bad_mmap.asm	/^static Header*$/;"	l
static	bad_mmap.asm	/^static inline void$/;"	l
static	bad_mmap.asm	/^static void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	eager_mmap.asm	/^static Header *freep;$/;"	l
static	eager_mmap.asm	/^static Header base;$/;"	l
static	eager_mmap.asm	/^static Header*$/;"	l
static	eager_mmap.asm	/^static inline void$/;"	l
static	eager_mmap.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	imshow.asm	/^static Header *freep;$/;"	l
static	imshow.asm	/^static Header base;$/;"	l
static	imshow.asm	/^static Header*$/;"	l
static	imshow.asm	/^static inline void$/;"	l
static	imshow.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static addr_t$/;"	l
static	kernel.asm	/^static char digits[] = "0123456789abcdef";$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline addr_t v2p(void *a) {$/;"	l
static	kernel.asm	/^static inline addr_t$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pde_t *kpdpt;$/;"	l
static	kernel.asm	/^static pde_t *kpml4;$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	lazy_mmap.asm	/^static Header *freep;$/;"	l
static	lazy_mmap.asm	/^static Header base;$/;"	l
static	lazy_mmap.asm	/^static Header*$/;"	l
static	lazy_mmap.asm	/^static inline void$/;"	l
static	lazy_mmap.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	prettyprint.asm	/^static Header *freep;$/;"	l
static	prettyprint.asm	/^static Header base;$/;"	l
static	prettyprint.asm	/^static Header*$/;"	l
static	prettyprint.asm	/^static inline void$/;"	l
static	prettyprint.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^    struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_mmap	sysproc.c	/^addr_t sys_mmap() {$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscall_entry	entry.S	/^syscall_entry:$/;"	l
syscall_trap	kernel.asm	/^syscall_trap:$/;"	l
syscall_trap	trapasm.S	/^syscall_trap:$/;"	l
syscall_trapret	kernel.asm	/^syscall_trapret:$/;"	l
syscall_trapret	trapasm.S	/^syscall_trapret:$/;"	l
syscallinit	vm.c	/^syscallinit(void)$/;"	f
syscalls	syscall.c	/^static addr_t (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  addr_t sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^   uint64 trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tss	kernel.asm	/^  tss = (uint*) (((char*) cpu->local) + 1024);$/;"	d
tss	kernel.asm	/^  tss = (uint*) (((char*) local) + 1024);$/;"	d
tss_set_rsp	vm.c	/^tss_set_rsp(uint *tss, uint n, uint64 rsp) {$/;"	f	file:
tvinit	trap.c	/^void tvinit(void) {$/;"	f
type	elf.h	/^  uint32 type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon3
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartearlyinit	uart.c	/^uartearlyinit(void)$/;"	f
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	bad_mmap.asm	/^uint$/;"	l
uint	cat.asm	/^uint$/;"	l
uint	eager_mmap.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	imshow.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	lazy_mmap.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	prettyprint.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uint32	types.h	/^typedef unsigned int  uint32;$/;"	t
uint64	types.h	/^typedef unsigned long uint64;$/;"	t
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon6	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
v2p	memlayout.h	/^static inline addr_t v2p(void *a) {$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint64 vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	vectors.S	/^vector0:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
void	bad_mmap.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	eager_mmap.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	imshow.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void entry32mp(void);$/;"	l
void	kernel.asm	/^void idtinit(void) {$/;"	l
void	kernel.asm	/^void tvinit(void) {$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	lazy_mmap.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	prettyprint.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon8	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pml4, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrmsr	entry.S	/^wrmsr:$/;"	l
wrmsr	kernel.asm	/^wrmsr:$/;"	l
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	bad_mmap.asm	/^    x = -xx;$/;"	d
x	bad_mmap.asm	/^    x = xx;$/;"	d
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	divide.asm	/^		x = - atoi(&(str_x[1]));$/;"	d
x	divide.asm	/^		x = atoi(str_x);$/;"	d
x	divide.asm	/^	x = x<0? -x:x;$/;"	d
x	eager_mmap.asm	/^    x = -xx;$/;"	d
x	eager_mmap.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	imshow.asm	/^    x = -xx;$/;"	d
x	imshow.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	lazy_mmap.asm	/^    x = -xx;$/;"	d
x	lazy_mmap.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	prettyprint.asm	/^    x = -xx;$/;"	d
x	prettyprint.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, addr_t newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
y	divide.asm	/^	y = y<0? -y:y;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
