!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
APP_SEG	mmu.h	101;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -gdwarf-2 -Wa,-divide -Iinclude $(XFLAGS)$/;"	m
ASSERT	lapic.c	26;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	139;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	29;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	30;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	199;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CALL_GATE	mmu.h	67;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	146;"	d	file:
CMOS_RETURN	lapic.c	147;"	d	file:
CMOS_STATA	lapic.c	186;"	d	file:
CMOS_STATB	lapic.c	187;"	d	file:
CMOS_UIP	lapic.c	188;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	38;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	237;"	d	file:
CONV	lapic.c	244;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_OSXFSR	mmu.h	42;"	d
CR4_OSXMMEXCPT	mmu.h	43;"	d
CR4_PAE	mmu.h	41;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	140;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	193;"	d	file:
DEASSERT	lapic.c	27;"	d	file:
DEBUG	Makefile	/^DEBUG=TRUE$/;"	m
DELIVS	lapic.c	25;"	d	file:
DIRSIZ	fs.h	51;"	d
DPL_USER	mmu.h	100;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	divide.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	imshow.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prettyprint.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	20;"	d	file:
EOI	lapic.c	18;"	d	file:
ERROR	lapic.c	39;"	d	file:
ESR	lapic.c	21;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	31;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	192;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	32;"	d	file:
ICRLO	lapic.c	22;"	d	file:
ID	lapic.c	15;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	23;"	d	file:
INPUT_BUF	console.c	190;"	d	file:
INT_ACTIVELOW	ioapic.c	23;"	d	file:
INT_DISABLED	ioapic.c	21;"	d	file:
INT_LEVEL	ioapic.c	22;"	d	file:
INT_LOGICAL	ioapic.c	24;"	d	file:
IOAPIC	ioapic.c	10;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_VALID	file.h	27;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0xFFFF800000000000 \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	7;"	d
KERNEL_CS	mmu.h	54;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -m elf_x86_64 -nodefaultlibs$/;"	m
LEVEL	lapic.c	28;"	d	file:
LINT0	lapic.c	37;"	d	file:
LINT1	lapic.c	38;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	40;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	191;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	194;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
MSR_CSTAR	mmu.h	49;"	d
MSR_EFER	mmu.h	46;"	d
MSR_LSTAR	mmu.h	48;"	d
MSR_SFMASK	mmu.h	50;"	d
MSR_STAR	mmu.h	47;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	191;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	143;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	144;"	d
NSEGS	mmu.h	66;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
OPT	Makefile	/^OPT ?= -O0$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	21;"	d
P2V_WO	memlayout.h	24;"	d
PCINT	lapic.c	36;"	d	file:
PDPX	mmu.h	136;"	d
PDPXSHIFT	mmu.h	149;"	d
PDX	mmu.h	138;"	d
PDXSHIFT	mmu.h	148;"	d
PERIODIC	lapic.c	35;"	d	file:
PGROUNDDOWN	mmu.h	154;"	d
PGROUNDUP	mmu.h	153;"	d
PGSHIFT	mmu.h	146;"	d
PGSIZE	mmu.h	145;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PML4XSHIFT	mmu.h	150;"	d
PMX	mmu.h	134;"	d
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	162;"	d
PTE_ADDR	mmu.h	168;"	d
PTE_D	mmu.h	163;"	d
PTE_FLAGS	mmu.h	169;"	d
PTE_MBZ	mmu.h	165;"	d
PTE_P	mmu.h	157;"	d
PTE_PCD	mmu.h	161;"	d
PTE_PS	mmu.h	164;"	d
PTE_PWT	mmu.h	160;"	d
PTE_U	mmu.h	159;"	d
PTE_W	mmu.h	158;"	d
PTX	mmu.h	140;"	d
PTXSHIFT	mmu.h	147;"	d
PXMASK	mmu.h	151;"	d
QEMU	Makefile	/^ QEMU = qemu-system-x86_64$/;"	m
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -net none -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	12;"	d	file:
REG_TABLE	ioapic.c	14;"	d	file:
REG_VER	ioapic.c	13;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	190;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	12;"	d	file:
SEG	mmu.h	89;"	d
SEG16	mmu.h	94;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	58;"	d
SEG_KCPU	mmu.h	60;"	d
SEG_KDATA	mmu.h	59;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	63;"	d
SEG_UCODE	mmu.h	61;"	d
SEG_UDATA	mmu.h	62;"	d
SETCALLGATE	mmu.h	243;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	24;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	109;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	106;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	105;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	108;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	107;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	104;"	d
STS_CG16	mmu.h	115;"	d
STS_CG64	mmu.h	121;"	d
STS_IG16	mmu.h	117;"	d
STS_IG64	mmu.h	122;"	d
STS_LDT	mmu.h	113;"	d
STS_T16A	mmu.h	112;"	d
STS_T16B	mmu.h	114;"	d
STS_T64A	mmu.h	119;"	d
STS_T64B	mmu.h	120;"	d
STS_TG	mmu.h	116;"	d
STS_TG16	mmu.h	118;"	d
STS_TG64	mmu.h	123;"	d
SVR	lapic.c	19;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_ioctl	syscall.h	23;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	42;"	d	file:
TDCR	lapic.c	43;"	d	file:
TICR	lapic.c	41;"	d	file:
TIMER	lapic.c	33;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	17;"	d	file:
TRAP_GATE	mmu.h	171;"	d
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
USER_CS	mmu.h	53;"	d
USER_DS	mmu.h	55;"	d
V2P	memlayout.h	20;"	d
V2P_WO	memlayout.h	23;"	d
VER	lapic.c	16;"	d	file:
VGA	kernel.asm	/^#define VGA 0x3C0$/;"	d
VGA	vga.c	281;"	d	file:
X1	lapic.c	34;"	d	file:
XFLAGS	Makefile	/^XFLAGS = -m64 -DX64 -mcmodel=large -mtls-direct-seg-refs -mno-red-zone$/;"	m
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	195;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
__deadloop	entry.S	/^__deadloop:$/;"	l
__deadloop	kernel.asm	/^__deadloop:$/;"	l
_cat	cat.asm	/^_cat:     file format elf64-x86-64$/;"	l
_divide	divide.asm	/^_divide:     file format elf64-x86-64$/;"	l
_echo	echo.asm	/^_echo:     file format elf64-x86-64$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf64-x86-64$/;"	l
_grep	grep.asm	/^_grep:     file format elf64-x86-64$/;"	l
_imshow	imshow.asm	/^_imshow:     file format elf64-x86-64$/;"	l
_init	init.asm	/^_init:     file format elf64-x86-64$/;"	l
_kill	kill.asm	/^_kill:     file format elf64-x86-64$/;"	l
_ln	ln.asm	/^_ln:     file format elf64-x86-64$/;"	l
_ls	ls.asm	/^_ls:     file format elf64-x86-64$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf64-x86-64$/;"	l
_prettyprint	prettyprint.asm	/^_prettyprint:     file format elf64-x86-64$/;"	l
_rm	rm.asm	/^_rm:     file format elf64-x86-64$/;"	l
_sh	sh.asm	/^_sh:     file format elf64-x86-64$/;"	l
_start	entry.S	/^_start:$/;"	l
_start	kernel.asm	/^_start:$/;"	l
_stressfs	stressfs.asm	/^_stressfs:     file format elf64-x86-64$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf64-x86-64$/;"	l
_wc	wc.asm	/^_wc:     file format elf64-x86-64$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf64-x86-64$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((addr_t)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a0	forktest.asm	/^  a0:	00 00 00 $/;"	l
a0	usertests.asm	/^      a0:	8b 00                	mov    (%rax),%eax$/;"	l
a0	zombie.asm	/^  a0:	84 c0                	test   %al,%al$/;"	l
a00	cat.asm	/^ a00:	48 b8 9c 05 00 00 00 	movabs $0x59c,%rax$/;"	l
a01	init.asm	/^ a01:	eb 38                	jmp    a3b <printf+0x373>$/;"	l
a01	kill.asm	/^ a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a01	ln.asm	/^ a01:	eb 0e                	jmp    a11 <free+0xcf>$/;"	l
a01	sh.asm	/^     a01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a01	usertests.asm	/^     a01:	00 00 00 $/;"	l
a01	zombie.asm	/^ a01:	77 07                	ja     a0a <morecore+0x1b>$/;"	l
a02	ls.asm	/^     a02:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a02	mkdir.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a02	rm.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	echo.asm	/^ a03:	75 27                	jne    a2c <free+0x113>$/;"	l
a03	init.asm	/^ a03:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a03	ln.asm	/^ a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	zombie.asm	/^ a03:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a04	usertests.asm	/^     a04:	89 c7                	mov    %eax,%edi$/;"	l
a04	wc.asm	/^ a04:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a05	divide.asm	/^ a05:	89 d2                	mov    %edx,%edx$/;"	l
a05	echo.asm	/^ a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a05	imshow.asm	/^ a05:	8b 30                	mov    (%rax),%esi$/;"	l
a05	kill.asm	/^ a05:	48 01 d0             	add    %rdx,%rax$/;"	l
a05	sh.asm	/^     a05:	48 89 c7             	mov    %rax,%rdi$/;"	l
a05	stressfs.asm	/^ a05:	89 d6                	mov    %edx,%esi$/;"	l
a06	grep.asm	/^ a06:	48 01 d0             	add    %rdx,%rax$/;"	l
a06	mkdir.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	prettyprint.asm	/^     a06:	00 00 00 $/;"	l
a06	rm.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	usertests.asm	/^     a06:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a07	cat.asm	/^ a07:	00 00 00 $/;"	l
a07	divide.asm	/^ a07:	48 01 d0             	add    %rdx,%rax$/;"	l
a07	imshow.asm	/^ a07:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a07	ln.asm	/^ a07:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a07	stressfs.asm	/^ a07:	89 c7                	mov    %eax,%edi$/;"	l
a07	wc.asm	/^ a07:	73 23                	jae    a2c <printf+0x2e2>$/;"	l
a08	kill.asm	/^ a08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a08	sh.asm	/^     a08:	48 b8 b2 12 00 00 00 	movabs $0x12b2,%rax$/;"	l
a09	echo.asm	/^ a09:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a09	grep.asm	/^ a09:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a09	init.asm	/^ a09:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a09	ls.asm	/^     a09:	00 00 00 $/;"	l
a09	mkdir.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	prettyprint.asm	/^     a09:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
a09	rm.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	stressfs.asm	/^ a09:	48 b8 a5 05 00 00 00 	movabs $0x5a5,%rax$/;"	l
a09	wc.asm	/^ a09:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a0a	cat.asm	/^ a0a:	ff d0                	callq  *%rax$/;"	l
a0a	divide.asm	/^ a0a:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a0a	ln.asm	/^ a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0a	zombie.asm	/^ a0a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a0b	usertests.asm	/^     a0b:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
a0c	cat.asm	/^ a0c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a0c	echo.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	grep.asm	/^ a0c:	0f be c0             	movsbl %al,%eax$/;"	l
a0c	kill.asm	/^ a0c:	75 27                	jne    a35 <free+0x113>$/;"	l
a0c	ls.asm	/^     a0c:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a0c	mkdir.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	rm.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0d	imshow.asm	/^ a0d:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
a0d	zombie.asm	/^ a0d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a0e	init.asm	/^ a0e:	89 c7                	mov    %eax,%edi$/;"	l
a0e	kill.asm	/^ a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a0e	ln.asm	/^ a0e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a0f	grep.asm	/^ a0f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a0f	sh.asm	/^     a0f:	00 00 00 $/;"	l
a1	cat.asm	/^  a1:	48 ba 99 06 00 00 00 	movabs $0x699,%rdx$/;"	l
a1	imshow.asm	/^  a1:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a1	ls.asm	/^      a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a1	prettyprint.asm	/^      a1:	ff d0                	callq  *%rax$/;"	l
a1	stressfs.asm	/^  a1:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a10	divide.asm	/^ a10:	83 c2 08             	add    $0x8,%edx$/;"	l
a10	echo.asm	/^ a10:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a10	init.asm	/^ a10:	48 b8 cb 05 00 00 00 	movabs $0x5cb,%rax$/;"	l
a10	mkdir.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	prettyprint.asm	/^     a10:	00 00 00 $/;"	l
a10	rm.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	stressfs.asm	/^ a10:	00 00 00 $/;"	l
a10	wc.asm	/^ a10:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a10	zombie.asm	/^ a10:	89 c7                	mov    %eax,%edi$/;"	l
a11	ln.asm	/^ a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a12	imshow.asm	/^ a12:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
a12	kill.asm	/^ a12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a12	sh.asm	/^     a12:	ff d0                	callq  *%rax$/;"	l
a12	usertests.asm	/^     a12:	00 00 00 $/;"	l
a12	zombie.asm	/^ a12:	48 b8 f3 03 00 00 00 	movabs $0x3f3,%rax$/;"	l
a13	cat.asm	/^ a13:	00 00 00 $/;"	l
a13	divide.asm	/^ a13:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a13	echo.asm	/^ a13:	01 c2                	add    %eax,%edx$/;"	l
a13	ls.asm	/^     a13:	00 00 00 $/;"	l
a13	mkdir.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	prettyprint.asm	/^     a13:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
a13	rm.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	stressfs.asm	/^ a13:	ff d0                	callq  *%rax$/;"	l
a14	grep.asm	/^ a14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a14	sh.asm	/^     a14:	89 c0                	mov    %eax,%eax$/;"	l
a15	echo.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	kill.asm	/^ a15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a15	ln.asm	/^ a15:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a15	mkdir.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	rm.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	stressfs.asm	/^ a15:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a15	usertests.asm	/^     a15:	ff d2                	callq  *%rdx$/;"	l
a16	cat.asm	/^ a16:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a16	ls.asm	/^     a16:	e9 e6 02 00 00       	jmpq   d01 <printf+0x384>$/;"	l
a16	sh.asm	/^     a16:	48 01 d8             	add    %rbx,%rax$/;"	l
a16	wc.asm	/^ a16:	89 d2                	mov    %edx,%edx$/;"	l
a17	imshow.asm	/^ a17:	89 c7                	mov    %eax,%edi$/;"	l
a17	init.asm	/^ a17:	00 00 00 $/;"	l
a17	prettyprint.asm	/^     a17:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
a17	usertests.asm	/^     a17:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a18	ln.asm	/^ a18:	89 c0                	mov    %eax,%eax$/;"	l
a18	wc.asm	/^ a18:	48 01 d0             	add    %rdx,%rax$/;"	l
a19	divide.asm	/^ a19:	eb 12                	jmp    a2d <printf+0x246>$/;"	l
a19	echo.asm	/^ a19:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a19	imshow.asm	/^ a19:	48 b8 64 07 00 00 00 	movabs $0x764,%rax$/;"	l
a19	kill.asm	/^ a19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a19	mkdir.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	rm.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	sh.asm	/^     a19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
a19	zombie.asm	/^ a19:	00 00 00 $/;"	l
a1a	grep.asm	/^ a1a:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a1a	init.asm	/^ a1a:	ff d0                	callq  *%rax$/;"	l
a1a	ln.asm	/^ a1a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a1b	divide.asm	/^ a1b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a1b	ls.asm	/^     a1b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1b	wc.asm	/^ a1b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a1c	echo.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	init.asm	/^ a1c:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a1c	kill.asm	/^ a1c:	01 c2                	add    %eax,%edx$/;"	l
a1c	mkdir.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	rm.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	stressfs.asm	/^ a1c:	00 00 00 $/;"	l
a1c	zombie.asm	/^ a1c:	ff d0                	callq  *%rax$/;"	l
a1d	cat.asm	/^ a1d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1d	sh.asm	/^     a1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
a1e	kill.asm	/^ a1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a1e	ln.asm	/^ a1e:	48 89 c2             	mov    %rax,%rdx$/;"	l
a1e	prettyprint.asm	/^     a1e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
a1e	usertests.asm	/^     a1e:	00 00 00 $/;"	l
a1e	zombie.asm	/^ a1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a1f	stressfs.asm	/^ a1f:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a2	kill.asm	/^  a2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
a2	mkdir.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	rm.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	usertests.asm	/^      a2:	48 be a7 68 00 00 00 	movabs $0x68a7,%rsi$/;"	l
a2	zombie.asm	/^  a2:	75 dc                	jne    80 <strcpy+0x19>$/;"	l
a20	echo.asm	/^ a20:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a20	imshow.asm	/^ a20:	00 00 00 $/;"	l
a20	mkdir.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a20	rm.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a21	grep.asm	/^ a21:	75 3c                	jne    a5f <printf+0x107>$/;"	l
a21	ln.asm	/^ a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a21	ls.asm	/^     a21:	48 63 d0             	movslq %eax,%rdx$/;"	l
a21	sh.asm	/^     a21:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a21	usertests.asm	/^     a21:	ff d0                	callq  *%rax$/;"	l
a21	wc.asm	/^ a21:	83 c2 08             	add    $0x8,%edx$/;"	l
a22	divide.asm	/^ a22:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a22	init.asm	/^ a22:	0f be d0             	movsbl %al,%edx$/;"	l
a22	kill.asm	/^ a22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a22	zombie.asm	/^ a22:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a23	cat.asm	/^ a23:	48 63 d0             	movslq %eax,%rdx$/;"	l
a23	echo.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	grep.asm	/^ a23:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a23	imshow.asm	/^ a23:	ff d0                	callq  *%rax$/;"	l
a23	mkdir.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	rm.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	usertests.asm	/^     a23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
a24	ls.asm	/^     a24:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a24	wc.asm	/^ a24:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a25	imshow.asm	/^ a25:	e9 7a 01 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
a25	init.asm	/^ a25:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a25	kill.asm	/^ a25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a25	ln.asm	/^ a25:	48 01 d0             	add    %rdx,%rax$/;"	l
a25	prettyprint.asm	/^     a25:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
a25	sh.asm	/^     a25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
a26	cat.asm	/^ a26:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a26	divide.asm	/^ a26:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a26	stressfs.asm	/^ a26:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a27	echo.asm	/^ a27:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a27	mkdir.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	rm.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	zombie.asm	/^ a27:	75 07                	jne    a30 <morecore+0x41>$/;"	l
a28	ln.asm	/^ a28:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a28	sh.asm	/^     a28:	48 89 c7             	mov    %rax,%rdi$/;"	l
a29	kill.asm	/^ a29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a29	zombie.asm	/^ a29:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a2a	echo.asm	/^ a2a:	eb 0b                	jmp    a37 <free+0x11e>$/;"	l
a2a	grep.asm	/^ a2a:	75 0f                	jne    a3b <printf+0xe3>$/;"	l
a2a	imshow.asm	/^ a2a:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
a2a	mkdir.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	rm.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	usertests.asm	/^     a2a:	eb 72                	jmp    a9e <writetest1+0x105>$/;"	l
a2a	wc.asm	/^ a2a:	eb 12                	jmp    a3e <printf+0x2f4>$/;"	l
a2b	init.asm	/^ a2b:	89 d6                	mov    %edx,%esi$/;"	l
a2b	ls.asm	/^     a2b:	48 01 d0             	add    %rdx,%rax$/;"	l
a2b	sh.asm	/^     a2b:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
a2c	echo.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	grep.asm	/^ a2c:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a2c	kill.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	ln.asm	/^ a2c:	75 27                	jne    a55 <free+0x113>$/;"	l
a2c	mkdir.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	prettyprint.asm	/^     a2c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a2c	rm.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	stressfs.asm	/^ a2c:	48 63 d0             	movslq %eax,%rdx$/;"	l
a2c	usertests.asm	/^     a2c:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
a2c	wc.asm	/^ a2c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a2d	cat.asm	/^ a2d:	48 01 d0             	add    %rdx,%rax$/;"	l
a2d	divide.asm	/^ a2d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a2d	init.asm	/^ a2d:	89 c7                	mov    %eax,%edi$/;"	l
a2e	ln.asm	/^ a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2e	ls.asm	/^     a2e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a2e	zombie.asm	/^ a2e:	eb 36                	jmp    a66 <morecore+0x77>$/;"	l
a2f	init.asm	/^ a2f:	48 b8 cb 05 00 00 00 	movabs $0x5cb,%rax$/;"	l
a2f	stressfs.asm	/^ a2f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a3	echo.asm	/^  a3:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
a3	forktest.asm	/^  a3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a3	grep.asm	/^  a3:	48 83 c0 01          	add    $0x1,%rax$/;"	l
a3	prettyprint.asm	/^      a3:	48 be f8 11 00 00 00 	movabs $0x11f8,%rsi$/;"	l
a3	sh.asm	/^      a3:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
a3	wc.asm	/^  a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a30	cat.asm	/^ a30:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a30	divide.asm	/^ a30:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a30	echo.asm	/^ a30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a30	kill.asm	/^ a30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a30	mkdir.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	rm.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	zombie.asm	/^ a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a31	imshow.asm	/^ a31:	0f 85 a5 00 00 00    	jne    adc <printf+0x2ab>$/;"	l
a31	ls.asm	/^     a31:	0f be c0             	movsbl %al,%eax$/;"	l
a32	ln.asm	/^ a32:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a32	sh.asm	/^     a32:	00 00 00 $/;"	l
a33	cat.asm	/^ a33:	84 c0                	test   %al,%al$/;"	l
a33	grep.asm	/^ a33:	00 00 00 $/;"	l
a33	kill.asm	/^ a33:	eb 0b                	jmp    a40 <free+0x11e>$/;"	l
a33	mkdir.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	prettyprint.asm	/^     a33:	00 00 00 $/;"	l
a33	rm.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	usertests.asm	/^     a33:	00 00 00 $/;"	l
a33	wc.asm	/^ a33:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a34	echo.asm	/^ a34:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a34	ls.asm	/^     a34:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a34	zombie.asm	/^ a34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a35	cat.asm	/^ a35:	0f 85 fc fc ff ff    	jne    737 <printf+0x9e>$/;"	l
a35	kill.asm	/^ a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a35	ln.asm	/^ a35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a35	sh.asm	/^     a35:	ff d0                	callq  *%rax$/;"	l
a36	grep.asm	/^ a36:	e9 9a 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a36	init.asm	/^ a36:	00 00 00 $/;"	l
a36	prettyprint.asm	/^     a36:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a36	stressfs.asm	/^ a36:	48 01 d0             	add    %rdx,%rax$/;"	l
a36	usertests.asm	/^     a36:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a37	divide.asm	/^ a37:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a37	echo.asm	/^ a37:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
a37	imshow.asm	/^ a37:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a37	mkdir.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	rm.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	sh.asm	/^     a37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
a37	wc.asm	/^ a37:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a38	zombie.asm	/^ a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a39	init.asm	/^ a39:	ff d0                	callq  *%rax$/;"	l
a39	kill.asm	/^ a39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a39	ln.asm	/^ a39:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a39	ls.asm	/^     a39:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a39	stressfs.asm	/^ a39:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a39	usertests.asm	/^     a39:	89 10                	mov    %edx,(%rax)$/;"	l
a3a	mkdir.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3a	rm.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3b	cat.asm	/^ a3b:	90                   	nop$/;"	l
a3b	grep.asm	/^ a3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a3b	init.asm	/^ a3b:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a3b	sh.asm	/^     a3b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
a3b	usertests.asm	/^     a3b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a3c	cat.asm	/^ a3c:	c9                   	leaveq $/;"	l
a3c	ln.asm	/^ a3c:	01 c2                	add    %eax,%edx$/;"	l
a3c	stressfs.asm	/^ a3c:	84 c0                	test   %al,%al$/;"	l
a3c	zombie.asm	/^ a3c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a3d	cat.asm	/^ a3d:	c3                   	retq   $/;"	l
a3d	imshow.asm	/^ a3d:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a3d	kill.asm	/^ a3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a3d	prettyprint.asm	/^     a3d:	00 00 00 $/;"	l
a3e	cat.asm	/^ a3e:	55                   	push   %rbp$/;"	l
a3e	divide.asm	/^ a3e:	00 $/;"	l
a3e	echo.asm	/^ a3e:	00 00 00 $/;"	l
a3e	ln.asm	/^ a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a3e	mkdir.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	rm.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	stressfs.asm	/^ a3e:	0f 85 fc fc ff ff    	jne    740 <printf+0x9e>$/;"	l
a3e	usertests.asm	/^     a3e:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
a3e	wc.asm	/^ a3e:	8b 00                	mov    (%rax),%eax$/;"	l
a3f	cat.asm	/^ a3f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a3f	divide.asm	/^ a3f:	75 3e                	jne    a7f <printf+0x298>$/;"	l
a3f	ls.asm	/^     a3f:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a3f	sh.asm	/^     a3f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a3f	zombie.asm	/^ a3f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a4	init.asm	/^  a4:	00 00 00 $/;"	l
a4	ln.asm	/^  a4:	00 00 00 $/;"	l
a4	zombie.asm	/^  a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	imshow.asm	/^ a40:	73 23                	jae    a65 <printf+0x234>$/;"	l
a40	kill.asm	/^ a40:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
a40	mkdir.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	prettyprint.asm	/^     a40:	e9 e6 02 00 00       	jmpq   d2b <printf+0x384>$/;"	l
a40	rm.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	wc.asm	/^ a40:	0f be d0             	movsbl %al,%edx$/;"	l
a41	divide.asm	/^ a41:	48 b8 2d 0f 00 00 00 	movabs $0xf2d,%rax$/;"	l
a41	echo.asm	/^ a41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a41	grep.asm	/^ a41:	0f be d0             	movsbl %al,%edx$/;"	l
a42	cat.asm	/^ a42:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a42	imshow.asm	/^ a42:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a42	init.asm	/^ a42:	00 00 00 $/;"	l
a42	ln.asm	/^ a42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a42	zombie.asm	/^ a42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a43	sh.asm	/^     a43:	48 ba ea 1d 00 00 00 	movabs $0x1dea,%rdx$/;"	l
a43	usertests.asm	/^     a43:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
a43	wc.asm	/^ a43:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	grep.asm	/^ a44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	mkdir.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	rm.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	stressfs.asm	/^ a44:	90                   	nop$/;"	l
a45	echo.asm	/^ a45:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a45	init.asm	/^ a45:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a45	ln.asm	/^ a45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a45	prettyprint.asm	/^     a45:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a45	stressfs.asm	/^ a45:	c9                   	leaveq $/;"	l
a46	cat.asm	/^ a46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a46	ls.asm	/^     a46:	75 3c                	jne    a84 <printf+0x107>$/;"	l
a46	stressfs.asm	/^ a46:	c3                   	retq   $/;"	l
a46	zombie.asm	/^ a46:	48 83 c0 10          	add    $0x10,%rax$/;"	l
a47	kill.asm	/^ a47:	00 00 00 $/;"	l
a47	mkdir.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	rm.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	stressfs.asm	/^ a47:	55                   	push   %rbp$/;"	l
a48	divide.asm	/^ a48:	00 00 00 $/;"	l
a48	echo.asm	/^ a48:	90                   	nop$/;"	l
a48	ls.asm	/^     a48:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a48	stressfs.asm	/^ a48:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a49	echo.asm	/^ a49:	c9                   	leaveq $/;"	l
a49	imshow.asm	/^ a49:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a49	ln.asm	/^ a49:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a49	wc.asm	/^ a49:	89 d6                	mov    %edx,%esi$/;"	l
a4a	cat.asm	/^ a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a4a	echo.asm	/^ a4a:	c3                   	retq   $/;"	l
a4a	grep.asm	/^ a4a:	89 d6                	mov    %edx,%esi$/;"	l
a4a	kill.asm	/^ a4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a4a	sh.asm	/^     a4a:	00 00 00 $/;"	l
a4a	usertests.asm	/^     a4a:	00 00 00 $/;"	l
a4a	zombie.asm	/^ a4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
a4b	divide.asm	/^ a4b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a4b	echo.asm	/^ a4b:	55                   	push   %rbp$/;"	l
a4b	mkdir.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	prettyprint.asm	/^     a4b:	48 63 d0             	movslq %eax,%rdx$/;"	l
a4b	rm.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	stressfs.asm	/^ a4b:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a4b	wc.asm	/^ a4b:	89 c7                	mov    %eax,%edi$/;"	l
a4c	echo.asm	/^ a4c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a4c	grep.asm	/^ a4c:	89 c7                	mov    %eax,%edi$/;"	l
a4c	init.asm	/^ a4c:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a4c	ln.asm	/^ a4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a4d	sh.asm	/^     a4d:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a4d	usertests.asm	/^     a4d:	89 c7                	mov    %eax,%edi$/;"	l
a4d	wc.asm	/^ a4d:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a4d	zombie.asm	/^ a4d:	48 b8 bd 08 00 00 00 	movabs $0x8bd,%rax$/;"	l
a4e	cat.asm	/^ a4e:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a4e	grep.asm	/^ a4e:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
a4e	kill.asm	/^ a4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a4e	mkdir.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4e	prettyprint.asm	/^     a4e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a4e	rm.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4f	echo.asm	/^ a4f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a4f	imshow.asm	/^ a4f:	89 d2                	mov    %edx,%edx$/;"	l
a4f	ls.asm	/^     a4f:	75 0f                	jne    a60 <printf+0xe3>$/;"	l
a4f	stressfs.asm	/^ a4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a4f	usertests.asm	/^     a4f:	48 b8 2a 60 00 00 00 	movabs $0x602a,%rax$/;"	l
a5	kill.asm	/^  a5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
a5	ls.asm	/^      a5:	48 89 c7             	mov    %rax,%rdi$/;"	l
a50	ln.asm	/^ a50:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a50	mkdir.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	rm.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	sh.asm	/^     a50:	48 89 c7             	mov    %rax,%rdi$/;"	l
a51	imshow.asm	/^ a51:	48 01 d0             	add    %rdx,%rax$/;"	l
a51	kill.asm	/^ a51:	90                   	nop$/;"	l
a51	ls.asm	/^     a51:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a52	cat.asm	/^ a52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a52	divide.asm	/^ a52:	eb 2b                	jmp    a7f <printf+0x298>$/;"	l
a52	init.asm	/^ a52:	48 63 d0             	movslq %eax,%rdx$/;"	l
a52	kill.asm	/^ a52:	c9                   	leaveq $/;"	l
a53	echo.asm	/^ a53:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a53	kill.asm	/^ a53:	c3                   	retq   $/;"	l
a53	ln.asm	/^ a53:	eb 0b                	jmp    a60 <free+0x11e>$/;"	l
a53	sh.asm	/^     a53:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
a53	stressfs.asm	/^ a53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a54	divide.asm	/^ a54:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a54	imshow.asm	/^ a54:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a54	kill.asm	/^ a54:	55                   	push   %rbp$/;"	l
a54	mkdir.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	rm.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	wc.asm	/^ a54:	00 00 00 $/;"	l
a54	zombie.asm	/^ a54:	00 00 00 $/;"	l
a55	grep.asm	/^ a55:	00 00 00 $/;"	l
a55	init.asm	/^ a55:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a55	kill.asm	/^ a55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a55	ln.asm	/^ a55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a55	prettyprint.asm	/^     a55:	48 01 d0             	add    %rdx,%rax$/;"	l
a56	cat.asm	/^ a56:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
a56	echo.asm	/^ a56:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a56	usertests.asm	/^     a56:	00 00 00 $/;"	l
a57	mkdir.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	rm.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	stressfs.asm	/^ a57:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a57	wc.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a57	zombie.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a58	grep.asm	/^ a58:	ff d0                	callq  *%rax$/;"	l
a58	kill.asm	/^ a58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a58	ls.asm	/^     a58:	00 00 00 $/;"	l
a58	prettyprint.asm	/^     a58:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a59	ln.asm	/^ a59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a59	usertests.asm	/^     a59:	ff d0                	callq  *%rax$/;"	l
a59	wc.asm	/^ a59:	eb 62                	jmp    abd <printf+0x373>$/;"	l
a59	zombie.asm	/^ a59:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a5a	grep.asm	/^ a5a:	e9 76 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a5a	imshow.asm	/^ a5a:	83 c2 08             	add    $0x8,%edx$/;"	l
a5a	sh.asm	/^     a5a:	00 00 00 $/;"	l
a5b	divide.asm	/^ a5b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a5b	ls.asm	/^     a5b:	e9 9a 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a5b	mkdir.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	prettyprint.asm	/^     a5b:	0f be c0             	movsbl %al,%eax$/;"	l
a5b	rm.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	stressfs.asm	/^ a5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a5b	usertests.asm	/^     a5b:	3d 00 02 00 00       	cmp    $0x200,%eax$/;"	l
a5b	wc.asm	/^ a5b:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a5c	init.asm	/^ a5c:	48 01 d0             	add    %rdx,%rax$/;"	l
a5c	kill.asm	/^ a5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a5d	cat.asm	/^ a5d:	00 00 00 $/;"	l
a5d	echo.asm	/^ a5d:	77 07                	ja     a66 <morecore+0x1b>$/;"	l
a5d	imshow.asm	/^ a5d:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a5d	ln.asm	/^ a5d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a5d	sh.asm	/^     a5d:	ff d0                	callq  *%rax$/;"	l
a5e	divide.asm	/^ a5e:	0f be d0             	movsbl %al,%edx$/;"	l
a5e	mkdir.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5e	prettyprint.asm	/^     a5e:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a5e	rm.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5f	echo.asm	/^ a5f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a5f	grep.asm	/^ a5f:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a5f	init.asm	/^ a5f:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a5f	kill.asm	/^ a5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a5f	sh.asm	/^     a5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a5f	stressfs.asm	/^ a5f:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
a6	divide.asm	/^  a6:	00 00 00 $/;"	l
a6	echo.asm	/^  a6:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a6	imshow.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a6	stressfs.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a60	cat.asm	/^ a60:	48 8b 00             	mov    (%rax),%rax$/;"	l
a60	ln.asm	/^ a60:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
a60	ls.asm	/^     a60:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a60	usertests.asm	/^     a60:	74 38                	je     a9a <writetest1+0x101>$/;"	l
a60	zombie.asm	/^ a60:	00 00 00 $/;"	l
a61	divide.asm	/^ a61:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a62	init.asm	/^ a62:	84 c0                	test   %al,%al$/;"	l
a62	mkdir.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	rm.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	usertests.asm	/^     a62:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
a62	wc.asm	/^ a62:	75 21                	jne    a85 <printf+0x33b>$/;"	l
a63	cat.asm	/^ a63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a63	imshow.asm	/^ a63:	eb 12                	jmp    a77 <printf+0x246>$/;"	l
a63	prettyprint.asm	/^     a63:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a63	sh.asm	/^     a63:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
a63	zombie.asm	/^ a63:	48 8b 00             	mov    (%rax),%rax$/;"	l
a64	init.asm	/^ a64:	0f 85 fc fc ff ff    	jne    766 <printf+0x9e>$/;"	l
a64	wc.asm	/^ a64:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a65	imshow.asm	/^ a65:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a65	mkdir.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a65	rm.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a66	echo.asm	/^ a66:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a66	grep.asm	/^ a66:	0f 85 69 02 00 00    	jne    cd5 <printf+0x37d>$/;"	l
a66	kill.asm	/^ a66:	77 07                	ja     a6f <morecore+0x1b>$/;"	l
a66	ls.asm	/^     a66:	0f be d0             	movsbl %al,%edx$/;"	l
a66	stressfs.asm	/^ a66:	00 00 00 $/;"	l
a66	zombie.asm	/^ a66:	c9                   	leaveq $/;"	l
a67	cat.asm	/^ a67:	eb 2f                	jmp    a98 <free+0x5a>$/;"	l
a67	divide.asm	/^ a67:	89 d6                	mov    %edx,%esi$/;"	l
a67	ln.asm	/^ a67:	00 00 00 $/;"	l
a67	mkdir.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	rm.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	sh.asm	/^     a67:	74 3d                	je     aa6 <parsecmd+0xb6>$/;"	l
a67	zombie.asm	/^ a67:	c3                   	retq   $/;"	l
a68	kill.asm	/^ a68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a68	zombie.asm	/^ a68:	55                   	push   %rbp$/;"	l
a69	cat.asm	/^ a69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a69	divide.asm	/^ a69:	89 c7                	mov    %eax,%edi$/;"	l
a69	echo.asm	/^ a69:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a69	ls.asm	/^     a69:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a69	prettyprint.asm	/^     a69:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a69	sh.asm	/^     a69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a69	stressfs.asm	/^ a69:	48 8b 00             	mov    (%rax),%rax$/;"	l
a69	usertests.asm	/^     a69:	00 00 00 $/;"	l
a69	zombie.asm	/^ a69:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a6a	init.asm	/^ a6a:	90                   	nop$/;"	l
a6a	ln.asm	/^ a6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a6a	wc.asm	/^ a6a:	0f be d0             	movsbl %al,%edx$/;"	l
a6b	divide.asm	/^ a6b:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
a6b	init.asm	/^ a6b:	c9                   	leaveq $/;"	l
a6b	mkdir.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6b	rm.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6c	echo.asm	/^ a6c:	89 c7                	mov    %eax,%edi$/;"	l
a6c	grep.asm	/^ a6c:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a6c	imshow.asm	/^ a6c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a6c	init.asm	/^ a6c:	c3                   	retq   $/;"	l
a6c	stressfs.asm	/^ a6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a6c	usertests.asm	/^     a6c:	8b 00                	mov    (%rax),%eax$/;"	l
a6c	zombie.asm	/^ a6c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
a6d	cat.asm	/^ a6d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a6d	init.asm	/^ a6d:	55                   	push   %rbp$/;"	l
a6d	sh.asm	/^     a6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
a6d	wc.asm	/^ a6d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a6e	echo.asm	/^ a6e:	48 b8 4f 04 00 00 00 	movabs $0x44f,%rax$/;"	l
a6e	init.asm	/^ a6e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a6e	ln.asm	/^ a6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6e	usertests.asm	/^     a6e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a6f	kill.asm	/^ a6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a6f	ls.asm	/^     a6f:	89 d6                	mov    %edx,%esi$/;"	l
a6f	mkdir.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6f	rm.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a7	grep.asm	/^  a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a7	init.asm	/^  a7:	ff d0                	callq  *%rax$/;"	l
a7	ln.asm	/^  a7:	41 ff d0             	callq  *%r8$/;"	l
a7	sh.asm	/^      a7:	48 89 c2             	mov    %rax,%rdx$/;"	l
a7	wc.asm	/^  a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a70	cat.asm	/^ a70:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a70	imshow.asm	/^ a70:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a70	prettyprint.asm	/^     a70:	75 3c                	jne    aae <printf+0x107>$/;"	l
a70	sh.asm	/^     a70:	48 be eb 1d 00 00 00 	movabs $0x1deb,%rsi$/;"	l
a70	stressfs.asm	/^ a70:	eb 2f                	jmp    aa1 <free+0x5a>$/;"	l
a70	zombie.asm	/^ a70:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
a71	init.asm	/^ a71:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a71	ln.asm	/^ a71:	90                   	nop$/;"	l
a71	ls.asm	/^     a71:	89 c7                	mov    %eax,%edi$/;"	l
a71	usertests.asm	/^     a71:	48 be 72 6b 00 00 00 	movabs $0x6b72,%rsi$/;"	l
a72	divide.asm	/^ a72:	00 00 00 $/;"	l
a72	kill.asm	/^ a72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a72	ln.asm	/^ a72:	c9                   	leaveq $/;"	l
a72	mkdir.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	prettyprint.asm	/^     a72:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a72	rm.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	stressfs.asm	/^ a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a73	grep.asm	/^ a73:	75 65                	jne    ada <printf+0x182>$/;"	l
a73	ln.asm	/^ a73:	c3                   	retq   $/;"	l
a73	ls.asm	/^     a73:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
a73	wc.asm	/^ a73:	89 d6                	mov    %edx,%esi$/;"	l
a73	zombie.asm	/^ a73:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
a74	cat.asm	/^ a74:	77 17                	ja     a8d <free+0x4f>$/;"	l
a74	ln.asm	/^ a74:	55                   	push   %rbp$/;"	l
a75	divide.asm	/^ a75:	ff d0                	callq  *%rax$/;"	l
a75	echo.asm	/^ a75:	00 00 00 $/;"	l
a75	grep.asm	/^ a75:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a75	init.asm	/^ a75:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a75	kill.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a75	ln.asm	/^ a75:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a75	wc.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a76	cat.asm	/^ a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a76	stressfs.asm	/^ a76:	48 8b 00             	mov    (%rax),%rax$/;"	l
a76	zombie.asm	/^ a76:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
a77	divide.asm	/^ a77:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
a77	imshow.asm	/^ a77:	48 8b 00             	mov    (%rax),%rax$/;"	l
a77	kill.asm	/^ a77:	48 b8 58 04 00 00 00 	movabs $0x458,%rax$/;"	l
a77	sh.asm	/^     a77:	00 00 00 $/;"	l
a77	wc.asm	/^ a77:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a78	echo.asm	/^ a78:	ff d0                	callq  *%rax$/;"	l
a78	ln.asm	/^ a78:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a78	usertests.asm	/^     a78:	00 00 00 $/;"	l
a79	init.asm	/^ a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a79	mkdir.asm	/^ a79:	00 00 00 $/;"	l
a79	prettyprint.asm	/^     a79:	75 0f                	jne    a8a <printf+0xe3>$/;"	l
a79	rm.asm	/^ a79:	00 00 00 $/;"	l
a79	stressfs.asm	/^ a79:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	cat.asm	/^ a7a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	echo.asm	/^ a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a7a	imshow.asm	/^ a7a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a7a	ls.asm	/^     a7a:	00 00 00 $/;"	l
a7a	sh.asm	/^     a7a:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a7a	zombie.asm	/^ a7a:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
a7b	grep.asm	/^ a7b:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a7b	prettyprint.asm	/^     a7b:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a7b	usertests.asm	/^     a7b:	89 c7                	mov    %eax,%edi$/;"	l
a7c	ln.asm	/^ a7c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a7c	mkdir.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7c	rm.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7d	init.asm	/^ a7d:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a7d	ls.asm	/^     a7d:	ff d0                	callq  *%rax$/;"	l
a7d	stressfs.asm	/^ a7d:	77 17                	ja     a96 <free+0x4f>$/;"	l
a7d	usertests.asm	/^     a7d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7e	cat.asm	/^ a7e:	77 2f                	ja     aaf <free+0x71>$/;"	l
a7e	divide.asm	/^ a7e:	01 $/;"	l
a7e	echo.asm	/^ a7e:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a7e	grep.asm	/^ a7e:	73 23                	jae    aa3 <printf+0x14b>$/;"	l
a7e	kill.asm	/^ a7e:	00 00 00 $/;"	l
a7e	wc.asm	/^ a7e:	00 00 00 $/;"	l
a7e	zombie.asm	/^ a7e:	83 c0 01             	add    $0x1,%eax$/;"	l
a7f	divide.asm	/^ a7f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a7f	ln.asm	/^ a7f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a7f	ls.asm	/^     a7f:	e9 76 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a7f	sh.asm	/^     a7f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7f	stressfs.asm	/^ a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a8	cat.asm	/^  a8:	00 00 00 $/;"	l
a8	forktest.asm	/^  a8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8	kill.asm	/^  a8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
a8	ls.asm	/^      a8:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
a8	zombie.asm	/^  a8:	c9                   	leaveq $/;"	l
a80	cat.asm	/^ a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a80	grep.asm	/^ a80:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a80	mkdir.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a80	rm.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a81	imshow.asm	/^ a81:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a81	init.asm	/^ a81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a81	kill.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	wc.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	zombie.asm	/^ a81:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
a82	prettyprint.asm	/^     a82:	00 00 00 $/;"	l
a82	usertests.asm	/^     a82:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
a83	echo.asm	/^ a83:	75 07                	jne    a8c <morecore+0x41>$/;"	l
a83	kill.asm	/^ a83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a83	mkdir.asm	/^ a83:	90                   	nop$/;"	l
a83	rm.asm	/^ a83:	90                   	nop$/;"	l
a83	stressfs.asm	/^ a83:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a83	wc.asm	/^ a83:	eb 38                	jmp    abd <printf+0x373>$/;"	l
a84	cat.asm	/^ a84:	48 8b 00             	mov    (%rax),%rax$/;"	l
a84	ls.asm	/^     a84:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a84	mkdir.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	rm.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	sh.asm	/^     a84:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
a84	zombie.asm	/^ a84:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a85	echo.asm	/^ a85:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a85	init.asm	/^ a85:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
a85	mkdir.asm	/^ a85:	c3                   	retq   $/;"	l
a85	prettyprint.asm	/^     a85:	e9 9a 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
a85	rm.asm	/^ a85:	c3                   	retq   $/;"	l
a85	wc.asm	/^ a85:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a86	divide.asm	/^ a86:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a86	ln.asm	/^ a86:	77 07                	ja     a8f <morecore+0x1b>$/;"	l
a86	mkdir.asm	/^ a86:	55                   	push   %rbp$/;"	l
a86	rm.asm	/^ a86:	55                   	push   %rbp$/;"	l
a87	cat.asm	/^ a87:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a87	grep.asm	/^ a87:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a87	kill.asm	/^ a87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a87	mkdir.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	rm.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	stressfs.asm	/^ a87:	77 2f                	ja     ab8 <free+0x71>$/;"	l
a88	imshow.asm	/^ a88:	00 $/;"	l
a88	ln.asm	/^ a88:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a89	divide.asm	/^ a89:	84 c0                	test   %al,%al$/;"	l
a89	imshow.asm	/^ a89:	75 3e                	jne    ac9 <printf+0x298>$/;"	l
a89	stressfs.asm	/^ a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a89	usertests.asm	/^     a89:	00 00 00 $/;"	l
a8a	echo.asm	/^ a8a:	eb 36                	jmp    ac2 <morecore+0x77>$/;"	l
a8a	mkdir.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8a	prettyprint.asm	/^     a8a:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a8a	rm.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8b	cat.asm	/^ a8b:	77 22                	ja     aaf <free+0x71>$/;"	l
a8b	divide.asm	/^ a8b:	75 c7                	jne    a54 <printf+0x26d>$/;"	l
a8b	imshow.asm	/^ a8b:	48 b8 b8 0f 00 00 00 	movabs $0xfb8,%rax$/;"	l
a8b	ls.asm	/^     a8b:	0f 85 69 02 00 00    	jne    cfa <printf+0x37d>$/;"	l
a8b	sh.asm	/^     a8b:	00 00 00 $/;"	l
a8b	wc.asm	/^ a8b:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a8b	zombie.asm	/^ a8b:	00 00 00 $/;"	l
a8c	echo.asm	/^ a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8c	init.asm	/^ a8c:	00 00 00 $/;"	l
a8c	kill.asm	/^ a8c:	75 07                	jne    a95 <morecore+0x41>$/;"	l
a8c	usertests.asm	/^     a8c:	ff d1                	callq  *%rcx$/;"	l
a8d	cat.asm	/^ a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8d	divide.asm	/^ a8d:	e9 c8 00 00 00       	jmpq   b5a <printf+0x373>$/;"	l
a8d	grep.asm	/^ a8d:	89 d2                	mov    %edx,%edx$/;"	l
a8d	stressfs.asm	/^ a8d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8e	kill.asm	/^ a8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8e	mkdir.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	rm.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	sh.asm	/^     a8e:	ff d1                	callq  *%rcx$/;"	l
a8e	usertests.asm	/^     a8e:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a8e	zombie.asm	/^ a8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8f	grep.asm	/^ a8f:	48 01 d0             	add    %rdx,%rax$/;"	l
a8f	init.asm	/^ a8f:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8f	ln.asm	/^ a8f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a9	divide.asm	/^  a9:	ff d0                	callq  *%rax$/;"	l
a9	echo.asm	/^  a9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a9	init.asm	/^  a9:	85 c0                	test   %eax,%eax$/;"	l
a9	mkdir.asm	/^  a9:	00 00 00 $/;"	l
a9	rm.asm	/^  a9:	00 00 00 $/;"	l
a9	usertests.asm	/^      a9:	00 00 00 $/;"	l
a9	zombie.asm	/^  a9:	c3                   	retq   $/;"	l
a90	echo.asm	/^ a90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a90	prettyprint.asm	/^     a90:	0f be d0             	movsbl %al,%edx$/;"	l
a90	sh.asm	/^     a90:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
a90	stressfs.asm	/^ a90:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a90	wc.asm	/^ a90:	89 c7                	mov    %eax,%edi$/;"	l
a91	cat.asm	/^ a91:	48 8b 00             	mov    (%rax),%rax$/;"	l
a91	ls.asm	/^     a91:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a91	mkdir.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	rm.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	zombie.asm	/^ a91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a92	divide.asm	/^ a92:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
a92	grep.asm	/^ a92:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a92	imshow.asm	/^ a92:	00 00 00 $/;"	l
a92	init.asm	/^ a92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a92	ln.asm	/^ a92:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a92	wc.asm	/^ a92:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a93	kill.asm	/^ a93:	eb 36                	jmp    acb <morecore+0x77>$/;"	l
a93	prettyprint.asm	/^     a93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a94	cat.asm	/^ a94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a94	echo.asm	/^ a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a94	stressfs.asm	/^ a94:	77 22                	ja     ab8 <free+0x71>$/;"	l
a95	imshow.asm	/^ a95:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a95	kill.asm	/^ a95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a95	ln.asm	/^ a95:	89 c7                	mov    %eax,%edi$/;"	l
a95	usertests.asm	/^     a95:	00 00 00 $/;"	l
a95	zombie.asm	/^ a95:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
a96	init.asm	/^ a96:	eb 2f                	jmp    ac7 <free+0x5a>$/;"	l
a96	stressfs.asm	/^ a96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a97	ln.asm	/^ a97:	48 b8 78 04 00 00 00 	movabs $0x478,%rax$/;"	l
a97	sh.asm	/^     a97:	00 00 00 $/;"	l
a98	cat.asm	/^ a98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a98	echo.asm	/^ a98:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a98	grep.asm	/^ a98:	83 c2 08             	add    $0x8,%edx$/;"	l
a98	init.asm	/^ a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a98	ls.asm	/^     a98:	75 65                	jne    aff <printf+0x182>$/;"	l
a98	mkdir.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	rm.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	usertests.asm	/^     a98:	ff d0                	callq  *%rax$/;"	l
a99	divide.asm	/^ a99:	75 5d                	jne    af8 <printf+0x311>$/;"	l
a99	kill.asm	/^ a99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a99	prettyprint.asm	/^     a99:	89 d6                	mov    %edx,%esi$/;"	l
a99	wc.asm	/^ a99:	00 00 00 $/;"	l
a9a	ls.asm	/^     a9a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9a	mkdir.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	rm.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	sh.asm	/^     a9a:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
a9a	stressfs.asm	/^ a9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
a9a	usertests.asm	/^     a9a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a9a	zombie.asm	/^ a9a:	75 4a                	jne    ae6 <malloc+0x7e>$/;"	l
a9b	divide.asm	/^ a9b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9b	echo.asm	/^ a9b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a9b	grep.asm	/^ a9b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a9b	prettyprint.asm	/^     a9b:	89 c7                	mov    %eax,%edi$/;"	l
a9c	cat.asm	/^ a9c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a9c	imshow.asm	/^ a9c:	eb 2b                	jmp    ac9 <printf+0x298>$/;"	l
a9c	init.asm	/^ a9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
a9c	wc.asm	/^ a9c:	ff d0                	callq  *%rax$/;"	l
a9c	zombie.asm	/^ a9c:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
a9d	kill.asm	/^ a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9d	prettyprint.asm	/^     a9d:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
a9d	stressfs.asm	/^ a9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a9e	echo.asm	/^ a9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9e	imshow.asm	/^ a9e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a9e	ln.asm	/^ a9e:	00 00 00 $/;"	l
a9e	usertests.asm	/^     a9e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a9e	wc.asm	/^ a9e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a9f	init.asm	/^ a9f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa	ln.asm	/^  aa:	48 b8 ce 03 00 00 00 	movabs $0x3ce,%rax$/;"	l
aa	prettyprint.asm	/^      aa:	00 00 00 $/;"	l
aa	sh.asm	/^      aa:	48 be 6f 1d 00 00 00 	movabs $0x1d6f,%rsi$/;"	l
aa	wc.asm	/^  aa:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
aa	zombie.asm	/^  aa:	55                   	push   %rbp$/;"	l
aa0	cat.asm	/^ aa0:	76 c7                	jbe    a69 <free+0x2b>$/;"	l
aa0	ls.asm	/^     aa0:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	divide.asm	/^ aa1:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	grep.asm	/^ aa1:	eb 12                	jmp    ab5 <printf+0x15d>$/;"	l
aa1	kill.asm	/^ aa1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
aa1	ln.asm	/^ aa1:	ff d0                	callq  *%rax$/;"	l
aa1	mkdir.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	rm.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	sh.asm	/^     aa1:	00 00 00 $/;"	l
aa1	stressfs.asm	/^ aa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa1	usertests.asm	/^     aa1:	3d 8b 00 00 00       	cmp    $0x8b,%eax$/;"	l
aa2	cat.asm	/^ aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aa2	echo.asm	/^ aa2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aa3	grep.asm	/^ aa3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
aa3	init.asm	/^ aa3:	77 17                	ja     abc <free+0x4f>$/;"	l
aa3	ln.asm	/^ aa3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aa3	ls.asm	/^     aa3:	73 23                	jae    ac8 <printf+0x14b>$/;"	l
aa3	zombie.asm	/^ aa3:	00 00 00 $/;"	l
aa4	divide.asm	/^ aa4:	73 23                	jae    ac9 <printf+0x2e2>$/;"	l
aa4	kill.asm	/^ aa4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
aa4	mkdir.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	prettyprint.asm	/^     aa4:	00 00 00 $/;"	l
aa4	rm.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	sh.asm	/^     aa4:	ff d0                	callq  *%rax$/;"	l
aa4	wc.asm	/^ aa4:	0f be d0             	movsbl %al,%edx$/;"	l
aa5	imshow.asm	/^ aa5:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aa5	init.asm	/^ aa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa5	ls.asm	/^     aa5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa5	stressfs.asm	/^ aa5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa6	cat.asm	/^ aa6:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa6	divide.asm	/^ aa6:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa6	echo.asm	/^ aa6:	48 89 c7             	mov    %rax,%rdi$/;"	l
aa6	sh.asm	/^     aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
aa6	usertests.asm	/^     aa6:	76 84                	jbe    a2c <writetest1+0x93>$/;"	l
aa6	zombie.asm	/^ aa6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aa7	kill.asm	/^ aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa7	ln.asm	/^ aa7:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
aa7	mkdir.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	prettyprint.asm	/^     aa7:	ff d0                	callq  *%rax$/;"	l
aa7	rm.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	wc.asm	/^ aa7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aa8	imshow.asm	/^ aa8:	0f be d0             	movsbl %al,%edx$/;"	l
aa8	usertests.asm	/^     aa8:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
aa9	cat.asm	/^ aa9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
aa9	echo.asm	/^ aa9:	48 b8 19 09 00 00 00 	movabs $0x919,%rax$/;"	l
aa9	init.asm	/^ aa9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa9	mkdir.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	prettyprint.asm	/^     aa9:	e9 76 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
aa9	rm.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	stressfs.asm	/^ aa9:	76 c7                	jbe    a72 <free+0x2b>$/;"	l
aaa	grep.asm	/^ aaa:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
aaa	sh.asm	/^     aaa:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaa	zombie.asm	/^ aaa:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
aab	imshow.asm	/^ aab:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aab	kill.asm	/^ aab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aab	stressfs.asm	/^ aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aab	usertests.asm	/^     aab:	89 c7                	mov    %eax,%edi$/;"	l
aac	ln.asm	/^ aac:	75 07                	jne    ab5 <morecore+0x41>$/;"	l
aac	ls.asm	/^     aac:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	cat.asm	/^ aad:	76 ba                	jbe    a69 <free+0x2b>$/;"	l
aad	divide.asm	/^ aad:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	init.asm	/^ aad:	77 2f                	ja     ade <free+0x71>$/;"	l
aad	sh.asm	/^     aad:	48 b8 95 10 00 00 00 	movabs $0x1095,%rax$/;"	l
aad	usertests.asm	/^     aad:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
aad	wc.asm	/^ aad:	89 d6                	mov    %edx,%esi$/;"	l
aae	grep.asm	/^ aae:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
aae	ln.asm	/^ aae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aae	prettyprint.asm	/^     aae:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
aaf	cat.asm	/^ aaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aaf	init.asm	/^ aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aaf	kill.asm	/^ aaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaf	stressfs.asm	/^ aaf:	48 8b 00             	mov    (%rax),%rax$/;"	l
aaf	wc.asm	/^ aaf:	89 c7                	mov    %eax,%edi$/;"	l
ab	cat.asm	/^  ab:	ff d2                	callq  *%rdx$/;"	l
ab	divide.asm	/^  ab:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ab	grep.asm	/^  ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab	imshow.asm	/^  ab:	48 ba 31 08 00 00 00 	movabs $0x831,%rdx$/;"	l
ab	init.asm	/^  ab:	79 3b                	jns    e8 <main+0xe8>$/;"	l
ab	stressfs.asm	/^  ab:	48 b9 a2 06 00 00 00 	movabs $0x6a2,%rcx$/;"	l
ab	zombie.asm	/^  ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ab0	echo.asm	/^ ab0:	00 00 00 $/;"	l
ab0	mkdir.asm	/^ ab0:	00 00 00 $/;"	l
ab0	rm.asm	/^ ab0:	00 00 00 $/;"	l
ab1	imshow.asm	/^ ab1:	89 d6                	mov    %edx,%esi$/;"	l
ab1	wc.asm	/^ ab1:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
ab1	zombie.asm	/^ ab1:	00 00 00 $/;"	l
ab2	kill.asm	/^ ab2:	48 b8 22 09 00 00 00 	movabs $0x922,%rax$/;"	l
ab2	ls.asm	/^     ab2:	89 d2                	mov    %edx,%edx$/;"	l
ab2	stressfs.asm	/^ ab2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ab3	cat.asm	/^ ab3:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ab3	divide.asm	/^ ab3:	89 d2                	mov    %edx,%edx$/;"	l
ab3	echo.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	imshow.asm	/^ ab3:	89 c7                	mov    %eax,%edi$/;"	l
ab3	init.asm	/^ ab3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ab3	ln.asm	/^ ab3:	eb 36                	jmp    aeb <morecore+0x77>$/;"	l
ab3	mkdir.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	rm.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab4	ls.asm	/^     ab4:	48 01 d0             	add    %rdx,%rax$/;"	l
ab4	sh.asm	/^     ab4:	00 00 00 $/;"	l
ab4	usertests.asm	/^     ab4:	00 00 00 $/;"	l
ab4	zombie.asm	/^ ab4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ab5	divide.asm	/^ ab5:	48 01 d0             	add    %rdx,%rax$/;"	l
ab5	echo.asm	/^ ab5:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ab5	grep.asm	/^ ab5:	8b 30                	mov    (%rax),%esi$/;"	l
ab5	imshow.asm	/^ ab5:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
ab5	ln.asm	/^ ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab5	mkdir.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab5	prettyprint.asm	/^     ab5:	0f 85 69 02 00 00    	jne    d24 <printf+0x37d>$/;"	l
ab5	rm.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab6	cat.asm	/^ ab6:	89 c0                	mov    %eax,%eax$/;"	l
ab6	init.asm	/^ ab6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ab6	stressfs.asm	/^ ab6:	76 ba                	jbe    a72 <free+0x2b>$/;"	l
ab7	grep.asm	/^ ab7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ab7	ls.asm	/^     ab7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab7	sh.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab7	usertests.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab8	cat.asm	/^ ab8:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ab8	divide.asm	/^ ab8:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab8	stressfs.asm	/^ ab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab8	wc.asm	/^ ab8:	00 00 00 $/;"	l
ab8	zombie.asm	/^ ab8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ab9	kill.asm	/^ ab9:	00 00 00 $/;"	l
ab9	ln.asm	/^ ab9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ab9	mkdir.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	rm.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	sh.asm	/^     ab9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ab9	usertests.asm	/^     ab9:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
aba	init.asm	/^ aba:	77 22                	ja     ade <free+0x71>$/;"	l
abb	prettyprint.asm	/^     abb:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
abb	wc.asm	/^ abb:	ff d0                	callq  *%rax$/;"	l
abb	zombie.asm	/^ abb:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
abc	cat.asm	/^ abc:	48 89 c2             	mov    %rax,%rdx$/;"	l
abc	echo.asm	/^ abc:	00 00 00 $/;"	l
abc	imshow.asm	/^ abc:	00 00 00 $/;"	l
abc	init.asm	/^ abc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
abc	kill.asm	/^ abc:	ff d0                	callq  *%rax$/;"	l
abc	stressfs.asm	/^ abc:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
abd	grep.asm	/^ abd:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
abd	ln.asm	/^ abd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abd	ls.asm	/^     abd:	83 c2 08             	add    $0x8,%edx$/;"	l
abd	sh.asm	/^     abd:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
abd	wc.asm	/^ abd:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
abe	divide.asm	/^ abe:	83 c2 08             	add    $0x8,%edx$/;"	l
abe	kill.asm	/^ abe:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
abe	mkdir.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	rm.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	usertests.asm	/^     abe:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
abf	cat.asm	/^ abf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abf	echo.asm	/^ abf:	48 8b 00             	mov    (%rax),%rax$/;"	l
abf	imshow.asm	/^ abf:	ff d0                	callq  *%rax$/;"	l
abf	stressfs.asm	/^ abf:	89 c0                	mov    %eax,%eax$/;"	l
ac	echo.asm	/^  ac:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ac	kill.asm	/^  ac:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ac	mkdir.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	rm.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	usertests.asm	/^      ac:	89 c7                	mov    %eax,%edi$/;"	l
ac0	init.asm	/^ ac0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac0	ls.asm	/^     ac0:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac0	mkdir.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac0	rm.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac1	divide.asm	/^ ac1:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac1	imshow.asm	/^ ac1:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
ac1	ln.asm	/^ ac1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ac1	sh.asm	/^     ac1:	5b                   	pop    %rbx$/;"	l
ac1	stressfs.asm	/^ ac1:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ac2	echo.asm	/^ ac2:	c9                   	leaveq $/;"	l
ac2	grep.asm	/^ ac2:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ac2	prettyprint.asm	/^     ac2:	75 65                	jne    b29 <printf+0x182>$/;"	l
ac2	sh.asm	/^     ac2:	5d                   	pop    %rbp$/;"	l
ac2	zombie.asm	/^ ac2:	00 00 00 $/;"	l
ac3	cat.asm	/^ ac3:	48 01 c2             	add    %rax,%rdx$/;"	l
ac3	echo.asm	/^ ac3:	c3                   	retq   $/;"	l
ac3	init.asm	/^ ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ac3	sh.asm	/^     ac3:	c3                   	retq   $/;"	l
ac4	echo.asm	/^ ac4:	55                   	push   %rbp$/;"	l
ac4	ln.asm	/^ ac4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ac4	prettyprint.asm	/^     ac4:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ac4	sh.asm	/^     ac4:	55                   	push   %rbp$/;"	l
ac4	wc.asm	/^ ac4:	00 00 00 $/;"	l
ac5	echo.asm	/^ ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	kill.asm	/^ ac5:	00 00 00 $/;"	l
ac5	mkdir.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	rm.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	sh.asm	/^     ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	stressfs.asm	/^ ac5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ac5	usertests.asm	/^     ac5:	00 00 00 $/;"	l
ac5	zombie.asm	/^ ac5:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ac6	cat.asm	/^ ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac6	ls.asm	/^     ac6:	eb 12                	jmp    ada <printf+0x15d>$/;"	l
ac7	divide.asm	/^ ac7:	eb 12                	jmp    adb <printf+0x2f4>$/;"	l
ac7	grep.asm	/^ ac7:	89 c7                	mov    %eax,%edi$/;"	l
ac7	init.asm	/^ ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac7	ln.asm	/^ ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac7	mkdir.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	rm.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	wc.asm	/^ ac7:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
ac8	echo.asm	/^ ac8:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ac8	imshow.asm	/^ ac8:	01 $/;"	l
ac8	kill.asm	/^ ac8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac8	ls.asm	/^     ac8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac8	sh.asm	/^     ac8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ac8	stressfs.asm	/^ ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac8	usertests.asm	/^     ac8:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
ac8	zombie.asm	/^ ac8:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ac9	divide.asm	/^ ac9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac9	grep.asm	/^ ac9:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
ac9	imshow.asm	/^ ac9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
aca	cat.asm	/^ aca:	48 8b 00             	mov    (%rax),%rax$/;"	l
aca	prettyprint.asm	/^     aca:	83 f8 30             	cmp    $0x30,%eax$/;"	l
acb	init.asm	/^ acb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
acb	kill.asm	/^ acb:	c9                   	leaveq $/;"	l
acb	ln.asm	/^ acb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
acb	mkdir.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acb	rm.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acc	echo.asm	/^ acc:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
acc	kill.asm	/^ acc:	c3                   	retq   $/;"	l
acc	sh.asm	/^     acc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
acc	stressfs.asm	/^ acc:	48 01 c2             	add    %rax,%rdx$/;"	l
acd	cat.asm	/^ acd:	48 39 c2             	cmp    %rax,%rdx$/;"	l
acd	kill.asm	/^ acd:	55                   	push   %rbp$/;"	l
acd	prettyprint.asm	/^     acd:	73 23                	jae    af2 <printf+0x14b>$/;"	l
ace	kill.asm	/^ ace:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ace	wc.asm	/^ ace:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
acf	echo.asm	/^ acf:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
acf	init.asm	/^ acf:	76 c7                	jbe    a98 <free+0x2b>$/;"	l
acf	ln.asm	/^ acf:	48 89 c7             	mov    %rax,%rdi$/;"	l
acf	ls.asm	/^     acf:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
acf	mkdir.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	prettyprint.asm	/^     acf:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
acf	rm.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	stressfs.asm	/^ acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
acf	usertests.asm	/^     acf:	00 00 00 $/;"	l
acf	zombie.asm	/^ acf:	00 00 00 $/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	cat.asm	/^  ad:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
ad	forktest.asm	/^  ad:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx$/;"	l
ad	init.asm	/^  ad:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ad	prettyprint.asm	/^      ad:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ad	wc.asm	/^  ad:	7c 88                	jl     37 <wc+0x37>$/;"	l
ad0	cat.asm	/^ ad0:	75 2d                	jne    aff <free+0xc1>$/;"	l
ad0	divide.asm	/^ ad0:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ad0	grep.asm	/^ ad0:	00 00 00 $/;"	l
ad0	imshow.asm	/^ ad0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ad0	sh.asm	/^     ad0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ad1	init.asm	/^ ad1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad1	kill.asm	/^ ad1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ad2	cat.asm	/^ ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad2	echo.asm	/^ ad2:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ad2	ln.asm	/^ ad2:	48 b8 42 09 00 00 00 	movabs $0x942,%rax$/;"	l
ad2	usertests.asm	/^     ad2:	ff d0                	callq  *%rax$/;"	l
ad2	zombie.asm	/^ ad2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ad3	grep.asm	/^ ad3:	ff d0                	callq  *%rax$/;"	l
ad3	imshow.asm	/^ ad3:	84 c0                	test   %al,%al$/;"	l
ad3	ls.asm	/^     ad3:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad3	mkdir.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	rm.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	stressfs.asm	/^ ad3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ad4	divide.asm	/^ ad4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad4	sh.asm	/^     ad4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ad4	usertests.asm	/^     ad4:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ad4	wc.asm	/^ ad4:	48 63 d0             	movslq %eax,%rdx$/;"	l
ad5	grep.asm	/^ ad5:	e9 f1 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
ad5	imshow.asm	/^ ad5:	75 c7                	jne    a9e <printf+0x26d>$/;"	l
ad5	init.asm	/^ ad5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ad5	kill.asm	/^ ad5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ad5	zombie.asm	/^ ad5:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ad6	cat.asm	/^ ad6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ad6	echo.asm	/^ ad6:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ad6	mkdir.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	prettyprint.asm	/^     ad6:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ad6	rm.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	stressfs.asm	/^ ad6:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ad7	imshow.asm	/^ ad7:	e9 c8 00 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
ad7	usertests.asm	/^     ad7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ad7	wc.asm	/^ ad7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ad8	init.asm	/^ ad8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ad8	kill.asm	/^ ad8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ad8	sh.asm	/^     ad8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ad9	cat.asm	/^ ad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad9	ln.asm	/^ ad9:	00 00 00 $/;"	l
ad9	mkdir.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	rm.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	stressfs.asm	/^ ad9:	75 2d                	jne    b08 <free+0xc1>$/;"	l
ada	echo.asm	/^ ada:	83 c0 01             	add    $0x1,%eax$/;"	l
ada	grep.asm	/^ ada:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
ada	ls.asm	/^     ada:	8b 30                	mov    (%rax),%esi$/;"	l
adb	divide.asm	/^ adb:	8b 00                	mov    (%rax),%eax$/;"	l
adb	kill.asm	/^ adb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
adb	stressfs.asm	/^ adb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
adb	usertests.asm	/^     adb:	79 35                	jns    b12 <writetest1+0x179>$/;"	l
adc	imshow.asm	/^ adc:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
adc	init.asm	/^ adc:	76 ba                	jbe    a98 <free+0x2b>$/;"	l
adc	ln.asm	/^ adc:	ff d0                	callq  *%rax$/;"	l
adc	ls.asm	/^     adc:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
adc	prettyprint.asm	/^     adc:	89 d2                	mov    %edx,%edx$/;"	l
adc	sh.asm	/^     adc:	48 89 d6             	mov    %rdx,%rsi$/;"	l
adc	zombie.asm	/^ adc:	00 00 00 $/;"	l
add	cat.asm	/^ add:	48 8b 00             	mov    (%rax),%rax$/;"	l
add	divide.asm	/^ add:	0f be d0             	movsbl %al,%edx$/;"	l
add	echo.asm	/^ add:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
add	mkdir.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	rm.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	usertests.asm	/^     add:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
addr	kernel.asm	/^  addr = (uint64) tss;$/;"	d
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr_p	mp.h	/^  uint32 addr_p;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addr_t	types.h	/^typedef unsigned long addr_t;$/;"	t
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	init.asm	/^ ade:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ade	ln.asm	/^ ade:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
ade	prettyprint.asm	/^     ade:	48 01 d0             	add    %rdx,%rax$/;"	l
ade	wc.asm	/^ ade:	48 01 d0             	add    %rdx,%rax$/;"	l
adf	kill.asm	/^ adf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
adf	sh.asm	/^     adf:	48 89 c7             	mov    %rax,%rdi$/;"	l
adf	stressfs.asm	/^ adf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
adf	zombie.asm	/^ adf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
ae	divide.asm	/^  ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ae	mkdir.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	rm.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	usertests.asm	/^      ae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ae	zombie.asm	/^  ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ae0	cat.asm	/^ ae0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae0	divide.asm	/^ ae0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ae0	echo.asm	/^ ae0:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ae1	grep.asm	/^ ae1:	74 09                	je     aec <printf+0x194>$/;"	l
ae1	mkdir.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	prettyprint.asm	/^     ae1:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ae1	rm.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	wc.asm	/^ ae1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ae2	init.asm	/^ ae2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae2	ls.asm	/^     ae2:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
ae2	sh.asm	/^     ae2:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
ae2	stressfs.asm	/^ ae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae3	cat.asm	/^ ae3:	01 c2                	add    %eax,%edx$/;"	l
ae3	grep.asm	/^ ae3:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
ae3	imshow.asm	/^ ae3:	75 5d                	jne    b42 <printf+0x311>$/;"	l
ae3	kill.asm	/^ ae3:	83 c0 01             	add    $0x1,%eax$/;"	l
ae4	mkdir.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	rm.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	usertests.asm	/^     ae4:	00 00 00 $/;"	l
ae4	wc.asm	/^ ae4:	84 c0                	test   %al,%al$/;"	l
ae5	cat.asm	/^ ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae5	imshow.asm	/^ ae5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ae5	init.asm	/^ ae5:	89 c0                	mov    %eax,%eax$/;"	l
ae5	ln.asm	/^ ae5:	00 00 00 $/;"	l
ae6	divide.asm	/^ ae6:	89 d6                	mov    %edx,%esi$/;"	l
ae6	kill.asm	/^ ae6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ae6	stressfs.asm	/^ ae6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae6	wc.asm	/^ ae6:	0f 85 fc fc ff ff    	jne    7e8 <printf+0x9e>$/;"	l
ae6	zombie.asm	/^ ae6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae7	echo.asm	/^ ae7:	00 00 00 $/;"	l
ae7	init.asm	/^ ae7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ae7	ls.asm	/^     ae7:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ae7	prettyprint.asm	/^     ae7:	83 c2 08             	add    $0x8,%edx$/;"	l
ae7	usertests.asm	/^     ae7:	8b 00                	mov    (%rax),%eax$/;"	l
ae8	divide.asm	/^ ae8:	89 c7                	mov    %eax,%edi$/;"	l
ae8	ln.asm	/^ ae8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	cat.asm	/^ ae9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ae9	kill.asm	/^ ae9:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
ae9	sh.asm	/^     ae9:	00 00 00 $/;"	l
ae9	stressfs.asm	/^ ae9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae9	usertests.asm	/^     ae9:	48 be 90 6b 00 00 00 	movabs $0x6b90,%rsi$/;"	l
aea	divide.asm	/^ aea:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
aea	echo.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aea	grep.asm	/^ aea:	75 65                	jne    b51 <printf+0x1f9>$/;"	l
aea	prettyprint.asm	/^     aea:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
aea	zombie.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aeb	imshow.asm	/^ aeb:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aeb	init.asm	/^ aeb:	48 89 c2             	mov    %rax,%rdx$/;"	l
aeb	ln.asm	/^ aeb:	c9                   	leaveq $/;"	l
aeb	mkdir.asm	/^ aeb:	00 00 00 $/;"	l
aeb	rm.asm	/^ aeb:	00 00 00 $/;"	l
aec	cat.asm	/^ aec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aec	grep.asm	/^ aec:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
aec	ln.asm	/^ aec:	c3                   	retq   $/;"	l
aec	ls.asm	/^     aec:	89 c7                	mov    %eax,%edi$/;"	l
aec	sh.asm	/^     aec:	ff d0                	callq  *%rax$/;"	l
aec	stressfs.asm	/^ aec:	01 c2                	add    %eax,%edx$/;"	l
aec	wc.asm	/^ aec:	90                   	nop$/;"	l
aed	echo.asm	/^ aed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aed	ln.asm	/^ aed:	55                   	push   %rbp$/;"	l
aed	wc.asm	/^ aed:	c9                   	leaveq $/;"	l
aed	zombie.asm	/^ aed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	imshow.asm	/^ aee:	73 23                	jae    b13 <printf+0x2e2>$/;"	l
aee	init.asm	/^ aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aee	ln.asm	/^ aee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
aee	ls.asm	/^     aee:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
aee	mkdir.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	rm.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	sh.asm	/^     aee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	stressfs.asm	/^ aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aee	wc.asm	/^ aee:	c3                   	retq   $/;"	l
aef	wc.asm	/^ aef:	55                   	push   %rbp$/;"	l
af	echo.asm	/^  af:	89 d1                	mov    %edx,%ecx$/;"	l
af	grep.asm	/^  af:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
af	kill.asm	/^  af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
af	ls.asm	/^      af:	00 00 00 $/;"	l
af	wc.asm	/^  af:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af0	cat.asm	/^ af0:	48 8b 00             	mov    (%rax),%rax$/;"	l
af0	imshow.asm	/^ af0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af0	kill.asm	/^ af0:	00 00 00 $/;"	l
af0	mkdir.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	prettyprint.asm	/^     af0:	eb 12                	jmp    b04 <printf+0x15d>$/;"	l
af0	rm.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	usertests.asm	/^     af0:	00 00 00 $/;"	l
af0	wc.asm	/^ af0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
af1	divide.asm	/^ af1:	00 00 00 $/;"	l
af1	echo.asm	/^ af1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
af1	ln.asm	/^ af1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
af1	zombie.asm	/^ af1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af2	grep.asm	/^ af2:	83 f8 30             	cmp    $0x30,%eax$/;"	l
af2	init.asm	/^ af2:	48 01 c2             	add    %rax,%rdx$/;"	l
af2	prettyprint.asm	/^     af2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
af2	sh.asm	/^     af2:	eb 38                	jmp    b2c <parseline+0x68>$/;"	l
af2	stressfs.asm	/^ af2:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
af3	cat.asm	/^ af3:	48 8b 10             	mov    (%rax),%rdx$/;"	l
af3	kill.asm	/^ af3:	48 8b 00             	mov    (%rax),%rax$/;"	l
af3	usertests.asm	/^     af3:	89 c7                	mov    %eax,%edi$/;"	l
af3	wc.asm	/^ af3:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
af4	divide.asm	/^ af4:	ff d0                	callq  *%rax$/;"	l
af4	sh.asm	/^     af4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
af5	grep.asm	/^ af5:	73 23                	jae    b1a <printf+0x1c2>$/;"	l
af5	init.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	ln.asm	/^ af5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
af5	ls.asm	/^     af5:	00 00 00 $/;"	l
af5	stressfs.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	usertests.asm	/^     af5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
af5	zombie.asm	/^ af5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
af6	cat.asm	/^ af6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af6	divide.asm	/^ af6:	eb 62                	jmp    b5a <printf+0x373>$/;"	l
af6	echo.asm	/^ af6:	75 4a                	jne    b42 <malloc+0x7e>$/;"	l
af6	kill.asm	/^ af6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
af7	grep.asm	/^ af7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af7	imshow.asm	/^ af7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
af7	mkdir.asm	/^ af7:	00 00 00 $/;"	l
af7	rm.asm	/^ af7:	00 00 00 $/;"	l
af7	wc.asm	/^ af7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
af8	divide.asm	/^ af8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
af8	echo.asm	/^ af8:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
af8	ln.asm	/^ af8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af8	ls.asm	/^     af8:	ff d0                	callq  *%rax$/;"	l
af8	sh.asm	/^     af8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
af8	zombie.asm	/^ af8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
af9	init.asm	/^ af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
af9	prettyprint.asm	/^     af9:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
af9	stressfs.asm	/^ af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	cat.asm	/^ afa:	48 89 10             	mov    %rdx,(%rax)$/;"	l
afa	kill.asm	/^ afa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
afa	ls.asm	/^     afa:	e9 f1 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
afa	mkdir.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	rm.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	usertests.asm	/^     afa:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
afb	ln.asm	/^ afb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
afb	wc.asm	/^ afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
afb	zombie.asm	/^ afb:	72 65                	jb     b62 <malloc+0xfa>$/;"	l
afc	init.asm	/^ afc:	48 39 c2             	cmp    %rax,%rdx$/;"	l
afc	sh.asm	/^     afc:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
afc	stressfs.asm	/^ afc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
afd	cat.asm	/^ afd:	eb 0e                	jmp    b0d <free+0xcf>$/;"	l
afd	imshow.asm	/^ afd:	89 d2                	mov    %edx,%edx$/;"	l
afd	mkdir.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	prettyprint.asm	/^     afd:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
afd	rm.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	zombie.asm	/^ afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afe	grep.asm	/^ afe:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
afe	mkdir.asm	/^ afe:	c3                   	retq   $/;"	l
afe	rm.asm	/^ afe:	c3                   	retq   $/;"	l
aff	cat.asm	/^ aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aff	divide.asm	/^ aff:	75 21                	jne    b22 <printf+0x33b>$/;"	l
aff	echo.asm	/^ aff:	00 00 00 $/;"	l
aff	imshow.asm	/^ aff:	48 01 d0             	add    %rdx,%rax$/;"	l
aff	init.asm	/^ aff:	75 2d                	jne    b2e <free+0xc1>$/;"	l
aff	kill.asm	/^ aff:	75 4a                	jne    b4b <malloc+0x7e>$/;"	l
aff	ln.asm	/^ aff:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
aff	ls.asm	/^     aff:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
aff	mkdir.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	rm.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	stressfs.asm	/^ aff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aff	wc.asm	/^ aff:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
align	elf.h	/^  uint64 align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (addr_t)a;$/;"	d
apicid	kernel.asm	/^  apicid = lapic[ID] >> 24;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argaddr	syscall.c	/^argaddr(int n, addr_t *ip)$/;"	f
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argptest	usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
ax	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
b	cat.asm	/^   b:	eb 51                	jmp    5e <cat+0x5e>$/;"	l
b	echo.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	forktest.asm	/^   b:	89 bd 4c ff ff ff    	mov    %edi,-0xb4(%rbp)$/;"	l
b	imshow.asm	/^   b:	89 bd ec fb ff ff    	mov    %edi,-0x414(%rbp)$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	ln.asm	/^   b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b	mkdir.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	prettyprint.asm	/^       b:	89 bd 7c ff ff ff    	mov    %edi,-0x84(%rbp)$/;"	l
b	rm.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	stressfs.asm	/^   b:	89 bd dc fd ff ff    	mov    %edi,-0x224(%rbp)$/;"	l
b	usertests.asm	/^       b:	00 00 00 $/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	zombie.asm	/^   b:	00 00 00 $/;"	l
b0	mkdir.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b0	rm.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b00	mkdir.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b00	rm.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b01	divide.asm	/^ b01:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b01	init.asm	/^ b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b01	kill.asm	/^ b01:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b01	sh.asm	/^     b01:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b01	usertests.asm	/^     b01:	00 00 00 $/;"	l
b01	zombie.asm	/^ b01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b02	echo.asm	/^ b02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b02	imshow.asm	/^ b02:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b03	cat.asm	/^ b03:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b03	ln.asm	/^ b03:	83 c0 01             	add    $0x1,%eax$/;"	l
b03	mkdir.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	rm.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	stressfs.asm	/^ b03:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b03	wc.asm	/^ b03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b04	grep.asm	/^ b04:	89 d2                	mov    %edx,%edx$/;"	l
b04	prettyprint.asm	/^     b04:	8b 30                	mov    (%rax),%esi$/;"	l
b04	usertests.asm	/^     b04:	ff d2                	callq  *%rdx$/;"	l
b04	zombie.asm	/^ b04:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b05	init.asm	/^ b05:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b06	cat.asm	/^ b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b06	echo.asm	/^ b06:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b06	grep.asm	/^ b06:	48 01 d0             	add    %rdx,%rax$/;"	l
b06	ln.asm	/^ b06:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b06	ls.asm	/^     b06:	74 09                	je     b11 <printf+0x194>$/;"	l
b06	prettyprint.asm	/^     b06:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b06	sh.asm	/^     b06:	48 89 c7             	mov    %rax,%rdi$/;"	l
b06	stressfs.asm	/^ b06:	eb 0e                	jmp    b16 <free+0xcf>$/;"	l
b06	usertests.asm	/^     b06:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b07	divide.asm	/^ b07:	0f be d0             	movsbl %al,%edx$/;"	l
b07	mkdir.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	rm.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	wc.asm	/^ b07:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
b07	zombie.asm	/^ b07:	75 10                	jne    b19 <malloc+0xb1>$/;"	l
b08	imshow.asm	/^ b08:	83 c2 08             	add    $0x8,%edx$/;"	l
b08	init.asm	/^ b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b08	kill.asm	/^ b08:	00 00 00 $/;"	l
b08	ls.asm	/^     b08:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b08	stressfs.asm	/^ b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	grep.asm	/^ b09:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b09	ln.asm	/^ b09:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b09	sh.asm	/^     b09:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b09	zombie.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0a	cat.asm	/^ b0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b0a	divide.asm	/^ b0a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b0a	mkdir.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0a	rm.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0b	imshow.asm	/^ b0b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b0b	kill.asm	/^ b0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b0c	init.asm	/^ b0c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0c	prettyprint.asm	/^     b0c:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b0c	stressfs.asm	/^ b0c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0d	cat.asm	/^ b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0d	echo.asm	/^ b0d:	00 00 00 $/;"	l
b0d	mkdir.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	rm.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	usertests.asm	/^     b0d:	00 00 00 $/;"	l
b0d	zombie.asm	/^ b0d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0e	wc.asm	/^ b0e:	00 00 00 $/;"	l
b0f	grep.asm	/^ b0f:	83 c2 08             	add    $0x8,%edx$/;"	l
b0f	init.asm	/^ b0f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b0f	kill.asm	/^ b0f:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b0f	ls.asm	/^     b0f:	75 65                	jne    b76 <printf+0x1f9>$/;"	l
b0f	stressfs.asm	/^ b0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b1	echo.asm	/^  b1:	fc                   	cld    $/;"	l
b1	ln.asm	/^  b1:	00 00 00 $/;"	l
b1	sh.asm	/^      b1:	00 00 00 $/;"	l
b10	divide.asm	/^ b10:	89 d6                	mov    %edx,%esi$/;"	l
b10	echo.asm	/^ b10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b10	ln.asm	/^ b10:	00 00 00 $/;"	l
b10	sh.asm	/^     b10:	00 00 00 $/;"	l
b10	usertests.asm	/^     b10:	ff d0                	callq  *%rax$/;"	l
b10	zombie.asm	/^ b10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b11	cat.asm	/^ b11:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b11	imshow.asm	/^ b11:	eb 12                	jmp    b25 <printf+0x2f4>$/;"	l
b11	ls.asm	/^     b11:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b11	mkdir.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	prettyprint.asm	/^     b11:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b11	rm.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	wc.asm	/^ b11:	48 8b 00             	mov    (%rax),%rax$/;"	l
b12	divide.asm	/^ b12:	89 c7                	mov    %eax,%edi$/;"	l
b12	grep.asm	/^ b12:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b12	init.asm	/^ b12:	01 c2                	add    %eax,%edx$/;"	l
b12	usertests.asm	/^     b12:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
b13	imshow.asm	/^ b13:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b13	ln.asm	/^ b13:	48 8b 00             	mov    (%rax),%rax$/;"	l
b13	sh.asm	/^     b13:	ff d0                	callq  *%rax$/;"	l
b13	stressfs.asm	/^ b13:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	cat.asm	/^ b14:	89 c0                	mov    %eax,%eax$/;"	l
b14	divide.asm	/^ b14:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b14	echo.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	init.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	wc.asm	/^ b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b14	zombie.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b15	mkdir.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	rm.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	sh.asm	/^     b15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b16	cat.asm	/^ b16:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b16	kill.asm	/^ b16:	00 00 00 $/;"	l
b16	ln.asm	/^ b16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b16	prettyprint.asm	/^     b16:	89 c7                	mov    %eax,%edi$/;"	l
b16	stressfs.asm	/^ b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b17	echo.asm	/^ b17:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b17	ls.asm	/^     b17:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b17	zombie.asm	/^ b17:	eb 2e                	jmp    b47 <malloc+0xdf>$/;"	l
b18	grep.asm	/^ b18:	eb 12                	jmp    b2c <printf+0x1d4>$/;"	l
b18	init.asm	/^ b18:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b18	mkdir.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	prettyprint.asm	/^     b18:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b18	rm.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	wc.asm	/^ b18:	eb 2f                	jmp    b49 <free+0x5a>$/;"	l
b19	kill.asm	/^ b19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b19	sh.asm	/^     b19:	48 89 c7             	mov    %rax,%rdi$/;"	l
b19	usertests.asm	/^     b19:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
b19	zombie.asm	/^ b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1a	cat.asm	/^ b1a:	48 89 c2             	mov    %rax,%rdx$/;"	l
b1a	grep.asm	/^ b1a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b1a	imshow.asm	/^ b1a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b1a	ln.asm	/^ b1a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b1a	ls.asm	/^     b1a:	73 23                	jae    b3f <printf+0x1c2>$/;"	l
b1a	stressfs.asm	/^ b1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1a	wc.asm	/^ b1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1b	divide.asm	/^ b1b:	00 00 00 $/;"	l
b1b	init.asm	/^ b1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1b	mkdir.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1b	rm.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1c	ls.asm	/^     b1c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b1c	sh.asm	/^     b1c:	48 b8 50 07 00 00 00 	movabs $0x750,%rax$/;"	l
b1c	usertests.asm	/^     b1c:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b1d	cat.asm	/^ b1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1d	kill.asm	/^ b1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b1d	stressfs.asm	/^ b1d:	89 c0                	mov    %eax,%eax$/;"	l
b1d	zombie.asm	/^ b1d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1e	divide.asm	/^ b1e:	ff d0                	callq  *%rax$/;"	l
b1e	echo.asm	/^ b1e:	00 00 00 $/;"	l
b1e	imshow.asm	/^ b1e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b1e	wc.asm	/^ b1e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b1f	init.asm	/^ b1f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b1f	ln.asm	/^ b1f:	75 4a                	jne    b6b <malloc+0x7e>$/;"	l
b1f	prettyprint.asm	/^     b1f:	00 00 00 $/;"	l
b1f	stressfs.asm	/^ b1f:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b2	divide.asm	/^  b2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b2	echo.asm	/^  b2:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
b2	imshow.asm	/^  b2:	00 00 00 $/;"	l
b2	init.asm	/^  b2:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
b2	kill.asm	/^  b2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b2	ls.asm	/^      b2:	ff d0                	callq  *%rax$/;"	l
b2	prettyprint.asm	/^      b2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b2	stressfs.asm	/^  b2:	00 00 00 $/;"	l
b2	wc.asm	/^  b2:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b2	zombie.asm	/^  b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
b20	divide.asm	/^ b20:	eb 38                	jmp    b5a <printf+0x373>$/;"	l
b20	kill.asm	/^ b20:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b20	zombie.asm	/^ b20:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b21	cat.asm	/^ b21:	48 01 d0             	add    %rdx,%rax$/;"	l
b21	echo.asm	/^ b21:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b21	grep.asm	/^ b21:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b21	ln.asm	/^ b21:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b21	usertests.asm	/^     b21:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
b21	wc.asm	/^ b21:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b22	divide.asm	/^ b22:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b22	init.asm	/^ b22:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b22	mkdir.asm	/^ b22:	00 00 00 $/;"	l
b22	prettyprint.asm	/^     b22:	ff d0                	callq  *%rax$/;"	l
b22	rm.asm	/^ b22:	00 00 00 $/;"	l
b23	ls.asm	/^     b23:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b23	sh.asm	/^     b23:	00 00 00 $/;"	l
b23	stressfs.asm	/^ b23:	48 89 c2             	mov    %rax,%rdx$/;"	l
b23	zombie.asm	/^ b23:	89 c2                	mov    %eax,%edx$/;"	l
b24	cat.asm	/^ b24:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b24	echo.asm	/^ b24:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b24	prettyprint.asm	/^     b24:	e9 f1 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b25	grep.asm	/^ b25:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b25	imshow.asm	/^ b25:	8b 00                	mov    (%rax),%eax$/;"	l
b25	init.asm	/^ b25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b25	mkdir.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	rm.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	wc.asm	/^ b25:	77 17                	ja     b3e <free+0x4f>$/;"	l
b25	zombie.asm	/^ b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b26	sh.asm	/^     b26:	ff d0                	callq  *%rax$/;"	l
b26	stressfs.asm	/^ b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b27	imshow.asm	/^ b27:	0f be d0             	movsbl %al,%edx$/;"	l
b27	kill.asm	/^ b27:	00 00 00 $/;"	l
b27	wc.asm	/^ b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b28	cat.asm	/^ b28:	75 27                	jne    b51 <free+0x113>$/;"	l
b28	divide.asm	/^ b28:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b28	ln.asm	/^ b28:	00 00 00 $/;"	l
b28	mkdir.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	rm.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	sh.asm	/^     b28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b28	usertests.asm	/^     b28:	00 00 00 $/;"	l
b29	init.asm	/^ b29:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b29	ls.asm	/^     b29:	89 d2                	mov    %edx,%edx$/;"	l
b29	prettyprint.asm	/^     b29:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
b29	zombie.asm	/^ b29:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b2a	cat.asm	/^ b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2a	imshow.asm	/^ b2a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2a	kill.asm	/^ b2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b2a	stressfs.asm	/^ b2a:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	echo.asm	/^ b2b:	00 00 00 $/;"	l
b2b	ln.asm	/^ b2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b2b	ls.asm	/^     b2b:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	usertests.asm	/^     b2b:	89 c7                	mov    %eax,%edi$/;"	l
b2b	wc.asm	/^ b2b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b2c	grep.asm	/^ b2c:	8b 30                	mov    (%rax),%esi$/;"	l
b2c	init.asm	/^ b2c:	eb 0e                	jmp    b3c <free+0xcf>$/;"	l
b2c	mkdir.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	rm.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	sh.asm	/^     b2c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b2c	zombie.asm	/^ b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2d	divide.asm	/^ b2d:	89 c7                	mov    %eax,%edi$/;"	l
b2d	kill.asm	/^ b2d:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b2d	stressfs.asm	/^ b2d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b2d	usertests.asm	/^     b2d:	48 b8 20 60 00 00 00 	movabs $0x6020,%rax$/;"	l
b2e	cat.asm	/^ b2e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b2e	echo.asm	/^ b2e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b2e	grep.asm	/^ b2e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2e	init.asm	/^ b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2e	ls.asm	/^     b2e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b2f	divide.asm	/^ b2f:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b2f	ln.asm	/^ b2f:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b2f	wc.asm	/^ b2f:	77 2f                	ja     b60 <free+0x71>$/;"	l
b3	usertests.asm	/^      b3:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
b30	imshow.asm	/^ b30:	89 d6                	mov    %edx,%esi$/;"	l
b30	prettyprint.asm	/^     b30:	74 09                	je     b3b <printf+0x194>$/;"	l
b30	sh.asm	/^     b30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b30	zombie.asm	/^ b30:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b31	cat.asm	/^ b31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b31	echo.asm	/^ b31:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b31	mkdir.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	rm.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	stressfs.asm	/^ b31:	75 27                	jne    b5a <free+0x113>$/;"	l
b31	wc.asm	/^ b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b32	imshow.asm	/^ b32:	89 c7                	mov    %eax,%edi$/;"	l
b32	init.asm	/^ b32:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b32	prettyprint.asm	/^     b32:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b33	mkdir.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	rm.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	stressfs.asm	/^ b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b33	zombie.asm	/^ b33:	89 c0                	mov    %eax,%eax$/;"	l
b34	grep.asm	/^ b34:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b34	imshow.asm	/^ b34:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b34	kill.asm	/^ b34:	00 00 00 $/;"	l
b34	ls.asm	/^     b34:	83 c2 08             	add    $0x8,%edx$/;"	l
b34	sh.asm	/^     b34:	48 ba 01 1e 00 00 00 	movabs $0x1e01,%rdx$/;"	l
b34	usertests.asm	/^     b34:	00 00 00 $/;"	l
b35	cat.asm	/^ b35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b35	init.asm	/^ b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b35	wc.asm	/^ b35:	48 8b 00             	mov    (%rax),%rax$/;"	l
b35	zombie.asm	/^ b35:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b36	divide.asm	/^ b36:	00 00 00 $/;"	l
b36	ln.asm	/^ b36:	00 00 00 $/;"	l
b37	kill.asm	/^ b37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b37	ls.asm	/^     b37:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b37	stressfs.asm	/^ b37:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b37	usertests.asm	/^     b37:	ff d0                	callq  *%rax$/;"	l
b38	cat.asm	/^ b38:	01 c2                	add    %eax,%edx$/;"	l
b38	echo.asm	/^ b38:	00 00 00 $/;"	l
b38	wc.asm	/^ b38:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b39	divide.asm	/^ b39:	ff d0                	callq  *%rax$/;"	l
b39	grep.asm	/^ b39:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b39	init.asm	/^ b39:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b39	ln.asm	/^ b39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b39	prettyprint.asm	/^     b39:	75 65                	jne    ba0 <printf+0x1f9>$/;"	l
b39	usertests.asm	/^     b39:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
b39	zombie.asm	/^ b39:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b3a	cat.asm	/^ b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3a	kill.asm	/^ b3a:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b3a	mkdir.asm	/^ b3a:	00 00 00 $/;"	l
b3a	rm.asm	/^ b3a:	00 00 00 $/;"	l
b3a	stressfs.asm	/^ b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	divide.asm	/^ b3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b3b	echo.asm	/^ b3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b3b	imshow.asm	/^ b3b:	00 00 00 $/;"	l
b3b	prettyprint.asm	/^     b3b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b3b	sh.asm	/^     b3b:	00 00 00 $/;"	l
b3c	init.asm	/^ b3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3c	usertests.asm	/^     b3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
b3c	wc.asm	/^ b3c:	77 22                	ja     b60 <free+0x71>$/;"	l
b3d	ln.asm	/^ b3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b3d	ls.asm	/^     b3d:	eb 12                	jmp    b51 <printf+0x1d4>$/;"	l
b3d	mkdir.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	rm.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	zombie.asm	/^ b3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3e	cat.asm	/^ b3e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b3e	grep.asm	/^ b3e:	89 c7                	mov    %eax,%edi$/;"	l
b3e	imshow.asm	/^ b3e:	ff d0                	callq  *%rax$/;"	l
b3e	sh.asm	/^     b3e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b3e	stressfs.asm	/^ b3e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b3e	wc.asm	/^ b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3f	ls.asm	/^     b3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b4	cat.asm	/^  b4:	00 00 00 $/;"	l
b4	echo.asm	/^  b4:	89 ca                	mov    %ecx,%edx$/;"	l
b4	forktest.asm	/^  b4:	00 00 00 $/;"	l
b4	grep.asm	/^  b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
b4	ln.asm	/^  b4:	ff d0                	callq  *%rax$/;"	l
b4	ls.asm	/^      b4:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
b4	mkdir.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	rm.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	sh.asm	/^      b4:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
b40	grep.asm	/^ b40:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
b40	imshow.asm	/^ b40:	eb 62                	jmp    ba4 <printf+0x373>$/;"	l
b40	init.asm	/^ b40:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b40	ln.asm	/^ b40:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b40	usertests.asm	/^     b40:	75 45                	jne    b87 <writetest1+0x1ee>$/;"	l
b41	cat.asm	/^ b41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b41	divide.asm	/^ b41:	0f be d0             	movsbl %al,%edx$/;"	l
b41	kill.asm	/^ b41:	00 00 00 $/;"	l
b41	mkdir.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	prettyprint.asm	/^     b41:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b41	rm.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	sh.asm	/^     b41:	48 89 c7             	mov    %rax,%rdi$/;"	l
b41	stressfs.asm	/^ b41:	01 c2                	add    %eax,%edx$/;"	l
b41	zombie.asm	/^ b41:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b42	echo.asm	/^ b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b42	imshow.asm	/^ b42:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
b42	usertests.asm	/^     b42:	81 7d f8 8b 00 00 00 	cmpl   $0x8b,-0x8(%rbp)$/;"	l
b42	wc.asm	/^ b42:	48 8b 00             	mov    (%rax),%rax$/;"	l
b43	init.asm	/^ b43:	89 c0                	mov    %eax,%eax$/;"	l
b43	stressfs.asm	/^ b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b44	divide.asm	/^ b44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b44	kill.asm	/^ b44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b44	prettyprint.asm	/^     b44:	73 23                	jae    b69 <printf+0x1c2>$/;"	l
b44	sh.asm	/^     b44:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b44	zombie.asm	/^ b44:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b45	cat.asm	/^ b45:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b45	init.asm	/^ b45:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b45	wc.asm	/^ b45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b46	echo.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	ls.asm	/^     b46:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b46	prettyprint.asm	/^     b46:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b47	grep.asm	/^ b47:	00 00 00 $/;"	l
b47	ln.asm	/^ b47:	00 00 00 $/;"	l
b47	stressfs.asm	/^ b47:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b47	zombie.asm	/^ b47:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b48	cat.asm	/^ b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b48	mkdir.asm	/^ b48:	00 00 00 $/;"	l
b48	rm.asm	/^ b48:	00 00 00 $/;"	l
b49	echo.asm	/^ b49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b49	imshow.asm	/^ b49:	75 21                	jne    b6c <printf+0x33b>$/;"	l
b49	init.asm	/^ b49:	48 89 c2             	mov    %rax,%rdx$/;"	l
b49	usertests.asm	/^     b49:	0f 85 d8 00 00 00    	jne    c27 <writetest1+0x28e>$/;"	l
b49	wc.asm	/^ b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4a	divide.asm	/^ b4a:	89 d6                	mov    %edx,%esi$/;"	l
b4a	grep.asm	/^ b4a:	ff d0                	callq  *%rax$/;"	l
b4a	ln.asm	/^ b4a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4a	ls.asm	/^     b4a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b4a	stressfs.asm	/^ b4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	imshow.asm	/^ b4b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b4b	kill.asm	/^ b4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	mkdir.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	rm.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	sh.asm	/^     b4b:	00 00 00 $/;"	l
b4c	cat.asm	/^ b4c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4c	divide.asm	/^ b4c:	89 c7                	mov    %eax,%edi$/;"	l
b4c	grep.asm	/^ b4c:	e9 7a 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
b4c	init.asm	/^ b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b4d	echo.asm	/^ b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b4d	ln.asm	/^ b4d:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b4d	prettyprint.asm	/^     b4d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b4d	wc.asm	/^ b4d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b4e	divide.asm	/^ b4e:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b4e	sh.asm	/^     b4e:	ff d0                	callq  *%rax$/;"	l
b4e	stressfs.asm	/^ b4e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4e	zombie.asm	/^ b4e:	00 00 00 $/;"	l
b4f	cat.asm	/^ b4f:	eb 0b                	jmp    b5c <free+0x11e>$/;"	l
b4f	kill.asm	/^ b4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b4f	mkdir.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	rm.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	usertests.asm	/^     b4f:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b5	imshow.asm	/^  b5:	ff d2                	callq  *%rdx$/;"	l
b5	kill.asm	/^  b5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
b5	stressfs.asm	/^  b5:	ff d1                	callq  *%rcx$/;"	l
b50	init.asm	/^ b50:	48 01 d0             	add    %rdx,%rax$/;"	l
b50	sh.asm	/^     b50:	85 c0                	test   %eax,%eax$/;"	l
b51	cat.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	echo.asm	/^ b51:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b51	grep.asm	/^ b51:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b51	imshow.asm	/^ b51:	0f be d0             	movsbl %al,%edx$/;"	l
b51	ls.asm	/^     b51:	8b 30                	mov    (%rax),%esi$/;"	l
b51	stressfs.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	wc.asm	/^ b51:	76 c7                	jbe    b1a <free+0x2b>$/;"	l
b51	zombie.asm	/^ b51:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b52	kill.asm	/^ b52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b52	mkdir.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	rm.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	sh.asm	/^     b52:	75 a0                	jne    af4 <parseline+0x30>$/;"	l
b53	init.asm	/^ b53:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b53	ls.asm	/^     b53:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b53	prettyprint.asm	/^     b53:	89 d2                	mov    %edx,%edx$/;"	l
b53	wc.asm	/^ b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b54	echo.asm	/^ b54:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b54	imshow.asm	/^ b54:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b54	ln.asm	/^ b54:	00 00 00 $/;"	l
b54	sh.asm	/^     b54:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b55	cat.asm	/^ b55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b55	divide.asm	/^ b55:	00 00 00 $/;"	l
b55	prettyprint.asm	/^     b55:	48 01 d0             	add    %rdx,%rax$/;"	l
b55	stressfs.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b55	zombie.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b56	kill.asm	/^ b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b56	usertests.asm	/^     b56:	00 00 00 $/;"	l
b57	echo.asm	/^ b57:	72 65                	jb     bbe <malloc+0xfa>$/;"	l
b57	init.asm	/^ b57:	75 27                	jne    b80 <free+0x113>$/;"	l
b57	ln.asm	/^ b57:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b57	wc.asm	/^ b57:	48 8b 00             	mov    (%rax),%rax$/;"	l
b58	divide.asm	/^ b58:	ff d0                	callq  *%rax$/;"	l
b58	grep.asm	/^ b58:	0f 85 a5 00 00 00    	jne    c03 <printf+0x2ab>$/;"	l
b58	prettyprint.asm	/^     b58:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b58	sh.asm	/^     b58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b58	stressfs.asm	/^ b58:	eb 0b                	jmp    b65 <free+0x11e>$/;"	l
b58	zombie.asm	/^ b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	cat.asm	/^ b59:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b59	echo.asm	/^ b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	init.asm	/^ b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	ls.asm	/^     b59:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b59	mkdir.asm	/^ b59:	00 00 00 $/;"	l
b59	rm.asm	/^ b59:	00 00 00 $/;"	l
b59	usertests.asm	/^     b59:	8b 00                	mov    (%rax),%eax$/;"	l
b5a	divide.asm	/^ b5a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
b5a	imshow.asm	/^ b5a:	89 d6                	mov    %edx,%esi$/;"	l
b5a	kill.asm	/^ b5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5a	ln.asm	/^ b5a:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b5a	stressfs.asm	/^ b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b5a	wc.asm	/^ b5a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b5b	usertests.asm	/^     b5b:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
b5c	cat.asm	/^ b5c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
b5c	imshow.asm	/^ b5c:	89 c7                	mov    %eax,%edi$/;"	l
b5c	mkdir.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	rm.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	sh.asm	/^     b5c:	48 ba 03 1e 00 00 00 	movabs $0x1e03,%rdx$/;"	l
b5c	zombie.asm	/^ b5c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b5d	echo.asm	/^ b5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5d	init.asm	/^ b5d:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b5d	kill.asm	/^ b5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b5e	grep.asm	/^ b5e:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b5e	imshow.asm	/^ b5e:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b5e	ls.asm	/^     b5e:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b5e	prettyprint.asm	/^     b5e:	83 c2 08             	add    $0x8,%edx$/;"	l
b5e	stressfs.asm	/^ b5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b5e	usertests.asm	/^     b5e:	48 be a9 6b 00 00 00 	movabs $0x6ba9,%rsi$/;"	l
b5e	wc.asm	/^ b5e:	76 ba                	jbe    b1a <free+0x2b>$/;"	l
b5f	mkdir.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b5f	rm.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6	divide.asm	/^  b6:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6	echo.asm	/^  b6:	48 89 fe             	mov    %rdi,%rsi$/;"	l
b6	ln.asm	/^  b6:	55                   	push   %rbp$/;"	l
b6	zombie.asm	/^  b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b60	echo.asm	/^ b60:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b60	init.asm	/^ b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b60	kill.asm	/^ b60:	72 65                	jb     bc7 <malloc+0xfa>$/;"	l
b60	wc.asm	/^ b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b60	zombie.asm	/^ b60:	eb 4e                	jmp    bb0 <malloc+0x148>$/;"	l
b61	divide.asm	/^ b61:	00 00 00 $/;"	l
b61	ln.asm	/^ b61:	00 00 00 $/;"	l
b61	prettyprint.asm	/^     b61:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b62	kill.asm	/^ b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b62	stressfs.asm	/^ b62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b62	zombie.asm	/^ b62:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b63	cat.asm	/^ b63:	00 00 00 $/;"	l
b63	echo.asm	/^ b63:	75 10                	jne    b75 <malloc+0xb1>$/;"	l
b63	ls.asm	/^     b63:	89 c7                	mov    %eax,%edi$/;"	l
b63	sh.asm	/^     b63:	00 00 00 $/;"	l
b64	divide.asm	/^ b64:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
b64	grep.asm	/^ b64:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b64	init.asm	/^ b64:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b64	ln.asm	/^ b64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b64	wc.asm	/^ b64:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b65	echo.asm	/^ b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b65	imshow.asm	/^ b65:	00 00 00 $/;"	l
b65	ls.asm	/^     b65:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
b65	stressfs.asm	/^ b65:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
b65	usertests.asm	/^     b65:	00 00 00 $/;"	l
b66	cat.asm	/^ b66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b66	kill.asm	/^ b66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b66	mkdir.asm	/^ b66:	00 00 00 $/;"	l
b66	rm.asm	/^ b66:	00 00 00 $/;"	l
b66	sh.asm	/^     b66:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b67	grep.asm	/^ b67:	73 23                	jae    b8c <printf+0x234>$/;"	l
b67	init.asm	/^ b67:	01 c2                	add    %eax,%edx$/;"	l
b67	prettyprint.asm	/^     b67:	eb 12                	jmp    b7b <printf+0x1d4>$/;"	l
b67	wc.asm	/^ b67:	89 c0                	mov    %eax,%eax$/;"	l
b68	imshow.asm	/^ b68:	ff d0                	callq  *%rax$/;"	l
b68	usertests.asm	/^     b68:	89 c7                	mov    %eax,%edi$/;"	l
b69	echo.asm	/^ b69:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b69	grep.asm	/^ b69:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b69	init.asm	/^ b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b69	kill.asm	/^ b69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b69	mkdir.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	prettyprint.asm	/^     b69:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b69	rm.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	sh.asm	/^     b69:	48 89 c7             	mov    %rax,%rdi$/;"	l
b69	wc.asm	/^ b69:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b69	zombie.asm	/^ b69:	00 00 00 $/;"	l
b6a	cat.asm	/^ b6a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b6a	imshow.asm	/^ b6a:	eb 38                	jmp    ba4 <printf+0x373>$/;"	l
b6a	usertests.asm	/^     b6a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b6b	divide.asm	/^ b6b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
b6b	ln.asm	/^ b6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	echo.asm	/^ b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	imshow.asm	/^ b6c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b6c	kill.asm	/^ b6c:	75 10                	jne    b7e <malloc+0xb1>$/;"	l
b6c	ls.asm	/^     b6c:	00 00 00 $/;"	l
b6c	mkdir.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	rm.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	sh.asm	/^     b6c:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b6c	stressfs.asm	/^ b6c:	00 00 00 $/;"	l
b6c	zombie.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6d	cat.asm	/^ b6d:	90                   	nop$/;"	l
b6d	init.asm	/^ b6d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b6d	wc.asm	/^ b6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
b6e	cat.asm	/^ b6e:	c9                   	leaveq $/;"	l
b6e	kill.asm	/^ b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b6f	cat.asm	/^ b6f:	c3                   	retq   $/;"	l
b6f	ln.asm	/^ b6f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6f	ls.asm	/^     b6f:	ff d0                	callq  *%rax$/;"	l
b6f	stressfs.asm	/^ b6f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b6f	usertests.asm	/^     b6f:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
b6f	zombie.asm	/^ b6f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
b7	cat.asm	/^  b7:	ff d0                	callq  *%rax$/;"	l
b7	forktest.asm	/^  b7:	ff d2                	callq  *%rdx$/;"	l
b7	grep.asm	/^  b7:	48 b8 a2 05 00 00 00 	movabs $0x5a2,%rax$/;"	l
b7	imshow.asm	/^  b7:	48 b8 62 06 00 00 00 	movabs $0x662,%rax$/;"	l
b7	init.asm	/^  b7:	48 bf 6d 0d 00 00 00 	movabs $0xd6d,%rdi$/;"	l
b7	ln.asm	/^  b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7	mkdir.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	prettyprint.asm	/^      b7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
b7	rm.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	stressfs.asm	/^  b7:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax$/;"	l
b7	wc.asm	/^  b7:	48 be a0 10 00 00 00 	movabs $0x10a0,%rsi$/;"	l
b70	cat.asm	/^ b70:	55                   	push   %rbp$/;"	l
b70	echo.asm	/^ b70:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b70	grep.asm	/^ b70:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b70	init.asm	/^ b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b70	prettyprint.asm	/^     b70:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b70	wc.asm	/^ b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b71	cat.asm	/^ b71:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b71	divide.asm	/^ b71:	48 63 d0             	movslq %eax,%rdx$/;"	l
b71	ls.asm	/^     b71:	e9 7a 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
b72	imshow.asm	/^ b72:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b72	kill.asm	/^ b72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b72	ln.asm	/^ b72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b73	echo.asm	/^ b73:	eb 2e                	jmp    ba3 <malloc+0xdf>$/;"	l
b73	mkdir.asm	/^ b73:	00 00 00 $/;"	l
b73	rm.asm	/^ b73:	00 00 00 $/;"	l
b73	sh.asm	/^     b73:	00 00 00 $/;"	l
b73	stressfs.asm	/^ b73:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b73	zombie.asm	/^ b73:	75 23                	jne    b98 <malloc+0x130>$/;"	l
b74	cat.asm	/^ b74:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b74	divide.asm	/^ b74:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
b74	init.asm	/^ b74:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b74	prettyprint.asm	/^     b74:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b74	wc.asm	/^ b74:	48 01 c2             	add    %rax,%rdx$/;"	l
b75	echo.asm	/^ b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b75	kill.asm	/^ b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b75	zombie.asm	/^ b75:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b76	grep.asm	/^ b76:	89 d2                	mov    %edx,%edx$/;"	l
b76	ln.asm	/^ b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b76	ls.asm	/^     b76:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b76	mkdir.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	rm.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	sh.asm	/^     b76:	ff d0                	callq  *%rax$/;"	l
b76	stressfs.asm	/^ b76:	90                   	nop$/;"	l
b76	usertests.asm	/^     b76:	00 00 00 $/;"	l
b77	imshow.asm	/^ b77:	89 c7                	mov    %eax,%edi$/;"	l
b77	init.asm	/^ b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b77	stressfs.asm	/^ b77:	c9                   	leaveq $/;"	l
b77	wc.asm	/^ b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b78	cat.asm	/^ b78:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b78	grep.asm	/^ b78:	48 01 d0             	add    %rdx,%rax$/;"	l
b78	sh.asm	/^     b78:	85 c0                	test   %eax,%eax$/;"	l
b78	stressfs.asm	/^ b78:	c3                   	retq   $/;"	l
b78	zombie.asm	/^ b78:	89 c7                	mov    %eax,%edi$/;"	l
b79	echo.asm	/^ b79:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b79	imshow.asm	/^ b79:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b79	kill.asm	/^ b79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b79	stressfs.asm	/^ b79:	55                   	push   %rbp$/;"	l
b79	usertests.asm	/^     b79:	ff d1                	callq  *%rcx$/;"	l
b7a	ln.asm	/^ b7a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b7a	sh.asm	/^     b7a:	74 58                	je     bd4 <parseline+0x110>$/;"	l
b7a	stressfs.asm	/^ b7a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7a	zombie.asm	/^ b7a:	48 b8 ef 09 00 00 00 	movabs $0x9ef,%rax$/;"	l
b7b	cat.asm	/^ b7b:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b7b	divide.asm	/^ b7b:	48 01 d0             	add    %rdx,%rax$/;"	l
b7b	grep.asm	/^ b7b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b7b	init.asm	/^ b7b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b7b	prettyprint.asm	/^     b7b:	8b 30                	mov    (%rax),%esi$/;"	l
b7b	usertests.asm	/^     b7b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b7b	wc.asm	/^ b7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
b7c	echo.asm	/^ b7c:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b7c	kill.asm	/^ b7c:	eb 2e                	jmp    bac <malloc+0xdf>$/;"	l
b7c	sh.asm	/^     b7c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
b7d	ln.asm	/^ b7d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7d	ls.asm	/^     b7d:	0f 85 a5 00 00 00    	jne    c28 <printf+0x2ab>$/;"	l
b7d	mkdir.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	prettyprint.asm	/^     b7d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b7d	rm.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	stressfs.asm	/^ b7d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b7e	divide.asm	/^ b7e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
b7e	init.asm	/^ b7e:	eb 0b                	jmp    b8b <free+0x11e>$/;"	l
b7e	kill.asm	/^ b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7e	wc.asm	/^ b7e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b7f	echo.asm	/^ b7f:	89 c2                	mov    %eax,%edx$/;"	l
b8	kill.asm	/^  b8:	89 d1                	mov    %edx,%ecx$/;"	l
b80	imshow.asm	/^ b80:	00 00 00 $/;"	l
b80	init.asm	/^ b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b80	ln.asm	/^ b80:	72 65                	jb     be7 <malloc+0xfa>$/;"	l
b80	sh.asm	/^     b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b81	divide.asm	/^ b81:	84 c0                	test   %al,%al$/;"	l
b81	echo.asm	/^ b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b81	grep.asm	/^ b81:	83 c2 08             	add    $0x8,%edx$/;"	l
b81	mkdir.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	rm.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	stressfs.asm	/^ b81:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b81	wc.asm	/^ b81:	75 2d                	jne    bb0 <free+0xc1>$/;"	l
b81	zombie.asm	/^ b81:	00 00 00 $/;"	l
b82	cat.asm	/^ b82:	77 07                	ja     b8b <morecore+0x1b>$/;"	l
b82	kill.asm	/^ b82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b82	ln.asm	/^ b82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b82	usertests.asm	/^     b82:	00 00 00 $/;"	l
b83	divide.asm	/^ b83:	0f 85 fc fc ff ff    	jne    885 <printf+0x9e>$/;"	l
b83	imshow.asm	/^ b83:	ff d0                	callq  *%rax$/;"	l
b83	ls.asm	/^     b83:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b83	prettyprint.asm	/^     b83:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b83	wc.asm	/^ b83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b84	cat.asm	/^ b84:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b84	grep.asm	/^ b84:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b84	init.asm	/^ b84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b84	mkdir.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	rm.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	sh.asm	/^     b84:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
b84	stressfs.asm	/^ b84:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b84	zombie.asm	/^ b84:	ff d0                	callq  *%rax$/;"	l
b85	echo.asm	/^ b85:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b85	imshow.asm	/^ b85:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b85	kill.asm	/^ b85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b85	usertests.asm	/^     b85:	ff d0                	callq  *%rax$/;"	l
b86	ln.asm	/^ b86:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b86	zombie.asm	/^ b86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b87	usertests.asm	/^     b87:	81 7d fc 00 02 00 00 	cmpl   $0x200,-0x4(%rbp)$/;"	l
b87	wc.asm	/^ b87:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b88	echo.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	init.asm	/^ b88:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b88	kill.asm	/^ b88:	89 c2                	mov    %eax,%edx$/;"	l
b88	mkdir.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	prettyprint.asm	/^     b88:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b88	rm.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	divide.asm	/^ b89:	90                   	nop$/;"	l
b89	ln.asm	/^ b89:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b89	ls.asm	/^     b89:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b89	sh.asm	/^     b89:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b8a	divide.asm	/^ b8a:	c9                   	leaveq $/;"	l
b8a	grep.asm	/^ b8a:	eb 12                	jmp    b9e <printf+0x246>$/;"	l
b8a	kill.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	wc.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	zombie.asm	/^ b8a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
b8b	cat.asm	/^ b8b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b8b	divide.asm	/^ b8b:	c3                   	retq   $/;"	l
b8b	imshow.asm	/^ b8b:	0f be d0             	movsbl %al,%edx$/;"	l
b8b	init.asm	/^ b8b:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
b8b	stressfs.asm	/^ b8b:	77 07                	ja     b94 <morecore+0x1b>$/;"	l
b8c	divide.asm	/^ b8c:	55                   	push   %rbp$/;"	l
b8c	echo.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	grep.asm	/^ b8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b8c	ln.asm	/^ b8c:	75 10                	jne    b9e <malloc+0xb1>$/;"	l
b8c	ls.asm	/^     b8c:	73 23                	jae    bb1 <printf+0x234>$/;"	l
b8c	mkdir.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	rm.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	divide.asm	/^ b8d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b8d	prettyprint.asm	/^     b8d:	89 c7                	mov    %eax,%edi$/;"	l
b8d	stressfs.asm	/^ b8d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b8e	cat.asm	/^ b8e:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b8e	imshow.asm	/^ b8e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b8e	kill.asm	/^ b8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b8e	ln.asm	/^ b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8e	ls.asm	/^     b8e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b8e	sh.asm	/^     b8e:	48 89 c7             	mov    %rax,%rdi$/;"	l
b8e	usertests.asm	/^     b8e:	74 38                	je     bc8 <writetest1+0x22f>$/;"	l
b8e	wc.asm	/^ b8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b8f	echo.asm	/^ b8f:	89 c0                	mov    %eax,%eax$/;"	l
b8f	mkdir.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	prettyprint.asm	/^     b8f:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b8f	rm.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	zombie.asm	/^ b8f:	75 07                	jne    b98 <malloc+0x130>$/;"	l
b9	cat.asm	/^  b9:	90                   	nop$/;"	l
b9	divide.asm	/^  b9:	48 89 c7             	mov    %rax,%rdi$/;"	l
b9	echo.asm	/^  b9:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
b9	forktest.asm	/^  b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
b9	ls.asm	/^      b9:	89 d3                	mov    %edx,%ebx$/;"	l
b9	sh.asm	/^      b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b90	divide.asm	/^ b90:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
b90	usertests.asm	/^     b90:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b91	cat.asm	/^ b91:	89 c7                	mov    %eax,%edi$/;"	l
b91	echo.asm	/^ b91:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b91	kill.asm	/^ b91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b91	sh.asm	/^     b91:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b91	wc.asm	/^ b91:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b91	zombie.asm	/^ b91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b92	init.asm	/^ b92:	00 00 00 $/;"	l
b92	ln.asm	/^ b92:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b92	mkdir.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b92	rm.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b93	cat.asm	/^ b93:	48 b8 74 05 00 00 00 	movabs $0x574,%rax$/;"	l
b93	grep.asm	/^ b93:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b94	divide.asm	/^ b94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
b94	imshow.asm	/^ b94:	89 d6                	mov    %edx,%esi$/;"	l
b94	mkdir.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	rm.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	stressfs.asm	/^ b94:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b94	wc.asm	/^ b94:	01 c2                	add    %eax,%edx$/;"	l
b95	echo.asm	/^ b95:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b95	init.asm	/^ b95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b95	kill.asm	/^ b95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b95	ln.asm	/^ b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b95	ls.asm	/^     b95:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b96	imshow.asm	/^ b96:	89 c7                	mov    %eax,%edi$/;"	l
b96	prettyprint.asm	/^     b96:	00 00 00 $/;"	l
b96	wc.asm	/^ b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b96	zombie.asm	/^ b96:	eb 18                	jmp    bb0 <malloc+0x148>$/;"	l
b97	grep.asm	/^ b97:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b97	stressfs.asm	/^ b97:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b97	usertests.asm	/^     b97:	00 00 00 $/;"	l
b98	divide.asm	/^ b98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b98	imshow.asm	/^ b98:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b98	kill.asm	/^ b98:	89 c0                	mov    %eax,%eax$/;"	l
b98	mkdir.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	rm.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	sh.asm	/^     b98:	00 00 00 $/;"	l
b98	zombie.asm	/^ b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	echo.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	init.asm	/^ b99:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b99	ln.asm	/^ b99:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b99	prettyprint.asm	/^     b99:	ff d0                	callq  *%rax$/;"	l
b9a	cat.asm	/^ b9a:	00 00 00 $/;"	l
b9a	kill.asm	/^ b9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b9a	stressfs.asm	/^ b9a:	89 c7                	mov    %eax,%edi$/;"	l
b9a	usertests.asm	/^     b9a:	8b 00                	mov    (%rax),%eax$/;"	l
b9a	wc.asm	/^ b9a:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b9b	ls.asm	/^     b9b:	89 d2                	mov    %edx,%edx$/;"	l
b9b	mkdir.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	prettyprint.asm	/^     b9b:	e9 7a 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b9b	rm.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	sh.asm	/^     b9b:	ff d0                	callq  *%rax$/;"	l
b9c	divide.asm	/^ b9c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
b9c	init.asm	/^ b9c:	90                   	nop$/;"	l
b9c	ln.asm	/^ b9c:	eb 2e                	jmp    bcc <malloc+0xdf>$/;"	l
b9c	stressfs.asm	/^ b9c:	48 b8 7d 05 00 00 00 	movabs $0x57d,%rax$/;"	l
b9c	usertests.asm	/^     b9c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
b9c	zombie.asm	/^ b9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b9d	cat.asm	/^ b9d:	ff d0                	callq  *%rax$/;"	l
b9d	echo.asm	/^ b9d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b9d	init.asm	/^ b9d:	c9                   	leaveq $/;"	l
b9d	ls.asm	/^     b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	sh.asm	/^     b9d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
b9d	wc.asm	/^ b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	grep.asm	/^ b9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b9e	init.asm	/^ b9e:	c3                   	retq   $/;"	l
b9e	kill.asm	/^ b9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b9e	ln.asm	/^ b9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	mkdir.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9e	rm.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9f	cat.asm	/^ b9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b9f	imshow.asm	/^ b9f:	00 00 00 $/;"	l
b9f	init.asm	/^ b9f:	55                   	push   %rbp$/;"	l
b9f	usertests.asm	/^     b9f:	48 be c6 6b 00 00 00 	movabs $0x6bc6,%rsi$/;"	l
ba	cat.asm	/^  ba:	c9                   	leaveq $/;"	l
ba	kill.asm	/^  ba:	fc                   	cld    $/;"	l
ba	ln.asm	/^  ba:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ba	mkdir.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	rm.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	usertests.asm	/^      ba:	00 00 00 $/;"	l
ba	zombie.asm	/^  ba:	eb 0a                	jmp    c6 <strcmp+0x1c>$/;"	l
ba0	divide.asm	/^ ba0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ba0	echo.asm	/^ ba0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba0	init.asm	/^ ba0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ba0	ls.asm	/^     ba0:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ba0	mkdir.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	prettyprint.asm	/^     ba0:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
ba0	rm.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	zombie.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba1	grep.asm	/^ ba1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
ba1	sh.asm	/^     ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ba1	wc.asm	/^ ba1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba2	imshow.asm	/^ ba2:	ff d0                	callq  *%rax$/;"	l
ba2	kill.asm	/^ ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba2	ln.asm	/^ ba2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ba3	cat.asm	/^ ba3:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ba3	echo.asm	/^ ba3:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ba3	init.asm	/^ ba3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ba3	stressfs.asm	/^ ba3:	00 00 00 $/;"	l
ba4	divide.asm	/^ ba4:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
ba4	imshow.asm	/^ ba4:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ba4	mkdir.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	rm.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	wc.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	zombie.asm	/^ ba4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba5	ln.asm	/^ ba5:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ba5	sh.asm	/^     ba5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ba6	kill.asm	/^ ba6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ba6	ls.asm	/^     ba6:	83 c2 08             	add    $0x8,%edx$/;"	l
ba6	stressfs.asm	/^ ba6:	ff d0                	callq  *%rax$/;"	l
ba6	usertests.asm	/^     ba6:	00 00 00 $/;"	l
ba7	init.asm	/^ ba7:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ba7	mkdir.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	prettyprint.asm	/^     ba7:	0f 85 a5 00 00 00    	jne    c52 <printf+0x2ab>$/;"	l
ba7	rm.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	wc.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	zombie.asm	/^ ba7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba8	cat.asm	/^ ba8:	75 07                	jne    bb1 <morecore+0x41>$/;"	l
ba8	grep.asm	/^ ba8:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
ba8	ln.asm	/^ ba8:	89 c2                	mov    %eax,%edx$/;"	l
ba8	sh.asm	/^     ba8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ba8	stressfs.asm	/^ ba8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba9	kill.asm	/^ ba9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba9	ls.asm	/^     ba9:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ba9	usertests.asm	/^     ba9:	89 c7                	mov    %eax,%edi$/;"	l
baa	cat.asm	/^ baa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
baa	echo.asm	/^ baa:	00 00 00 $/;"	l
baa	init.asm	/^ baa:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
baa	ln.asm	/^ baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bab	divide.asm	/^ bab:	00 00 00 $/;"	l
bab	imshow.asm	/^ bab:	00 00 00 $/;"	l
bab	mkdir.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	rm.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	sh.asm	/^     bab:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
bab	usertests.asm	/^     bab:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bab	wc.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	zombie.asm	/^ bab:	e9 41 ff ff ff       	jmpq   af1 <malloc+0x89>$/;"	l
bac	kill.asm	/^ bac:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bac	stressfs.asm	/^ bac:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	echo.asm	/^ bad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	prettyprint.asm	/^     bad:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
bae	divide.asm	/^ bae:	48 8b 00             	mov    (%rax),%rax$/;"	l
bae	imshow.asm	/^ bae:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
bae	ln.asm	/^ bae:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bae	mkdir.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	rm.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	wc.asm	/^ bae:	eb 0e                	jmp    bbe <free+0xcf>$/;"	l
baf	cat.asm	/^ baf:	eb 36                	jmp    be7 <morecore+0x77>$/;"	l
baf	grep.asm	/^ baf:	00 $/;"	l
baf	ls.asm	/^     baf:	eb 12                	jmp    bc3 <printf+0x246>$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	cat.asm	/^  bb:	c3                   	retq   $/;"	l
bb	kill.asm	/^  bb:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
bb	ls.asm	/^      bb:	29 c3                	sub    %eax,%ebx$/;"	l
bb	stressfs.asm	/^  bb:	89 c2                	mov    %eax,%edx$/;"	l
bb0	grep.asm	/^ bb0:	75 3e                	jne    bf0 <printf+0x298>$/;"	l
bb0	mkdir.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	rm.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	usertests.asm	/^     bb0:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
bb0	wc.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	zombie.asm	/^ bb0:	c9                   	leaveq $/;"	l
bb1	cat.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	divide.asm	/^ bb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bb1	echo.asm	/^ bb1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bb1	init.asm	/^ bb1:	77 07                	ja     bba <morecore+0x1b>$/;"	l
bb1	ln.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	ls.asm	/^     bb1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bb1	stressfs.asm	/^ bb1:	75 07                	jne    bba <morecore+0x41>$/;"	l
bb1	zombie.asm	/^ bb1:	c3                   	retq   $/;"	l
bb2	grep.asm	/^ bb2:	48 b8 2e 10 00 00 00 	movabs $0x102e,%rax$/;"	l
bb2	sh.asm	/^     bb2:	00 00 00 $/;"	l
bb3	init.asm	/^ bb3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
bb3	kill.asm	/^ bb3:	00 00 00 $/;"	l
bb3	prettyprint.asm	/^     bb3:	83 f8 30             	cmp    $0x30,%eax$/;"	l
bb3	stressfs.asm	/^ bb3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bb4	echo.asm	/^ bb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb4	mkdir.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	rm.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	wc.asm	/^ bb4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bb5	cat.asm	/^ bb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bb5	divide.asm	/^ bb5:	eb 2f                	jmp    be6 <free+0x5a>$/;"	l
bb5	imshow.asm	/^ bb5:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
bb5	ln.asm	/^ bb5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb5	sh.asm	/^     bb5:	ff d0                	callq  *%rax$/;"	l
bb6	kill.asm	/^ bb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bb6	prettyprint.asm	/^     bb6:	73 23                	jae    bdb <printf+0x234>$/;"	l
bb7	divide.asm	/^ bb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb7	mkdir.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	rm.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	sh.asm	/^     bb7:	48 89 c2             	mov    %rax,%rdx$/;"	l
bb7	usertests.asm	/^     bb7:	00 00 00 $/;"	l
bb7	wc.asm	/^ bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb8	echo.asm	/^ bb8:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bb8	ln.asm	/^ bb8:	89 c0                	mov    %eax,%eax$/;"	l
bb8	ls.asm	/^     bb8:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
bb8	prettyprint.asm	/^     bb8:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
bb8	stressfs.asm	/^ bb8:	eb 36                	jmp    bf0 <morecore+0x77>$/;"	l
bb9	cat.asm	/^ bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb9	grep.asm	/^ bb9:	00 00 00 $/;"	l
bba	init.asm	/^ bba:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bba	kill.asm	/^ bba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bba	ln.asm	/^ bba:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bba	mkdir.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	rm.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	sh.asm	/^     bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	stressfs.asm	/^ bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	usertests.asm	/^     bba:	ff d1                	callq  *%rcx$/;"	l
bbb	divide.asm	/^ bbb:	48 8b 00             	mov    (%rax),%rax$/;"	l
bbb	imshow.asm	/^ bbb:	48 63 d0             	movslq %eax,%rdx$/;"	l
bbb	wc.asm	/^ bbb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bbc	echo.asm	/^ bbc:	eb 4e                	jmp    c0c <malloc+0x148>$/;"	l
bbc	grep.asm	/^ bbc:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bbc	ls.asm	/^     bbc:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
bbc	mkdir.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	rm.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	usertests.asm	/^     bbc:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bbd	cat.asm	/^ bbd:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bbd	init.asm	/^ bbd:	c1 e0 04             	shl    $0x4,%eax$/;"	l
bbd	kill.asm	/^ bbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbe	divide.asm	/^ bbe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bbe	echo.asm	/^ bbe:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
bbe	imshow.asm	/^ bbe:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
bbe	ln.asm	/^ bbe:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bbe	sh.asm	/^     bbe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bbe	stressfs.asm	/^ bbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bbe	wc.asm	/^ bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbf	prettyprint.asm	/^     bbf:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bc	cat.asm	/^  bc:	55                   	push   %rbp$/;"	l
bc	divide.asm	/^  bc:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
bc	mkdir.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	rm.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	zombie.asm	/^  bc:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
bc0	cat.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	init.asm	/^ bc0:	89 c7                	mov    %eax,%edi$/;"	l
bc0	mkdir.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	rm.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc1	kill.asm	/^ bc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc1	sh.asm	/^     bc1:	48 89 c7             	mov    %rax,%rdi$/;"	l
bc2	divide.asm	/^ bc2:	77 17                	ja     bdb <free+0x4f>$/;"	l
bc2	init.asm	/^ bc2:	48 b8 a3 05 00 00 00 	movabs $0x5a3,%rax$/;"	l
bc2	ln.asm	/^ bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc2	stressfs.asm	/^ bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc2	wc.asm	/^ bc2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc3	cat.asm	/^ bc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc3	grep.asm	/^ bc3:	eb 2b                	jmp    bf0 <printf+0x298>$/;"	l
bc3	ls.asm	/^     bc3:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc3	mkdir.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	rm.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	usertests.asm	/^     bc3:	00 00 00 $/;"	l
bc4	divide.asm	/^ bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc4	sh.asm	/^     bc4:	48 b8 e6 06 00 00 00 	movabs $0x6e6,%rax$/;"	l
bc5	echo.asm	/^ bc5:	00 00 00 $/;"	l
bc5	grep.asm	/^ bc5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bc5	imshow.asm	/^ bc5:	48 01 d0             	add    %rdx,%rax$/;"	l
bc5	kill.asm	/^ bc5:	eb 4e                	jmp    c15 <malloc+0x148>$/;"	l
bc5	prettyprint.asm	/^     bc5:	89 d2                	mov    %edx,%edx$/;"	l
bc5	wc.asm	/^ bc5:	89 c0                	mov    %eax,%eax$/;"	l
bc6	ln.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	ls.asm	/^     bc6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bc6	stressfs.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	usertests.asm	/^     bc6:	ff d0                	callq  *%rax$/;"	l
bc7	cat.asm	/^ bc7:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc7	kill.asm	/^ bc7:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bc7	mkdir.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	prettyprint.asm	/^     bc7:	48 01 d0             	add    %rdx,%rax$/;"	l
bc7	rm.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	wc.asm	/^ bc7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bc8	divide.asm	/^ bc8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bc8	echo.asm	/^ bc8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc8	imshow.asm	/^ bc8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bc8	usertests.asm	/^     bc8:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bc9	init.asm	/^ bc9:	00 00 00 $/;"	l
bc9	ln.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc9	stressfs.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bca	mkdir.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bca	prettyprint.asm	/^     bca:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bca	rm.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon4
bcb	cat.asm	/^ bcb:	48 89 c7             	mov    %rax,%rdi$/;"	l
bcb	echo.asm	/^ bcb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bcb	imshow.asm	/^ bcb:	84 c0                	test   %al,%al$/;"	l
bcb	sh.asm	/^     bcb:	00 00 00 $/;"	l
bcb	wc.asm	/^ bcb:	48 89 c2             	mov    %rax,%rdx$/;"	l
bcc	divide.asm	/^ bcc:	77 2f                	ja     bfd <free+0x71>$/;"	l
bcc	grep.asm	/^ bcc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bcc	init.asm	/^ bcc:	ff d0                	callq  *%rax$/;"	l
bcc	ln.asm	/^ bcc:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
bcc	mkdir.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	rm.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	stressfs.asm	/^ bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bcd	imshow.asm	/^ bcd:	0f 85 fc fc ff ff    	jne    8cf <printf+0x9e>$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	ls.asm	/^     bcd:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bce	cat.asm	/^ bce:	48 b8 3e 0a 00 00 00 	movabs $0xa3e,%rax$/;"	l
bce	divide.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bce	init.asm	/^ bce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bce	kill.asm	/^ bce:	00 00 00 $/;"	l
bce	sh.asm	/^     bce:	ff d0                	callq  *%rax$/;"	l
bce	wc.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcf	echo.asm	/^ bcf:	75 23                	jne    bf4 <malloc+0x130>$/;"	l
bcf	grep.asm	/^ bcf:	0f be d0             	movsbl %al,%edx$/;"	l
bcf	usertests.asm	/^     bcf:	00 00 00 $/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	cat.asm	/^  bd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd	echo.asm	/^  bd:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
bd	kill.asm	/^  bd:	89 ca                	mov    %ecx,%edx$/;"	l
bd	ls.asm	/^      bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bd	stressfs.asm	/^  bd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
bd	usertests.asm	/^      bd:	ff d2                	callq  *%rdx$/;"	l
bd0	mkdir.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	prettyprint.asm	/^     bd0:	83 c2 08             	add    $0x8,%edx$/;"	l
bd0	rm.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	sh.asm	/^     bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bd0	stressfs.asm	/^ bd0:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bd1	echo.asm	/^ bd1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bd1	kill.asm	/^ bd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd2	divide.asm	/^ bd2:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd2	grep.asm	/^ bd2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bd2	init.asm	/^ bd2:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
bd2	usertests.asm	/^     bd2:	8b 00                	mov    (%rax),%eax$/;"	l
bd2	wc.asm	/^ bd2:	48 01 d0             	add    %rdx,%rax$/;"	l
bd3	imshow.asm	/^ bd3:	90                   	nop$/;"	l
bd3	ln.asm	/^ bd3:	00 00 00 $/;"	l
bd3	prettyprint.asm	/^     bd3:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
bd4	echo.asm	/^ bd4:	89 c7                	mov    %eax,%edi$/;"	l
bd4	imshow.asm	/^ bd4:	c9                   	leaveq $/;"	l
bd4	kill.asm	/^ bd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bd4	ls.asm	/^     bd4:	00 $/;"	l
bd4	mkdir.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	rm.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	sh.asm	/^     bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	stressfs.asm	/^ bd4:	48 89 c7             	mov    %rax,%rdi$/;"	l
bd4	usertests.asm	/^     bd4:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
bd5	cat.asm	/^ bd5:	00 00 00 $/;"	l
bd5	divide.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd5	imshow.asm	/^ bd5:	c3                   	retq   $/;"	l
bd5	ls.asm	/^     bd5:	75 3e                	jne    c15 <printf+0x298>$/;"	l
bd5	wc.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd6	echo.asm	/^ bd6:	48 b8 4b 0a 00 00 00 	movabs $0xa4b,%rax$/;"	l
bd6	imshow.asm	/^ bd6:	55                   	push   %rbp$/;"	l
bd6	ln.asm	/^ bd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd7	imshow.asm	/^ bd7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd7	init.asm	/^ bd7:	75 07                	jne    be0 <morecore+0x41>$/;"	l
bd7	ls.asm	/^     bd7:	48 b8 61 10 00 00 00 	movabs $0x1061,%rax$/;"	l
bd7	stressfs.asm	/^ bd7:	48 b8 47 0a 00 00 00 	movabs $0xa47,%rax$/;"	l
bd7	usertests.asm	/^     bd7:	74 45                	je     c1e <writetest1+0x285>$/;"	l
bd8	cat.asm	/^ bd8:	ff d0                	callq  *%rax$/;"	l
bd8	grep.asm	/^ bd8:	89 d6                	mov    %edx,%esi$/;"	l
bd8	kill.asm	/^ bd8:	75 23                	jne    bfd <malloc+0x130>$/;"	l
bd8	mkdir.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	rm.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	sh.asm	/^     bd8:	c9                   	leaveq $/;"	l
bd9	divide.asm	/^ bd9:	77 22                	ja     bfd <free+0x71>$/;"	l
bd9	init.asm	/^ bd9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bd9	prettyprint.asm	/^     bd9:	eb 12                	jmp    bed <printf+0x246>$/;"	l
bd9	sh.asm	/^     bd9:	c3                   	retq   $/;"	l
bd9	usertests.asm	/^     bd9:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bd9	wc.asm	/^ bd9:	75 27                	jne    c02 <free+0x113>$/;"	l
bda	cat.asm	/^ bda:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
bda	grep.asm	/^ bda:	89 c7                	mov    %eax,%edi$/;"	l
bda	imshow.asm	/^ bda:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	kill.asm	/^ bda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bda	ln.asm	/^ bda:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bda	sh.asm	/^     bda:	55                   	push   %rbp$/;"	l
bdb	divide.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdb	mkdir.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	prettyprint.asm	/^     bdb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bdb	rm.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	sh.asm	/^     bdb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bdb	wc.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdc	grep.asm	/^ bdc:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
bdd	echo.asm	/^ bdd:	00 00 00 $/;"	l
bdd	kill.asm	/^ bdd:	89 c7                	mov    %eax,%edi$/;"	l
bdd	ln.asm	/^ bdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bde	imshow.asm	/^ bde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
bde	init.asm	/^ bde:	eb 36                	jmp    c16 <morecore+0x77>$/;"	l
bde	ls.asm	/^     bde:	00 00 00 $/;"	l
bde	mkdir.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	rm.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	sh.asm	/^     bde:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bde	stressfs.asm	/^ bde:	00 00 00 $/;"	l
bdf	divide.asm	/^ bdf:	48 8b 00             	mov    (%rax),%rax$/;"	l
bdf	kill.asm	/^ bdf:	48 b8 54 0a 00 00 00 	movabs $0xa54,%rax$/;"	l
bdf	wc.asm	/^ bdf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
be	grep.asm	/^  be:	00 00 00 $/;"	l
be	imshow.asm	/^  be:	00 00 00 $/;"	l
be	init.asm	/^  be:	00 00 00 $/;"	l
be	ln.asm	/^  be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
be	prettyprint.asm	/^      be:	00 00 00 $/;"	l
be	sh.asm	/^      be:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
be	wc.asm	/^  be:	00 00 00 $/;"	l
be0	echo.asm	/^ be0:	ff d0                	callq  *%rax$/;"	l
be0	init.asm	/^ be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
be0	usertests.asm	/^     be0:	00 00 00 $/;"	l
be1	cat.asm	/^ be1:	00 00 00 $/;"	l
be1	ln.asm	/^ be1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
be1	ls.asm	/^     be1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
be1	stressfs.asm	/^ be1:	ff d0                	callq  *%rax$/;"	l
be2	divide.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	echo.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	imshow.asm	/^ be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
be2	prettyprint.asm	/^     be2:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
be2	sh.asm	/^     be2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
be2	wc.asm	/^ be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be3	grep.asm	/^ be3:	00 00 00 $/;"	l
be3	stressfs.asm	/^ be3:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
be3	usertests.asm	/^     be3:	8b 08                	mov    (%rax),%ecx$/;"	l
be4	cat.asm	/^ be4:	48 8b 00             	mov    (%rax),%rax$/;"	l
be4	init.asm	/^ be4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
be5	ln.asm	/^ be5:	eb 4e                	jmp    c35 <malloc+0x148>$/;"	l
be5	mkdir.asm	/^ be5:	00 00 00 $/;"	l
be5	rm.asm	/^ be5:	00 00 00 $/;"	l
be5	usertests.asm	/^     be5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
be6	divide.asm	/^ be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be6	echo.asm	/^ be6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
be6	grep.asm	/^ be6:	ff d0                	callq  *%rax$/;"	l
be6	imshow.asm	/^ be6:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
be6	kill.asm	/^ be6:	00 00 00 $/;"	l
be6	prettyprint.asm	/^     be6:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
be6	sh.asm	/^     be6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
be6	wc.asm	/^ be6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
be7	cat.asm	/^ be7:	c9                   	leaveq $/;"	l
be7	ln.asm	/^ be7:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
be8	cat.asm	/^ be8:	c3                   	retq   $/;"	l
be8	grep.asm	/^ be8:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
be8	init.asm	/^ be8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be8	ls.asm	/^     be8:	eb 2b                	jmp    c15 <printf+0x298>$/;"	l
be8	mkdir.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be8	rm.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be9	cat.asm	/^ be9:	55                   	push   %rbp$/;"	l
be9	kill.asm	/^ be9:	ff d0                	callq  *%rax$/;"	l
be9	wc.asm	/^ be9:	01 c2                	add    %eax,%edx$/;"	l
bea	cat.asm	/^ bea:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bea	divide.asm	/^ bea:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bea	imshow.asm	/^ bea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bea	ls.asm	/^     bea:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bea	sh.asm	/^     bea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
bea	stressfs.asm	/^ bea:	00 00 00 $/;"	l
beb	echo.asm	/^ beb:	75 07                	jne    bf4 <malloc+0x130>$/;"	l
beb	kill.asm	/^ beb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
beb	wc.asm	/^ beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bec	init.asm	/^ bec:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bec	mkdir.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	rm.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	usertests.asm	/^     bec:	00 00 00 $/;"	l
bed	cat.asm	/^ bed:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bed	echo.asm	/^ bed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bed	prettyprint.asm	/^     bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bed	stressfs.asm	/^ bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bee	divide.asm	/^ bee:	76 c7                	jbe    bb7 <free+0x2b>$/;"	l
bee	imshow.asm	/^ bee:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
bee	ln.asm	/^ bee:	00 00 00 $/;"	l
bee	sh.asm	/^     bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bef	grep.asm	/^ bef:	01 $/;"	l
bef	init.asm	/^ bef:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bef	kill.asm	/^ bef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
bef	mkdir.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	rm.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	usertests.asm	/^     bef:	8b 00                	mov    (%rax),%eax$/;"	l
bef	wc.asm	/^ bef:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	kill.asm	/^  bf:	48 89 fe             	mov    %rdi,%rsi$/;"	l
bf	usertests.asm	/^      bf:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bf0	divide.asm	/^ bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf0	grep.asm	/^ bf0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bf0	prettyprint.asm	/^     bf0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bf0	stressfs.asm	/^ bf0:	c9                   	leaveq $/;"	l
bf1	cat.asm	/^ bf1:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bf1	ln.asm	/^ bf1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf1	ls.asm	/^     bf1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf1	stressfs.asm	/^ bf1:	c3                   	retq   $/;"	l
bf1	usertests.asm	/^     bf1:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
bf2	echo.asm	/^ bf2:	eb 18                	jmp    c0c <malloc+0x148>$/;"	l
bf2	init.asm	/^ bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf2	sh.asm	/^     bf2:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bf2	stressfs.asm	/^ bf2:	55                   	push   %rbp$/;"	l
bf2	wc.asm	/^ bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf3	mkdir.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	rm.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	stressfs.asm	/^ bf3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bf4	cat.asm	/^ bf4:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bf4	divide.asm	/^ bf4:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf4	echo.asm	/^ bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf4	kill.asm	/^ bf4:	75 07                	jne    bfd <malloc+0x130>$/;"	l
bf4	ln.asm	/^ bf4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bf4	ls.asm	/^     bf4:	0f be d0             	movsbl %al,%edx$/;"	l
bf4	usertests.asm	/^     bf4:	48 be d8 6b 00 00 00 	movabs $0x6bd8,%rsi$/;"	l
bf5	imshow.asm	/^ bf5:	00 00 00 $/;"	l
bf5	sh.asm	/^     bf5:	48 89 c7             	mov    %rax,%rdi$/;"	l
bf6	init.asm	/^ bf6:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf6	kill.asm	/^ bf6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf6	stressfs.asm	/^ bf6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bf6	wc.asm	/^ bf6:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bf7	cat.asm	/^ bf7:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
bf7	divide.asm	/^ bf7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bf7	grep.asm	/^ bf7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf7	ls.asm	/^     bf7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bf7	mkdir.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf7	prettyprint.asm	/^     bf7:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bf7	rm.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf8	echo.asm	/^ bf8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bf8	imshow.asm	/^ bf8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf8	ln.asm	/^ bf8:	75 23                	jne    c1d <malloc+0x130>$/;"	l
bf8	sh.asm	/^     bf8:	48 b8 e5 0e 00 00 00 	movabs $0xee5,%rax$/;"	l
bf9	mkdir.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	rm.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	wc.asm	/^ bf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfa	grep.asm	/^ bfa:	84 c0                	test   %al,%al$/;"	l
bfa	init.asm	/^ bfa:	48 89 c7             	mov    %rax,%rdi$/;"	l
bfa	ln.asm	/^ bfa:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bfa	stressfs.asm	/^ bfa:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bfb	cat.asm	/^ bfb:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
bfb	divide.asm	/^ bfb:	76 ba                	jbe    bb7 <free+0x2b>$/;"	l
bfb	imshow.asm	/^ bfb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bfb	kill.asm	/^ bfb:	eb 18                	jmp    c15 <malloc+0x148>$/;"	l
bfb	usertests.asm	/^     bfb:	00 00 00 $/;"	l
bfc	echo.asm	/^ bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfc	grep.asm	/^ bfc:	75 c7                	jne    bc5 <printf+0x26d>$/;"	l
bfd	divide.asm	/^ bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bfd	init.asm	/^ bfd:	48 b8 6d 0a 00 00 00 	movabs $0xa6d,%rax$/;"	l
bfd	kill.asm	/^ bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfd	ln.asm	/^ bfd:	89 c7                	mov    %eax,%edi$/;"	l
bfd	ls.asm	/^     bfd:	89 d6                	mov    %edx,%esi$/;"	l
bfd	stressfs.asm	/^ bfd:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bfd	wc.asm	/^ bfd:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bfe	grep.asm	/^ bfe:	e9 c8 00 00 00       	jmpq   ccb <printf+0x373>$/;"	l
bfe	prettyprint.asm	/^     bfe:	00 $/;"	l
bfe	usertests.asm	/^     bfe:	89 c7                	mov    %eax,%edi$/;"	l
bff	cat.asm	/^ bff:	83 c0 01             	add    $0x1,%eax$/;"	l
bff	imshow.asm	/^ bff:	eb 2f                	jmp    c30 <free+0x5a>$/;"	l
bff	ln.asm	/^ bff:	48 b8 74 0a 00 00 00 	movabs $0xa74,%rax$/;"	l
bff	ls.asm	/^     bff:	89 c7                	mov    %eax,%edi$/;"	l
bff	prettyprint.asm	/^     bff:	75 3e                	jne    c3f <printf+0x298>$/;"	l
bff	sh.asm	/^     bff:	00 00 00 $/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	imshow.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prettyprint.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bss_end_addr	bootmain.c	/^  uint64 bss_end_addr;$/;"	m	struct:mbheader	file:
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon9	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	divide.asm	/^   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
c	imshow.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prettyprint.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	cat.asm	/^  c0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c0	echo.asm	/^  c0:	90                   	nop$/;"	l
c0	forktest.asm	/^  c0:	eb 2b                	jmp    ed <forktest+0x5c>$/;"	l
c0	stressfs.asm	/^  c0:	01 d0                	add    %edx,%eax$/;"	l
c00	echo.asm	/^ c00:	48 8b 00             	mov    (%rax),%rax$/;"	l
c00	mkdir.asm	/^ c00:	00 00 00 $/;"	l
c00	rm.asm	/^ c00:	00 00 00 $/;"	l
c00	stressfs.asm	/^ c00:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c00	usertests.asm	/^     c00:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c00	wc.asm	/^ c00:	eb 0b                	jmp    c0d <free+0x11e>$/;"	l
c01	divide.asm	/^ c01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c01	imshow.asm	/^ c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c01	kill.asm	/^ c01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c01	ls.asm	/^     c01:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c01	prettyprint.asm	/^     c01:	48 b8 e1 13 00 00 00 	movabs $0x13e1,%rax$/;"	l
c02	cat.asm	/^ c02:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c02	sh.asm	/^     c02:	ff d0                	callq  *%rax$/;"	l
c02	wc.asm	/^ c02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c03	echo.asm	/^ c03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c03	grep.asm	/^ c03:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c03	mkdir.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c03	rm.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c04	divide.asm	/^ c04:	89 c0                	mov    %eax,%eax$/;"	l
c04	init.asm	/^ c04:	00 00 00 $/;"	l
c04	sh.asm	/^     c04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c04	stressfs.asm	/^ c04:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c05	cat.asm	/^ c05:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c05	imshow.asm	/^ c05:	48 8b 00             	mov    (%rax),%rax$/;"	l
c05	kill.asm	/^ c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c05	usertests.asm	/^     c05:	49 b8 d1 61 00 00 00 	movabs $0x61d1,%r8$/;"	l
c06	divide.asm	/^ c06:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c06	ln.asm	/^ c06:	00 00 00 $/;"	l
c06	mkdir.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	rm.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	wc.asm	/^ c06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c07	echo.asm	/^ c07:	e9 41 ff ff ff       	jmpq   b4d <malloc+0x89>$/;"	l
c07	init.asm	/^ c07:	ff d0                	callq  *%rax$/;"	l
c08	imshow.asm	/^ c08:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c08	ls.asm	/^     c08:	00 00 00 $/;"	l
c08	prettyprint.asm	/^     c08:	00 00 00 $/;"	l
c08	sh.asm	/^     c08:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
c08	stressfs.asm	/^ c08:	83 c0 01             	add    $0x1,%eax$/;"	l
c09	init.asm	/^ c09:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c09	kill.asm	/^ c09:	48 8b 00             	mov    (%rax),%rax$/;"	l
c09	ln.asm	/^ c09:	ff d0                	callq  *%rax$/;"	l
c0a	divide.asm	/^ c0a:	48 89 c2             	mov    %rax,%rdx$/;"	l
c0a	grep.asm	/^ c0a:	75 5d                	jne    c69 <printf+0x311>$/;"	l
c0a	mkdir.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	rm.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	wc.asm	/^ c0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c0b	ln.asm	/^ c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0b	ls.asm	/^     c0b:	ff d0                	callq  *%rax$/;"	l
c0b	prettyprint.asm	/^     c0b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
c0b	stressfs.asm	/^ c0b:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c0c	cat.asm	/^ c0c:	00 00 00 $/;"	l
c0c	echo.asm	/^ c0c:	c9                   	leaveq $/;"	l
c0c	grep.asm	/^ c0c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c0c	imshow.asm	/^ c0c:	77 17                	ja     c25 <free+0x4f>$/;"	l
c0c	kill.asm	/^ c0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0c	mkdir.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	rm.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	sh.asm	/^     c0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c0c	usertests.asm	/^     c0c:	00 00 00 $/;"	l
c0d	divide.asm	/^ c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0d	echo.asm	/^ c0d:	c3                   	retq   $/;"	l
c0d	ls.asm	/^     c0d:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c0d	wc.asm	/^ c0d:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c0e	imshow.asm	/^ c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0e	stressfs.asm	/^ c0e:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c0f	cat.asm	/^ c0f:	48 8b 00             	mov    (%rax),%rax$/;"	l
c0f	ln.asm	/^ c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c0f	mkdir.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	rm.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	usertests.asm	/^     c0f:	41 ff d0             	callq  *%r8$/;"	l
c1	echo.asm	/^  c1:	c9                   	leaveq $/;"	l
c1	grep.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	imshow.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	init.asm	/^  c1:	48 b8 53 05 00 00 00 	movabs $0x553,%rax$/;"	l
c1	ls.asm	/^      c1:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1	prettyprint.asm	/^      c1:	ff d2                	callq  *%rdx$/;"	l
c1	wc.asm	/^  c1:	89 c7                	mov    %eax,%edi$/;"	l
c1	zombie.asm	/^  c1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
c10	init.asm	/^ c10:	00 00 00 $/;"	l
c10	kill.asm	/^ c10:	e9 41 ff ff ff       	jmpq   b56 <malloc+0x89>$/;"	l
c10	sh.asm	/^     c10:	48 ba 05 1e 00 00 00 	movabs $0x1e05,%rdx$/;"	l
c11	divide.asm	/^ c11:	48 01 c2             	add    %rax,%rdx$/;"	l
c11	mkdir.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c11	rm.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c12	cat.asm	/^ c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c12	grep.asm	/^ c12:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c12	imshow.asm	/^ c12:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c12	prettyprint.asm	/^     c12:	eb 2b                	jmp    c3f <printf+0x298>$/;"	l
c12	usertests.asm	/^     c12:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c13	init.asm	/^ c13:	48 8b 00             	mov    (%rax),%rax$/;"	l
c14	divide.asm	/^ c14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c14	ln.asm	/^ c14:	75 07                	jne    c1d <malloc+0x130>$/;"	l
c14	ls.asm	/^     c14:	01 $/;"	l
c14	prettyprint.asm	/^     c14:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c14	wc.asm	/^ c14:	00 00 00 $/;"	l
c15	grep.asm	/^ c15:	73 23                	jae    c3a <printf+0x2e2>$/;"	l
c15	kill.asm	/^ c15:	c9                   	leaveq $/;"	l
c15	ls.asm	/^     c15:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c15	stressfs.asm	/^ c15:	00 00 00 $/;"	l
c16	cat.asm	/^ c16:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c16	imshow.asm	/^ c16:	77 2f                	ja     c47 <free+0x71>$/;"	l
c16	init.asm	/^ c16:	c9                   	leaveq $/;"	l
c16	kill.asm	/^ c16:	c3                   	retq   $/;"	l
c16	ln.asm	/^ c16:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c17	grep.asm	/^ c17:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c17	init.asm	/^ c17:	c3                   	retq   $/;"	l
c17	sh.asm	/^     c17:	00 00 00 $/;"	l
c17	wc.asm	/^ c17:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
c18	divide.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c18	imshow.asm	/^ c18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c18	init.asm	/^ c18:	55                   	push   %rbp$/;"	l
c18	mkdir.asm	/^ c18:	00 00 00 $/;"	l
c18	rm.asm	/^ c18:	00 00 00 $/;"	l
c18	stressfs.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c19	init.asm	/^ c19:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c19	usertests.asm	/^     c19:	00 00 00 $/;"	l
c1a	sh.asm	/^     c1a:	48 89 ce             	mov    %rcx,%rsi$/;"	l
c1b	cat.asm	/^ c1b:	75 4a                	jne    c67 <malloc+0x7e>$/;"	l
c1b	divide.asm	/^ c1b:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c1b	ln.asm	/^ c1b:	eb 18                	jmp    c35 <malloc+0x148>$/;"	l
c1b	mkdir.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	prettyprint.asm	/^     c1b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1b	rm.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	stressfs.asm	/^ c1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c1b	wc.asm	/^ c1b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c1c	imshow.asm	/^ c1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
c1c	init.asm	/^ c1c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c1c	ls.asm	/^     c1c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1c	usertests.asm	/^     c1c:	ff d0                	callq  *%rax$/;"	l
c1d	cat.asm	/^ c1d:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c1d	ln.asm	/^ c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c1d	mkdir.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	rm.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	sh.asm	/^     c1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1e	divide.asm	/^ c1e:	75 2d                	jne    c4d <free+0xc1>$/;"	l
c1e	grep.asm	/^ c1e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c1e	prettyprint.asm	/^     c1e:	0f be d0             	movsbl %al,%edx$/;"	l
c1e	usertests.asm	/^     c1e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
c1e	wc.asm	/^ c1e:	90                   	nop$/;"	l
c1f	imshow.asm	/^ c1f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c1f	ls.asm	/^     c1f:	84 c0                	test   %al,%al$/;"	l
c1f	stressfs.asm	/^ c1f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c1f	wc.asm	/^ c1f:	c9                   	leaveq $/;"	l
c2	echo.asm	/^  c2:	c3                   	retq   $/;"	l
c2	forktest.asm	/^  c2:	48 b8 03 05 00 00 00 	movabs $0x503,%rax$/;"	l
c2	kill.asm	/^  c2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
c2	ln.asm	/^  c2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
c2	stressfs.asm	/^  c2:	88 45 e8             	mov    %al,-0x18(%rbp)$/;"	l
c20	divide.asm	/^ c20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c20	init.asm	/^ c20:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c20	sh.asm	/^     c20:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
c20	wc.asm	/^ c20:	c3                   	retq   $/;"	l
c21	ln.asm	/^ c21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c21	ls.asm	/^     c21:	75 c7                	jne    bea <printf+0x26d>$/;"	l
c21	mkdir.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	prettyprint.asm	/^     c21:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c21	rm.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	wc.asm	/^ c21:	55                   	push   %rbp$/;"	l
c22	usertests.asm	/^     c22:	e9 f2 fe ff ff       	jmpq   b19 <writetest1+0x180>$/;"	l
c22	wc.asm	/^ c22:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c23	imshow.asm	/^ c23:	77 22                	ja     c47 <free+0x71>$/;"	l
c23	init.asm	/^ c23:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c23	ls.asm	/^     c23:	e9 c8 00 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
c24	cat.asm	/^ c24:	00 00 00 $/;"	l
c24	divide.asm	/^ c24:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c24	grep.asm	/^ c24:	89 d2                	mov    %edx,%edx$/;"	l
c24	stressfs.asm	/^ c24:	75 4a                	jne    c70 <malloc+0x7e>$/;"	l
c25	imshow.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	ln.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	wc.asm	/^ c25:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c26	grep.asm	/^ c26:	48 01 d0             	add    %rdx,%rax$/;"	l
c26	init.asm	/^ c26:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c26	mkdir.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	rm.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	stressfs.asm	/^ c26:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c27	cat.asm	/^ c27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c27	divide.asm	/^ c27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c27	prettyprint.asm	/^     c27:	89 d6                	mov    %edx,%esi$/;"	l
c27	sh.asm	/^     c27:	00 00 00 $/;"	l
c27	usertests.asm	/^     c27:	90                   	nop$/;"	l
c28	ls.asm	/^     c28:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c28	mkdir.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	rm.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	usertests.asm	/^     c28:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
c29	grep.asm	/^ c29:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c29	imshow.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	ln.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	prettyprint.asm	/^     c29:	89 c7                	mov    %eax,%edi$/;"	l
c29	wc.asm	/^ c29:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c2a	init.asm	/^ c2a:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c2a	sh.asm	/^     c2a:	ff d0                	callq  *%rax$/;"	l
c2b	cat.asm	/^ c2b:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c2b	divide.asm	/^ c2b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c2b	prettyprint.asm	/^     c2b:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
c2b	usertests.asm	/^     c2b:	89 c7                	mov    %eax,%edi$/;"	l
c2c	imshow.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	ln.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	sh.asm	/^     c2c:	85 c0                	test   %eax,%eax$/;"	l
c2c	wc.asm	/^ c2c:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
c2d	mkdir.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	rm.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	stressfs.asm	/^ c2d:	00 00 00 $/;"	l
c2d	usertests.asm	/^     c2d:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
c2e	divide.asm	/^ c2e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c2e	init.asm	/^ c2e:	83 c0 01             	add    $0x1,%eax$/;"	l
c2e	sh.asm	/^     c2e:	74 58                	je     c88 <parsepipe+0xae>$/;"	l
c2f	grep.asm	/^ c2f:	83 c2 08             	add    $0x8,%edx$/;"	l
c2f	ls.asm	/^     c2f:	75 5d                	jne    c8e <printf+0x311>$/;"	l
c2f	mkdir.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2f	rm.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3	divide.asm	/^  c3:	00 00 00 $/;"	l
c3	echo.asm	/^  c3:	55                   	push   %rbp$/;"	l
c3	grep.asm	/^  c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
c3	imshow.asm	/^  c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
c3	mkdir.asm	/^  c3:	00 00 00 $/;"	l
c3	prettyprint.asm	/^      c3:	48 be 18 12 00 00 00 	movabs $0x1218,%rsi$/;"	l
c3	rm.asm	/^  c3:	00 00 00 $/;"	l
c3	wc.asm	/^  c3:	48 b8 99 05 00 00 00 	movabs $0x599,%rax$/;"	l
c30	imshow.asm	/^ c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c30	ln.asm	/^ c30:	e9 41 ff ff ff       	jmpq   b76 <malloc+0x89>$/;"	l
c30	sh.asm	/^     c30:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
c30	stressfs.asm	/^ c30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	divide.asm	/^ c31:	01 c2                	add    %eax,%edx$/;"	l
c31	init.asm	/^ c31:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c31	ls.asm	/^     c31:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c32	cat.asm	/^ c32:	00 00 00 $/;"	l
c32	grep.asm	/^ c32:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c32	prettyprint.asm	/^     c32:	00 00 00 $/;"	l
c33	divide.asm	/^ c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c33	mkdir.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	rm.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	wc.asm	/^ c33:	77 07                	ja     c3c <morecore+0x1b>$/;"	l
c34	imshow.asm	/^ c34:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c34	init.asm	/^ c34:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c34	sh.asm	/^     c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c34	stressfs.asm	/^ c34:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c34	usertests.asm	/^     c34:	00 00 00 $/;"	l
c35	cat.asm	/^ c35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c35	ln.asm	/^ c35:	c9                   	leaveq $/;"	l
c35	prettyprint.asm	/^     c35:	ff d0                	callq  *%rax$/;"	l
c35	wc.asm	/^ c35:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c36	ln.asm	/^ c36:	c3                   	retq   $/;"	l
c37	divide.asm	/^ c37:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c37	ls.asm	/^     c37:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c37	mkdir.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	prettyprint.asm	/^     c37:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c37	rm.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	usertests.asm	/^     c37:	ff d0                	callq  *%rax$/;"	l
c38	grep.asm	/^ c38:	eb 12                	jmp    c4c <printf+0x2f4>$/;"	l
c38	imshow.asm	/^ c38:	76 c7                	jbe    c01 <free+0x2b>$/;"	l
c38	sh.asm	/^     c38:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
c39	cat.asm	/^ c39:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c39	usertests.asm	/^     c39:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
c3a	divide.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	grep.asm	/^ c3a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c3a	imshow.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	ls.asm	/^     c3a:	73 23                	jae    c5f <printf+0x2e2>$/;"	l
c3b	init.asm	/^ c3b:	00 00 00 $/;"	l
c3b	mkdir.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	rm.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	stressfs.asm	/^ c3b:	00 00 00 $/;"	l
c3c	cat.asm	/^ c3c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c3c	ls.asm	/^     c3c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c3c	wc.asm	/^ c3c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c3d	sh.asm	/^     c3d:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c3e	divide.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	imshow.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	init.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	mkdir.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	prettyprint.asm	/^     c3e:	01 $/;"	l
c3e	rm.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	stressfs.asm	/^ c3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c3f	prettyprint.asm	/^     c3f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c3f	wc.asm	/^ c3f:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c4	cat.asm	/^  c4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c4	echo.asm	/^  c4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c4	ls.asm	/^      c4:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
c40	usertests.asm	/^     c40:	00 00 00 $/;"	l
c41	divide.asm	/^ c41:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c41	grep.asm	/^ c41:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c41	imshow.asm	/^ c41:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c41	init.asm	/^ c41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c42	mkdir.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	rm.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	sh.asm	/^     c42:	48 89 c7             	mov    %rax,%rdi$/;"	l
c42	stressfs.asm	/^ c42:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c42	wc.asm	/^ c42:	89 c7                	mov    %eax,%edi$/;"	l
c43	cat.asm	/^ c43:	00 00 00 $/;"	l
c43	ls.asm	/^     c43:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c43	usertests.asm	/^     c43:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
c44	divide.asm	/^ c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c44	wc.asm	/^ c44:	48 b8 25 06 00 00 00 	movabs $0x625,%rax$/;"	l
c45	grep.asm	/^ c45:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c45	imshow.asm	/^ c45:	76 ba                	jbe    c01 <free+0x2b>$/;"	l
c45	init.asm	/^ c45:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c45	sh.asm	/^     c45:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
c45	stressfs.asm	/^ c45:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c46	cat.asm	/^ c46:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c46	prettyprint.asm	/^     c46:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c47	imshow.asm	/^ c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c47	mkdir.asm	/^ c47:	c9                   	leaveq $/;"	l
c47	rm.asm	/^ c47:	c9                   	leaveq $/;"	l
c48	divide.asm	/^ c48:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c48	mkdir.asm	/^ c48:	c3                   	retq   $/;"	l
c48	rm.asm	/^ c48:	c3                   	retq   $/;"	l
c49	cat.asm	/^ c49:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c49	ls.asm	/^     c49:	89 d2                	mov    %edx,%edx$/;"	l
c49	prettyprint.asm	/^     c49:	84 c0                	test   %al,%al$/;"	l
c4a	init.asm	/^ c4a:	75 4a                	jne    c96 <malloc+0x7e>$/;"	l
c4a	usertests.asm	/^     c4a:	00 00 00 $/;"	l
c4b	divide.asm	/^ c4b:	eb 0e                	jmp    c5b <free+0xcf>$/;"	l
c4b	imshow.asm	/^ c4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c4b	ls.asm	/^     c4b:	48 01 d0             	add    %rdx,%rax$/;"	l
c4b	prettyprint.asm	/^     c4b:	75 c7                	jne    c14 <printf+0x26d>$/;"	l
c4b	wc.asm	/^ c4b:	00 00 00 $/;"	l
c4c	grep.asm	/^ c4c:	8b 00                	mov    (%rax),%eax$/;"	l
c4c	init.asm	/^ c4c:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c4c	sh.asm	/^     c4c:	00 00 00 $/;"	l
c4c	stressfs.asm	/^ c4c:	00 00 00 $/;"	l
c4d	divide.asm	/^ c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c4d	prettyprint.asm	/^     c4d:	e9 c8 00 00 00       	jmpq   d1a <printf+0x373>$/;"	l
c4d	usertests.asm	/^     c4d:	ff d0                	callq  *%rax$/;"	l
c4e	grep.asm	/^ c4e:	0f be d0             	movsbl %al,%edx$/;"	l
c4e	imshow.asm	/^ c4e:	89 c0                	mov    %eax,%eax$/;"	l
c4e	ls.asm	/^     c4e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c4e	wc.asm	/^ c4e:	ff d0                	callq  *%rax$/;"	l
c4f	sh.asm	/^     c4f:	ff d0                	callq  *%rax$/;"	l
c4f	stressfs.asm	/^ c4f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c4f	usertests.asm	/^     c4f:	85 c0                	test   %eax,%eax$/;"	l
c5	ln.asm	/^  c5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c5	sh.asm	/^      c5:	00 00 00 $/;"	l
c5	stressfs.asm	/^  c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
c50	cat.asm	/^ c50:	00 00 00 $/;"	l
c50	imshow.asm	/^ c50:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c50	wc.asm	/^ c50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c51	divide.asm	/^ c51:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c51	grep.asm	/^ c51:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c51	sh.asm	/^     c51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
c51	usertests.asm	/^     c51:	79 35                	jns    c88 <writetest1+0x2ef>$/;"	l
c52	prettyprint.asm	/^     c52:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c52	stressfs.asm	/^ c52:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c53	cat.asm	/^ c53:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c53	init.asm	/^ c53:	00 00 00 $/;"	l
c53	usertests.asm	/^     c53:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c54	divide.asm	/^ c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c54	imshow.asm	/^ c54:	48 89 c2             	mov    %rax,%rdx$/;"	l
c54	ls.asm	/^     c54:	83 c2 08             	add    $0x8,%edx$/;"	l
c54	wc.asm	/^ c54:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c55	sh.asm	/^     c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c56	cat.asm	/^ c56:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c56	init.asm	/^ c56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c57	grep.asm	/^ c57:	89 d6                	mov    %edx,%esi$/;"	l
c57	imshow.asm	/^ c57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c57	ls.asm	/^     c57:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c58	divide.asm	/^ c58:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c59	grep.asm	/^ c59:	89 c7                	mov    %eax,%edi$/;"	l
c59	prettyprint.asm	/^     c59:	75 5d                	jne    cb8 <printf+0x311>$/;"	l
c59	sh.asm	/^     c59:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c59	stressfs.asm	/^ c59:	00 00 00 $/;"	l
c59	wc.asm	/^ c59:	75 07                	jne    c62 <morecore+0x41>$/;"	l
c5a	init.asm	/^ c5a:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c5a	usertests.asm	/^     c5a:	00 00 00 $/;"	l
c5b	divide.asm	/^ c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5b	grep.asm	/^ c5b:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c5b	imshow.asm	/^ c5b:	48 01 c2             	add    %rax,%rdx$/;"	l
c5b	prettyprint.asm	/^     c5b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c5b	wc.asm	/^ c5b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c5c	sh.asm	/^     c5c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c5c	stressfs.asm	/^ c5c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c5d	cat.asm	/^ c5d:	00 00 00 $/;"	l
c5d	ls.asm	/^     c5d:	eb 12                	jmp    c71 <printf+0x2f4>$/;"	l
c5d	usertests.asm	/^     c5d:	8b 00                	mov    (%rax),%eax$/;"	l
c5e	imshow.asm	/^ c5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5f	divide.asm	/^ c5f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c5f	ls.asm	/^     c5f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c5f	sh.asm	/^     c5f:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
c5f	stressfs.asm	/^ c5f:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c5f	usertests.asm	/^     c5f:	48 be f8 6b 00 00 00 	movabs $0x6bf8,%rsi$/;"	l
c6	divide.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	kill.asm	/^  c6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c6	mkdir.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	rm.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	usertests.asm	/^      c6:	00 00 00 $/;"	l
c6	zombie.asm	/^  c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c60	cat.asm	/^ c60:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c60	wc.asm	/^ c60:	eb 36                	jmp    c98 <morecore+0x77>$/;"	l
c61	init.asm	/^ c61:	00 00 00 $/;"	l
c61	prettyprint.asm	/^     c61:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c62	divide.asm	/^ c62:	89 c0                	mov    %eax,%eax$/;"	l
c62	grep.asm	/^ c62:	00 00 00 $/;"	l
c62	imshow.asm	/^ c62:	48 8b 00             	mov    (%rax),%rax$/;"	l
c62	wc.asm	/^ c62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c64	divide.asm	/^ c64:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c64	init.asm	/^ c64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c64	prettyprint.asm	/^     c64:	73 23                	jae    c89 <printf+0x2e2>$/;"	l
c65	grep.asm	/^ c65:	ff d0                	callq  *%rax$/;"	l
c65	imshow.asm	/^ c65:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c66	ls.asm	/^     c66:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c66	prettyprint.asm	/^     c66:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c66	sh.asm	/^     c66:	00 00 00 $/;"	l
c66	stressfs.asm	/^ c66:	00 00 00 $/;"	l
c66	usertests.asm	/^     c66:	00 00 00 $/;"	l
c66	wc.asm	/^ c66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c67	cat.asm	/^ c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c67	grep.asm	/^ c67:	eb 62                	jmp    ccb <printf+0x373>$/;"	l
c68	divide.asm	/^ c68:	48 89 c2             	mov    %rax,%rdx$/;"	l
c68	imshow.asm	/^ c68:	75 2d                	jne    c97 <free+0xc1>$/;"	l
c68	init.asm	/^ c68:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c69	grep.asm	/^ c69:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c69	sh.asm	/^     c69:	ff d0                	callq  *%rax$/;"	l
c69	stressfs.asm	/^ c69:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c69	usertests.asm	/^     c69:	89 c7                	mov    %eax,%edi$/;"	l
c6a	imshow.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6a	ls.asm	/^     c6a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c6a	wc.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6b	cat.asm	/^ c6b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c6b	divide.asm	/^ c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6b	init.asm	/^ c6b:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c6b	sh.asm	/^     c6b:	48 89 c2             	mov    %rax,%rdx$/;"	l
c6b	usertests.asm	/^     c6b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c6d	prettyprint.asm	/^     c6d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c6e	cat.asm	/^ c6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c6e	imshow.asm	/^ c6e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c6e	sh.asm	/^     c6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6e	wc.asm	/^ c6e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c6f	divide.asm	/^ c6f:	48 01 d0             	add    %rdx,%rax$/;"	l
c7	cat.asm	/^  c7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
c7	echo.asm	/^  c7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c7	grep.asm	/^  c7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
c70	grep.asm	/^ c70:	75 21                	jne    c93 <printf+0x33b>$/;"	l
c70	stressfs.asm	/^ c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c70	usertests.asm	/^     c70:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
c71	imshow.asm	/^ c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c71	ls.asm	/^     c71:	8b 00                	mov    (%rax),%eax$/;"	l
c71	wc.asm	/^ c71:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c72	cat.asm	/^ c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c72	divide.asm	/^ c72:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c72	grep.asm	/^ c72:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c72	init.asm	/^ c72:	00 00 00 $/;"	l
c72	sh.asm	/^     c72:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c73	ls.asm	/^     c73:	0f be d0             	movsbl %al,%edx$/;"	l
c73	prettyprint.asm	/^     c73:	89 d2                	mov    %edx,%edx$/;"	l
c74	stressfs.asm	/^ c74:	48 8b 00             	mov    (%rax),%rax$/;"	l
c74	wc.asm	/^ c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c75	imshow.asm	/^ c75:	48 8b 00             	mov    (%rax),%rax$/;"	l
c75	init.asm	/^ c75:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c75	prettyprint.asm	/^     c75:	48 01 d0             	add    %rdx,%rax$/;"	l
c75	sh.asm	/^     c75:	48 89 c7             	mov    %rax,%rdi$/;"	l
c76	cat.asm	/^ c76:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c76	divide.asm	/^ c76:	75 27                	jne    c9f <free+0x113>$/;"	l
c76	ls.asm	/^     c76:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c77	stressfs.asm	/^ c77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c77	usertests.asm	/^     c77:	00 00 00 $/;"	l
c78	divide.asm	/^ c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c78	grep.asm	/^ c78:	0f be d0             	movsbl %al,%edx$/;"	l
c78	imshow.asm	/^ c78:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c78	init.asm	/^ c78:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c78	prettyprint.asm	/^     c78:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c78	sh.asm	/^     c78:	48 b8 7c 06 00 00 00 	movabs $0x67c,%rax$/;"	l
c78	wc.asm	/^ c78:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c79	cat.asm	/^ c79:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c7a	usertests.asm	/^     c7a:	ff d2                	callq  *%rdx$/;"	l
c7b	grep.asm	/^ c7b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c7b	imshow.asm	/^ c7b:	01 c2                	add    %eax,%edx$/;"	l
c7b	stressfs.asm	/^ c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7c	cat.asm	/^ c7c:	72 65                	jb     ce3 <malloc+0xfa>$/;"	l
c7c	divide.asm	/^ c7c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c7c	ls.asm	/^     c7c:	89 d6                	mov    %edx,%esi$/;"	l
c7c	usertests.asm	/^     c7c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c7c	wc.asm	/^ c7c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c7d	imshow.asm	/^ c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7e	cat.asm	/^ c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7e	ls.asm	/^     c7e:	89 c7                	mov    %eax,%edi$/;"	l
c7e	prettyprint.asm	/^     c7e:	83 c2 08             	add    $0x8,%edx$/;"	l
c7f	divide.asm	/^ c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7f	init.asm	/^ c7f:	00 00 00 $/;"	l
c7f	sh.asm	/^     c7f:	00 00 00 $/;"	l
c7f	stressfs.asm	/^ c7f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c7f	wc.asm	/^ c7f:	48 b8 ef 0a 00 00 00 	movabs $0xaef,%rax$/;"	l
c8	divide.asm	/^  c8:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
c8	init.asm	/^  c8:	00 00 00 $/;"	l
c8	ln.asm	/^  c8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
c8	mkdir.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	rm.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	sh.asm	/^      c8:	ff d1                	callq  *%rcx$/;"	l
c80	ls.asm	/^     c80:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c81	grep.asm	/^ c81:	89 d6                	mov    %edx,%esi$/;"	l
c81	imshow.asm	/^ c81:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c81	prettyprint.asm	/^     c81:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c82	cat.asm	/^ c82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c82	init.asm	/^ c82:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c82	sh.asm	/^     c82:	ff d0                	callq  *%rax$/;"	l
c82	stressfs.asm	/^ c82:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c83	divide.asm	/^ c83:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c83	grep.asm	/^ c83:	89 c7                	mov    %eax,%edi$/;"	l
c83	usertests.asm	/^     c83:	00 00 00 $/;"	l
c84	imshow.asm	/^ c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c84	sh.asm	/^     c84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c85	cat.asm	/^ c85:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c85	grep.asm	/^ c85:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c85	init.asm	/^ c85:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c85	stressfs.asm	/^ c85:	72 65                	jb     cec <malloc+0xfa>$/;"	l
c86	divide.asm	/^ c86:	01 c2                	add    %eax,%edx$/;"	l
c86	usertests.asm	/^     c86:	ff d0                	callq  *%rax$/;"	l
c86	wc.asm	/^ c86:	00 00 00 $/;"	l
c87	ls.asm	/^     c87:	00 00 00 $/;"	l
c87	prettyprint.asm	/^     c87:	eb 12                	jmp    c9b <printf+0x2f4>$/;"	l
c87	stressfs.asm	/^ c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	cat.asm	/^ c88:	75 10                	jne    c9a <malloc+0xb1>$/;"	l
c88	divide.asm	/^ c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	imshow.asm	/^ c88:	48 8b 00             	mov    (%rax),%rax$/;"	l
c88	sh.asm	/^     c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	usertests.asm	/^     c88:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c89	prettyprint.asm	/^     c89:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c89	wc.asm	/^ c89:	ff d0                	callq  *%rax$/;"	l
c8a	cat.asm	/^ c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c8a	ls.asm	/^     c8a:	ff d0                	callq  *%rax$/;"	l
c8b	imshow.asm	/^ c8b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8b	stressfs.asm	/^ c8b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c8b	wc.asm	/^ c8b:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c8c	divide.asm	/^ c8c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c8c	grep.asm	/^ c8c:	00 00 00 $/;"	l
c8c	init.asm	/^ c8c:	00 00 00 $/;"	l
c8c	ls.asm	/^     c8c:	eb 62                	jmp    cf0 <printf+0x373>$/;"	l
c8c	sh.asm	/^     c8c:	c9                   	leaveq $/;"	l
c8d	sh.asm	/^     c8d:	c3                   	retq   $/;"	l
c8e	cat.asm	/^ c8e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8e	imshow.asm	/^ c8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8e	ls.asm	/^     c8e:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c8e	sh.asm	/^     c8e:	55                   	push   %rbp$/;"	l
c8e	stressfs.asm	/^ c8e:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c8f	divide.asm	/^ c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8f	grep.asm	/^ c8f:	ff d0                	callq  *%rax$/;"	l
c8f	init.asm	/^ c8f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c8f	sh.asm	/^     c8f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c8f	usertests.asm	/^     c8f:	00 00 00 $/;"	l
c9	forktest.asm	/^  c9:	00 00 00 $/;"	l
c9	kill.asm	/^  c9:	90                   	nop$/;"	l
c9	mkdir.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	rm.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	stressfs.asm	/^  c9:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
c9	usertests.asm	/^      c9:	ff d0                	callq  *%rax$/;"	l
c90	prettyprint.asm	/^     c90:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c91	cat.asm	/^ c91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c91	grep.asm	/^ c91:	eb 38                	jmp    ccb <printf+0x373>$/;"	l
c91	stressfs.asm	/^ c91:	75 10                	jne    ca3 <malloc+0xb1>$/;"	l
c92	imshow.asm	/^ c92:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c92	sh.asm	/^     c92:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
c92	usertests.asm	/^     c92:	8b 00                	mov    (%rax),%eax$/;"	l
c92	wc.asm	/^ c92:	00 00 00 $/;"	l
c93	divide.asm	/^ c93:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c93	grep.asm	/^ c93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c93	stressfs.asm	/^ c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c94	prettyprint.asm	/^     c94:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c94	usertests.asm	/^     c94:	48 be 0b 6c 00 00 00 	movabs $0x6c0b,%rsi$/;"	l
c95	cat.asm	/^ c95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c95	imshow.asm	/^ c95:	eb 0e                	jmp    ca5 <free+0xcf>$/;"	l
c95	ls.asm	/^     c95:	75 21                	jne    cb8 <printf+0x33b>$/;"	l
c95	wc.asm	/^ c95:	48 8b 00             	mov    (%rax),%rax$/;"	l
c96	divide.asm	/^ c96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c96	init.asm	/^ c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c96	sh.asm	/^     c96:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
c97	imshow.asm	/^ c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c97	ls.asm	/^     c97:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c97	stressfs.asm	/^ c97:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c98	cat.asm	/^ c98:	eb 2e                	jmp    cc8 <malloc+0xdf>$/;"	l
c98	wc.asm	/^ c98:	c9                   	leaveq $/;"	l
c99	grep.asm	/^ c99:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
c99	wc.asm	/^ c99:	c3                   	retq   $/;"	l
c9a	cat.asm	/^ c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c9a	divide.asm	/^ c9a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9a	init.asm	/^ c9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
c9a	sh.asm	/^     c9a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
c9a	stressfs.asm	/^ c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9a	wc.asm	/^ c9a:	55                   	push   %rbp$/;"	l
c9b	imshow.asm	/^ c9b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c9b	prettyprint.asm	/^     c9b:	8b 00                	mov    (%rax),%eax$/;"	l
c9b	usertests.asm	/^     c9b:	00 00 00 $/;"	l
c9b	wc.asm	/^ c9b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9d	divide.asm	/^ c9d:	eb 0b                	jmp    caa <free+0x11e>$/;"	l
c9d	init.asm	/^ c9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c9d	ls.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9d	prettyprint.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9e	cat.asm	/^ c9e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c9e	grep.asm	/^ c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	imshow.asm	/^ c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9e	sh.asm	/^     c9e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
c9e	stressfs.asm	/^ c9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9e	usertests.asm	/^     c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	wc.asm	/^ c9e:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c9f	divide.asm	/^ c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca	imshow.asm	/^  ca:	e9 a6 00 00 00       	jmpq   175 <main+0x175>$/;"	l
ca	kill.asm	/^  ca:	c9                   	leaveq $/;"	l
ca	prettyprint.asm	/^      ca:	00 00 00 $/;"	l
ca	sh.asm	/^      ca:	e9 62 02 00 00       	jmpq   331 <runcmd+0x331>$/;"	l
ca	wc.asm	/^  ca:	00 00 00 $/;"	l
ca	zombie.asm	/^  ca:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ca0	grep.asm	/^ ca0:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
ca0	ls.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	prettyprint.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	usertests.asm	/^     ca0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ca1	cat.asm	/^ ca1:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ca1	init.asm	/^ ca1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca1	stressfs.asm	/^ ca1:	eb 2e                	jmp    cd1 <malloc+0xdf>$/;"	l
ca2	imshow.asm	/^ ca2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca2	sh.asm	/^     ca2:	e9 f8 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
ca2	wc.asm	/^ ca2:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ca3	divide.asm	/^ ca3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ca3	stressfs.asm	/^ ca3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca4	cat.asm	/^ ca4:	89 c2                	mov    %eax,%edx$/;"	l
ca5	imshow.asm	/^ ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca5	init.asm	/^ ca5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ca5	usertests.asm	/^     ca5:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
ca5	wc.asm	/^ ca5:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ca6	cat.asm	/^ ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca6	ls.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca6	prettyprint.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca7	divide.asm	/^ ca7:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca7	grep.asm	/^ ca7:	00 00 00 $/;"	l
ca7	sh.asm	/^     ca7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
ca7	stressfs.asm	/^ ca7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ca8	init.asm	/^ ca8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ca8	ls.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	prettyprint.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	wc.asm	/^ ca8:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ca9	imshow.asm	/^ ca9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
caa	cat.asm	/^ caa:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
caa	divide.asm	/^ caa:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
caa	grep.asm	/^ caa:	ff d0                	callq  *%rax$/;"	l
caa	ls.asm	/^     caa:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
caa	prettyprint.asm	/^     caa:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
caa	stressfs.asm	/^ caa:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cab	init.asm	/^ cab:	72 65                	jb     d12 <malloc+0xfa>$/;"	l
cab	sh.asm	/^     cab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cac	grep.asm	/^ cac:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cac	imshow.asm	/^ cac:	89 c0                	mov    %eax,%eax$/;"	l
cac	usertests.asm	/^     cac:	00 00 00 $/;"	l
cac	wc.asm	/^ cac:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
cad	cat.asm	/^ cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cad	init.asm	/^ cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cad	stressfs.asm	/^ cad:	89 c2                	mov    %eax,%edx$/;"	l
cae	imshow.asm	/^ cae:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
caf	sh.asm	/^     caf:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
caf	stressfs.asm	/^ caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
caf	usertests.asm	/^     caf:	ff d2                	callq  *%rdx$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	cat.asm	/^  cb:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
cb	divide.asm	/^  cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
cb	echo.asm	/^  cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
cb	init.asm	/^  cb:	ff d0                	callq  *%rax$/;"	l
cb	kill.asm	/^  cb:	c3                   	retq   $/;"	l
cb	ls.asm	/^      cb:	00 00 00 $/;"	l
cb	usertests.asm	/^      cb:	48 bf bd 68 00 00 00 	movabs $0x68bd,%rdi$/;"	l
cb0	wc.asm	/^ cb0:	83 c0 01             	add    $0x1,%eax$/;"	l
cb1	cat.asm	/^ cb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb1	divide.asm	/^ cb1:	00 00 00 $/;"	l
cb1	init.asm	/^ cb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb1	ls.asm	/^     cb1:	00 00 00 $/;"	l
cb1	prettyprint.asm	/^     cb1:	00 00 00 $/;"	l
cb1	usertests.asm	/^     cb1:	90                   	nop$/;"	l
cb2	grep.asm	/^ cb2:	0f be d0             	movsbl %al,%edx$/;"	l
cb2	imshow.asm	/^ cb2:	48 89 c2             	mov    %rax,%rdx$/;"	l
cb2	usertests.asm	/^     cb2:	c9                   	leaveq $/;"	l
cb3	stressfs.asm	/^ cb3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cb3	usertests.asm	/^     cb3:	c3                   	retq   $/;"	l
cb3	wc.asm	/^ cb3:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
cb4	cat.asm	/^ cb4:	89 c0                	mov    %eax,%eax$/;"	l
cb4	divide.asm	/^ cb4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cb4	init.asm	/^ cb4:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cb4	ls.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	prettyprint.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	sh.asm	/^     cb4:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
cb4	usertests.asm	/^     cb4:	55                   	push   %rbp$/;"	l
cb5	grep.asm	/^ cb5:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb5	imshow.asm	/^ cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb5	usertests.asm	/^     cb5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cb6	cat.asm	/^ cb6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cb6	ls.asm	/^     cb6:	eb 38                	jmp    cf0 <printf+0x373>$/;"	l
cb6	prettyprint.asm	/^     cb6:	eb 62                	jmp    d1a <printf+0x373>$/;"	l
cb6	stressfs.asm	/^ cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb6	wc.asm	/^ cb6:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cb7	init.asm	/^ cb7:	75 10                	jne    cc9 <malloc+0xb1>$/;"	l
cb8	divide.asm	/^ cb8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb8	ls.asm	/^     cb8:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb8	prettyprint.asm	/^     cb8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
cb8	usertests.asm	/^     cb8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cb9	imshow.asm	/^ cb9:	48 01 d0             	add    %rdx,%rax$/;"	l
cb9	init.asm	/^ cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb9	sh.asm	/^     cb9:	48 89 c7             	mov    %rax,%rdi$/;"	l
cba	cat.asm	/^ cba:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cba	stressfs.asm	/^ cba:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cbb	divide.asm	/^ cbb:	90                   	nop$/;"	l
cbb	grep.asm	/^ cbb:	89 d6                	mov    %edx,%esi$/;"	l
cbc	divide.asm	/^ cbc:	c9                   	leaveq $/;"	l
cbc	imshow.asm	/^ cbc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
cbc	sh.asm	/^     cbc:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cbc	usertests.asm	/^     cbc:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
cbd	divide.asm	/^ cbd:	c3                   	retq   $/;"	l
cbd	grep.asm	/^ cbd:	89 c7                	mov    %eax,%edi$/;"	l
cbd	init.asm	/^ cbd:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cbd	stressfs.asm	/^ cbd:	89 c0                	mov    %eax,%eax$/;"	l
cbd	wc.asm	/^ cbd:	00 00 00 $/;"	l
cbe	cat.asm	/^ cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cbe	divide.asm	/^ cbe:	55                   	push   %rbp$/;"	l
cbe	ls.asm	/^     cbe:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
cbf	divide.asm	/^ cbf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cbf	grep.asm	/^ cbf:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
cbf	prettyprint.asm	/^     cbf:	75 21                	jne    ce2 <printf+0x33b>$/;"	l
cbf	stressfs.asm	/^ cbf:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	ff d0                	callq  *%rax$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	0f 85 72 ff ff ff    	jne    44 <grep+0x44>$/;"	l
cc	imshow.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	55                   	push   %rbp$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	prettyprint.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	imshow.asm	/^ cc0:	75 27                	jne    ce9 <free+0x113>$/;"	l
cc0	init.asm	/^ cc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc0	wc.asm	/^ cc0:	48 8b 00             	mov    (%rax),%rax$/;"	l
cc1	prettyprint.asm	/^     cc1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cc2	cat.asm	/^ cc2:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cc2	divide.asm	/^ cc2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
cc2	imshow.asm	/^ cc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc3	ls.asm	/^     cc3:	89 c7                	mov    %eax,%edi$/;"	l
cc3	sh.asm	/^     cc3:	00 00 00 $/;"	l
cc3	stressfs.asm	/^ cc3:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cc3	usertests.asm	/^     cc3:	00 00 00 $/;"	l
cc3	wc.asm	/^ cc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cc4	init.asm	/^ cc4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cc5	cat.asm	/^ cc5:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cc5	ls.asm	/^     cc5:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
cc6	divide.asm	/^ cc6:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
cc6	grep.asm	/^ cc6:	00 00 00 $/;"	l
cc6	imshow.asm	/^ cc6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
cc6	sh.asm	/^     cc6:	ff d0                	callq  *%rax$/;"	l
cc6	usertests.asm	/^     cc6:	8b 00                	mov    (%rax),%eax$/;"	l
cc7	init.asm	/^ cc7:	eb 2e                	jmp    cf7 <malloc+0xdf>$/;"	l
cc7	prettyprint.asm	/^     cc7:	0f be d0             	movsbl %al,%edx$/;"	l
cc7	stressfs.asm	/^ cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc7	wc.asm	/^ cc7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
cc8	cat.asm	/^ cc8:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
cc8	sh.asm	/^     cc8:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
cc8	usertests.asm	/^     cc8:	48 be 20 6c 00 00 00 	movabs $0x6c20,%rsi$/;"	l
cc9	divide.asm	/^ cc9:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
cc9	grep.asm	/^ cc9:	ff d0                	callq  *%rax$/;"	l
cc9	imshow.asm	/^ cc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc9	init.asm	/^ cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cca	prettyprint.asm	/^     cca:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ccb	grep.asm	/^ ccb:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ccb	sh.asm	/^     ccb:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx$/;"	l
ccb	stressfs.asm	/^ ccb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ccc	ls.asm	/^     ccc:	00 00 00 $/;"	l
ccc	wc.asm	/^ ccc:	75 4a                	jne    d18 <malloc+0x7e>$/;"	l
ccd	imshow.asm	/^ ccd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ccd	init.asm	/^ ccd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cce	stressfs.asm	/^ cce:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cce	wc.asm	/^ cce:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
ccf	cat.asm	/^ ccf:	00 00 00 $/;"	l
ccf	ls.asm	/^     ccf:	ff d0                	callq  *%rax$/;"	l
ccf	sh.asm	/^     ccf:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ccf	usertests.asm	/^     ccf:	00 00 00 $/;"	l
cd	init.asm	/^  cd:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
cd	kill.asm	/^  cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cd	prettyprint.asm	/^      cd:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
cd	wc.asm	/^  cd:	ff d0                	callq  *%rax$/;"	l
cd	zombie.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd0	divide.asm	/^ cd0:	77 07                	ja     cd9 <morecore+0x1b>$/;"	l
cd0	imshow.asm	/^ cd0:	01 c2                	add    %eax,%edx$/;"	l
cd0	init.asm	/^ cd0:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cd0	prettyprint.asm	/^     cd0:	89 d6                	mov    %edx,%esi$/;"	l
cd1	ls.asm	/^     cd1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cd1	stressfs.asm	/^ cd1:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cd2	cat.asm	/^ cd2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cd2	divide.asm	/^ cd2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
cd2	grep.asm	/^ cd2:	00 00 00 $/;"	l
cd2	imshow.asm	/^ cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd2	prettyprint.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd2	usertests.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd3	init.asm	/^ cd3:	89 c2                	mov    %eax,%edx$/;"	l
cd3	sh.asm	/^     cd3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
cd4	prettyprint.asm	/^     cd4:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cd4	usertests.asm	/^     cd4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cd5	grep.asm	/^ cd5:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cd5	init.asm	/^ cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd5	wc.asm	/^ cd5:	00 00 00 $/;"	l
cd6	cat.asm	/^ cd6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cd6	imshow.asm	/^ cd6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cd7	ls.asm	/^     cd7:	0f be d0             	movsbl %al,%edx$/;"	l
cd7	sh.asm	/^     cd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cd8	stressfs.asm	/^ cd8:	00 00 00 $/;"	l
cd8	wc.asm	/^ cd8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cd9	cat.asm	/^ cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd9	divide.asm	/^ cd9:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cd9	imshow.asm	/^ cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cd9	init.asm	/^ cd9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cd9	usertests.asm	/^     cd9:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
cda	ls.asm	/^     cda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cdb	prettyprint.asm	/^     cdb:	00 00 00 $/;"	l
cdb	sh.asm	/^     cdb:	48 89 c7             	mov    %rax,%rdi$/;"	l
cdb	stressfs.asm	/^ cdb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cdc	divide.asm	/^ cdc:	c1 e0 04             	shl    $0x4,%eax$/;"	l
cdc	grep.asm	/^ cdc:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
cdc	init.asm	/^ cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cdc	wc.asm	/^ cdc:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cdd	cat.asm	/^ cdd:	48 83 c0 10          	add    $0x10,%rax$/;"	l
cdd	imshow.asm	/^ cdd:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cde	prettyprint.asm	/^     cde:	ff d0                	callq  *%rax$/;"	l
cde	sh.asm	/^     cde:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cdf	divide.asm	/^ cdf:	89 c7                	mov    %eax,%edi$/;"	l
cdf	stressfs.asm	/^ cdf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce	forktest.asm	/^  ce:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ce	ls.asm	/^      ce:	ff d0                	callq  *%rax$/;"	l
ce	stressfs.asm	/^  ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ce0	imshow.asm	/^ ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce0	init.asm	/^ ce0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ce0	ls.asm	/^     ce0:	89 d6                	mov    %edx,%esi$/;"	l
ce0	prettyprint.asm	/^     ce0:	eb 38                	jmp    d1a <printf+0x373>$/;"	l
ce0	usertests.asm	/^     ce0:	00 00 00 $/;"	l
ce1	cat.asm	/^ ce1:	eb 4e                	jmp    d31 <malloc+0x148>$/;"	l
ce1	divide.asm	/^ ce1:	48 b8 cc 06 00 00 00 	movabs $0x6cc,%rax$/;"	l
ce2	grep.asm	/^ ce2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ce2	ls.asm	/^     ce2:	89 c7                	mov    %eax,%edi$/;"	l
ce2	prettyprint.asm	/^     ce2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ce2	stressfs.asm	/^ ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce3	cat.asm	/^ ce3:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
ce3	init.asm	/^ ce3:	89 c0                	mov    %eax,%eax$/;"	l
ce3	usertests.asm	/^     ce3:	ff d2                	callq  *%rdx$/;"	l
ce3	wc.asm	/^ ce3:	00 00 00 $/;"	l
ce4	imshow.asm	/^ ce4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce4	ls.asm	/^     ce4:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
ce5	grep.asm	/^ ce5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ce5	init.asm	/^ ce5:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ce5	sh.asm	/^     ce5:	00 00 00 $/;"	l
ce5	usertests.asm	/^     ce5:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
ce6	stressfs.asm	/^ ce6:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ce6	wc.asm	/^ ce6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ce7	imshow.asm	/^ ce7:	eb 0b                	jmp    cf4 <free+0x11e>$/;"	l
ce8	divide.asm	/^ ce8:	00 00 00 $/;"	l
ce8	prettyprint.asm	/^     ce8:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
ce8	sh.asm	/^     ce8:	ff d0                	callq  *%rax$/;"	l
ce9	imshow.asm	/^ ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce9	init.asm	/^ ce9:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cea	cat.asm	/^ cea:	00 00 00 $/;"	l
cea	sh.asm	/^     cea:	83 f8 61             	cmp    $0x61,%eax$/;"	l
cea	stressfs.asm	/^ cea:	eb 4e                	jmp    d3a <malloc+0x148>$/;"	l
cea	wc.asm	/^ cea:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ceb	divide.asm	/^ ceb:	ff d0                	callq  *%rax$/;"	l
ceb	ls.asm	/^     ceb:	00 00 00 $/;"	l
cec	grep.asm	/^ cec:	48 01 d0             	add    %rdx,%rax$/;"	l
cec	stressfs.asm	/^ cec:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cec	usertests.asm	/^     cec:	00 00 00 $/;"	l
ced	cat.asm	/^ ced:	48 8b 00             	mov    (%rax),%rax$/;"	l
ced	divide.asm	/^ ced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ced	imshow.asm	/^ ced:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ced	init.asm	/^ ced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ced	prettyprint.asm	/^     ced:	89 c7                	mov    %eax,%edi$/;"	l
ced	sh.asm	/^     ced:	74 16                	je     d05 <parseredirs+0x77>$/;"	l
ced	wc.asm	/^ ced:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cee	ls.asm	/^     cee:	ff d0                	callq  *%rax$/;"	l
cef	grep.asm	/^ cef:	0f b6 00             	movzbl (%rax),%eax$/;"	l
cef	prettyprint.asm	/^     cef:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cef	sh.asm	/^     cef:	48 bf 07 1e 00 00 00 	movabs $0x1e07,%rdi$/;"	l
cef	usertests.asm	/^     cef:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
cf	cat.asm	/^  cf:	7f 1d                	jg     ee <main+0x32>$/;"	l
cf	divide.asm	/^  cf:	75 2c                	jne    fd <main+0xad>$/;"	l
cf	echo.asm	/^  cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
cf	imshow.asm	/^  cf:	48 8d 8d f0 fb ff ff 	lea    -0x410(%rbp),%rcx$/;"	l
cf	ln.asm	/^  cf:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
cf	sh.asm	/^      cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
cf	wc.asm	/^  cf:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
cf	zombie.asm	/^  cf:	74 12                	je     e3 <strcmp+0x39>$/;"	l
cf0	cat.asm	/^ cf0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf0	ls.asm	/^     cf0:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
cf1	divide.asm	/^ cf1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
cf1	imshow.asm	/^ cf1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cf1	init.asm	/^ cf1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cf2	grep.asm	/^ cf2:	84 c0                	test   %al,%al$/;"	l
cf2	usertests.asm	/^     cf2:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
cf3	stressfs.asm	/^ cf3:	00 00 00 $/;"	l
cf4	cat.asm	/^ cf4:	75 23                	jne    d19 <malloc+0x130>$/;"	l
cf4	grep.asm	/^ cf4:	0f 85 fc fc ff ff    	jne    9f6 <printf+0x9e>$/;"	l
cf4	imshow.asm	/^ cf4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
cf4	init.asm	/^ cf4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cf4	wc.asm	/^ cf4:	00 00 00 $/;"	l
cf6	cat.asm	/^ cf6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cf6	divide.asm	/^ cf6:	75 07                	jne    cff <morecore+0x41>$/;"	l
cf6	prettyprint.asm	/^     cf6:	00 00 00 $/;"	l
cf6	sh.asm	/^     cf6:	00 00 00 $/;"	l
cf6	stressfs.asm	/^ cf6:	48 8b 00             	mov    (%rax),%rax$/;"	l
cf7	init.asm	/^ cf7:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
cf7	ls.asm	/^     cf7:	00 00 00 $/;"	l
cf7	wc.asm	/^ cf7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cf8	divide.asm	/^ cf8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cf9	cat.asm	/^ cf9:	89 c7                	mov    %eax,%edi$/;"	l
cf9	prettyprint.asm	/^     cf9:	ff d0                	callq  *%rax$/;"	l
cf9	sh.asm	/^     cf9:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
cf9	stressfs.asm	/^ cf9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf9	usertests.asm	/^     cf9:	00 00 00 $/;"	l
cfa	grep.asm	/^ cfa:	90                   	nop$/;"	l
cfa	ls.asm	/^     cfa:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cfa	wc.asm	/^ cfa:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
cfb	cat.asm	/^ cfb:	48 b8 70 0b 00 00 00 	movabs $0xb70,%rax$/;"	l
cfb	grep.asm	/^ cfb:	c9                   	leaveq $/;"	l
cfb	imshow.asm	/^ cfb:	00 00 00 $/;"	l
cfb	prettyprint.asm	/^     cfb:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cfc	grep.asm	/^ cfc:	c3                   	retq   $/;"	l
cfc	usertests.asm	/^     cfc:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
cfd	divide.asm	/^ cfd:	eb 36                	jmp    d35 <morecore+0x77>$/;"	l
cfd	grep.asm	/^ cfd:	55                   	push   %rbp$/;"	l
cfd	stressfs.asm	/^ cfd:	75 23                	jne    d22 <malloc+0x130>$/;"	l
cfe	grep.asm	/^ cfe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cfe	imshow.asm	/^ cfe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cfe	init.asm	/^ cfe:	00 00 00 $/;"	l
cff	divide.asm	/^ cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cff	stressfs.asm	/^ cff:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cgaputc	console.c	/^cgaputc(int c)\/\/int color)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	prettyprint.asm	/^char *hoarequote = "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.\\n\\n- C.A.R. Hoare (British computer scientist, winner of the 1980 Turing Award)\\n\\n";$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	bootmain.c	/^  uint64 checksum;$/;"	m	struct:mbheader	file:
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((addr_t) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon8	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleioctl	console.c	/^consoleioctl(struct file *f, int param, int value) {  $/;"	f
consoleread	console.c	/^consoleread(struct file *f, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct file *f, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)\/\/, int color)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpu	vm.c	/^__thread struct cpu *cpu;$/;"	v	typeref:struct:cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^   uint64 cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
cx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
d	cat.asm	/^   d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d	init.asm	/^   d:	48 bf 65 0d 00 00 00 	movabs $0xd65,%rdi$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	ls.asm	/^       d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d0	kill.asm	/^  d0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0	ls.asm	/^      d0:	89 c2                	mov    %eax,%edx$/;"	l
d0	mkdir.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d0	rm.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d00	sh.asm	/^     d00:	00 00 00 $/;"	l
d00	usertests.asm	/^     d00:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d01	grep.asm	/^ d01:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d01	init.asm	/^ d01:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d01	ls.asm	/^     d01:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d01	prettyprint.asm	/^     d01:	0f be d0             	movsbl %al,%edx$/;"	l
d01	wc.asm	/^ d01:	00 00 00 $/;"	l
d02	cat.asm	/^ d02:	00 00 00 $/;"	l
d02	imshow.asm	/^ d02:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d02	stressfs.asm	/^ d02:	89 c7                	mov    %eax,%edi$/;"	l
d03	divide.asm	/^ d03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d03	sh.asm	/^     d03:	ff d0                	callq  *%rax$/;"	l
d04	prettyprint.asm	/^     d04:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
d04	stressfs.asm	/^ d04:	48 b8 79 0b 00 00 00 	movabs $0xb79,%rax$/;"	l
d04	wc.asm	/^ d04:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d05	cat.asm	/^ d05:	ff d0                	callq  *%rax$/;"	l
d05	grep.asm	/^ d05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d05	imshow.asm	/^ d05:	90                   	nop$/;"	l
d05	init.asm	/^ d05:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d05	sh.asm	/^     d05:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d06	imshow.asm	/^ d06:	c9                   	leaveq $/;"	l
d07	cat.asm	/^ d07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d07	divide.asm	/^ d07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d07	imshow.asm	/^ d07:	c3                   	retq   $/;"	l
d07	ls.asm	/^     d07:	48 63 d0             	movslq %eax,%rdx$/;"	l
d07	usertests.asm	/^     d07:	eb 48                	jmp    d51 <createtest+0x9d>$/;"	l
d07	wc.asm	/^ d07:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
d08	imshow.asm	/^ d08:	55                   	push   %rbp$/;"	l
d08	init.asm	/^ d08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d08	sh.asm	/^     d08:	83 f8 3c             	cmp    $0x3c,%eax$/;"	l
d09	grep.asm	/^ d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d09	imshow.asm	/^ d09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d09	usertests.asm	/^     d09:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d0a	ls.asm	/^     d0a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d0a	prettyprint.asm	/^     d0a:	89 d6                	mov    %edx,%esi$/;"	l
d0b	cat.asm	/^ d0b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d0b	divide.asm	/^ d0b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d0b	sh.asm	/^     d0b:	74 0f                	je     d1c <parseredirs+0x8e>$/;"	l
d0b	stressfs.asm	/^ d0b:	00 00 00 $/;"	l
d0c	imshow.asm	/^ d0c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0c	init.asm	/^ d0c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d0c	prettyprint.asm	/^     d0c:	89 c7                	mov    %eax,%edi$/;"	l
d0c	usertests.asm	/^     d0c:	83 c0 30             	add    $0x30,%eax$/;"	l
d0d	grep.asm	/^ d0d:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d0d	sh.asm	/^     d0d:	83 f8 3e             	cmp    $0x3e,%eax$/;"	l
d0e	divide.asm	/^ d0e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d0e	prettyprint.asm	/^     d0e:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
d0e	stressfs.asm	/^ d0e:	ff d0                	callq  *%rax$/;"	l
d0e	wc.asm	/^ d0e:	00 00 00 $/;"	l
d0f	usertests.asm	/^     d0f:	89 c2                	mov    %eax,%edx$/;"	l
d1	cat.asm	/^  d1:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
d1	divide.asm	/^  d1:	48 be a8 0e 00 00 00 	movabs $0xea8,%rsi$/;"	l
d1	forktest.asm	/^  d1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d1	stressfs.asm	/^  d1:	48 b8 23 05 00 00 00 	movabs $0x523,%rax$/;"	l
d1	zombie.asm	/^  d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d10	cat.asm	/^ d10:	75 07                	jne    d19 <malloc+0x130>$/;"	l
d10	imshow.asm	/^ d10:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
d10	init.asm	/^ d10:	eb 4e                	jmp    d60 <malloc+0x148>$/;"	l
d10	sh.asm	/^     d10:	74 36                	je     d48 <parseredirs+0xba>$/;"	l
d10	stressfs.asm	/^ d10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d11	divide.asm	/^ d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d11	grep.asm	/^ d11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d11	ls.asm	/^     d11:	48 01 d0             	add    %rdx,%rax$/;"	l
d11	usertests.asm	/^     d11:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d11	wc.asm	/^ d11:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
d12	cat.asm	/^ d12:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d12	init.asm	/^ d12:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
d12	sh.asm	/^     d12:	83 f8 2b             	cmp    $0x2b,%eax$/;"	l
d13	imshow.asm	/^ d13:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
d14	ls.asm	/^     d14:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d14	stressfs.asm	/^ d14:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d15	divide.asm	/^ d15:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d15	grep.asm	/^ d15:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
d15	prettyprint.asm	/^     d15:	00 00 00 $/;"	l
d15	sh.asm	/^     d15:	74 5d                	je     d74 <parseredirs+0xe6>$/;"	l
d17	cat.asm	/^ d17:	eb 18                	jmp    d31 <malloc+0x148>$/;"	l
d17	ls.asm	/^     d17:	84 c0                	test   %al,%al$/;"	l
d17	sh.asm	/^     d17:	e9 83 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
d18	prettyprint.asm	/^     d18:	ff d0                	callq  *%rax$/;"	l
d18	usertests.asm	/^     d18:	00 00 00 $/;"	l
d18	wc.asm	/^ d18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d19	cat.asm	/^ d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d19	divide.asm	/^ d19:	48 89 c7             	mov    %rax,%rdi$/;"	l
d19	init.asm	/^ d19:	00 00 00 $/;"	l
d19	ls.asm	/^     d19:	0f 85 fc fc ff ff    	jne    a1b <printf+0x9e>$/;"	l
d19	stressfs.asm	/^ d19:	75 07                	jne    d22 <malloc+0x130>$/;"	l
d1a	imshow.asm	/^ d1a:	77 07                	ja     d23 <morecore+0x1b>$/;"	l
d1a	prettyprint.asm	/^     d1a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
d1b	stressfs.asm	/^ d1b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d1b	usertests.asm	/^     d1b:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d1c	divide.asm	/^ d1c:	48 b8 8c 0b 00 00 00 	movabs $0xb8c,%rax$/;"	l
d1c	grep.asm	/^ d1c:	00 00 00 $/;"	l
d1c	imshow.asm	/^ d1c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
d1c	init.asm	/^ d1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1c	sh.asm	/^     d1c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d1c	wc.asm	/^ d1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1d	cat.asm	/^ d1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d1e	usertests.asm	/^     d1e:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
d1f	grep.asm	/^ d1f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1f	init.asm	/^ d1f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d1f	ls.asm	/^     d1f:	90                   	nop$/;"	l
d1f	wc.asm	/^ d1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d2	grep.asm	/^  d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	init.asm	/^  d2:	48 bf 6d 0d 00 00 00 	movabs $0xd6d,%rdi$/;"	l
d2	ln.asm	/^  d2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
d2	ls.asm	/^      d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	prettyprint.asm	/^      d2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d2	usertests.asm	/^      d2:	00 00 00 $/;"	l
d2	wc.asm	/^  d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
d20	ls.asm	/^     d20:	c9                   	leaveq $/;"	l
d20	sh.asm	/^     d20:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d20	stressfs.asm	/^ d20:	eb 18                	jmp    d3a <malloc+0x148>$/;"	l
d21	cat.asm	/^ d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d21	ls.asm	/^     d21:	c3                   	retq   $/;"	l
d21	prettyprint.asm	/^     d21:	00 00 00 $/;"	l
d22	grep.asm	/^ d22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d22	ls.asm	/^     d22:	55                   	push   %rbp$/;"	l
d22	stressfs.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d23	divide.asm	/^ d23:	00 00 00 $/;"	l
d23	imshow.asm	/^ d23:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d23	init.asm	/^ d23:	75 23                	jne    d48 <malloc+0x130>$/;"	l
d23	ls.asm	/^     d23:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d23	usertests.asm	/^     d23:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d23	wc.asm	/^ d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d24	prettyprint.asm	/^     d24:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
d24	sh.asm	/^     d24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d25	cat.asm	/^ d25:	48 8b 00             	mov    (%rax),%rax$/;"	l
d25	init.asm	/^ d25:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d26	divide.asm	/^ d26:	ff d0                	callq  *%rax$/;"	l
d26	grep.asm	/^ d26:	eb 2f                	jmp    d57 <free+0x5a>$/;"	l
d26	imshow.asm	/^ d26:	c1 e0 04             	shl    $0x4,%eax$/;"	l
d26	ls.asm	/^     d26:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d26	stressfs.asm	/^ d26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d27	wc.asm	/^ d27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d28	cat.asm	/^ d28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d28	divide.asm	/^ d28:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d28	grep.asm	/^ d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d28	init.asm	/^ d28:	89 c7                	mov    %eax,%edi$/;"	l
d28	sh.asm	/^     d28:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
d29	imshow.asm	/^ d29:	89 c7                	mov    %eax,%edi$/;"	l
d2a	init.asm	/^ d2a:	48 b8 9f 0b 00 00 00 	movabs $0xb9f,%rax$/;"	l
d2a	ls.asm	/^     d2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d2a	stressfs.asm	/^ d2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d2a	usertests.asm	/^     d2a:	00 00 00 $/;"	l
d2a	wc.asm	/^ d2a:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d2b	imshow.asm	/^ d2b:	48 b8 0c 07 00 00 00 	movabs $0x70c,%rax$/;"	l
d2b	prettyprint.asm	/^     d2b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d2c	cat.asm	/^ d2c:	e9 41 ff ff ff       	jmpq   c72 <malloc+0x89>$/;"	l
d2c	grep.asm	/^ d2c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2d	usertests.asm	/^     d2d:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
d2d	wc.asm	/^ d2d:	72 65                	jb     d94 <malloc+0xfa>$/;"	l
d2e	ls.asm	/^     d2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d2e	sh.asm	/^     d2e:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
d2e	stressfs.asm	/^ d2e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2f	divide.asm	/^ d2f:	00 00 00 $/;"	l
d2f	grep.asm	/^ d2f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d2f	wc.asm	/^ d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3	echo.asm	/^  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d3	sh.asm	/^      d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d31	cat.asm	/^ d31:	c9                   	leaveq $/;"	l
d31	init.asm	/^ d31:	00 00 00 $/;"	l
d31	prettyprint.asm	/^     d31:	48 63 d0             	movslq %eax,%rdx$/;"	l
d31	stressfs.asm	/^ d31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d32	cat.asm	/^ d32:	c3                   	retq   $/;"	l
d32	divide.asm	/^ d32:	48 8b 00             	mov    (%rax),%rax$/;"	l
d32	imshow.asm	/^ d32:	00 00 00 $/;"	l
d32	ls.asm	/^     d32:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d33	grep.asm	/^ d33:	77 17                	ja     d4c <free+0x4f>$/;"	l
d33	sh.asm	/^     d33:	48 89 c7             	mov    %rax,%rdi$/;"	l
d33	wc.asm	/^ d33:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d34	init.asm	/^ d34:	ff d0                	callq  *%rax$/;"	l
d34	prettyprint.asm	/^     d34:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d34	usertests.asm	/^     d34:	00 00 00 $/;"	l
d35	divide.asm	/^ d35:	c9                   	leaveq $/;"	l
d35	grep.asm	/^ d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d35	imshow.asm	/^ d35:	ff d0                	callq  *%rax$/;"	l
d35	stressfs.asm	/^ d35:	e9 41 ff ff ff       	jmpq   c7b <malloc+0x89>$/;"	l
d36	divide.asm	/^ d36:	c3                   	retq   $/;"	l
d36	init.asm	/^ d36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d36	ls.asm	/^     d36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d36	sh.asm	/^     d36:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d36	wc.asm	/^ d36:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d37	divide.asm	/^ d37:	55                   	push   %rbp$/;"	l
d37	imshow.asm	/^ d37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d37	usertests.asm	/^     d37:	ff d0                	callq  *%rax$/;"	l
d38	divide.asm	/^ d38:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d39	grep.asm	/^ d39:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d39	usertests.asm	/^     d39:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
d39	wc.asm	/^ d39:	75 10                	jne    d4b <malloc+0xb1>$/;"	l
d3a	init.asm	/^ d3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d3a	ls.asm	/^     d3a:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
d3a	stressfs.asm	/^ d3a:	c9                   	leaveq $/;"	l
d3b	divide.asm	/^ d3b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d3b	imshow.asm	/^ d3b:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
d3b	prettyprint.asm	/^     d3b:	48 01 d0             	add    %rdx,%rax$/;"	l
d3b	stressfs.asm	/^ d3b:	c3                   	retq   $/;"	l
d3b	wc.asm	/^ d3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3c	usertests.asm	/^     d3c:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
d3d	grep.asm	/^ d3d:	77 2f                	ja     d6e <free+0x71>$/;"	l
d3d	sh.asm	/^     d3d:	00 00 00 $/;"	l
d3e	prettyprint.asm	/^     d3e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d3f	divide.asm	/^ d3f:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d3f	grep.asm	/^ d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3f	init.asm	/^ d3f:	75 07                	jne    d48 <malloc+0x130>$/;"	l
d3f	usertests.asm	/^     d3f:	89 c7                	mov    %eax,%edi$/;"	l
d3f	wc.asm	/^ d3f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d4	kill.asm	/^  d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d4	mkdir.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d4	rm.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d40	imshow.asm	/^ d40:	75 07                	jne    d49 <morecore+0x41>$/;"	l
d40	sh.asm	/^     d40:	ff d0                	callq  *%rax$/;"	l
d41	init.asm	/^ d41:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d41	ls.asm	/^     d41:	00 00 00 $/;"	l
d41	prettyprint.asm	/^     d41:	84 c0                	test   %al,%al$/;"	l
d41	usertests.asm	/^     d41:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
d42	divide.asm	/^ d42:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d42	imshow.asm	/^ d42:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d42	sh.asm	/^     d42:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d42	wc.asm	/^ d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d43	grep.asm	/^ d43:	48 8b 00             	mov    (%rax),%rax$/;"	l
d43	prettyprint.asm	/^     d43:	0f 85 fc fc ff ff    	jne    a45 <printf+0x9e>$/;"	l
d44	ls.asm	/^     d44:	48 8b 00             	mov    (%rax),%rax$/;"	l
d45	divide.asm	/^ d45:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d46	grep.asm	/^ d46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d46	init.asm	/^ d46:	eb 18                	jmp    d60 <malloc+0x148>$/;"	l
d46	sh.asm	/^     d46:	eb 57                	jmp    d9f <parseredirs+0x111>$/;"	l
d46	wc.asm	/^ d46:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d47	imshow.asm	/^ d47:	eb 36                	jmp    d7f <morecore+0x77>$/;"	l
d47	ls.asm	/^     d47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d48	init.asm	/^ d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d48	sh.asm	/^     d48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d48	usertests.asm	/^     d48:	00 00 00 $/;"	l
d49	divide.asm	/^ d49:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d49	imshow.asm	/^ d49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d49	prettyprint.asm	/^     d49:	90                   	nop$/;"	l
d49	wc.asm	/^ d49:	eb 2e                	jmp    d79 <malloc+0xdf>$/;"	l
d4a	grep.asm	/^ d4a:	77 22                	ja     d6e <free+0x71>$/;"	l
d4a	prettyprint.asm	/^     d4a:	c9                   	leaveq $/;"	l
d4b	ls.asm	/^     d4b:	eb 2f                	jmp    d7c <free+0x5a>$/;"	l
d4b	prettyprint.asm	/^     d4b:	c3                   	retq   $/;"	l
d4b	usertests.asm	/^     d4b:	ff d0                	callq  *%rax$/;"	l
d4b	wc.asm	/^ d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	grep.asm	/^ d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	init.asm	/^ d4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d4c	prettyprint.asm	/^     d4c:	55                   	push   %rbp$/;"	l
d4c	sh.asm	/^     d4c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d4d	divide.asm	/^ d4d:	83 c0 01             	add    $0x1,%eax$/;"	l
d4d	imshow.asm	/^ d4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d4d	ls.asm	/^     d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4d	prettyprint.asm	/^     d4d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d4d	usertests.asm	/^     d4d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
d4f	wc.asm	/^ d4f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d5	forktest.asm	/^  d5:	78 21                	js     f8 <forktest+0x67>$/;"	l
d5	ln.asm	/^  d5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
d5	usertests.asm	/^      d5:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d5	zombie.asm	/^  d5:	0f b6 10             	movzbl (%rax),%edx$/;"	l
d50	divide.asm	/^ d50:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d50	grep.asm	/^ d50:	48 8b 00             	mov    (%rax),%rax$/;"	l
d50	init.asm	/^ d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d50	prettyprint.asm	/^     d50:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d50	sh.asm	/^     d50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d51	imshow.asm	/^ d51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d51	ls.asm	/^     d51:	48 8b 00             	mov    (%rax),%rax$/;"	l
d51	usertests.asm	/^     d51:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
d52	wc.asm	/^ d52:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d53	divide.asm	/^ d53:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d53	grep.asm	/^ d53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d54	init.asm	/^ d54:	48 8b 00             	mov    (%rax),%rax$/;"	l
d54	ls.asm	/^     d54:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d54	prettyprint.asm	/^     d54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d54	sh.asm	/^     d54:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d55	imshow.asm	/^ d55:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d55	usertests.asm	/^     d55:	7e b2                	jle    d09 <createtest+0x55>$/;"	l
d55	wc.asm	/^ d55:	89 c2                	mov    %eax,%edx$/;"	l
d57	grep.asm	/^ d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d57	init.asm	/^ d57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d57	usertests.asm	/^     d57:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d57	wc.asm	/^ d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d58	imshow.asm	/^ d58:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d58	ls.asm	/^     d58:	77 17                	ja     d71 <free+0x4f>$/;"	l
d58	prettyprint.asm	/^     d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d5a	divide.asm	/^ d5a:	00 00 00 $/;"	l
d5a	ls.asm	/^     d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5a	sh.asm	/^     d5a:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d5b	grep.asm	/^ d5b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5b	imshow.asm	/^ d5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5b	init.asm	/^ d5b:	e9 41 ff ff ff       	jmpq   ca1 <malloc+0x89>$/;"	l
d5b	wc.asm	/^ d5b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d5c	prettyprint.asm	/^     d5c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d5d	divide.asm	/^ d5d:	48 8b 00             	mov    (%rax),%rax$/;"	l
d5e	ls.asm	/^     d5e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5e	usertests.asm	/^     d5e:	00 00 00 $/;"	l
d5e	wc.asm	/^ d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d5f	grep.asm	/^ d5f:	76 c7                	jbe    d28 <free+0x2b>$/;"	l
d5f	imshow.asm	/^ d5f:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d5f	sh.asm	/^     d5f:	48 89 c7             	mov    %rax,%rdi$/;"	l
d6	cat.asm	/^  d6:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
d6	imshow.asm	/^  d6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d6	wc.asm	/^  d6:	0f 8f 52 ff ff ff    	jg     2e <wc+0x2e>$/;"	l
d60	divide.asm	/^ d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d60	init.asm	/^ d60:	c9                   	leaveq $/;"	l
d60	prettyprint.asm	/^     d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d61	grep.asm	/^ d61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d61	init.asm	/^ d61:	c3                   	retq   $/;"	l
d61	usertests.asm	/^     d61:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
d62	ls.asm	/^     d62:	77 2f                	ja     d93 <free+0x71>$/;"	l
d62	sh.asm	/^     d62:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d62	wc.asm	/^ d62:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d63	imshow.asm	/^ d63:	48 89 c7             	mov    %rax,%rdi$/;"	l
d64	divide.asm	/^ d64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
d64	ls.asm	/^     d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d64	prettyprint.asm	/^     d64:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
d64	usertests.asm	/^     d64:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d65	grep.asm	/^ d65:	48 8b 00             	mov    (%rax),%rax$/;"	l
d65	wc.asm	/^ d65:	89 c0                	mov    %eax,%eax$/;"	l
d66	imshow.asm	/^ d66:	48 b8 d6 0b 00 00 00 	movabs $0xbd6,%rax$/;"	l
d67	wc.asm	/^ d67:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d68	grep.asm	/^ d68:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d68	ls.asm	/^     d68:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	divide.asm	/^ d69:	75 4a                	jne    db5 <malloc+0x7e>$/;"	l
d69	sh.asm	/^     d69:	00 00 00 $/;"	l
d6b	divide.asm	/^ d6b:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d6b	ls.asm	/^     d6b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d6b	prettyprint.asm	/^     d6b:	00 00 00 $/;"	l
d6b	usertests.asm	/^     d6b:	00 00 00 $/;"	l
d6b	wc.asm	/^ d6b:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d6c	grep.asm	/^ d6c:	76 ba                	jbe    d28 <free+0x2b>$/;"	l
d6c	sh.asm	/^     d6c:	ff d0                	callq  *%rax$/;"	l
d6d	imshow.asm	/^ d6d:	00 00 00 $/;"	l
d6e	grep.asm	/^ d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d6e	prettyprint.asm	/^     d6e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d6e	sh.asm	/^     d6e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d6e	usertests.asm	/^     d6e:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
d6f	ls.asm	/^     d6f:	77 22                	ja     d93 <free+0x71>$/;"	l
d6f	wc.asm	/^ d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d7	echo.asm	/^  d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d7	forktest.asm	/^  d7:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d7	mkdir.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	prettyprint.asm	/^      d7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
d7	rm.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	sh.asm	/^      d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d70	imshow.asm	/^ d70:	ff d0                	callq  *%rax$/;"	l
d71	ls.asm	/^     d71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d71	prettyprint.asm	/^     d71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d72	divide.asm	/^ d72:	00 00 00 $/;"	l
d72	grep.asm	/^ d72:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d72	imshow.asm	/^ d72:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d72	sh.asm	/^     d72:	eb 2b                	jmp    d9f <parseredirs+0x111>$/;"	l
d72	usertests.asm	/^     d72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d73	wc.asm	/^ d73:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d74	sh.asm	/^     d74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d75	divide.asm	/^ d75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d75	grep.asm	/^ d75:	89 c0                	mov    %eax,%eax$/;"	l
d75	ls.asm	/^     d75:	48 8b 00             	mov    (%rax),%rax$/;"	l
d75	prettyprint.asm	/^     d75:	eb 2f                	jmp    da6 <free+0x5a>$/;"	l
d76	wc.asm	/^ d76:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d77	grep.asm	/^ d77:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d77	prettyprint.asm	/^     d77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d78	ls.asm	/^     d78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d78	sh.asm	/^     d78:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d79	divide.asm	/^ d79:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d79	imshow.asm	/^ d79:	00 00 00 $/;"	l
d79	usertests.asm	/^     d79:	eb 2f                	jmp    daa <createtest+0xf6>$/;"	l
d79	wc.asm	/^ d79:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d7b	grep.asm	/^ d7b:	48 89 c2             	mov    %rax,%rdx$/;"	l
d7b	prettyprint.asm	/^     d7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7b	usertests.asm	/^     d7b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d7c	imshow.asm	/^ d7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7c	ls.asm	/^     d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7c	sh.asm	/^     d7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d7e	grep.asm	/^ d7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7e	prettyprint.asm	/^     d7e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d7e	usertests.asm	/^     d7e:	83 c0 30             	add    $0x30,%eax$/;"	l
d7f	imshow.asm	/^ d7f:	c9                   	leaveq $/;"	l
d8	divide.asm	/^  d8:	00 00 00 $/;"	l
d8	kill.asm	/^  d8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
d8	ln.asm	/^  d8:	89 d1                	mov    %edx,%ecx$/;"	l
d8	stressfs.asm	/^  d8:	00 00 00 $/;"	l
d8	zombie.asm	/^  d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d80	divide.asm	/^ d80:	00 00 00 $/;"	l
d80	imshow.asm	/^ d80:	c3                   	retq   $/;"	l
d80	ls.asm	/^     d80:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d80	sh.asm	/^     d80:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d80	wc.asm	/^ d80:	00 00 00 $/;"	l
d81	imshow.asm	/^ d81:	55                   	push   %rbp$/;"	l
d81	usertests.asm	/^     d81:	89 c2                	mov    %eax,%edx$/;"	l
d82	grep.asm	/^ d82:	48 01 c2             	add    %rax,%rdx$/;"	l
d82	imshow.asm	/^ d82:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d82	prettyprint.asm	/^     d82:	77 17                	ja     d9b <free+0x4f>$/;"	l
d83	divide.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d83	usertests.asm	/^     d83:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d83	wc.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d84	ls.asm	/^     d84:	76 c7                	jbe    d4d <free+0x2b>$/;"	l
d84	prettyprint.asm	/^     d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d85	grep.asm	/^ d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d85	imshow.asm	/^ d85:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d86	ls.asm	/^     d86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d86	sh.asm	/^     d86:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d87	divide.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d87	wc.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d88	prettyprint.asm	/^     d88:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d89	grep.asm	/^ d89:	48 8b 00             	mov    (%rax),%rax$/;"	l
d89	imshow.asm	/^ d89:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d8a	divide.asm	/^ d8a:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d8a	ls.asm	/^     d8a:	48 8b 00             	mov    (%rax),%rax$/;"	l
d8a	usertests.asm	/^     d8a:	00 00 00 $/;"	l
d8a	wc.asm	/^ d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8b	sh.asm	/^     d8b:	48 89 c7             	mov    %rax,%rdi$/;"	l
d8c	grep.asm	/^ d8c:	48 39 c2             	cmp    %rax,%rdx$/;"	l
d8c	imshow.asm	/^ d8c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d8c	prettyprint.asm	/^     d8c:	77 2f                	ja     dbd <free+0x71>$/;"	l
d8d	ls.asm	/^     d8d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d8d	usertests.asm	/^     d8d:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d8e	prettyprint.asm	/^     d8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8e	sh.asm	/^     d8e:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d8e	wc.asm	/^ d8e:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d8f	grep.asm	/^ d8f:	75 2d                	jne    dbe <free+0xc1>$/;"	l
d8f	imshow.asm	/^ d8f:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d9	grep.asm	/^  d9:	00 00 00 $/;"	l
d9	imshow.asm	/^  d9:	ba e8 03 00 00       	mov    $0x3e8,%edx$/;"	l
d9	init.asm	/^  d9:	00 00 00 $/;"	l
d9	ls.asm	/^      d9:	00 00 00 $/;"	l
d90	usertests.asm	/^     d90:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d91	divide.asm	/^ d91:	00 00 00 $/;"	l
d91	grep.asm	/^ d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d91	ls.asm	/^     d91:	76 ba                	jbe    d4d <free+0x2b>$/;"	l
d92	prettyprint.asm	/^     d92:	48 8b 00             	mov    (%rax),%rax$/;"	l
d92	wc.asm	/^ d92:	eb 4e                	jmp    de2 <malloc+0x148>$/;"	l
d93	imshow.asm	/^ d93:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d93	ls.asm	/^     d93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d94	divide.asm	/^ d94:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d94	wc.asm	/^ d94:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d95	grep.asm	/^ d95:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
d95	prettyprint.asm	/^     d95:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d95	sh.asm	/^     d95:	00 00 00 $/;"	l
d97	divide.asm	/^ d97:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d97	imshow.asm	/^ d97:	83 c0 01             	add    $0x1,%eax$/;"	l
d97	ls.asm	/^     d97:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d97	usertests.asm	/^     d97:	00 00 00 $/;"	l
d98	grep.asm	/^ d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d98	sh.asm	/^     d98:	ff d0                	callq  *%rax$/;"	l
d99	prettyprint.asm	/^     d99:	77 22                	ja     dbd <free+0x71>$/;"	l
d9a	imshow.asm	/^ d9a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d9a	ls.asm	/^     d9a:	89 c0                	mov    %eax,%eax$/;"	l
d9a	sh.asm	/^     d9a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d9a	usertests.asm	/^     d9a:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d9b	prettyprint.asm	/^     d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9b	wc.asm	/^ d9b:	00 00 00 $/;"	l
d9c	grep.asm	/^ d9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9c	ls.asm	/^     d9c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d9d	imshow.asm	/^ d9d:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d9e	divide.asm	/^ d9e:	00 00 00 $/;"	l
d9e	sh.asm	/^     d9e:	90                   	nop$/;"	l
d9e	wc.asm	/^ d9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	grep.asm	/^ d9f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d9f	prettyprint.asm	/^     d9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	sh.asm	/^     d9f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
da	ln.asm	/^  da:	fc                   	cld    $/;"	l
da	mkdir.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da	rm.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da0	ls.asm	/^     da0:	48 89 c2             	mov    %rax,%rdx$/;"	l
da1	divide.asm	/^ da1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
da1	usertests.asm	/^     da1:	00 00 00 $/;"	l
da1	wc.asm	/^ da1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
da2	grep.asm	/^ da2:	01 c2                	add    %eax,%edx$/;"	l
da2	prettyprint.asm	/^     da2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da3	ls.asm	/^     da3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da3	sh.asm	/^     da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
da4	divide.asm	/^ da4:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
da4	grep.asm	/^ da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da4	imshow.asm	/^ da4:	00 00 00 $/;"	l
da4	usertests.asm	/^     da4:	ff d0                	callq  *%rax$/;"	l
da5	wc.asm	/^ da5:	75 23                	jne    dca <malloc+0x130>$/;"	l
da6	prettyprint.asm	/^     da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da6	usertests.asm	/^     da6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
da7	imshow.asm	/^ da7:	48 8b 00             	mov    (%rax),%rax$/;"	l
da7	ls.asm	/^     da7:	48 01 c2             	add    %rax,%rdx$/;"	l
da7	sh.asm	/^     da7:	48 ba 24 1e 00 00 00 	movabs $0x1e24,%rdx$/;"	l
da7	wc.asm	/^ da7:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
da8	grep.asm	/^ da8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
daa	imshow.asm	/^ daa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
daa	ls.asm	/^     daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
daa	prettyprint.asm	/^     daa:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
daa	usertests.asm	/^     daa:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
daa	wc.asm	/^ daa:	89 c7                	mov    %eax,%edi$/;"	l
dab	divide.asm	/^ dab:	00 00 00 $/;"	l
dab	grep.asm	/^ dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dac	wc.asm	/^ dac:	48 b8 21 0c 00 00 00 	movabs $0xc21,%rax$/;"	l
dae	divide.asm	/^ dae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
dae	imshow.asm	/^ dae:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
dae	ls.asm	/^     dae:	48 8b 00             	mov    (%rax),%rax$/;"	l
dae	prettyprint.asm	/^     dae:	76 c7                	jbe    d77 <free+0x2b>$/;"	l
dae	sh.asm	/^     dae:	00 00 00 $/;"	l
dae	usertests.asm	/^     dae:	7e cb                	jle    d7b <createtest+0xc7>$/;"	l
daf	grep.asm	/^ daf:	48 8b 00             	mov    (%rax),%rax$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	divide.asm	/^  db:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
db	echo.asm	/^  db:	90                   	nop$/;"	l
db	forktest.asm	/^  db:	75 0c                	jne    e9 <forktest+0x58>$/;"	l
db	ln.asm	/^  db:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	sh.asm	/^      db:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
db	stressfs.asm	/^  db:	ff d0                	callq  *%rax$/;"	l
db0	prettyprint.asm	/^     db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
db0	usertests.asm	/^     db0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
db1	ls.asm	/^     db1:	48 39 c2             	cmp    %rax,%rdx$/;"	l
db1	sh.asm	/^     db1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
db2	grep.asm	/^ db2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
db3	imshow.asm	/^ db3:	75 4a                	jne    dff <malloc+0x7e>$/;"	l
db3	wc.asm	/^ db3:	00 00 00 $/;"	l
db4	ls.asm	/^     db4:	75 2d                	jne    de3 <free+0xc1>$/;"	l
db4	prettyprint.asm	/^     db4:	48 8b 00             	mov    (%rax),%rax$/;"	l
db4	sh.asm	/^     db4:	48 89 c7             	mov    %rax,%rdi$/;"	l
db5	divide.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	grep.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	imshow.asm	/^ db5:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
db6	ls.asm	/^     db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db6	wc.asm	/^ db6:	ff d0                	callq  *%rax$/;"	l
db7	prettyprint.asm	/^     db7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
db7	sh.asm	/^     db7:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
db7	usertests.asm	/^     db7:	00 00 00 $/;"	l
db8	wc.asm	/^ db8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
db9	divide.asm	/^ db9:	48 8b 00             	mov    (%rax),%rax$/;"	l
db9	grep.asm	/^ db9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dba	ls.asm	/^     dba:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dba	usertests.asm	/^     dba:	8b 00                	mov    (%rax),%eax$/;"	l
dbb	prettyprint.asm	/^     dbb:	76 ba                	jbe    d77 <free+0x2b>$/;"	l
dbc	divide.asm	/^ dbc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dbc	grep.asm	/^ dbc:	eb 0e                	jmp    dcc <free+0xcf>$/;"	l
dbc	imshow.asm	/^ dbc:	00 00 00 $/;"	l
dbc	usertests.asm	/^     dbc:	48 be 48 6c 00 00 00 	movabs $0x6c48,%rsi$/;"	l
dbc	wc.asm	/^ dbc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
dbd	ls.asm	/^     dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbd	prettyprint.asm	/^     dbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dbe	grep.asm	/^ dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbe	sh.asm	/^     dbe:	00 00 00 $/;"	l
dbf	imshow.asm	/^ dbf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dc	echo.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	grep.asm	/^  dc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
dc	init.asm	/^  dc:	48 b8 49 05 00 00 00 	movabs $0x549,%rax$/;"	l
dc	kill.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	ls.asm	/^      dc:	48 01 d0             	add    %rdx,%rax$/;"	l
dc	usertests.asm	/^      dc:	00 00 00 $/;"	l
dc	wc.asm	/^  dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
dc	zombie.asm	/^  dc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
dc0	divide.asm	/^ dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dc1	ls.asm	/^     dc1:	48 8b 00             	mov    (%rax),%rax$/;"	l
dc1	prettyprint.asm	/^     dc1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc1	sh.asm	/^     dc1:	ff d0                	callq  *%rax$/;"	l
dc1	wc.asm	/^ dc1:	75 07                	jne    dca <malloc+0x130>$/;"	l
dc2	grep.asm	/^ dc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dc3	imshow.asm	/^ dc3:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dc3	sh.asm	/^     dc3:	85 c0                	test   %eax,%eax$/;"	l
dc3	usertests.asm	/^     dc3:	00 00 00 $/;"	l
dc3	wc.asm	/^ dc3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc4	divide.asm	/^ dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	ls.asm	/^     dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	prettyprint.asm	/^     dc4:	89 c0                	mov    %eax,%eax$/;"	l
dc5	grep.asm	/^ dc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dc5	sh.asm	/^     dc5:	0f 85 dc fe ff ff    	jne    ca7 <parseredirs+0x19>$/;"	l
dc6	prettyprint.asm	/^     dc6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dc6	usertests.asm	/^     dc6:	89 c7                	mov    %eax,%edi$/;"	l
dc7	divide.asm	/^ dc7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dc7	ls.asm	/^     dc7:	01 c2                	add    %eax,%edx$/;"	l
dc8	usertests.asm	/^     dc8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc8	wc.asm	/^ dc8:	eb 18                	jmp    de2 <malloc+0x148>$/;"	l
dc9	grep.asm	/^ dc9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dc9	ls.asm	/^     dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dca	divide.asm	/^ dca:	72 65                	jb     e31 <malloc+0xfa>$/;"	l
dca	imshow.asm	/^ dca:	00 00 00 $/;"	l
dca	prettyprint.asm	/^     dca:	48 89 c2             	mov    %rax,%rdx$/;"	l
dca	wc.asm	/^ dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcb	sh.asm	/^     dcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
dcc	divide.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcc	grep.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcd	imshow.asm	/^ dcd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
dcd	ls.asm	/^     dcd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dcd	prettyprint.asm	/^     dcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dcd	usertests.asm	/^     dcd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dce	wc.asm	/^ dce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dcf	sh.asm	/^     dcf:	c9                   	leaveq $/;"	l
dd	cat.asm	/^  dd:	00 00 00 $/;"	l
dd	forktest.asm	/^  dd:	48 b8 0d 05 00 00 00 	movabs $0x50d,%rax$/;"	l
dd	ln.asm	/^  dd:	89 ca                	mov    %ecx,%edx$/;"	l
dd	stressfs.asm	/^  dd:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
dd0	divide.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	grep.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	ls.asm	/^     dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd0	sh.asm	/^     dd0:	c3                   	retq   $/;"	l
dd1	imshow.asm	/^ dd1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dd1	prettyprint.asm	/^     dd1:	48 01 c2             	add    %rax,%rdx$/;"	l
dd1	sh.asm	/^     dd1:	55                   	push   %rbp$/;"	l
dd2	sh.asm	/^     dd2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
dd2	wc.asm	/^ dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd3	divide.asm	/^ dd3:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dd3	grep.asm	/^ dd3:	89 c0                	mov    %eax,%eax$/;"	l
dd4	imshow.asm	/^ dd4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dd4	ls.asm	/^     dd4:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd4	prettyprint.asm	/^     dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd4	usertests.asm	/^     dd4:	00 00 00 $/;"	l
dd5	grep.asm	/^ dd5:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dd5	sh.asm	/^     dd5:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
dd6	divide.asm	/^ dd6:	75 10                	jne    de8 <malloc+0xb1>$/;"	l
dd6	wc.asm	/^ dd6:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd7	ls.asm	/^     dd7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dd7	usertests.asm	/^     dd7:	ff d2                	callq  *%rdx$/;"	l
dd8	divide.asm	/^ dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd8	prettyprint.asm	/^     dd8:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd9	grep.asm	/^ dd9:	48 89 c2             	mov    %rax,%rdx$/;"	l
dd9	sh.asm	/^     dd9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
dd9	usertests.asm	/^     dd9:	90                   	nop$/;"	l
dd9	wc.asm	/^ dd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dda	ls.asm	/^     dda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dda	usertests.asm	/^     dda:	c9                   	leaveq $/;"	l
ddb	imshow.asm	/^ ddb:	00 00 00 $/;"	l
ddb	prettyprint.asm	/^     ddb:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ddb	usertests.asm	/^     ddb:	c3                   	retq   $/;"	l
ddc	divide.asm	/^ ddc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ddc	grep.asm	/^ ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ddc	usertests.asm	/^     ddc:	55                   	push   %rbp$/;"	l
ddd	sh.asm	/^     ddd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ddd	usertests.asm	/^     ddd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ddd	wc.asm	/^ ddd:	e9 41 ff ff ff       	jmpq   d23 <malloc+0x89>$/;"	l
dde	imshow.asm	/^ dde:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dde	ls.asm	/^     dde:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dde	prettyprint.asm	/^     dde:	75 2d                	jne    e0d <free+0xc1>$/;"	l
ddf	divide.asm	/^ ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de	imshow.asm	/^  de:	48 89 ce             	mov    %rcx,%rsi$/;"	l
de	mkdir.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	prettyprint.asm	/^      de:	00 00 00 $/;"	l
de	rm.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	sh.asm	/^      de:	89 c7                	mov    %eax,%edi$/;"	l
de0	grep.asm	/^ de0:	48 01 d0             	add    %rdx,%rax$/;"	l
de0	prettyprint.asm	/^     de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de0	usertests.asm	/^     de0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
de1	imshow.asm	/^ de1:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
de1	ls.asm	/^     de1:	eb 0e                	jmp    df1 <free+0xcf>$/;"	l
de1	sh.asm	/^     de1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
de2	wc.asm	/^ de2:	c9                   	leaveq $/;"	l
de3	divide.asm	/^ de3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
de3	grep.asm	/^ de3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
de3	ls.asm	/^     de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de3	wc.asm	/^ de3:	c3                   	retq   $/;"	l
de4	prettyprint.asm	/^     de4:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
de5	sh.asm	/^     de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
de6	divide.asm	/^ de6:	eb 2e                	jmp    e16 <malloc+0xdf>$/;"	l
de7	grep.asm	/^ de7:	75 27                	jne    e10 <free+0x113>$/;"	l
de7	ls.asm	/^     de7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
de7	prettyprint.asm	/^     de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de7	usertests.asm	/^     de7:	00 00 00 $/;"	l
de8	divide.asm	/^ de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de8	imshow.asm	/^ de8:	00 00 00 $/;"	l
de9	grep.asm	/^ de9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de9	sh.asm	/^     de9:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
dea	ls.asm	/^     dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dea	usertests.asm	/^     dea:	8b 00                	mov    (%rax),%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint64 oldsz, uint64 newsz)$/;"	f
deb	imshow.asm	/^ deb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
deb	prettyprint.asm	/^     deb:	48 8b 00             	mov    (%rax),%rax$/;"	l
dec	divide.asm	/^ dec:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dec	usertests.asm	/^     dec:	48 be 6e 6c 00 00 00 	movabs $0x6c6e,%rsi$/;"	l
ded	grep.asm	/^ ded:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dee	imshow.asm	/^ dee:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
dee	ls.asm	/^     dee:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dee	prettyprint.asm	/^     dee:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
def	divide.asm	/^ def:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	ln.asm	/^  df:	48 89 fe             	mov    %rdi,%rsi$/;"	l
df	ls.asm	/^      df:	89 da                	mov    %ebx,%edx$/;"	l
df	usertests.asm	/^      df:	ff d0                	callq  *%rax$/;"	l
df	zombie.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df0	grep.asm	/^ df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df0	sh.asm	/^     df0:	00 00 00 $/;"	l
df1	ls.asm	/^     df1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df1	prettyprint.asm	/^     df1:	01 c2                	add    %eax,%edx$/;"	l
df2	divide.asm	/^ df2:	89 c2                	mov    %eax,%edx$/;"	l
df3	prettyprint.asm	/^     df3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df3	sh.asm	/^     df3:	48 89 ce             	mov    %rcx,%rsi$/;"	l
df3	usertests.asm	/^     df3:	00 00 00 $/;"	l
df4	divide.asm	/^ df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df4	grep.asm	/^ df4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df5	imshow.asm	/^ df5:	00 00 00 $/;"	l
df5	ls.asm	/^     df5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df6	sh.asm	/^     df6:	48 89 c7             	mov    %rax,%rdi$/;"	l
df6	usertests.asm	/^     df6:	89 c7                	mov    %eax,%edi$/;"	l
df7	grep.asm	/^ df7:	01 c2                	add    %eax,%edx$/;"	l
df7	prettyprint.asm	/^     df7:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	divide.asm	/^ df8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	imshow.asm	/^ df8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
df8	ls.asm	/^     df8:	89 c0                	mov    %eax,%eax$/;"	l
df8	usertests.asm	/^     df8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df9	grep.asm	/^ df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df9	sh.asm	/^     df9:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
dfa	ls.asm	/^     dfa:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dfa	prettyprint.asm	/^     dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfb	divide.asm	/^ dfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfd	grep.asm	/^ dfd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dfd	usertests.asm	/^     dfd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dfe	ls.asm	/^     dfe:	48 89 c2             	mov    %rax,%rdx$/;"	l
dfe	prettyprint.asm	/^     dfe:	48 8b 00             	mov    (%rax),%rax$/;"	l
dff	divide.asm	/^ dff:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dff	imshow.asm	/^ dff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
di	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
digits	console.c	/^static char digits[] = "0123456789abcdef";$/;"	v	file:
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	imshow.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	prettyprint.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
dx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon9	file:
e	initcode.asm	/^   e:	48 c7 c0 07 00 00 00 	mov    $0x7,%rax$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	usertests.asm	/^       e:	8b 00                	mov    (%rax),%eax$/;"	l
e	zombie.asm	/^   e:	ff d0                	callq  *%rax$/;"	l
e0	cat.asm	/^  e0:	ff d0                	callq  *%rax$/;"	l
e0	divide.asm	/^  e0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e0	echo.asm	/^  e0:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e0	grep.asm	/^  e0:	75 07                	jne    e9 <grep+0xe9>$/;"	l
e0	kill.asm	/^  e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e0	sh.asm	/^      e0:	48 b8 30 15 00 00 00 	movabs $0x1530,%rax$/;"	l
e0	stressfs.asm	/^  e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e0	wc.asm	/^  e0:	79 2c                	jns    10e <wc+0x10e>$/;"	l
e00	grep.asm	/^ e00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e00	sh.asm	/^     e00:	00 00 00 $/;"	l
e01	ls.asm	/^     e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e01	prettyprint.asm	/^     e01:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e02	divide.asm	/^ e02:	89 c0                	mov    %eax,%eax$/;"	l
e03	imshow.asm	/^ e03:	48 8b 00             	mov    (%rax),%rax$/;"	l
e03	sh.asm	/^     e03:	ff d0                	callq  *%rax$/;"	l
e04	divide.asm	/^ e04:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e04	grep.asm	/^ e04:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e04	prettyprint.asm	/^     e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e04	usertests.asm	/^     e04:	00 00 00 $/;"	l
e05	ls.asm	/^     e05:	48 01 d0             	add    %rdx,%rax$/;"	l
e05	sh.asm	/^     e05:	85 c0                	test   %eax,%eax$/;"	l
e06	imshow.asm	/^ e06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e07	grep.asm	/^ e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e07	sh.asm	/^     e07:	75 16                	jne    e1f <parseblock+0x4e>$/;"	l
e07	usertests.asm	/^     e07:	ff d2                	callq  *%rdx$/;"	l
e08	divide.asm	/^ e08:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e08	ls.asm	/^     e08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e08	prettyprint.asm	/^     e08:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e09	sh.asm	/^     e09:	48 bf 29 1e 00 00 00 	movabs $0x1e29,%rdi$/;"	l
e09	usertests.asm	/^     e09:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e0a	imshow.asm	/^ e0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0b	grep.asm	/^ e0b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e0b	prettyprint.asm	/^     e0b:	eb 0e                	jmp    e1b <free+0xcf>$/;"	l
e0c	divide.asm	/^ e0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0c	ls.asm	/^     e0c:	75 27                	jne    e35 <free+0x113>$/;"	l
e0d	prettyprint.asm	/^     e0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0e	grep.asm	/^ e0e:	eb 0b                	jmp    e1b <free+0x11e>$/;"	l
e0e	imshow.asm	/^ e0e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e0e	ls.asm	/^     e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1	imshow.asm	/^  e1:	89 c7                	mov    %eax,%edi$/;"	l
e1	ls.asm	/^      e1:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
e1	mkdir.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	prettyprint.asm	/^      e1:	ff d2                	callq  *%rdx$/;"	l
e1	rm.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	usertests.asm	/^      e1:	85 c0                	test   %eax,%eax$/;"	l
e1	zombie.asm	/^  e1:	74 d9                	je     bc <strcmp+0x12>$/;"	l
e10	divide.asm	/^ e10:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e10	grep.asm	/^ e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e10	sh.asm	/^     e10:	00 00 00 $/;"	l
e10	usertests.asm	/^     e10:	00 00 00 $/;"	l
e11	imshow.asm	/^ e11:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e11	prettyprint.asm	/^     e11:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e12	ls.asm	/^     e12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e13	divide.asm	/^ e13:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e13	sh.asm	/^     e13:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e13	usertests.asm	/^     e13:	48 b8 84 60 00 00 00 	movabs $0x6084,%rax$/;"	l
e14	grep.asm	/^ e14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e14	imshow.asm	/^ e14:	72 65                	jb     e7b <malloc+0xfa>$/;"	l
e14	prettyprint.asm	/^     e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e15	ls.asm	/^     e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e16	divide.asm	/^ e16:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e16	imshow.asm	/^ e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e18	grep.asm	/^ e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e18	prettyprint.asm	/^     e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e19	ls.asm	/^     e19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	imshow.asm	/^ e1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	sh.asm	/^     e1a:	00 00 00 $/;"	l
e1a	usertests.asm	/^     e1a:	00 00 00 $/;"	l
e1b	grep.asm	/^ e1b:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e1b	prettyprint.asm	/^     e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1c	ls.asm	/^     e1c:	01 c2                	add    %eax,%edx$/;"	l
e1d	divide.asm	/^ e1d:	00 00 00 $/;"	l
e1d	imshow.asm	/^ e1d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e1d	sh.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1d	usertests.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1e	ls.asm	/^     e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1f	prettyprint.asm	/^     e1f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1f	sh.asm	/^     e1f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e1f	usertests.asm	/^     e1f:	85 c0                	test   %eax,%eax$/;"	l
e2	cat.asm	/^  e2:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
e2	grep.asm	/^  e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e2	ln.asm	/^  e2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
e2	wc.asm	/^  e2:	48 be ea 0d 00 00 00 	movabs $0xdea,%rsi$/;"	l
e20	divide.asm	/^ e20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e20	imshow.asm	/^ e20:	75 10                	jne    e32 <malloc+0xb1>$/;"	l
e21	usertests.asm	/^     e21:	79 35                	jns    e58 <dirtest+0x7c>$/;"	l
e22	grep.asm	/^ e22:	00 00 00 $/;"	l
e22	imshow.asm	/^ e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e22	ls.asm	/^     e22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e22	prettyprint.asm	/^     e22:	89 c0                	mov    %eax,%eax$/;"	l
e23	sh.asm	/^     e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e23	usertests.asm	/^     e23:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e24	divide.asm	/^ e24:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e24	prettyprint.asm	/^     e24:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e25	grep.asm	/^ e25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e25	ls.asm	/^     e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e26	imshow.asm	/^ e26:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e27	divide.asm	/^ e27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e27	sh.asm	/^     e27:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
e28	prettyprint.asm	/^     e28:	48 89 c2             	mov    %rax,%rdx$/;"	l
e29	grep.asm	/^ e29:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e29	imshow.asm	/^ e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e29	ls.asm	/^     e29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e2a	usertests.asm	/^     e2a:	00 00 00 $/;"	l
e2b	divide.asm	/^ e2b:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e2b	prettyprint.asm	/^     e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	grep.asm	/^ e2c:	90                   	nop$/;"	l
e2c	ls.asm	/^     e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	sh.asm	/^     e2c:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
e2d	grep.asm	/^ e2d:	c9                   	leaveq $/;"	l
e2d	imshow.asm	/^ e2d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e2d	usertests.asm	/^     e2d:	8b 00                	mov    (%rax),%eax$/;"	l
e2e	grep.asm	/^ e2e:	c3                   	retq   $/;"	l
e2f	divide.asm	/^ e2f:	eb 4e                	jmp    e7f <malloc+0x148>$/;"	l
e2f	grep.asm	/^ e2f:	55                   	push   %rbp$/;"	l
e2f	prettyprint.asm	/^     e2f:	48 01 d0             	add    %rdx,%rax$/;"	l
e2f	usertests.asm	/^     e2f:	48 be 99 68 00 00 00 	movabs $0x6899,%rsi$/;"	l
e3	imshow.asm	/^  e3:	48 b8 80 06 00 00 00 	movabs $0x680,%rax$/;"	l
e3	init.asm	/^  e3:	00 00 00 $/;"	l
e3	prettyprint.asm	/^      e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e3	usertests.asm	/^      e3:	79 35                	jns    11a <iputtest+0x11a>$/;"	l
e3	zombie.asm	/^  e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e30	grep.asm	/^ e30:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e30	imshow.asm	/^ e30:	eb 2e                	jmp    e60 <malloc+0xdf>$/;"	l
e30	ls.asm	/^     e30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e31	divide.asm	/^ e31:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e31	sh.asm	/^     e31:	48 89 c7             	mov    %rax,%rdi$/;"	l
e32	imshow.asm	/^ e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e32	prettyprint.asm	/^     e32:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e33	grep.asm	/^ e33:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e33	ls.asm	/^     e33:	eb 0b                	jmp    e40 <free+0x11e>$/;"	l
e34	sh.asm	/^     e34:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
e35	ls.asm	/^     e35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e36	imshow.asm	/^ e36:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e36	prettyprint.asm	/^     e36:	75 27                	jne    e5f <free+0x113>$/;"	l
e36	usertests.asm	/^     e36:	00 00 00 $/;"	l
e37	grep.asm	/^ e37:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e38	divide.asm	/^ e38:	00 00 00 $/;"	l
e38	prettyprint.asm	/^     e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e39	imshow.asm	/^ e39:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
e39	ls.asm	/^     e39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e39	usertests.asm	/^     e39:	89 c7                	mov    %eax,%edi$/;"	l
e3a	grep.asm	/^ e3a:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e3b	divide.asm	/^ e3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
e3b	sh.asm	/^     e3b:	00 00 00 $/;"	l
e3b	usertests.asm	/^     e3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e3c	imshow.asm	/^ e3c:	89 c2                	mov    %eax,%edx$/;"	l
e3c	prettyprint.asm	/^     e3c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e3d	ls.asm	/^     e3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e3e	divide.asm	/^ e3e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e3e	imshow.asm	/^ e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e3e	sh.asm	/^     e3e:	ff d0                	callq  *%rax$/;"	l
e3f	prettyprint.asm	/^     e3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e4	echo.asm	/^  e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
e4	forktest.asm	/^  e4:	00 00 00 $/;"	l
e4	kill.asm	/^  e4:	90                   	nop$/;"	l
e4	mkdir.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e4	rm.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e40	ls.asm	/^     e40:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
e40	sh.asm	/^     e40:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e40	usertests.asm	/^     e40:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e41	grep.asm	/^ e41:	77 07                	ja     e4a <morecore+0x1b>$/;"	l
e42	divide.asm	/^ e42:	75 23                	jne    e67 <malloc+0x130>$/;"	l
e42	imshow.asm	/^ e42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e43	grep.asm	/^ e43:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e43	prettyprint.asm	/^     e43:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e44	divide.asm	/^ e44:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e44	sh.asm	/^     e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e45	imshow.asm	/^ e45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e46	prettyprint.asm	/^     e46:	01 c2                	add    %eax,%edx$/;"	l
e47	divide.asm	/^ e47:	89 c7                	mov    %eax,%edi$/;"	l
e47	ls.asm	/^     e47:	00 00 00 $/;"	l
e47	usertests.asm	/^     e47:	00 00 00 $/;"	l
e48	prettyprint.asm	/^     e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e48	sh.asm	/^     e48:	48 89 d6             	mov    %rdx,%rsi$/;"	l
e49	divide.asm	/^ e49:	48 b8 be 0c 00 00 00 	movabs $0xcbe,%rax$/;"	l
e49	imshow.asm	/^ e49:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e4a	grep.asm	/^ e4a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e4a	ls.asm	/^     e4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e4a	usertests.asm	/^     e4a:	ff d2                	callq  *%rdx$/;"	l
e4b	sh.asm	/^     e4b:	48 89 c7             	mov    %rax,%rdi$/;"	l
e4c	imshow.asm	/^ e4c:	89 c0                	mov    %eax,%eax$/;"	l
e4c	prettyprint.asm	/^     e4c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e4c	usertests.asm	/^     e4c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e4d	grep.asm	/^ e4d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e4e	imshow.asm	/^ e4e:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e4e	ls.asm	/^     e4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e4e	sh.asm	/^     e4e:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
e4f	prettyprint.asm	/^     e4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e5	divide.asm	/^  e5:	48 ba e7 07 00 00 00 	movabs $0x7e7,%rdx$/;"	l
e5	kill.asm	/^  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e5	usertests.asm	/^      e5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e50	divide.asm	/^ e50:	00 00 00 $/;"	l
e50	grep.asm	/^ e50:	89 c7                	mov    %eax,%edi$/;"	l
e51	ls.asm	/^     e51:	90                   	nop$/;"	l
e52	grep.asm	/^ e52:	48 b8 33 08 00 00 00 	movabs $0x833,%rax$/;"	l
e52	imshow.asm	/^ e52:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e52	ls.asm	/^     e52:	c9                   	leaveq $/;"	l
e53	divide.asm	/^ e53:	ff d0                	callq  *%rax$/;"	l
e53	ls.asm	/^     e53:	c3                   	retq   $/;"	l
e53	prettyprint.asm	/^     e53:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e53	usertests.asm	/^     e53:	00 00 00 $/;"	l
e54	ls.asm	/^     e54:	55                   	push   %rbp$/;"	l
e55	divide.asm	/^ e55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e55	ls.asm	/^     e55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e55	sh.asm	/^     e55:	00 00 00 $/;"	l
e56	imshow.asm	/^ e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	prettyprint.asm	/^     e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	usertests.asm	/^     e56:	ff d0                	callq  *%rax$/;"	l
e58	ls.asm	/^     e58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e58	sh.asm	/^     e58:	ff d0                	callq  *%rax$/;"	l
e58	usertests.asm	/^     e58:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e59	divide.asm	/^ e59:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
e59	grep.asm	/^ e59:	00 00 00 $/;"	l
e5a	imshow.asm	/^ e5a:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e5a	prettyprint.asm	/^     e5a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e5a	sh.asm	/^     e5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5c	grep.asm	/^ e5c:	ff d0                	callq  *%rax$/;"	l
e5c	ls.asm	/^     e5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e5d	imshow.asm	/^ e5d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e5d	prettyprint.asm	/^     e5d:	eb 0b                	jmp    e6a <free+0x11e>$/;"	l
e5e	divide.asm	/^ e5e:	75 07                	jne    e67 <malloc+0x130>$/;"	l
e5e	grep.asm	/^ e5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5e	sh.asm	/^     e5e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
e5f	ls.asm	/^     e5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e5f	prettyprint.asm	/^     e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e5f	usertests.asm	/^     e5f:	00 00 00 $/;"	l
e6	init.asm	/^  e6:	ff d0                	callq  *%rax$/;"	l
e6	ln.asm	/^  e6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
e6	ls.asm	/^      e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
e60	divide.asm	/^ e60:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e60	imshow.asm	/^ e60:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e62	grep.asm	/^ e62:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e62	sh.asm	/^     e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e62	usertests.asm	/^     e62:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
e63	prettyprint.asm	/^     e63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e65	divide.asm	/^ e65:	eb 18                	jmp    e7f <malloc+0x148>$/;"	l
e66	ls.asm	/^     e66:	77 07                	ja     e6f <morecore+0x1b>$/;"	l
e66	sh.asm	/^     e66:	48 ba 34 1e 00 00 00 	movabs $0x1e34,%rdx$/;"	l
e67	divide.asm	/^ e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e67	grep.asm	/^ e67:	75 07                	jne    e70 <morecore+0x41>$/;"	l
e67	imshow.asm	/^ e67:	00 00 00 $/;"	l
e67	prettyprint.asm	/^     e67:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e68	ls.asm	/^     e68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e69	grep.asm	/^ e69:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e69	usertests.asm	/^     e69:	00 00 00 $/;"	l
e6a	imshow.asm	/^ e6a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e6a	prettyprint.asm	/^     e6a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
e6b	divide.asm	/^ e6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e6c	usertests.asm	/^     e6c:	ff d0                	callq  *%rax$/;"	l
e6d	sh.asm	/^     e6d:	00 00 00 $/;"	l
e6e	grep.asm	/^ e6e:	eb 36                	jmp    ea6 <morecore+0x77>$/;"	l
e6e	imshow.asm	/^ e6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e6e	usertests.asm	/^     e6e:	85 c0                	test   %eax,%eax$/;"	l
e6f	divide.asm	/^ e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e6f	ls.asm	/^     e6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e7	forktest.asm	/^  e7:	ff d0                	callq  *%rax$/;"	l
e7	mkdir.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	rm.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	sh.asm	/^      e7:	00 00 00 $/;"	l
e7	stressfs.asm	/^  e7:	eb 24                	jmp    10d <main+0x10d>$/;"	l
e7	zombie.asm	/^  e7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
e70	grep.asm	/^ e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e70	sh.asm	/^     e70:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e70	usertests.asm	/^     e70:	79 35                	jns    ea7 <dirtest+0xcb>$/;"	l
e71	imshow.asm	/^ e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e71	prettyprint.asm	/^     e71:	00 00 00 $/;"	l
e72	ls.asm	/^     e72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e72	usertests.asm	/^     e72:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e73	divide.asm	/^ e73:	48 8b 00             	mov    (%rax),%rax$/;"	l
e73	sh.asm	/^     e73:	48 89 c7             	mov    %rax,%rdi$/;"	l
e74	grep.asm	/^ e74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e74	prettyprint.asm	/^     e74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e75	imshow.asm	/^ e75:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e75	ls.asm	/^     e75:	89 c7                	mov    %eax,%edi$/;"	l
e76	divide.asm	/^ e76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e76	sh.asm	/^     e76:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
e77	ls.asm	/^     e77:	48 b8 58 08 00 00 00 	movabs $0x858,%rax$/;"	l
e78	grep.asm	/^ e78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e78	prettyprint.asm	/^     e78:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e79	imshow.asm	/^ e79:	eb 4e                	jmp    ec9 <malloc+0x148>$/;"	l
e79	usertests.asm	/^     e79:	00 00 00 $/;"	l
e7a	divide.asm	/^ e7a:	e9 41 ff ff ff       	jmpq   dc0 <malloc+0x89>$/;"	l
e7b	imshow.asm	/^ e7b:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e7b	prettyprint.asm	/^     e7b:	90                   	nop$/;"	l
e7c	grep.asm	/^ e7c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e7c	prettyprint.asm	/^     e7c:	c9                   	leaveq $/;"	l
e7c	usertests.asm	/^     e7c:	8b 00                	mov    (%rax),%eax$/;"	l
e7d	prettyprint.asm	/^     e7d:	c3                   	retq   $/;"	l
e7d	sh.asm	/^     e7d:	00 00 00 $/;"	l
e7e	ls.asm	/^     e7e:	00 00 00 $/;"	l
e7e	prettyprint.asm	/^     e7e:	55                   	push   %rbp$/;"	l
e7e	usertests.asm	/^     e7e:	48 be 7f 6c 00 00 00 	movabs $0x6c7f,%rsi$/;"	l
e7f	divide.asm	/^ e7f:	c9                   	leaveq $/;"	l
e7f	grep.asm	/^ e7f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e7f	prettyprint.asm	/^     e7f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e8	echo.asm	/^  e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e8	init.asm	/^  e8:	48 be 75 0d 00 00 00 	movabs $0xd75,%rsi$/;"	l
e80	divide.asm	/^ e80:	c3                   	retq   $/;"	l
e80	sh.asm	/^     e80:	ff d0                	callq  *%rax$/;"	l
e81	ls.asm	/^     e81:	ff d0                	callq  *%rax$/;"	l
e82	grep.asm	/^ e82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e82	imshow.asm	/^ e82:	00 00 00 $/;"	l
e82	prettyprint.asm	/^     e82:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e82	sh.asm	/^     e82:	85 c0                	test   %eax,%eax$/;"	l
e83	ls.asm	/^     e83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e84	sh.asm	/^     e84:	75 16                	jne    e9c <parseblock+0xcb>$/;"	l
e85	imshow.asm	/^ e85:	48 8b 00             	mov    (%rax),%rax$/;"	l
e85	usertests.asm	/^     e85:	00 00 00 $/;"	l
e86	grep.asm	/^ e86:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e86	prettyprint.asm	/^     e86:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e86	sh.asm	/^     e86:	48 bf 36 1e 00 00 00 	movabs $0x1e36,%rdi$/;"	l
e87	ls.asm	/^     e87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e88	imshow.asm	/^ e88:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e88	usertests.asm	/^     e88:	89 c7                	mov    %eax,%edi$/;"	l
e89	prettyprint.asm	/^     e89:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e8a	grep.asm	/^ e8a:	48 89 c7             	mov    %rax,%rdi$/;"	l
e8a	usertests.asm	/^     e8a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8c	imshow.asm	/^ e8c:	75 23                	jne    eb1 <malloc+0x130>$/;"	l
e8c	ls.asm	/^     e8c:	75 07                	jne    e95 <morecore+0x41>$/;"	l
e8d	grep.asm	/^ e8d:	48 b8 fd 0c 00 00 00 	movabs $0xcfd,%rax$/;"	l
e8d	sh.asm	/^     e8d:	00 00 00 $/;"	l
e8e	imshow.asm	/^ e8e:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e8e	ls.asm	/^     e8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8f	usertests.asm	/^     e8f:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e9	cat.asm	/^  e9:	00 00 00 $/;"	l
e9	forktest.asm	/^  e9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
e9	grep.asm	/^  e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
e9	kill.asm	/^  e9:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e9	ln.asm	/^  e9:	90                   	nop$/;"	l
e9	ls.asm	/^      e9:	48 b8 94 05 00 00 00 	movabs $0x594,%rax$/;"	l
e9	stressfs.asm	/^  e9:	48 8d 8d e0 fd ff ff 	lea    -0x220(%rbp),%rcx$/;"	l
e9	wc.asm	/^  e9:	00 00 00 $/;"	l
e90	prettyprint.asm	/^     e90:	77 07                	ja     e99 <morecore+0x1b>$/;"	l
e90	sh.asm	/^     e90:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e91	imshow.asm	/^ e91:	89 c7                	mov    %eax,%edi$/;"	l
e92	prettyprint.asm	/^     e92:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e93	imshow.asm	/^ e93:	48 b8 08 0d 00 00 00 	movabs $0xd08,%rax$/;"	l
e93	ls.asm	/^     e93:	eb 36                	jmp    ecb <morecore+0x77>$/;"	l
e94	grep.asm	/^ e94:	00 00 00 $/;"	l
e95	ls.asm	/^     e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e96	usertests.asm	/^     e96:	00 00 00 $/;"	l
e97	grep.asm	/^ e97:	ff d0                	callq  *%rax$/;"	l
e97	sh.asm	/^     e97:	00 00 00 $/;"	l
e99	grep.asm	/^ e99:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e99	ls.asm	/^     e99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e99	prettyprint.asm	/^     e99:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e99	usertests.asm	/^     e99:	ff d2                	callq  *%rdx$/;"	l
e9a	imshow.asm	/^ e9a:	00 00 00 $/;"	l
e9a	sh.asm	/^     e9a:	ff d0                	callq  *%rax$/;"	l
e9b	usertests.asm	/^     e9b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e9c	prettyprint.asm	/^     e9c:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e9c	sh.asm	/^     e9c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e9d	imshow.asm	/^ e9d:	ff d0                	callq  *%rax$/;"	l
e9d	ls.asm	/^     e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e9f	imshow.asm	/^ e9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e9f	prettyprint.asm	/^     e9f:	89 c7                	mov    %eax,%edi$/;"	l
ea	imshow.asm	/^  ea:	00 00 00 $/;"	l
ea	ln.asm	/^  ea:	c9                   	leaveq $/;"	l
ea	mkdir.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	prettyprint.asm	/^      ea:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)$/;"	l
ea	rm.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	sh.asm	/^      ea:	ff d0                	callq  *%rax$/;"	l
ea	zombie.asm	/^  ea:	0f b6 d0             	movzbl %al,%edx$/;"	l
ea0	grep.asm	/^ ea0:	00 00 00 $/;"	l
ea0	sh.asm	/^     ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ea1	ls.asm	/^     ea1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ea1	prettyprint.asm	/^     ea1:	48 b8 82 08 00 00 00 	movabs $0x882,%rax$/;"	l
ea2	usertests.asm	/^     ea2:	00 00 00 $/;"	l
ea3	grep.asm	/^ ea3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ea3	imshow.asm	/^ ea3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ea4	ls.asm	/^     ea4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ea4	sh.asm	/^     ea4:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ea5	usertests.asm	/^     ea5:	ff d0                	callq  *%rax$/;"	l
ea6	grep.asm	/^ ea6:	c9                   	leaveq $/;"	l
ea7	grep.asm	/^ ea7:	c3                   	retq   $/;"	l
ea7	ls.asm	/^     ea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ea7	usertests.asm	/^     ea7:	48 bf 92 6c 00 00 00 	movabs $0x6c92,%rdi$/;"	l
ea8	grep.asm	/^ ea8:	55                   	push   %rbp$/;"	l
ea8	imshow.asm	/^ ea8:	75 07                	jne    eb1 <malloc+0x130>$/;"	l
ea8	prettyprint.asm	/^     ea8:	00 00 00 $/;"	l
ea9	grep.asm	/^ ea9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ea9	sh.asm	/^     ea9:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
eaa	imshow.asm	/^ eaa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eab	ls.asm	/^     eab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
eab	prettyprint.asm	/^     eab:	ff d0                	callq  *%rax$/;"	l
eac	grep.asm	/^ eac:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ead	prettyprint.asm	/^     ead:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
eae	sh.asm	/^     eae:	48 89 c7             	mov    %rax,%rdi$/;"	l
eae	usertests.asm	/^     eae:	00 00 00 $/;"	l
eaf	imshow.asm	/^ eaf:	eb 18                	jmp    ec9 <malloc+0x148>$/;"	l
eaf	ls.asm	/^     eaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eb	ln.asm	/^  eb:	c3                   	retq   $/;"	l
eb0	grep.asm	/^ eb0:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
eb1	imshow.asm	/^ eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb1	prettyprint.asm	/^     eb1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
eb1	sh.asm	/^     eb1:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
eb1	usertests.asm	/^     eb1:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
eb2	ls.asm	/^     eb2:	48 b8 22 0d 00 00 00 	movabs $0xd22,%rax$/;"	l
eb3	grep.asm	/^ eb3:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
eb5	imshow.asm	/^ eb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
eb6	grep.asm	/^ eb6:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
eb6	prettyprint.asm	/^     eb6:	75 07                	jne    ebf <morecore+0x41>$/;"	l
eb8	prettyprint.asm	/^     eb8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eb8	sh.asm	/^     eb8:	00 00 00 $/;"	l
eb8	usertests.asm	/^     eb8:	00 00 00 $/;"	l
eb9	imshow.asm	/^ eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb9	ls.asm	/^     eb9:	00 00 00 $/;"	l
eba	grep.asm	/^ eba:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ebb	sh.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebb	usertests.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebc	ls.asm	/^     ebc:	ff d0                	callq  *%rax$/;"	l
ebd	imshow.asm	/^ ebd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ebd	prettyprint.asm	/^     ebd:	eb 36                	jmp    ef5 <morecore+0x77>$/;"	l
ebd	sh.asm	/^     ebd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ebd	usertests.asm	/^     ebd:	85 c0                	test   %eax,%eax$/;"	l
ebe	grep.asm	/^ ebe:	83 c0 01             	add    $0x1,%eax$/;"	l
ebe	ls.asm	/^     ebe:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ebf	prettyprint.asm	/^     ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ebf	usertests.asm	/^     ebf:	79 35                	jns    ef6 <dirtest+0x11a>$/;"	l
ebp	kernel.asm	/^    ebp = (addr_t*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  addr_t ebp; \/\/rbp$/;"	m	struct:context
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ec	cat.asm	/^  ec:	ff d0                	callq  *%rax$/;"	l
ec	divide.asm	/^  ec:	00 00 00 $/;"	l
ec	echo.asm	/^  ec:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ec	ln.asm	/^  ec:	55                   	push   %rbp$/;"	l
ec	mkdir.asm	/^  ec:	fc                   	cld    $/;"	l
ec	rm.asm	/^  ec:	fc                   	cld    $/;"	l
ec	sh.asm	/^      ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec	usertests.asm	/^      ec:	00 00 00 $/;"	l
ec	wc.asm	/^  ec:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ec0	imshow.asm	/^ ec0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ec1	grep.asm	/^ ec1:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ec1	sh.asm	/^     ec1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ec1	usertests.asm	/^     ec1:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
ec3	prettyprint.asm	/^     ec3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ec4	grep.asm	/^ ec4:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
ec4	imshow.asm	/^ ec4:	e9 41 ff ff ff       	jmpq   e0a <malloc+0x89>$/;"	l
ec5	ls.asm	/^     ec5:	00 00 00 $/;"	l
ec5	sh.asm	/^     ec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ec7	prettyprint.asm	/^     ec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec8	ls.asm	/^     ec8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ec8	usertests.asm	/^     ec8:	00 00 00 $/;"	l
ec9	imshow.asm	/^ ec9:	c9                   	leaveq $/;"	l
ec9	sh.asm	/^     ec9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
eca	imshow.asm	/^ eca:	c3                   	retq   $/;"	l
ecb	grep.asm	/^ ecb:	00 00 00 $/;"	l
ecb	ls.asm	/^     ecb:	c9                   	leaveq $/;"	l
ecb	prettyprint.asm	/^     ecb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ecb	usertests.asm	/^     ecb:	8b 00                	mov    (%rax),%eax$/;"	l
ecc	ls.asm	/^     ecc:	c3                   	retq   $/;"	l
ecc	sh.asm	/^     ecc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ecd	ls.asm	/^     ecd:	55                   	push   %rbp$/;"	l
ecd	usertests.asm	/^     ecd:	48 be 95 6c 00 00 00 	movabs $0x6c95,%rsi$/;"	l
ece	grep.asm	/^ ece:	48 8b 00             	mov    (%rax),%rax$/;"	l
ece	ls.asm	/^     ece:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ece	prettyprint.asm	/^     ece:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ecf	sh.asm	/^     ecf:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ed	forktest.asm	/^  ed:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ed	grep.asm	/^  ed:	7e 3c                	jle    12b <grep+0x12b>$/;"	l
ed	imshow.asm	/^  ed:	ff d0                	callq  *%rax$/;"	l
ed	kill.asm	/^  ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ed	ln.asm	/^  ed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ed	mkdir.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	rm.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	zombie.asm	/^  ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed1	grep.asm	/^ ed1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ed1	ls.asm	/^     ed1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ed1	prettyprint.asm	/^     ed1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed4	usertests.asm	/^     ed4:	00 00 00 $/;"	l
ed5	grep.asm	/^ ed5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ed5	ls.asm	/^     ed5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ed5	prettyprint.asm	/^     ed5:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ed6	sh.asm	/^     ed6:	00 00 00 $/;"	l
ed7	usertests.asm	/^     ed7:	89 c7                	mov    %eax,%edi$/;"	l
ed8	ls.asm	/^     ed8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ed9	prettyprint.asm	/^     ed9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ed9	sh.asm	/^     ed9:	ff d0                	callq  *%rax$/;"	l
ed9	usertests.asm	/^     ed9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eda	grep.asm	/^ eda:	75 4a                	jne    f26 <malloc+0x7e>$/;"	l
edb	ls.asm	/^     edb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
edb	sh.asm	/^     edb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
edc	grep.asm	/^ edc:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
edc	prettyprint.asm	/^     edc:	48 b8 4c 0d 00 00 00 	movabs $0xd4c,%rax$/;"	l
ede	usertests.asm	/^     ede:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
edf	ls.asm	/^     edf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
edf	sh.asm	/^     edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
ee	cat.asm	/^  ee:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ee	prettyprint.asm	/^      ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ee3	grep.asm	/^ ee3:	00 00 00 $/;"	l
ee3	ls.asm	/^     ee3:	83 c0 01             	add    $0x1,%eax$/;"	l
ee3	prettyprint.asm	/^     ee3:	00 00 00 $/;"	l
ee3	sh.asm	/^     ee3:	c9                   	leaveq $/;"	l
ee4	sh.asm	/^     ee4:	c3                   	retq   $/;"	l
ee5	sh.asm	/^     ee5:	55                   	push   %rbp$/;"	l
ee5	usertests.asm	/^     ee5:	00 00 00 $/;"	l
ee6	grep.asm	/^ ee6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ee6	ls.asm	/^     ee6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ee6	prettyprint.asm	/^     ee6:	ff d0                	callq  *%rax$/;"	l
ee6	sh.asm	/^     ee6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ee8	prettyprint.asm	/^     ee8:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ee8	usertests.asm	/^     ee8:	ff d2                	callq  *%rdx$/;"	l
ee9	ls.asm	/^     ee9:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ee9	sh.asm	/^     ee9:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
eea	grep.asm	/^ eea:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
eea	usertests.asm	/^     eea:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
eed	sh.asm	/^     eed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
eef	prettyprint.asm	/^     eef:	00 00 00 $/;"	l
ef	divide.asm	/^  ef:	ff d2                	callq  *%rdx$/;"	l
ef	grep.asm	/^  ef:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ef	imshow.asm	/^  ef:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ef	init.asm	/^  ef:	00 00 00 $/;"	l
ef	mkdir.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	rm.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	usertests.asm	/^      ef:	8b 00                	mov    (%rax),%eax$/;"	l
ef0	ls.asm	/^     ef0:	00 00 00 $/;"	l
ef1	grep.asm	/^ ef1:	00 00 00 $/;"	l
ef1	sh.asm	/^     ef1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ef1	usertests.asm	/^     ef1:	00 00 00 $/;"	l
ef2	prettyprint.asm	/^     ef2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef3	ls.asm	/^     ef3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef4	grep.asm	/^ ef4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ef4	usertests.asm	/^     ef4:	ff d0                	callq  *%rax$/;"	l
ef5	prettyprint.asm	/^     ef5:	c9                   	leaveq $/;"	l
ef5	sh.asm	/^     ef5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx$/;"	l
ef6	ls.asm	/^     ef6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ef6	prettyprint.asm	/^     ef6:	c3                   	retq   $/;"	l
ef6	usertests.asm	/^     ef6:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
ef7	prettyprint.asm	/^     ef7:	55                   	push   %rbp$/;"	l
ef8	grep.asm	/^ ef8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ef8	prettyprint.asm	/^     ef8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ef9	sh.asm	/^     ef9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
efa	ls.asm	/^     efa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
efb	grep.asm	/^ efb:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
efb	prettyprint.asm	/^     efb:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
efd	sh.asm	/^     efd:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
efd	usertests.asm	/^     efd:	00 00 00 $/;"	l
eff	ls.asm	/^     eff:	75 4a                	jne    f4b <malloc+0x7e>$/;"	l
eff	prettyprint.asm	/^     eff:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  addr_t eip; \/\/rip;$/;"	m	struct:context
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	elf.h	/^  addr_t entry;$/;"	m	struct:elfhdr
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entry32mp	entry.S	/^entry32mp:$/;"	l
entry32mp	kernel.asm	/^entry32mp:$/;"	l
entry64high	entry.S	/^entry64high:$/;"	l
entry64high	kernel.asm	/^entry64high:$/;"	l
entry64low	entry.S	/^entry64low:$/;"	l
entry64low	kernel.asm	/^entry64low:$/;"	l
entry64mp	entry.S	/^entry64mp:$/;"	l
entry64mp	kernel.asm	/^entry64mp:$/;"	l
entry_addr	bootmain.c	/^  uint64 entry_addr;$/;"	m	struct:mbheader	file:
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
err	x86.h	/^   uint64 err;$/;"	m	struct:trapframe
es	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
extern	kernel.asm	/^extern addr_t vectors[];  \/\/ in vectors.S: array of 256 entry pointers$/;"	l
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	echo.asm	/^   f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
f	grep.asm	/^   f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f	kill.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	ln.asm	/^   f:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)$/;"	l
f	mkdir.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	rm.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	wc.asm	/^   f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)$/;"	l
f0	echo.asm	/^  f0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f0	ln.asm	/^  f0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
f0	ls.asm	/^      f0:	00 00 00 $/;"	l
f0	sh.asm	/^      f0:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
f0	stressfs.asm	/^  f0:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
f00	usertests.asm	/^     f00:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
f01	ls.asm	/^     f01:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f02	grep.asm	/^ f02:	00 00 00 $/;"	l
f02	prettyprint.asm	/^     f02:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
f04	sh.asm	/^     f04:	00 00 00 $/;"	l
f05	grep.asm	/^ f05:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f05	prettyprint.asm	/^     f05:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
f07	sh.asm	/^     f07:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f07	usertests.asm	/^     f07:	00 00 00 $/;"	l
f08	grep.asm	/^ f08:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f08	ls.asm	/^     f08:	00 00 00 $/;"	l
f09	prettyprint.asm	/^     f09:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
f0a	sh.asm	/^     f0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f0a	usertests.asm	/^     f0a:	ff d0                	callq  *%rax$/;"	l
f0b	ls.asm	/^     f0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f0c	usertests.asm	/^     f0c:	85 c0                	test   %eax,%eax$/;"	l
f0d	prettyprint.asm	/^     f0d:	83 c0 01             	add    $0x1,%eax$/;"	l
f0d	sh.asm	/^     f0d:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
f0e	usertests.asm	/^     f0e:	79 35                	jns    f45 <dirtest+0x169>$/;"	l
f0f	grep.asm	/^ f0f:	00 00 00 $/;"	l
f0f	ls.asm	/^     f0f:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f1	divide.asm	/^  f1:	48 b8 22 06 00 00 00 	movabs $0x622,%rax$/;"	l
f1	kill.asm	/^  f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
f1	mkdir.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	rm.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	usertests.asm	/^      f1:	48 be c8 68 00 00 00 	movabs $0x68c8,%rsi$/;"	l
f1	wc.asm	/^  f1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f1	zombie.asm	/^  f1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f10	prettyprint.asm	/^     f10:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
f10	usertests.asm	/^     f10:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f12	grep.asm	/^ f12:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f13	prettyprint.asm	/^     f13:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f14	sh.asm	/^     f14:	00 00 00 $/;"	l
f15	grep.asm	/^ f15:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f16	ls.asm	/^     f16:	00 00 00 $/;"	l
f17	sh.asm	/^     f17:	ff d0                	callq  *%rax$/;"	l
f17	usertests.asm	/^     f17:	00 00 00 $/;"	l
f19	ls.asm	/^     f19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f19	sh.asm	/^     f19:	85 c0                	test   %eax,%eax$/;"	l
f1a	prettyprint.asm	/^     f1a:	00 00 00 $/;"	l
f1a	usertests.asm	/^     f1a:	8b 00                	mov    (%rax),%eax$/;"	l
f1b	sh.asm	/^     f1b:	74 1f                	je     f3c <parseexec+0x57>$/;"	l
f1c	grep.asm	/^ f1c:	00 00 00 $/;"	l
f1c	usertests.asm	/^     f1c:	48 be a6 6c 00 00 00 	movabs $0x6ca6,%rsi$/;"	l
f1d	ls.asm	/^     f1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f1d	prettyprint.asm	/^     f1d:	48 8b 00             	mov    (%rax),%rax$/;"	l
f1d	sh.asm	/^     f1d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f1f	grep.asm	/^ f1f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f2	grep.asm	/^  f2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
f2	imshow.asm	/^  f2:	81 7d e8 e8 03 00 00 	cmpl   $0x3e8,-0x18(%rbp)$/;"	l
f2	init.asm	/^  f2:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
f20	ls.asm	/^     f20:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f20	prettyprint.asm	/^     f20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f21	sh.asm	/^     f21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f23	usertests.asm	/^     f23:	00 00 00 $/;"	l
f24	prettyprint.asm	/^     f24:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
f25	sh.asm	/^     f25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
f26	grep.asm	/^ f26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f26	usertests.asm	/^     f26:	89 c7                	mov    %eax,%edi$/;"	l
f27	ls.asm	/^     f27:	00 00 00 $/;"	l
f28	sh.asm	/^     f28:	48 89 c7             	mov    %rax,%rdi$/;"	l
f28	usertests.asm	/^     f28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f29	prettyprint.asm	/^     f29:	75 4a                	jne    f75 <malloc+0x7e>$/;"	l
f2a	grep.asm	/^ f2a:	48 8b 00             	mov    (%rax),%rax$/;"	l
f2a	ls.asm	/^     f2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f2b	prettyprint.asm	/^     f2b:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f2b	sh.asm	/^     f2b:	48 b8 d1 0d 00 00 00 	movabs $0xdd1,%rax$/;"	l
f2d	grep.asm	/^ f2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f2d	ls.asm	/^     f2d:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f2d	usertests.asm	/^     f2d:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f3	ls.asm	/^      f3:	ff d0                	callq  *%rax$/;"	l
f3	sh.asm	/^      f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f3	stressfs.asm	/^  f3:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
f31	grep.asm	/^ f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f32	prettyprint.asm	/^     f32:	00 00 00 $/;"	l
f32	sh.asm	/^     f32:	00 00 00 $/;"	l
f34	ls.asm	/^     f34:	00 00 00 $/;"	l
f34	usertests.asm	/^     f34:	00 00 00 $/;"	l
f35	grep.asm	/^ f35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f35	prettyprint.asm	/^     f35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f35	sh.asm	/^     f35:	ff d0                	callq  *%rax$/;"	l
f37	ls.asm	/^     f37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f37	sh.asm	/^     f37:	e9 57 01 00 00       	jmpq   1093 <parseexec+0x1ae>$/;"	l
f37	usertests.asm	/^     f37:	ff d2                	callq  *%rdx$/;"	l
f38	grep.asm	/^ f38:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f39	prettyprint.asm	/^     f39:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f39	usertests.asm	/^     f39:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
f3a	ls.asm	/^     f3a:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f3b	grep.asm	/^ f3b:	72 65                	jb     fa2 <malloc+0xfa>$/;"	l
f3c	sh.asm	/^     f3c:	48 b8 9d 05 00 00 00 	movabs $0x59d,%rax$/;"	l
f3d	grep.asm	/^ f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4	echo.asm	/^  f4:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
f4	forktest.asm	/^  f4:	7e cc                	jle    c2 <forktest+0x31>$/;"	l
f4	ln.asm	/^  f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
f4	mkdir.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	rm.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	zombie.asm	/^  f4:	0f b6 c0             	movzbl %al,%eax$/;"	l
f40	prettyprint.asm	/^     f40:	00 00 00 $/;"	l
f40	usertests.asm	/^     f40:	00 00 00 $/;"	l
f41	grep.asm	/^ f41:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f41	ls.asm	/^     f41:	00 00 00 $/;"	l
f43	prettyprint.asm	/^     f43:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f43	sh.asm	/^     f43:	00 00 00 $/;"	l
f43	usertests.asm	/^     f43:	ff d0                	callq  *%rax$/;"	l
f44	grep.asm	/^ f44:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f44	ls.asm	/^     f44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f45	usertests.asm	/^     f45:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f46	sh.asm	/^     f46:	ff d0                	callq  *%rax$/;"	l
f47	grep.asm	/^ f47:	75 10                	jne    f59 <malloc+0xb1>$/;"	l
f47	prettyprint.asm	/^     f47:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f48	sh.asm	/^     f48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f49	grep.asm	/^ f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4a	prettyprint.asm	/^     f4a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f4b	ls.asm	/^     f4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	sh.asm	/^     f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	usertests.asm	/^     f4c:	00 00 00 $/;"	l
f4d	grep.asm	/^ f4d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f4f	ls.asm	/^     f4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
f4f	usertests.asm	/^     f4f:	8b 00                	mov    (%rax),%eax$/;"	l
f5	cat.asm	/^  f5:	e9 a0 00 00 00       	jmpq   19a <main+0xde>$/;"	l
f5	kill.asm	/^  f5:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
f5	ls.asm	/^      f5:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
f5	prettyprint.asm	/^      f5:	e9 d0 00 00 00       	jmpq   1ca <main+0x1ca>$/;"	l
f50	grep.asm	/^ f50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f50	sh.asm	/^     f50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
f51	prettyprint.asm	/^     f51:	00 00 00 $/;"	l
f51	usertests.asm	/^     f51:	48 be ba 6c 00 00 00 	movabs $0x6cba,%rsi$/;"	l
f52	ls.asm	/^     f52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f54	grep.asm	/^ f54:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f54	prettyprint.asm	/^     f54:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f54	sh.asm	/^     f54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f56	ls.asm	/^     f56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f57	grep.asm	/^ f57:	eb 2e                	jmp    f87 <malloc+0xdf>$/;"	l
f57	prettyprint.asm	/^     f57:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f58	usertests.asm	/^     f58:	00 00 00 $/;"	l
f59	grep.asm	/^ f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f5a	ls.asm	/^     f5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5b	sh.asm	/^     f5b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f5b	usertests.asm	/^     f5b:	89 c7                	mov    %eax,%edi$/;"	l
f5d	grep.asm	/^ f5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5d	ls.asm	/^     f5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f5d	usertests.asm	/^     f5d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f5e	prettyprint.asm	/^     f5e:	00 00 00 $/;"	l
f5f	sh.asm	/^     f5f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
f6	forktest.asm	/^  f6:	eb 01                	jmp    f9 <forktest+0x68>$/;"	l
f6	grep.asm	/^  f6:	48 ba 20 13 00 00 00 	movabs $0x1320,%rdx$/;"	l
f6	wc.asm	/^  f6:	48 ba 4a 07 00 00 00 	movabs $0x74a,%rdx$/;"	l
f60	grep.asm	/^ f60:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f60	ls.asm	/^     f60:	72 65                	jb     fc7 <malloc+0xfa>$/;"	l
f61	prettyprint.asm	/^     f61:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f62	ls.asm	/^     f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f62	usertests.asm	/^     f62:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f63	grep.asm	/^ f63:	89 c2                	mov    %eax,%edx$/;"	l
f63	sh.asm	/^     f63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f64	prettyprint.asm	/^     f64:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f65	grep.asm	/^ f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f66	ls.asm	/^     f66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f67	sh.asm	/^     f67:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f69	grep.asm	/^ f69:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f69	ls.asm	/^     f69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f69	usertests.asm	/^     f69:	00 00 00 $/;"	l
f6a	sh.asm	/^     f6a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f6b	prettyprint.asm	/^     f6b:	00 00 00 $/;"	l
f6c	grep.asm	/^ f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6c	ls.asm	/^     f6c:	75 10                	jne    f7e <malloc+0xb1>$/;"	l
f6c	usertests.asm	/^     f6c:	ff d2                	callq  *%rdx$/;"	l
f6d	sh.asm	/^     f6d:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
f6e	ls.asm	/^     f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6e	prettyprint.asm	/^     f6e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f6e	usertests.asm	/^     f6e:	90                   	nop$/;"	l
f6f	usertests.asm	/^     f6f:	5d                   	pop    %rbp$/;"	l
f7	echo.asm	/^  f7:	88 10                	mov    %dl,(%rax)$/;"	l
f7	init.asm	/^  f7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f7	sh.asm	/^      f7:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
f7	zombie.asm	/^  f7:	29 c2                	sub    %eax,%edx$/;"	l
f70	grep.asm	/^ f70:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f70	usertests.asm	/^     f70:	c3                   	retq   $/;"	l
f71	usertests.asm	/^     f71:	55                   	push   %rbp$/;"	l
f72	ls.asm	/^     f72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f72	usertests.asm	/^     f72:	48 89 e5             	mov    %rsp,%rbp$/;"	l
f73	grep.asm	/^ f73:	89 c0                	mov    %eax,%eax$/;"	l
f74	sh.asm	/^     f74:	00 00 00 $/;"	l
f75	grep.asm	/^ f75:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f75	ls.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	prettyprint.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	usertests.asm	/^     f75:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f77	sh.asm	/^     f77:	ff d0                	callq  *%rax$/;"	l
f79	grep.asm	/^ f79:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f79	ls.asm	/^     f79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f79	prettyprint.asm	/^     f79:	48 8b 00             	mov    (%rax),%rax$/;"	l
f79	sh.asm	/^     f79:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f7c	ls.asm	/^     f7c:	eb 2e                	jmp    fac <malloc+0xdf>$/;"	l
f7c	prettyprint.asm	/^     f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f7c	usertests.asm	/^     f7c:	00 00 00 $/;"	l
f7d	grep.asm	/^ f7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7d	sh.asm	/^     f7d:	e9 b4 00 00 00       	jmpq   1036 <parseexec+0x151>$/;"	l
f7e	ls.asm	/^     f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7f	usertests.asm	/^     f7f:	8b 00                	mov    (%rax),%eax$/;"	l
f8	divide.asm	/^  f8:	00 00 00 $/;"	l
f8	forktest.asm	/^  f8:	90                   	nop$/;"	l
f8	ln.asm	/^  f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
f8	mkdir.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	rm.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	stressfs.asm	/^  f8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f8	usertests.asm	/^      f8:	00 00 00 $/;"	l
f80	prettyprint.asm	/^     f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f81	grep.asm	/^ f81:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
f81	usertests.asm	/^     f81:	48 be c9 6c 00 00 00 	movabs $0x6cc9,%rsi$/;"	l
f82	ls.asm	/^     f82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f82	sh.asm	/^     f82:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
f84	grep.asm	/^ f84:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f84	prettyprint.asm	/^     f84:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f85	ls.asm	/^     f85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f86	sh.asm	/^     f86:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx$/;"	l
f87	grep.asm	/^ f87:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
f87	prettyprint.asm	/^     f87:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f88	ls.asm	/^     f88:	89 c2                	mov    %eax,%edx$/;"	l
f88	usertests.asm	/^     f88:	00 00 00 $/;"	l
f8a	ls.asm	/^     f8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8a	prettyprint.asm	/^     f8a:	72 65                	jb     ff1 <malloc+0xfa>$/;"	l
f8a	sh.asm	/^     f8a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi$/;"	l
f8b	usertests.asm	/^     f8b:	89 c7                	mov    %eax,%edi$/;"	l
f8c	prettyprint.asm	/^     f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8d	usertests.asm	/^     f8d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f8e	grep.asm	/^ f8e:	00 00 00 $/;"	l
f8e	ls.asm	/^     f8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f8e	sh.asm	/^     f8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f9	echo.asm	/^  f9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f9	forktest.asm	/^  f9:	81 7d fc e8 03 00 00 	cmpl   $0x3e8,-0x4(%rbp)$/;"	l
f9	imshow.asm	/^  f9:	74 25                	je     120 <main+0x120>$/;"	l
f9	kill.asm	/^  f9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f9	zombie.asm	/^  f9:	89 d0                	mov    %edx,%eax$/;"	l
f90	prettyprint.asm	/^     f90:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f91	grep.asm	/^ f91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f91	ls.asm	/^     f91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f92	sh.asm	/^     f92:	48 89 c7             	mov    %rax,%rdi$/;"	l
f92	usertests.asm	/^     f92:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f93	prettyprint.asm	/^     f93:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f95	grep.asm	/^ f95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f95	ls.asm	/^     f95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f95	sh.asm	/^     f95:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
f96	prettyprint.asm	/^     f96:	75 10                	jne    fa8 <malloc+0xb1>$/;"	l
f98	grep.asm	/^ f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f98	ls.asm	/^     f98:	89 c0                	mov    %eax,%eax$/;"	l
f98	prettyprint.asm	/^     f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f99	usertests.asm	/^     f99:	00 00 00 $/;"	l
f9a	ls.asm	/^     f9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f9c	grep.asm	/^ f9c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
f9c	prettyprint.asm	/^     f9c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f9c	sh.asm	/^     f9c:	00 00 00 $/;"	l
f9c	usertests.asm	/^     f9c:	ff d2                	callq  *%rdx$/;"	l
f9e	ls.asm	/^     f9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f9e	usertests.asm	/^     f9e:	48 be e0 87 00 00 00 	movabs $0x87e0,%rsi$/;"	l
f9f	prettyprint.asm	/^     f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f9f	sh.asm	/^     f9f:	ff d0                	callq  *%rax$/;"	l
fa	cat.asm	/^  fa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
fa	prettyprint.asm	/^      fa:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx$/;"	l
fa0	grep.asm	/^ fa0:	eb 4e                	jmp    ff0 <malloc+0x148>$/;"	l
fa1	sh.asm	/^     fa1:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
fa2	grep.asm	/^ fa2:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
fa2	ls.asm	/^     fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa3	prettyprint.asm	/^     fa3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fa4	sh.asm	/^     fa4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
fa5	usertests.asm	/^     fa5:	00 00 00 $/;"	l
fa6	ls.asm	/^     fa6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fa6	prettyprint.asm	/^     fa6:	eb 2e                	jmp    fd6 <malloc+0xdf>$/;"	l
fa8	prettyprint.asm	/^     fa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa8	sh.asm	/^     fa8:	0f 84 b6 00 00 00    	je     1064 <parseexec+0x17f>$/;"	l
fa8	usertests.asm	/^     fa8:	48 bf 70 68 00 00 00 	movabs $0x6870,%rdi$/;"	l
fa9	grep.asm	/^ fa9:	00 00 00 $/;"	l
fa9	ls.asm	/^     fa9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fac	grep.asm	/^ fac:	48 8b 00             	mov    (%rax),%rax$/;"	l
fac	ls.asm	/^     fac:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fac	prettyprint.asm	/^     fac:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fae	sh.asm	/^     fae:	83 7d e4 61          	cmpl   $0x61,-0x1c(%rbp)$/;"	l
faf	grep.asm	/^ faf:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
faf	prettyprint.asm	/^     faf:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
faf	usertests.asm	/^     faf:	00 00 00 $/;"	l
fb	divide.asm	/^  fb:	ff d0                	callq  *%rax$/;"	l
fb	imshow.asm	/^  fb:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
fb	mkdir.asm	/^  fb:	90                   	nop$/;"	l
fb	rm.asm	/^  fb:	90                   	nop$/;"	l
fb	sh.asm	/^      fb:	89 d6                	mov    %edx,%esi$/;"	l
fb	stressfs.asm	/^  fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	usertests.asm	/^      fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	zombie.asm	/^  fb:	c9                   	leaveq $/;"	l
fb2	prettyprint.asm	/^     fb2:	89 c2                	mov    %eax,%edx$/;"	l
fb2	sh.asm	/^     fb2:	74 16                	je     fca <parseexec+0xe5>$/;"	l
fb2	usertests.asm	/^     fb2:	48 b8 48 60 00 00 00 	movabs $0x6048,%rax$/;"	l
fb3	grep.asm	/^ fb3:	75 23                	jne    fd8 <malloc+0x130>$/;"	l
fb3	ls.asm	/^     fb3:	00 00 00 $/;"	l
fb4	prettyprint.asm	/^     fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fb4	sh.asm	/^     fb4:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
fb5	grep.asm	/^ fb5:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fb6	ls.asm	/^     fb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fb8	grep.asm	/^ fb8:	89 c7                	mov    %eax,%edi$/;"	l
fb8	prettyprint.asm	/^     fb8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fb9	usertests.asm	/^     fb9:	00 00 00 $/;"	l
fba	grep.asm	/^ fba:	48 b8 2f 0e 00 00 00 	movabs $0xe2f,%rax$/;"	l
fba	ls.asm	/^     fba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fbb	prettyprint.asm	/^     fbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbb	sh.asm	/^     fbb:	00 00 00 $/;"	l
fbc	usertests.asm	/^     fbc:	ff d0                	callq  *%rax$/;"	l
fbd	ls.asm	/^     fbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbe	sh.asm	/^     fbe:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
fbe	usertests.asm	/^     fbe:	85 c0                	test   %eax,%eax$/;"	l
fbf	prettyprint.asm	/^     fbf:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fc	echo.asm	/^  fc:	84 c0                	test   %al,%al$/;"	l
fc	init.asm	/^  fc:	48 ba c8 06 00 00 00 	movabs $0x6c8,%rdx$/;"	l
fc	ln.asm	/^  fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fc	ls.asm	/^      fc:	00 00 00 $/;"	l
fc	mkdir.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	rm.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	zombie.asm	/^  fc:	c3                   	retq   $/;"	l
fc0	usertests.asm	/^     fc0:	79 35                	jns    ff7 <exectest+0x86>$/;"	l
fc1	grep.asm	/^ fc1:	00 00 00 $/;"	l
fc1	ls.asm	/^     fc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
fc2	prettyprint.asm	/^     fc2:	89 c0                	mov    %eax,%eax$/;"	l
fc2	usertests.asm	/^     fc2:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
fc4	grep.asm	/^ fc4:	ff d0                	callq  *%rax$/;"	l
fc4	prettyprint.asm	/^     fc4:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
fc5	ls.asm	/^     fc5:	eb 4e                	jmp    1015 <malloc+0x148>$/;"	l
fc5	sh.asm	/^     fc5:	00 00 00 $/;"	l
fc6	grep.asm	/^ fc6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fc7	ls.asm	/^     fc7:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fc8	prettyprint.asm	/^     fc8:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
fc8	sh.asm	/^     fc8:	ff d0                	callq  *%rax$/;"	l
fc9	usertests.asm	/^     fc9:	00 00 00 $/;"	l
fca	grep.asm	/^ fca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fca	sh.asm	/^     fca:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
fcc	prettyprint.asm	/^     fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fcc	usertests.asm	/^     fcc:	8b 00                	mov    (%rax),%eax$/;"	l
fce	ls.asm	/^     fce:	00 00 00 $/;"	l
fce	sh.asm	/^     fce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fce	usertests.asm	/^     fce:	48 be d4 6c 00 00 00 	movabs $0x6cd4,%rsi$/;"	l
fcf	grep.asm	/^ fcf:	75 07                	jne    fd8 <malloc+0x130>$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd:	48 98                	cltq   $/;"	l
fd	divide.asm	/^  fd:	81 7d f8 14 ae 47 01 	cmpl   $0x147ae14,-0x8(%rbp)$/;"	l
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd:	00 00 00 $/;"	l
fd	imshow.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	c3                   	retq   $/;"	l
fd	prettyprint.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	c3                   	retq   $/;"	l
fd	sh.asm	/^      fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd:	48 b8 fb 04 00 00 00 	movabs $0x4fb,%rax$/;"	l
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^      fd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	00 00 00 $/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	55                   	push   %rbp$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	prettyprint.asm	/^     fd0:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fd1	grep.asm	/^ fd1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd1	ls.asm	/^     fd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
fd3	prettyprint.asm	/^     fd3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fd4	ls.asm	/^     fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
fd5	sh.asm	/^     fd5:	48 63 d2             	movslq %edx,%rdx$/;"	l
fd5	usertests.asm	/^     fd5:	00 00 00 $/;"	l
fd6	grep.asm	/^ fd6:	eb 18                	jmp    ff0 <malloc+0x148>$/;"	l
fd6	prettyprint.asm	/^     fd6:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
fd8	grep.asm	/^ fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fd8	ls.asm	/^     fd8:	75 23                	jne    ffd <malloc+0x130>$/;"	l
fd8	sh.asm	/^     fd8:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
fd8	usertests.asm	/^     fd8:	89 c7                	mov    %eax,%edi$/;"	l
fda	ls.asm	/^     fda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fda	usertests.asm	/^     fda:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdc	grep.asm	/^ fdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
fdd	ls.asm	/^     fdd:	89 c7                	mov    %eax,%edi$/;"	l
fdd	prettyprint.asm	/^     fdd:	00 00 00 $/;"	l
fdd	sh.asm	/^     fdd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
fdf	ls.asm	/^     fdf:	48 b8 54 0e 00 00 00 	movabs $0xe54,%rax$/;"	l
fdf	usertests.asm	/^     fdf:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
fe	echo.asm	/^  fe:	75 dc                	jne    dc <strcpy+0x19>$/;"	l
fe	imshow.asm	/^  fe:	89 c2                	mov    %eax,%edx$/;"	l
fe	mkdir.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	prettyprint.asm	/^      fe:	89 c8                	mov    %ecx,%eax$/;"	l
fe	rm.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	zombie.asm	/^  fe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
fe0	grep.asm	/^ fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe0	prettyprint.asm	/^     fe0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fe1	sh.asm	/^     fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fe4	grep.asm	/^ fe4:	48 8b 00             	mov    (%rax),%rax$/;"	l
fe4	prettyprint.asm	/^     fe4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fe5	sh.asm	/^     fe5:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
fe6	ls.asm	/^     fe6:	00 00 00 $/;"	l
fe6	usertests.asm	/^     fe6:	00 00 00 $/;"	l
fe7	grep.asm	/^ fe7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fe7	prettyprint.asm	/^     fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe8	sh.asm	/^     fe8:	48 63 c9             	movslq %ecx,%rcx$/;"	l
fe9	ls.asm	/^     fe9:	ff d0                	callq  *%rax$/;"	l
fe9	usertests.asm	/^     fe9:	ff d2                	callq  *%rdx$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	grep.asm	/^ feb:	e9 41 ff ff ff       	jmpq   f31 <malloc+0x89>$/;"	l
feb	ls.asm	/^     feb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
feb	prettyprint.asm	/^     feb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
feb	sh.asm	/^     feb:	48 83 c1 0a          	add    $0xa,%rcx$/;"	l
feb	usertests.asm	/^     feb:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
fef	ls.asm	/^     fef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fef	prettyprint.asm	/^     fef:	eb 4e                	jmp    103f <malloc+0x148>$/;"	l
fef	sh.asm	/^     fef:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
fetchaddr	syscall.c	/^fetchaddr(addr_t addr, addr_t *ip)$/;"	f
fetcharg	syscall.c	/^fetcharg(int n)$/;"	f	file:
fetchint	syscall.c	/^fetchint(addr_t addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(addr_t addr, char **pp)$/;"	f
ff	cat.asm	/^  ff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	ls.asm	/^      ff:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ff	mkdir.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff	rm.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff0	grep.asm	/^ ff0:	c9                   	leaveq $/;"	l
ff1	grep.asm	/^ ff1:	c3                   	retq   $/;"	l
ff1	prettyprint.asm	/^     ff1:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ff2	usertests.asm	/^     ff2:	00 00 00 $/;"	l
ff4	ls.asm	/^     ff4:	75 07                	jne    ffd <malloc+0x130>$/;"	l
ff4	sh.asm	/^     ff4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ff5	usertests.asm	/^     ff5:	ff d0                	callq  *%rax$/;"	l
ff6	ls.asm	/^     ff6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ff7	usertests.asm	/^     ff7:	90                   	nop$/;"	l
ff8	prettyprint.asm	/^     ff8:	00 00 00 $/;"	l
ff8	sh.asm	/^     ff8:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ff8	usertests.asm	/^     ff8:	5d                   	pop    %rbp$/;"	l
ff9	usertests.asm	/^     ff9:	c3                   	retq   $/;"	l
ffa	usertests.asm	/^     ffa:	55                   	push   %rbp$/;"	l
ffb	ls.asm	/^     ffb:	eb 18                	jmp    1015 <malloc+0x148>$/;"	l
ffb	prettyprint.asm	/^     ffb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffb	usertests.asm	/^     ffb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffc	sh.asm	/^     ffc:	7e 16                	jle    1014 <parseexec+0x12f>$/;"	l
ffd	ls.asm	/^     ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffe	prettyprint.asm	/^     ffe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffe	sh.asm	/^     ffe:	48 bf 49 1e 00 00 00 	movabs $0x1e49,%rdi$/;"	l
ffe	usertests.asm	/^     ffe:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000 <begin>:$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh$/;"	l
ffff800000100006	kernel.asm	/^ffff800000100006:	01 00                	add    %eax,(%rax)$/;"	l
ffff800000100008	kernel.asm	/^ffff800000100008:	fe 4f 51             	decb   0x51(%rdi)$/;"	l
ffff80000010000b	kernel.asm	/^ffff80000010000b:	e4 00                	in     $0x0,%al$/;"	l
ffff80000010000d	kernel.asm	/^ffff80000010000d:	00 10                	add    %dl,(%rax)$/;"	l
ffff80000010000f	kernel.asm	/^ffff80000010000f:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100011	kernel.asm	/^ffff800000100011:	00 10                	add    %dl,(%rax)$/;"	l
ffff800000100013	kernel.asm	/^ffff800000100013:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100015	kernel.asm	/^ffff800000100015:	10 11                	adc    %dl,(%rcx)$/;"	l
ffff800000100017	kernel.asm	/^ffff800000100017:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100019	kernel.asm	/^ffff800000100019:	f0 11 00             	lock adc %eax,(%rax)$/;"	l
ffff80000010001c	kernel.asm	/^ffff80000010001c:	20 00                	and    %al,(%rax)$/;"	l
ffff80000010001e	kernel.asm	/^ffff80000010001e:	10 00                	adc    %al,(%rax)$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020 <mboot_entry>:$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020:	31 c0                	xor    %eax,%eax$/;"	l
ffff800000100022	kernel.asm	/^ffff800000100022:	bf 00 10 00 00       	mov    $0x1000,%edi$/;"	l
ffff800000100027	kernel.asm	/^ffff800000100027:	b9 00 20 00 00       	mov    $0x2000,%ecx$/;"	l
ffff80000010002c	kernel.asm	/^ffff80000010002c:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff80000010002e	kernel.asm	/^ffff80000010002e:	b8 03 20 00 00       	mov    $0x2003,%eax$/;"	l
ffff800000100033	kernel.asm	/^ffff800000100033:	a3 00 10 00 00 a3 00 	movabs %eax,0x1800a300001000$/;"	l
ffff80000010003a	kernel.asm	/^ffff80000010003a:	18 00 $/;"	l
ffff80000010003c	kernel.asm	/^ffff80000010003c:	00 b8 83 00 00 00    	add    %bh,0x83(%rax)$/;"	l
ffff800000100042	kernel.asm	/^ffff800000100042:	a3                   	.byte 0xa3$/;"	l
ffff800000100043	kernel.asm	/^ffff800000100043:	00 20                	add    %ah,(%rax)$/;"	l
ffff800000100045	kernel.asm	/^ffff800000100045:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100047	kernel.asm	/^ffff800000100047:	31 db                	xor    %ebx,%ebx$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049 <entry32mp>:$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049:	b8 00 10 00 00       	mov    $0x1000,%eax$/;"	l
ffff80000010004e	kernel.asm	/^ffff80000010004e:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff800000100051	kernel.asm	/^ffff800000100051:	0f 01 15 90 00 10 00 	lgdt   0x100090(%rip)        # ffff8000002000e8 <end+0xe10e8>$/;"	l
ffff800000100058	kernel.asm	/^ffff800000100058:	0f 20 e0             	mov    %cr4,%rax$/;"	l
ffff80000010005b	kernel.asm	/^ffff80000010005b:	0f ba e8 05          	bts    $0x5,%eax$/;"	l
ffff80000010005f	kernel.asm	/^ffff80000010005f:	0f 22 e0             	mov    %rax,%cr4$/;"	l
ffff800000100062	kernel.asm	/^ffff800000100062:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx$/;"	l
ffff800000100067	kernel.asm	/^ffff800000100067:	0f 32                	rdmsr  $/;"	l
ffff800000100069	kernel.asm	/^ffff800000100069:	0f ba e8 00          	bts    $0x0,%eax$/;"	l
ffff80000010006d	kernel.asm	/^ffff80000010006d:	0f ba e8 08          	bts    $0x8,%eax$/;"	l
ffff800000100071	kernel.asm	/^ffff800000100071:	0f 30                	wrmsr  $/;"	l
ffff800000100073	kernel.asm	/^ffff800000100073:	0f 20 c0             	mov    %cr0,%rax$/;"	l
ffff800000100076	kernel.asm	/^ffff800000100076:	0d 02 00 01 80       	or     $0x80010002,%eax$/;"	l
ffff80000010007b	kernel.asm	/^ffff80000010007b:	0f 22 c0             	mov    %rax,%cr0$/;"	l
ffff80000010007e	kernel.asm	/^ffff80000010007e:	ea                   	(bad)  $/;"	l
ffff80000010007f	kernel.asm	/^ffff80000010007f:	c0 00 10             	rolb   $0x10,(%rax)$/;"	l
ffff800000100082	kernel.asm	/^ffff800000100082:	00 08                	add    %cl,(%rax)$/;"	l
ffff800000100084	kernel.asm	/^ffff800000100084:	00 90 66 2e 0f 1f    	add    %dl,0x1f0f2e66(%rax)$/;"	l
ffff80000010008a	kernel.asm	/^ffff80000010008a:	84 00                	test   %al,(%rax)$/;"	l
ffff80000010008c	kernel.asm	/^ffff80000010008c:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090 <gdtr64>:$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090:	17                   	(bad)  $/;"	l
ffff800000100091	kernel.asm	/^ffff800000100091:	00 a0 00 10 00 00    	add    %ah,0x1000(%rax)$/;"	l
ffff800000100097	kernel.asm	/^ffff800000100097:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100099	kernel.asm	/^ffff800000100099:	00 66 0f             	add    %ah,0xf(%rsi)$/;"	l
ffff80000010009c	kernel.asm	/^ffff80000010009c:	1f                   	(bad)  $/;"	l
ffff80000010009d	kernel.asm	/^ffff80000010009d:	44 00 00             	add    %r8b,(%rax)$/;"	l
ffff8000001000a0	kernel.asm	/^ffff8000001000a0 <gdt64_begin>:$/;"	l
ffff8000001000ac	kernel.asm	/^ffff8000001000ac:	00 98 20 00 00 00    	add    %bl,0x20(%rax)$/;"	l
ffff8000001000b2	kernel.asm	/^ffff8000001000b2:	00 00                	add    %al,(%rax)$/;"	l
ffff8000001000b4	kernel.asm	/^ffff8000001000b4:	00                   	.byte 0x0$/;"	l
ffff8000001000b5	kernel.asm	/^ffff8000001000b5:	90                   	nop$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8 <gdt64_end>:$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)$/;"	l
ffff8000001000bf	kernel.asm	/^ffff8000001000bf:	00 $/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0 <entry64low>:$/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0:	48 b8 cc 00 10 00 00 	movabs $0xffff8000001000cc,%rax$/;"	l
ffff8000001000c7	kernel.asm	/^ffff8000001000c7:	80 ff ff $/;"	l
ffff8000001000ca	kernel.asm	/^ffff8000001000ca:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc <_start>:$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc:	48 31 c0             	xor    %rax,%rax$/;"	l
ffff8000001000cf	kernel.asm	/^ffff8000001000cf:	8e d0                	mov    %eax,%ss$/;"	l
ffff8000001000d1	kernel.asm	/^ffff8000001000d1:	8e d8                	mov    %eax,%ds$/;"	l
ffff8000001000d3	kernel.asm	/^ffff8000001000d3:	8e c0                	mov    %eax,%es$/;"	l
ffff8000001000d5	kernel.asm	/^ffff8000001000d5:	8e e0                	mov    %eax,%fs$/;"	l
ffff8000001000d7	kernel.asm	/^ffff8000001000d7:	8e e8                	mov    %eax,%gs$/;"	l
ffff8000001000d9	kernel.asm	/^ffff8000001000d9:	85 db                	test   %ebx,%ebx$/;"	l
ffff8000001000db	kernel.asm	/^ffff8000001000db:	75 14                	jne    ffff8000001000f1 <entry64mp>$/;"	l
ffff8000001000dd	kernel.asm	/^ffff8000001000dd:	48 b8 00 00 01 00 00 	movabs $0xffff800000010000,%rax$/;"	l
ffff8000001000e4	kernel.asm	/^ffff8000001000e4:	80 ff ff $/;"	l
ffff8000001000e7	kernel.asm	/^ffff8000001000e7:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff8000001000ea	kernel.asm	/^ffff8000001000ea:	e9 6f 52 00 00       	jmpq   ffff80000010535e <main>$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef <__deadloop>:$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef:	eb fe                	jmp    ffff8000001000ef <__deadloop>$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1 <entry64mp>:$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax$/;"	l
ffff8000001000f8	kernel.asm	/^ffff8000001000f8:	48 8b 60 f0          	mov    -0x10(%rax),%rsp$/;"	l
ffff8000001000fc	kernel.asm	/^ffff8000001000fc:	e9 96 53 00 00       	jmpq   ffff800000105497 <mpenter>$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101 <wrmsr>:$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101:	48 89 f9             	mov    %rdi,%rcx$/;"	l
ffff800000100104	kernel.asm	/^ffff800000100104:	48 89 f0             	mov    %rsi,%rax$/;"	l
ffff800000100107	kernel.asm	/^ffff800000100107:	48 c1 ee 20          	shr    $0x20,%rsi$/;"	l
ffff80000010010b	kernel.asm	/^ffff80000010010b:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff80000010010e	kernel.asm	/^ffff80000010010e:	0f 30                	wrmsr  $/;"	l
ffff800000100110	kernel.asm	/^ffff800000100110:	c3                   	retq   $/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111 <ignore_sysret>:$/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111:	48 c7 c0 da ff ff ff 	mov    $0xffffffffffffffda,%rax$/;"	l
ffff800000100118	kernel.asm	/^ffff800000100118:	0f 07                	sysret $/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a <syscall_entry>:$/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a:	48 89 44 24 f8       	mov    %rax,-0x8(%rsp)$/;"	l
ffff80000010011f	kernel.asm	/^ffff80000010011f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000100126	kernel.asm	/^ffff800000100126:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010012a	kernel.asm	/^ffff80000010012a:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010012e	kernel.asm	/^ffff80000010012e:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000100134	kernel.asm	/^ffff800000100134:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff800000100138	kernel.asm	/^ffff800000100138:	48 89 20             	mov    %rsp,(%rax)$/;"	l
ffff80000010013b	kernel.asm	/^ffff80000010013b:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff80000010013e	kernel.asm	/^ffff80000010013e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100141	kernel.asm	/^ffff800000100141:	48 8b 40 f8          	mov    -0x8(%rax),%rax$/;"	l
ffff800000100145	kernel.asm	/^ffff800000100145:	41 53                	push   %r11$/;"	l
ffff800000100147	kernel.asm	/^ffff800000100147:	6a 23                	pushq  $0x23$/;"	l
ffff800000100149	kernel.asm	/^ffff800000100149:	51                   	push   %rcx$/;"	l
ffff80000010014a	kernel.asm	/^ffff80000010014a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010014c	kernel.asm	/^ffff80000010014c:	6a 40                	pushq  $0x40$/;"	l
ffff80000010014e	kernel.asm	/^ffff80000010014e:	e9 1b 92 00 00       	jmpq   ffff80000010936e <syscall_trap>$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153 <binit>:$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153:	55                   	push   %rbp$/;"	l
ffff800000100154	kernel.asm	/^ffff800000100154:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100157	kernel.asm	/^ffff800000100157:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010015b	kernel.asm	/^ffff80000010015b:	48 be 70 ca 10 00 00 	movabs $0xffff80000010ca70,%rsi$/;"	l
ffff800000100162	kernel.asm	/^ffff800000100162:	80 ff ff $/;"	l
ffff800000100165	kernel.asm	/^ffff800000100165:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff80000010016c	kernel.asm	/^ffff80000010016c:	80 ff ff $/;"	l
ffff80000010016f	kernel.asm	/^ffff80000010016f:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff800000100176	kernel.asm	/^ffff800000100176:	80 ff ff $/;"	l
ffff800000100179	kernel.asm	/^ffff800000100179:	ff d0                	callq  *%rax$/;"	l
ffff80000010017b	kernel.asm	/^ffff80000010017b:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100182	kernel.asm	/^ffff800000100182:	80 ff ff $/;"	l
ffff800000100185	kernel.asm	/^ffff800000100185:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff80000010018c	kernel.asm	/^ffff80000010018c:	80 ff ff $/;"	l
ffff80000010018f	kernel.asm	/^ffff80000010018f:	48 89 88 a0 51 00 00 	mov    %rcx,0x51a0(%rax)$/;"	l
ffff800000100196	kernel.asm	/^ffff800000100196:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010019d	kernel.asm	/^ffff80000010019d:	80 ff ff $/;"	l
ffff8000001001a0	kernel.asm	/^ffff8000001001a0:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff8000001001a7	kernel.asm	/^ffff8000001001a7:	80 ff ff $/;"	l
ffff8000001001aa	kernel.asm	/^ffff8000001001aa:	48 89 88 a8 51 00 00 	mov    %rcx,0x51a8(%rax)$/;"	l
ffff8000001001b1	kernel.asm	/^ffff8000001001b1:	48 b8 68 10 11 00 00 	movabs $0xffff800000111068,%rax$/;"	l
ffff8000001001b8	kernel.asm	/^ffff8000001001b8:	80 ff ff $/;"	l
ffff8000001001bb	kernel.asm	/^ffff8000001001bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001001bf	kernel.asm	/^ffff8000001001bf:	e9 8b 00 00 00       	jmpq   ffff80000010024f <binit+0xfc>$/;"	l
ffff8000001001c4	kernel.asm	/^ffff8000001001c4:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001001cb	kernel.asm	/^ffff8000001001cb:	80 ff ff $/;"	l
ffff8000001001ce	kernel.asm	/^ffff8000001001ce:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff8000001001d5	kernel.asm	/^ffff8000001001d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001d9	kernel.asm	/^ffff8000001001d9:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff8000001001e0	kernel.asm	/^ffff8000001001e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001e4	kernel.asm	/^ffff8000001001e4:	48 be 08 61 11 00 00 	movabs $0xffff800000116108,%rsi$/;"	l
ffff8000001001eb	kernel.asm	/^ffff8000001001eb:	80 ff ff $/;"	l
ffff8000001001ee	kernel.asm	/^ffff8000001001ee:	48 89 b0 98 00 00 00 	mov    %rsi,0x98(%rax)$/;"	l
ffff8000001001f5	kernel.asm	/^ffff8000001001f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001f9	kernel.asm	/^ffff8000001001f9:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001001fd	kernel.asm	/^ffff8000001001fd:	48 be 77 ca 10 00 00 	movabs $0xffff80000010ca77,%rsi$/;"	l
ffff800000100204	kernel.asm	/^ffff800000100204:	80 ff ff $/;"	l
ffff800000100207	kernel.asm	/^ffff800000100207:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010020a	kernel.asm	/^ffff80000010020a:	48 b8 f2 70 10 00 00 	movabs $0xffff8000001070f2,%rax$/;"	l
ffff800000100211	kernel.asm	/^ffff800000100211:	80 ff ff $/;"	l
ffff800000100214	kernel.asm	/^ffff800000100214:	ff d0                	callq  *%rax$/;"	l
ffff800000100216	kernel.asm	/^ffff800000100216:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010021d	kernel.asm	/^ffff80000010021d:	80 ff ff $/;"	l
ffff800000100220	kernel.asm	/^ffff800000100220:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff800000100227	kernel.asm	/^ffff800000100227:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010022b	kernel.asm	/^ffff80000010022b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff800000100232	kernel.asm	/^ffff800000100232:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100239	kernel.asm	/^ffff800000100239:	80 ff ff $/;"	l
ffff80000010023c	kernel.asm	/^ffff80000010023c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100240	kernel.asm	/^ffff800000100240:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff800000100247	kernel.asm	/^ffff800000100247:	48 81 45 f8 b0 02 00 	addq   $0x2b0,-0x8(%rbp)$/;"	l
ffff80000010024e	kernel.asm	/^ffff80000010024e:	00 $/;"	l
ffff80000010024f	kernel.asm	/^ffff80000010024f:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff800000100256	kernel.asm	/^ffff800000100256:	80 ff ff $/;"	l
ffff800000100259	kernel.asm	/^ffff800000100259:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff80000010025d	kernel.asm	/^ffff80000010025d:	0f 82 61 ff ff ff    	jb     ffff8000001001c4 <binit+0x71>$/;"	l
ffff800000100263	kernel.asm	/^ffff800000100263:	90                   	nop$/;"	l
ffff800000100264	kernel.asm	/^ffff800000100264:	c9                   	leaveq $/;"	l
ffff800000100265	kernel.asm	/^ffff800000100265:	c3                   	retq   $/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266 <bget>:$/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266:	55                   	push   %rbp$/;"	l
ffff800000100267	kernel.asm	/^ffff800000100267:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010026a	kernel.asm	/^ffff80000010026a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010026e	kernel.asm	/^ffff80000010026e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100271	kernel.asm	/^ffff800000100271:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100274	kernel.asm	/^ffff800000100274:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff80000010027b	kernel.asm	/^ffff80000010027b:	80 ff ff $/;"	l
ffff80000010027e	kernel.asm	/^ffff80000010027e:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000100285	kernel.asm	/^ffff800000100285:	80 ff ff $/;"	l
ffff800000100288	kernel.asm	/^ffff800000100288:	ff d0                	callq  *%rax$/;"	l
ffff80000010028a	kernel.asm	/^ffff80000010028a:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100291	kernel.asm	/^ffff800000100291:	80 ff ff $/;"	l
ffff800000100294	kernel.asm	/^ffff800000100294:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff80000010029b	kernel.asm	/^ffff80000010029b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010029f	kernel.asm	/^ffff80000010029f:	eb 74                	jmp    ffff800000100315 <bget+0xaf>$/;"	l
ffff8000001002a1	kernel.asm	/^ffff8000001002a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002a5	kernel.asm	/^ffff8000001002a5:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001002a8	kernel.asm	/^ffff8000001002a8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff8000001002ab	kernel.asm	/^ffff8000001002ab:	75 59                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002ad	kernel.asm	/^ffff8000001002ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002b1	kernel.asm	/^ffff8000001002b1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001002b4	kernel.asm	/^ffff8000001002b4:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff8000001002b7	kernel.asm	/^ffff8000001002b7:	75 4d                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002b9	kernel.asm	/^ffff8000001002b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002bd	kernel.asm	/^ffff8000001002bd:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff8000001002c3	kernel.asm	/^ffff8000001002c3:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001002c6	kernel.asm	/^ffff8000001002c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ca	kernel.asm	/^ffff8000001002ca:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff8000001002d0	kernel.asm	/^ffff8000001002d0:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff8000001002d7	kernel.asm	/^ffff8000001002d7:	80 ff ff $/;"	l
ffff8000001002da	kernel.asm	/^ffff8000001002da:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001002e1	kernel.asm	/^ffff8000001002e1:	80 ff ff $/;"	l
ffff8000001002e4	kernel.asm	/^ffff8000001002e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001002e6	kernel.asm	/^ffff8000001002e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ea	kernel.asm	/^ffff8000001002ea:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001002ee	kernel.asm	/^ffff8000001002ee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001002f1	kernel.asm	/^ffff8000001002f1:	48 b8 47 71 10 00 00 	movabs $0xffff800000107147,%rax$/;"	l
ffff8000001002f8	kernel.asm	/^ffff8000001002f8:	80 ff ff $/;"	l
ffff8000001002fb	kernel.asm	/^ffff8000001002fb:	ff d0                	callq  *%rax$/;"	l
ffff8000001002fd	kernel.asm	/^ffff8000001002fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100301	kernel.asm	/^ffff800000100301:	e9 f0 00 00 00       	jmpq   ffff8000001003f6 <bget+0x190>$/;"	l
ffff800000100306	kernel.asm	/^ffff800000100306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010030a	kernel.asm	/^ffff80000010030a:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100311	kernel.asm	/^ffff800000100311:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100315	kernel.asm	/^ffff800000100315:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff80000010031c	kernel.asm	/^ffff80000010031c:	80 ff ff $/;"	l
ffff80000010031f	kernel.asm	/^ffff80000010031f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000100323	kernel.asm	/^ffff800000100323:	0f 85 78 ff ff ff    	jne    ffff8000001002a1 <bget+0x3b>$/;"	l
ffff800000100329	kernel.asm	/^ffff800000100329:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100330	kernel.asm	/^ffff800000100330:	80 ff ff $/;"	l
ffff800000100333	kernel.asm	/^ffff800000100333:	48 8b 80 a0 51 00 00 	mov    0x51a0(%rax),%rax$/;"	l
ffff80000010033a	kernel.asm	/^ffff80000010033a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010033e	kernel.asm	/^ffff80000010033e:	e9 89 00 00 00       	jmpq   ffff8000001003cc <bget+0x166>$/;"	l
ffff800000100343	kernel.asm	/^ffff800000100343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100347	kernel.asm	/^ffff800000100347:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010034d	kernel.asm	/^ffff80000010034d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010034f	kernel.asm	/^ffff80000010034f:	75 6c                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff800000100351	kernel.asm	/^ffff800000100351:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100355	kernel.asm	/^ffff800000100355:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100357	kernel.asm	/^ffff800000100357:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010035a	kernel.asm	/^ffff80000010035a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010035c	kernel.asm	/^ffff80000010035c:	75 5f                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff80000010035e	kernel.asm	/^ffff80000010035e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100362	kernel.asm	/^ffff800000100362:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100365	kernel.asm	/^ffff800000100365:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000100368	kernel.asm	/^ffff800000100368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010036c	kernel.asm	/^ffff80000010036c:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff80000010036f	kernel.asm	/^ffff80000010036f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000100372	kernel.asm	/^ffff800000100372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100376	kernel.asm	/^ffff800000100376:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff80000010037c	kernel.asm	/^ffff80000010037c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100380	kernel.asm	/^ffff800000100380:	c7 80 90 00 00 00 01 	movl   $0x1,0x90(%rax)$/;"	l
ffff800000100387	kernel.asm	/^ffff800000100387:	00 00 00 $/;"	l
ffff80000010038a	kernel.asm	/^ffff80000010038a:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff800000100391	kernel.asm	/^ffff800000100391:	80 ff ff $/;"	l
ffff800000100394	kernel.asm	/^ffff800000100394:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010039b	kernel.asm	/^ffff80000010039b:	80 ff ff $/;"	l
ffff80000010039e	kernel.asm	/^ffff80000010039e:	ff d0                	callq  *%rax$/;"	l
ffff8000001003a0	kernel.asm	/^ffff8000001003a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003a4	kernel.asm	/^ffff8000001003a4:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001003a8	kernel.asm	/^ffff8000001003a8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001003ab	kernel.asm	/^ffff8000001003ab:	48 b8 47 71 10 00 00 	movabs $0xffff800000107147,%rax$/;"	l
ffff8000001003b2	kernel.asm	/^ffff8000001003b2:	80 ff ff $/;"	l
ffff8000001003b5	kernel.asm	/^ffff8000001003b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001003b7	kernel.asm	/^ffff8000001003b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003bb	kernel.asm	/^ffff8000001003bb:	eb 39                	jmp    ffff8000001003f6 <bget+0x190>$/;"	l
ffff8000001003bd	kernel.asm	/^ffff8000001003bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003c1	kernel.asm	/^ffff8000001003c1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff8000001003c8	kernel.asm	/^ffff8000001003c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001003cc	kernel.asm	/^ffff8000001003cc:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff8000001003d3	kernel.asm	/^ffff8000001003d3:	80 ff ff $/;"	l
ffff8000001003d6	kernel.asm	/^ffff8000001003d6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff8000001003da	kernel.asm	/^ffff8000001003da:	0f 85 63 ff ff ff    	jne    ffff800000100343 <bget+0xdd>$/;"	l
ffff8000001003e0	kernel.asm	/^ffff8000001003e0:	48 bf 7e ca 10 00 00 	movabs $0xffff80000010ca7e,%rdi$/;"	l
ffff8000001003e7	kernel.asm	/^ffff8000001003e7:	80 ff ff $/;"	l
ffff8000001003ea	kernel.asm	/^ffff8000001003ea:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001003f1	kernel.asm	/^ffff8000001003f1:	80 ff ff $/;"	l
ffff8000001003f4	kernel.asm	/^ffff8000001003f4:	ff d0                	callq  *%rax$/;"	l
ffff8000001003f6	kernel.asm	/^ffff8000001003f6:	c9                   	leaveq $/;"	l
ffff8000001003f7	kernel.asm	/^ffff8000001003f7:	c3                   	retq   $/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8 <bread>:$/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8:	55                   	push   %rbp$/;"	l
ffff8000001003f9	kernel.asm	/^ffff8000001003f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001003fc	kernel.asm	/^ffff8000001003fc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100400	kernel.asm	/^ffff800000100400:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100403	kernel.asm	/^ffff800000100403:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100406	kernel.asm	/^ffff800000100406:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000100409	kernel.asm	/^ffff800000100409:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010040c	kernel.asm	/^ffff80000010040c:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010040e	kernel.asm	/^ffff80000010040e:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100410	kernel.asm	/^ffff800000100410:	48 b8 66 02 10 00 00 	movabs $0xffff800000100266,%rax$/;"	l
ffff800000100417	kernel.asm	/^ffff800000100417:	80 ff ff $/;"	l
ffff80000010041a	kernel.asm	/^ffff80000010041a:	ff d0                	callq  *%rax$/;"	l
ffff80000010041c	kernel.asm	/^ffff80000010041c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100420	kernel.asm	/^ffff800000100420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100424	kernel.asm	/^ffff800000100424:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100426	kernel.asm	/^ffff800000100426:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000100429	kernel.asm	/^ffff800000100429:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010042b	kernel.asm	/^ffff80000010042b:	75 13                	jne    ffff800000100440 <bread+0x48>$/;"	l
ffff80000010042d	kernel.asm	/^ffff80000010042d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100431	kernel.asm	/^ffff800000100431:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100434	kernel.asm	/^ffff800000100434:	48 b8 8b 3c 10 00 00 	movabs $0xffff800000103c8b,%rax$/;"	l
ffff80000010043b	kernel.asm	/^ffff80000010043b:	80 ff ff $/;"	l
ffff80000010043e	kernel.asm	/^ffff80000010043e:	ff d0                	callq  *%rax$/;"	l
ffff800000100440	kernel.asm	/^ffff800000100440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100444	kernel.asm	/^ffff800000100444:	c9                   	leaveq $/;"	l
ffff800000100445	kernel.asm	/^ffff800000100445:	c3                   	retq   $/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446 <bwrite>:$/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446:	55                   	push   %rbp$/;"	l
ffff800000100447	kernel.asm	/^ffff800000100447:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010044a	kernel.asm	/^ffff80000010044a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010044e	kernel.asm	/^ffff80000010044e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000100452	kernel.asm	/^ffff800000100452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100456	kernel.asm	/^ffff800000100456:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010045a	kernel.asm	/^ffff80000010045a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010045d	kernel.asm	/^ffff80000010045d:	48 b8 32 72 10 00 00 	movabs $0xffff800000107232,%rax$/;"	l
ffff800000100464	kernel.asm	/^ffff800000100464:	80 ff ff $/;"	l
ffff800000100467	kernel.asm	/^ffff800000100467:	ff d0                	callq  *%rax$/;"	l
ffff800000100469	kernel.asm	/^ffff800000100469:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010046b	kernel.asm	/^ffff80000010046b:	75 16                	jne    ffff800000100483 <bwrite+0x3d>$/;"	l
ffff80000010046d	kernel.asm	/^ffff80000010046d:	48 bf 8f ca 10 00 00 	movabs $0xffff80000010ca8f,%rdi$/;"	l
ffff800000100474	kernel.asm	/^ffff800000100474:	80 ff ff $/;"	l
ffff800000100477	kernel.asm	/^ffff800000100477:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010047e	kernel.asm	/^ffff80000010047e:	80 ff ff $/;"	l
ffff800000100481	kernel.asm	/^ffff800000100481:	ff d0                	callq  *%rax$/;"	l
ffff800000100483	kernel.asm	/^ffff800000100483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100487	kernel.asm	/^ffff800000100487:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100489	kernel.asm	/^ffff800000100489:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff80000010048c	kernel.asm	/^ffff80000010048c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010048e	kernel.asm	/^ffff80000010048e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100492	kernel.asm	/^ffff800000100492:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000100494	kernel.asm	/^ffff800000100494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100498	kernel.asm	/^ffff800000100498:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010049b	kernel.asm	/^ffff80000010049b:	48 b8 8b 3c 10 00 00 	movabs $0xffff800000103c8b,%rax$/;"	l
ffff8000001004a2	kernel.asm	/^ffff8000001004a2:	80 ff ff $/;"	l
ffff8000001004a5	kernel.asm	/^ffff8000001004a5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004a7	kernel.asm	/^ffff8000001004a7:	90                   	nop$/;"	l
ffff8000001004a8	kernel.asm	/^ffff8000001004a8:	c9                   	leaveq $/;"	l
ffff8000001004a9	kernel.asm	/^ffff8000001004a9:	c3                   	retq   $/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa <brelse>:$/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa:	55                   	push   %rbp$/;"	l
ffff8000001004ab	kernel.asm	/^ffff8000001004ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001004ae	kernel.asm	/^ffff8000001004ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001004b2	kernel.asm	/^ffff8000001004b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001004b6	kernel.asm	/^ffff8000001004b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004ba	kernel.asm	/^ffff8000001004ba:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004be	kernel.asm	/^ffff8000001004be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004c1	kernel.asm	/^ffff8000001004c1:	48 b8 32 72 10 00 00 	movabs $0xffff800000107232,%rax$/;"	l
ffff8000001004c8	kernel.asm	/^ffff8000001004c8:	80 ff ff $/;"	l
ffff8000001004cb	kernel.asm	/^ffff8000001004cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001004cd	kernel.asm	/^ffff8000001004cd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001004cf	kernel.asm	/^ffff8000001004cf:	75 16                	jne    ffff8000001004e7 <brelse+0x3d>$/;"	l
ffff8000001004d1	kernel.asm	/^ffff8000001004d1:	48 bf 96 ca 10 00 00 	movabs $0xffff80000010ca96,%rdi$/;"	l
ffff8000001004d8	kernel.asm	/^ffff8000001004d8:	80 ff ff $/;"	l
ffff8000001004db	kernel.asm	/^ffff8000001004db:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001004e2	kernel.asm	/^ffff8000001004e2:	80 ff ff $/;"	l
ffff8000001004e5	kernel.asm	/^ffff8000001004e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004e7	kernel.asm	/^ffff8000001004e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004eb	kernel.asm	/^ffff8000001004eb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004ef	kernel.asm	/^ffff8000001004ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004f2	kernel.asm	/^ffff8000001004f2:	48 b8 cd 71 10 00 00 	movabs $0xffff8000001071cd,%rax$/;"	l
ffff8000001004f9	kernel.asm	/^ffff8000001004f9:	80 ff ff $/;"	l
ffff8000001004fc	kernel.asm	/^ffff8000001004fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001004fe	kernel.asm	/^ffff8000001004fe:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff800000100505	kernel.asm	/^ffff800000100505:	80 ff ff $/;"	l
ffff800000100508	kernel.asm	/^ffff800000100508:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010050f	kernel.asm	/^ffff80000010050f:	80 ff ff $/;"	l
ffff800000100512	kernel.asm	/^ffff800000100512:	ff d0                	callq  *%rax$/;"	l
ffff800000100514	kernel.asm	/^ffff800000100514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100518	kernel.asm	/^ffff800000100518:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010051e	kernel.asm	/^ffff80000010051e:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100521	kernel.asm	/^ffff800000100521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100525	kernel.asm	/^ffff800000100525:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff80000010052b	kernel.asm	/^ffff80000010052b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010052f	kernel.asm	/^ffff80000010052f:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000100535	kernel.asm	/^ffff800000100535:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100537	kernel.asm	/^ffff800000100537:	0f 85 9c 00 00 00    	jne    ffff8000001005d9 <brelse+0x12f>$/;"	l
ffff80000010053d	kernel.asm	/^ffff80000010053d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100541	kernel.asm	/^ffff800000100541:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100548	kernel.asm	/^ffff800000100548:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010054c	kernel.asm	/^ffff80000010054c:	48 8b 92 98 00 00 00 	mov    0x98(%rdx),%rdx$/;"	l
ffff800000100553	kernel.asm	/^ffff800000100553:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff80000010055a	kernel.asm	/^ffff80000010055a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010055e	kernel.asm	/^ffff80000010055e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff800000100565	kernel.asm	/^ffff800000100565:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100569	kernel.asm	/^ffff800000100569:	48 8b 92 a0 00 00 00 	mov    0xa0(%rdx),%rdx$/;"	l
ffff800000100570	kernel.asm	/^ffff800000100570:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100577	kernel.asm	/^ffff800000100577:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010057e	kernel.asm	/^ffff80000010057e:	80 ff ff $/;"	l
ffff800000100581	kernel.asm	/^ffff800000100581:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff800000100588	kernel.asm	/^ffff800000100588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010058c	kernel.asm	/^ffff80000010058c:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100593	kernel.asm	/^ffff800000100593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100597	kernel.asm	/^ffff800000100597:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff80000010059e	kernel.asm	/^ffff80000010059e:	80 ff ff $/;"	l
ffff8000001005a1	kernel.asm	/^ffff8000001005a1:	48 89 88 98 00 00 00 	mov    %rcx,0x98(%rax)$/;"	l
ffff8000001005a8	kernel.asm	/^ffff8000001005a8:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001005af	kernel.asm	/^ffff8000001005af:	80 ff ff $/;"	l
ffff8000001005b2	kernel.asm	/^ffff8000001005b2:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff8000001005b9	kernel.asm	/^ffff8000001005b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005bd	kernel.asm	/^ffff8000001005bd:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff8000001005c4	kernel.asm	/^ffff8000001005c4:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001005cb	kernel.asm	/^ffff8000001005cb:	80 ff ff $/;"	l
ffff8000001005ce	kernel.asm	/^ffff8000001005ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005d2	kernel.asm	/^ffff8000001005d2:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff8000001005d9	kernel.asm	/^ffff8000001005d9:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff8000001005e0	kernel.asm	/^ffff8000001005e0:	80 ff ff $/;"	l
ffff8000001005e3	kernel.asm	/^ffff8000001005e3:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001005ea	kernel.asm	/^ffff8000001005ea:	80 ff ff $/;"	l
ffff8000001005ed	kernel.asm	/^ffff8000001005ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001005ef	kernel.asm	/^ffff8000001005ef:	90                   	nop$/;"	l
ffff8000001005f0	kernel.asm	/^ffff8000001005f0:	c9                   	leaveq $/;"	l
ffff8000001005f1	kernel.asm	/^ffff8000001005f1:	c3                   	retq   $/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2 <inb>:$/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2:	55                   	push   %rbp$/;"	l
ffff8000001005f3	kernel.asm	/^ffff8000001005f3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001005f6	kernel.asm	/^ffff8000001005f6:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001005fa	kernel.asm	/^ffff8000001005fa:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001005fc	kernel.asm	/^ffff8000001005fc:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000100600	kernel.asm	/^ffff800000100600:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000100604	kernel.asm	/^ffff800000100604:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100606	kernel.asm	/^ffff800000100606:	ec                   	in     (%dx),%al$/;"	l
ffff800000100607	kernel.asm	/^ffff800000100607:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010060a	kernel.asm	/^ffff80000010060a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010060e	kernel.asm	/^ffff80000010060e:	c9                   	leaveq $/;"	l
ffff80000010060f	kernel.asm	/^ffff80000010060f:	c3                   	retq   $/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610 <outb>:$/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610:	55                   	push   %rbp$/;"	l
ffff800000100611	kernel.asm	/^ffff800000100611:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100614	kernel.asm	/^ffff800000100614:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000100618	kernel.asm	/^ffff800000100618:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010061a	kernel.asm	/^ffff80000010061a:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010061c	kernel.asm	/^ffff80000010061c:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000100620	kernel.asm	/^ffff800000100620:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000100623	kernel.asm	/^ffff800000100623:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000100627	kernel.asm	/^ffff800000100627:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff80000010062b	kernel.asm	/^ffff80000010062b:	ee                   	out    %al,(%dx)$/;"	l
ffff80000010062c	kernel.asm	/^ffff80000010062c:	90                   	nop$/;"	l
ffff80000010062d	kernel.asm	/^ffff80000010062d:	c9                   	leaveq $/;"	l
ffff80000010062e	kernel.asm	/^ffff80000010062e:	c3                   	retq   $/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f <lidt>:$/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f:	55                   	push   %rbp$/;"	l
ffff800000100630	kernel.asm	/^ffff800000100630:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100633	kernel.asm	/^ffff800000100633:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100637	kernel.asm	/^ffff800000100637:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010063b	kernel.asm	/^ffff80000010063b:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010063e	kernel.asm	/^ffff80000010063e:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000100641	kernel.asm	/^ffff800000100641:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100644	kernel.asm	/^ffff800000100644:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff800000100648	kernel.asm	/^ffff800000100648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010064c	kernel.asm	/^ffff80000010064c:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff800000100650	kernel.asm	/^ffff800000100650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100654	kernel.asm	/^ffff800000100654:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff800000100658	kernel.asm	/^ffff800000100658:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010065c	kernel.asm	/^ffff80000010065c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100660	kernel.asm	/^ffff800000100660:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff800000100664	kernel.asm	/^ffff800000100664:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff800000100668	kernel.asm	/^ffff800000100668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010066c	kernel.asm	/^ffff80000010066c:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff800000100670	kernel.asm	/^ffff800000100670:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff800000100674	kernel.asm	/^ffff800000100674:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000100678	kernel.asm	/^ffff800000100678:	0f 01 18             	lidt   (%rax)$/;"	l
ffff80000010067b	kernel.asm	/^ffff80000010067b:	90                   	nop$/;"	l
ffff80000010067c	kernel.asm	/^ffff80000010067c:	c9                   	leaveq $/;"	l
ffff80000010067d	kernel.asm	/^ffff80000010067d:	c3                   	retq   $/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e <cli>:$/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e:	55                   	push   %rbp$/;"	l
ffff80000010067f	kernel.asm	/^ffff80000010067f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100682	kernel.asm	/^ffff800000100682:	fa                   	cli    $/;"	l
ffff800000100683	kernel.asm	/^ffff800000100683:	90                   	nop$/;"	l
ffff800000100684	kernel.asm	/^ffff800000100684:	5d                   	pop    %rbp$/;"	l
ffff800000100685	kernel.asm	/^ffff800000100685:	c3                   	retq   $/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686 <printptr>:$/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686:	55                   	push   %rbp$/;"	l
ffff800000100687	kernel.asm	/^ffff800000100687:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010068a	kernel.asm	/^ffff80000010068a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010068e	kernel.asm	/^ffff80000010068e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100692	kernel.asm	/^ffff800000100692:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100699	kernel.asm	/^ffff800000100699:	eb 33                	jmp    ffff8000001006ce <printptr+0x48>$/;"	l
ffff80000010069b	kernel.asm	/^ffff80000010069b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010069f	kernel.asm	/^ffff80000010069f:	48 c1 e8 3c          	shr    $0x3c,%rax$/;"	l
ffff8000001006a3	kernel.asm	/^ffff8000001006a3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001006a6	kernel.asm	/^ffff8000001006a6:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff8000001006ad	kernel.asm	/^ffff8000001006ad:	80 ff ff $/;"	l
ffff8000001006b0	kernel.asm	/^ffff8000001006b0:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax$/;"	l
ffff8000001006b4	kernel.asm	/^ffff8000001006b4:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001006b7	kernel.asm	/^ffff8000001006b7:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001006b9	kernel.asm	/^ffff8000001006b9:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001006c0	kernel.asm	/^ffff8000001006c0:	80 ff ff $/;"	l
ffff8000001006c3	kernel.asm	/^ffff8000001006c3:	ff d0                	callq  *%rax$/;"	l
ffff8000001006c5	kernel.asm	/^ffff8000001006c5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001006c9	kernel.asm	/^ffff8000001006c9:	48 c1 65 e8 04       	shlq   $0x4,-0x18(%rbp)$/;"	l
ffff8000001006ce	kernel.asm	/^ffff8000001006ce:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001006d1	kernel.asm	/^ffff8000001006d1:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff8000001006d4	kernel.asm	/^ffff8000001006d4:	76 c5                	jbe    ffff80000010069b <printptr+0x15>$/;"	l
ffff8000001006d6	kernel.asm	/^ffff8000001006d6:	90                   	nop$/;"	l
ffff8000001006d7	kernel.asm	/^ffff8000001006d7:	c9                   	leaveq $/;"	l
ffff8000001006d8	kernel.asm	/^ffff8000001006d8:	c3                   	retq   $/;"	l
ffff8000001006d9	kernel.asm	/^ffff8000001006d9 <printint>:$/;"	l
ffff8000001006d9	kernel.asm	/^ffff8000001006d9:	55                   	push   %rbp$/;"	l
ffff8000001006da	kernel.asm	/^ffff8000001006da:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001006dd	kernel.asm	/^ffff8000001006dd:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001006e1	kernel.asm	/^ffff8000001006e1:	89 7d cc             	mov    %edi,-0x34(%rbp)$/;"	l
ffff8000001006e4	kernel.asm	/^ffff8000001006e4:	89 75 c8             	mov    %esi,-0x38(%rbp)$/;"	l
ffff8000001006e7	kernel.asm	/^ffff8000001006e7:	89 55 c4             	mov    %edx,-0x3c(%rbp)$/;"	l
ffff8000001006ea	kernel.asm	/^ffff8000001006ea:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff8000001006ee	kernel.asm	/^ffff8000001006ee:	74 1f                	je     ffff80000010070f <printint+0x36>$/;"	l
ffff8000001006f0	kernel.asm	/^ffff8000001006f0:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001006f3	kernel.asm	/^ffff8000001006f3:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
ffff8000001006f6	kernel.asm	/^ffff8000001006f6:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001006f9	kernel.asm	/^ffff8000001006f9:	89 45 c4             	mov    %eax,-0x3c(%rbp)$/;"	l
ffff8000001006fc	kernel.asm	/^ffff8000001006fc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100700	kernel.asm	/^ffff800000100700:	74 0d                	je     ffff80000010070f <printint+0x36>$/;"	l
ffff800000100702	kernel.asm	/^ffff800000100702:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000100705	kernel.asm	/^ffff800000100705:	f7 d8                	neg    %eax$/;"	l
ffff800000100707	kernel.asm	/^ffff800000100707:	48 98                	cltq   $/;"	l
ffff800000100709	kernel.asm	/^ffff800000100709:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010070d	kernel.asm	/^ffff80000010070d:	eb 09                	jmp    ffff800000100718 <printint+0x3f>$/;"	l
ffff80000010070f	kernel.asm	/^ffff80000010070f:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000100712	kernel.asm	/^ffff800000100712:	48 98                	cltq   $/;"	l
ffff800000100714	kernel.asm	/^ffff800000100714:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000100718	kernel.asm	/^ffff800000100718:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010071f	kernel.asm	/^ffff80000010071f:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100722	kernel.asm	/^ffff800000100722:	8d 41 01             	lea    0x1(%rcx),%eax$/;"	l
ffff800000100725	kernel.asm	/^ffff800000100725:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000100728	kernel.asm	/^ffff800000100728:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010072b	kernel.asm	/^ffff80000010072b:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff80000010072e	kernel.asm	/^ffff80000010072e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000100732	kernel.asm	/^ffff800000100732:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000100737	kernel.asm	/^ffff800000100737:	48 f7 f6             	div    %rsi$/;"	l
ffff80000010073a	kernel.asm	/^ffff80000010073a:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100741	kernel.asm	/^ffff800000100741:	80 ff ff $/;"	l
ffff800000100744	kernel.asm	/^ffff800000100744:	0f b6 14 10          	movzbl (%rax,%rdx,1),%edx$/;"	l
ffff800000100748	kernel.asm	/^ffff800000100748:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff80000010074b	kernel.asm	/^ffff80000010074b:	88 54 05 d0          	mov    %dl,-0x30(%rbp,%rax,1)$/;"	l
ffff80000010074f	kernel.asm	/^ffff80000010074f:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000100752	kernel.asm	/^ffff800000100752:	48 63 f8             	movslq %eax,%rdi$/;"	l
ffff800000100755	kernel.asm	/^ffff800000100755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000100759	kernel.asm	/^ffff800000100759:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010075e	kernel.asm	/^ffff80000010075e:	48 f7 f7             	div    %rdi$/;"	l
ffff800000100761	kernel.asm	/^ffff800000100761:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000100765	kernel.asm	/^ffff800000100765:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010076a	kernel.asm	/^ffff80000010076a:	75 b3                	jne    ffff80000010071f <printint+0x46>$/;"	l
ffff80000010076c	kernel.asm	/^ffff80000010076c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100770	kernel.asm	/^ffff800000100770:	74 2d                	je     ffff80000010079f <printint+0xc6>$/;"	l
ffff800000100772	kernel.asm	/^ffff800000100772:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100775	kernel.asm	/^ffff800000100775:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000100778	kernel.asm	/^ffff800000100778:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff80000010077b	kernel.asm	/^ffff80000010077b:	48 98                	cltq   $/;"	l
ffff80000010077d	kernel.asm	/^ffff80000010077d:	c6 44 05 d0 2d       	movb   $0x2d,-0x30(%rbp,%rax,1)$/;"	l
ffff800000100782	kernel.asm	/^ffff800000100782:	eb 1b                	jmp    ffff80000010079f <printint+0xc6>$/;"	l
ffff800000100784	kernel.asm	/^ffff800000100784:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100787	kernel.asm	/^ffff800000100787:	48 98                	cltq   $/;"	l
ffff800000100789	kernel.asm	/^ffff800000100789:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax$/;"	l
ffff80000010078e	kernel.asm	/^ffff80000010078e:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100791	kernel.asm	/^ffff800000100791:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100793	kernel.asm	/^ffff800000100793:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff80000010079a	kernel.asm	/^ffff80000010079a:	80 ff ff $/;"	l
ffff80000010079d	kernel.asm	/^ffff80000010079d:	ff d0                	callq  *%rax$/;"	l
ffff80000010079f	kernel.asm	/^ffff80000010079f:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001007a3	kernel.asm	/^ffff8000001007a3:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001007a7	kernel.asm	/^ffff8000001007a7:	79 db                	jns    ffff800000100784 <printint+0xab>$/;"	l
ffff8000001007a9	kernel.asm	/^ffff8000001007a9:	90                   	nop$/;"	l
ffff8000001007aa	kernel.asm	/^ffff8000001007aa:	c9                   	leaveq $/;"	l
ffff8000001007ab	kernel.asm	/^ffff8000001007ab:	c3                   	retq   $/;"	l
ffff8000001007ac	kernel.asm	/^ffff8000001007ac <cprintf>:$/;"	l
ffff8000001007ac	kernel.asm	/^ffff8000001007ac:	55                   	push   %rbp$/;"	l
ffff8000001007ad	kernel.asm	/^ffff8000001007ad:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001007b0	kernel.asm	/^ffff8000001007b0:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp$/;"	l
ffff8000001007b7	kernel.asm	/^ffff8000001007b7:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)$/;"	l
ffff8000001007be	kernel.asm	/^ffff8000001007be:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)$/;"	l
ffff8000001007c5	kernel.asm	/^ffff8000001007c5:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)$/;"	l
ffff8000001007cc	kernel.asm	/^ffff8000001007cc:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)$/;"	l
ffff8000001007d3	kernel.asm	/^ffff8000001007d3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)$/;"	l
ffff8000001007da	kernel.asm	/^ffff8000001007da:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)$/;"	l
ffff8000001007e1	kernel.asm	/^ffff8000001007e1:	84 c0                	test   %al,%al$/;"	l
ffff8000001007e3	kernel.asm	/^ffff8000001007e3:	74 20                	je     ffff800000100805 <cprintf+0x59>$/;"	l
ffff8000001007e5	kernel.asm	/^ffff8000001007e5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)$/;"	l
ffff8000001007e9	kernel.asm	/^ffff8000001007e9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)$/;"	l
ffff8000001007ed	kernel.asm	/^ffff8000001007ed:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)$/;"	l
ffff8000001007f1	kernel.asm	/^ffff8000001007f1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)$/;"	l
ffff8000001007f5	kernel.asm	/^ffff8000001007f5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)$/;"	l
ffff8000001007f9	kernel.asm	/^ffff8000001007f9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)$/;"	l
ffff8000001007fd	kernel.asm	/^ffff8000001007fd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)$/;"	l
ffff800000100801	kernel.asm	/^ffff800000100801:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)$/;"	l
ffff800000100805	kernel.asm	/^ffff800000100805:	c7 85 20 ff ff ff 08 	movl   $0x8,-0xe0(%rbp)$/;"	l
ffff80000010080c	kernel.asm	/^ffff80000010080c:	00 00 00 $/;"	l
ffff80000010080f	kernel.asm	/^ffff80000010080f:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
ffff800000100816	kernel.asm	/^ffff800000100816:	00 00 00 $/;"	l
ffff800000100819	kernel.asm	/^ffff800000100819:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
ffff80000010081d	kernel.asm	/^ffff80000010081d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
ffff800000100824	kernel.asm	/^ffff800000100824:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
ffff80000010082b	kernel.asm	/^ffff80000010082b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
ffff800000100832	kernel.asm	/^ffff800000100832:	48 b8 c0 64 11 00 00 	movabs $0xffff8000001164c0,%rax$/;"	l
ffff800000100839	kernel.asm	/^ffff800000100839:	80 ff ff $/;"	l
ffff80000010083c	kernel.asm	/^ffff80000010083c:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff80000010083f	kernel.asm	/^ffff80000010083f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
ffff800000100845	kernel.asm	/^ffff800000100845:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff80000010084c	kernel.asm	/^ffff80000010084c:	74 16                	je     ffff800000100864 <cprintf+0xb8>$/;"	l
ffff80000010084e	kernel.asm	/^ffff80000010084e:	48 bf c0 64 11 00 00 	movabs $0xffff8000001164c0,%rdi$/;"	l
ffff800000100855	kernel.asm	/^ffff800000100855:	80 ff ff $/;"	l
ffff800000100858	kernel.asm	/^ffff800000100858:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010085f	kernel.asm	/^ffff80000010085f:	80 ff ff $/;"	l
ffff800000100862	kernel.asm	/^ffff800000100862:	ff d0                	callq  *%rax$/;"	l
ffff800000100864	kernel.asm	/^ffff800000100864:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)$/;"	l
ffff80000010086b	kernel.asm	/^ffff80000010086b:	00 $/;"	l
ffff80000010086c	kernel.asm	/^ffff80000010086c:	75 16                	jne    ffff800000100884 <cprintf+0xd8>$/;"	l
ffff80000010086e	kernel.asm	/^ffff80000010086e:	48 bf a0 ca 10 00 00 	movabs $0xffff80000010caa0,%rdi$/;"	l
ffff800000100875	kernel.asm	/^ffff800000100875:	80 ff ff $/;"	l
ffff800000100878	kernel.asm	/^ffff800000100878:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010087f	kernel.asm	/^ffff80000010087f:	80 ff ff $/;"	l
ffff800000100882	kernel.asm	/^ffff800000100882:	ff d0                	callq  *%rax$/;"	l
ffff800000100884	kernel.asm	/^ffff800000100884:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)$/;"	l
ffff80000010088b	kernel.asm	/^ffff80000010088b:	00 00 00 $/;"	l
ffff80000010088e	kernel.asm	/^ffff80000010088e:	e9 83 02 00 00       	jmpq   ffff800000100b16 <cprintf+0x36a>$/;"	l
ffff800000100893	kernel.asm	/^ffff800000100893:	83 bd 38 ff ff ff 25 	cmpl   $0x25,-0xc8(%rbp)$/;"	l
ffff80000010089a	kernel.asm	/^ffff80000010089a:	74 19                	je     ffff8000001008b5 <cprintf+0x109>$/;"	l
ffff80000010089c	kernel.asm	/^ffff80000010089c:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff8000001008a2	kernel.asm	/^ffff8000001008a2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001008a4	kernel.asm	/^ffff8000001008a4:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001008ab	kernel.asm	/^ffff8000001008ab:	80 ff ff $/;"	l
ffff8000001008ae	kernel.asm	/^ffff8000001008ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001008b0	kernel.asm	/^ffff8000001008b0:	e9 5a 02 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff8000001008b5	kernel.asm	/^ffff8000001008b5:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff8000001008bc	kernel.asm	/^ffff8000001008bc:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff8000001008c2	kernel.asm	/^ffff8000001008c2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001008c5	kernel.asm	/^ffff8000001008c5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff8000001008cc	kernel.asm	/^ffff8000001008cc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001008cf	kernel.asm	/^ffff8000001008cf:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001008d2	kernel.asm	/^ffff8000001008d2:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001008d5	kernel.asm	/^ffff8000001008d5:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff8000001008da	kernel.asm	/^ffff8000001008da:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff8000001008e0	kernel.asm	/^ffff8000001008e0:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff8000001008e7	kernel.asm	/^ffff8000001008e7:	0f 84 5c 02 00 00    	je     ffff800000100b49 <cprintf+0x39d>$/;"	l
ffff8000001008ed	kernel.asm	/^ffff8000001008ed:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff8000001008f3	kernel.asm	/^ffff8000001008f3:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff8000001008f6	kernel.asm	/^ffff8000001008f6:	0f 84 e9 00 00 00    	je     ffff8000001009e5 <cprintf+0x239>$/;"	l
ffff8000001008fc	kernel.asm	/^ffff8000001008fc:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff8000001008ff	kernel.asm	/^ffff8000001008ff:	7f 13                	jg     ffff800000100914 <cprintf+0x168>$/;"	l
ffff800000100901	kernel.asm	/^ffff800000100901:	83 f8 25             	cmp    $0x25,%eax$/;"	l
ffff800000100904	kernel.asm	/^ffff800000100904:	0f 84 cc 01 00 00    	je     ffff800000100ad6 <cprintf+0x32a>$/;"	l
ffff80000010090a	kernel.asm	/^ffff80000010090a:	83 f8 64             	cmp    $0x64,%eax$/;"	l
ffff80000010090d	kernel.asm	/^ffff80000010090d:	74 18                	je     ffff800000100927 <cprintf+0x17b>$/;"	l
ffff80000010090f	kernel.asm	/^ffff80000010090f:	e9 d5 01 00 00       	jmpq   ffff800000100ae9 <cprintf+0x33d>$/;"	l
ffff800000100914	kernel.asm	/^ffff800000100914:	83 f8 73             	cmp    $0x73,%eax$/;"	l
ffff800000100917	kernel.asm	/^ffff800000100917:	0f 84 1f 01 00 00    	je     ffff800000100a3c <cprintf+0x290>$/;"	l
ffff80000010091d	kernel.asm	/^ffff80000010091d:	83 f8 78             	cmp    $0x78,%eax$/;"	l
ffff800000100920	kernel.asm	/^ffff800000100920:	74 64                	je     ffff800000100986 <cprintf+0x1da>$/;"	l
ffff800000100922	kernel.asm	/^ffff800000100922:	e9 c2 01 00 00       	jmpq   ffff800000100ae9 <cprintf+0x33d>$/;"	l
ffff800000100927	kernel.asm	/^ffff800000100927:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010092d	kernel.asm	/^ffff80000010092d:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff800000100930	kernel.asm	/^ffff800000100930:	73 23                	jae    ffff800000100955 <cprintf+0x1a9>$/;"	l
ffff800000100932	kernel.asm	/^ffff800000100932:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100939	kernel.asm	/^ffff800000100939:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010093f	kernel.asm	/^ffff80000010093f:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100941	kernel.asm	/^ffff800000100941:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100944	kernel.asm	/^ffff800000100944:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010094a	kernel.asm	/^ffff80000010094a:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff80000010094d	kernel.asm	/^ffff80000010094d:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100953	kernel.asm	/^ffff800000100953:	eb 12                	jmp    ffff800000100967 <cprintf+0x1bb>$/;"	l
ffff800000100955	kernel.asm	/^ffff800000100955:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff80000010095c	kernel.asm	/^ffff80000010095c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100960	kernel.asm	/^ffff800000100960:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100967	kernel.asm	/^ffff800000100967:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100969	kernel.asm	/^ffff800000100969:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010096e	kernel.asm	/^ffff80000010096e:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff800000100973	kernel.asm	/^ffff800000100973:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100975	kernel.asm	/^ffff800000100975:	48 b8 d9 06 10 00 00 	movabs $0xffff8000001006d9,%rax$/;"	l
ffff80000010097c	kernel.asm	/^ffff80000010097c:	80 ff ff $/;"	l
ffff80000010097f	kernel.asm	/^ffff80000010097f:	ff d0                	callq  *%rax$/;"	l
ffff800000100981	kernel.asm	/^ffff800000100981:	e9 89 01 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100986	kernel.asm	/^ffff800000100986:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010098c	kernel.asm	/^ffff80000010098c:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff80000010098f	kernel.asm	/^ffff80000010098f:	73 23                	jae    ffff8000001009b4 <cprintf+0x208>$/;"	l
ffff800000100991	kernel.asm	/^ffff800000100991:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100998	kernel.asm	/^ffff800000100998:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010099e	kernel.asm	/^ffff80000010099e:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001009a0	kernel.asm	/^ffff8000001009a0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001009a3	kernel.asm	/^ffff8000001009a3:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009a9	kernel.asm	/^ffff8000001009a9:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff8000001009ac	kernel.asm	/^ffff8000001009ac:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff8000001009b2	kernel.asm	/^ffff8000001009b2:	eb 12                	jmp    ffff8000001009c6 <cprintf+0x21a>$/;"	l
ffff8000001009b4	kernel.asm	/^ffff8000001009b4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff8000001009bb	kernel.asm	/^ffff8000001009bb:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff8000001009bf	kernel.asm	/^ffff8000001009bf:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff8000001009c6	kernel.asm	/^ffff8000001009c6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001009c8	kernel.asm	/^ffff8000001009c8:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001009cd	kernel.asm	/^ffff8000001009cd:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff8000001009d2	kernel.asm	/^ffff8000001009d2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001009d4	kernel.asm	/^ffff8000001009d4:	48 b8 d9 06 10 00 00 	movabs $0xffff8000001006d9,%rax$/;"	l
ffff8000001009db	kernel.asm	/^ffff8000001009db:	80 ff ff $/;"	l
ffff8000001009de	kernel.asm	/^ffff8000001009de:	ff d0                	callq  *%rax$/;"	l
ffff8000001009e0	kernel.asm	/^ffff8000001009e0:	e9 2a 01 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff8000001009e5	kernel.asm	/^ffff8000001009e5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff8000001009eb	kernel.asm	/^ffff8000001009eb:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff8000001009ee	kernel.asm	/^ffff8000001009ee:	73 23                	jae    ffff800000100a13 <cprintf+0x267>$/;"	l
ffff8000001009f0	kernel.asm	/^ffff8000001009f0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff8000001009f7	kernel.asm	/^ffff8000001009f7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009fd	kernel.asm	/^ffff8000001009fd:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001009ff	kernel.asm	/^ffff8000001009ff:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a02	kernel.asm	/^ffff800000100a02:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a08	kernel.asm	/^ffff800000100a08:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a0b	kernel.asm	/^ffff800000100a0b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a11	kernel.asm	/^ffff800000100a11:	eb 12                	jmp    ffff800000100a25 <cprintf+0x279>$/;"	l
ffff800000100a13	kernel.asm	/^ffff800000100a13:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a1a	kernel.asm	/^ffff800000100a1a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a1e	kernel.asm	/^ffff800000100a1e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a25	kernel.asm	/^ffff800000100a25:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a28	kernel.asm	/^ffff800000100a28:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100a2b	kernel.asm	/^ffff800000100a2b:	48 b8 86 06 10 00 00 	movabs $0xffff800000100686,%rax$/;"	l
ffff800000100a32	kernel.asm	/^ffff800000100a32:	80 ff ff $/;"	l
ffff800000100a35	kernel.asm	/^ffff800000100a35:	ff d0                	callq  *%rax$/;"	l
ffff800000100a37	kernel.asm	/^ffff800000100a37:	e9 d3 00 00 00       	jmpq   ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100a3c	kernel.asm	/^ffff800000100a3c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff800000100a42	kernel.asm	/^ffff800000100a42:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff800000100a45	kernel.asm	/^ffff800000100a45:	73 23                	jae    ffff800000100a6a <cprintf+0x2be>$/;"	l
ffff800000100a47	kernel.asm	/^ffff800000100a47:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100a4e	kernel.asm	/^ffff800000100a4e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a54	kernel.asm	/^ffff800000100a54:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100a56	kernel.asm	/^ffff800000100a56:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a59	kernel.asm	/^ffff800000100a59:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a5f	kernel.asm	/^ffff800000100a5f:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a62	kernel.asm	/^ffff800000100a62:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a68	kernel.asm	/^ffff800000100a68:	eb 12                	jmp    ffff800000100a7c <cprintf+0x2d0>$/;"	l
ffff800000100a6a	kernel.asm	/^ffff800000100a6a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a71	kernel.asm	/^ffff800000100a71:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a75	kernel.asm	/^ffff800000100a75:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a7c	kernel.asm	/^ffff800000100a7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a7f	kernel.asm	/^ffff800000100a7f:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100a86	kernel.asm	/^ffff800000100a86:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)$/;"	l
ffff800000100a8d	kernel.asm	/^ffff800000100a8d:	00 $/;"	l
ffff800000100a8e	kernel.asm	/^ffff800000100a8e:	75 36                	jne    ffff800000100ac6 <cprintf+0x31a>$/;"	l
ffff800000100a90	kernel.asm	/^ffff800000100a90:	48 b8 a9 ca 10 00 00 	movabs $0xffff80000010caa9,%rax$/;"	l
ffff800000100a97	kernel.asm	/^ffff800000100a97:	80 ff ff $/;"	l
ffff800000100a9a	kernel.asm	/^ffff800000100a9a:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100aa1	kernel.asm	/^ffff800000100aa1:	eb 23                	jmp    ffff800000100ac6 <cprintf+0x31a>$/;"	l
ffff800000100aa3	kernel.asm	/^ffff800000100aa3:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100aaa	kernel.asm	/^ffff800000100aaa:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100aad	kernel.asm	/^ffff800000100aad:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100ab0	kernel.asm	/^ffff800000100ab0:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ab2	kernel.asm	/^ffff800000100ab2:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100ab9	kernel.asm	/^ffff800000100ab9:	80 ff ff $/;"	l
ffff800000100abc	kernel.asm	/^ffff800000100abc:	ff d0                	callq  *%rax$/;"	l
ffff800000100abe	kernel.asm	/^ffff800000100abe:	48 83 85 40 ff ff ff 	addq   $0x1,-0xc0(%rbp)$/;"	l
ffff800000100ac5	kernel.asm	/^ffff800000100ac5:	01 $/;"	l
ffff800000100ac6	kernel.asm	/^ffff800000100ac6:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100acd	kernel.asm	/^ffff800000100acd:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100ad0	kernel.asm	/^ffff800000100ad0:	84 c0                	test   %al,%al$/;"	l
ffff800000100ad2	kernel.asm	/^ffff800000100ad2:	75 cf                	jne    ffff800000100aa3 <cprintf+0x2f7>$/;"	l
ffff800000100ad4	kernel.asm	/^ffff800000100ad4:	eb 39                	jmp    ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100ad6	kernel.asm	/^ffff800000100ad6:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100adb	kernel.asm	/^ffff800000100adb:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100ae2	kernel.asm	/^ffff800000100ae2:	80 ff ff $/;"	l
ffff800000100ae5	kernel.asm	/^ffff800000100ae5:	ff d0                	callq  *%rax$/;"	l
ffff800000100ae7	kernel.asm	/^ffff800000100ae7:	eb 26                	jmp    ffff800000100b0f <cprintf+0x363>$/;"	l
ffff800000100ae9	kernel.asm	/^ffff800000100ae9:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100aee	kernel.asm	/^ffff800000100aee:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100af5	kernel.asm	/^ffff800000100af5:	80 ff ff $/;"	l
ffff800000100af8	kernel.asm	/^ffff800000100af8:	ff d0                	callq  *%rax$/;"	l
ffff800000100afa	kernel.asm	/^ffff800000100afa:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff800000100b00	kernel.asm	/^ffff800000100b00:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100b02	kernel.asm	/^ffff800000100b02:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100b09	kernel.asm	/^ffff800000100b09:	80 ff ff $/;"	l
ffff800000100b0c	kernel.asm	/^ffff800000100b0c:	ff d0                	callq  *%rax$/;"	l
ffff800000100b0e	kernel.asm	/^ffff800000100b0e:	90                   	nop$/;"	l
ffff800000100b0f	kernel.asm	/^ffff800000100b0f:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff800000100b16	kernel.asm	/^ffff800000100b16:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff800000100b1c	kernel.asm	/^ffff800000100b1c:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000100b1f	kernel.asm	/^ffff800000100b1f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff800000100b26	kernel.asm	/^ffff800000100b26:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100b29	kernel.asm	/^ffff800000100b29:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100b2c	kernel.asm	/^ffff800000100b2c:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100b2f	kernel.asm	/^ffff800000100b2f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000100b34	kernel.asm	/^ffff800000100b34:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff800000100b3a	kernel.asm	/^ffff800000100b3a:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff800000100b41	kernel.asm	/^ffff800000100b41:	0f 85 4c fd ff ff    	jne    ffff800000100893 <cprintf+0xe7>$/;"	l
ffff800000100b47	kernel.asm	/^ffff800000100b47:	eb 01                	jmp    ffff800000100b4a <cprintf+0x39e>$/;"	l
ffff800000100b49	kernel.asm	/^ffff800000100b49:	90                   	nop$/;"	l
ffff800000100b4a	kernel.asm	/^ffff800000100b4a:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff800000100b51	kernel.asm	/^ffff800000100b51:	74 16                	je     ffff800000100b69 <cprintf+0x3bd>$/;"	l
ffff800000100b53	kernel.asm	/^ffff800000100b53:	48 bf c0 64 11 00 00 	movabs $0xffff8000001164c0,%rdi$/;"	l
ffff800000100b5a	kernel.asm	/^ffff800000100b5a:	80 ff ff $/;"	l
ffff800000100b5d	kernel.asm	/^ffff800000100b5d:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000100b64	kernel.asm	/^ffff800000100b64:	80 ff ff $/;"	l
ffff800000100b67	kernel.asm	/^ffff800000100b67:	ff d0                	callq  *%rax$/;"	l
ffff800000100b69	kernel.asm	/^ffff800000100b69:	90                   	nop$/;"	l
ffff800000100b6a	kernel.asm	/^ffff800000100b6a:	c9                   	leaveq $/;"	l
ffff800000100b6b	kernel.asm	/^ffff800000100b6b:	c3                   	retq   $/;"	l
ffff800000100b6c	kernel.asm	/^ffff800000100b6c <panic>:$/;"	l
ffff800000100b6c	kernel.asm	/^ffff800000100b6c:	55                   	push   %rbp$/;"	l
ffff800000100b6d	kernel.asm	/^ffff800000100b6d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100b70	kernel.asm	/^ffff800000100b70:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff800000100b74	kernel.asm	/^ffff800000100b74:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)$/;"	l
ffff800000100b78	kernel.asm	/^ffff800000100b78:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100b7f	kernel.asm	/^ffff800000100b7f:	80 ff ff $/;"	l
ffff800000100b82	kernel.asm	/^ffff800000100b82:	ff d0                	callq  *%rax$/;"	l
ffff800000100b84	kernel.asm	/^ffff800000100b84:	48 b8 c0 64 11 00 00 	movabs $0xffff8000001164c0,%rax$/;"	l
ffff800000100b8b	kernel.asm	/^ffff800000100b8b:	80 ff ff $/;"	l
ffff800000100b8e	kernel.asm	/^ffff800000100b8e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff800000100b95	kernel.asm	/^ffff800000100b95:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000100b9c	kernel.asm	/^ffff800000100b9c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000100ba0	kernel.asm	/^ffff800000100ba0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100ba3	kernel.asm	/^ffff800000100ba3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100ba6	kernel.asm	/^ffff800000100ba6:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100ba8	kernel.asm	/^ffff800000100ba8:	48 bf b0 ca 10 00 00 	movabs $0xffff80000010cab0,%rdi$/;"	l
ffff800000100baf	kernel.asm	/^ffff800000100baf:	80 ff ff $/;"	l
ffff800000100bb2	kernel.asm	/^ffff800000100bb2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bb7	kernel.asm	/^ffff800000100bb7:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bbe	kernel.asm	/^ffff800000100bbe:	80 ff ff $/;"	l
ffff800000100bc1	kernel.asm	/^ffff800000100bc1:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bc3	kernel.asm	/^ffff800000100bc3:	48 8b 45 98          	mov    -0x68(%rbp),%rax$/;"	l
ffff800000100bc7	kernel.asm	/^ffff800000100bc7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100bca	kernel.asm	/^ffff800000100bca:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bcf	kernel.asm	/^ffff800000100bcf:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bd6	kernel.asm	/^ffff800000100bd6:	80 ff ff $/;"	l
ffff800000100bd9	kernel.asm	/^ffff800000100bd9:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bdb	kernel.asm	/^ffff800000100bdb:	48 bf bf ca 10 00 00 	movabs $0xffff80000010cabf,%rdi$/;"	l
ffff800000100be2	kernel.asm	/^ffff800000100be2:	80 ff ff $/;"	l
ffff800000100be5	kernel.asm	/^ffff800000100be5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bea	kernel.asm	/^ffff800000100bea:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100bf1	kernel.asm	/^ffff800000100bf1:	80 ff ff $/;"	l
ffff800000100bf4	kernel.asm	/^ffff800000100bf4:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bf6	kernel.asm	/^ffff800000100bf6:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx$/;"	l
ffff800000100bfa	kernel.asm	/^ffff800000100bfa:	48 8d 45 98          	lea    -0x68(%rbp),%rax$/;"	l
ffff800000100bfe	kernel.asm	/^ffff800000100bfe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000100c01	kernel.asm	/^ffff800000100c01:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100c04	kernel.asm	/^ffff800000100c04:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff800000100c0b	kernel.asm	/^ffff800000100c0b:	80 ff ff $/;"	l
ffff800000100c0e	kernel.asm	/^ffff800000100c0e:	ff d0                	callq  *%rax$/;"	l
ffff800000100c10	kernel.asm	/^ffff800000100c10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100c17	kernel.asm	/^ffff800000100c17:	eb 2c                	jmp    ffff800000100c45 <panic+0xd9>$/;"	l
ffff800000100c19	kernel.asm	/^ffff800000100c19:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100c1c	kernel.asm	/^ffff800000100c1c:	48 98                	cltq   $/;"	l
ffff800000100c1e	kernel.asm	/^ffff800000100c1e:	48 8b 44 c5 a0       	mov    -0x60(%rbp,%rax,8),%rax$/;"	l
ffff800000100c23	kernel.asm	/^ffff800000100c23:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000100c26	kernel.asm	/^ffff800000100c26:	48 bf c1 ca 10 00 00 	movabs $0xffff80000010cac1,%rdi$/;"	l
ffff800000100c2d	kernel.asm	/^ffff800000100c2d:	80 ff ff $/;"	l
ffff800000100c30	kernel.asm	/^ffff800000100c30:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100c35	kernel.asm	/^ffff800000100c35:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000100c3c	kernel.asm	/^ffff800000100c3c:	80 ff ff $/;"	l
ffff800000100c3f	kernel.asm	/^ffff800000100c3f:	ff d2                	callq  *%rdx$/;"	l
ffff800000100c41	kernel.asm	/^ffff800000100c41:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100c45	kernel.asm	/^ffff800000100c45:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000100c49	kernel.asm	/^ffff800000100c49:	7e ce                	jle    ffff800000100c19 <panic+0xad>$/;"	l
ffff800000100c4b	kernel.asm	/^ffff800000100c4b:	48 b8 b8 64 11 00 00 	movabs $0xffff8000001164b8,%rax$/;"	l
ffff800000100c52	kernel.asm	/^ffff800000100c52:	80 ff ff $/;"	l
ffff800000100c55	kernel.asm	/^ffff800000100c55:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000100c5b	kernel.asm	/^ffff800000100c5b:	eb fe                	jmp    ffff800000100c5b <panic+0xef>$/;"	l
ffff800000100c5d	kernel.asm	/^ffff800000100c5d <cgaputc>:$/;"	l
ffff800000100c5d	kernel.asm	/^ffff800000100c5d:	55                   	push   %rbp$/;"	l
ffff800000100c5e	kernel.asm	/^ffff800000100c5e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100c61	kernel.asm	/^ffff800000100c61:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100c65	kernel.asm	/^ffff800000100c65:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100c68	kernel.asm	/^ffff800000100c68:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100c6d	kernel.asm	/^ffff800000100c6d:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100c72	kernel.asm	/^ffff800000100c72:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100c79	kernel.asm	/^ffff800000100c79:	80 ff ff $/;"	l
ffff800000100c7c	kernel.asm	/^ffff800000100c7c:	ff d0                	callq  *%rax$/;"	l
ffff800000100c7e	kernel.asm	/^ffff800000100c7e:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100c83	kernel.asm	/^ffff800000100c83:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100c8a	kernel.asm	/^ffff800000100c8a:	80 ff ff $/;"	l
ffff800000100c8d	kernel.asm	/^ffff800000100c8d:	ff d0                	callq  *%rax$/;"	l
ffff800000100c8f	kernel.asm	/^ffff800000100c8f:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100c92	kernel.asm	/^ffff800000100c92:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000100c95	kernel.asm	/^ffff800000100c95:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000100c98	kernel.asm	/^ffff800000100c98:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100c9d	kernel.asm	/^ffff800000100c9d:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100ca2	kernel.asm	/^ffff800000100ca2:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100ca9	kernel.asm	/^ffff800000100ca9:	80 ff ff $/;"	l
ffff800000100cac	kernel.asm	/^ffff800000100cac:	ff d0                	callq  *%rax$/;"	l
ffff800000100cae	kernel.asm	/^ffff800000100cae:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100cb3	kernel.asm	/^ffff800000100cb3:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100cba	kernel.asm	/^ffff800000100cba:	80 ff ff $/;"	l
ffff800000100cbd	kernel.asm	/^ffff800000100cbd:	ff d0                	callq  *%rax$/;"	l
ffff800000100cbf	kernel.asm	/^ffff800000100cbf:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100cc2	kernel.asm	/^ffff800000100cc2:	09 45 fc             	or     %eax,-0x4(%rbp)$/;"	l
ffff800000100cc5	kernel.asm	/^ffff800000100cc5:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)$/;"	l
ffff800000100cc9	kernel.asm	/^ffff800000100cc9:	75 30                	jne    ffff800000100cfb <cgaputc+0x9e>$/;"	l
ffff800000100ccb	kernel.asm	/^ffff800000100ccb:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100cce	kernel.asm	/^ffff800000100cce:	ba 67 66 66 66       	mov    $0x66666667,%edx$/;"	l
ffff800000100cd3	kernel.asm	/^ffff800000100cd3:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100cd5	kernel.asm	/^ffff800000100cd5:	f7 ea                	imul   %edx$/;"	l
ffff800000100cd7	kernel.asm	/^ffff800000100cd7:	c1 fa 05             	sar    $0x5,%edx$/;"	l
ffff800000100cda	kernel.asm	/^ffff800000100cda:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100cdc	kernel.asm	/^ffff800000100cdc:	c1 f8 1f             	sar    $0x1f,%eax$/;"	l
ffff800000100cdf	kernel.asm	/^ffff800000100cdf:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000100ce1	kernel.asm	/^ffff800000100ce1:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000100ce3	kernel.asm	/^ffff800000100ce3:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000100ce6	kernel.asm	/^ffff800000100ce6:	01 d0                	add    %edx,%eax$/;"	l
ffff800000100ce8	kernel.asm	/^ffff800000100ce8:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000100ceb	kernel.asm	/^ffff800000100ceb:	29 c1                	sub    %eax,%ecx$/;"	l
ffff800000100ced	kernel.asm	/^ffff800000100ced:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000100cef	kernel.asm	/^ffff800000100cef:	b8 50 00 00 00       	mov    $0x50,%eax$/;"	l
ffff800000100cf4	kernel.asm	/^ffff800000100cf4:	29 d0                	sub    %edx,%eax$/;"	l
ffff800000100cf6	kernel.asm	/^ffff800000100cf6:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000100cf9	kernel.asm	/^ffff800000100cf9:	eb 3f                	jmp    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100cfb	kernel.asm	/^ffff800000100cfb:	81 7d ec 00 01 00 00 	cmpl   $0x100,-0x14(%rbp)$/;"	l
ffff800000100d02	kernel.asm	/^ffff800000100d02:	75 0c                	jne    ffff800000100d10 <cgaputc+0xb3>$/;"	l
ffff800000100d04	kernel.asm	/^ffff800000100d04:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100d08	kernel.asm	/^ffff800000100d08:	7e 30                	jle    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100d0a	kernel.asm	/^ffff800000100d0a:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100d0e	kernel.asm	/^ffff800000100d0e:	eb 2a                	jmp    ffff800000100d3a <cgaputc+0xdd>$/;"	l
ffff800000100d10	kernel.asm	/^ffff800000100d10:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d17	kernel.asm	/^ffff800000100d17:	80 ff ff $/;"	l
ffff800000100d1a	kernel.asm	/^ffff800000100d1a:	48 8b 08             	mov    (%rax),%rcx$/;"	l
ffff800000100d1d	kernel.asm	/^ffff800000100d1d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100d20	kernel.asm	/^ffff800000100d20:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000100d23	kernel.asm	/^ffff800000100d23:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff800000100d26	kernel.asm	/^ffff800000100d26:	48 98                	cltq   $/;"	l
ffff800000100d28	kernel.asm	/^ffff800000100d28:	48 01 c0             	add    %rax,%rax$/;"	l
ffff800000100d2b	kernel.asm	/^ffff800000100d2b:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100d2e	kernel.asm	/^ffff800000100d2e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100d31	kernel.asm	/^ffff800000100d31:	0f b6 d2             	movzbl %dl,%edx$/;"	l
ffff800000100d34	kernel.asm	/^ffff800000100d34:	80 ce 07             	or     $0x7,%dh$/;"	l
ffff800000100d37	kernel.asm	/^ffff800000100d37:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000100d3a	kernel.asm	/^ffff800000100d3a:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%rbp)$/;"	l
ffff800000100d41	kernel.asm	/^ffff800000100d41:	7e 76                	jle    ffff800000100db9 <cgaputc+0x15c>$/;"	l
ffff800000100d43	kernel.asm	/^ffff800000100d43:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d4a	kernel.asm	/^ffff800000100d4a:	80 ff ff $/;"	l
ffff800000100d4d	kernel.asm	/^ffff800000100d4d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d50	kernel.asm	/^ffff800000100d50:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff800000100d57	kernel.asm	/^ffff800000100d57:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d5e	kernel.asm	/^ffff800000100d5e:	80 ff ff $/;"	l
ffff800000100d61	kernel.asm	/^ffff800000100d61:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d64	kernel.asm	/^ffff800000100d64:	ba 60 0e 00 00       	mov    $0xe60,%edx$/;"	l
ffff800000100d69	kernel.asm	/^ffff800000100d69:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000100d6c	kernel.asm	/^ffff800000100d6c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100d6f	kernel.asm	/^ffff800000100d6f:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000100d76	kernel.asm	/^ffff800000100d76:	80 ff ff $/;"	l
ffff800000100d79	kernel.asm	/^ffff800000100d79:	ff d0                	callq  *%rax$/;"	l
ffff800000100d7b	kernel.asm	/^ffff800000100d7b:	83 6d fc 50          	subl   $0x50,-0x4(%rbp)$/;"	l
ffff800000100d7f	kernel.asm	/^ffff800000100d7f:	b8 80 07 00 00       	mov    $0x780,%eax$/;"	l
ffff800000100d84	kernel.asm	/^ffff800000100d84:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000100d87	kernel.asm	/^ffff800000100d87:	48 98                	cltq   $/;"	l
ffff800000100d89	kernel.asm	/^ffff800000100d89:	8d 14 00             	lea    (%rax,%rax,1),%edx$/;"	l
ffff800000100d8c	kernel.asm	/^ffff800000100d8c:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d93	kernel.asm	/^ffff800000100d93:	80 ff ff $/;"	l
ffff800000100d96	kernel.asm	/^ffff800000100d96:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d99	kernel.asm	/^ffff800000100d99:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100d9c	kernel.asm	/^ffff800000100d9c:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000100d9f	kernel.asm	/^ffff800000100d9f:	48 01 c9             	add    %rcx,%rcx$/;"	l
ffff800000100da2	kernel.asm	/^ffff800000100da2:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100da5	kernel.asm	/^ffff800000100da5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100daa	kernel.asm	/^ffff800000100daa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100dad	kernel.asm	/^ffff800000100dad:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff800000100db4	kernel.asm	/^ffff800000100db4:	80 ff ff $/;"	l
ffff800000100db7	kernel.asm	/^ffff800000100db7:	ff d0                	callq  *%rax$/;"	l
ffff800000100db9	kernel.asm	/^ffff800000100db9:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100dbe	kernel.asm	/^ffff800000100dbe:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100dc3	kernel.asm	/^ffff800000100dc3:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100dca	kernel.asm	/^ffff800000100dca:	80 ff ff $/;"	l
ffff800000100dcd	kernel.asm	/^ffff800000100dcd:	ff d0                	callq  *%rax$/;"	l
ffff800000100dcf	kernel.asm	/^ffff800000100dcf:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100dd2	kernel.asm	/^ffff800000100dd2:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff800000100dd5	kernel.asm	/^ffff800000100dd5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100dd8	kernel.asm	/^ffff800000100dd8:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100dda	kernel.asm	/^ffff800000100dda:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100ddf	kernel.asm	/^ffff800000100ddf:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100de6	kernel.asm	/^ffff800000100de6:	80 ff ff $/;"	l
ffff800000100de9	kernel.asm	/^ffff800000100de9:	ff d0                	callq  *%rax$/;"	l
ffff800000100deb	kernel.asm	/^ffff800000100deb:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100df0	kernel.asm	/^ffff800000100df0:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100df5	kernel.asm	/^ffff800000100df5:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100dfc	kernel.asm	/^ffff800000100dfc:	80 ff ff $/;"	l
ffff800000100dff	kernel.asm	/^ffff800000100dff:	ff d0                	callq  *%rax$/;"	l
ffff800000100e01	kernel.asm	/^ffff800000100e01:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100e04	kernel.asm	/^ffff800000100e04:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100e07	kernel.asm	/^ffff800000100e07:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100e09	kernel.asm	/^ffff800000100e09:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100e0e	kernel.asm	/^ffff800000100e0e:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100e15	kernel.asm	/^ffff800000100e15:	80 ff ff $/;"	l
ffff800000100e18	kernel.asm	/^ffff800000100e18:	ff d0                	callq  *%rax$/;"	l
ffff800000100e1a	kernel.asm	/^ffff800000100e1a:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100e21	kernel.asm	/^ffff800000100e21:	80 ff ff $/;"	l
ffff800000100e24	kernel.asm	/^ffff800000100e24:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100e27	kernel.asm	/^ffff800000100e27:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000100e2a	kernel.asm	/^ffff800000100e2a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000100e2d	kernel.asm	/^ffff800000100e2d:	48 01 d2             	add    %rdx,%rdx$/;"	l
ffff800000100e30	kernel.asm	/^ffff800000100e30:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100e33	kernel.asm	/^ffff800000100e33:	66 c7 00 20 07       	movw   $0x720,(%rax)$/;"	l
ffff800000100e38	kernel.asm	/^ffff800000100e38:	90                   	nop$/;"	l
ffff800000100e39	kernel.asm	/^ffff800000100e39:	c9                   	leaveq $/;"	l
ffff800000100e3a	kernel.asm	/^ffff800000100e3a:	c3                   	retq   $/;"	l
ffff800000100e3b	kernel.asm	/^ffff800000100e3b <consputc>:$/;"	l
ffff800000100e3b	kernel.asm	/^ffff800000100e3b:	55                   	push   %rbp$/;"	l
ffff800000100e3c	kernel.asm	/^ffff800000100e3c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100e3f	kernel.asm	/^ffff800000100e3f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000100e43	kernel.asm	/^ffff800000100e43:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000100e46	kernel.asm	/^ffff800000100e46:	48 b8 b8 64 11 00 00 	movabs $0xffff8000001164b8,%rax$/;"	l
ffff800000100e4d	kernel.asm	/^ffff800000100e4d:	80 ff ff $/;"	l
ffff800000100e50	kernel.asm	/^ffff800000100e50:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100e52	kernel.asm	/^ffff800000100e52:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100e54	kernel.asm	/^ffff800000100e54:	74 0e                	je     ffff800000100e64 <consputc+0x29>$/;"	l
ffff800000100e56	kernel.asm	/^ffff800000100e56:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100e5d	kernel.asm	/^ffff800000100e5d:	80 ff ff $/;"	l
ffff800000100e60	kernel.asm	/^ffff800000100e60:	ff d0                	callq  *%rax$/;"	l
ffff800000100e62	kernel.asm	/^ffff800000100e62:	eb fe                	jmp    ffff800000100e62 <consputc+0x27>$/;"	l
ffff800000100e64	kernel.asm	/^ffff800000100e64:	81 7d fc 00 01 00 00 	cmpl   $0x100,-0x4(%rbp)$/;"	l
ffff800000100e6b	kernel.asm	/^ffff800000100e6b:	75 35                	jne    ffff800000100ea2 <consputc+0x67>$/;"	l
ffff800000100e6d	kernel.asm	/^ffff800000100e6d:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100e72	kernel.asm	/^ffff800000100e72:	48 b8 bc 9b 10 00 00 	movabs $0xffff800000109bbc,%rax$/;"	l
ffff800000100e79	kernel.asm	/^ffff800000100e79:	80 ff ff $/;"	l
ffff800000100e7c	kernel.asm	/^ffff800000100e7c:	ff d0                	callq  *%rax$/;"	l
ffff800000100e7e	kernel.asm	/^ffff800000100e7e:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff800000100e83	kernel.asm	/^ffff800000100e83:	48 b8 bc 9b 10 00 00 	movabs $0xffff800000109bbc,%rax$/;"	l
ffff800000100e8a	kernel.asm	/^ffff800000100e8a:	80 ff ff $/;"	l
ffff800000100e8d	kernel.asm	/^ffff800000100e8d:	ff d0                	callq  *%rax$/;"	l
ffff800000100e8f	kernel.asm	/^ffff800000100e8f:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100e94	kernel.asm	/^ffff800000100e94:	48 b8 bc 9b 10 00 00 	movabs $0xffff800000109bbc,%rax$/;"	l
ffff800000100e9b	kernel.asm	/^ffff800000100e9b:	80 ff ff $/;"	l
ffff800000100e9e	kernel.asm	/^ffff800000100e9e:	ff d0                	callq  *%rax$/;"	l
ffff800000100ea0	kernel.asm	/^ffff800000100ea0:	eb 11                	jmp    ffff800000100eb3 <consputc+0x78>$/;"	l
ffff800000100ea2	kernel.asm	/^ffff800000100ea2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ea5	kernel.asm	/^ffff800000100ea5:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ea7	kernel.asm	/^ffff800000100ea7:	48 b8 bc 9b 10 00 00 	movabs $0xffff800000109bbc,%rax$/;"	l
ffff800000100eae	kernel.asm	/^ffff800000100eae:	80 ff ff $/;"	l
ffff800000100eb1	kernel.asm	/^ffff800000100eb1:	ff d0                	callq  *%rax$/;"	l
ffff800000100eb3	kernel.asm	/^ffff800000100eb3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100eb6	kernel.asm	/^ffff800000100eb6:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100eb8	kernel.asm	/^ffff800000100eb8:	48 b8 5d 0c 10 00 00 	movabs $0xffff800000100c5d,%rax$/;"	l
ffff800000100ebf	kernel.asm	/^ffff800000100ebf:	80 ff ff $/;"	l
ffff800000100ec2	kernel.asm	/^ffff800000100ec2:	ff d0                	callq  *%rax$/;"	l
ffff800000100ec4	kernel.asm	/^ffff800000100ec4:	90                   	nop$/;"	l
ffff800000100ec5	kernel.asm	/^ffff800000100ec5:	c9                   	leaveq $/;"	l
ffff800000100ec6	kernel.asm	/^ffff800000100ec6:	c3                   	retq   $/;"	l
ffff800000100ec7	kernel.asm	/^ffff800000100ec7 <consoleintr>:$/;"	l
ffff800000100ec7	kernel.asm	/^ffff800000100ec7:	55                   	push   %rbp$/;"	l
ffff800000100ec8	kernel.asm	/^ffff800000100ec8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100ecb	kernel.asm	/^ffff800000100ecb:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100ecf	kernel.asm	/^ffff800000100ecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100ed3	kernel.asm	/^ffff800000100ed3:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff800000100eda	kernel.asm	/^ffff800000100eda:	80 ff ff $/;"	l
ffff800000100edd	kernel.asm	/^ffff800000100edd:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000100ee4	kernel.asm	/^ffff800000100ee4:	80 ff ff $/;"	l
ffff800000100ee7	kernel.asm	/^ffff800000100ee7:	ff d0                	callq  *%rax$/;"	l
ffff800000100ee9	kernel.asm	/^ffff800000100ee9:	e9 58 02 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100eee	kernel.asm	/^ffff800000100eee:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ef1	kernel.asm	/^ffff800000100ef1:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100ef4	kernel.asm	/^ffff800000100ef4:	0f 84 8b 00 00 00    	je     ffff800000100f85 <consoleintr+0xbe>$/;"	l
ffff800000100efa	kernel.asm	/^ffff800000100efa:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100efd	kernel.asm	/^ffff800000100efd:	7f 13                	jg     ffff800000100f12 <consoleintr+0x4b>$/;"	l
ffff800000100eff	kernel.asm	/^ffff800000100eff:	83 f8 08             	cmp    $0x8,%eax$/;"	l
ffff800000100f02	kernel.asm	/^ffff800000100f02:	0f 84 db 00 00 00    	je     ffff800000100fe3 <consoleintr+0x11c>$/;"	l
ffff800000100f08	kernel.asm	/^ffff800000100f08:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000100f0b	kernel.asm	/^ffff800000100f0b:	74 33                	je     ffff800000100f40 <consoleintr+0x79>$/;"	l
ffff800000100f0d	kernel.asm	/^ffff800000100f0d:	e9 32 01 00 00       	jmpq   ffff800000101044 <consoleintr+0x17d>$/;"	l
ffff800000100f12	kernel.asm	/^ffff800000100f12:	83 f8 1a             	cmp    $0x1a,%eax$/;"	l
ffff800000100f15	kernel.asm	/^ffff800000100f15:	74 0e                	je     ffff800000100f25 <consoleintr+0x5e>$/;"	l
ffff800000100f17	kernel.asm	/^ffff800000100f17:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000100f1a	kernel.asm	/^ffff800000100f1a:	0f 84 c3 00 00 00    	je     ffff800000100fe3 <consoleintr+0x11c>$/;"	l
ffff800000100f20	kernel.asm	/^ffff800000100f20:	e9 1f 01 00 00       	jmpq   ffff800000101044 <consoleintr+0x17d>$/;"	l
ffff800000100f25	kernel.asm	/^ffff800000100f25:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100f2a	kernel.asm	/^ffff800000100f2a:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000100f2f	kernel.asm	/^ffff800000100f2f:	48 b8 2f 06 10 00 00 	movabs $0xffff80000010062f,%rax$/;"	l
ffff800000100f36	kernel.asm	/^ffff800000100f36:	80 ff ff $/;"	l
ffff800000100f39	kernel.asm	/^ffff800000100f39:	ff d0                	callq  *%rax$/;"	l
ffff800000100f3b	kernel.asm	/^ffff800000100f3b:	e9 06 02 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100f40	kernel.asm	/^ffff800000100f40:	48 b8 85 6f 10 00 00 	movabs $0xffff800000106f85,%rax$/;"	l
ffff800000100f47	kernel.asm	/^ffff800000100f47:	80 ff ff $/;"	l
ffff800000100f4a	kernel.asm	/^ffff800000100f4a:	ff d0                	callq  *%rax$/;"	l
ffff800000100f4c	kernel.asm	/^ffff800000100f4c:	e9 f5 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100f51	kernel.asm	/^ffff800000100f51:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100f58	kernel.asm	/^ffff800000100f58:	80 ff ff $/;"	l
ffff800000100f5b	kernel.asm	/^ffff800000100f5b:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100f61	kernel.asm	/^ffff800000100f61:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100f64	kernel.asm	/^ffff800000100f64:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100f6b	kernel.asm	/^ffff800000100f6b:	80 ff ff $/;"	l
ffff800000100f6e	kernel.asm	/^ffff800000100f6e:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff800000100f74	kernel.asm	/^ffff800000100f74:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000100f79	kernel.asm	/^ffff800000100f79:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000100f80	kernel.asm	/^ffff800000100f80:	80 ff ff $/;"	l
ffff800000100f83	kernel.asm	/^ffff800000100f83:	ff d0                	callq  *%rax$/;"	l
ffff800000100f85	kernel.asm	/^ffff800000100f85:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100f8c	kernel.asm	/^ffff800000100f8c:	80 ff ff $/;"	l
ffff800000100f8f	kernel.asm	/^ffff800000100f8f:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000100f95	kernel.asm	/^ffff800000100f95:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100f9c	kernel.asm	/^ffff800000100f9c:	80 ff ff $/;"	l
ffff800000100f9f	kernel.asm	/^ffff800000100f9f:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff800000100fa5	kernel.asm	/^ffff800000100fa5:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000100fa7	kernel.asm	/^ffff800000100fa7:	0f 84 99 01 00 00    	je     ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100fad	kernel.asm	/^ffff800000100fad:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100fb4	kernel.asm	/^ffff800000100fb4:	80 ff ff $/;"	l
ffff800000100fb7	kernel.asm	/^ffff800000100fb7:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100fbd	kernel.asm	/^ffff800000100fbd:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100fc0	kernel.asm	/^ffff800000100fc0:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff800000100fc3	kernel.asm	/^ffff800000100fc3:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100fc5	kernel.asm	/^ffff800000100fc5:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100fcc	kernel.asm	/^ffff800000100fcc:	80 ff ff $/;"	l
ffff800000100fcf	kernel.asm	/^ffff800000100fcf:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100fd1	kernel.asm	/^ffff800000100fd1:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000100fd6	kernel.asm	/^ffff800000100fd6:	3c 0a                	cmp    $0xa,%al$/;"	l
ffff800000100fd8	kernel.asm	/^ffff800000100fd8:	0f 85 73 ff ff ff    	jne    ffff800000100f51 <consoleintr+0x8a>$/;"	l
ffff800000100fde	kernel.asm	/^ffff800000100fde:	e9 63 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000100fe3	kernel.asm	/^ffff800000100fe3:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100fea	kernel.asm	/^ffff800000100fea:	80 ff ff $/;"	l
ffff800000100fed	kernel.asm	/^ffff800000100fed:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000100ff3	kernel.asm	/^ffff800000100ff3:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000100ffa	kernel.asm	/^ffff800000100ffa:	80 ff ff $/;"	l
ffff800000100ffd	kernel.asm	/^ffff800000100ffd:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff800000101003	kernel.asm	/^ffff800000101003:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000101005	kernel.asm	/^ffff800000101005:	0f 84 3b 01 00 00    	je     ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff80000010100b	kernel.asm	/^ffff80000010100b:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101012	kernel.asm	/^ffff800000101012:	80 ff ff $/;"	l
ffff800000101015	kernel.asm	/^ffff800000101015:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff80000010101b	kernel.asm	/^ffff80000010101b:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff80000010101e	kernel.asm	/^ffff80000010101e:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101025	kernel.asm	/^ffff800000101025:	80 ff ff $/;"	l
ffff800000101028	kernel.asm	/^ffff800000101028:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff80000010102e	kernel.asm	/^ffff80000010102e:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000101033	kernel.asm	/^ffff800000101033:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff80000010103a	kernel.asm	/^ffff80000010103a:	80 ff ff $/;"	l
ffff80000010103d	kernel.asm	/^ffff80000010103d:	ff d0                	callq  *%rax$/;"	l
ffff80000010103f	kernel.asm	/^ffff80000010103f:	e9 02 01 00 00       	jmpq   ffff800000101146 <consoleintr+0x27f>$/;"	l
ffff800000101044	kernel.asm	/^ffff800000101044:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101048	kernel.asm	/^ffff800000101048:	0f 84 f7 00 00 00    	je     ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010104e	kernel.asm	/^ffff80000010104e:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101055	kernel.asm	/^ffff800000101055:	80 ff ff $/;"	l
ffff800000101058	kernel.asm	/^ffff800000101058:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010105e	kernel.asm	/^ffff80000010105e:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101065	kernel.asm	/^ffff800000101065:	80 ff ff $/;"	l
ffff800000101068	kernel.asm	/^ffff800000101068:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff80000010106e	kernel.asm	/^ffff80000010106e:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000101070	kernel.asm	/^ffff800000101070:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000101072	kernel.asm	/^ffff800000101072:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000101075	kernel.asm	/^ffff800000101075:	0f 87 ca 00 00 00    	ja     ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010107b	kernel.asm	/^ffff80000010107b:	83 7d fc 0d          	cmpl   $0xd,-0x4(%rbp)$/;"	l
ffff80000010107f	kernel.asm	/^ffff80000010107f:	74 05                	je     ffff800000101086 <consoleintr+0x1bf>$/;"	l
ffff800000101081	kernel.asm	/^ffff800000101081:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101084	kernel.asm	/^ffff800000101084:	eb 05                	jmp    ffff80000010108b <consoleintr+0x1c4>$/;"	l
ffff800000101086	kernel.asm	/^ffff800000101086:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
ffff80000010108b	kernel.asm	/^ffff80000010108b:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010108e	kernel.asm	/^ffff80000010108e:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101095	kernel.asm	/^ffff800000101095:	80 ff ff $/;"	l
ffff800000101098	kernel.asm	/^ffff800000101098:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff80000010109e	kernel.asm	/^ffff80000010109e:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001010a1	kernel.asm	/^ffff8000001010a1:	48 ba c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdx$/;"	l
ffff8000001010a8	kernel.asm	/^ffff8000001010a8:	80 ff ff $/;"	l
ffff8000001010ab	kernel.asm	/^ffff8000001010ab:	89 8a f0 00 00 00    	mov    %ecx,0xf0(%rdx)$/;"	l
ffff8000001010b1	kernel.asm	/^ffff8000001010b1:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff8000001010b4	kernel.asm	/^ffff8000001010b4:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001010b6	kernel.asm	/^ffff8000001010b6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010b9	kernel.asm	/^ffff8000001010b9:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001010bb	kernel.asm	/^ffff8000001010bb:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff8000001010c2	kernel.asm	/^ffff8000001010c2:	80 ff ff $/;"	l
ffff8000001010c5	kernel.asm	/^ffff8000001010c5:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001010c7	kernel.asm	/^ffff8000001010c7:	88 4c 10 68          	mov    %cl,0x68(%rax,%rdx,1)$/;"	l
ffff8000001010cb	kernel.asm	/^ffff8000001010cb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010ce	kernel.asm	/^ffff8000001010ce:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001010d0	kernel.asm	/^ffff8000001010d0:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff8000001010d7	kernel.asm	/^ffff8000001010d7:	80 ff ff $/;"	l
ffff8000001010da	kernel.asm	/^ffff8000001010da:	ff d0                	callq  *%rax$/;"	l
ffff8000001010dc	kernel.asm	/^ffff8000001010dc:	83 7d fc 0a          	cmpl   $0xa,-0x4(%rbp)$/;"	l
ffff8000001010e0	kernel.asm	/^ffff8000001010e0:	74 2d                	je     ffff80000010110f <consoleintr+0x248>$/;"	l
ffff8000001010e2	kernel.asm	/^ffff8000001010e2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)$/;"	l
ffff8000001010e6	kernel.asm	/^ffff8000001010e6:	74 27                	je     ffff80000010110f <consoleintr+0x248>$/;"	l
ffff8000001010e8	kernel.asm	/^ffff8000001010e8:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff8000001010ef	kernel.asm	/^ffff8000001010ef:	80 ff ff $/;"	l
ffff8000001010f2	kernel.asm	/^ffff8000001010f2:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff8000001010f8	kernel.asm	/^ffff8000001010f8:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff8000001010ff	kernel.asm	/^ffff8000001010ff:	80 ff ff $/;"	l
ffff800000101102	kernel.asm	/^ffff800000101102:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101108	kernel.asm	/^ffff800000101108:	83 e8 80             	sub    $0xffffff80,%eax$/;"	l
ffff80000010110b	kernel.asm	/^ffff80000010110b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010110d	kernel.asm	/^ffff80000010110d:	75 36                	jne    ffff800000101145 <consoleintr+0x27e>$/;"	l
ffff80000010110f	kernel.asm	/^ffff80000010110f:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101116	kernel.asm	/^ffff800000101116:	80 ff ff $/;"	l
ffff800000101119	kernel.asm	/^ffff800000101119:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010111f	kernel.asm	/^ffff80000010111f:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101126	kernel.asm	/^ffff800000101126:	80 ff ff $/;"	l
ffff800000101129	kernel.asm	/^ffff800000101129:	89 90 ec 00 00 00    	mov    %edx,0xec(%rax)$/;"	l
ffff80000010112f	kernel.asm	/^ffff80000010112f:	48 bf a8 64 11 00 00 	movabs $0xffff8000001164a8,%rdi$/;"	l
ffff800000101136	kernel.asm	/^ffff800000101136:	80 ff ff $/;"	l
ffff800000101139	kernel.asm	/^ffff800000101139:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000101140	kernel.asm	/^ffff800000101140:	80 ff ff $/;"	l
ffff800000101143	kernel.asm	/^ffff800000101143:	ff d0                	callq  *%rax$/;"	l
ffff800000101145	kernel.asm	/^ffff800000101145:	90                   	nop$/;"	l
ffff800000101146	kernel.asm	/^ffff800000101146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010114a	kernel.asm	/^ffff80000010114a:	ff d0                	callq  *%rax$/;"	l
ffff80000010114c	kernel.asm	/^ffff80000010114c:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010114f	kernel.asm	/^ffff80000010114f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101153	kernel.asm	/^ffff800000101153:	0f 89 95 fd ff ff    	jns    ffff800000100eee <consoleintr+0x27>$/;"	l
ffff800000101159	kernel.asm	/^ffff800000101159:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff800000101160	kernel.asm	/^ffff800000101160:	80 ff ff $/;"	l
ffff800000101163	kernel.asm	/^ffff800000101163:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010116a	kernel.asm	/^ffff80000010116a:	80 ff ff $/;"	l
ffff80000010116d	kernel.asm	/^ffff80000010116d:	ff d0                	callq  *%rax$/;"	l
ffff80000010116f	kernel.asm	/^ffff80000010116f:	90                   	nop$/;"	l
ffff800000101170	kernel.asm	/^ffff800000101170:	c9                   	leaveq $/;"	l
ffff800000101171	kernel.asm	/^ffff800000101171:	c3                   	retq   $/;"	l
ffff800000101172	kernel.asm	/^ffff800000101172 <consoleread>:$/;"	l
ffff800000101172	kernel.asm	/^ffff800000101172:	55                   	push   %rbp$/;"	l
ffff800000101173	kernel.asm	/^ffff800000101173:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101176	kernel.asm	/^ffff800000101176:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010117a	kernel.asm	/^ffff80000010117a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010117e	kernel.asm	/^ffff80000010117e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101182	kernel.asm	/^ffff800000101182:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101185	kernel.asm	/^ffff800000101185:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101188	kernel.asm	/^ffff800000101188:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010118b	kernel.asm	/^ffff80000010118b:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff800000101192	kernel.asm	/^ffff800000101192:	80 ff ff $/;"	l
ffff800000101195	kernel.asm	/^ffff800000101195:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010119c	kernel.asm	/^ffff80000010119c:	80 ff ff $/;"	l
ffff80000010119f	kernel.asm	/^ffff80000010119f:	ff d0                	callq  *%rax$/;"	l
ffff8000001011a1	kernel.asm	/^ffff8000001011a1:	e9 1e 01 00 00       	jmpq   ffff8000001012c4 <consoleread+0x152>$/;"	l
ffff8000001011a6	kernel.asm	/^ffff8000001011a6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001011ad	kernel.asm	/^ffff8000001011ad:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001011b1	kernel.asm	/^ffff8000001011b1:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001011b4	kernel.asm	/^ffff8000001011b4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001011b6	kernel.asm	/^ffff8000001011b6:	74 37                	je     ffff8000001011ef <consoleread+0x7d>$/;"	l
ffff8000001011b8	kernel.asm	/^ffff8000001011b8:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff8000001011bf	kernel.asm	/^ffff8000001011bf:	80 ff ff $/;"	l
ffff8000001011c2	kernel.asm	/^ffff8000001011c2:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001011c9	kernel.asm	/^ffff8000001011c9:	80 ff ff $/;"	l
ffff8000001011cc	kernel.asm	/^ffff8000001011cc:	ff d0                	callq  *%rax$/;"	l
ffff8000001011ce	kernel.asm	/^ffff8000001011ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001011d2	kernel.asm	/^ffff8000001011d2:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001011d6	kernel.asm	/^ffff8000001011d6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001011d9	kernel.asm	/^ffff8000001011d9:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001011e0	kernel.asm	/^ffff8000001011e0:	80 ff ff $/;"	l
ffff8000001011e3	kernel.asm	/^ffff8000001011e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001011e5	kernel.asm	/^ffff8000001011e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001011ea	kernel.asm	/^ffff8000001011ea:	e9 05 01 00 00       	jmpq   ffff8000001012f4 <consoleread+0x182>$/;"	l
ffff8000001011ef	kernel.asm	/^ffff8000001011ef:	48 be c0 63 11 00 00 	movabs $0xffff8000001163c0,%rsi$/;"	l
ffff8000001011f6	kernel.asm	/^ffff8000001011f6:	80 ff ff $/;"	l
ffff8000001011f9	kernel.asm	/^ffff8000001011f9:	48 bf a8 64 11 00 00 	movabs $0xffff8000001164a8,%rdi$/;"	l
ffff800000101200	kernel.asm	/^ffff800000101200:	80 ff ff $/;"	l
ffff800000101203	kernel.asm	/^ffff800000101203:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff80000010120a	kernel.asm	/^ffff80000010120a:	80 ff ff $/;"	l
ffff80000010120d	kernel.asm	/^ffff80000010120d:	ff d0                	callq  *%rax$/;"	l
ffff80000010120f	kernel.asm	/^ffff80000010120f:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101216	kernel.asm	/^ffff800000101216:	80 ff ff $/;"	l
ffff800000101219	kernel.asm	/^ffff800000101219:	8b 90 e8 00 00 00    	mov    0xe8(%rax),%edx$/;"	l
ffff80000010121f	kernel.asm	/^ffff80000010121f:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101226	kernel.asm	/^ffff800000101226:	80 ff ff $/;"	l
ffff800000101229	kernel.asm	/^ffff800000101229:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff80000010122f	kernel.asm	/^ffff80000010122f:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000101231	kernel.asm	/^ffff800000101231:	0f 84 6f ff ff ff    	je     ffff8000001011a6 <consoleread+0x34>$/;"	l
ffff800000101237	kernel.asm	/^ffff800000101237:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff80000010123e	kernel.asm	/^ffff80000010123e:	80 ff ff $/;"	l
ffff800000101241	kernel.asm	/^ffff800000101241:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101247	kernel.asm	/^ffff800000101247:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff80000010124a	kernel.asm	/^ffff80000010124a:	48 ba c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdx$/;"	l
ffff800000101251	kernel.asm	/^ffff800000101251:	80 ff ff $/;"	l
ffff800000101254	kernel.asm	/^ffff800000101254:	89 8a e8 00 00 00    	mov    %ecx,0xe8(%rdx)$/;"	l
ffff80000010125a	kernel.asm	/^ffff80000010125a:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff80000010125d	kernel.asm	/^ffff80000010125d:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010125f	kernel.asm	/^ffff80000010125f:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101266	kernel.asm	/^ffff800000101266:	80 ff ff $/;"	l
ffff800000101269	kernel.asm	/^ffff800000101269:	89 d2                	mov    %edx,%edx$/;"	l
ffff80000010126b	kernel.asm	/^ffff80000010126b:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000101270	kernel.asm	/^ffff800000101270:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000101273	kernel.asm	/^ffff800000101273:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000101276	kernel.asm	/^ffff800000101276:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)$/;"	l
ffff80000010127a	kernel.asm	/^ffff80000010127a:	75 2d                	jne    ffff8000001012a9 <consoleread+0x137>$/;"	l
ffff80000010127c	kernel.asm	/^ffff80000010127c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010127f	kernel.asm	/^ffff80000010127f:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000101282	kernel.asm	/^ffff800000101282:	73 4c                	jae    ffff8000001012d0 <consoleread+0x15e>$/;"	l
ffff800000101284	kernel.asm	/^ffff800000101284:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff80000010128b	kernel.asm	/^ffff80000010128b:	80 ff ff $/;"	l
ffff80000010128e	kernel.asm	/^ffff80000010128e:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101294	kernel.asm	/^ffff800000101294:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000101297	kernel.asm	/^ffff800000101297:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff80000010129e	kernel.asm	/^ffff80000010129e:	80 ff ff $/;"	l
ffff8000001012a1	kernel.asm	/^ffff8000001012a1:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)$/;"	l
ffff8000001012a7	kernel.asm	/^ffff8000001012a7:	eb 27                	jmp    ffff8000001012d0 <consoleread+0x15e>$/;"	l
ffff8000001012a9	kernel.asm	/^ffff8000001012a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001012ad	kernel.asm	/^ffff8000001012ad:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001012b1	kernel.asm	/^ffff8000001012b1:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff8000001012b5	kernel.asm	/^ffff8000001012b5:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff8000001012b8	kernel.asm	/^ffff8000001012b8:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001012ba	kernel.asm	/^ffff8000001012ba:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff8000001012be	kernel.asm	/^ffff8000001012be:	83 7d f8 0a          	cmpl   $0xa,-0x8(%rbp)$/;"	l
ffff8000001012c2	kernel.asm	/^ffff8000001012c2:	74 0f                	je     ffff8000001012d3 <consoleread+0x161>$/;"	l
ffff8000001012c4	kernel.asm	/^ffff8000001012c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff8000001012c8	kernel.asm	/^ffff8000001012c8:	0f 8f 41 ff ff ff    	jg     ffff80000010120f <consoleread+0x9d>$/;"	l
ffff8000001012ce	kernel.asm	/^ffff8000001012ce:	eb 04                	jmp    ffff8000001012d4 <consoleread+0x162>$/;"	l
ffff8000001012d0	kernel.asm	/^ffff8000001012d0:	90                   	nop$/;"	l
ffff8000001012d1	kernel.asm	/^ffff8000001012d1:	eb 01                	jmp    ffff8000001012d4 <consoleread+0x162>$/;"	l
ffff8000001012d3	kernel.asm	/^ffff8000001012d3:	90                   	nop$/;"	l
ffff8000001012d4	kernel.asm	/^ffff8000001012d4:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff8000001012db	kernel.asm	/^ffff8000001012db:	80 ff ff $/;"	l
ffff8000001012de	kernel.asm	/^ffff8000001012de:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001012e5	kernel.asm	/^ffff8000001012e5:	80 ff ff $/;"	l
ffff8000001012e8	kernel.asm	/^ffff8000001012e8:	ff d0                	callq  *%rax$/;"	l
ffff8000001012ea	kernel.asm	/^ffff8000001012ea:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001012ed	kernel.asm	/^ffff8000001012ed:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001012f0	kernel.asm	/^ffff8000001012f0:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001012f2	kernel.asm	/^ffff8000001012f2:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001012f4	kernel.asm	/^ffff8000001012f4:	c9                   	leaveq $/;"	l
ffff8000001012f5	kernel.asm	/^ffff8000001012f5:	c3                   	retq   $/;"	l
ffff8000001012f6	kernel.asm	/^ffff8000001012f6 <consoleioctl>:$/;"	l
ffff8000001012f6	kernel.asm	/^ffff8000001012f6:	55                   	push   %rbp$/;"	l
ffff8000001012f7	kernel.asm	/^ffff8000001012f7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001012fa	kernel.asm	/^ffff8000001012fa:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001012fe	kernel.asm	/^ffff8000001012fe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101302	kernel.asm	/^ffff800000101302:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000101305	kernel.asm	/^ffff800000101305:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000101308	kernel.asm	/^ffff800000101308:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff80000010130b	kernel.asm	/^ffff80000010130b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010130e	kernel.asm	/^ffff80000010130e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000101310	kernel.asm	/^ffff800000101310:	48 bf c8 ca 10 00 00 	movabs $0xffff80000010cac8,%rdi$/;"	l
ffff800000101317	kernel.asm	/^ffff800000101317:	80 ff ff $/;"	l
ffff80000010131a	kernel.asm	/^ffff80000010131a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010131f	kernel.asm	/^ffff80000010131f:	48 b9 ac 07 10 00 00 	movabs $0xffff8000001007ac,%rcx$/;"	l
ffff800000101326	kernel.asm	/^ffff800000101326:	80 ff ff $/;"	l
ffff800000101329	kernel.asm	/^ffff800000101329:	ff d1                	callq  *%rcx$/;"	l
ffff80000010132b	kernel.asm	/^ffff80000010132b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101330	kernel.asm	/^ffff800000101330:	c9                   	leaveq $/;"	l
ffff800000101331	kernel.asm	/^ffff800000101331:	c3                   	retq   $/;"	l
ffff800000101332	kernel.asm	/^ffff800000101332 <consolewrite>:$/;"	l
ffff800000101332	kernel.asm	/^ffff800000101332:	55                   	push   %rbp$/;"	l
ffff800000101333	kernel.asm	/^ffff800000101333:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101336	kernel.asm	/^ffff800000101336:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010133a	kernel.asm	/^ffff80000010133a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010133e	kernel.asm	/^ffff80000010133e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101342	kernel.asm	/^ffff800000101342:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101345	kernel.asm	/^ffff800000101345:	48 bf c0 64 11 00 00 	movabs $0xffff8000001164c0,%rdi$/;"	l
ffff80000010134c	kernel.asm	/^ffff80000010134c:	80 ff ff $/;"	l
ffff80000010134f	kernel.asm	/^ffff80000010134f:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000101356	kernel.asm	/^ffff800000101356:	80 ff ff $/;"	l
ffff800000101359	kernel.asm	/^ffff800000101359:	ff d0                	callq  *%rax$/;"	l
ffff80000010135b	kernel.asm	/^ffff80000010135b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101362	kernel.asm	/^ffff800000101362:	eb 28                	jmp    ffff80000010138c <consolewrite+0x5a>$/;"	l
ffff800000101364	kernel.asm	/^ffff800000101364:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101367	kernel.asm	/^ffff800000101367:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff80000010136a	kernel.asm	/^ffff80000010136a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010136e	kernel.asm	/^ffff80000010136e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101371	kernel.asm	/^ffff800000101371:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101374	kernel.asm	/^ffff800000101374:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000101377	kernel.asm	/^ffff800000101377:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010137a	kernel.asm	/^ffff80000010137a:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010137c	kernel.asm	/^ffff80000010137c:	48 b8 3b 0e 10 00 00 	movabs $0xffff800000100e3b,%rax$/;"	l
ffff800000101383	kernel.asm	/^ffff800000101383:	80 ff ff $/;"	l
ffff800000101386	kernel.asm	/^ffff800000101386:	ff d0                	callq  *%rax$/;"	l
ffff800000101388	kernel.asm	/^ffff800000101388:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010138c	kernel.asm	/^ffff80000010138c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010138f	kernel.asm	/^ffff80000010138f:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000101392	kernel.asm	/^ffff800000101392:	7c d0                	jl     ffff800000101364 <consolewrite+0x32>$/;"	l
ffff800000101394	kernel.asm	/^ffff800000101394:	48 bf c0 64 11 00 00 	movabs $0xffff8000001164c0,%rdi$/;"	l
ffff80000010139b	kernel.asm	/^ffff80000010139b:	80 ff ff $/;"	l
ffff80000010139e	kernel.asm	/^ffff80000010139e:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001013a5	kernel.asm	/^ffff8000001013a5:	80 ff ff $/;"	l
ffff8000001013a8	kernel.asm	/^ffff8000001013a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001013aa	kernel.asm	/^ffff8000001013aa:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001013ad	kernel.asm	/^ffff8000001013ad:	c9                   	leaveq $/;"	l
ffff8000001013ae	kernel.asm	/^ffff8000001013ae:	c3                   	retq   $/;"	l
ffff8000001013af	kernel.asm	/^ffff8000001013af <consoleinit>:$/;"	l
ffff8000001013af	kernel.asm	/^ffff8000001013af:	55                   	push   %rbp$/;"	l
ffff8000001013b0	kernel.asm	/^ffff8000001013b0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001013b3	kernel.asm	/^ffff8000001013b3:	48 be f4 ca 10 00 00 	movabs $0xffff80000010caf4,%rsi$/;"	l
ffff8000001013ba	kernel.asm	/^ffff8000001013ba:	80 ff ff $/;"	l
ffff8000001013bd	kernel.asm	/^ffff8000001013bd:	48 bf c0 64 11 00 00 	movabs $0xffff8000001164c0,%rdi$/;"	l
ffff8000001013c4	kernel.asm	/^ffff8000001013c4:	80 ff ff $/;"	l
ffff8000001013c7	kernel.asm	/^ffff8000001013c7:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff8000001013ce	kernel.asm	/^ffff8000001013ce:	80 ff ff $/;"	l
ffff8000001013d1	kernel.asm	/^ffff8000001013d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001013d3	kernel.asm	/^ffff8000001013d3:	48 be fc ca 10 00 00 	movabs $0xffff80000010cafc,%rsi$/;"	l
ffff8000001013da	kernel.asm	/^ffff8000001013da:	80 ff ff $/;"	l
ffff8000001013dd	kernel.asm	/^ffff8000001013dd:	48 bf c0 63 11 00 00 	movabs $0xffff8000001163c0,%rdi$/;"	l
ffff8000001013e4	kernel.asm	/^ffff8000001013e4:	80 ff ff $/;"	l
ffff8000001013e7	kernel.asm	/^ffff8000001013e7:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff8000001013ee	kernel.asm	/^ffff8000001013ee:	80 ff ff $/;"	l
ffff8000001013f1	kernel.asm	/^ffff8000001013f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001013f3	kernel.asm	/^ffff8000001013f3:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff8000001013fa	kernel.asm	/^ffff8000001013fa:	80 ff ff $/;"	l
ffff8000001013fd	kernel.asm	/^ffff8000001013fd:	48 ba 32 13 10 00 00 	movabs $0xffff800000101332,%rdx$/;"	l
ffff800000101404	kernel.asm	/^ffff800000101404:	80 ff ff $/;"	l
ffff800000101407	kernel.asm	/^ffff800000101407:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff80000010140b	kernel.asm	/^ffff80000010140b:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff800000101412	kernel.asm	/^ffff800000101412:	80 ff ff $/;"	l
ffff800000101415	kernel.asm	/^ffff800000101415:	48 b9 72 11 10 00 00 	movabs $0xffff800000101172,%rcx$/;"	l
ffff80000010141c	kernel.asm	/^ffff80000010141c:	80 ff ff $/;"	l
ffff80000010141f	kernel.asm	/^ffff80000010141f:	48 89 48 10          	mov    %rcx,0x10(%rax)$/;"	l
ffff800000101423	kernel.asm	/^ffff800000101423:	48 b8 c0 64 11 00 00 	movabs $0xffff8000001164c0,%rax$/;"	l
ffff80000010142a	kernel.asm	/^ffff80000010142a:	80 ff ff $/;"	l
ffff80000010142d	kernel.asm	/^ffff80000010142d:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff800000101434	kernel.asm	/^ffff800000101434:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000101439	kernel.asm	/^ffff800000101439:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010143e	kernel.asm	/^ffff80000010143e:	48 b8 28 3f 10 00 00 	movabs $0xffff800000103f28,%rax$/;"	l
ffff800000101445	kernel.asm	/^ffff800000101445:	80 ff ff $/;"	l
ffff800000101448	kernel.asm	/^ffff800000101448:	ff d0                	callq  *%rax$/;"	l
ffff80000010144a	kernel.asm	/^ffff80000010144a:	90                   	nop$/;"	l
ffff80000010144b	kernel.asm	/^ffff80000010144b:	5d                   	pop    %rbp$/;"	l
ffff80000010144c	kernel.asm	/^ffff80000010144c:	c3                   	retq   $/;"	l
ffff80000010144d	kernel.asm	/^ffff80000010144d <exec>:$/;"	l
ffff80000010144d	kernel.asm	/^ffff80000010144d:	55                   	push   %rbp$/;"	l
ffff80000010144e	kernel.asm	/^ffff80000010144e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101451	kernel.asm	/^ffff800000101451:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp$/;"	l
ffff800000101458	kernel.asm	/^ffff800000101458:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)$/;"	l
ffff80000010145f	kernel.asm	/^ffff80000010145f:	48 89 b5 00 fe ff ff 	mov    %rsi,-0x200(%rbp)$/;"	l
ffff800000101466	kernel.asm	/^ffff800000101466:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010146d	kernel.asm	/^ffff80000010146d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101471	kernel.asm	/^ffff800000101471:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000101475	kernel.asm	/^ffff800000101475:	48 89 45 b8          	mov    %rax,-0x48(%rbp)$/;"	l
ffff800000101479	kernel.asm	/^ffff800000101479:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010147e	kernel.asm	/^ffff80000010147e:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000101485	kernel.asm	/^ffff800000101485:	80 ff ff $/;"	l
ffff800000101488	kernel.asm	/^ffff800000101488:	ff d2                	callq  *%rdx$/;"	l
ffff80000010148a	kernel.asm	/^ffff80000010148a:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff800000101491	kernel.asm	/^ffff800000101491:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101494	kernel.asm	/^ffff800000101494:	48 b8 7d 37 10 00 00 	movabs $0xffff80000010377d,%rax$/;"	l
ffff80000010149b	kernel.asm	/^ffff80000010149b:	80 ff ff $/;"	l
ffff80000010149e	kernel.asm	/^ffff80000010149e:	ff d0                	callq  *%rax$/;"	l
ffff8000001014a0	kernel.asm	/^ffff8000001014a0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)$/;"	l
ffff8000001014a4	kernel.asm	/^ffff8000001014a4:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001014a9	kernel.asm	/^ffff8000001014a9:	75 1b                	jne    ffff8000001014c6 <exec+0x79>$/;"	l
ffff8000001014ab	kernel.asm	/^ffff8000001014ab:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001014b0	kernel.asm	/^ffff8000001014b0:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff8000001014b7	kernel.asm	/^ffff8000001014b7:	80 ff ff $/;"	l
ffff8000001014ba	kernel.asm	/^ffff8000001014ba:	ff d2                	callq  *%rdx$/;"	l
ffff8000001014bc	kernel.asm	/^ffff8000001014bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001014c1	kernel.asm	/^ffff8000001014c1:	e9 a5 05 00 00       	jmpq   ffff800000101a6b <exec+0x61e>$/;"	l
ffff8000001014c6	kernel.asm	/^ffff8000001014c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001014ca	kernel.asm	/^ffff8000001014ca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001014cd	kernel.asm	/^ffff8000001014cd:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001014d4	kernel.asm	/^ffff8000001014d4:	80 ff ff $/;"	l
ffff8000001014d7	kernel.asm	/^ffff8000001014d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001014d9	kernel.asm	/^ffff8000001014d9:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)$/;"	l
ffff8000001014e0	kernel.asm	/^ffff8000001014e0:	00 $/;"	l
ffff8000001014e1	kernel.asm	/^ffff8000001014e1:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi$/;"	l
ffff8000001014e8	kernel.asm	/^ffff8000001014e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001014ec	kernel.asm	/^ffff8000001014ec:	b9 40 00 00 00       	mov    $0x40,%ecx$/;"	l
ffff8000001014f1	kernel.asm	/^ffff8000001014f1:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001014f6	kernel.asm	/^ffff8000001014f6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001014f9	kernel.asm	/^ffff8000001014f9:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000101500	kernel.asm	/^ffff800000101500:	80 ff ff $/;"	l
ffff800000101503	kernel.asm	/^ffff800000101503:	ff d0                	callq  *%rax$/;"	l
ffff800000101505	kernel.asm	/^ffff800000101505:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff800000101508	kernel.asm	/^ffff800000101508:	0f 85 ee 04 00 00    	jne    ffff8000001019fc <exec+0x5af>$/;"	l
ffff80000010150e	kernel.asm	/^ffff80000010150e:	8b 85 50 fe ff ff    	mov    -0x1b0(%rbp),%eax$/;"	l
ffff800000101514	kernel.asm	/^ffff800000101514:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax$/;"	l
ffff800000101519	kernel.asm	/^ffff800000101519:	0f 85 e0 04 00 00    	jne    ffff8000001019ff <exec+0x5b2>$/;"	l
ffff80000010151f	kernel.asm	/^ffff80000010151f:	48 b8 b3 bb 10 00 00 	movabs $0xffff80000010bbb3,%rax$/;"	l
ffff800000101526	kernel.asm	/^ffff800000101526:	80 ff ff $/;"	l
ffff800000101529	kernel.asm	/^ffff800000101529:	ff d0                	callq  *%rax$/;"	l
ffff80000010152b	kernel.asm	/^ffff80000010152b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)$/;"	l
ffff80000010152f	kernel.asm	/^ffff80000010152f:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff800000101534	kernel.asm	/^ffff800000101534:	0f 84 c8 04 00 00    	je     ffff800000101a02 <exec+0x5b5>$/;"	l
ffff80000010153a	kernel.asm	/^ffff80000010153a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)$/;"	l
ffff800000101541	kernel.asm	/^ffff800000101541:	00 $/;"	l
ffff800000101542	kernel.asm	/^ffff800000101542:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)$/;"	l
ffff800000101549	kernel.asm	/^ffff800000101549:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax$/;"	l
ffff800000101550	kernel.asm	/^ffff800000101550:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000101553	kernel.asm	/^ffff800000101553:	e9 13 01 00 00       	jmpq   ffff80000010166b <exec+0x21e>$/;"	l
ffff800000101558	kernel.asm	/^ffff800000101558:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff80000010155b	kernel.asm	/^ffff80000010155b:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi$/;"	l
ffff800000101562	kernel.asm	/^ffff800000101562:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101566	kernel.asm	/^ffff800000101566:	b9 38 00 00 00       	mov    $0x38,%ecx$/;"	l
ffff80000010156b	kernel.asm	/^ffff80000010156b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010156e	kernel.asm	/^ffff80000010156e:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000101575	kernel.asm	/^ffff800000101575:	80 ff ff $/;"	l
ffff800000101578	kernel.asm	/^ffff800000101578:	ff d0                	callq  *%rax$/;"	l
ffff80000010157a	kernel.asm	/^ffff80000010157a:	83 f8 38             	cmp    $0x38,%eax$/;"	l
ffff80000010157d	kernel.asm	/^ffff80000010157d:	0f 85 82 04 00 00    	jne    ffff800000101a05 <exec+0x5b8>$/;"	l
ffff800000101583	kernel.asm	/^ffff800000101583:	8b 85 10 fe ff ff    	mov    -0x1f0(%rbp),%eax$/;"	l
ffff800000101589	kernel.asm	/^ffff800000101589:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff80000010158c	kernel.asm	/^ffff80000010158c:	0f 85 cb 00 00 00    	jne    ffff80000010165d <exec+0x210>$/;"	l
ffff800000101592	kernel.asm	/^ffff800000101592:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx$/;"	l
ffff800000101599	kernel.asm	/^ffff800000101599:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff8000001015a0	kernel.asm	/^ffff8000001015a0:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001015a3	kernel.asm	/^ffff8000001015a3:	0f 82 5f 04 00 00    	jb     ffff800000101a08 <exec+0x5bb>$/;"	l
ffff8000001015a9	kernel.asm	/^ffff8000001015a9:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx$/;"	l
ffff8000001015b0	kernel.asm	/^ffff8000001015b0:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff8000001015b7	kernel.asm	/^ffff8000001015b7:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff8000001015ba	kernel.asm	/^ffff8000001015ba:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001015c1	kernel.asm	/^ffff8000001015c1:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001015c4	kernel.asm	/^ffff8000001015c4:	0f 82 41 04 00 00    	jb     ffff800000101a0b <exec+0x5be>$/;"	l
ffff8000001015ca	kernel.asm	/^ffff8000001015ca:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001015d1	kernel.asm	/^ffff8000001015d1:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001015d3	kernel.asm	/^ffff8000001015d3:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff8000001015da	kernel.asm	/^ffff8000001015da:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001015dc	kernel.asm	/^ffff8000001015dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001015e0	kernel.asm	/^ffff8000001015e0:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001015e2	kernel.asm	/^ffff8000001015e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001015e6	kernel.asm	/^ffff8000001015e6:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001015e8	kernel.asm	/^ffff8000001015e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001015eb	kernel.asm	/^ffff8000001015eb:	48 b8 0b c3 10 00 00 	movabs $0xffff80000010c30b,%rax$/;"	l
ffff8000001015f2	kernel.asm	/^ffff8000001015f2:	80 ff ff $/;"	l
ffff8000001015f5	kernel.asm	/^ffff8000001015f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001015f7	kernel.asm	/^ffff8000001015f7:	48 98                	cltq   $/;"	l
ffff8000001015f9	kernel.asm	/^ffff8000001015f9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001015fd	kernel.asm	/^ffff8000001015fd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff800000101602	kernel.asm	/^ffff800000101602:	0f 84 06 04 00 00    	je     ffff800000101a0e <exec+0x5c1>$/;"	l
ffff800000101608	kernel.asm	/^ffff800000101608:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff80000010160f	kernel.asm	/^ffff80000010160f:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff800000101614	kernel.asm	/^ffff800000101614:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000101617	kernel.asm	/^ffff800000101617:	0f 85 f4 03 00 00    	jne    ffff800000101a11 <exec+0x5c4>$/;"	l
ffff80000010161d	kernel.asm	/^ffff80000010161d:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff800000101624	kernel.asm	/^ffff800000101624:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101626	kernel.asm	/^ffff800000101626:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax$/;"	l
ffff80000010162d	kernel.asm	/^ffff80000010162d:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010162f	kernel.asm	/^ffff80000010162f:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff800000101636	kernel.asm	/^ffff800000101636:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000101639	kernel.asm	/^ffff800000101639:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx$/;"	l
ffff80000010163d	kernel.asm	/^ffff80000010163d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101641	kernel.asm	/^ffff800000101641:	41 89 f8             	mov    %edi,%r8d$/;"	l
ffff800000101644	kernel.asm	/^ffff800000101644:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101647	kernel.asm	/^ffff800000101647:	48 b8 e9 c1 10 00 00 	movabs $0xffff80000010c1e9,%rax$/;"	l
ffff80000010164e	kernel.asm	/^ffff80000010164e:	80 ff ff $/;"	l
ffff800000101651	kernel.asm	/^ffff800000101651:	ff d0                	callq  *%rax$/;"	l
ffff800000101653	kernel.asm	/^ffff800000101653:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101655	kernel.asm	/^ffff800000101655:	0f 88 b9 03 00 00    	js     ffff800000101a14 <exec+0x5c7>$/;"	l
ffff80000010165b	kernel.asm	/^ffff80000010165b:	eb 01                	jmp    ffff80000010165e <exec+0x211>$/;"	l
ffff80000010165d	kernel.asm	/^ffff80000010165d:	90                   	nop$/;"	l
ffff80000010165e	kernel.asm	/^ffff80000010165e:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)$/;"	l
ffff800000101662	kernel.asm	/^ffff800000101662:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000101665	kernel.asm	/^ffff800000101665:	83 c0 38             	add    $0x38,%eax$/;"	l
ffff800000101668	kernel.asm	/^ffff800000101668:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff80000010166b	kernel.asm	/^ffff80000010166b:	0f b7 85 88 fe ff ff 	movzwl -0x178(%rbp),%eax$/;"	l
ffff800000101672	kernel.asm	/^ffff800000101672:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff800000101675	kernel.asm	/^ffff800000101675:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000101678	kernel.asm	/^ffff800000101678:	0f 8f da fe ff ff    	jg     ffff800000101558 <exec+0x10b>$/;"	l
ffff80000010167e	kernel.asm	/^ffff80000010167e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101682	kernel.asm	/^ffff800000101682:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101685	kernel.asm	/^ffff800000101685:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff80000010168c	kernel.asm	/^ffff80000010168c:	80 ff ff $/;"	l
ffff80000010168f	kernel.asm	/^ffff80000010168f:	ff d0                	callq  *%rax$/;"	l
ffff800000101691	kernel.asm	/^ffff800000101691:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101696	kernel.asm	/^ffff800000101696:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff80000010169d	kernel.asm	/^ffff80000010169d:	80 ff ff $/;"	l
ffff8000001016a0	kernel.asm	/^ffff8000001016a0:	ff d2                	callq  *%rdx$/;"	l
ffff8000001016a2	kernel.asm	/^ffff8000001016a2:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001016a9	kernel.asm	/^ffff8000001016a9:	00 $/;"	l
ffff8000001016aa	kernel.asm	/^ffff8000001016aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016ae	kernel.asm	/^ffff8000001016ae:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff8000001016b4	kernel.asm	/^ffff8000001016b4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff8000001016ba	kernel.asm	/^ffff8000001016ba:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001016be	kernel.asm	/^ffff8000001016be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016c2	kernel.asm	/^ffff8000001016c2:	8d 90 00 20 00 00    	lea    0x2000(%rax),%edx$/;"	l
ffff8000001016c8	kernel.asm	/^ffff8000001016c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016cc	kernel.asm	/^ffff8000001016cc:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001016ce	kernel.asm	/^ffff8000001016ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001016d2	kernel.asm	/^ffff8000001016d2:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001016d4	kernel.asm	/^ffff8000001016d4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001016d7	kernel.asm	/^ffff8000001016d7:	48 b8 0b c3 10 00 00 	movabs $0xffff80000010c30b,%rax$/;"	l
ffff8000001016de	kernel.asm	/^ffff8000001016de:	80 ff ff $/;"	l
ffff8000001016e1	kernel.asm	/^ffff8000001016e1:	ff d0                	callq  *%rax$/;"	l
ffff8000001016e3	kernel.asm	/^ffff8000001016e3:	48 98                	cltq   $/;"	l
ffff8000001016e5	kernel.asm	/^ffff8000001016e5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001016e9	kernel.asm	/^ffff8000001016e9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff8000001016ee	kernel.asm	/^ffff8000001016ee:	0f 84 23 03 00 00    	je     ffff800000101a17 <exec+0x5ca>$/;"	l
ffff8000001016f4	kernel.asm	/^ffff8000001016f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001016f8	kernel.asm	/^ffff8000001016f8:	48 2d 00 20 00 00    	sub    $0x2000,%rax$/;"	l
ffff8000001016fe	kernel.asm	/^ffff8000001016fe:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000101701	kernel.asm	/^ffff800000101701:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101705	kernel.asm	/^ffff800000101705:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000101708	kernel.asm	/^ffff800000101708:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010170b	kernel.asm	/^ffff80000010170b:	48 b8 26 c7 10 00 00 	movabs $0xffff80000010c726,%rax$/;"	l
ffff800000101712	kernel.asm	/^ffff800000101712:	80 ff ff $/;"	l
ffff800000101715	kernel.asm	/^ffff800000101715:	ff d0                	callq  *%rax$/;"	l
ffff800000101717	kernel.asm	/^ffff800000101717:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010171b	kernel.asm	/^ffff80000010171b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010171f	kernel.asm	/^ffff80000010171f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)$/;"	l
ffff800000101726	kernel.asm	/^ffff800000101726:	00 $/;"	l
ffff800000101727	kernel.asm	/^ffff800000101727:	e9 ca 00 00 00       	jmpq   ffff8000001017f6 <exec+0x3a9>$/;"	l
ffff80000010172c	kernel.asm	/^ffff80000010172c:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)$/;"	l
ffff800000101731	kernel.asm	/^ffff800000101731:	0f 87 e3 02 00 00    	ja     ffff800000101a1a <exec+0x5cd>$/;"	l
ffff800000101737	kernel.asm	/^ffff800000101737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010173b	kernel.asm	/^ffff80000010173b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000101742	kernel.asm	/^ffff800000101742:	00 $/;"	l
ffff800000101743	kernel.asm	/^ffff800000101743:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff80000010174a	kernel.asm	/^ffff80000010174a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010174d	kernel.asm	/^ffff80000010174d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000101750	kernel.asm	/^ffff800000101750:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101753	kernel.asm	/^ffff800000101753:	48 b8 a8 79 10 00 00 	movabs $0xffff8000001079a8,%rax$/;"	l
ffff80000010175a	kernel.asm	/^ffff80000010175a:	80 ff ff $/;"	l
ffff80000010175d	kernel.asm	/^ffff80000010175d:	ff d0                	callq  *%rax$/;"	l
ffff80000010175f	kernel.asm	/^ffff80000010175f:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000101762	kernel.asm	/^ffff800000101762:	48 98                	cltq   $/;"	l
ffff800000101764	kernel.asm	/^ffff800000101764:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff800000101768	kernel.asm	/^ffff800000101768:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010176b	kernel.asm	/^ffff80000010176b:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010176e	kernel.asm	/^ffff80000010176e:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101772	kernel.asm	/^ffff800000101772:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff800000101776	kernel.asm	/^ffff800000101776:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010177a	kernel.asm	/^ffff80000010177a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000101781	kernel.asm	/^ffff800000101781:	00 $/;"	l
ffff800000101782	kernel.asm	/^ffff800000101782:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101789	kernel.asm	/^ffff800000101789:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010178c	kernel.asm	/^ffff80000010178c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010178f	kernel.asm	/^ffff80000010178f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101792	kernel.asm	/^ffff800000101792:	48 b8 a8 79 10 00 00 	movabs $0xffff8000001079a8,%rax$/;"	l
ffff800000101799	kernel.asm	/^ffff800000101799:	80 ff ff $/;"	l
ffff80000010179c	kernel.asm	/^ffff80000010179c:	ff d0                	callq  *%rax$/;"	l
ffff80000010179e	kernel.asm	/^ffff80000010179e:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff8000001017a1	kernel.asm	/^ffff8000001017a1:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001017a3	kernel.asm	/^ffff8000001017a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001017a7	kernel.asm	/^ffff8000001017a7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001017ae	kernel.asm	/^ffff8000001017ae:	00 $/;"	l
ffff8000001017af	kernel.asm	/^ffff8000001017af:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff8000001017b6	kernel.asm	/^ffff8000001017b6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001017b9	kernel.asm	/^ffff8000001017b9:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff8000001017bc	kernel.asm	/^ffff8000001017bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001017c0	kernel.asm	/^ffff8000001017c0:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001017c2	kernel.asm	/^ffff8000001017c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001017c6	kernel.asm	/^ffff8000001017c6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001017c9	kernel.asm	/^ffff8000001017c9:	48 b8 8f c9 10 00 00 	movabs $0xffff80000010c98f,%rax$/;"	l
ffff8000001017d0	kernel.asm	/^ffff8000001017d0:	80 ff ff $/;"	l
ffff8000001017d3	kernel.asm	/^ffff8000001017d3:	ff d0                	callq  *%rax$/;"	l
ffff8000001017d5	kernel.asm	/^ffff8000001017d5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001017d7	kernel.asm	/^ffff8000001017d7:	0f 88 40 02 00 00    	js     ffff800000101a1d <exec+0x5d0>$/;"	l
ffff8000001017dd	kernel.asm	/^ffff8000001017dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001017e1	kernel.asm	/^ffff8000001017e1:	48 8d 50 03          	lea    0x3(%rax),%rdx$/;"	l
ffff8000001017e5	kernel.asm	/^ffff8000001017e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001017e9	kernel.asm	/^ffff8000001017e9:	48 89 84 d5 90 fe ff 	mov    %rax,-0x170(%rbp,%rdx,8)$/;"	l
ffff8000001017f0	kernel.asm	/^ffff8000001017f0:	ff $/;"	l
ffff8000001017f1	kernel.asm	/^ffff8000001017f1:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)$/;"	l
ffff8000001017f6	kernel.asm	/^ffff8000001017f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001017fa	kernel.asm	/^ffff8000001017fa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000101801	kernel.asm	/^ffff800000101801:	00 $/;"	l
ffff800000101802	kernel.asm	/^ffff800000101802:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101809	kernel.asm	/^ffff800000101809:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010180c	kernel.asm	/^ffff80000010180c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010180f	kernel.asm	/^ffff80000010180f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000101812	kernel.asm	/^ffff800000101812:	0f 85 14 ff ff ff    	jne    ffff80000010172c <exec+0x2df>$/;"	l
ffff800000101818	kernel.asm	/^ffff800000101818:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010181c	kernel.asm	/^ffff80000010181c:	48 83 c0 03          	add    $0x3,%rax$/;"	l
ffff800000101820	kernel.asm	/^ffff800000101820:	48 c7 84 c5 90 fe ff 	movq   $0x0,-0x170(%rbp,%rax,8)$/;"	l
ffff800000101827	kernel.asm	/^ffff800000101827:	ff 00 00 00 00 $/;"	l
ffff80000010182c	kernel.asm	/^ffff80000010182c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101831	kernel.asm	/^ffff800000101831:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)$/;"	l
ffff800000101838	kernel.asm	/^ffff800000101838:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010183c	kernel.asm	/^ffff80000010183c:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)$/;"	l
ffff800000101843	kernel.asm	/^ffff800000101843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101847	kernel.asm	/^ffff800000101847:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff80000010184b	kernel.asm	/^ffff80000010184b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000101852	kernel.asm	/^ffff800000101852:	00 $/;"	l
ffff800000101853	kernel.asm	/^ffff800000101853:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000101857	kernel.asm	/^ffff800000101857:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff80000010185a	kernel.asm	/^ffff80000010185a:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)$/;"	l
ffff800000101861	kernel.asm	/^ffff800000101861:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101868	kernel.asm	/^ffff800000101868:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010186c	kernel.asm	/^ffff80000010186c:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101870	kernel.asm	/^ffff800000101870:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000101874	kernel.asm	/^ffff800000101874:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff800000101878	kernel.asm	/^ffff800000101878:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010187f	kernel.asm	/^ffff80000010187f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101883	kernel.asm	/^ffff800000101883:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101887	kernel.asm	/^ffff800000101887:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff80000010188b	kernel.asm	/^ffff80000010188b:	48 83 c2 01          	add    $0x1,%rdx$/;"	l
ffff80000010188f	kernel.asm	/^ffff80000010188f:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx$/;"	l
ffff800000101896	kernel.asm	/^ffff800000101896:	00 $/;"	l
ffff800000101897	kernel.asm	/^ffff800000101897:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010189b	kernel.asm	/^ffff80000010189b:	48 29 ca             	sub    %rcx,%rdx$/;"	l
ffff80000010189e	kernel.asm	/^ffff80000010189e:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff8000001018a2	kernel.asm	/^ffff8000001018a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001018a6	kernel.asm	/^ffff8000001018a6:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff8000001018aa	kernel.asm	/^ffff8000001018aa:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001018ae	kernel.asm	/^ffff8000001018ae:	48 29 45 d0          	sub    %rax,-0x30(%rbp)$/;"	l
ffff8000001018b2	kernel.asm	/^ffff8000001018b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001018b6	kernel.asm	/^ffff8000001018b6:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff8000001018ba	kernel.asm	/^ffff8000001018ba:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx$/;"	l
ffff8000001018c1	kernel.asm	/^ffff8000001018c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001018c5	kernel.asm	/^ffff8000001018c5:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001018c7	kernel.asm	/^ffff8000001018c7:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx$/;"	l
ffff8000001018ce	kernel.asm	/^ffff8000001018ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001018d2	kernel.asm	/^ffff8000001018d2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001018d5	kernel.asm	/^ffff8000001018d5:	48 b8 8f c9 10 00 00 	movabs $0xffff80000010c98f,%rax$/;"	l
ffff8000001018dc	kernel.asm	/^ffff8000001018dc:	80 ff ff $/;"	l
ffff8000001018df	kernel.asm	/^ffff8000001018df:	ff d0                	callq  *%rax$/;"	l
ffff8000001018e1	kernel.asm	/^ffff8000001018e1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001018e3	kernel.asm	/^ffff8000001018e3:	0f 88 37 01 00 00    	js     ffff800000101a20 <exec+0x5d3>$/;"	l
ffff8000001018e9	kernel.asm	/^ffff8000001018e9:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff8000001018f0	kernel.asm	/^ffff8000001018f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001018f4	kernel.asm	/^ffff8000001018f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001018f8	kernel.asm	/^ffff8000001018f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001018fc	kernel.asm	/^ffff8000001018fc:	eb 1c                	jmp    ffff80000010191a <exec+0x4cd>$/;"	l
ffff8000001018fe	kernel.asm	/^ffff8000001018fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101902	kernel.asm	/^ffff800000101902:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101905	kernel.asm	/^ffff800000101905:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000101907	kernel.asm	/^ffff800000101907:	75 0c                	jne    ffff800000101915 <exec+0x4c8>$/;"	l
ffff800000101909	kernel.asm	/^ffff800000101909:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010190d	kernel.asm	/^ffff80000010190d:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000101911	kernel.asm	/^ffff800000101911:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101915	kernel.asm	/^ffff800000101915:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff80000010191a	kernel.asm	/^ffff80000010191a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010191e	kernel.asm	/^ffff80000010191e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101921	kernel.asm	/^ffff800000101921:	84 c0                	test   %al,%al$/;"	l
ffff800000101923	kernel.asm	/^ffff800000101923:	75 d9                	jne    ffff8000001018fe <exec+0x4b1>$/;"	l
ffff800000101925	kernel.asm	/^ffff800000101925:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010192c	kernel.asm	/^ffff80000010192c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101930	kernel.asm	/^ffff800000101930:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000101937	kernel.asm	/^ffff800000101937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010193b	kernel.asm	/^ffff80000010193b:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff800000101940	kernel.asm	/^ffff800000101940:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000101943	kernel.asm	/^ffff800000101943:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000101946	kernel.asm	/^ffff800000101946:	48 b8 46 79 10 00 00 	movabs $0xffff800000107946,%rax$/;"	l
ffff80000010194d	kernel.asm	/^ffff80000010194d:	80 ff ff $/;"	l
ffff800000101950	kernel.asm	/^ffff800000101950:	ff d0                	callq  *%rax$/;"	l
ffff800000101952	kernel.asm	/^ffff800000101952:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101959	kernel.asm	/^ffff800000101959:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010195d	kernel.asm	/^ffff80000010195d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
ffff800000101961	kernel.asm	/^ffff800000101961:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000101965	kernel.asm	/^ffff800000101965:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010196c	kernel.asm	/^ffff80000010196c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101970	kernel.asm	/^ffff800000101970:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000101974	kernel.asm	/^ffff800000101974:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000101977	kernel.asm	/^ffff800000101977:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010197e	kernel.asm	/^ffff80000010197e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101982	kernel.asm	/^ffff800000101982:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101986	kernel.asm	/^ffff800000101986:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff80000010198d	kernel.asm	/^ffff80000010198d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)$/;"	l
ffff800000101994	kernel.asm	/^ffff800000101994:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010199b	kernel.asm	/^ffff80000010199b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010199f	kernel.asm	/^ffff80000010199f:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001019a3	kernel.asm	/^ffff8000001019a3:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff8000001019aa	kernel.asm	/^ffff8000001019aa:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff8000001019ae	kernel.asm	/^ffff8000001019ae:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001019b5	kernel.asm	/^ffff8000001019b5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001019b9	kernel.asm	/^ffff8000001019b9:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001019bd	kernel.asm	/^ffff8000001019bd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff8000001019c1	kernel.asm	/^ffff8000001019c1:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff8000001019c8	kernel.asm	/^ffff8000001019c8:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001019cf	kernel.asm	/^ffff8000001019cf:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001019d3	kernel.asm	/^ffff8000001019d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001019d6	kernel.asm	/^ffff8000001019d6:	48 b8 59 bd 10 00 00 	movabs $0xffff80000010bd59,%rax$/;"	l
ffff8000001019dd	kernel.asm	/^ffff8000001019dd:	80 ff ff $/;"	l
ffff8000001019e0	kernel.asm	/^ffff8000001019e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001019e2	kernel.asm	/^ffff8000001019e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff8000001019e6	kernel.asm	/^ffff8000001019e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001019e9	kernel.asm	/^ffff8000001019e9:	48 b8 55 c5 10 00 00 	movabs $0xffff80000010c555,%rax$/;"	l
ffff8000001019f0	kernel.asm	/^ffff8000001019f0:	80 ff ff $/;"	l
ffff8000001019f3	kernel.asm	/^ffff8000001019f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001019f5	kernel.asm	/^ffff8000001019f5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001019fa	kernel.asm	/^ffff8000001019fa:	eb 6f                	jmp    ffff800000101a6b <exec+0x61e>$/;"	l
ffff8000001019fc	kernel.asm	/^ffff8000001019fc:	90                   	nop$/;"	l
ffff8000001019fd	kernel.asm	/^ffff8000001019fd:	eb 22                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff8000001019ff	kernel.asm	/^ffff8000001019ff:	90                   	nop$/;"	l
ffff800000101a00	kernel.asm	/^ffff800000101a00:	eb 1f                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a02	kernel.asm	/^ffff800000101a02:	90                   	nop$/;"	l
ffff800000101a03	kernel.asm	/^ffff800000101a03:	eb 1c                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a05	kernel.asm	/^ffff800000101a05:	90                   	nop$/;"	l
ffff800000101a06	kernel.asm	/^ffff800000101a06:	eb 19                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a08	kernel.asm	/^ffff800000101a08:	90                   	nop$/;"	l
ffff800000101a09	kernel.asm	/^ffff800000101a09:	eb 16                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a0b	kernel.asm	/^ffff800000101a0b:	90                   	nop$/;"	l
ffff800000101a0c	kernel.asm	/^ffff800000101a0c:	eb 13                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a0e	kernel.asm	/^ffff800000101a0e:	90                   	nop$/;"	l
ffff800000101a0f	kernel.asm	/^ffff800000101a0f:	eb 10                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a11	kernel.asm	/^ffff800000101a11:	90                   	nop$/;"	l
ffff800000101a12	kernel.asm	/^ffff800000101a12:	eb 0d                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a14	kernel.asm	/^ffff800000101a14:	90                   	nop$/;"	l
ffff800000101a15	kernel.asm	/^ffff800000101a15:	eb 0a                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a17	kernel.asm	/^ffff800000101a17:	90                   	nop$/;"	l
ffff800000101a18	kernel.asm	/^ffff800000101a18:	eb 07                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a1a	kernel.asm	/^ffff800000101a1a:	90                   	nop$/;"	l
ffff800000101a1b	kernel.asm	/^ffff800000101a1b:	eb 04                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a1d	kernel.asm	/^ffff800000101a1d:	90                   	nop$/;"	l
ffff800000101a1e	kernel.asm	/^ffff800000101a1e:	eb 01                	jmp    ffff800000101a21 <exec+0x5d4>$/;"	l
ffff800000101a20	kernel.asm	/^ffff800000101a20:	90                   	nop$/;"	l
ffff800000101a21	kernel.asm	/^ffff800000101a21:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff800000101a26	kernel.asm	/^ffff800000101a26:	74 13                	je     ffff800000101a3b <exec+0x5ee>$/;"	l
ffff800000101a28	kernel.asm	/^ffff800000101a28:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101a2c	kernel.asm	/^ffff800000101a2c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101a2f	kernel.asm	/^ffff800000101a2f:	48 b8 55 c5 10 00 00 	movabs $0xffff80000010c555,%rax$/;"	l
ffff800000101a36	kernel.asm	/^ffff800000101a36:	80 ff ff $/;"	l
ffff800000101a39	kernel.asm	/^ffff800000101a39:	ff d0                	callq  *%rax$/;"	l
ffff800000101a3b	kernel.asm	/^ffff800000101a3b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff800000101a40	kernel.asm	/^ffff800000101a40:	74 24                	je     ffff800000101a66 <exec+0x619>$/;"	l
ffff800000101a42	kernel.asm	/^ffff800000101a42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101a46	kernel.asm	/^ffff800000101a46:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101a49	kernel.asm	/^ffff800000101a49:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000101a50	kernel.asm	/^ffff800000101a50:	80 ff ff $/;"	l
ffff800000101a53	kernel.asm	/^ffff800000101a53:	ff d0                	callq  *%rax$/;"	l
ffff800000101a55	kernel.asm	/^ffff800000101a55:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101a5a	kernel.asm	/^ffff800000101a5a:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000101a61	kernel.asm	/^ffff800000101a61:	80 ff ff $/;"	l
ffff800000101a64	kernel.asm	/^ffff800000101a64:	ff d2                	callq  *%rdx$/;"	l
ffff800000101a66	kernel.asm	/^ffff800000101a66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101a6b	kernel.asm	/^ffff800000101a6b:	c9                   	leaveq $/;"	l
ffff800000101a6c	kernel.asm	/^ffff800000101a6c:	c3                   	retq   $/;"	l
ffff800000101a6d	kernel.asm	/^ffff800000101a6d <fileinit>:$/;"	l
ffff800000101a6d	kernel.asm	/^ffff800000101a6d:	55                   	push   %rbp$/;"	l
ffff800000101a6e	kernel.asm	/^ffff800000101a6e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101a71	kernel.asm	/^ffff800000101a71:	48 be 08 cb 10 00 00 	movabs $0xffff80000010cb08,%rsi$/;"	l
ffff800000101a78	kernel.asm	/^ffff800000101a78:	80 ff ff $/;"	l
ffff800000101a7b	kernel.asm	/^ffff800000101a7b:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101a82	kernel.asm	/^ffff800000101a82:	80 ff ff $/;"	l
ffff800000101a85	kernel.asm	/^ffff800000101a85:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff800000101a8c	kernel.asm	/^ffff800000101a8c:	80 ff ff $/;"	l
ffff800000101a8f	kernel.asm	/^ffff800000101a8f:	ff d0                	callq  *%rax$/;"	l
ffff800000101a91	kernel.asm	/^ffff800000101a91:	90                   	nop$/;"	l
ffff800000101a92	kernel.asm	/^ffff800000101a92:	5d                   	pop    %rbp$/;"	l
ffff800000101a93	kernel.asm	/^ffff800000101a93:	c3                   	retq   $/;"	l
ffff800000101a94	kernel.asm	/^ffff800000101a94 <filealloc>:$/;"	l
ffff800000101a94	kernel.asm	/^ffff800000101a94:	55                   	push   %rbp$/;"	l
ffff800000101a95	kernel.asm	/^ffff800000101a95:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101a98	kernel.asm	/^ffff800000101a98:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101a9c	kernel.asm	/^ffff800000101a9c:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101aa3	kernel.asm	/^ffff800000101aa3:	80 ff ff $/;"	l
ffff800000101aa6	kernel.asm	/^ffff800000101aa6:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000101aad	kernel.asm	/^ffff800000101aad:	80 ff ff $/;"	l
ffff800000101ab0	kernel.asm	/^ffff800000101ab0:	ff d0                	callq  *%rax$/;"	l
ffff800000101ab2	kernel.asm	/^ffff800000101ab2:	48 b8 48 66 11 00 00 	movabs $0xffff800000116648,%rax$/;"	l
ffff800000101ab9	kernel.asm	/^ffff800000101ab9:	80 ff ff $/;"	l
ffff800000101abc	kernel.asm	/^ffff800000101abc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101ac0	kernel.asm	/^ffff800000101ac0:	eb 37                	jmp    ffff800000101af9 <filealloc+0x65>$/;"	l
ffff800000101ac2	kernel.asm	/^ffff800000101ac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ac6	kernel.asm	/^ffff800000101ac6:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101ac9	kernel.asm	/^ffff800000101ac9:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101acb	kernel.asm	/^ffff800000101acb:	75 27                	jne    ffff800000101af4 <filealloc+0x60>$/;"	l
ffff800000101acd	kernel.asm	/^ffff800000101acd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ad1	kernel.asm	/^ffff800000101ad1:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)$/;"	l
ffff800000101ad8	kernel.asm	/^ffff800000101ad8:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101adf	kernel.asm	/^ffff800000101adf:	80 ff ff $/;"	l
ffff800000101ae2	kernel.asm	/^ffff800000101ae2:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000101ae9	kernel.asm	/^ffff800000101ae9:	80 ff ff $/;"	l
ffff800000101aec	kernel.asm	/^ffff800000101aec:	ff d0                	callq  *%rax$/;"	l
ffff800000101aee	kernel.asm	/^ffff800000101aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101af2	kernel.asm	/^ffff800000101af2:	eb 30                	jmp    ffff800000101b24 <filealloc+0x90>$/;"	l
ffff800000101af4	kernel.asm	/^ffff800000101af4:	48 83 45 f8 28       	addq   $0x28,-0x8(%rbp)$/;"	l
ffff800000101af9	kernel.asm	/^ffff800000101af9:	48 b8 e8 75 11 00 00 	movabs $0xffff8000001175e8,%rax$/;"	l
ffff800000101b00	kernel.asm	/^ffff800000101b00:	80 ff ff $/;"	l
ffff800000101b03	kernel.asm	/^ffff800000101b03:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000101b07	kernel.asm	/^ffff800000101b07:	72 b9                	jb     ffff800000101ac2 <filealloc+0x2e>$/;"	l
ffff800000101b09	kernel.asm	/^ffff800000101b09:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101b10	kernel.asm	/^ffff800000101b10:	80 ff ff $/;"	l
ffff800000101b13	kernel.asm	/^ffff800000101b13:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000101b1a	kernel.asm	/^ffff800000101b1a:	80 ff ff $/;"	l
ffff800000101b1d	kernel.asm	/^ffff800000101b1d:	ff d0                	callq  *%rax$/;"	l
ffff800000101b1f	kernel.asm	/^ffff800000101b1f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101b24	kernel.asm	/^ffff800000101b24:	c9                   	leaveq $/;"	l
ffff800000101b25	kernel.asm	/^ffff800000101b25:	c3                   	retq   $/;"	l
ffff800000101b26	kernel.asm	/^ffff800000101b26 <filedup>:$/;"	l
ffff800000101b26	kernel.asm	/^ffff800000101b26:	55                   	push   %rbp$/;"	l
ffff800000101b27	kernel.asm	/^ffff800000101b27:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101b2a	kernel.asm	/^ffff800000101b2a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101b2e	kernel.asm	/^ffff800000101b2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101b32	kernel.asm	/^ffff800000101b32:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101b39	kernel.asm	/^ffff800000101b39:	80 ff ff $/;"	l
ffff800000101b3c	kernel.asm	/^ffff800000101b3c:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000101b43	kernel.asm	/^ffff800000101b43:	80 ff ff $/;"	l
ffff800000101b46	kernel.asm	/^ffff800000101b46:	ff d0                	callq  *%rax$/;"	l
ffff800000101b48	kernel.asm	/^ffff800000101b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b4c	kernel.asm	/^ffff800000101b4c:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101b4f	kernel.asm	/^ffff800000101b4f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101b51	kernel.asm	/^ffff800000101b51:	7f 16                	jg     ffff800000101b69 <filedup+0x43>$/;"	l
ffff800000101b53	kernel.asm	/^ffff800000101b53:	48 bf 0f cb 10 00 00 	movabs $0xffff80000010cb0f,%rdi$/;"	l
ffff800000101b5a	kernel.asm	/^ffff800000101b5a:	80 ff ff $/;"	l
ffff800000101b5d	kernel.asm	/^ffff800000101b5d:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101b64	kernel.asm	/^ffff800000101b64:	80 ff ff $/;"	l
ffff800000101b67	kernel.asm	/^ffff800000101b67:	ff d0                	callq  *%rax$/;"	l
ffff800000101b69	kernel.asm	/^ffff800000101b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b6d	kernel.asm	/^ffff800000101b6d:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101b70	kernel.asm	/^ffff800000101b70:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000101b73	kernel.asm	/^ffff800000101b73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b77	kernel.asm	/^ffff800000101b77:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101b7a	kernel.asm	/^ffff800000101b7a:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101b81	kernel.asm	/^ffff800000101b81:	80 ff ff $/;"	l
ffff800000101b84	kernel.asm	/^ffff800000101b84:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000101b8b	kernel.asm	/^ffff800000101b8b:	80 ff ff $/;"	l
ffff800000101b8e	kernel.asm	/^ffff800000101b8e:	ff d0                	callq  *%rax$/;"	l
ffff800000101b90	kernel.asm	/^ffff800000101b90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101b94	kernel.asm	/^ffff800000101b94:	c9                   	leaveq $/;"	l
ffff800000101b95	kernel.asm	/^ffff800000101b95:	c3                   	retq   $/;"	l
ffff800000101b96	kernel.asm	/^ffff800000101b96 <fileclose>:$/;"	l
ffff800000101b96	kernel.asm	/^ffff800000101b96:	55                   	push   %rbp$/;"	l
ffff800000101b97	kernel.asm	/^ffff800000101b97:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101b9a	kernel.asm	/^ffff800000101b9a:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000101b9e	kernel.asm	/^ffff800000101b9e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000101ba2	kernel.asm	/^ffff800000101ba2:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101ba9	kernel.asm	/^ffff800000101ba9:	80 ff ff $/;"	l
ffff800000101bac	kernel.asm	/^ffff800000101bac:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000101bb3	kernel.asm	/^ffff800000101bb3:	80 ff ff $/;"	l
ffff800000101bb6	kernel.asm	/^ffff800000101bb6:	ff d0                	callq  *%rax$/;"	l
ffff800000101bb8	kernel.asm	/^ffff800000101bb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bbc	kernel.asm	/^ffff800000101bbc:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101bbf	kernel.asm	/^ffff800000101bbf:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101bc1	kernel.asm	/^ffff800000101bc1:	7f 16                	jg     ffff800000101bd9 <fileclose+0x43>$/;"	l
ffff800000101bc3	kernel.asm	/^ffff800000101bc3:	48 bf 17 cb 10 00 00 	movabs $0xffff80000010cb17,%rdi$/;"	l
ffff800000101bca	kernel.asm	/^ffff800000101bca:	80 ff ff $/;"	l
ffff800000101bcd	kernel.asm	/^ffff800000101bcd:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101bd4	kernel.asm	/^ffff800000101bd4:	80 ff ff $/;"	l
ffff800000101bd7	kernel.asm	/^ffff800000101bd7:	ff d0                	callq  *%rax$/;"	l
ffff800000101bd9	kernel.asm	/^ffff800000101bd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bdd	kernel.asm	/^ffff800000101bdd:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101be0	kernel.asm	/^ffff800000101be0:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000101be3	kernel.asm	/^ffff800000101be3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101be7	kernel.asm	/^ffff800000101be7:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101bea	kernel.asm	/^ffff800000101bea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bee	kernel.asm	/^ffff800000101bee:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101bf1	kernel.asm	/^ffff800000101bf1:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101bf3	kernel.asm	/^ffff800000101bf3:	7e 1b                	jle    ffff800000101c10 <fileclose+0x7a>$/;"	l
ffff800000101bf5	kernel.asm	/^ffff800000101bf5:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101bfc	kernel.asm	/^ffff800000101bfc:	80 ff ff $/;"	l
ffff800000101bff	kernel.asm	/^ffff800000101bff:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000101c06	kernel.asm	/^ffff800000101c06:	80 ff ff $/;"	l
ffff800000101c09	kernel.asm	/^ffff800000101c09:	ff d0                	callq  *%rax$/;"	l
ffff800000101c0b	kernel.asm	/^ffff800000101c0b:	e9 b9 00 00 00       	jmpq   ffff800000101cc9 <fileclose+0x133>$/;"	l
ffff800000101c10	kernel.asm	/^ffff800000101c10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c14	kernel.asm	/^ffff800000101c14:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000101c17	kernel.asm	/^ffff800000101c17:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)$/;"	l
ffff800000101c1b	kernel.asm	/^ffff800000101c1b:	48 8b 50 08          	mov    0x8(%rax),%rdx$/;"	l
ffff800000101c1f	kernel.asm	/^ffff800000101c1f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000101c23	kernel.asm	/^ffff800000101c23:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff800000101c27	kernel.asm	/^ffff800000101c27:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff800000101c2b	kernel.asm	/^ffff800000101c2b:	48 8b 50 18          	mov    0x18(%rax),%rdx$/;"	l
ffff800000101c2f	kernel.asm	/^ffff800000101c2f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000101c33	kernel.asm	/^ffff800000101c33:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff800000101c37	kernel.asm	/^ffff800000101c37:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101c3b	kernel.asm	/^ffff800000101c3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c3f	kernel.asm	/^ffff800000101c3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)$/;"	l
ffff800000101c46	kernel.asm	/^ffff800000101c46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101c4a	kernel.asm	/^ffff800000101c4a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000101c50	kernel.asm	/^ffff800000101c50:	48 bf e0 65 11 00 00 	movabs $0xffff8000001165e0,%rdi$/;"	l
ffff800000101c57	kernel.asm	/^ffff800000101c57:	80 ff ff $/;"	l
ffff800000101c5a	kernel.asm	/^ffff800000101c5a:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000101c61	kernel.asm	/^ffff800000101c61:	80 ff ff $/;"	l
ffff800000101c64	kernel.asm	/^ffff800000101c64:	ff d0                	callq  *%rax$/;"	l
ffff800000101c66	kernel.asm	/^ffff800000101c66:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101c69	kernel.asm	/^ffff800000101c69:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101c6c	kernel.asm	/^ffff800000101c6c:	75 1e                	jne    ffff800000101c8c <fileclose+0xf6>$/;"	l
ffff800000101c6e	kernel.asm	/^ffff800000101c6e:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax$/;"	l
ffff800000101c72	kernel.asm	/^ffff800000101c72:	0f be d0             	movsbl %al,%edx$/;"	l
ffff800000101c75	kernel.asm	/^ffff800000101c75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101c79	kernel.asm	/^ffff800000101c79:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000101c7b	kernel.asm	/^ffff800000101c7b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101c7e	kernel.asm	/^ffff800000101c7e:	48 b8 2e 5d 10 00 00 	movabs $0xffff800000105d2e,%rax$/;"	l
ffff800000101c85	kernel.asm	/^ffff800000101c85:	80 ff ff $/;"	l
ffff800000101c88	kernel.asm	/^ffff800000101c88:	ff d0                	callq  *%rax$/;"	l
ffff800000101c8a	kernel.asm	/^ffff800000101c8a:	eb 3d                	jmp    ffff800000101cc9 <fileclose+0x133>$/;"	l
ffff800000101c8c	kernel.asm	/^ffff800000101c8c:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101c8f	kernel.asm	/^ffff800000101c8f:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101c92	kernel.asm	/^ffff800000101c92:	75 35                	jne    ffff800000101cc9 <fileclose+0x133>$/;"	l
ffff800000101c94	kernel.asm	/^ffff800000101c94:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101c99	kernel.asm	/^ffff800000101c99:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000101ca0	kernel.asm	/^ffff800000101ca0:	80 ff ff $/;"	l
ffff800000101ca3	kernel.asm	/^ffff800000101ca3:	ff d2                	callq  *%rdx$/;"	l
ffff800000101ca5	kernel.asm	/^ffff800000101ca5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101ca9	kernel.asm	/^ffff800000101ca9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101cac	kernel.asm	/^ffff800000101cac:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff800000101cb3	kernel.asm	/^ffff800000101cb3:	80 ff ff $/;"	l
ffff800000101cb6	kernel.asm	/^ffff800000101cb6:	ff d0                	callq  *%rax$/;"	l
ffff800000101cb8	kernel.asm	/^ffff800000101cb8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101cbd	kernel.asm	/^ffff800000101cbd:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000101cc4	kernel.asm	/^ffff800000101cc4:	80 ff ff $/;"	l
ffff800000101cc7	kernel.asm	/^ffff800000101cc7:	ff d2                	callq  *%rdx$/;"	l
ffff800000101cc9	kernel.asm	/^ffff800000101cc9:	c9                   	leaveq $/;"	l
ffff800000101cca	kernel.asm	/^ffff800000101cca:	c3                   	retq   $/;"	l
ffff800000101ccb	kernel.asm	/^ffff800000101ccb <fileioctl>:$/;"	l
ffff800000101ccb	kernel.asm	/^ffff800000101ccb:	55                   	push   %rbp$/;"	l
ffff800000101ccc	kernel.asm	/^ffff800000101ccc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101ccf	kernel.asm	/^ffff800000101ccf:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101cd3	kernel.asm	/^ffff800000101cd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101cd7	kernel.asm	/^ffff800000101cd7:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000101cda	kernel.asm	/^ffff800000101cda:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000101cdd	kernel.asm	/^ffff800000101cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ce1	kernel.asm	/^ffff800000101ce1:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101ce5	kernel.asm	/^ffff800000101ce5:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101cec	kernel.asm	/^ffff800000101cec:	98                   	cwtl   $/;"	l
ffff800000101ced	kernel.asm	/^ffff800000101ced:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101cf0	kernel.asm	/^ffff800000101cf0:	75 1d                	jne    ffff800000101d0f <fileioctl+0x44>$/;"	l
ffff800000101cf2	kernel.asm	/^ffff800000101cf2:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000101cf5	kernel.asm	/^ffff800000101cf5:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff800000101cf8	kernel.asm	/^ffff800000101cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101cfc	kernel.asm	/^ffff800000101cfc:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000101cfe	kernel.asm	/^ffff800000101cfe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101d01	kernel.asm	/^ffff800000101d01:	48 b8 f6 12 10 00 00 	movabs $0xffff8000001012f6,%rax$/;"	l
ffff800000101d08	kernel.asm	/^ffff800000101d08:	80 ff ff $/;"	l
ffff800000101d0b	kernel.asm	/^ffff800000101d0b:	ff d0                	callq  *%rax$/;"	l
ffff800000101d0d	kernel.asm	/^ffff800000101d0d:	eb 5d                	jmp    ffff800000101d6c <fileioctl+0xa1>$/;"	l
ffff800000101d0f	kernel.asm	/^ffff800000101d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d13	kernel.asm	/^ffff800000101d13:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d17	kernel.asm	/^ffff800000101d17:	0f b7 80 98 00 00 00 	movzwl 0x98(%rax),%eax$/;"	l
ffff800000101d1e	kernel.asm	/^ffff800000101d1e:	0f bf c8             	movswl %ax,%ecx$/;"	l
ffff800000101d21	kernel.asm	/^ffff800000101d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d25	kernel.asm	/^ffff800000101d25:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d29	kernel.asm	/^ffff800000101d29:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101d30	kernel.asm	/^ffff800000101d30:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000101d33	kernel.asm	/^ffff800000101d33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d37	kernel.asm	/^ffff800000101d37:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d3b	kernel.asm	/^ffff800000101d3b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101d3d	kernel.asm	/^ffff800000101d3d:	8b 7d f0             	mov    -0x10(%rbp),%edi$/;"	l
ffff800000101d40	kernel.asm	/^ffff800000101d40:	8b 75 f4             	mov    -0xc(%rbp),%esi$/;"	l
ffff800000101d43	kernel.asm	/^ffff800000101d43:	41 89 f9             	mov    %edi,%r9d$/;"	l
ffff800000101d46	kernel.asm	/^ffff800000101d46:	41 89 f0             	mov    %esi,%r8d$/;"	l
ffff800000101d49	kernel.asm	/^ffff800000101d49:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000101d4b	kernel.asm	/^ffff800000101d4b:	48 bf 28 cb 10 00 00 	movabs $0xffff80000010cb28,%rdi$/;"	l
ffff800000101d52	kernel.asm	/^ffff800000101d52:	80 ff ff $/;"	l
ffff800000101d55	kernel.asm	/^ffff800000101d55:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101d5a	kernel.asm	/^ffff800000101d5a:	49 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%r10$/;"	l
ffff800000101d61	kernel.asm	/^ffff800000101d61:	80 ff ff $/;"	l
ffff800000101d64	kernel.asm	/^ffff800000101d64:	41 ff d2             	callq  *%r10$/;"	l
ffff800000101d67	kernel.asm	/^ffff800000101d67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101d6c	kernel.asm	/^ffff800000101d6c:	c9                   	leaveq $/;"	l
ffff800000101d6d	kernel.asm	/^ffff800000101d6d:	c3                   	retq   $/;"	l
ffff800000101d6e	kernel.asm	/^ffff800000101d6e <filestat>:$/;"	l
ffff800000101d6e	kernel.asm	/^ffff800000101d6e:	55                   	push   %rbp$/;"	l
ffff800000101d6f	kernel.asm	/^ffff800000101d6f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101d72	kernel.asm	/^ffff800000101d72:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101d76	kernel.asm	/^ffff800000101d76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101d7a	kernel.asm	/^ffff800000101d7a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000101d7e	kernel.asm	/^ffff800000101d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d82	kernel.asm	/^ffff800000101d82:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101d84	kernel.asm	/^ffff800000101d84:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101d87	kernel.asm	/^ffff800000101d87:	75 53                	jne    ffff800000101ddc <filestat+0x6e>$/;"	l
ffff800000101d89	kernel.asm	/^ffff800000101d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d8d	kernel.asm	/^ffff800000101d8d:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101d91	kernel.asm	/^ffff800000101d91:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101d94	kernel.asm	/^ffff800000101d94:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000101d9b	kernel.asm	/^ffff800000101d9b:	80 ff ff $/;"	l
ffff800000101d9e	kernel.asm	/^ffff800000101d9e:	ff d0                	callq  *%rax$/;"	l
ffff800000101da0	kernel.asm	/^ffff800000101da0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101da4	kernel.asm	/^ffff800000101da4:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101da8	kernel.asm	/^ffff800000101da8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000101dac	kernel.asm	/^ffff800000101dac:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000101daf	kernel.asm	/^ffff800000101daf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101db2	kernel.asm	/^ffff800000101db2:	48 b8 cb 2f 10 00 00 	movabs $0xffff800000102fcb,%rax$/;"	l
ffff800000101db9	kernel.asm	/^ffff800000101db9:	80 ff ff $/;"	l
ffff800000101dbc	kernel.asm	/^ffff800000101dbc:	ff d0                	callq  *%rax$/;"	l
ffff800000101dbe	kernel.asm	/^ffff800000101dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101dc2	kernel.asm	/^ffff800000101dc2:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101dc6	kernel.asm	/^ffff800000101dc6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101dc9	kernel.asm	/^ffff800000101dc9:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000101dd0	kernel.asm	/^ffff800000101dd0:	80 ff ff $/;"	l
ffff800000101dd3	kernel.asm	/^ffff800000101dd3:	ff d0                	callq  *%rax$/;"	l
ffff800000101dd5	kernel.asm	/^ffff800000101dd5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101dda	kernel.asm	/^ffff800000101dda:	eb 05                	jmp    ffff800000101de1 <filestat+0x73>$/;"	l
ffff800000101ddc	kernel.asm	/^ffff800000101ddc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101de1	kernel.asm	/^ffff800000101de1:	c9                   	leaveq $/;"	l
ffff800000101de2	kernel.asm	/^ffff800000101de2:	c3                   	retq   $/;"	l
ffff800000101de3	kernel.asm	/^ffff800000101de3 <fileread>:$/;"	l
ffff800000101de3	kernel.asm	/^ffff800000101de3:	55                   	push   %rbp$/;"	l
ffff800000101de4	kernel.asm	/^ffff800000101de4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101de7	kernel.asm	/^ffff800000101de7:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101deb	kernel.asm	/^ffff800000101deb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101def	kernel.asm	/^ffff800000101def:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101df3	kernel.asm	/^ffff800000101df3:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101df6	kernel.asm	/^ffff800000101df6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101dfa	kernel.asm	/^ffff800000101dfa:	0f b6 40 08          	movzbl 0x8(%rax),%eax$/;"	l
ffff800000101dfe	kernel.asm	/^ffff800000101dfe:	84 c0                	test   %al,%al$/;"	l
ffff800000101e00	kernel.asm	/^ffff800000101e00:	75 0a                	jne    ffff800000101e0c <fileread+0x29>$/;"	l
ffff800000101e02	kernel.asm	/^ffff800000101e02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101e07	kernel.asm	/^ffff800000101e07:	e9 82 01 00 00       	jmpq   ffff800000101f8e <fileread+0x1ab>$/;"	l
ffff800000101e0c	kernel.asm	/^ffff800000101e0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e10	kernel.asm	/^ffff800000101e10:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101e12	kernel.asm	/^ffff800000101e12:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101e15	kernel.asm	/^ffff800000101e15:	75 26                	jne    ffff800000101e3d <fileread+0x5a>$/;"	l
ffff800000101e17	kernel.asm	/^ffff800000101e17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e1b	kernel.asm	/^ffff800000101e1b:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000101e1f	kernel.asm	/^ffff800000101e1f:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101e22	kernel.asm	/^ffff800000101e22:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff800000101e26	kernel.asm	/^ffff800000101e26:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000101e29	kernel.asm	/^ffff800000101e29:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101e2c	kernel.asm	/^ffff800000101e2c:	48 b8 3f 5f 10 00 00 	movabs $0xffff800000105f3f,%rax$/;"	l
ffff800000101e33	kernel.asm	/^ffff800000101e33:	80 ff ff $/;"	l
ffff800000101e36	kernel.asm	/^ffff800000101e36:	ff d0                	callq  *%rax$/;"	l
ffff800000101e38	kernel.asm	/^ffff800000101e38:	e9 51 01 00 00       	jmpq   ffff800000101f8e <fileread+0x1ab>$/;"	l
ffff800000101e3d	kernel.asm	/^ffff800000101e3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e41	kernel.asm	/^ffff800000101e41:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101e43	kernel.asm	/^ffff800000101e43:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101e46	kernel.asm	/^ffff800000101e46:	0f 85 2c 01 00 00    	jne    ffff800000101f78 <fileread+0x195>$/;"	l
ffff800000101e4c	kernel.asm	/^ffff800000101e4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e50	kernel.asm	/^ffff800000101e50:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e54	kernel.asm	/^ffff800000101e54:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000101e5b	kernel.asm	/^ffff800000101e5b:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff800000101e5f	kernel.asm	/^ffff800000101e5f:	0f 85 9f 00 00 00    	jne    ffff800000101f04 <fileread+0x121>$/;"	l
ffff800000101e65	kernel.asm	/^ffff800000101e65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e69	kernel.asm	/^ffff800000101e69:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e6d	kernel.asm	/^ffff800000101e6d:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101e74	kernel.asm	/^ffff800000101e74:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000101e77	kernel.asm	/^ffff800000101e77:	78 43                	js     ffff800000101ebc <fileread+0xd9>$/;"	l
ffff800000101e79	kernel.asm	/^ffff800000101e79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e7d	kernel.asm	/^ffff800000101e7d:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e81	kernel.asm	/^ffff800000101e81:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101e88	kernel.asm	/^ffff800000101e88:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff800000101e8c	kernel.asm	/^ffff800000101e8c:	7f 2e                	jg     ffff800000101ebc <fileread+0xd9>$/;"	l
ffff800000101e8e	kernel.asm	/^ffff800000101e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e92	kernel.asm	/^ffff800000101e92:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e96	kernel.asm	/^ffff800000101e96:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101e9d	kernel.asm	/^ffff800000101e9d:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000101ea0	kernel.asm	/^ffff800000101ea0:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff800000101ea7	kernel.asm	/^ffff800000101ea7:	80 ff ff $/;"	l
ffff800000101eaa	kernel.asm	/^ffff800000101eaa:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000101ead	kernel.asm	/^ffff800000101ead:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000101eb1	kernel.asm	/^ffff800000101eb1:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101eb4	kernel.asm	/^ffff800000101eb4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000101eb7	kernel.asm	/^ffff800000101eb7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000101eba	kernel.asm	/^ffff800000101eba:	75 0a                	jne    ffff800000101ec6 <fileread+0xe3>$/;"	l
ffff800000101ebc	kernel.asm	/^ffff800000101ebc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101ec1	kernel.asm	/^ffff800000101ec1:	e9 c8 00 00 00       	jmpq   ffff800000101f8e <fileread+0x1ab>$/;"	l
ffff800000101ec6	kernel.asm	/^ffff800000101ec6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101eca	kernel.asm	/^ffff800000101eca:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101ece	kernel.asm	/^ffff800000101ece:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101ed5	kernel.asm	/^ffff800000101ed5:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000101ed8	kernel.asm	/^ffff800000101ed8:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff800000101edf	kernel.asm	/^ffff800000101edf:	80 ff ff $/;"	l
ffff800000101ee2	kernel.asm	/^ffff800000101ee2:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000101ee5	kernel.asm	/^ffff800000101ee5:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000101ee9	kernel.asm	/^ffff800000101ee9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101eec	kernel.asm	/^ffff800000101eec:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000101eef	kernel.asm	/^ffff800000101eef:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101ef2	kernel.asm	/^ffff800000101ef2:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff800000101ef6	kernel.asm	/^ffff800000101ef6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000101efa	kernel.asm	/^ffff800000101efa:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000101efd	kernel.asm	/^ffff800000101efd:	ff d0                	callq  *%rax$/;"	l
ffff800000101eff	kernel.asm	/^ffff800000101eff:	e9 8a 00 00 00       	jmpq   ffff800000101f8e <fileread+0x1ab>$/;"	l
ffff800000101f04	kernel.asm	/^ffff800000101f04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f08	kernel.asm	/^ffff800000101f08:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f0c	kernel.asm	/^ffff800000101f0c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f0f	kernel.asm	/^ffff800000101f0f:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000101f16	kernel.asm	/^ffff800000101f16:	80 ff ff $/;"	l
ffff800000101f19	kernel.asm	/^ffff800000101f19:	ff d0                	callq  *%rax$/;"	l
ffff800000101f1b	kernel.asm	/^ffff800000101f1b:	8b 4d dc             	mov    -0x24(%rbp),%ecx$/;"	l
ffff800000101f1e	kernel.asm	/^ffff800000101f1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f22	kernel.asm	/^ffff800000101f22:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101f25	kernel.asm	/^ffff800000101f25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f29	kernel.asm	/^ffff800000101f29:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f2d	kernel.asm	/^ffff800000101f2d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff800000101f31	kernel.asm	/^ffff800000101f31:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f34	kernel.asm	/^ffff800000101f34:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000101f3b	kernel.asm	/^ffff800000101f3b:	80 ff ff $/;"	l
ffff800000101f3e	kernel.asm	/^ffff800000101f3e:	ff d0                	callq  *%rax$/;"	l
ffff800000101f40	kernel.asm	/^ffff800000101f40:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000101f43	kernel.asm	/^ffff800000101f43:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101f47	kernel.asm	/^ffff800000101f47:	7e 13                	jle    ffff800000101f5c <fileread+0x179>$/;"	l
ffff800000101f49	kernel.asm	/^ffff800000101f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f4d	kernel.asm	/^ffff800000101f4d:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000101f50	kernel.asm	/^ffff800000101f50:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101f53	kernel.asm	/^ffff800000101f53:	01 c2                	add    %eax,%edx$/;"	l
ffff800000101f55	kernel.asm	/^ffff800000101f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f59	kernel.asm	/^ffff800000101f59:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff800000101f5c	kernel.asm	/^ffff800000101f5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101f60	kernel.asm	/^ffff800000101f60:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f64	kernel.asm	/^ffff800000101f64:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f67	kernel.asm	/^ffff800000101f67:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000101f6e	kernel.asm	/^ffff800000101f6e:	80 ff ff $/;"	l
ffff800000101f71	kernel.asm	/^ffff800000101f71:	ff d0                	callq  *%rax$/;"	l
ffff800000101f73	kernel.asm	/^ffff800000101f73:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101f76	kernel.asm	/^ffff800000101f76:	eb 16                	jmp    ffff800000101f8e <fileread+0x1ab>$/;"	l
ffff800000101f78	kernel.asm	/^ffff800000101f78:	48 bf 61 cb 10 00 00 	movabs $0xffff80000010cb61,%rdi$/;"	l
ffff800000101f7f	kernel.asm	/^ffff800000101f7f:	80 ff ff $/;"	l
ffff800000101f82	kernel.asm	/^ffff800000101f82:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000101f89	kernel.asm	/^ffff800000101f89:	80 ff ff $/;"	l
ffff800000101f8c	kernel.asm	/^ffff800000101f8c:	ff d0                	callq  *%rax$/;"	l
ffff800000101f8e	kernel.asm	/^ffff800000101f8e:	c9                   	leaveq $/;"	l
ffff800000101f8f	kernel.asm	/^ffff800000101f8f:	c3                   	retq   $/;"	l
ffff800000101f90	kernel.asm	/^ffff800000101f90 <filewrite>:$/;"	l
ffff800000101f90	kernel.asm	/^ffff800000101f90:	55                   	push   %rbp$/;"	l
ffff800000101f91	kernel.asm	/^ffff800000101f91:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101f94	kernel.asm	/^ffff800000101f94:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101f98	kernel.asm	/^ffff800000101f98:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101f9c	kernel.asm	/^ffff800000101f9c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101fa0	kernel.asm	/^ffff800000101fa0:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101fa3	kernel.asm	/^ffff800000101fa3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fa7	kernel.asm	/^ffff800000101fa7:	0f b6 40 09          	movzbl 0x9(%rax),%eax$/;"	l
ffff800000101fab	kernel.asm	/^ffff800000101fab:	84 c0                	test   %al,%al$/;"	l
ffff800000101fad	kernel.asm	/^ffff800000101fad:	75 0a                	jne    ffff800000101fb9 <filewrite+0x29>$/;"	l
ffff800000101faf	kernel.asm	/^ffff800000101faf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101fb4	kernel.asm	/^ffff800000101fb4:	e9 27 02 00 00       	jmpq   ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff800000101fb9	kernel.asm	/^ffff800000101fb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fbd	kernel.asm	/^ffff800000101fbd:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101fbf	kernel.asm	/^ffff800000101fbf:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101fc2	kernel.asm	/^ffff800000101fc2:	75 26                	jne    ffff800000101fea <filewrite+0x5a>$/;"	l
ffff800000101fc4	kernel.asm	/^ffff800000101fc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fc8	kernel.asm	/^ffff800000101fc8:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000101fcc	kernel.asm	/^ffff800000101fcc:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101fcf	kernel.asm	/^ffff800000101fcf:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff800000101fd3	kernel.asm	/^ffff800000101fd3:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000101fd6	kernel.asm	/^ffff800000101fd6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101fd9	kernel.asm	/^ffff800000101fd9:	48 b8 00 5e 10 00 00 	movabs $0xffff800000105e00,%rax$/;"	l
ffff800000101fe0	kernel.asm	/^ffff800000101fe0:	80 ff ff $/;"	l
ffff800000101fe3	kernel.asm	/^ffff800000101fe3:	ff d0                	callq  *%rax$/;"	l
ffff800000101fe5	kernel.asm	/^ffff800000101fe5:	e9 f6 01 00 00       	jmpq   ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff800000101fea	kernel.asm	/^ffff800000101fea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fee	kernel.asm	/^ffff800000101fee:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101ff0	kernel.asm	/^ffff800000101ff0:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101ff3	kernel.asm	/^ffff800000101ff3:	0f 85 d1 01 00 00    	jne    ffff8000001021ca <filewrite+0x23a>$/;"	l
ffff800000101ff9	kernel.asm	/^ffff800000101ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101ffd	kernel.asm	/^ffff800000101ffd:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102001	kernel.asm	/^ffff800000102001:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000102008	kernel.asm	/^ffff800000102008:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff80000010200c	kernel.asm	/^ffff80000010200c:	0f 85 a7 00 00 00    	jne    ffff8000001020b9 <filewrite+0x129>$/;"	l
ffff800000102012	kernel.asm	/^ffff800000102012:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102016	kernel.asm	/^ffff800000102016:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010201a	kernel.asm	/^ffff80000010201a:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102021	kernel.asm	/^ffff800000102021:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102024	kernel.asm	/^ffff800000102024:	78 47                	js     ffff80000010206d <filewrite+0xdd>$/;"	l
ffff800000102026	kernel.asm	/^ffff800000102026:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010202a	kernel.asm	/^ffff80000010202a:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010202e	kernel.asm	/^ffff80000010202e:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102035	kernel.asm	/^ffff800000102035:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff800000102039	kernel.asm	/^ffff800000102039:	7f 32                	jg     ffff80000010206d <filewrite+0xdd>$/;"	l
ffff80000010203b	kernel.asm	/^ffff80000010203b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010203f	kernel.asm	/^ffff80000010203f:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102043	kernel.asm	/^ffff800000102043:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff80000010204a	kernel.asm	/^ffff80000010204a:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff80000010204d	kernel.asm	/^ffff80000010204d:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff800000102054	kernel.asm	/^ffff800000102054:	80 ff ff $/;"	l
ffff800000102057	kernel.asm	/^ffff800000102057:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010205a	kernel.asm	/^ffff80000010205a:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff80000010205e	kernel.asm	/^ffff80000010205e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102061	kernel.asm	/^ffff800000102061:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000102065	kernel.asm	/^ffff800000102065:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000102068	kernel.asm	/^ffff800000102068:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010206b	kernel.asm	/^ffff80000010206b:	75 0a                	jne    ffff800000102077 <filewrite+0xe7>$/;"	l
ffff80000010206d	kernel.asm	/^ffff80000010206d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102072	kernel.asm	/^ffff800000102072:	e9 69 01 00 00       	jmpq   ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff800000102077	kernel.asm	/^ffff800000102077:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010207b	kernel.asm	/^ffff80000010207b:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010207f	kernel.asm	/^ffff80000010207f:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102086	kernel.asm	/^ffff800000102086:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000102089	kernel.asm	/^ffff800000102089:	48 b8 40 65 11 00 00 	movabs $0xffff800000116540,%rax$/;"	l
ffff800000102090	kernel.asm	/^ffff800000102090:	80 ff ff $/;"	l
ffff800000102093	kernel.asm	/^ffff800000102093:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102096	kernel.asm	/^ffff800000102096:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff80000010209a	kernel.asm	/^ffff80000010209a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010209d	kernel.asm	/^ffff80000010209d:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001020a1	kernel.asm	/^ffff8000001020a1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001020a4	kernel.asm	/^ffff8000001020a4:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff8000001020a7	kernel.asm	/^ffff8000001020a7:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff8000001020ab	kernel.asm	/^ffff8000001020ab:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff8000001020af	kernel.asm	/^ffff8000001020af:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff8000001020b2	kernel.asm	/^ffff8000001020b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001020b4	kernel.asm	/^ffff8000001020b4:	e9 27 01 00 00       	jmpq   ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff8000001020b9	kernel.asm	/^ffff8000001020b9:	c7 45 f4 00 1a 00 00 	movl   $0x1a00,-0xc(%rbp)$/;"	l
ffff8000001020c0	kernel.asm	/^ffff8000001020c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001020c7	kernel.asm	/^ffff8000001020c7:	e9 db 00 00 00       	jmpq   ffff8000001021a7 <filewrite+0x217>$/;"	l
ffff8000001020cc	kernel.asm	/^ffff8000001020cc:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001020cf	kernel.asm	/^ffff8000001020cf:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001020d2	kernel.asm	/^ffff8000001020d2:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001020d5	kernel.asm	/^ffff8000001020d5:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001020d8	kernel.asm	/^ffff8000001020d8:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff8000001020db	kernel.asm	/^ffff8000001020db:	7e 06                	jle    ffff8000001020e3 <filewrite+0x153>$/;"	l
ffff8000001020dd	kernel.asm	/^ffff8000001020dd:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001020e0	kernel.asm	/^ffff8000001020e0:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001020e3	kernel.asm	/^ffff8000001020e3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001020e8	kernel.asm	/^ffff8000001020e8:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff8000001020ef	kernel.asm	/^ffff8000001020ef:	80 ff ff $/;"	l
ffff8000001020f2	kernel.asm	/^ffff8000001020f2:	ff d2                	callq  *%rdx$/;"	l
ffff8000001020f4	kernel.asm	/^ffff8000001020f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001020f8	kernel.asm	/^ffff8000001020f8:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001020fc	kernel.asm	/^ffff8000001020fc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001020ff	kernel.asm	/^ffff8000001020ff:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000102106	kernel.asm	/^ffff800000102106:	80 ff ff $/;"	l
ffff800000102109	kernel.asm	/^ffff800000102109:	ff d0                	callq  *%rax$/;"	l
ffff80000010210b	kernel.asm	/^ffff80000010210b:	8b 4d f8             	mov    -0x8(%rbp),%ecx$/;"	l
ffff80000010210e	kernel.asm	/^ffff80000010210e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102112	kernel.asm	/^ffff800000102112:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000102115	kernel.asm	/^ffff800000102115:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102118	kernel.asm	/^ffff800000102118:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff80000010211b	kernel.asm	/^ffff80000010211b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010211f	kernel.asm	/^ffff80000010211f:	48 01 c6             	add    %rax,%rsi$/;"	l
ffff800000102122	kernel.asm	/^ffff800000102122:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102126	kernel.asm	/^ffff800000102126:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010212a	kernel.asm	/^ffff80000010212a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010212d	kernel.asm	/^ffff80000010212d:	48 b8 5c 31 10 00 00 	movabs $0xffff80000010315c,%rax$/;"	l
ffff800000102134	kernel.asm	/^ffff800000102134:	80 ff ff $/;"	l
ffff800000102137	kernel.asm	/^ffff800000102137:	ff d0                	callq  *%rax$/;"	l
ffff800000102139	kernel.asm	/^ffff800000102139:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff80000010213c	kernel.asm	/^ffff80000010213c:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000102140	kernel.asm	/^ffff800000102140:	7e 13                	jle    ffff800000102155 <filewrite+0x1c5>$/;"	l
ffff800000102142	kernel.asm	/^ffff800000102142:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102146	kernel.asm	/^ffff800000102146:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000102149	kernel.asm	/^ffff800000102149:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010214c	kernel.asm	/^ffff80000010214c:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010214e	kernel.asm	/^ffff80000010214e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102152	kernel.asm	/^ffff800000102152:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff800000102155	kernel.asm	/^ffff800000102155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102159	kernel.asm	/^ffff800000102159:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010215d	kernel.asm	/^ffff80000010215d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102160	kernel.asm	/^ffff800000102160:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000102167	kernel.asm	/^ffff800000102167:	80 ff ff $/;"	l
ffff80000010216a	kernel.asm	/^ffff80000010216a:	ff d0                	callq  *%rax$/;"	l
ffff80000010216c	kernel.asm	/^ffff80000010216c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000102171	kernel.asm	/^ffff800000102171:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000102178	kernel.asm	/^ffff800000102178:	80 ff ff $/;"	l
ffff80000010217b	kernel.asm	/^ffff80000010217b:	ff d2                	callq  *%rdx$/;"	l
ffff80000010217d	kernel.asm	/^ffff80000010217d:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000102181	kernel.asm	/^ffff800000102181:	78 32                	js     ffff8000001021b5 <filewrite+0x225>$/;"	l
ffff800000102183	kernel.asm	/^ffff800000102183:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000102186	kernel.asm	/^ffff800000102186:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000102189	kernel.asm	/^ffff800000102189:	74 16                	je     ffff8000001021a1 <filewrite+0x211>$/;"	l
ffff80000010218b	kernel.asm	/^ffff80000010218b:	48 bf 6a cb 10 00 00 	movabs $0xffff80000010cb6a,%rdi$/;"	l
ffff800000102192	kernel.asm	/^ffff800000102192:	80 ff ff $/;"	l
ffff800000102195	kernel.asm	/^ffff800000102195:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010219c	kernel.asm	/^ffff80000010219c:	80 ff ff $/;"	l
ffff80000010219f	kernel.asm	/^ffff80000010219f:	ff d0                	callq  *%rax$/;"	l
ffff8000001021a1	kernel.asm	/^ffff8000001021a1:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff8000001021a4	kernel.asm	/^ffff8000001021a4:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff8000001021a7	kernel.asm	/^ffff8000001021a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001021aa	kernel.asm	/^ffff8000001021aa:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff8000001021ad	kernel.asm	/^ffff8000001021ad:	0f 8c 19 ff ff ff    	jl     ffff8000001020cc <filewrite+0x13c>$/;"	l
ffff8000001021b3	kernel.asm	/^ffff8000001021b3:	eb 01                	jmp    ffff8000001021b6 <filewrite+0x226>$/;"	l
ffff8000001021b5	kernel.asm	/^ffff8000001021b5:	90                   	nop$/;"	l
ffff8000001021b6	kernel.asm	/^ffff8000001021b6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001021b9	kernel.asm	/^ffff8000001021b9:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff8000001021bc	kernel.asm	/^ffff8000001021bc:	75 05                	jne    ffff8000001021c3 <filewrite+0x233>$/;"	l
ffff8000001021be	kernel.asm	/^ffff8000001021be:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001021c1	kernel.asm	/^ffff8000001021c1:	eb 1d                	jmp    ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff8000001021c3	kernel.asm	/^ffff8000001021c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001021c8	kernel.asm	/^ffff8000001021c8:	eb 16                	jmp    ffff8000001021e0 <filewrite+0x250>$/;"	l
ffff8000001021ca	kernel.asm	/^ffff8000001021ca:	48 bf 7a cb 10 00 00 	movabs $0xffff80000010cb7a,%rdi$/;"	l
ffff8000001021d1	kernel.asm	/^ffff8000001021d1:	80 ff ff $/;"	l
ffff8000001021d4	kernel.asm	/^ffff8000001021d4:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001021db	kernel.asm	/^ffff8000001021db:	80 ff ff $/;"	l
ffff8000001021de	kernel.asm	/^ffff8000001021de:	ff d0                	callq  *%rax$/;"	l
ffff8000001021e0	kernel.asm	/^ffff8000001021e0:	c9                   	leaveq $/;"	l
ffff8000001021e1	kernel.asm	/^ffff8000001021e1:	c3                   	retq   $/;"	l
ffff8000001021e2	kernel.asm	/^ffff8000001021e2 <readsb>:$/;"	l
ffff8000001021e2	kernel.asm	/^ffff8000001021e2:	55                   	push   %rbp$/;"	l
ffff8000001021e3	kernel.asm	/^ffff8000001021e3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001021e6	kernel.asm	/^ffff8000001021e6:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001021ea	kernel.asm	/^ffff8000001021ea:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001021ed	kernel.asm	/^ffff8000001021ed:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001021f1	kernel.asm	/^ffff8000001021f1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001021f4	kernel.asm	/^ffff8000001021f4:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001021f9	kernel.asm	/^ffff8000001021f9:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001021fb	kernel.asm	/^ffff8000001021fb:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102202	kernel.asm	/^ffff800000102202:	80 ff ff $/;"	l
ffff800000102205	kernel.asm	/^ffff800000102205:	ff d0                	callq  *%rax$/;"	l
ffff800000102207	kernel.asm	/^ffff800000102207:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010220b	kernel.asm	/^ffff80000010220b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010220f	kernel.asm	/^ffff80000010220f:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000102216	kernel.asm	/^ffff800000102216:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010221a	kernel.asm	/^ffff80000010221a:	ba 1c 00 00 00       	mov    $0x1c,%edx$/;"	l
ffff80000010221f	kernel.asm	/^ffff80000010221f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102222	kernel.asm	/^ffff800000102222:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102225	kernel.asm	/^ffff800000102225:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010222c	kernel.asm	/^ffff80000010222c:	80 ff ff $/;"	l
ffff80000010222f	kernel.asm	/^ffff80000010222f:	ff d0                	callq  *%rax$/;"	l
ffff800000102231	kernel.asm	/^ffff800000102231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102235	kernel.asm	/^ffff800000102235:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102238	kernel.asm	/^ffff800000102238:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010223f	kernel.asm	/^ffff80000010223f:	80 ff ff $/;"	l
ffff800000102242	kernel.asm	/^ffff800000102242:	ff d0                	callq  *%rax$/;"	l
ffff800000102244	kernel.asm	/^ffff800000102244:	90                   	nop$/;"	l
ffff800000102245	kernel.asm	/^ffff800000102245:	c9                   	leaveq $/;"	l
ffff800000102246	kernel.asm	/^ffff800000102246:	c3                   	retq   $/;"	l
ffff800000102247	kernel.asm	/^ffff800000102247 <bzero>:$/;"	l
ffff800000102247	kernel.asm	/^ffff800000102247:	55                   	push   %rbp$/;"	l
ffff800000102248	kernel.asm	/^ffff800000102248:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010224b	kernel.asm	/^ffff80000010224b:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010224f	kernel.asm	/^ffff80000010224f:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102252	kernel.asm	/^ffff800000102252:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102255	kernel.asm	/^ffff800000102255:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000102258	kernel.asm	/^ffff800000102258:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010225b	kernel.asm	/^ffff80000010225b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010225d	kernel.asm	/^ffff80000010225d:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010225f	kernel.asm	/^ffff80000010225f:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102266	kernel.asm	/^ffff800000102266:	80 ff ff $/;"	l
ffff800000102269	kernel.asm	/^ffff800000102269:	ff d0                	callq  *%rax$/;"	l
ffff80000010226b	kernel.asm	/^ffff80000010226b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010226f	kernel.asm	/^ffff80000010226f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102273	kernel.asm	/^ffff800000102273:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102279	kernel.asm	/^ffff800000102279:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff80000010227e	kernel.asm	/^ffff80000010227e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000102283	kernel.asm	/^ffff800000102283:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102286	kernel.asm	/^ffff800000102286:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010228d	kernel.asm	/^ffff80000010228d:	80 ff ff $/;"	l
ffff800000102290	kernel.asm	/^ffff800000102290:	ff d0                	callq  *%rax$/;"	l
ffff800000102292	kernel.asm	/^ffff800000102292:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102296	kernel.asm	/^ffff800000102296:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102299	kernel.asm	/^ffff800000102299:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff8000001022a0	kernel.asm	/^ffff8000001022a0:	80 ff ff $/;"	l
ffff8000001022a3	kernel.asm	/^ffff8000001022a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001022a5	kernel.asm	/^ffff8000001022a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001022a9	kernel.asm	/^ffff8000001022a9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001022ac	kernel.asm	/^ffff8000001022ac:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001022b3	kernel.asm	/^ffff8000001022b3:	80 ff ff $/;"	l
ffff8000001022b6	kernel.asm	/^ffff8000001022b6:	ff d0                	callq  *%rax$/;"	l
ffff8000001022b8	kernel.asm	/^ffff8000001022b8:	90                   	nop$/;"	l
ffff8000001022b9	kernel.asm	/^ffff8000001022b9:	c9                   	leaveq $/;"	l
ffff8000001022ba	kernel.asm	/^ffff8000001022ba:	c3                   	retq   $/;"	l
ffff8000001022bb	kernel.asm	/^ffff8000001022bb <balloc>:$/;"	l
ffff8000001022bb	kernel.asm	/^ffff8000001022bb:	55                   	push   %rbp$/;"	l
ffff8000001022bc	kernel.asm	/^ffff8000001022bc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001022bf	kernel.asm	/^ffff8000001022bf:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001022c3	kernel.asm	/^ffff8000001022c3:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff8000001022c6	kernel.asm	/^ffff8000001022c6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001022cd	kernel.asm	/^ffff8000001022cd:	00 $/;"	l
ffff8000001022ce	kernel.asm	/^ffff8000001022ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001022d5	kernel.asm	/^ffff8000001022d5:	e9 52 01 00 00       	jmpq   ffff80000010242c <balloc+0x171>$/;"	l
ffff8000001022da	kernel.asm	/^ffff8000001022da:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001022dd	kernel.asm	/^ffff8000001022dd:	8d 90 ff 0f 00 00    	lea    0xfff(%rax),%edx$/;"	l
ffff8000001022e3	kernel.asm	/^ffff8000001022e3:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001022e5	kernel.asm	/^ffff8000001022e5:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001022e8	kernel.asm	/^ffff8000001022e8:	c1 f8 0c             	sar    $0xc,%eax$/;"	l
ffff8000001022eb	kernel.asm	/^ffff8000001022eb:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001022ed	kernel.asm	/^ffff8000001022ed:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff8000001022f4	kernel.asm	/^ffff8000001022f4:	80 ff ff $/;"	l
ffff8000001022f7	kernel.asm	/^ffff8000001022f7:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001022fa	kernel.asm	/^ffff8000001022fa:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001022fc	kernel.asm	/^ffff8000001022fc:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001022ff	kernel.asm	/^ffff8000001022ff:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102301	kernel.asm	/^ffff800000102301:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102303	kernel.asm	/^ffff800000102303:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff80000010230a	kernel.asm	/^ffff80000010230a:	80 ff ff $/;"	l
ffff80000010230d	kernel.asm	/^ffff80000010230d:	ff d0                	callq  *%rax$/;"	l
ffff80000010230f	kernel.asm	/^ffff80000010230f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102313	kernel.asm	/^ffff800000102313:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010231a	kernel.asm	/^ffff80000010231a:	e9 cc 00 00 00       	jmpq   ffff8000001023eb <balloc+0x130>$/;"	l
ffff80000010231f	kernel.asm	/^ffff80000010231f:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102322	kernel.asm	/^ffff800000102322:	99                   	cltd   $/;"	l
ffff800000102323	kernel.asm	/^ffff800000102323:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff800000102326	kernel.asm	/^ffff800000102326:	01 d0                	add    %edx,%eax$/;"	l
ffff800000102328	kernel.asm	/^ffff800000102328:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff80000010232b	kernel.asm	/^ffff80000010232b:	29 d0                	sub    %edx,%eax$/;"	l
ffff80000010232d	kernel.asm	/^ffff80000010232d:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff800000102332	kernel.asm	/^ffff800000102332:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102334	kernel.asm	/^ffff800000102334:	d3 e2                	shl    %cl,%edx$/;"	d
ffff800000102336	kernel.asm	/^ffff800000102336:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000102338	kernel.asm	/^ffff800000102338:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff80000010233b	kernel.asm	/^ffff80000010233b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010233e	kernel.asm	/^ffff80000010233e:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff800000102341	kernel.asm	/^ffff800000102341:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102343	kernel.asm	/^ffff800000102343:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102346	kernel.asm	/^ffff800000102346:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102349	kernel.asm	/^ffff800000102349:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010234d	kernel.asm	/^ffff80000010234d:	48 98                	cltq   $/;"	l
ffff80000010234f	kernel.asm	/^ffff80000010234f:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102356	kernel.asm	/^ffff800000102356:	00 $/;"	l
ffff800000102357	kernel.asm	/^ffff800000102357:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010235a	kernel.asm	/^ffff80000010235a:	23 45 ec             	and    -0x14(%rbp),%eax$/;"	l
ffff80000010235d	kernel.asm	/^ffff80000010235d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010235f	kernel.asm	/^ffff80000010235f:	0f 85 82 00 00 00    	jne    ffff8000001023e7 <balloc+0x12c>$/;"	l
ffff800000102365	kernel.asm	/^ffff800000102365:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102368	kernel.asm	/^ffff800000102368:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff80000010236b	kernel.asm	/^ffff80000010236b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010236d	kernel.asm	/^ffff80000010236d:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102370	kernel.asm	/^ffff800000102370:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102373	kernel.asm	/^ffff800000102373:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102375	kernel.asm	/^ffff800000102375:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000102379	kernel.asm	/^ffff800000102379:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff80000010237c	kernel.asm	/^ffff80000010237c:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102383	kernel.asm	/^ffff800000102383:	00 $/;"	l
ffff800000102384	kernel.asm	/^ffff800000102384:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102386	kernel.asm	/^ffff800000102386:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102389	kernel.asm	/^ffff800000102389:	09 d0                	or     %edx,%eax$/;"	l
ffff80000010238b	kernel.asm	/^ffff80000010238b:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010238d	kernel.asm	/^ffff80000010238d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000102391	kernel.asm	/^ffff800000102391:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102394	kernel.asm	/^ffff800000102394:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff80000010239b	kernel.asm	/^ffff80000010239b:	00 $/;"	l
ffff80000010239c	kernel.asm	/^ffff80000010239c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001023a0	kernel.asm	/^ffff8000001023a0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001023a3	kernel.asm	/^ffff8000001023a3:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff8000001023aa	kernel.asm	/^ffff8000001023aa:	80 ff ff $/;"	l
ffff8000001023ad	kernel.asm	/^ffff8000001023ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001023af	kernel.asm	/^ffff8000001023af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001023b3	kernel.asm	/^ffff8000001023b3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001023b6	kernel.asm	/^ffff8000001023b6:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001023bd	kernel.asm	/^ffff8000001023bd:	80 ff ff $/;"	l
ffff8000001023c0	kernel.asm	/^ffff8000001023c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001023c2	kernel.asm	/^ffff8000001023c2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001023c5	kernel.asm	/^ffff8000001023c5:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001023c8	kernel.asm	/^ffff8000001023c8:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001023ca	kernel.asm	/^ffff8000001023ca:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001023cd	kernel.asm	/^ffff8000001023cd:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001023cf	kernel.asm	/^ffff8000001023cf:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001023d1	kernel.asm	/^ffff8000001023d1:	48 b8 47 22 10 00 00 	movabs $0xffff800000102247,%rax$/;"	l
ffff8000001023d8	kernel.asm	/^ffff8000001023d8:	80 ff ff $/;"	l
ffff8000001023db	kernel.asm	/^ffff8000001023db:	ff d0                	callq  *%rax$/;"	l
ffff8000001023dd	kernel.asm	/^ffff8000001023dd:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001023e0	kernel.asm	/^ffff8000001023e0:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001023e3	kernel.asm	/^ffff8000001023e3:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001023e5	kernel.asm	/^ffff8000001023e5:	eb 72                	jmp    ffff800000102459 <balloc+0x19e>$/;"	l
ffff8000001023e7	kernel.asm	/^ffff8000001023e7:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff8000001023eb	kernel.asm	/^ffff8000001023eb:	81 7d f8 ff 0f 00 00 	cmpl   $0xfff,-0x8(%rbp)$/;"	l
ffff8000001023f2	kernel.asm	/^ffff8000001023f2:	7f 1e                	jg     ffff800000102412 <balloc+0x157>$/;"	l
ffff8000001023f4	kernel.asm	/^ffff8000001023f4:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001023f7	kernel.asm	/^ffff8000001023f7:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001023fa	kernel.asm	/^ffff8000001023fa:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001023fc	kernel.asm	/^ffff8000001023fc:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001023fe	kernel.asm	/^ffff8000001023fe:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102405	kernel.asm	/^ffff800000102405:	80 ff ff $/;"	l
ffff800000102408	kernel.asm	/^ffff800000102408:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010240a	kernel.asm	/^ffff80000010240a:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010240c	kernel.asm	/^ffff80000010240c:	0f 82 0d ff ff ff    	jb     ffff80000010231f <balloc+0x64>$/;"	l
ffff800000102412	kernel.asm	/^ffff800000102412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102416	kernel.asm	/^ffff800000102416:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102419	kernel.asm	/^ffff800000102419:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102420	kernel.asm	/^ffff800000102420:	80 ff ff $/;"	l
ffff800000102423	kernel.asm	/^ffff800000102423:	ff d0                	callq  *%rax$/;"	l
ffff800000102425	kernel.asm	/^ffff800000102425:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff80000010242c	kernel.asm	/^ffff80000010242c:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102433	kernel.asm	/^ffff800000102433:	80 ff ff $/;"	l
ffff800000102436	kernel.asm	/^ffff800000102436:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000102438	kernel.asm	/^ffff800000102438:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010243b	kernel.asm	/^ffff80000010243b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010243d	kernel.asm	/^ffff80000010243d:	0f 87 97 fe ff ff    	ja     ffff8000001022da <balloc+0x1f>$/;"	l
ffff800000102443	kernel.asm	/^ffff800000102443:	48 bf 84 cb 10 00 00 	movabs $0xffff80000010cb84,%rdi$/;"	l
ffff80000010244a	kernel.asm	/^ffff80000010244a:	80 ff ff $/;"	l
ffff80000010244d	kernel.asm	/^ffff80000010244d:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102454	kernel.asm	/^ffff800000102454:	80 ff ff $/;"	l
ffff800000102457	kernel.asm	/^ffff800000102457:	ff d0                	callq  *%rax$/;"	l
ffff800000102459	kernel.asm	/^ffff800000102459:	c9                   	leaveq $/;"	l
ffff80000010245a	kernel.asm	/^ffff80000010245a:	c3                   	retq   $/;"	l
ffff80000010245b	kernel.asm	/^ffff80000010245b <bfree>:$/;"	l
ffff80000010245b	kernel.asm	/^ffff80000010245b:	55                   	push   %rbp$/;"	l
ffff80000010245c	kernel.asm	/^ffff80000010245c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010245f	kernel.asm	/^ffff80000010245f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102463	kernel.asm	/^ffff800000102463:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102466	kernel.asm	/^ffff800000102466:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102469	kernel.asm	/^ffff800000102469:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010246c	kernel.asm	/^ffff80000010246c:	48 be 00 76 11 00 00 	movabs $0xffff800000117600,%rsi$/;"	l
ffff800000102473	kernel.asm	/^ffff800000102473:	80 ff ff $/;"	l
ffff800000102476	kernel.asm	/^ffff800000102476:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102478	kernel.asm	/^ffff800000102478:	48 b8 e2 21 10 00 00 	movabs $0xffff8000001021e2,%rax$/;"	l
ffff80000010247f	kernel.asm	/^ffff80000010247f:	80 ff ff $/;"	l
ffff800000102482	kernel.asm	/^ffff800000102482:	ff d0                	callq  *%rax$/;"	l
ffff800000102484	kernel.asm	/^ffff800000102484:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000102487	kernel.asm	/^ffff800000102487:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff80000010248a	kernel.asm	/^ffff80000010248a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010248c	kernel.asm	/^ffff80000010248c:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102493	kernel.asm	/^ffff800000102493:	80 ff ff $/;"	l
ffff800000102496	kernel.asm	/^ffff800000102496:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000102499	kernel.asm	/^ffff800000102499:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010249b	kernel.asm	/^ffff80000010249b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010249e	kernel.asm	/^ffff80000010249e:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001024a0	kernel.asm	/^ffff8000001024a0:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001024a2	kernel.asm	/^ffff8000001024a2:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001024a9	kernel.asm	/^ffff8000001024a9:	80 ff ff $/;"	l
ffff8000001024ac	kernel.asm	/^ffff8000001024ac:	ff d0                	callq  *%rax$/;"	l
ffff8000001024ae	kernel.asm	/^ffff8000001024ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001024b2	kernel.asm	/^ffff8000001024b2:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff8000001024b5	kernel.asm	/^ffff8000001024b5:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff8000001024ba	kernel.asm	/^ffff8000001024ba:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001024bd	kernel.asm	/^ffff8000001024bd:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001024c0	kernel.asm	/^ffff8000001024c0:	99                   	cltd   $/;"	l
ffff8000001024c1	kernel.asm	/^ffff8000001024c1:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff8000001024c4	kernel.asm	/^ffff8000001024c4:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001024c6	kernel.asm	/^ffff8000001024c6:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff8000001024c9	kernel.asm	/^ffff8000001024c9:	29 d0                	sub    %edx,%eax$/;"	l
ffff8000001024cb	kernel.asm	/^ffff8000001024cb:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff8000001024d0	kernel.asm	/^ffff8000001024d0:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001024d2	kernel.asm	/^ffff8000001024d2:	d3 e2                	shl    %cl,%edx$/;"	d
ffff8000001024d4	kernel.asm	/^ffff8000001024d4:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001024d6	kernel.asm	/^ffff8000001024d6:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff8000001024d9	kernel.asm	/^ffff8000001024d9:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001024dc	kernel.asm	/^ffff8000001024dc:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff8000001024df	kernel.asm	/^ffff8000001024df:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001024e1	kernel.asm	/^ffff8000001024e1:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001024e4	kernel.asm	/^ffff8000001024e4:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff8000001024e7	kernel.asm	/^ffff8000001024e7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001024eb	kernel.asm	/^ffff8000001024eb:	48 98                	cltq   $/;"	l
ffff8000001024ed	kernel.asm	/^ffff8000001024ed:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff8000001024f4	kernel.asm	/^ffff8000001024f4:	00 $/;"	l
ffff8000001024f5	kernel.asm	/^ffff8000001024f5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001024f8	kernel.asm	/^ffff8000001024f8:	23 45 f0             	and    -0x10(%rbp),%eax$/;"	l
ffff8000001024fb	kernel.asm	/^ffff8000001024fb:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001024fd	kernel.asm	/^ffff8000001024fd:	75 16                	jne    ffff800000102515 <bfree+0xba>$/;"	l
ffff8000001024ff	kernel.asm	/^ffff8000001024ff:	48 bf 9a cb 10 00 00 	movabs $0xffff80000010cb9a,%rdi$/;"	l
ffff800000102506	kernel.asm	/^ffff800000102506:	80 ff ff $/;"	l
ffff800000102509	kernel.asm	/^ffff800000102509:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102510	kernel.asm	/^ffff800000102510:	80 ff ff $/;"	l
ffff800000102513	kernel.asm	/^ffff800000102513:	ff d0                	callq  *%rax$/;"	l
ffff800000102515	kernel.asm	/^ffff800000102515:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000102518	kernel.asm	/^ffff800000102518:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff80000010251b	kernel.asm	/^ffff80000010251b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010251d	kernel.asm	/^ffff80000010251d:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102520	kernel.asm	/^ffff800000102520:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102523	kernel.asm	/^ffff800000102523:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102525	kernel.asm	/^ffff800000102525:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000102529	kernel.asm	/^ffff800000102529:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff80000010252c	kernel.asm	/^ffff80000010252c:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102533	kernel.asm	/^ffff800000102533:	00 $/;"	l
ffff800000102534	kernel.asm	/^ffff800000102534:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102536	kernel.asm	/^ffff800000102536:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000102539	kernel.asm	/^ffff800000102539:	f7 d0                	not    %eax$/;"	l
ffff80000010253b	kernel.asm	/^ffff80000010253b:	21 d0                	and    %edx,%eax$/;"	l
ffff80000010253d	kernel.asm	/^ffff80000010253d:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010253f	kernel.asm	/^ffff80000010253f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000102543	kernel.asm	/^ffff800000102543:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102546	kernel.asm	/^ffff800000102546:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff80000010254d	kernel.asm	/^ffff80000010254d:	00 $/;"	l
ffff80000010254e	kernel.asm	/^ffff80000010254e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102552	kernel.asm	/^ffff800000102552:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102555	kernel.asm	/^ffff800000102555:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff80000010255c	kernel.asm	/^ffff80000010255c:	80 ff ff $/;"	l
ffff80000010255f	kernel.asm	/^ffff80000010255f:	ff d0                	callq  *%rax$/;"	l
ffff800000102561	kernel.asm	/^ffff800000102561:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102565	kernel.asm	/^ffff800000102565:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102568	kernel.asm	/^ffff800000102568:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010256f	kernel.asm	/^ffff80000010256f:	80 ff ff $/;"	l
ffff800000102572	kernel.asm	/^ffff800000102572:	ff d0                	callq  *%rax$/;"	l
ffff800000102574	kernel.asm	/^ffff800000102574:	90                   	nop$/;"	l
ffff800000102575	kernel.asm	/^ffff800000102575:	c9                   	leaveq $/;"	l
ffff800000102576	kernel.asm	/^ffff800000102576:	c3                   	retq   $/;"	l
ffff800000102577	kernel.asm	/^ffff800000102577 <iinit>:$/;"	l
ffff800000102577	kernel.asm	/^ffff800000102577:	55                   	push   %rbp$/;"	l
ffff800000102578	kernel.asm	/^ffff800000102578:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010257b	kernel.asm	/^ffff80000010257b:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010257f	kernel.asm	/^ffff80000010257f:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102582	kernel.asm	/^ffff800000102582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102589	kernel.asm	/^ffff800000102589:	48 be ad cb 10 00 00 	movabs $0xffff80000010cbad,%rsi$/;"	l
ffff800000102590	kernel.asm	/^ffff800000102590:	80 ff ff $/;"	l
ffff800000102593	kernel.asm	/^ffff800000102593:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff80000010259a	kernel.asm	/^ffff80000010259a:	80 ff ff $/;"	l
ffff80000010259d	kernel.asm	/^ffff80000010259d:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff8000001025a4	kernel.asm	/^ffff8000001025a4:	80 ff ff $/;"	l
ffff8000001025a7	kernel.asm	/^ffff8000001025a7:	ff d0                	callq  *%rax$/;"	l
ffff8000001025a9	kernel.asm	/^ffff8000001025a9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001025b0	kernel.asm	/^ffff8000001025b0:	eb 50                	jmp    ffff800000102602 <iinit+0x8b>$/;"	l
ffff8000001025b2	kernel.asm	/^ffff8000001025b2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001025b5	kernel.asm	/^ffff8000001025b5:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001025b8	kernel.asm	/^ffff8000001025b8:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001025bb	kernel.asm	/^ffff8000001025bb:	48 01 c0             	add    %rax,%rax$/;"	l
ffff8000001025be	kernel.asm	/^ffff8000001025be:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001025c1	kernel.asm	/^ffff8000001025c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001025c8	kernel.asm	/^ffff8000001025c8:	00 $/;"	l
ffff8000001025c9	kernel.asm	/^ffff8000001025c9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001025cc	kernel.asm	/^ffff8000001025cc:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001025d0	kernel.asm	/^ffff8000001025d0:	48 8d 50 70          	lea    0x70(%rax),%rdx$/;"	l
ffff8000001025d4	kernel.asm	/^ffff8000001025d4:	48 b8 20 76 11 00 00 	movabs $0xffff800000117620,%rax$/;"	l
ffff8000001025db	kernel.asm	/^ffff8000001025db:	80 ff ff $/;"	l
ffff8000001025de	kernel.asm	/^ffff8000001025de:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001025e1	kernel.asm	/^ffff8000001025e1:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001025e5	kernel.asm	/^ffff8000001025e5:	48 be b4 cb 10 00 00 	movabs $0xffff80000010cbb4,%rsi$/;"	l
ffff8000001025ec	kernel.asm	/^ffff8000001025ec:	80 ff ff $/;"	l
ffff8000001025ef	kernel.asm	/^ffff8000001025ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001025f2	kernel.asm	/^ffff8000001025f2:	48 b8 f2 70 10 00 00 	movabs $0xffff8000001070f2,%rax$/;"	l
ffff8000001025f9	kernel.asm	/^ffff8000001025f9:	80 ff ff $/;"	l
ffff8000001025fc	kernel.asm	/^ffff8000001025fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001025fe	kernel.asm	/^ffff8000001025fe:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000102602	kernel.asm	/^ffff800000102602:	83 7d fc 31          	cmpl   $0x31,-0x4(%rbp)$/;"	l
ffff800000102606	kernel.asm	/^ffff800000102606:	7e aa                	jle    ffff8000001025b2 <iinit+0x3b>$/;"	l
ffff800000102608	kernel.asm	/^ffff800000102608:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010260b	kernel.asm	/^ffff80000010260b:	48 be 00 76 11 00 00 	movabs $0xffff800000117600,%rsi$/;"	l
ffff800000102612	kernel.asm	/^ffff800000102612:	80 ff ff $/;"	l
ffff800000102615	kernel.asm	/^ffff800000102615:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102617	kernel.asm	/^ffff800000102617:	48 b8 e2 21 10 00 00 	movabs $0xffff8000001021e2,%rax$/;"	l
ffff80000010261e	kernel.asm	/^ffff80000010261e:	80 ff ff $/;"	l
ffff800000102621	kernel.asm	/^ffff800000102621:	ff d0                	callq  *%rax$/;"	l
ffff800000102623	kernel.asm	/^ffff800000102623:	90                   	nop$/;"	l
ffff800000102624	kernel.asm	/^ffff800000102624:	c9                   	leaveq $/;"	l
ffff800000102625	kernel.asm	/^ffff800000102625:	c3                   	retq   $/;"	l
ffff800000102626	kernel.asm	/^ffff800000102626 <ialloc>:$/;"	l
ffff800000102626	kernel.asm	/^ffff800000102626:	55                   	push   %rbp$/;"	l
ffff800000102627	kernel.asm	/^ffff800000102627:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010262a	kernel.asm	/^ffff80000010262a:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010262e	kernel.asm	/^ffff80000010262e:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000102631	kernel.asm	/^ffff800000102631:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000102633	kernel.asm	/^ffff800000102633:	66 89 45 d8          	mov    %ax,-0x28(%rbp)$/;"	l
ffff800000102637	kernel.asm	/^ffff800000102637:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010263e	kernel.asm	/^ffff80000010263e:	e9 d8 00 00 00       	jmpq   ffff80000010271b <ialloc+0xf5>$/;"	l
ffff800000102643	kernel.asm	/^ffff800000102643:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102646	kernel.asm	/^ffff800000102646:	48 98                	cltq   $/;"	l
ffff800000102648	kernel.asm	/^ffff800000102648:	48 c1 e8 03          	shr    $0x3,%rax$/;"	l
ffff80000010264c	kernel.asm	/^ffff80000010264c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010264e	kernel.asm	/^ffff80000010264e:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102655	kernel.asm	/^ffff800000102655:	80 ff ff $/;"	l
ffff800000102658	kernel.asm	/^ffff800000102658:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff80000010265b	kernel.asm	/^ffff80000010265b:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010265d	kernel.asm	/^ffff80000010265d:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000102660	kernel.asm	/^ffff800000102660:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102662	kernel.asm	/^ffff800000102662:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102664	kernel.asm	/^ffff800000102664:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff80000010266b	kernel.asm	/^ffff80000010266b:	80 ff ff $/;"	l
ffff80000010266e	kernel.asm	/^ffff80000010266e:	ff d0                	callq  *%rax$/;"	l
ffff800000102670	kernel.asm	/^ffff800000102670:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102674	kernel.asm	/^ffff800000102674:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102678	kernel.asm	/^ffff800000102678:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff80000010267f	kernel.asm	/^ffff80000010267f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102682	kernel.asm	/^ffff800000102682:	48 98                	cltq   $/;"	l
ffff800000102684	kernel.asm	/^ffff800000102684:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102687	kernel.asm	/^ffff800000102687:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff80000010268b	kernel.asm	/^ffff80000010268b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010268e	kernel.asm	/^ffff80000010268e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000102692	kernel.asm	/^ffff800000102692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102696	kernel.asm	/^ffff800000102696:	0f b7 00             	movzwl (%rax),%eax$/;"	l
ffff800000102699	kernel.asm	/^ffff800000102699:	66 85 c0             	test   %ax,%ax$/;"	l
ffff80000010269c	kernel.asm	/^ffff80000010269c:	75 66                	jne    ffff800000102704 <ialloc+0xde>$/;"	l
ffff80000010269e	kernel.asm	/^ffff80000010269e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001026a2	kernel.asm	/^ffff8000001026a2:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff8000001026a7	kernel.asm	/^ffff8000001026a7:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001026ac	kernel.asm	/^ffff8000001026ac:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001026af	kernel.asm	/^ffff8000001026af:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff8000001026b6	kernel.asm	/^ffff8000001026b6:	80 ff ff $/;"	l
ffff8000001026b9	kernel.asm	/^ffff8000001026b9:	ff d0                	callq  *%rax$/;"	l
ffff8000001026bb	kernel.asm	/^ffff8000001026bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001026bf	kernel.asm	/^ffff8000001026bf:	0f b7 55 d8          	movzwl -0x28(%rbp),%edx$/;"	l
ffff8000001026c3	kernel.asm	/^ffff8000001026c3:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001026c6	kernel.asm	/^ffff8000001026c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001026ca	kernel.asm	/^ffff8000001026ca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001026cd	kernel.asm	/^ffff8000001026cd:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff8000001026d4	kernel.asm	/^ffff8000001026d4:	80 ff ff $/;"	l
ffff8000001026d7	kernel.asm	/^ffff8000001026d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001026d9	kernel.asm	/^ffff8000001026d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001026dd	kernel.asm	/^ffff8000001026dd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001026e0	kernel.asm	/^ffff8000001026e0:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001026e7	kernel.asm	/^ffff8000001026e7:	80 ff ff $/;"	l
ffff8000001026ea	kernel.asm	/^ffff8000001026ea:	ff d0                	callq  *%rax$/;"	l
ffff8000001026ec	kernel.asm	/^ffff8000001026ec:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001026ef	kernel.asm	/^ffff8000001026ef:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001026f2	kernel.asm	/^ffff8000001026f2:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001026f4	kernel.asm	/^ffff8000001026f4:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001026f6	kernel.asm	/^ffff8000001026f6:	48 b8 5d 28 10 00 00 	movabs $0xffff80000010285d,%rax$/;"	l
ffff8000001026fd	kernel.asm	/^ffff8000001026fd:	80 ff ff $/;"	l
ffff800000102700	kernel.asm	/^ffff800000102700:	ff d0                	callq  *%rax$/;"	l
ffff800000102702	kernel.asm	/^ffff800000102702:	eb 45                	jmp    ffff800000102749 <ialloc+0x123>$/;"	l
ffff800000102704	kernel.asm	/^ffff800000102704:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102708	kernel.asm	/^ffff800000102708:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010270b	kernel.asm	/^ffff80000010270b:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102712	kernel.asm	/^ffff800000102712:	80 ff ff $/;"	l
ffff800000102715	kernel.asm	/^ffff800000102715:	ff d0                	callq  *%rax$/;"	l
ffff800000102717	kernel.asm	/^ffff800000102717:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010271b	kernel.asm	/^ffff80000010271b:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102722	kernel.asm	/^ffff800000102722:	80 ff ff $/;"	l
ffff800000102725	kernel.asm	/^ffff800000102725:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000102728	kernel.asm	/^ffff800000102728:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010272b	kernel.asm	/^ffff80000010272b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010272d	kernel.asm	/^ffff80000010272d:	0f 87 10 ff ff ff    	ja     ffff800000102643 <ialloc+0x1d>$/;"	l
ffff800000102733	kernel.asm	/^ffff800000102733:	48 bf ba cb 10 00 00 	movabs $0xffff80000010cbba,%rdi$/;"	l
ffff80000010273a	kernel.asm	/^ffff80000010273a:	80 ff ff $/;"	l
ffff80000010273d	kernel.asm	/^ffff80000010273d:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102744	kernel.asm	/^ffff800000102744:	80 ff ff $/;"	l
ffff800000102747	kernel.asm	/^ffff800000102747:	ff d0                	callq  *%rax$/;"	l
ffff800000102749	kernel.asm	/^ffff800000102749:	c9                   	leaveq $/;"	l
ffff80000010274a	kernel.asm	/^ffff80000010274a:	c3                   	retq   $/;"	l
ffff80000010274b	kernel.asm	/^ffff80000010274b <iupdate>:$/;"	l
ffff80000010274b	kernel.asm	/^ffff80000010274b:	55                   	push   %rbp$/;"	l
ffff80000010274c	kernel.asm	/^ffff80000010274c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010274f	kernel.asm	/^ffff80000010274f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102753	kernel.asm	/^ffff800000102753:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000102757	kernel.asm	/^ffff800000102757:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010275b	kernel.asm	/^ffff80000010275b:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff80000010275e	kernel.asm	/^ffff80000010275e:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff800000102761	kernel.asm	/^ffff800000102761:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102763	kernel.asm	/^ffff800000102763:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff80000010276a	kernel.asm	/^ffff80000010276a:	80 ff ff $/;"	l
ffff80000010276d	kernel.asm	/^ffff80000010276d:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102770	kernel.asm	/^ffff800000102770:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102772	kernel.asm	/^ffff800000102772:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102776	kernel.asm	/^ffff800000102776:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102778	kernel.asm	/^ffff800000102778:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010277a	kernel.asm	/^ffff80000010277a:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010277c	kernel.asm	/^ffff80000010277c:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102783	kernel.asm	/^ffff800000102783:	80 ff ff $/;"	l
ffff800000102786	kernel.asm	/^ffff800000102786:	ff d0                	callq  *%rax$/;"	l
ffff800000102788	kernel.asm	/^ffff800000102788:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010278c	kernel.asm	/^ffff80000010278c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102790	kernel.asm	/^ffff800000102790:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102797	kernel.asm	/^ffff800000102797:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010279b	kernel.asm	/^ffff80000010279b:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff80000010279e	kernel.asm	/^ffff80000010279e:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001027a0	kernel.asm	/^ffff8000001027a0:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff8000001027a3	kernel.asm	/^ffff8000001027a3:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff8000001027a7	kernel.asm	/^ffff8000001027a7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001027aa	kernel.asm	/^ffff8000001027aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001027ae	kernel.asm	/^ffff8000001027ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027b2	kernel.asm	/^ffff8000001027b2:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff8000001027b9	kernel.asm	/^ffff8000001027b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001027bd	kernel.asm	/^ffff8000001027bd:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001027c0	kernel.asm	/^ffff8000001027c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027c4	kernel.asm	/^ffff8000001027c4:	0f b7 90 96 00 00 00 	movzwl 0x96(%rax),%edx$/;"	l
ffff8000001027cb	kernel.asm	/^ffff8000001027cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001027cf	kernel.asm	/^ffff8000001027cf:	66 89 50 02          	mov    %dx,0x2(%rax)$/;"	l
ffff8000001027d3	kernel.asm	/^ffff8000001027d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027d7	kernel.asm	/^ffff8000001027d7:	0f b7 90 98 00 00 00 	movzwl 0x98(%rax),%edx$/;"	l
ffff8000001027de	kernel.asm	/^ffff8000001027de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001027e2	kernel.asm	/^ffff8000001027e2:	66 89 50 04          	mov    %dx,0x4(%rax)$/;"	l
ffff8000001027e6	kernel.asm	/^ffff8000001027e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027ea	kernel.asm	/^ffff8000001027ea:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff8000001027f1	kernel.asm	/^ffff8000001027f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001027f5	kernel.asm	/^ffff8000001027f5:	66 89 50 06          	mov    %dx,0x6(%rax)$/;"	l
ffff8000001027f9	kernel.asm	/^ffff8000001027f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001027fd	kernel.asm	/^ffff8000001027fd:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff800000102803	kernel.asm	/^ffff800000102803:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102807	kernel.asm	/^ffff800000102807:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff80000010280a	kernel.asm	/^ffff80000010280a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010280e	kernel.asm	/^ffff80000010280e:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff800000102815	kernel.asm	/^ffff800000102815:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102819	kernel.asm	/^ffff800000102819:	48 83 c0 0c          	add    $0xc,%rax$/;"	l
ffff80000010281d	kernel.asm	/^ffff80000010281d:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff800000102822	kernel.asm	/^ffff800000102822:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102825	kernel.asm	/^ffff800000102825:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102828	kernel.asm	/^ffff800000102828:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010282f	kernel.asm	/^ffff80000010282f:	80 ff ff $/;"	l
ffff800000102832	kernel.asm	/^ffff800000102832:	ff d0                	callq  *%rax$/;"	l
ffff800000102834	kernel.asm	/^ffff800000102834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102838	kernel.asm	/^ffff800000102838:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010283b	kernel.asm	/^ffff80000010283b:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff800000102842	kernel.asm	/^ffff800000102842:	80 ff ff $/;"	l
ffff800000102845	kernel.asm	/^ffff800000102845:	ff d0                	callq  *%rax$/;"	l
ffff800000102847	kernel.asm	/^ffff800000102847:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010284b	kernel.asm	/^ffff80000010284b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010284e	kernel.asm	/^ffff80000010284e:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102855	kernel.asm	/^ffff800000102855:	80 ff ff $/;"	l
ffff800000102858	kernel.asm	/^ffff800000102858:	ff d0                	callq  *%rax$/;"	l
ffff80000010285a	kernel.asm	/^ffff80000010285a:	90                   	nop$/;"	l
ffff80000010285b	kernel.asm	/^ffff80000010285b:	c9                   	leaveq $/;"	l
ffff80000010285c	kernel.asm	/^ffff80000010285c:	c3                   	retq   $/;"	l
ffff80000010285d	kernel.asm	/^ffff80000010285d <iget>:$/;"	l
ffff80000010285d	kernel.asm	/^ffff80000010285d:	55                   	push   %rbp$/;"	l
ffff80000010285e	kernel.asm	/^ffff80000010285e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102861	kernel.asm	/^ffff800000102861:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102865	kernel.asm	/^ffff800000102865:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102868	kernel.asm	/^ffff800000102868:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff80000010286b	kernel.asm	/^ffff80000010286b:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102872	kernel.asm	/^ffff800000102872:	80 ff ff $/;"	l
ffff800000102875	kernel.asm	/^ffff800000102875:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010287c	kernel.asm	/^ffff80000010287c:	80 ff ff $/;"	l
ffff80000010287f	kernel.asm	/^ffff80000010287f:	ff d0                	callq  *%rax$/;"	l
ffff800000102881	kernel.asm	/^ffff800000102881:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102888	kernel.asm	/^ffff800000102888:	00 $/;"	l
ffff800000102889	kernel.asm	/^ffff800000102889:	48 b8 88 76 11 00 00 	movabs $0xffff800000117688,%rax$/;"	l
ffff800000102890	kernel.asm	/^ffff800000102890:	80 ff ff $/;"	l
ffff800000102893	kernel.asm	/^ffff800000102893:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102897	kernel.asm	/^ffff800000102897:	eb 74                	jmp    ffff80000010290d <iget+0xb0>$/;"	l
ffff800000102899	kernel.asm	/^ffff800000102899:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010289d	kernel.asm	/^ffff80000010289d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001028a0	kernel.asm	/^ffff8000001028a0:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001028a2	kernel.asm	/^ffff8000001028a2:	7e 47                	jle    ffff8000001028eb <iget+0x8e>$/;"	l
ffff8000001028a4	kernel.asm	/^ffff8000001028a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028a8	kernel.asm	/^ffff8000001028a8:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001028aa	kernel.asm	/^ffff8000001028aa:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff8000001028ad	kernel.asm	/^ffff8000001028ad:	75 3c                	jne    ffff8000001028eb <iget+0x8e>$/;"	l
ffff8000001028af	kernel.asm	/^ffff8000001028af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028b3	kernel.asm	/^ffff8000001028b3:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001028b6	kernel.asm	/^ffff8000001028b6:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff8000001028b9	kernel.asm	/^ffff8000001028b9:	75 30                	jne    ffff8000001028eb <iget+0x8e>$/;"	l
ffff8000001028bb	kernel.asm	/^ffff8000001028bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028bf	kernel.asm	/^ffff8000001028bf:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001028c2	kernel.asm	/^ffff8000001028c2:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001028c5	kernel.asm	/^ffff8000001028c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028c9	kernel.asm	/^ffff8000001028c9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001028cc	kernel.asm	/^ffff8000001028cc:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff8000001028d3	kernel.asm	/^ffff8000001028d3:	80 ff ff $/;"	l
ffff8000001028d6	kernel.asm	/^ffff8000001028d6:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001028dd	kernel.asm	/^ffff8000001028dd:	80 ff ff $/;"	l
ffff8000001028e0	kernel.asm	/^ffff8000001028e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001028e2	kernel.asm	/^ffff8000001028e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028e6	kernel.asm	/^ffff8000001028e6:	e9 a1 00 00 00       	jmpq   ffff80000010298c <iget+0x12f>$/;"	l
ffff8000001028eb	kernel.asm	/^ffff8000001028eb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001028f0	kernel.asm	/^ffff8000001028f0:	75 13                	jne    ffff800000102905 <iget+0xa8>$/;"	l
ffff8000001028f2	kernel.asm	/^ffff8000001028f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001028f6	kernel.asm	/^ffff8000001028f6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001028f9	kernel.asm	/^ffff8000001028f9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001028fb	kernel.asm	/^ffff8000001028fb:	75 08                	jne    ffff800000102905 <iget+0xa8>$/;"	l
ffff8000001028fd	kernel.asm	/^ffff8000001028fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102901	kernel.asm	/^ffff800000102901:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102905	kernel.asm	/^ffff800000102905:	48 81 45 f8 d8 00 00 	addq   $0xd8,-0x8(%rbp)$/;"	l
ffff80000010290c	kernel.asm	/^ffff80000010290c:	00 $/;"	l
ffff80000010290d	kernel.asm	/^ffff80000010290d:	48 b8 b8 a0 11 00 00 	movabs $0xffff80000011a0b8,%rax$/;"	l
ffff800000102914	kernel.asm	/^ffff800000102914:	80 ff ff $/;"	l
ffff800000102917	kernel.asm	/^ffff800000102917:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff80000010291b	kernel.asm	/^ffff80000010291b:	0f 82 78 ff ff ff    	jb     ffff800000102899 <iget+0x3c>$/;"	l
ffff800000102921	kernel.asm	/^ffff800000102921:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102926	kernel.asm	/^ffff800000102926:	75 16                	jne    ffff80000010293e <iget+0xe1>$/;"	l
ffff800000102928	kernel.asm	/^ffff800000102928:	48 bf cc cb 10 00 00 	movabs $0xffff80000010cbcc,%rdi$/;"	l
ffff80000010292f	kernel.asm	/^ffff80000010292f:	80 ff ff $/;"	l
ffff800000102932	kernel.asm	/^ffff800000102932:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102939	kernel.asm	/^ffff800000102939:	80 ff ff $/;"	l
ffff80000010293c	kernel.asm	/^ffff80000010293c:	ff d0                	callq  *%rax$/;"	l
ffff80000010293e	kernel.asm	/^ffff80000010293e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102942	kernel.asm	/^ffff800000102942:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102946	kernel.asm	/^ffff800000102946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010294a	kernel.asm	/^ffff80000010294a:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010294d	kernel.asm	/^ffff80000010294d:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010294f	kernel.asm	/^ffff80000010294f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102953	kernel.asm	/^ffff800000102953:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000102956	kernel.asm	/^ffff800000102956:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000102959	kernel.asm	/^ffff800000102959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010295d	kernel.asm	/^ffff80000010295d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)$/;"	l
ffff800000102964	kernel.asm	/^ffff800000102964:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102968	kernel.asm	/^ffff800000102968:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff80000010296f	kernel.asm	/^ffff80000010296f:	00 00 00 $/;"	l
ffff800000102972	kernel.asm	/^ffff800000102972:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102979	kernel.asm	/^ffff800000102979:	80 ff ff $/;"	l
ffff80000010297c	kernel.asm	/^ffff80000010297c:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000102983	kernel.asm	/^ffff800000102983:	80 ff ff $/;"	l
ffff800000102986	kernel.asm	/^ffff800000102986:	ff d0                	callq  *%rax$/;"	l
ffff800000102988	kernel.asm	/^ffff800000102988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010298c	kernel.asm	/^ffff80000010298c:	c9                   	leaveq $/;"	l
ffff80000010298d	kernel.asm	/^ffff80000010298d:	c3                   	retq   $/;"	l
ffff80000010298e	kernel.asm	/^ffff80000010298e <idup>:$/;"	l
ffff80000010298e	kernel.asm	/^ffff80000010298e:	55                   	push   %rbp$/;"	l
ffff80000010298f	kernel.asm	/^ffff80000010298f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102992	kernel.asm	/^ffff800000102992:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102996	kernel.asm	/^ffff800000102996:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010299a	kernel.asm	/^ffff80000010299a:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff8000001029a1	kernel.asm	/^ffff8000001029a1:	80 ff ff $/;"	l
ffff8000001029a4	kernel.asm	/^ffff8000001029a4:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001029ab	kernel.asm	/^ffff8000001029ab:	80 ff ff $/;"	l
ffff8000001029ae	kernel.asm	/^ffff8000001029ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001029b0	kernel.asm	/^ffff8000001029b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029b4	kernel.asm	/^ffff8000001029b4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001029b7	kernel.asm	/^ffff8000001029b7:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001029ba	kernel.asm	/^ffff8000001029ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029be	kernel.asm	/^ffff8000001029be:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001029c1	kernel.asm	/^ffff8000001029c1:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff8000001029c8	kernel.asm	/^ffff8000001029c8:	80 ff ff $/;"	l
ffff8000001029cb	kernel.asm	/^ffff8000001029cb:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001029d2	kernel.asm	/^ffff8000001029d2:	80 ff ff $/;"	l
ffff8000001029d5	kernel.asm	/^ffff8000001029d5:	ff d0                	callq  *%rax$/;"	l
ffff8000001029d7	kernel.asm	/^ffff8000001029d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001029db	kernel.asm	/^ffff8000001029db:	c9                   	leaveq $/;"	l
ffff8000001029dc	kernel.asm	/^ffff8000001029dc:	c3                   	retq   $/;"	l
ffff8000001029dd	kernel.asm	/^ffff8000001029dd <ilock>:$/;"	l
ffff8000001029dd	kernel.asm	/^ffff8000001029dd:	55                   	push   %rbp$/;"	l
ffff8000001029de	kernel.asm	/^ffff8000001029de:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001029e1	kernel.asm	/^ffff8000001029e1:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001029e5	kernel.asm	/^ffff8000001029e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001029e9	kernel.asm	/^ffff8000001029e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff8000001029ee	kernel.asm	/^ffff8000001029ee:	74 0b                	je     ffff8000001029fb <ilock+0x1e>$/;"	l
ffff8000001029f0	kernel.asm	/^ffff8000001029f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001029f4	kernel.asm	/^ffff8000001029f4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001029f7	kernel.asm	/^ffff8000001029f7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001029f9	kernel.asm	/^ffff8000001029f9:	7f 16                	jg     ffff800000102a11 <ilock+0x34>$/;"	l
ffff8000001029fb	kernel.asm	/^ffff8000001029fb:	48 bf dc cb 10 00 00 	movabs $0xffff80000010cbdc,%rdi$/;"	l
ffff800000102a02	kernel.asm	/^ffff800000102a02:	80 ff ff $/;"	l
ffff800000102a05	kernel.asm	/^ffff800000102a05:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102a0c	kernel.asm	/^ffff800000102a0c:	80 ff ff $/;"	l
ffff800000102a0f	kernel.asm	/^ffff800000102a0f:	ff d0                	callq  *%rax$/;"	l
ffff800000102a11	kernel.asm	/^ffff800000102a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a15	kernel.asm	/^ffff800000102a15:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102a19	kernel.asm	/^ffff800000102a19:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102a1c	kernel.asm	/^ffff800000102a1c:	48 b8 47 71 10 00 00 	movabs $0xffff800000107147,%rax$/;"	l
ffff800000102a23	kernel.asm	/^ffff800000102a23:	80 ff ff $/;"	l
ffff800000102a26	kernel.asm	/^ffff800000102a26:	ff d0                	callq  *%rax$/;"	l
ffff800000102a28	kernel.asm	/^ffff800000102a28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a2c	kernel.asm	/^ffff800000102a2c:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102a32	kernel.asm	/^ffff800000102a32:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102a35	kernel.asm	/^ffff800000102a35:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102a37	kernel.asm	/^ffff800000102a37:	0f 85 2e 01 00 00    	jne    ffff800000102b6b <ilock+0x18e>$/;"	l
ffff800000102a3d	kernel.asm	/^ffff800000102a3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a41	kernel.asm	/^ffff800000102a41:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102a44	kernel.asm	/^ffff800000102a44:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff800000102a47	kernel.asm	/^ffff800000102a47:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102a49	kernel.asm	/^ffff800000102a49:	48 b8 00 76 11 00 00 	movabs $0xffff800000117600,%rax$/;"	l
ffff800000102a50	kernel.asm	/^ffff800000102a50:	80 ff ff $/;"	l
ffff800000102a53	kernel.asm	/^ffff800000102a53:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102a56	kernel.asm	/^ffff800000102a56:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102a58	kernel.asm	/^ffff800000102a58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a5c	kernel.asm	/^ffff800000102a5c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102a5e	kernel.asm	/^ffff800000102a5e:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102a60	kernel.asm	/^ffff800000102a60:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102a62	kernel.asm	/^ffff800000102a62:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102a69	kernel.asm	/^ffff800000102a69:	80 ff ff $/;"	l
ffff800000102a6c	kernel.asm	/^ffff800000102a6c:	ff d0                	callq  *%rax$/;"	l
ffff800000102a6e	kernel.asm	/^ffff800000102a6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102a72	kernel.asm	/^ffff800000102a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a76	kernel.asm	/^ffff800000102a76:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102a7d	kernel.asm	/^ffff800000102a7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a81	kernel.asm	/^ffff800000102a81:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102a84	kernel.asm	/^ffff800000102a84:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000102a86	kernel.asm	/^ffff800000102a86:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102a89	kernel.asm	/^ffff800000102a89:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff800000102a8d	kernel.asm	/^ffff800000102a8d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102a90	kernel.asm	/^ffff800000102a90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102a94	kernel.asm	/^ffff800000102a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102a98	kernel.asm	/^ffff800000102a98:	0f b7 10             	movzwl (%rax),%edx$/;"	l
ffff800000102a9b	kernel.asm	/^ffff800000102a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102a9f	kernel.asm	/^ffff800000102a9f:	66 89 90 94 00 00 00 	mov    %dx,0x94(%rax)$/;"	l
ffff800000102aa6	kernel.asm	/^ffff800000102aa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102aaa	kernel.asm	/^ffff800000102aaa:	0f b7 50 02          	movzwl 0x2(%rax),%edx$/;"	l
ffff800000102aae	kernel.asm	/^ffff800000102aae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102ab2	kernel.asm	/^ffff800000102ab2:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff800000102ab9	kernel.asm	/^ffff800000102ab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102abd	kernel.asm	/^ffff800000102abd:	0f b7 50 04          	movzwl 0x4(%rax),%edx$/;"	l
ffff800000102ac1	kernel.asm	/^ffff800000102ac1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102ac5	kernel.asm	/^ffff800000102ac5:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff800000102acc	kernel.asm	/^ffff800000102acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102ad0	kernel.asm	/^ffff800000102ad0:	0f b7 50 06          	movzwl 0x6(%rax),%edx$/;"	l
ffff800000102ad4	kernel.asm	/^ffff800000102ad4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102ad8	kernel.asm	/^ffff800000102ad8:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000102adf	kernel.asm	/^ffff800000102adf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102ae3	kernel.asm	/^ffff800000102ae3:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000102ae6	kernel.asm	/^ffff800000102ae6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102aea	kernel.asm	/^ffff800000102aea:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff800000102af0	kernel.asm	/^ffff800000102af0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102af4	kernel.asm	/^ffff800000102af4:	48 8d 48 0c          	lea    0xc(%rax),%rcx$/;"	l
ffff800000102af8	kernel.asm	/^ffff800000102af8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102afc	kernel.asm	/^ffff800000102afc:	48 05 a0 00 00 00    	add    $0xa0,%rax$/;"	l
ffff800000102b02	kernel.asm	/^ffff800000102b02:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff800000102b07	kernel.asm	/^ffff800000102b07:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102b0a	kernel.asm	/^ffff800000102b0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102b0d	kernel.asm	/^ffff800000102b0d:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000102b14	kernel.asm	/^ffff800000102b14:	80 ff ff $/;"	l
ffff800000102b17	kernel.asm	/^ffff800000102b17:	ff d0                	callq  *%rax$/;"	l
ffff800000102b19	kernel.asm	/^ffff800000102b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b1d	kernel.asm	/^ffff800000102b1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102b20	kernel.asm	/^ffff800000102b20:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102b27	kernel.asm	/^ffff800000102b27:	80 ff ff $/;"	l
ffff800000102b2a	kernel.asm	/^ffff800000102b2a:	ff d0                	callq  *%rax$/;"	l
ffff800000102b2c	kernel.asm	/^ffff800000102b2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102b30	kernel.asm	/^ffff800000102b30:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102b36	kernel.asm	/^ffff800000102b36:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000102b39	kernel.asm	/^ffff800000102b39:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102b3b	kernel.asm	/^ffff800000102b3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102b3f	kernel.asm	/^ffff800000102b3f:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff800000102b45	kernel.asm	/^ffff800000102b45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102b49	kernel.asm	/^ffff800000102b49:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000102b50	kernel.asm	/^ffff800000102b50:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102b53	kernel.asm	/^ffff800000102b53:	75 16                	jne    ffff800000102b6b <ilock+0x18e>$/;"	l
ffff800000102b55	kernel.asm	/^ffff800000102b55:	48 bf e2 cb 10 00 00 	movabs $0xffff80000010cbe2,%rdi$/;"	l
ffff800000102b5c	kernel.asm	/^ffff800000102b5c:	80 ff ff $/;"	l
ffff800000102b5f	kernel.asm	/^ffff800000102b5f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102b66	kernel.asm	/^ffff800000102b66:	80 ff ff $/;"	l
ffff800000102b69	kernel.asm	/^ffff800000102b69:	ff d0                	callq  *%rax$/;"	l
ffff800000102b6b	kernel.asm	/^ffff800000102b6b:	90                   	nop$/;"	l
ffff800000102b6c	kernel.asm	/^ffff800000102b6c:	c9                   	leaveq $/;"	l
ffff800000102b6d	kernel.asm	/^ffff800000102b6d:	c3                   	retq   $/;"	l
ffff800000102b6e	kernel.asm	/^ffff800000102b6e <iunlock>:$/;"	l
ffff800000102b6e	kernel.asm	/^ffff800000102b6e:	55                   	push   %rbp$/;"	l
ffff800000102b6f	kernel.asm	/^ffff800000102b6f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102b72	kernel.asm	/^ffff800000102b72:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102b76	kernel.asm	/^ffff800000102b76:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102b7a	kernel.asm	/^ffff800000102b7a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000102b7f	kernel.asm	/^ffff800000102b7f:	74 26                	je     ffff800000102ba7 <iunlock+0x39>$/;"	l
ffff800000102b81	kernel.asm	/^ffff800000102b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b85	kernel.asm	/^ffff800000102b85:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102b89	kernel.asm	/^ffff800000102b89:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102b8c	kernel.asm	/^ffff800000102b8c:	48 b8 32 72 10 00 00 	movabs $0xffff800000107232,%rax$/;"	l
ffff800000102b93	kernel.asm	/^ffff800000102b93:	80 ff ff $/;"	l
ffff800000102b96	kernel.asm	/^ffff800000102b96:	ff d0                	callq  *%rax$/;"	l
ffff800000102b98	kernel.asm	/^ffff800000102b98:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102b9a	kernel.asm	/^ffff800000102b9a:	74 0b                	je     ffff800000102ba7 <iunlock+0x39>$/;"	l
ffff800000102b9c	kernel.asm	/^ffff800000102b9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ba0	kernel.asm	/^ffff800000102ba0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102ba3	kernel.asm	/^ffff800000102ba3:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102ba5	kernel.asm	/^ffff800000102ba5:	7f 16                	jg     ffff800000102bbd <iunlock+0x4f>$/;"	l
ffff800000102ba7	kernel.asm	/^ffff800000102ba7:	48 bf f1 cb 10 00 00 	movabs $0xffff80000010cbf1,%rdi$/;"	l
ffff800000102bae	kernel.asm	/^ffff800000102bae:	80 ff ff $/;"	l
ffff800000102bb1	kernel.asm	/^ffff800000102bb1:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102bb8	kernel.asm	/^ffff800000102bb8:	80 ff ff $/;"	l
ffff800000102bbb	kernel.asm	/^ffff800000102bbb:	ff d0                	callq  *%rax$/;"	l
ffff800000102bbd	kernel.asm	/^ffff800000102bbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102bc1	kernel.asm	/^ffff800000102bc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102bc5	kernel.asm	/^ffff800000102bc5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102bc8	kernel.asm	/^ffff800000102bc8:	48 b8 cd 71 10 00 00 	movabs $0xffff8000001071cd,%rax$/;"	l
ffff800000102bcf	kernel.asm	/^ffff800000102bcf:	80 ff ff $/;"	l
ffff800000102bd2	kernel.asm	/^ffff800000102bd2:	ff d0                	callq  *%rax$/;"	l
ffff800000102bd4	kernel.asm	/^ffff800000102bd4:	90                   	nop$/;"	l
ffff800000102bd5	kernel.asm	/^ffff800000102bd5:	c9                   	leaveq $/;"	l
ffff800000102bd6	kernel.asm	/^ffff800000102bd6:	c3                   	retq   $/;"	l
ffff800000102bd7	kernel.asm	/^ffff800000102bd7 <iput>:$/;"	l
ffff800000102bd7	kernel.asm	/^ffff800000102bd7:	55                   	push   %rbp$/;"	l
ffff800000102bd8	kernel.asm	/^ffff800000102bd8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102bdb	kernel.asm	/^ffff800000102bdb:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102bdf	kernel.asm	/^ffff800000102bdf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102be3	kernel.asm	/^ffff800000102be3:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102bea	kernel.asm	/^ffff800000102bea:	80 ff ff $/;"	l
ffff800000102bed	kernel.asm	/^ffff800000102bed:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000102bf4	kernel.asm	/^ffff800000102bf4:	80 ff ff $/;"	l
ffff800000102bf7	kernel.asm	/^ffff800000102bf7:	ff d0                	callq  *%rax$/;"	l
ffff800000102bf9	kernel.asm	/^ffff800000102bf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102bfd	kernel.asm	/^ffff800000102bfd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102c00	kernel.asm	/^ffff800000102c00:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000102c03	kernel.asm	/^ffff800000102c03:	0f 85 8e 00 00 00    	jne    ffff800000102c97 <iput+0xc0>$/;"	l
ffff800000102c09	kernel.asm	/^ffff800000102c09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c0d	kernel.asm	/^ffff800000102c0d:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102c13	kernel.asm	/^ffff800000102c13:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102c16	kernel.asm	/^ffff800000102c16:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102c18	kernel.asm	/^ffff800000102c18:	74 7d                	je     ffff800000102c97 <iput+0xc0>$/;"	l
ffff800000102c1a	kernel.asm	/^ffff800000102c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c1e	kernel.asm	/^ffff800000102c1e:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000102c25	kernel.asm	/^ffff800000102c25:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102c28	kernel.asm	/^ffff800000102c28:	75 6d                	jne    ffff800000102c97 <iput+0xc0>$/;"	l
ffff800000102c2a	kernel.asm	/^ffff800000102c2a:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102c31	kernel.asm	/^ffff800000102c31:	80 ff ff $/;"	l
ffff800000102c34	kernel.asm	/^ffff800000102c34:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000102c3b	kernel.asm	/^ffff800000102c3b:	80 ff ff $/;"	l
ffff800000102c3e	kernel.asm	/^ffff800000102c3e:	ff d0                	callq  *%rax$/;"	l
ffff800000102c40	kernel.asm	/^ffff800000102c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c44	kernel.asm	/^ffff800000102c44:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102c47	kernel.asm	/^ffff800000102c47:	48 b8 57 2e 10 00 00 	movabs $0xffff800000102e57,%rax$/;"	l
ffff800000102c4e	kernel.asm	/^ffff800000102c4e:	80 ff ff $/;"	l
ffff800000102c51	kernel.asm	/^ffff800000102c51:	ff d0                	callq  *%rax$/;"	l
ffff800000102c53	kernel.asm	/^ffff800000102c53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c57	kernel.asm	/^ffff800000102c57:	66 c7 80 94 00 00 00 	movw   $0x0,0x94(%rax)$/;"	l
ffff800000102c5e	kernel.asm	/^ffff800000102c5e:	00 00 $/;"	l
ffff800000102c60	kernel.asm	/^ffff800000102c60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c64	kernel.asm	/^ffff800000102c64:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102c67	kernel.asm	/^ffff800000102c67:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff800000102c6e	kernel.asm	/^ffff800000102c6e:	80 ff ff $/;"	l
ffff800000102c71	kernel.asm	/^ffff800000102c71:	ff d0                	callq  *%rax$/;"	l
ffff800000102c73	kernel.asm	/^ffff800000102c73:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102c7a	kernel.asm	/^ffff800000102c7a:	80 ff ff $/;"	l
ffff800000102c7d	kernel.asm	/^ffff800000102c7d:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000102c84	kernel.asm	/^ffff800000102c84:	80 ff ff $/;"	l
ffff800000102c87	kernel.asm	/^ffff800000102c87:	ff d0                	callq  *%rax$/;"	l
ffff800000102c89	kernel.asm	/^ffff800000102c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c8d	kernel.asm	/^ffff800000102c8d:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff800000102c94	kernel.asm	/^ffff800000102c94:	00 00 00 $/;"	l
ffff800000102c97	kernel.asm	/^ffff800000102c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c9b	kernel.asm	/^ffff800000102c9b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102c9e	kernel.asm	/^ffff800000102c9e:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000102ca1	kernel.asm	/^ffff800000102ca1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ca5	kernel.asm	/^ffff800000102ca5:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102ca8	kernel.asm	/^ffff800000102ca8:	48 bf 20 76 11 00 00 	movabs $0xffff800000117620,%rdi$/;"	l
ffff800000102caf	kernel.asm	/^ffff800000102caf:	80 ff ff $/;"	l
ffff800000102cb2	kernel.asm	/^ffff800000102cb2:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000102cb9	kernel.asm	/^ffff800000102cb9:	80 ff ff $/;"	l
ffff800000102cbc	kernel.asm	/^ffff800000102cbc:	ff d0                	callq  *%rax$/;"	l
ffff800000102cbe	kernel.asm	/^ffff800000102cbe:	90                   	nop$/;"	l
ffff800000102cbf	kernel.asm	/^ffff800000102cbf:	c9                   	leaveq $/;"	l
ffff800000102cc0	kernel.asm	/^ffff800000102cc0:	c3                   	retq   $/;"	l
ffff800000102cc1	kernel.asm	/^ffff800000102cc1 <iunlockput>:$/;"	l
ffff800000102cc1	kernel.asm	/^ffff800000102cc1:	55                   	push   %rbp$/;"	l
ffff800000102cc2	kernel.asm	/^ffff800000102cc2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102cc5	kernel.asm	/^ffff800000102cc5:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102cc9	kernel.asm	/^ffff800000102cc9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102ccd	kernel.asm	/^ffff800000102ccd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102cd1	kernel.asm	/^ffff800000102cd1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102cd4	kernel.asm	/^ffff800000102cd4:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000102cdb	kernel.asm	/^ffff800000102cdb:	80 ff ff $/;"	l
ffff800000102cde	kernel.asm	/^ffff800000102cde:	ff d0                	callq  *%rax$/;"	l
ffff800000102ce0	kernel.asm	/^ffff800000102ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ce4	kernel.asm	/^ffff800000102ce4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102ce7	kernel.asm	/^ffff800000102ce7:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff800000102cee	kernel.asm	/^ffff800000102cee:	80 ff ff $/;"	l
ffff800000102cf1	kernel.asm	/^ffff800000102cf1:	ff d0                	callq  *%rax$/;"	l
ffff800000102cf3	kernel.asm	/^ffff800000102cf3:	90                   	nop$/;"	l
ffff800000102cf4	kernel.asm	/^ffff800000102cf4:	c9                   	leaveq $/;"	l
ffff800000102cf5	kernel.asm	/^ffff800000102cf5:	c3                   	retq   $/;"	l
ffff800000102cf6	kernel.asm	/^ffff800000102cf6 <bmap>:$/;"	l
ffff800000102cf6	kernel.asm	/^ffff800000102cf6:	55                   	push   %rbp$/;"	l
ffff800000102cf7	kernel.asm	/^ffff800000102cf7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102cfa	kernel.asm	/^ffff800000102cfa:	53                   	push   %rbx$/;"	l
ffff800000102cfb	kernel.asm	/^ffff800000102cfb:	48 83 ec 38          	sub    $0x38,%rsp$/;"	l
ffff800000102cff	kernel.asm	/^ffff800000102cff:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000102d03	kernel.asm	/^ffff800000102d03:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff800000102d06	kernel.asm	/^ffff800000102d06:	83 7d c4 0b          	cmpl   $0xb,-0x3c(%rbp)$/;"	l
ffff800000102d0a	kernel.asm	/^ffff800000102d0a:	77 47                	ja     ffff800000102d53 <bmap+0x5d>$/;"	l
ffff800000102d0c	kernel.asm	/^ffff800000102d0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d10	kernel.asm	/^ffff800000102d10:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102d13	kernel.asm	/^ffff800000102d13:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102d17	kernel.asm	/^ffff800000102d17:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102d1a	kernel.asm	/^ffff800000102d1a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102d1d	kernel.asm	/^ffff800000102d1d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102d21	kernel.asm	/^ffff800000102d21:	75 28                	jne    ffff800000102d4b <bmap+0x55>$/;"	l
ffff800000102d23	kernel.asm	/^ffff800000102d23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d27	kernel.asm	/^ffff800000102d27:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102d29	kernel.asm	/^ffff800000102d29:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102d2b	kernel.asm	/^ffff800000102d2b:	48 b8 bb 22 10 00 00 	movabs $0xffff8000001022bb,%rax$/;"	l
ffff800000102d32	kernel.asm	/^ffff800000102d32:	80 ff ff $/;"	l
ffff800000102d35	kernel.asm	/^ffff800000102d35:	ff d0                	callq  *%rax$/;"	l
ffff800000102d37	kernel.asm	/^ffff800000102d37:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102d3a	kernel.asm	/^ffff800000102d3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d3e	kernel.asm	/^ffff800000102d3e:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102d41	kernel.asm	/^ffff800000102d41:	48 8d 4a 28          	lea    0x28(%rdx),%rcx$/;"	l
ffff800000102d45	kernel.asm	/^ffff800000102d45:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102d48	kernel.asm	/^ffff800000102d48:	89 14 88             	mov    %edx,(%rax,%rcx,4)$/;"	l
ffff800000102d4b	kernel.asm	/^ffff800000102d4b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102d4e	kernel.asm	/^ffff800000102d4e:	e9 fd 00 00 00       	jmpq   ffff800000102e50 <bmap+0x15a>$/;"	l
ffff800000102d53	kernel.asm	/^ffff800000102d53:	83 6d c4 0c          	subl   $0xc,-0x3c(%rbp)$/;"	l
ffff800000102d57	kernel.asm	/^ffff800000102d57:	83 7d c4 7f          	cmpl   $0x7f,-0x3c(%rbp)$/;"	l
ffff800000102d5b	kernel.asm	/^ffff800000102d5b:	0f 87 d9 00 00 00    	ja     ffff800000102e3a <bmap+0x144>$/;"	l
ffff800000102d61	kernel.asm	/^ffff800000102d61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d65	kernel.asm	/^ffff800000102d65:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102d6b	kernel.asm	/^ffff800000102d6b:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102d6e	kernel.asm	/^ffff800000102d6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102d72	kernel.asm	/^ffff800000102d72:	75 24                	jne    ffff800000102d98 <bmap+0xa2>$/;"	l
ffff800000102d74	kernel.asm	/^ffff800000102d74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d78	kernel.asm	/^ffff800000102d78:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102d7a	kernel.asm	/^ffff800000102d7a:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102d7c	kernel.asm	/^ffff800000102d7c:	48 b8 bb 22 10 00 00 	movabs $0xffff8000001022bb,%rax$/;"	l
ffff800000102d83	kernel.asm	/^ffff800000102d83:	80 ff ff $/;"	l
ffff800000102d86	kernel.asm	/^ffff800000102d86:	ff d0                	callq  *%rax$/;"	l
ffff800000102d88	kernel.asm	/^ffff800000102d88:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102d8b	kernel.asm	/^ffff800000102d8b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d8f	kernel.asm	/^ffff800000102d8f:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102d92	kernel.asm	/^ffff800000102d92:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)$/;"	l
ffff800000102d98	kernel.asm	/^ffff800000102d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102d9c	kernel.asm	/^ffff800000102d9c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102d9e	kernel.asm	/^ffff800000102d9e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102da1	kernel.asm	/^ffff800000102da1:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102da3	kernel.asm	/^ffff800000102da3:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102da5	kernel.asm	/^ffff800000102da5:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102dac	kernel.asm	/^ffff800000102dac:	80 ff ff $/;"	l
ffff800000102daf	kernel.asm	/^ffff800000102daf:	ff d0                	callq  *%rax$/;"	l
ffff800000102db1	kernel.asm	/^ffff800000102db1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff800000102db5	kernel.asm	/^ffff800000102db5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102db9	kernel.asm	/^ffff800000102db9:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102dbf	kernel.asm	/^ffff800000102dbf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000102dc3	kernel.asm	/^ffff800000102dc3:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102dc6	kernel.asm	/^ffff800000102dc6:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102dcd	kernel.asm	/^ffff800000102dcd:	00 $/;"	l
ffff800000102dce	kernel.asm	/^ffff800000102dce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102dd2	kernel.asm	/^ffff800000102dd2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102dd5	kernel.asm	/^ffff800000102dd5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102dd7	kernel.asm	/^ffff800000102dd7:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102dda	kernel.asm	/^ffff800000102dda:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102dde	kernel.asm	/^ffff800000102dde:	75 42                	jne    ffff800000102e22 <bmap+0x12c>$/;"	l
ffff800000102de0	kernel.asm	/^ffff800000102de0:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102de3	kernel.asm	/^ffff800000102de3:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102dea	kernel.asm	/^ffff800000102dea:	00 $/;"	l
ffff800000102deb	kernel.asm	/^ffff800000102deb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102def	kernel.asm	/^ffff800000102def:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx$/;"	l
ffff800000102df3	kernel.asm	/^ffff800000102df3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102df7	kernel.asm	/^ffff800000102df7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102df9	kernel.asm	/^ffff800000102df9:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102dfb	kernel.asm	/^ffff800000102dfb:	48 b8 bb 22 10 00 00 	movabs $0xffff8000001022bb,%rax$/;"	l
ffff800000102e02	kernel.asm	/^ffff800000102e02:	80 ff ff $/;"	l
ffff800000102e05	kernel.asm	/^ffff800000102e05:	ff d0                	callq  *%rax$/;"	l
ffff800000102e07	kernel.asm	/^ffff800000102e07:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102e0a	kernel.asm	/^ffff800000102e0a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102e0d	kernel.asm	/^ffff800000102e0d:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff800000102e0f	kernel.asm	/^ffff800000102e0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102e13	kernel.asm	/^ffff800000102e13:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102e16	kernel.asm	/^ffff800000102e16:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff800000102e1d	kernel.asm	/^ffff800000102e1d:	80 ff ff $/;"	l
ffff800000102e20	kernel.asm	/^ffff800000102e20:	ff d0                	callq  *%rax$/;"	l
ffff800000102e22	kernel.asm	/^ffff800000102e22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102e26	kernel.asm	/^ffff800000102e26:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102e29	kernel.asm	/^ffff800000102e29:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102e30	kernel.asm	/^ffff800000102e30:	80 ff ff $/;"	l
ffff800000102e33	kernel.asm	/^ffff800000102e33:	ff d0                	callq  *%rax$/;"	l
ffff800000102e35	kernel.asm	/^ffff800000102e35:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102e38	kernel.asm	/^ffff800000102e38:	eb 16                	jmp    ffff800000102e50 <bmap+0x15a>$/;"	l
ffff800000102e3a	kernel.asm	/^ffff800000102e3a:	48 bf f9 cb 10 00 00 	movabs $0xffff80000010cbf9,%rdi$/;"	l
ffff800000102e41	kernel.asm	/^ffff800000102e41:	80 ff ff $/;"	l
ffff800000102e44	kernel.asm	/^ffff800000102e44:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000102e4b	kernel.asm	/^ffff800000102e4b:	80 ff ff $/;"	l
ffff800000102e4e	kernel.asm	/^ffff800000102e4e:	ff d0                	callq  *%rax$/;"	l
ffff800000102e50	kernel.asm	/^ffff800000102e50:	48 83 c4 38          	add    $0x38,%rsp$/;"	l
ffff800000102e54	kernel.asm	/^ffff800000102e54:	5b                   	pop    %rbx$/;"	l
ffff800000102e55	kernel.asm	/^ffff800000102e55:	5d                   	pop    %rbp$/;"	l
ffff800000102e56	kernel.asm	/^ffff800000102e56:	c3                   	retq   $/;"	l
ffff800000102e57	kernel.asm	/^ffff800000102e57 <itrunc>:$/;"	l
ffff800000102e57	kernel.asm	/^ffff800000102e57:	55                   	push   %rbp$/;"	l
ffff800000102e58	kernel.asm	/^ffff800000102e58:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102e5b	kernel.asm	/^ffff800000102e5b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000102e5f	kernel.asm	/^ffff800000102e5f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000102e63	kernel.asm	/^ffff800000102e63:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102e6a	kernel.asm	/^ffff800000102e6a:	eb 55                	jmp    ffff800000102ec1 <itrunc+0x6a>$/;"	l
ffff800000102e6c	kernel.asm	/^ffff800000102e6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e70	kernel.asm	/^ffff800000102e70:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102e73	kernel.asm	/^ffff800000102e73:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102e76	kernel.asm	/^ffff800000102e76:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102e7a	kernel.asm	/^ffff800000102e7a:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102e7d	kernel.asm	/^ffff800000102e7d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102e7f	kernel.asm	/^ffff800000102e7f:	74 3c                	je     ffff800000102ebd <itrunc+0x66>$/;"	l
ffff800000102e81	kernel.asm	/^ffff800000102e81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102e85	kernel.asm	/^ffff800000102e85:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102e88	kernel.asm	/^ffff800000102e88:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102e8b	kernel.asm	/^ffff800000102e8b:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102e8f	kernel.asm	/^ffff800000102e8f:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102e92	kernel.asm	/^ffff800000102e92:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102e96	kernel.asm	/^ffff800000102e96:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102e98	kernel.asm	/^ffff800000102e98:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102e9a	kernel.asm	/^ffff800000102e9a:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102e9c	kernel.asm	/^ffff800000102e9c:	48 b8 5b 24 10 00 00 	movabs $0xffff80000010245b,%rax$/;"	l
ffff800000102ea3	kernel.asm	/^ffff800000102ea3:	80 ff ff $/;"	l
ffff800000102ea6	kernel.asm	/^ffff800000102ea6:	ff d0                	callq  *%rax$/;"	l
ffff800000102ea8	kernel.asm	/^ffff800000102ea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102eac	kernel.asm	/^ffff800000102eac:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102eaf	kernel.asm	/^ffff800000102eaf:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102eb2	kernel.asm	/^ffff800000102eb2:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102eb6	kernel.asm	/^ffff800000102eb6:	c7 04 90 00 00 00 00 	movl   $0x0,(%rax,%rdx,4)$/;"	l
ffff800000102ebd	kernel.asm	/^ffff800000102ebd:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000102ec1	kernel.asm	/^ffff800000102ec1:	83 7d fc 0b          	cmpl   $0xb,-0x4(%rbp)$/;"	l
ffff800000102ec5	kernel.asm	/^ffff800000102ec5:	7e a5                	jle    ffff800000102e6c <itrunc+0x15>$/;"	l
ffff800000102ec7	kernel.asm	/^ffff800000102ec7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102ecb	kernel.asm	/^ffff800000102ecb:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102ed1	kernel.asm	/^ffff800000102ed1:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102ed3	kernel.asm	/^ffff800000102ed3:	0f 84 ce 00 00 00    	je     ffff800000102fa7 <itrunc+0x150>$/;"	l
ffff800000102ed9	kernel.asm	/^ffff800000102ed9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102edd	kernel.asm	/^ffff800000102edd:	8b 90 d0 00 00 00    	mov    0xd0(%rax),%edx$/;"	l
ffff800000102ee3	kernel.asm	/^ffff800000102ee3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102ee7	kernel.asm	/^ffff800000102ee7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102ee9	kernel.asm	/^ffff800000102ee9:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102eeb	kernel.asm	/^ffff800000102eeb:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102eed	kernel.asm	/^ffff800000102eed:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102ef4	kernel.asm	/^ffff800000102ef4:	80 ff ff $/;"	l
ffff800000102ef7	kernel.asm	/^ffff800000102ef7:	ff d0                	callq  *%rax$/;"	l
ffff800000102ef9	kernel.asm	/^ffff800000102ef9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102efd	kernel.asm	/^ffff800000102efd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102f01	kernel.asm	/^ffff800000102f01:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102f07	kernel.asm	/^ffff800000102f07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000102f0b	kernel.asm	/^ffff800000102f0b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff800000102f12	kernel.asm	/^ffff800000102f12:	eb 4a                	jmp    ffff800000102f5e <itrunc+0x107>$/;"	l
ffff800000102f14	kernel.asm	/^ffff800000102f14:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102f17	kernel.asm	/^ffff800000102f17:	48 98                	cltq   $/;"	l
ffff800000102f19	kernel.asm	/^ffff800000102f19:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102f20	kernel.asm	/^ffff800000102f20:	00 $/;"	l
ffff800000102f21	kernel.asm	/^ffff800000102f21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102f25	kernel.asm	/^ffff800000102f25:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102f28	kernel.asm	/^ffff800000102f28:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102f2a	kernel.asm	/^ffff800000102f2a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102f2c	kernel.asm	/^ffff800000102f2c:	74 2c                	je     ffff800000102f5a <itrunc+0x103>$/;"	l
ffff800000102f2e	kernel.asm	/^ffff800000102f2e:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102f31	kernel.asm	/^ffff800000102f31:	48 98                	cltq   $/;"	l
ffff800000102f33	kernel.asm	/^ffff800000102f33:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102f3a	kernel.asm	/^ffff800000102f3a:	00 $/;"	l
ffff800000102f3b	kernel.asm	/^ffff800000102f3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102f3f	kernel.asm	/^ffff800000102f3f:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102f42	kernel.asm	/^ffff800000102f42:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102f44	kernel.asm	/^ffff800000102f44:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102f48	kernel.asm	/^ffff800000102f48:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102f4a	kernel.asm	/^ffff800000102f4a:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102f4c	kernel.asm	/^ffff800000102f4c:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102f4e	kernel.asm	/^ffff800000102f4e:	48 b8 5b 24 10 00 00 	movabs $0xffff80000010245b,%rax$/;"	l
ffff800000102f55	kernel.asm	/^ffff800000102f55:	80 ff ff $/;"	l
ffff800000102f58	kernel.asm	/^ffff800000102f58:	ff d0                	callq  *%rax$/;"	l
ffff800000102f5a	kernel.asm	/^ffff800000102f5a:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff800000102f5e	kernel.asm	/^ffff800000102f5e:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102f61	kernel.asm	/^ffff800000102f61:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000102f64	kernel.asm	/^ffff800000102f64:	76 ae                	jbe    ffff800000102f14 <itrunc+0xbd>$/;"	l
ffff800000102f66	kernel.asm	/^ffff800000102f66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102f6a	kernel.asm	/^ffff800000102f6a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102f6d	kernel.asm	/^ffff800000102f6d:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102f74	kernel.asm	/^ffff800000102f74:	80 ff ff $/;"	l
ffff800000102f77	kernel.asm	/^ffff800000102f77:	ff d0                	callq  *%rax$/;"	l
ffff800000102f79	kernel.asm	/^ffff800000102f79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f7d	kernel.asm	/^ffff800000102f7d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102f83	kernel.asm	/^ffff800000102f83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000102f87	kernel.asm	/^ffff800000102f87:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000102f89	kernel.asm	/^ffff800000102f89:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102f8b	kernel.asm	/^ffff800000102f8b:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000102f8d	kernel.asm	/^ffff800000102f8d:	48 b8 5b 24 10 00 00 	movabs $0xffff80000010245b,%rax$/;"	l
ffff800000102f94	kernel.asm	/^ffff800000102f94:	80 ff ff $/;"	l
ffff800000102f97	kernel.asm	/^ffff800000102f97:	ff d0                	callq  *%rax$/;"	l
ffff800000102f99	kernel.asm	/^ffff800000102f99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102f9d	kernel.asm	/^ffff800000102f9d:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)$/;"	l
ffff800000102fa4	kernel.asm	/^ffff800000102fa4:	00 00 00 $/;"	l
ffff800000102fa7	kernel.asm	/^ffff800000102fa7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102fab	kernel.asm	/^ffff800000102fab:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%rax)$/;"	l
ffff800000102fb2	kernel.asm	/^ffff800000102fb2:	00 00 00 $/;"	l
ffff800000102fb5	kernel.asm	/^ffff800000102fb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102fb9	kernel.asm	/^ffff800000102fb9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102fbc	kernel.asm	/^ffff800000102fbc:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff800000102fc3	kernel.asm	/^ffff800000102fc3:	80 ff ff $/;"	l
ffff800000102fc6	kernel.asm	/^ffff800000102fc6:	ff d0                	callq  *%rax$/;"	l
ffff800000102fc8	kernel.asm	/^ffff800000102fc8:	90                   	nop$/;"	l
ffff800000102fc9	kernel.asm	/^ffff800000102fc9:	c9                   	leaveq $/;"	l
ffff800000102fca	kernel.asm	/^ffff800000102fca:	c3                   	retq   $/;"	l
ffff800000102fcb	kernel.asm	/^ffff800000102fcb <stati>:$/;"	l
ffff800000102fcb	kernel.asm	/^ffff800000102fcb:	55                   	push   %rbp$/;"	l
ffff800000102fcc	kernel.asm	/^ffff800000102fcc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102fcf	kernel.asm	/^ffff800000102fcf:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102fd3	kernel.asm	/^ffff800000102fd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102fd7	kernel.asm	/^ffff800000102fd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000102fdb	kernel.asm	/^ffff800000102fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102fdf	kernel.asm	/^ffff800000102fdf:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102fe1	kernel.asm	/^ffff800000102fe1:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102fe3	kernel.asm	/^ffff800000102fe3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102fe7	kernel.asm	/^ffff800000102fe7:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000102fea	kernel.asm	/^ffff800000102fea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102fee	kernel.asm	/^ffff800000102fee:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000102ff1	kernel.asm	/^ffff800000102ff1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102ff5	kernel.asm	/^ffff800000102ff5:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102ff8	kernel.asm	/^ffff800000102ff8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ffc	kernel.asm	/^ffff800000102ffc:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff800000103003	kernel.asm	/^ffff800000103003:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103007	kernel.asm	/^ffff800000103007:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff80000010300a	kernel.asm	/^ffff80000010300a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010300e	kernel.asm	/^ffff80000010300e:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff800000103015	kernel.asm	/^ffff800000103015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103019	kernel.asm	/^ffff800000103019:	66 89 50 0c          	mov    %dx,0xc(%rax)$/;"	l
ffff80000010301d	kernel.asm	/^ffff80000010301d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103021	kernel.asm	/^ffff800000103021:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff800000103027	kernel.asm	/^ffff800000103027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010302b	kernel.asm	/^ffff80000010302b:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff80000010302e	kernel.asm	/^ffff80000010302e:	90                   	nop$/;"	l
ffff80000010302f	kernel.asm	/^ffff80000010302f:	c9                   	leaveq $/;"	l
ffff800000103030	kernel.asm	/^ffff800000103030:	c3                   	retq   $/;"	l
ffff800000103031	kernel.asm	/^ffff800000103031 <readi>:$/;"	l
ffff800000103031	kernel.asm	/^ffff800000103031:	55                   	push   %rbp$/;"	l
ffff800000103032	kernel.asm	/^ffff800000103032:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103035	kernel.asm	/^ffff800000103035:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000103039	kernel.asm	/^ffff800000103039:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010303d	kernel.asm	/^ffff80000010303d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103041	kernel.asm	/^ffff800000103041:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103044	kernel.asm	/^ffff800000103044:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000103047	kernel.asm	/^ffff800000103047:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010304b	kernel.asm	/^ffff80000010304b:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000103051	kernel.asm	/^ffff800000103051:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000103054	kernel.asm	/^ffff800000103054:	72 0d                	jb     ffff800000103063 <readi+0x32>$/;"	l
ffff800000103056	kernel.asm	/^ffff800000103056:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103059	kernel.asm	/^ffff800000103059:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010305c	kernel.asm	/^ffff80000010305c:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010305e	kernel.asm	/^ffff80000010305e:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000103061	kernel.asm	/^ffff800000103061:	73 0a                	jae    ffff80000010306d <readi+0x3c>$/;"	l
ffff800000103063	kernel.asm	/^ffff800000103063:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103068	kernel.asm	/^ffff800000103068:	e9 ed 00 00 00       	jmpq   ffff80000010315a <readi+0x129>$/;"	l
ffff80000010306d	kernel.asm	/^ffff80000010306d:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103070	kernel.asm	/^ffff800000103070:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103073	kernel.asm	/^ffff800000103073:	01 c2                	add    %eax,%edx$/;"	l
ffff800000103075	kernel.asm	/^ffff800000103075:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103079	kernel.asm	/^ffff800000103079:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010307f	kernel.asm	/^ffff80000010307f:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000103081	kernel.asm	/^ffff800000103081:	76 10                	jbe    ffff800000103093 <readi+0x62>$/;"	l
ffff800000103083	kernel.asm	/^ffff800000103083:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103087	kernel.asm	/^ffff800000103087:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010308d	kernel.asm	/^ffff80000010308d:	2b 45 cc             	sub    -0x34(%rbp),%eax$/;"	l
ffff800000103090	kernel.asm	/^ffff800000103090:	89 45 c8             	mov    %eax,-0x38(%rbp)$/;"	l
ffff800000103093	kernel.asm	/^ffff800000103093:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010309a	kernel.asm	/^ffff80000010309a:	e9 ac 00 00 00       	jmpq   ffff80000010314b <readi+0x11a>$/;"	l
ffff80000010309f	kernel.asm	/^ffff80000010309f:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001030a2	kernel.asm	/^ffff8000001030a2:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff8000001030a5	kernel.asm	/^ffff8000001030a5:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001030a7	kernel.asm	/^ffff8000001030a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001030ab	kernel.asm	/^ffff8000001030ab:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001030ad	kernel.asm	/^ffff8000001030ad:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001030b0	kernel.asm	/^ffff8000001030b0:	48 b8 f6 2c 10 00 00 	movabs $0xffff800000102cf6,%rax$/;"	l
ffff8000001030b7	kernel.asm	/^ffff8000001030b7:	80 ff ff $/;"	l
ffff8000001030ba	kernel.asm	/^ffff8000001030ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001030bc	kernel.asm	/^ffff8000001030bc:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001030be	kernel.asm	/^ffff8000001030be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001030c2	kernel.asm	/^ffff8000001030c2:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001030c4	kernel.asm	/^ffff8000001030c4:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001030c6	kernel.asm	/^ffff8000001030c6:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001030c8	kernel.asm	/^ffff8000001030c8:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001030cf	kernel.asm	/^ffff8000001030cf:	80 ff ff $/;"	l
ffff8000001030d2	kernel.asm	/^ffff8000001030d2:	ff d0                	callq  *%rax$/;"	l
ffff8000001030d4	kernel.asm	/^ffff8000001030d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001030d8	kernel.asm	/^ffff8000001030d8:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001030db	kernel.asm	/^ffff8000001030db:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001030e0	kernel.asm	/^ffff8000001030e0:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff8000001030e5	kernel.asm	/^ffff8000001030e5:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001030e7	kernel.asm	/^ffff8000001030e7:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001030ea	kernel.asm	/^ffff8000001030ea:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001030ed	kernel.asm	/^ffff8000001030ed:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001030ef	kernel.asm	/^ffff8000001030ef:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff8000001030f2	kernel.asm	/^ffff8000001030f2:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff8000001030f5	kernel.asm	/^ffff8000001030f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001030f9	kernel.asm	/^ffff8000001030f9:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000103100	kernel.asm	/^ffff800000103100:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103103	kernel.asm	/^ffff800000103103:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000103108	kernel.asm	/^ffff800000103108:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010310c	kernel.asm	/^ffff80000010310c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010310f	kernel.asm	/^ffff80000010310f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000103113	kernel.asm	/^ffff800000103113:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103116	kernel.asm	/^ffff800000103116:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103119	kernel.asm	/^ffff800000103119:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000103120	kernel.asm	/^ffff800000103120:	80 ff ff $/;"	l
ffff800000103123	kernel.asm	/^ffff800000103123:	ff d0                	callq  *%rax$/;"	l
ffff800000103125	kernel.asm	/^ffff800000103125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103129	kernel.asm	/^ffff800000103129:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010312c	kernel.asm	/^ffff80000010312c:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103133	kernel.asm	/^ffff800000103133:	80 ff ff $/;"	l
ffff800000103136	kernel.asm	/^ffff800000103136:	ff d0                	callq  *%rax$/;"	l
ffff800000103138	kernel.asm	/^ffff800000103138:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010313b	kernel.asm	/^ffff80000010313b:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff80000010313e	kernel.asm	/^ffff80000010313e:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103141	kernel.asm	/^ffff800000103141:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff800000103144	kernel.asm	/^ffff800000103144:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103147	kernel.asm	/^ffff800000103147:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff80000010314b	kernel.asm	/^ffff80000010314b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010314e	kernel.asm	/^ffff80000010314e:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff800000103151	kernel.asm	/^ffff800000103151:	0f 82 48 ff ff ff    	jb     ffff80000010309f <readi+0x6e>$/;"	l
ffff800000103157	kernel.asm	/^ffff800000103157:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010315a	kernel.asm	/^ffff80000010315a:	c9                   	leaveq $/;"	l
ffff80000010315b	kernel.asm	/^ffff80000010315b:	c3                   	retq   $/;"	l
ffff80000010315c	kernel.asm	/^ffff80000010315c <writei>:$/;"	l
ffff80000010315c	kernel.asm	/^ffff80000010315c:	55                   	push   %rbp$/;"	l
ffff80000010315d	kernel.asm	/^ffff80000010315d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103160	kernel.asm	/^ffff800000103160:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000103164	kernel.asm	/^ffff800000103164:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000103168	kernel.asm	/^ffff800000103168:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010316c	kernel.asm	/^ffff80000010316c:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff80000010316f	kernel.asm	/^ffff80000010316f:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000103172	kernel.asm	/^ffff800000103172:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103176	kernel.asm	/^ffff800000103176:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010317c	kernel.asm	/^ffff80000010317c:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff80000010317f	kernel.asm	/^ffff80000010317f:	72 0d                	jb     ffff80000010318e <writei+0x32>$/;"	l
ffff800000103181	kernel.asm	/^ffff800000103181:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103184	kernel.asm	/^ffff800000103184:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103187	kernel.asm	/^ffff800000103187:	01 d0                	add    %edx,%eax$/;"	l
ffff800000103189	kernel.asm	/^ffff800000103189:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff80000010318c	kernel.asm	/^ffff80000010318c:	73 0a                	jae    ffff800000103198 <writei+0x3c>$/;"	l
ffff80000010318e	kernel.asm	/^ffff80000010318e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103193	kernel.asm	/^ffff800000103193:	e9 28 01 00 00       	jmpq   ffff8000001032c0 <writei+0x164>$/;"	l
ffff800000103198	kernel.asm	/^ffff800000103198:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff80000010319b	kernel.asm	/^ffff80000010319b:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010319e	kernel.asm	/^ffff80000010319e:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001031a0	kernel.asm	/^ffff8000001031a0:	3d 00 18 01 00       	cmp    $0x11800,%eax$/;"	l
ffff8000001031a5	kernel.asm	/^ffff8000001031a5:	76 0a                	jbe    ffff8000001031b1 <writei+0x55>$/;"	l
ffff8000001031a7	kernel.asm	/^ffff8000001031a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001031ac	kernel.asm	/^ffff8000001031ac:	e9 0f 01 00 00       	jmpq   ffff8000001032c0 <writei+0x164>$/;"	l
ffff8000001031b1	kernel.asm	/^ffff8000001031b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001031b8	kernel.asm	/^ffff8000001031b8:	e9 bf 00 00 00       	jmpq   ffff80000010327c <writei+0x120>$/;"	l
ffff8000001031bd	kernel.asm	/^ffff8000001031bd:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001031c0	kernel.asm	/^ffff8000001031c0:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff8000001031c3	kernel.asm	/^ffff8000001031c3:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001031c5	kernel.asm	/^ffff8000001031c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001031c9	kernel.asm	/^ffff8000001031c9:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001031cb	kernel.asm	/^ffff8000001031cb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001031ce	kernel.asm	/^ffff8000001031ce:	48 b8 f6 2c 10 00 00 	movabs $0xffff800000102cf6,%rax$/;"	l
ffff8000001031d5	kernel.asm	/^ffff8000001031d5:	80 ff ff $/;"	l
ffff8000001031d8	kernel.asm	/^ffff8000001031d8:	ff d0                	callq  *%rax$/;"	l
ffff8000001031da	kernel.asm	/^ffff8000001031da:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001031dc	kernel.asm	/^ffff8000001031dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001031e0	kernel.asm	/^ffff8000001031e0:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001031e2	kernel.asm	/^ffff8000001031e2:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001031e4	kernel.asm	/^ffff8000001031e4:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001031e6	kernel.asm	/^ffff8000001031e6:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001031ed	kernel.asm	/^ffff8000001031ed:	80 ff ff $/;"	l
ffff8000001031f0	kernel.asm	/^ffff8000001031f0:	ff d0                	callq  *%rax$/;"	l
ffff8000001031f2	kernel.asm	/^ffff8000001031f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001031f6	kernel.asm	/^ffff8000001031f6:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001031f9	kernel.asm	/^ffff8000001031f9:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001031fe	kernel.asm	/^ffff8000001031fe:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000103203	kernel.asm	/^ffff800000103203:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000103205	kernel.asm	/^ffff800000103205:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103208	kernel.asm	/^ffff800000103208:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010320b	kernel.asm	/^ffff80000010320b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010320d	kernel.asm	/^ffff80000010320d:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff800000103210	kernel.asm	/^ffff800000103210:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000103213	kernel.asm	/^ffff800000103213:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103217	kernel.asm	/^ffff800000103217:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff80000010321e	kernel.asm	/^ffff80000010321e:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103221	kernel.asm	/^ffff800000103221:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000103226	kernel.asm	/^ffff800000103226:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010322a	kernel.asm	/^ffff80000010322a:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010322d	kernel.asm	/^ffff80000010322d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000103231	kernel.asm	/^ffff800000103231:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103234	kernel.asm	/^ffff800000103234:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000103237	kernel.asm	/^ffff800000103237:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010323e	kernel.asm	/^ffff80000010323e:	80 ff ff $/;"	l
ffff800000103241	kernel.asm	/^ffff800000103241:	ff d0                	callq  *%rax$/;"	l
ffff800000103243	kernel.asm	/^ffff800000103243:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103247	kernel.asm	/^ffff800000103247:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010324a	kernel.asm	/^ffff80000010324a:	48 b8 c5 51 10 00 00 	movabs $0xffff8000001051c5,%rax$/;"	l
ffff800000103251	kernel.asm	/^ffff800000103251:	80 ff ff $/;"	l
ffff800000103254	kernel.asm	/^ffff800000103254:	ff d0                	callq  *%rax$/;"	l
ffff800000103256	kernel.asm	/^ffff800000103256:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010325a	kernel.asm	/^ffff80000010325a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010325d	kernel.asm	/^ffff80000010325d:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103264	kernel.asm	/^ffff800000103264:	80 ff ff $/;"	l
ffff800000103267	kernel.asm	/^ffff800000103267:	ff d0                	callq  *%rax$/;"	l
ffff800000103269	kernel.asm	/^ffff800000103269:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010326c	kernel.asm	/^ffff80000010326c:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff80000010326f	kernel.asm	/^ffff80000010326f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103272	kernel.asm	/^ffff800000103272:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff800000103275	kernel.asm	/^ffff800000103275:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103278	kernel.asm	/^ffff800000103278:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff80000010327c	kernel.asm	/^ffff80000010327c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010327f	kernel.asm	/^ffff80000010327f:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff800000103282	kernel.asm	/^ffff800000103282:	0f 82 35 ff ff ff    	jb     ffff8000001031bd <writei+0x61>$/;"	l
ffff800000103288	kernel.asm	/^ffff800000103288:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)$/;"	l
ffff80000010328c	kernel.asm	/^ffff80000010328c:	74 2f                	je     ffff8000001032bd <writei+0x161>$/;"	l
ffff80000010328e	kernel.asm	/^ffff80000010328e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103292	kernel.asm	/^ffff800000103292:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000103298	kernel.asm	/^ffff800000103298:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff80000010329b	kernel.asm	/^ffff80000010329b:	73 20                	jae    ffff8000001032bd <writei+0x161>$/;"	l
ffff80000010329d	kernel.asm	/^ffff80000010329d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001032a1	kernel.asm	/^ffff8000001032a1:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff8000001032a4	kernel.asm	/^ffff8000001032a4:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff8000001032aa	kernel.asm	/^ffff8000001032aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001032ae	kernel.asm	/^ffff8000001032ae:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001032b1	kernel.asm	/^ffff8000001032b1:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff8000001032b8	kernel.asm	/^ffff8000001032b8:	80 ff ff $/;"	l
ffff8000001032bb	kernel.asm	/^ffff8000001032bb:	ff d0                	callq  *%rax$/;"	l
ffff8000001032bd	kernel.asm	/^ffff8000001032bd:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001032c0	kernel.asm	/^ffff8000001032c0:	c9                   	leaveq $/;"	l
ffff8000001032c1	kernel.asm	/^ffff8000001032c1:	c3                   	retq   $/;"	l
ffff8000001032c2	kernel.asm	/^ffff8000001032c2 <namecmp>:$/;"	l
ffff8000001032c2	kernel.asm	/^ffff8000001032c2:	55                   	push   %rbp$/;"	l
ffff8000001032c3	kernel.asm	/^ffff8000001032c3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001032c6	kernel.asm	/^ffff8000001032c6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001032ca	kernel.asm	/^ffff8000001032ca:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001032ce	kernel.asm	/^ffff8000001032ce:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001032d2	kernel.asm	/^ffff8000001032d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff8000001032d6	kernel.asm	/^ffff8000001032d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001032da	kernel.asm	/^ffff8000001032da:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff8000001032df	kernel.asm	/^ffff8000001032df:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001032e2	kernel.asm	/^ffff8000001032e2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001032e5	kernel.asm	/^ffff8000001032e5:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff8000001032ec	kernel.asm	/^ffff8000001032ec:	80 ff ff $/;"	l
ffff8000001032ef	kernel.asm	/^ffff8000001032ef:	ff d0                	callq  *%rax$/;"	l
ffff8000001032f1	kernel.asm	/^ffff8000001032f1:	c9                   	leaveq $/;"	l
ffff8000001032f2	kernel.asm	/^ffff8000001032f2:	c3                   	retq   $/;"	l
ffff8000001032f3	kernel.asm	/^ffff8000001032f3 <dirlookup>:$/;"	l
ffff8000001032f3	kernel.asm	/^ffff8000001032f3:	55                   	push   %rbp$/;"	l
ffff8000001032f4	kernel.asm	/^ffff8000001032f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001032f7	kernel.asm	/^ffff8000001032f7:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001032fb	kernel.asm	/^ffff8000001032fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001032ff	kernel.asm	/^ffff8000001032ff:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103303	kernel.asm	/^ffff800000103303:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff800000103307	kernel.asm	/^ffff800000103307:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010330b	kernel.asm	/^ffff80000010330b:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000103312	kernel.asm	/^ffff800000103312:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000103316	kernel.asm	/^ffff800000103316:	74 16                	je     ffff80000010332e <dirlookup+0x3b>$/;"	l
ffff800000103318	kernel.asm	/^ffff800000103318:	48 bf 0c cc 10 00 00 	movabs $0xffff80000010cc0c,%rdi$/;"	l
ffff80000010331f	kernel.asm	/^ffff80000010331f:	80 ff ff $/;"	l
ffff800000103322	kernel.asm	/^ffff800000103322:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103329	kernel.asm	/^ffff800000103329:	80 ff ff $/;"	l
ffff80000010332c	kernel.asm	/^ffff80000010332c:	ff d0                	callq  *%rax$/;"	l
ffff80000010332e	kernel.asm	/^ffff80000010332e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103335	kernel.asm	/^ffff800000103335:	e9 9f 00 00 00       	jmpq   ffff8000001033d9 <dirlookup+0xe6>$/;"	l
ffff80000010333a	kernel.asm	/^ffff80000010333a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010333d	kernel.asm	/^ffff80000010333d:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff800000103341	kernel.asm	/^ffff800000103341:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103345	kernel.asm	/^ffff800000103345:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff80000010334a	kernel.asm	/^ffff80000010334a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010334d	kernel.asm	/^ffff80000010334d:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000103354	kernel.asm	/^ffff800000103354:	80 ff ff $/;"	l
ffff800000103357	kernel.asm	/^ffff800000103357:	ff d0                	callq  *%rax$/;"	l
ffff800000103359	kernel.asm	/^ffff800000103359:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff80000010335c	kernel.asm	/^ffff80000010335c:	74 16                	je     ffff800000103374 <dirlookup+0x81>$/;"	l
ffff80000010335e	kernel.asm	/^ffff80000010335e:	48 bf 1e cc 10 00 00 	movabs $0xffff80000010cc1e,%rdi$/;"	l
ffff800000103365	kernel.asm	/^ffff800000103365:	80 ff ff $/;"	l
ffff800000103368	kernel.asm	/^ffff800000103368:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010336f	kernel.asm	/^ffff80000010336f:	80 ff ff $/;"	l
ffff800000103372	kernel.asm	/^ffff800000103372:	ff d0                	callq  *%rax$/;"	l
ffff800000103374	kernel.asm	/^ffff800000103374:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff800000103378	kernel.asm	/^ffff800000103378:	66 85 c0             	test   %ax,%ax$/;"	l
ffff80000010337b	kernel.asm	/^ffff80000010337b:	74 57                	je     ffff8000001033d4 <dirlookup+0xe1>$/;"	l
ffff80000010337d	kernel.asm	/^ffff80000010337d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000103381	kernel.asm	/^ffff800000103381:	48 8d 50 02          	lea    0x2(%rax),%rdx$/;"	l
ffff800000103385	kernel.asm	/^ffff800000103385:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000103389	kernel.asm	/^ffff800000103389:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010338c	kernel.asm	/^ffff80000010338c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010338f	kernel.asm	/^ffff80000010338f:	48 b8 c2 32 10 00 00 	movabs $0xffff8000001032c2,%rax$/;"	l
ffff800000103396	kernel.asm	/^ffff800000103396:	80 ff ff $/;"	l
ffff800000103399	kernel.asm	/^ffff800000103399:	ff d0                	callq  *%rax$/;"	l
ffff80000010339b	kernel.asm	/^ffff80000010339b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010339d	kernel.asm	/^ffff80000010339d:	75 36                	jne    ffff8000001033d5 <dirlookup+0xe2>$/;"	l
ffff80000010339f	kernel.asm	/^ffff80000010339f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff8000001033a4	kernel.asm	/^ffff8000001033a4:	74 09                	je     ffff8000001033af <dirlookup+0xbc>$/;"	l
ffff8000001033a6	kernel.asm	/^ffff8000001033a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001033aa	kernel.asm	/^ffff8000001033aa:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001033ad	kernel.asm	/^ffff8000001033ad:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001033af	kernel.asm	/^ffff8000001033af:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001033b3	kernel.asm	/^ffff8000001033b3:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff8000001033b6	kernel.asm	/^ffff8000001033b6:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001033b9	kernel.asm	/^ffff8000001033b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001033bd	kernel.asm	/^ffff8000001033bd:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001033bf	kernel.asm	/^ffff8000001033bf:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff8000001033c2	kernel.asm	/^ffff8000001033c2:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001033c4	kernel.asm	/^ffff8000001033c4:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001033c6	kernel.asm	/^ffff8000001033c6:	48 b8 5d 28 10 00 00 	movabs $0xffff80000010285d,%rax$/;"	l
ffff8000001033cd	kernel.asm	/^ffff8000001033cd:	80 ff ff $/;"	l
ffff8000001033d0	kernel.asm	/^ffff8000001033d0:	ff d0                	callq  *%rax$/;"	l
ffff8000001033d2	kernel.asm	/^ffff8000001033d2:	eb 1d                	jmp    ffff8000001033f1 <dirlookup+0xfe>$/;"	l
ffff8000001033d4	kernel.asm	/^ffff8000001033d4:	90                   	nop$/;"	l
ffff8000001033d5	kernel.asm	/^ffff8000001033d5:	83 45 fc 10          	addl   $0x10,-0x4(%rbp)$/;"	l
ffff8000001033d9	kernel.asm	/^ffff8000001033d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001033dd	kernel.asm	/^ffff8000001033dd:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff8000001033e3	kernel.asm	/^ffff8000001033e3:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001033e6	kernel.asm	/^ffff8000001033e6:	0f 87 4e ff ff ff    	ja     ffff80000010333a <dirlookup+0x47>$/;"	l
ffff8000001033ec	kernel.asm	/^ffff8000001033ec:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001033f1	kernel.asm	/^ffff8000001033f1:	c9                   	leaveq $/;"	l
ffff8000001033f2	kernel.asm	/^ffff8000001033f2:	c3                   	retq   $/;"	l
ffff8000001033f3	kernel.asm	/^ffff8000001033f3 <dirlink>:$/;"	l
ffff8000001033f3	kernel.asm	/^ffff8000001033f3:	55                   	push   %rbp$/;"	l
ffff8000001033f4	kernel.asm	/^ffff8000001033f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001033f7	kernel.asm	/^ffff8000001033f7:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001033fb	kernel.asm	/^ffff8000001033fb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001033ff	kernel.asm	/^ffff8000001033ff:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103403	kernel.asm	/^ffff800000103403:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103406	kernel.asm	/^ffff800000103406:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx$/;"	l
ffff80000010340a	kernel.asm	/^ffff80000010340a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010340e	kernel.asm	/^ffff80000010340e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000103413	kernel.asm	/^ffff800000103413:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103416	kernel.asm	/^ffff800000103416:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103419	kernel.asm	/^ffff800000103419:	48 b8 f3 32 10 00 00 	movabs $0xffff8000001032f3,%rax$/;"	l
ffff800000103420	kernel.asm	/^ffff800000103420:	80 ff ff $/;"	l
ffff800000103423	kernel.asm	/^ffff800000103423:	ff d0                	callq  *%rax$/;"	l
ffff800000103425	kernel.asm	/^ffff800000103425:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000103429	kernel.asm	/^ffff800000103429:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010342e	kernel.asm	/^ffff80000010342e:	74 1d                	je     ffff80000010344d <dirlink+0x5a>$/;"	l
ffff800000103430	kernel.asm	/^ffff800000103430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103434	kernel.asm	/^ffff800000103434:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103437	kernel.asm	/^ffff800000103437:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff80000010343e	kernel.asm	/^ffff80000010343e:	80 ff ff $/;"	l
ffff800000103441	kernel.asm	/^ffff800000103441:	ff d0                	callq  *%rax$/;"	l
ffff800000103443	kernel.asm	/^ffff800000103443:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103448	kernel.asm	/^ffff800000103448:	e9 d2 00 00 00       	jmpq   ffff80000010351f <dirlink+0x12c>$/;"	l
ffff80000010344d	kernel.asm	/^ffff80000010344d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103454	kernel.asm	/^ffff800000103454:	eb 4c                	jmp    ffff8000001034a2 <dirlink+0xaf>$/;"	l
ffff800000103456	kernel.asm	/^ffff800000103456:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103459	kernel.asm	/^ffff800000103459:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010345d	kernel.asm	/^ffff80000010345d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103461	kernel.asm	/^ffff800000103461:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000103466	kernel.asm	/^ffff800000103466:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103469	kernel.asm	/^ffff800000103469:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000103470	kernel.asm	/^ffff800000103470:	80 ff ff $/;"	l
ffff800000103473	kernel.asm	/^ffff800000103473:	ff d0                	callq  *%rax$/;"	l
ffff800000103475	kernel.asm	/^ffff800000103475:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000103478	kernel.asm	/^ffff800000103478:	74 16                	je     ffff800000103490 <dirlink+0x9d>$/;"	l
ffff80000010347a	kernel.asm	/^ffff80000010347a:	48 bf 2d cc 10 00 00 	movabs $0xffff80000010cc2d,%rdi$/;"	l
ffff800000103481	kernel.asm	/^ffff800000103481:	80 ff ff $/;"	l
ffff800000103484	kernel.asm	/^ffff800000103484:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010348b	kernel.asm	/^ffff80000010348b:	80 ff ff $/;"	l
ffff80000010348e	kernel.asm	/^ffff80000010348e:	ff d0                	callq  *%rax$/;"	l
ffff800000103490	kernel.asm	/^ffff800000103490:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff800000103494	kernel.asm	/^ffff800000103494:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000103497	kernel.asm	/^ffff800000103497:	74 1c                	je     ffff8000001034b5 <dirlink+0xc2>$/;"	l
ffff800000103499	kernel.asm	/^ffff800000103499:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010349c	kernel.asm	/^ffff80000010349c:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff80000010349f	kernel.asm	/^ffff80000010349f:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001034a2	kernel.asm	/^ffff8000001034a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001034a6	kernel.asm	/^ffff8000001034a6:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001034ac	kernel.asm	/^ffff8000001034ac:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001034af	kernel.asm	/^ffff8000001034af:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001034b1	kernel.asm	/^ffff8000001034b1:	77 a3                	ja     ffff800000103456 <dirlink+0x63>$/;"	l
ffff8000001034b3	kernel.asm	/^ffff8000001034b3:	eb 01                	jmp    ffff8000001034b6 <dirlink+0xc3>$/;"	l
ffff8000001034b5	kernel.asm	/^ffff8000001034b5:	90                   	nop$/;"	l
ffff8000001034b6	kernel.asm	/^ffff8000001034b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001034ba	kernel.asm	/^ffff8000001034ba:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff8000001034be	kernel.asm	/^ffff8000001034be:	48 8d 4a 02          	lea    0x2(%rdx),%rcx$/;"	l
ffff8000001034c2	kernel.asm	/^ffff8000001034c2:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff8000001034c7	kernel.asm	/^ffff8000001034c7:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001034ca	kernel.asm	/^ffff8000001034ca:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff8000001034cd	kernel.asm	/^ffff8000001034cd:	48 b8 d5 78 10 00 00 	movabs $0xffff8000001078d5,%rax$/;"	l
ffff8000001034d4	kernel.asm	/^ffff8000001034d4:	80 ff ff $/;"	l
ffff8000001034d7	kernel.asm	/^ffff8000001034d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001034d9	kernel.asm	/^ffff8000001034d9:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001034dc	kernel.asm	/^ffff8000001034dc:	66 89 45 e0          	mov    %ax,-0x20(%rbp)$/;"	l
ffff8000001034e0	kernel.asm	/^ffff8000001034e0:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001034e3	kernel.asm	/^ffff8000001034e3:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff8000001034e7	kernel.asm	/^ffff8000001034e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001034eb	kernel.asm	/^ffff8000001034eb:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff8000001034f0	kernel.asm	/^ffff8000001034f0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001034f3	kernel.asm	/^ffff8000001034f3:	48 b8 5c 31 10 00 00 	movabs $0xffff80000010315c,%rax$/;"	l
ffff8000001034fa	kernel.asm	/^ffff8000001034fa:	80 ff ff $/;"	l
ffff8000001034fd	kernel.asm	/^ffff8000001034fd:	ff d0                	callq  *%rax$/;"	l
ffff8000001034ff	kernel.asm	/^ffff8000001034ff:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000103502	kernel.asm	/^ffff800000103502:	74 16                	je     ffff80000010351a <dirlink+0x127>$/;"	l
ffff800000103504	kernel.asm	/^ffff800000103504:	48 bf 3a cc 10 00 00 	movabs $0xffff80000010cc3a,%rdi$/;"	l
ffff80000010350b	kernel.asm	/^ffff80000010350b:	80 ff ff $/;"	l
ffff80000010350e	kernel.asm	/^ffff80000010350e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103515	kernel.asm	/^ffff800000103515:	80 ff ff $/;"	l
ffff800000103518	kernel.asm	/^ffff800000103518:	ff d0                	callq  *%rax$/;"	l
ffff80000010351a	kernel.asm	/^ffff80000010351a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010351f	kernel.asm	/^ffff80000010351f:	c9                   	leaveq $/;"	l
ffff800000103520	kernel.asm	/^ffff800000103520:	c3                   	retq   $/;"	l
ffff800000103521	kernel.asm	/^ffff800000103521 <skipelem>:$/;"	l
ffff800000103521	kernel.asm	/^ffff800000103521:	55                   	push   %rbp$/;"	l
ffff800000103522	kernel.asm	/^ffff800000103522:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103525	kernel.asm	/^ffff800000103525:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103529	kernel.asm	/^ffff800000103529:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010352d	kernel.asm	/^ffff80000010352d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000103531	kernel.asm	/^ffff800000103531:	eb 05                	jmp    ffff800000103538 <skipelem+0x17>$/;"	l
ffff800000103533	kernel.asm	/^ffff800000103533:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff800000103538	kernel.asm	/^ffff800000103538:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010353c	kernel.asm	/^ffff80000010353c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010353f	kernel.asm	/^ffff80000010353f:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103541	kernel.asm	/^ffff800000103541:	74 f0                	je     ffff800000103533 <skipelem+0x12>$/;"	l
ffff800000103543	kernel.asm	/^ffff800000103543:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103547	kernel.asm	/^ffff800000103547:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010354a	kernel.asm	/^ffff80000010354a:	84 c0                	test   %al,%al$/;"	l
ffff80000010354c	kernel.asm	/^ffff80000010354c:	75 0a                	jne    ffff800000103558 <skipelem+0x37>$/;"	l
ffff80000010354e	kernel.asm	/^ffff80000010354e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103553	kernel.asm	/^ffff800000103553:	e9 a0 00 00 00       	jmpq   ffff8000001035f8 <skipelem+0xd7>$/;"	l
ffff800000103558	kernel.asm	/^ffff800000103558:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010355c	kernel.asm	/^ffff80000010355c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103560	kernel.asm	/^ffff800000103560:	eb 05                	jmp    ffff800000103567 <skipelem+0x46>$/;"	l
ffff800000103562	kernel.asm	/^ffff800000103562:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff800000103567	kernel.asm	/^ffff800000103567:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010356b	kernel.asm	/^ffff80000010356b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010356e	kernel.asm	/^ffff80000010356e:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103570	kernel.asm	/^ffff800000103570:	74 0b                	je     ffff80000010357d <skipelem+0x5c>$/;"	l
ffff800000103572	kernel.asm	/^ffff800000103572:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103576	kernel.asm	/^ffff800000103576:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103579	kernel.asm	/^ffff800000103579:	84 c0                	test   %al,%al$/;"	l
ffff80000010357b	kernel.asm	/^ffff80000010357b:	75 e5                	jne    ffff800000103562 <skipelem+0x41>$/;"	l
ffff80000010357d	kernel.asm	/^ffff80000010357d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000103581	kernel.asm	/^ffff800000103581:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103585	kernel.asm	/^ffff800000103585:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000103588	kernel.asm	/^ffff800000103588:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010358b	kernel.asm	/^ffff80000010358b:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff80000010358e	kernel.asm	/^ffff80000010358e:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)$/;"	l
ffff800000103592	kernel.asm	/^ffff800000103592:	7e 21                	jle    ffff8000001035b5 <skipelem+0x94>$/;"	l
ffff800000103594	kernel.asm	/^ffff800000103594:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000103598	kernel.asm	/^ffff800000103598:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010359c	kernel.asm	/^ffff80000010359c:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff8000001035a1	kernel.asm	/^ffff8000001035a1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001035a4	kernel.asm	/^ffff8000001035a4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035a7	kernel.asm	/^ffff8000001035a7:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff8000001035ae	kernel.asm	/^ffff8000001035ae:	80 ff ff $/;"	l
ffff8000001035b1	kernel.asm	/^ffff8000001035b1:	ff d0                	callq  *%rax$/;"	l
ffff8000001035b3	kernel.asm	/^ffff8000001035b3:	eb 34                	jmp    ffff8000001035e9 <skipelem+0xc8>$/;"	l
ffff8000001035b5	kernel.asm	/^ffff8000001035b5:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001035b8	kernel.asm	/^ffff8000001035b8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff8000001035bc	kernel.asm	/^ffff8000001035bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001035c0	kernel.asm	/^ffff8000001035c0:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001035c3	kernel.asm	/^ffff8000001035c3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035c6	kernel.asm	/^ffff8000001035c6:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff8000001035cd	kernel.asm	/^ffff8000001035cd:	80 ff ff $/;"	l
ffff8000001035d0	kernel.asm	/^ffff8000001035d0:	ff d0                	callq  *%rax$/;"	l
ffff8000001035d2	kernel.asm	/^ffff8000001035d2:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001035d5	kernel.asm	/^ffff8000001035d5:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001035d8	kernel.asm	/^ffff8000001035d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001035dc	kernel.asm	/^ffff8000001035dc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001035df	kernel.asm	/^ffff8000001035df:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff8000001035e2	kernel.asm	/^ffff8000001035e2:	eb 05                	jmp    ffff8000001035e9 <skipelem+0xc8>$/;"	l
ffff8000001035e4	kernel.asm	/^ffff8000001035e4:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff8000001035e9	kernel.asm	/^ffff8000001035e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001035ed	kernel.asm	/^ffff8000001035ed:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001035f0	kernel.asm	/^ffff8000001035f0:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff8000001035f2	kernel.asm	/^ffff8000001035f2:	74 f0                	je     ffff8000001035e4 <skipelem+0xc3>$/;"	l
ffff8000001035f4	kernel.asm	/^ffff8000001035f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001035f8	kernel.asm	/^ffff8000001035f8:	c9                   	leaveq $/;"	l
ffff8000001035f9	kernel.asm	/^ffff8000001035f9:	c3                   	retq   $/;"	l
ffff8000001035fa	kernel.asm	/^ffff8000001035fa <namex>:$/;"	l
ffff8000001035fa	kernel.asm	/^ffff8000001035fa:	55                   	push   %rbp$/;"	l
ffff8000001035fb	kernel.asm	/^ffff8000001035fb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001035fe	kernel.asm	/^ffff8000001035fe:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000103602	kernel.asm	/^ffff800000103602:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103606	kernel.asm	/^ffff800000103606:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff800000103609	kernel.asm	/^ffff800000103609:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff80000010360d	kernel.asm	/^ffff80000010360d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103611	kernel.asm	/^ffff800000103611:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103614	kernel.asm	/^ffff800000103614:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103616	kernel.asm	/^ffff800000103616:	75 1f                	jne    ffff800000103637 <namex+0x3d>$/;"	l
ffff800000103618	kernel.asm	/^ffff800000103618:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010361d	kernel.asm	/^ffff80000010361d:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103622	kernel.asm	/^ffff800000103622:	48 b8 5d 28 10 00 00 	movabs $0xffff80000010285d,%rax$/;"	l
ffff800000103629	kernel.asm	/^ffff800000103629:	80 ff ff $/;"	l
ffff80000010362c	kernel.asm	/^ffff80000010362c:	ff d0                	callq  *%rax$/;"	l
ffff80000010362e	kernel.asm	/^ffff80000010362e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103632	kernel.asm	/^ffff800000103632:	e9 f7 00 00 00       	jmpq   ffff80000010372e <namex+0x134>$/;"	l
ffff800000103637	kernel.asm	/^ffff800000103637:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010363e	kernel.asm	/^ffff80000010363e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000103642	kernel.asm	/^ffff800000103642:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000103649	kernel.asm	/^ffff800000103649:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010364c	kernel.asm	/^ffff80000010364c:	48 b8 8e 29 10 00 00 	movabs $0xffff80000010298e,%rax$/;"	l
ffff800000103653	kernel.asm	/^ffff800000103653:	80 ff ff $/;"	l
ffff800000103656	kernel.asm	/^ffff800000103656:	ff d0                	callq  *%rax$/;"	l
ffff800000103658	kernel.asm	/^ffff800000103658:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010365c	kernel.asm	/^ffff80000010365c:	e9 cd 00 00 00       	jmpq   ffff80000010372e <namex+0x134>$/;"	l
ffff800000103661	kernel.asm	/^ffff800000103661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103665	kernel.asm	/^ffff800000103665:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103668	kernel.asm	/^ffff800000103668:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff80000010366f	kernel.asm	/^ffff80000010366f:	80 ff ff $/;"	l
ffff800000103672	kernel.asm	/^ffff800000103672:	ff d0                	callq  *%rax$/;"	l
ffff800000103674	kernel.asm	/^ffff800000103674:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103678	kernel.asm	/^ffff800000103678:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010367f	kernel.asm	/^ffff80000010367f:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000103683	kernel.asm	/^ffff800000103683:	74 1d                	je     ffff8000001036a2 <namex+0xa8>$/;"	l
ffff800000103685	kernel.asm	/^ffff800000103685:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103689	kernel.asm	/^ffff800000103689:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010368c	kernel.asm	/^ffff80000010368c:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000103693	kernel.asm	/^ffff800000103693:	80 ff ff $/;"	l
ffff800000103696	kernel.asm	/^ffff800000103696:	ff d0                	callq  *%rax$/;"	l
ffff800000103698	kernel.asm	/^ffff800000103698:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010369d	kernel.asm	/^ffff80000010369d:	e9 d9 00 00 00       	jmpq   ffff80000010377b <namex+0x181>$/;"	l
ffff8000001036a2	kernel.asm	/^ffff8000001036a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff8000001036a6	kernel.asm	/^ffff8000001036a6:	74 27                	je     ffff8000001036cf <namex+0xd5>$/;"	l
ffff8000001036a8	kernel.asm	/^ffff8000001036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001036ac	kernel.asm	/^ffff8000001036ac:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001036af	kernel.asm	/^ffff8000001036af:	84 c0                	test   %al,%al$/;"	l
ffff8000001036b1	kernel.asm	/^ffff8000001036b1:	75 1c                	jne    ffff8000001036cf <namex+0xd5>$/;"	l
ffff8000001036b3	kernel.asm	/^ffff8000001036b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036b7	kernel.asm	/^ffff8000001036b7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001036ba	kernel.asm	/^ffff8000001036ba:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff8000001036c1	kernel.asm	/^ffff8000001036c1:	80 ff ff $/;"	l
ffff8000001036c4	kernel.asm	/^ffff8000001036c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001036c6	kernel.asm	/^ffff8000001036c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036ca	kernel.asm	/^ffff8000001036ca:	e9 ac 00 00 00       	jmpq   ffff80000010377b <namex+0x181>$/;"	l
ffff8000001036cf	kernel.asm	/^ffff8000001036cf:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
ffff8000001036d3	kernel.asm	/^ffff8000001036d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036d7	kernel.asm	/^ffff8000001036d7:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001036dc	kernel.asm	/^ffff8000001036dc:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001036df	kernel.asm	/^ffff8000001036df:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001036e2	kernel.asm	/^ffff8000001036e2:	48 b8 f3 32 10 00 00 	movabs $0xffff8000001032f3,%rax$/;"	l
ffff8000001036e9	kernel.asm	/^ffff8000001036e9:	80 ff ff $/;"	l
ffff8000001036ec	kernel.asm	/^ffff8000001036ec:	ff d0                	callq  *%rax$/;"	l
ffff8000001036ee	kernel.asm	/^ffff8000001036ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001036f2	kernel.asm	/^ffff8000001036f2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001036f7	kernel.asm	/^ffff8000001036f7:	75 1a                	jne    ffff800000103713 <namex+0x119>$/;"	l
ffff8000001036f9	kernel.asm	/^ffff8000001036f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001036fd	kernel.asm	/^ffff8000001036fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103700	kernel.asm	/^ffff800000103700:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000103707	kernel.asm	/^ffff800000103707:	80 ff ff $/;"	l
ffff80000010370a	kernel.asm	/^ffff80000010370a:	ff d0                	callq  *%rax$/;"	l
ffff80000010370c	kernel.asm	/^ffff80000010370c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103711	kernel.asm	/^ffff800000103711:	eb 68                	jmp    ffff80000010377b <namex+0x181>$/;"	l
ffff800000103713	kernel.asm	/^ffff800000103713:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103717	kernel.asm	/^ffff800000103717:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010371a	kernel.asm	/^ffff80000010371a:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000103721	kernel.asm	/^ffff800000103721:	80 ff ff $/;"	l
ffff800000103724	kernel.asm	/^ffff800000103724:	ff d0                	callq  *%rax$/;"	l
ffff800000103726	kernel.asm	/^ffff800000103726:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010372a	kernel.asm	/^ffff80000010372a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010372e	kernel.asm	/^ffff80000010372e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000103732	kernel.asm	/^ffff800000103732:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103736	kernel.asm	/^ffff800000103736:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103739	kernel.asm	/^ffff800000103739:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010373c	kernel.asm	/^ffff80000010373c:	48 b8 21 35 10 00 00 	movabs $0xffff800000103521,%rax$/;"	l
ffff800000103743	kernel.asm	/^ffff800000103743:	80 ff ff $/;"	l
ffff800000103746	kernel.asm	/^ffff800000103746:	ff d0                	callq  *%rax$/;"	l
ffff800000103748	kernel.asm	/^ffff800000103748:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010374c	kernel.asm	/^ffff80000010374c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000103751	kernel.asm	/^ffff800000103751:	0f 85 0a ff ff ff    	jne    ffff800000103661 <namex+0x67>$/;"	l
ffff800000103757	kernel.asm	/^ffff800000103757:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff80000010375b	kernel.asm	/^ffff80000010375b:	74 1a                	je     ffff800000103777 <namex+0x17d>$/;"	l
ffff80000010375d	kernel.asm	/^ffff80000010375d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103761	kernel.asm	/^ffff800000103761:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103764	kernel.asm	/^ffff800000103764:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff80000010376b	kernel.asm	/^ffff80000010376b:	80 ff ff $/;"	l
ffff80000010376e	kernel.asm	/^ffff80000010376e:	ff d0                	callq  *%rax$/;"	l
ffff800000103770	kernel.asm	/^ffff800000103770:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103775	kernel.asm	/^ffff800000103775:	eb 04                	jmp    ffff80000010377b <namex+0x181>$/;"	l
ffff800000103777	kernel.asm	/^ffff800000103777:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010377b	kernel.asm	/^ffff80000010377b:	c9                   	leaveq $/;"	l
ffff80000010377c	kernel.asm	/^ffff80000010377c:	c3                   	retq   $/;"	l
ffff80000010377d	kernel.asm	/^ffff80000010377d <namei>:$/;"	l
ffff80000010377d	kernel.asm	/^ffff80000010377d:	55                   	push   %rbp$/;"	l
ffff80000010377e	kernel.asm	/^ffff80000010377e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103781	kernel.asm	/^ffff800000103781:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103785	kernel.asm	/^ffff800000103785:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103789	kernel.asm	/^ffff800000103789:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff80000010378d	kernel.asm	/^ffff80000010378d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103791	kernel.asm	/^ffff800000103791:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103796	kernel.asm	/^ffff800000103796:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103799	kernel.asm	/^ffff800000103799:	48 b8 fa 35 10 00 00 	movabs $0xffff8000001035fa,%rax$/;"	l
ffff8000001037a0	kernel.asm	/^ffff8000001037a0:	80 ff ff $/;"	l
ffff8000001037a3	kernel.asm	/^ffff8000001037a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001037a5	kernel.asm	/^ffff8000001037a5:	c9                   	leaveq $/;"	l
ffff8000001037a6	kernel.asm	/^ffff8000001037a6:	c3                   	retq   $/;"	l
ffff8000001037a7	kernel.asm	/^ffff8000001037a7 <nameiparent>:$/;"	l
ffff8000001037a7	kernel.asm	/^ffff8000001037a7:	55                   	push   %rbp$/;"	l
ffff8000001037a8	kernel.asm	/^ffff8000001037a8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001037ab	kernel.asm	/^ffff8000001037ab:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001037af	kernel.asm	/^ffff8000001037af:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001037b3	kernel.asm	/^ffff8000001037b3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001037b7	kernel.asm	/^ffff8000001037b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001037bb	kernel.asm	/^ffff8000001037bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001037bf	kernel.asm	/^ffff8000001037bf:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001037c4	kernel.asm	/^ffff8000001037c4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001037c7	kernel.asm	/^ffff8000001037c7:	48 b8 fa 35 10 00 00 	movabs $0xffff8000001035fa,%rax$/;"	l
ffff8000001037ce	kernel.asm	/^ffff8000001037ce:	80 ff ff $/;"	l
ffff8000001037d1	kernel.asm	/^ffff8000001037d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001037d3	kernel.asm	/^ffff8000001037d3:	c9                   	leaveq $/;"	l
ffff8000001037d4	kernel.asm	/^ffff8000001037d4:	c3                   	retq   $/;"	l
ffff8000001037d5	kernel.asm	/^ffff8000001037d5 <inb>:$/;"	l
ffff8000001037d5	kernel.asm	/^ffff8000001037d5:	55                   	push   %rbp$/;"	l
ffff8000001037d6	kernel.asm	/^ffff8000001037d6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001037d9	kernel.asm	/^ffff8000001037d9:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001037dd	kernel.asm	/^ffff8000001037dd:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001037df	kernel.asm	/^ffff8000001037df:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001037e3	kernel.asm	/^ffff8000001037e3:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001037e7	kernel.asm	/^ffff8000001037e7:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001037e9	kernel.asm	/^ffff8000001037e9:	ec                   	in     (%dx),%al$/;"	l
ffff8000001037ea	kernel.asm	/^ffff8000001037ea:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001037ed	kernel.asm	/^ffff8000001037ed:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001037f1	kernel.asm	/^ffff8000001037f1:	c9                   	leaveq $/;"	l
ffff8000001037f2	kernel.asm	/^ffff8000001037f2:	c3                   	retq   $/;"	l
ffff8000001037f3	kernel.asm	/^ffff8000001037f3 <insl>:$/;"	l
ffff8000001037f3	kernel.asm	/^ffff8000001037f3:	55                   	push   %rbp$/;"	l
ffff8000001037f4	kernel.asm	/^ffff8000001037f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001037f7	kernel.asm	/^ffff8000001037f7:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001037fb	kernel.asm	/^ffff8000001037fb:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff8000001037fe	kernel.asm	/^ffff8000001037fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103802	kernel.asm	/^ffff800000103802:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff800000103805	kernel.asm	/^ffff800000103805:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103808	kernel.asm	/^ffff800000103808:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff80000010380c	kernel.asm	/^ffff80000010380c:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010380f	kernel.asm	/^ffff80000010380f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103812	kernel.asm	/^ffff800000103812:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff800000103815	kernel.asm	/^ffff800000103815:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000103817	kernel.asm	/^ffff800000103817:	fc                   	cld    $/;"	l
ffff800000103818	kernel.asm	/^ffff800000103818:	f3 6d                	rep insl (%dx),%es:(%rdi)$/;"	l
ffff80000010381a	kernel.asm	/^ffff80000010381a:	89 c8                	mov    %ecx,%eax$/;"	l
ffff80000010381c	kernel.asm	/^ffff80000010381c:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010381f	kernel.asm	/^ffff80000010381f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103823	kernel.asm	/^ffff800000103823:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103826	kernel.asm	/^ffff800000103826:	90                   	nop$/;"	l
ffff800000103827	kernel.asm	/^ffff800000103827:	c9                   	leaveq $/;"	l
ffff800000103828	kernel.asm	/^ffff800000103828:	c3                   	retq   $/;"	l
ffff800000103829	kernel.asm	/^ffff800000103829 <outb>:$/;"	l
ffff800000103829	kernel.asm	/^ffff800000103829:	55                   	push   %rbp$/;"	l
ffff80000010382a	kernel.asm	/^ffff80000010382a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010382d	kernel.asm	/^ffff80000010382d:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103831	kernel.asm	/^ffff800000103831:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000103833	kernel.asm	/^ffff800000103833:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000103835	kernel.asm	/^ffff800000103835:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000103839	kernel.asm	/^ffff800000103839:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010383c	kernel.asm	/^ffff80000010383c:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000103840	kernel.asm	/^ffff800000103840:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000103844	kernel.asm	/^ffff800000103844:	ee                   	out    %al,(%dx)$/;"	l
ffff800000103845	kernel.asm	/^ffff800000103845:	90                   	nop$/;"	l
ffff800000103846	kernel.asm	/^ffff800000103846:	c9                   	leaveq $/;"	l
ffff800000103847	kernel.asm	/^ffff800000103847:	c3                   	retq   $/;"	l
ffff800000103848	kernel.asm	/^ffff800000103848 <outsl>:$/;"	l
ffff800000103848	kernel.asm	/^ffff800000103848:	55                   	push   %rbp$/;"	l
ffff800000103849	kernel.asm	/^ffff800000103849:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010384c	kernel.asm	/^ffff80000010384c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103850	kernel.asm	/^ffff800000103850:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103853	kernel.asm	/^ffff800000103853:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103857	kernel.asm	/^ffff800000103857:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff80000010385a	kernel.asm	/^ffff80000010385a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010385d	kernel.asm	/^ffff80000010385d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000103861	kernel.asm	/^ffff800000103861:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103864	kernel.asm	/^ffff800000103864:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103867	kernel.asm	/^ffff800000103867:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000103869	kernel.asm	/^ffff800000103869:	fc                   	cld    $/;"	l
ffff80000010386a	kernel.asm	/^ffff80000010386a:	f3 6f                	rep outsl %ds:(%rsi),(%dx)$/;"	l
ffff80000010386c	kernel.asm	/^ffff80000010386c:	89 c8                	mov    %ecx,%eax$/;"	l
ffff80000010386e	kernel.asm	/^ffff80000010386e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103872	kernel.asm	/^ffff800000103872:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103875	kernel.asm	/^ffff800000103875:	90                   	nop$/;"	l
ffff800000103876	kernel.asm	/^ffff800000103876:	c9                   	leaveq $/;"	l
ffff800000103877	kernel.asm	/^ffff800000103877:	c3                   	retq   $/;"	l
ffff800000103878	kernel.asm	/^ffff800000103878 <idewait>:$/;"	l
ffff800000103878	kernel.asm	/^ffff800000103878:	55                   	push   %rbp$/;"	l
ffff800000103879	kernel.asm	/^ffff800000103879:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010387c	kernel.asm	/^ffff80000010387c:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000103880	kernel.asm	/^ffff800000103880:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000103883	kernel.asm	/^ffff800000103883:	90                   	nop$/;"	l
ffff800000103884	kernel.asm	/^ffff800000103884:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103889	kernel.asm	/^ffff800000103889:	48 b8 d5 37 10 00 00 	movabs $0xffff8000001037d5,%rax$/;"	l
ffff800000103890	kernel.asm	/^ffff800000103890:	80 ff ff $/;"	l
ffff800000103893	kernel.asm	/^ffff800000103893:	ff d0                	callq  *%rax$/;"	l
ffff800000103895	kernel.asm	/^ffff800000103895:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103898	kernel.asm	/^ffff800000103898:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010389b	kernel.asm	/^ffff80000010389b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010389e	kernel.asm	/^ffff80000010389e:	25 c0 00 00 00       	and    $0xc0,%eax$/;"	l
ffff8000001038a3	kernel.asm	/^ffff8000001038a3:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff8000001038a6	kernel.asm	/^ffff8000001038a6:	75 dc                	jne    ffff800000103884 <idewait+0xc>$/;"	l
ffff8000001038a8	kernel.asm	/^ffff8000001038a8:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001038ac	kernel.asm	/^ffff8000001038ac:	74 11                	je     ffff8000001038bf <idewait+0x47>$/;"	l
ffff8000001038ae	kernel.asm	/^ffff8000001038ae:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001038b1	kernel.asm	/^ffff8000001038b1:	83 e0 21             	and    $0x21,%eax$/;"	l
ffff8000001038b4	kernel.asm	/^ffff8000001038b4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001038b6	kernel.asm	/^ffff8000001038b6:	74 07                	je     ffff8000001038bf <idewait+0x47>$/;"	l
ffff8000001038b8	kernel.asm	/^ffff8000001038b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001038bd	kernel.asm	/^ffff8000001038bd:	eb 05                	jmp    ffff8000001038c4 <idewait+0x4c>$/;"	l
ffff8000001038bf	kernel.asm	/^ffff8000001038bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001038c4	kernel.asm	/^ffff8000001038c4:	c9                   	leaveq $/;"	l
ffff8000001038c5	kernel.asm	/^ffff8000001038c5:	c3                   	retq   $/;"	l
ffff8000001038c6	kernel.asm	/^ffff8000001038c6 <ideinit>:$/;"	l
ffff8000001038c6	kernel.asm	/^ffff8000001038c6:	55                   	push   %rbp$/;"	l
ffff8000001038c7	kernel.asm	/^ffff8000001038c7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001038ca	kernel.asm	/^ffff8000001038ca:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001038ce	kernel.asm	/^ffff8000001038ce:	48 be 42 cc 10 00 00 	movabs $0xffff80000010cc42,%rsi$/;"	l
ffff8000001038d5	kernel.asm	/^ffff8000001038d5:	80 ff ff $/;"	l
ffff8000001038d8	kernel.asm	/^ffff8000001038d8:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff8000001038df	kernel.asm	/^ffff8000001038df:	80 ff ff $/;"	l
ffff8000001038e2	kernel.asm	/^ffff8000001038e2:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff8000001038e9	kernel.asm	/^ffff8000001038e9:	80 ff ff $/;"	l
ffff8000001038ec	kernel.asm	/^ffff8000001038ec:	ff d0                	callq  *%rax$/;"	l
ffff8000001038ee	kernel.asm	/^ffff8000001038ee:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff8000001038f5	kernel.asm	/^ffff8000001038f5:	80 ff ff $/;"	l
ffff8000001038f8	kernel.asm	/^ffff8000001038f8:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001038fa	kernel.asm	/^ffff8000001038fa:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001038fd	kernel.asm	/^ffff8000001038fd:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001038ff	kernel.asm	/^ffff8000001038ff:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff800000103904	kernel.asm	/^ffff800000103904:	48 b8 28 3f 10 00 00 	movabs $0xffff800000103f28,%rax$/;"	l
ffff80000010390b	kernel.asm	/^ffff80000010390b:	80 ff ff $/;"	l
ffff80000010390e	kernel.asm	/^ffff80000010390e:	ff d0                	callq  *%rax$/;"	l
ffff800000103910	kernel.asm	/^ffff800000103910:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103915	kernel.asm	/^ffff800000103915:	48 b8 78 38 10 00 00 	movabs $0xffff800000103878,%rax$/;"	l
ffff80000010391c	kernel.asm	/^ffff80000010391c:	80 ff ff $/;"	l
ffff80000010391f	kernel.asm	/^ffff80000010391f:	ff d0                	callq  *%rax$/;"	l
ffff800000103921	kernel.asm	/^ffff800000103921:	be f0 00 00 00       	mov    $0xf0,%esi$/;"	l
ffff800000103926	kernel.asm	/^ffff800000103926:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff80000010392b	kernel.asm	/^ffff80000010392b:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103932	kernel.asm	/^ffff800000103932:	80 ff ff $/;"	l
ffff800000103935	kernel.asm	/^ffff800000103935:	ff d0                	callq  *%rax$/;"	l
ffff800000103937	kernel.asm	/^ffff800000103937:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010393e	kernel.asm	/^ffff80000010393e:	eb 2b                	jmp    ffff80000010396b <ideinit+0xa5>$/;"	l
ffff800000103940	kernel.asm	/^ffff800000103940:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103945	kernel.asm	/^ffff800000103945:	48 b8 d5 37 10 00 00 	movabs $0xffff8000001037d5,%rax$/;"	l
ffff80000010394c	kernel.asm	/^ffff80000010394c:	80 ff ff $/;"	l
ffff80000010394f	kernel.asm	/^ffff80000010394f:	ff d0                	callq  *%rax$/;"	l
ffff800000103951	kernel.asm	/^ffff800000103951:	84 c0                	test   %al,%al$/;"	l
ffff800000103953	kernel.asm	/^ffff800000103953:	74 12                	je     ffff800000103967 <ideinit+0xa1>$/;"	l
ffff800000103955	kernel.asm	/^ffff800000103955:	48 b8 30 a1 11 00 00 	movabs $0xffff80000011a130,%rax$/;"	l
ffff80000010395c	kernel.asm	/^ffff80000010395c:	80 ff ff $/;"	l
ffff80000010395f	kernel.asm	/^ffff80000010395f:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000103965	kernel.asm	/^ffff800000103965:	eb 0d                	jmp    ffff800000103974 <ideinit+0xae>$/;"	l
ffff800000103967	kernel.asm	/^ffff800000103967:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010396b	kernel.asm	/^ffff80000010396b:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ffff800000103972	kernel.asm	/^ffff800000103972:	7e cc                	jle    ffff800000103940 <ideinit+0x7a>$/;"	l
ffff800000103974	kernel.asm	/^ffff800000103974:	be e0 00 00 00       	mov    $0xe0,%esi$/;"	l
ffff800000103979	kernel.asm	/^ffff800000103979:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff80000010397e	kernel.asm	/^ffff80000010397e:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103985	kernel.asm	/^ffff800000103985:	80 ff ff $/;"	l
ffff800000103988	kernel.asm	/^ffff800000103988:	ff d0                	callq  *%rax$/;"	l
ffff80000010398a	kernel.asm	/^ffff80000010398a:	90                   	nop$/;"	l
ffff80000010398b	kernel.asm	/^ffff80000010398b:	c9                   	leaveq $/;"	l
ffff80000010398c	kernel.asm	/^ffff80000010398c:	c3                   	retq   $/;"	l
ffff80000010398d	kernel.asm	/^ffff80000010398d <idestart>:$/;"	l
ffff80000010398d	kernel.asm	/^ffff80000010398d:	55                   	push   %rbp$/;"	l
ffff80000010398e	kernel.asm	/^ffff80000010398e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103991	kernel.asm	/^ffff800000103991:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103995	kernel.asm	/^ffff800000103995:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103999	kernel.asm	/^ffff800000103999:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010399e	kernel.asm	/^ffff80000010399e:	75 16                	jne    ffff8000001039b6 <idestart+0x29>$/;"	l
ffff8000001039a0	kernel.asm	/^ffff8000001039a0:	48 bf 46 cc 10 00 00 	movabs $0xffff80000010cc46,%rdi$/;"	l
ffff8000001039a7	kernel.asm	/^ffff8000001039a7:	80 ff ff $/;"	l
ffff8000001039aa	kernel.asm	/^ffff8000001039aa:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001039b1	kernel.asm	/^ffff8000001039b1:	80 ff ff $/;"	l
ffff8000001039b4	kernel.asm	/^ffff8000001039b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001039b6	kernel.asm	/^ffff8000001039b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001039ba	kernel.asm	/^ffff8000001039ba:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001039bd	kernel.asm	/^ffff8000001039bd:	3d e7 03 00 00       	cmp    $0x3e7,%eax$/;"	l
ffff8000001039c2	kernel.asm	/^ffff8000001039c2:	76 16                	jbe    ffff8000001039da <idestart+0x4d>$/;"	l
ffff8000001039c4	kernel.asm	/^ffff8000001039c4:	48 bf 4f cc 10 00 00 	movabs $0xffff80000010cc4f,%rdi$/;"	l
ffff8000001039cb	kernel.asm	/^ffff8000001039cb:	80 ff ff $/;"	l
ffff8000001039ce	kernel.asm	/^ffff8000001039ce:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001039d5	kernel.asm	/^ffff8000001039d5:	80 ff ff $/;"	l
ffff8000001039d8	kernel.asm	/^ffff8000001039d8:	ff d0                	callq  *%rax$/;"	l
ffff8000001039da	kernel.asm	/^ffff8000001039da:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001039e1	kernel.asm	/^ffff8000001039e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001039e5	kernel.asm	/^ffff8000001039e5:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff8000001039e8	kernel.asm	/^ffff8000001039e8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001039eb	kernel.asm	/^ffff8000001039eb:	0f af c2             	imul   %edx,%eax$/;"	l
ffff8000001039ee	kernel.asm	/^ffff8000001039ee:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001039f1	kernel.asm	/^ffff8000001039f1:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001039f5	kernel.asm	/^ffff8000001039f5:	75 07                	jne    ffff8000001039fe <idestart+0x71>$/;"	l
ffff8000001039f7	kernel.asm	/^ffff8000001039f7:	b8 20 00 00 00       	mov    $0x20,%eax$/;"	l
ffff8000001039fc	kernel.asm	/^ffff8000001039fc:	eb 05                	jmp    ffff800000103a03 <idestart+0x76>$/;"	l
ffff8000001039fe	kernel.asm	/^ffff8000001039fe:	b8 c4 00 00 00       	mov    $0xc4,%eax$/;"	l
ffff800000103a03	kernel.asm	/^ffff800000103a03:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103a06	kernel.asm	/^ffff800000103a06:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103a0a	kernel.asm	/^ffff800000103a0a:	75 07                	jne    ffff800000103a13 <idestart+0x86>$/;"	l
ffff800000103a0c	kernel.asm	/^ffff800000103a0c:	b8 30 00 00 00       	mov    $0x30,%eax$/;"	l
ffff800000103a11	kernel.asm	/^ffff800000103a11:	eb 05                	jmp    ffff800000103a18 <idestart+0x8b>$/;"	l
ffff800000103a13	kernel.asm	/^ffff800000103a13:	b8 c5 00 00 00       	mov    $0xc5,%eax$/;"	l
ffff800000103a18	kernel.asm	/^ffff800000103a18:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000103a1b	kernel.asm	/^ffff800000103a1b:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)$/;"	l
ffff800000103a1f	kernel.asm	/^ffff800000103a1f:	7e 16                	jle    ffff800000103a37 <idestart+0xaa>$/;"	l
ffff800000103a21	kernel.asm	/^ffff800000103a21:	48 bf 46 cc 10 00 00 	movabs $0xffff80000010cc46,%rdi$/;"	l
ffff800000103a28	kernel.asm	/^ffff800000103a28:	80 ff ff $/;"	l
ffff800000103a2b	kernel.asm	/^ffff800000103a2b:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103a32	kernel.asm	/^ffff800000103a32:	80 ff ff $/;"	l
ffff800000103a35	kernel.asm	/^ffff800000103a35:	ff d0                	callq  *%rax$/;"	l
ffff800000103a37	kernel.asm	/^ffff800000103a37:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103a3c	kernel.asm	/^ffff800000103a3c:	48 b8 78 38 10 00 00 	movabs $0xffff800000103878,%rax$/;"	l
ffff800000103a43	kernel.asm	/^ffff800000103a43:	80 ff ff $/;"	l
ffff800000103a46	kernel.asm	/^ffff800000103a46:	ff d0                	callq  *%rax$/;"	l
ffff800000103a48	kernel.asm	/^ffff800000103a48:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103a4d	kernel.asm	/^ffff800000103a4d:	bf f6 03 00 00       	mov    $0x3f6,%edi$/;"	l
ffff800000103a52	kernel.asm	/^ffff800000103a52:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103a59	kernel.asm	/^ffff800000103a59:	80 ff ff $/;"	l
ffff800000103a5c	kernel.asm	/^ffff800000103a5c:	ff d0                	callq  *%rax$/;"	l
ffff800000103a5e	kernel.asm	/^ffff800000103a5e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103a61	kernel.asm	/^ffff800000103a61:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a64	kernel.asm	/^ffff800000103a64:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a66	kernel.asm	/^ffff800000103a66:	bf f2 01 00 00       	mov    $0x1f2,%edi$/;"	l
ffff800000103a6b	kernel.asm	/^ffff800000103a6b:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103a72	kernel.asm	/^ffff800000103a72:	80 ff ff $/;"	l
ffff800000103a75	kernel.asm	/^ffff800000103a75:	ff d0                	callq  *%rax$/;"	l
ffff800000103a77	kernel.asm	/^ffff800000103a77:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103a7a	kernel.asm	/^ffff800000103a7a:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a7d	kernel.asm	/^ffff800000103a7d:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a7f	kernel.asm	/^ffff800000103a7f:	bf f3 01 00 00       	mov    $0x1f3,%edi$/;"	l
ffff800000103a84	kernel.asm	/^ffff800000103a84:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103a8b	kernel.asm	/^ffff800000103a8b:	80 ff ff $/;"	l
ffff800000103a8e	kernel.asm	/^ffff800000103a8e:	ff d0                	callq  *%rax$/;"	l
ffff800000103a90	kernel.asm	/^ffff800000103a90:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103a93	kernel.asm	/^ffff800000103a93:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff800000103a96	kernel.asm	/^ffff800000103a96:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a99	kernel.asm	/^ffff800000103a99:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103a9b	kernel.asm	/^ffff800000103a9b:	bf f4 01 00 00       	mov    $0x1f4,%edi$/;"	l
ffff800000103aa0	kernel.asm	/^ffff800000103aa0:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103aa7	kernel.asm	/^ffff800000103aa7:	80 ff ff $/;"	l
ffff800000103aaa	kernel.asm	/^ffff800000103aaa:	ff d0                	callq  *%rax$/;"	l
ffff800000103aac	kernel.asm	/^ffff800000103aac:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103aaf	kernel.asm	/^ffff800000103aaf:	c1 f8 10             	sar    $0x10,%eax$/;"	l
ffff800000103ab2	kernel.asm	/^ffff800000103ab2:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103ab5	kernel.asm	/^ffff800000103ab5:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103ab7	kernel.asm	/^ffff800000103ab7:	bf f5 01 00 00       	mov    $0x1f5,%edi$/;"	l
ffff800000103abc	kernel.asm	/^ffff800000103abc:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103ac3	kernel.asm	/^ffff800000103ac3:	80 ff ff $/;"	l
ffff800000103ac6	kernel.asm	/^ffff800000103ac6:	ff d0                	callq  *%rax$/;"	l
ffff800000103ac8	kernel.asm	/^ffff800000103ac8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103acc	kernel.asm	/^ffff800000103acc:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103acf	kernel.asm	/^ffff800000103acf:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000103ad2	kernel.asm	/^ffff800000103ad2:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000103ad5	kernel.asm	/^ffff800000103ad5:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103ad7	kernel.asm	/^ffff800000103ad7:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103ada	kernel.asm	/^ffff800000103ada:	c1 f8 18             	sar    $0x18,%eax$/;"	l
ffff800000103add	kernel.asm	/^ffff800000103add:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000103ae0	kernel.asm	/^ffff800000103ae0:	09 d0                	or     %edx,%eax$/;"	l
ffff800000103ae2	kernel.asm	/^ffff800000103ae2:	83 c8 e0             	or     $0xffffffe0,%eax$/;"	l
ffff800000103ae5	kernel.asm	/^ffff800000103ae5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103ae8	kernel.asm	/^ffff800000103ae8:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103aea	kernel.asm	/^ffff800000103aea:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103aef	kernel.asm	/^ffff800000103aef:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103af6	kernel.asm	/^ffff800000103af6:	80 ff ff $/;"	l
ffff800000103af9	kernel.asm	/^ffff800000103af9:	ff d0                	callq  *%rax$/;"	l
ffff800000103afb	kernel.asm	/^ffff800000103afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103aff	kernel.asm	/^ffff800000103aff:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103b01	kernel.asm	/^ffff800000103b01:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103b04	kernel.asm	/^ffff800000103b04:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103b06	kernel.asm	/^ffff800000103b06:	74 3e                	je     ffff800000103b46 <idestart+0x1b9>$/;"	l
ffff800000103b08	kernel.asm	/^ffff800000103b08:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000103b0b	kernel.asm	/^ffff800000103b0b:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103b0e	kernel.asm	/^ffff800000103b0e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103b10	kernel.asm	/^ffff800000103b10:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103b15	kernel.asm	/^ffff800000103b15:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103b1c	kernel.asm	/^ffff800000103b1c:	80 ff ff $/;"	l
ffff800000103b1f	kernel.asm	/^ffff800000103b1f:	ff d0                	callq  *%rax$/;"	l
ffff800000103b21	kernel.asm	/^ffff800000103b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103b25	kernel.asm	/^ffff800000103b25:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103b2b	kernel.asm	/^ffff800000103b2b:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103b30	kernel.asm	/^ffff800000103b30:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103b33	kernel.asm	/^ffff800000103b33:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103b38	kernel.asm	/^ffff800000103b38:	48 b8 48 38 10 00 00 	movabs $0xffff800000103848,%rax$/;"	l
ffff800000103b3f	kernel.asm	/^ffff800000103b3f:	80 ff ff $/;"	l
ffff800000103b42	kernel.asm	/^ffff800000103b42:	ff d0                	callq  *%rax$/;"	l
ffff800000103b44	kernel.asm	/^ffff800000103b44:	eb 19                	jmp    ffff800000103b5f <idestart+0x1d2>$/;"	l
ffff800000103b46	kernel.asm	/^ffff800000103b46:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000103b49	kernel.asm	/^ffff800000103b49:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103b4c	kernel.asm	/^ffff800000103b4c:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103b4e	kernel.asm	/^ffff800000103b4e:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103b53	kernel.asm	/^ffff800000103b53:	48 b8 29 38 10 00 00 	movabs $0xffff800000103829,%rax$/;"	l
ffff800000103b5a	kernel.asm	/^ffff800000103b5a:	80 ff ff $/;"	l
ffff800000103b5d	kernel.asm	/^ffff800000103b5d:	ff d0                	callq  *%rax$/;"	l
ffff800000103b5f	kernel.asm	/^ffff800000103b5f:	90                   	nop$/;"	l
ffff800000103b60	kernel.asm	/^ffff800000103b60:	c9                   	leaveq $/;"	l
ffff800000103b61	kernel.asm	/^ffff800000103b61:	c3                   	retq   $/;"	l
ffff800000103b62	kernel.asm	/^ffff800000103b62 <ideintr>:$/;"	l
ffff800000103b62	kernel.asm	/^ffff800000103b62:	55                   	push   %rbp$/;"	l
ffff800000103b63	kernel.asm	/^ffff800000103b63:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103b66	kernel.asm	/^ffff800000103b66:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103b6a	kernel.asm	/^ffff800000103b6a:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff800000103b71	kernel.asm	/^ffff800000103b71:	80 ff ff $/;"	l
ffff800000103b74	kernel.asm	/^ffff800000103b74:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000103b7b	kernel.asm	/^ffff800000103b7b:	80 ff ff $/;"	l
ffff800000103b7e	kernel.asm	/^ffff800000103b7e:	ff d0                	callq  *%rax$/;"	l
ffff800000103b80	kernel.asm	/^ffff800000103b80:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103b87	kernel.asm	/^ffff800000103b87:	80 ff ff $/;"	l
ffff800000103b8a	kernel.asm	/^ffff800000103b8a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103b8d	kernel.asm	/^ffff800000103b8d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103b91	kernel.asm	/^ffff800000103b91:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000103b96	kernel.asm	/^ffff800000103b96:	75 1b                	jne    ffff800000103bb3 <ideintr+0x51>$/;"	l
ffff800000103b98	kernel.asm	/^ffff800000103b98:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff800000103b9f	kernel.asm	/^ffff800000103b9f:	80 ff ff $/;"	l
ffff800000103ba2	kernel.asm	/^ffff800000103ba2:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000103ba9	kernel.asm	/^ffff800000103ba9:	80 ff ff $/;"	l
ffff800000103bac	kernel.asm	/^ffff800000103bac:	ff d0                	callq  *%rax$/;"	l
ffff800000103bae	kernel.asm	/^ffff800000103bae:	e9 d6 00 00 00       	jmpq   ffff800000103c89 <ideintr+0x127>$/;"	l
ffff800000103bb3	kernel.asm	/^ffff800000103bb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103bb7	kernel.asm	/^ffff800000103bb7:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx$/;"	l
ffff800000103bbe	kernel.asm	/^ffff800000103bbe:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103bc5	kernel.asm	/^ffff800000103bc5:	80 ff ff $/;"	l
ffff800000103bc8	kernel.asm	/^ffff800000103bc8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103bcb	kernel.asm	/^ffff800000103bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103bcf	kernel.asm	/^ffff800000103bcf:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103bd1	kernel.asm	/^ffff800000103bd1:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103bd4	kernel.asm	/^ffff800000103bd4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103bd6	kernel.asm	/^ffff800000103bd6:	75 38                	jne    ffff800000103c10 <ideintr+0xae>$/;"	l
ffff800000103bd8	kernel.asm	/^ffff800000103bd8:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103bdd	kernel.asm	/^ffff800000103bdd:	48 b8 78 38 10 00 00 	movabs $0xffff800000103878,%rax$/;"	l
ffff800000103be4	kernel.asm	/^ffff800000103be4:	80 ff ff $/;"	l
ffff800000103be7	kernel.asm	/^ffff800000103be7:	ff d0                	callq  *%rax$/;"	l
ffff800000103be9	kernel.asm	/^ffff800000103be9:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103beb	kernel.asm	/^ffff800000103beb:	78 23                	js     ffff800000103c10 <ideintr+0xae>$/;"	l
ffff800000103bed	kernel.asm	/^ffff800000103bed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103bf1	kernel.asm	/^ffff800000103bf1:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103bf7	kernel.asm	/^ffff800000103bf7:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103bfc	kernel.asm	/^ffff800000103bfc:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103bff	kernel.asm	/^ffff800000103bff:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103c04	kernel.asm	/^ffff800000103c04:	48 b8 f3 37 10 00 00 	movabs $0xffff8000001037f3,%rax$/;"	l
ffff800000103c0b	kernel.asm	/^ffff800000103c0b:	80 ff ff $/;"	l
ffff800000103c0e	kernel.asm	/^ffff800000103c0e:	ff d0                	callq  *%rax$/;"	l
ffff800000103c10	kernel.asm	/^ffff800000103c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c14	kernel.asm	/^ffff800000103c14:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103c16	kernel.asm	/^ffff800000103c16:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000103c19	kernel.asm	/^ffff800000103c19:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103c1b	kernel.asm	/^ffff800000103c1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c1f	kernel.asm	/^ffff800000103c1f:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103c21	kernel.asm	/^ffff800000103c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c25	kernel.asm	/^ffff800000103c25:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103c27	kernel.asm	/^ffff800000103c27:	83 e0 fb             	and    $0xfffffffb,%eax$/;"	l
ffff800000103c2a	kernel.asm	/^ffff800000103c2a:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103c2c	kernel.asm	/^ffff800000103c2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c30	kernel.asm	/^ffff800000103c30:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103c32	kernel.asm	/^ffff800000103c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103c36	kernel.asm	/^ffff800000103c36:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103c39	kernel.asm	/^ffff800000103c39:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000103c40	kernel.asm	/^ffff800000103c40:	80 ff ff $/;"	l
ffff800000103c43	kernel.asm	/^ffff800000103c43:	ff d0                	callq  *%rax$/;"	l
ffff800000103c45	kernel.asm	/^ffff800000103c45:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103c4c	kernel.asm	/^ffff800000103c4c:	80 ff ff $/;"	l
ffff800000103c4f	kernel.asm	/^ffff800000103c4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103c52	kernel.asm	/^ffff800000103c52:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103c55	kernel.asm	/^ffff800000103c55:	74 1c                	je     ffff800000103c73 <ideintr+0x111>$/;"	l
ffff800000103c57	kernel.asm	/^ffff800000103c57:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103c5e	kernel.asm	/^ffff800000103c5e:	80 ff ff $/;"	l
ffff800000103c61	kernel.asm	/^ffff800000103c61:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103c64	kernel.asm	/^ffff800000103c64:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103c67	kernel.asm	/^ffff800000103c67:	48 b8 8d 39 10 00 00 	movabs $0xffff80000010398d,%rax$/;"	l
ffff800000103c6e	kernel.asm	/^ffff800000103c6e:	80 ff ff $/;"	l
ffff800000103c71	kernel.asm	/^ffff800000103c71:	ff d0                	callq  *%rax$/;"	l
ffff800000103c73	kernel.asm	/^ffff800000103c73:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff800000103c7a	kernel.asm	/^ffff800000103c7a:	80 ff ff $/;"	l
ffff800000103c7d	kernel.asm	/^ffff800000103c7d:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000103c84	kernel.asm	/^ffff800000103c84:	80 ff ff $/;"	l
ffff800000103c87	kernel.asm	/^ffff800000103c87:	ff d0                	callq  *%rax$/;"	l
ffff800000103c89	kernel.asm	/^ffff800000103c89:	c9                   	leaveq $/;"	l
ffff800000103c8a	kernel.asm	/^ffff800000103c8a:	c3                   	retq   $/;"	l
ffff800000103c8b	kernel.asm	/^ffff800000103c8b <iderw>:$/;"	l
ffff800000103c8b	kernel.asm	/^ffff800000103c8b:	55                   	push   %rbp$/;"	l
ffff800000103c8c	kernel.asm	/^ffff800000103c8c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103c8f	kernel.asm	/^ffff800000103c8f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103c93	kernel.asm	/^ffff800000103c93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103c97	kernel.asm	/^ffff800000103c97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103c9b	kernel.asm	/^ffff800000103c9b:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000103c9f	kernel.asm	/^ffff800000103c9f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103ca2	kernel.asm	/^ffff800000103ca2:	48 b8 32 72 10 00 00 	movabs $0xffff800000107232,%rax$/;"	l
ffff800000103ca9	kernel.asm	/^ffff800000103ca9:	80 ff ff $/;"	l
ffff800000103cac	kernel.asm	/^ffff800000103cac:	ff d0                	callq  *%rax$/;"	l
ffff800000103cae	kernel.asm	/^ffff800000103cae:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103cb0	kernel.asm	/^ffff800000103cb0:	75 16                	jne    ffff800000103cc8 <iderw+0x3d>$/;"	l
ffff800000103cb2	kernel.asm	/^ffff800000103cb2:	48 bf 61 cc 10 00 00 	movabs $0xffff80000010cc61,%rdi$/;"	l
ffff800000103cb9	kernel.asm	/^ffff800000103cb9:	80 ff ff $/;"	l
ffff800000103cbc	kernel.asm	/^ffff800000103cbc:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103cc3	kernel.asm	/^ffff800000103cc3:	80 ff ff $/;"	l
ffff800000103cc6	kernel.asm	/^ffff800000103cc6:	ff d0                	callq  *%rax$/;"	l
ffff800000103cc8	kernel.asm	/^ffff800000103cc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103ccc	kernel.asm	/^ffff800000103ccc:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103cce	kernel.asm	/^ffff800000103cce:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103cd1	kernel.asm	/^ffff800000103cd1:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103cd4	kernel.asm	/^ffff800000103cd4:	75 16                	jne    ffff800000103cec <iderw+0x61>$/;"	l
ffff800000103cd6	kernel.asm	/^ffff800000103cd6:	48 bf 77 cc 10 00 00 	movabs $0xffff80000010cc77,%rdi$/;"	l
ffff800000103cdd	kernel.asm	/^ffff800000103cdd:	80 ff ff $/;"	l
ffff800000103ce0	kernel.asm	/^ffff800000103ce0:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103ce7	kernel.asm	/^ffff800000103ce7:	80 ff ff $/;"	l
ffff800000103cea	kernel.asm	/^ffff800000103cea:	ff d0                	callq  *%rax$/;"	l
ffff800000103cec	kernel.asm	/^ffff800000103cec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103cf0	kernel.asm	/^ffff800000103cf0:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103cf3	kernel.asm	/^ffff800000103cf3:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103cf5	kernel.asm	/^ffff800000103cf5:	74 26                	je     ffff800000103d1d <iderw+0x92>$/;"	l
ffff800000103cf7	kernel.asm	/^ffff800000103cf7:	48 b8 30 a1 11 00 00 	movabs $0xffff80000011a130,%rax$/;"	l
ffff800000103cfe	kernel.asm	/^ffff800000103cfe:	80 ff ff $/;"	l
ffff800000103d01	kernel.asm	/^ffff800000103d01:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103d03	kernel.asm	/^ffff800000103d03:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103d05	kernel.asm	/^ffff800000103d05:	75 16                	jne    ffff800000103d1d <iderw+0x92>$/;"	l
ffff800000103d07	kernel.asm	/^ffff800000103d07:	48 bf 8c cc 10 00 00 	movabs $0xffff80000010cc8c,%rdi$/;"	l
ffff800000103d0e	kernel.asm	/^ffff800000103d0e:	80 ff ff $/;"	l
ffff800000103d11	kernel.asm	/^ffff800000103d11:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000103d18	kernel.asm	/^ffff800000103d18:	80 ff ff $/;"	l
ffff800000103d1b	kernel.asm	/^ffff800000103d1b:	ff d0                	callq  *%rax$/;"	l
ffff800000103d1d	kernel.asm	/^ffff800000103d1d:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff800000103d24	kernel.asm	/^ffff800000103d24:	80 ff ff $/;"	l
ffff800000103d27	kernel.asm	/^ffff800000103d27:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000103d2e	kernel.asm	/^ffff800000103d2e:	80 ff ff $/;"	l
ffff800000103d31	kernel.asm	/^ffff800000103d31:	ff d0                	callq  *%rax$/;"	l
ffff800000103d33	kernel.asm	/^ffff800000103d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103d37	kernel.asm	/^ffff800000103d37:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)$/;"	l
ffff800000103d3e	kernel.asm	/^ffff800000103d3e:	00 00 00 00 $/;"	l
ffff800000103d42	kernel.asm	/^ffff800000103d42:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103d49	kernel.asm	/^ffff800000103d49:	80 ff ff $/;"	l
ffff800000103d4c	kernel.asm	/^ffff800000103d4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103d50	kernel.asm	/^ffff800000103d50:	eb 11                	jmp    ffff800000103d63 <iderw+0xd8>$/;"	l
ffff800000103d52	kernel.asm	/^ffff800000103d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103d56	kernel.asm	/^ffff800000103d56:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d59	kernel.asm	/^ffff800000103d59:	48 05 a8 00 00 00    	add    $0xa8,%rax$/;"	l
ffff800000103d5f	kernel.asm	/^ffff800000103d5f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103d63	kernel.asm	/^ffff800000103d63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103d67	kernel.asm	/^ffff800000103d67:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d6a	kernel.asm	/^ffff800000103d6a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103d6d	kernel.asm	/^ffff800000103d6d:	75 e3                	jne    ffff800000103d52 <iderw+0xc7>$/;"	l
ffff800000103d6f	kernel.asm	/^ffff800000103d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103d73	kernel.asm	/^ffff800000103d73:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000103d77	kernel.asm	/^ffff800000103d77:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103d7a	kernel.asm	/^ffff800000103d7a:	48 b8 28 a1 11 00 00 	movabs $0xffff80000011a128,%rax$/;"	l
ffff800000103d81	kernel.asm	/^ffff800000103d81:	80 ff ff $/;"	l
ffff800000103d84	kernel.asm	/^ffff800000103d84:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d87	kernel.asm	/^ffff800000103d87:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000103d8b	kernel.asm	/^ffff800000103d8b:	75 32                	jne    ffff800000103dbf <iderw+0x134>$/;"	l
ffff800000103d8d	kernel.asm	/^ffff800000103d8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103d91	kernel.asm	/^ffff800000103d91:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103d94	kernel.asm	/^ffff800000103d94:	48 b8 8d 39 10 00 00 	movabs $0xffff80000010398d,%rax$/;"	l
ffff800000103d9b	kernel.asm	/^ffff800000103d9b:	80 ff ff $/;"	l
ffff800000103d9e	kernel.asm	/^ffff800000103d9e:	ff d0                	callq  *%rax$/;"	l
ffff800000103da0	kernel.asm	/^ffff800000103da0:	eb 1d                	jmp    ffff800000103dbf <iderw+0x134>$/;"	l
ffff800000103da2	kernel.asm	/^ffff800000103da2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103da6	kernel.asm	/^ffff800000103da6:	48 be c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rsi$/;"	l
ffff800000103dad	kernel.asm	/^ffff800000103dad:	80 ff ff $/;"	l
ffff800000103db0	kernel.asm	/^ffff800000103db0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103db3	kernel.asm	/^ffff800000103db3:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000103dba	kernel.asm	/^ffff800000103dba:	80 ff ff $/;"	l
ffff800000103dbd	kernel.asm	/^ffff800000103dbd:	ff d0                	callq  *%rax$/;"	l
ffff800000103dbf	kernel.asm	/^ffff800000103dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103dc3	kernel.asm	/^ffff800000103dc3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103dc5	kernel.asm	/^ffff800000103dc5:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103dc8	kernel.asm	/^ffff800000103dc8:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103dcb	kernel.asm	/^ffff800000103dcb:	75 d5                	jne    ffff800000103da2 <iderw+0x117>$/;"	l
ffff800000103dcd	kernel.asm	/^ffff800000103dcd:	48 bf c0 a0 11 00 00 	movabs $0xffff80000011a0c0,%rdi$/;"	l
ffff800000103dd4	kernel.asm	/^ffff800000103dd4:	80 ff ff $/;"	l
ffff800000103dd7	kernel.asm	/^ffff800000103dd7:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000103dde	kernel.asm	/^ffff800000103dde:	80 ff ff $/;"	l
ffff800000103de1	kernel.asm	/^ffff800000103de1:	ff d0                	callq  *%rax$/;"	l
ffff800000103de3	kernel.asm	/^ffff800000103de3:	90                   	nop$/;"	l
ffff800000103de4	kernel.asm	/^ffff800000103de4:	c9                   	leaveq $/;"	l
ffff800000103de5	kernel.asm	/^ffff800000103de5:	c3                   	retq   $/;"	l
ffff800000103de6	kernel.asm	/^ffff800000103de6 <ioapicread>:$/;"	l
ffff800000103de6	kernel.asm	/^ffff800000103de6:	55                   	push   %rbp$/;"	l
ffff800000103de7	kernel.asm	/^ffff800000103de7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103dea	kernel.asm	/^ffff800000103dea:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103dee	kernel.asm	/^ffff800000103dee:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103df1	kernel.asm	/^ffff800000103df1:	48 b8 38 a1 11 00 00 	movabs $0xffff80000011a138,%rax$/;"	l
ffff800000103df8	kernel.asm	/^ffff800000103df8:	80 ff ff $/;"	l
ffff800000103dfb	kernel.asm	/^ffff800000103dfb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103dfe	kernel.asm	/^ffff800000103dfe:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103e01	kernel.asm	/^ffff800000103e01:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103e03	kernel.asm	/^ffff800000103e03:	48 b8 38 a1 11 00 00 	movabs $0xffff80000011a138,%rax$/;"	l
ffff800000103e0a	kernel.asm	/^ffff800000103e0a:	80 ff ff $/;"	l
ffff800000103e0d	kernel.asm	/^ffff800000103e0d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103e10	kernel.asm	/^ffff800000103e10:	8b 40 10             	mov    0x10(%rax),%eax$/;"	l
ffff800000103e13	kernel.asm	/^ffff800000103e13:	c9                   	leaveq $/;"	l
ffff800000103e14	kernel.asm	/^ffff800000103e14:	c3                   	retq   $/;"	l
ffff800000103e15	kernel.asm	/^ffff800000103e15 <ioapicwrite>:$/;"	l
ffff800000103e15	kernel.asm	/^ffff800000103e15:	55                   	push   %rbp$/;"	l
ffff800000103e16	kernel.asm	/^ffff800000103e16:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103e19	kernel.asm	/^ffff800000103e19:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103e1d	kernel.asm	/^ffff800000103e1d:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103e20	kernel.asm	/^ffff800000103e20:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000103e23	kernel.asm	/^ffff800000103e23:	48 b8 38 a1 11 00 00 	movabs $0xffff80000011a138,%rax$/;"	l
ffff800000103e2a	kernel.asm	/^ffff800000103e2a:	80 ff ff $/;"	l
ffff800000103e2d	kernel.asm	/^ffff800000103e2d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103e30	kernel.asm	/^ffff800000103e30:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103e33	kernel.asm	/^ffff800000103e33:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103e35	kernel.asm	/^ffff800000103e35:	48 b8 38 a1 11 00 00 	movabs $0xffff80000011a138,%rax$/;"	l
ffff800000103e3c	kernel.asm	/^ffff800000103e3c:	80 ff ff $/;"	l
ffff800000103e3f	kernel.asm	/^ffff800000103e3f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103e42	kernel.asm	/^ffff800000103e42:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000103e45	kernel.asm	/^ffff800000103e45:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000103e48	kernel.asm	/^ffff800000103e48:	90                   	nop$/;"	l
ffff800000103e49	kernel.asm	/^ffff800000103e49:	c9                   	leaveq $/;"	l
ffff800000103e4a	kernel.asm	/^ffff800000103e4a:	c3                   	retq   $/;"	l
ffff800000103e4b	kernel.asm	/^ffff800000103e4b <ioapicinit>:$/;"	l
ffff800000103e4b	kernel.asm	/^ffff800000103e4b:	55                   	push   %rbp$/;"	l
ffff800000103e4c	kernel.asm	/^ffff800000103e4c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103e4f	kernel.asm	/^ffff800000103e4f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103e53	kernel.asm	/^ffff800000103e53:	48 b8 38 a1 11 00 00 	movabs $0xffff80000011a138,%rax$/;"	l
ffff800000103e5a	kernel.asm	/^ffff800000103e5a:	80 ff ff $/;"	l
ffff800000103e5d	kernel.asm	/^ffff800000103e5d:	48 b9 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rcx$/;"	l
ffff800000103e64	kernel.asm	/^ffff800000103e64:	80 ff ff $/;"	l
ffff800000103e67	kernel.asm	/^ffff800000103e67:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff800000103e6a	kernel.asm	/^ffff800000103e6a:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103e6f	kernel.asm	/^ffff800000103e6f:	48 b8 e6 3d 10 00 00 	movabs $0xffff800000103de6,%rax$/;"	l
ffff800000103e76	kernel.asm	/^ffff800000103e76:	80 ff ff $/;"	l
ffff800000103e79	kernel.asm	/^ffff800000103e79:	ff d0                	callq  *%rax$/;"	l
ffff800000103e7b	kernel.asm	/^ffff800000103e7b:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff800000103e7e	kernel.asm	/^ffff800000103e7e:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000103e83	kernel.asm	/^ffff800000103e83:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103e86	kernel.asm	/^ffff800000103e86:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103e8b	kernel.asm	/^ffff800000103e8b:	48 b8 e6 3d 10 00 00 	movabs $0xffff800000103de6,%rax$/;"	l
ffff800000103e92	kernel.asm	/^ffff800000103e92:	80 ff ff $/;"	l
ffff800000103e95	kernel.asm	/^ffff800000103e95:	ff d0                	callq  *%rax$/;"	l
ffff800000103e97	kernel.asm	/^ffff800000103e97:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff800000103e9a	kernel.asm	/^ffff800000103e9a:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103e9d	kernel.asm	/^ffff800000103e9d:	48 b8 64 aa 11 00 00 	movabs $0xffff80000011aa64,%rax$/;"	l
ffff800000103ea4	kernel.asm	/^ffff800000103ea4:	80 ff ff $/;"	l
ffff800000103ea7	kernel.asm	/^ffff800000103ea7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103eaa	kernel.asm	/^ffff800000103eaa:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103ead	kernel.asm	/^ffff800000103ead:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff800000103eb0	kernel.asm	/^ffff800000103eb0:	74 1b                	je     ffff800000103ecd <ioapicinit+0x82>$/;"	l
ffff800000103eb2	kernel.asm	/^ffff800000103eb2:	48 bf b0 cc 10 00 00 	movabs $0xffff80000010ccb0,%rdi$/;"	l
ffff800000103eb9	kernel.asm	/^ffff800000103eb9:	80 ff ff $/;"	l
ffff800000103ebc	kernel.asm	/^ffff800000103ebc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103ec1	kernel.asm	/^ffff800000103ec1:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000103ec8	kernel.asm	/^ffff800000103ec8:	80 ff ff $/;"	l
ffff800000103ecb	kernel.asm	/^ffff800000103ecb:	ff d2                	callq  *%rdx$/;"	l
ffff800000103ecd	kernel.asm	/^ffff800000103ecd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103ed4	kernel.asm	/^ffff800000103ed4:	eb 47                	jmp    ffff800000103f1d <ioapicinit+0xd2>$/;"	l
ffff800000103ed6	kernel.asm	/^ffff800000103ed6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103ed9	kernel.asm	/^ffff800000103ed9:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff800000103edc	kernel.asm	/^ffff800000103edc:	0d 00 00 01 00       	or     $0x10000,%eax$/;"	l
ffff800000103ee1	kernel.asm	/^ffff800000103ee1:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103ee3	kernel.asm	/^ffff800000103ee3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103ee6	kernel.asm	/^ffff800000103ee6:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103ee9	kernel.asm	/^ffff800000103ee9:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103eeb	kernel.asm	/^ffff800000103eeb:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103eed	kernel.asm	/^ffff800000103eed:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103eef	kernel.asm	/^ffff800000103eef:	48 b8 15 3e 10 00 00 	movabs $0xffff800000103e15,%rax$/;"	l
ffff800000103ef6	kernel.asm	/^ffff800000103ef6:	80 ff ff $/;"	l
ffff800000103ef9	kernel.asm	/^ffff800000103ef9:	ff d0                	callq  *%rax$/;"	l
ffff800000103efb	kernel.asm	/^ffff800000103efb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103efe	kernel.asm	/^ffff800000103efe:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103f01	kernel.asm	/^ffff800000103f01:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103f03	kernel.asm	/^ffff800000103f03:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000103f06	kernel.asm	/^ffff800000103f06:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103f0b	kernel.asm	/^ffff800000103f0b:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103f0d	kernel.asm	/^ffff800000103f0d:	48 b8 15 3e 10 00 00 	movabs $0xffff800000103e15,%rax$/;"	l
ffff800000103f14	kernel.asm	/^ffff800000103f14:	80 ff ff $/;"	l
ffff800000103f17	kernel.asm	/^ffff800000103f17:	ff d0                	callq  *%rax$/;"	l
ffff800000103f19	kernel.asm	/^ffff800000103f19:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103f1d	kernel.asm	/^ffff800000103f1d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103f20	kernel.asm	/^ffff800000103f20:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000103f23	kernel.asm	/^ffff800000103f23:	7e b1                	jle    ffff800000103ed6 <ioapicinit+0x8b>$/;"	l
ffff800000103f25	kernel.asm	/^ffff800000103f25:	90                   	nop$/;"	l
ffff800000103f26	kernel.asm	/^ffff800000103f26:	c9                   	leaveq $/;"	l
ffff800000103f27	kernel.asm	/^ffff800000103f27:	c3                   	retq   $/;"	l
ffff800000103f28	kernel.asm	/^ffff800000103f28 <ioapicenable>:$/;"	l
ffff800000103f28	kernel.asm	/^ffff800000103f28:	55                   	push   %rbp$/;"	l
ffff800000103f29	kernel.asm	/^ffff800000103f29:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103f2c	kernel.asm	/^ffff800000103f2c:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103f30	kernel.asm	/^ffff800000103f30:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103f33	kernel.asm	/^ffff800000103f33:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000103f36	kernel.asm	/^ffff800000103f36:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103f39	kernel.asm	/^ffff800000103f39:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff800000103f3c	kernel.asm	/^ffff800000103f3c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103f3e	kernel.asm	/^ffff800000103f3e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103f41	kernel.asm	/^ffff800000103f41:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103f44	kernel.asm	/^ffff800000103f44:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103f46	kernel.asm	/^ffff800000103f46:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103f48	kernel.asm	/^ffff800000103f48:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103f4a	kernel.asm	/^ffff800000103f4a:	48 b8 15 3e 10 00 00 	movabs $0xffff800000103e15,%rax$/;"	l
ffff800000103f51	kernel.asm	/^ffff800000103f51:	80 ff ff $/;"	l
ffff800000103f54	kernel.asm	/^ffff800000103f54:	ff d0                	callq  *%rax$/;"	l
ffff800000103f56	kernel.asm	/^ffff800000103f56:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103f59	kernel.asm	/^ffff800000103f59:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff800000103f5c	kernel.asm	/^ffff800000103f5c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103f5e	kernel.asm	/^ffff800000103f5e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103f61	kernel.asm	/^ffff800000103f61:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000103f64	kernel.asm	/^ffff800000103f64:	01 c0                	add    %eax,%eax$/;"	l
ffff800000103f66	kernel.asm	/^ffff800000103f66:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000103f69	kernel.asm	/^ffff800000103f69:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103f6b	kernel.asm	/^ffff800000103f6b:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103f6d	kernel.asm	/^ffff800000103f6d:	48 b8 15 3e 10 00 00 	movabs $0xffff800000103e15,%rax$/;"	l
ffff800000103f74	kernel.asm	/^ffff800000103f74:	80 ff ff $/;"	l
ffff800000103f77	kernel.asm	/^ffff800000103f77:	ff d0                	callq  *%rax$/;"	l
ffff800000103f79	kernel.asm	/^ffff800000103f79:	90                   	nop$/;"	l
ffff800000103f7a	kernel.asm	/^ffff800000103f7a:	c9                   	leaveq $/;"	l
ffff800000103f7b	kernel.asm	/^ffff800000103f7b:	c3                   	retq   $/;"	l
ffff800000103f7c	kernel.asm	/^ffff800000103f7c <kinit1>:$/;"	l
ffff800000103f7c	kernel.asm	/^ffff800000103f7c:	55                   	push   %rbp$/;"	l
ffff800000103f7d	kernel.asm	/^ffff800000103f7d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103f80	kernel.asm	/^ffff800000103f80:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103f84	kernel.asm	/^ffff800000103f84:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000103f88	kernel.asm	/^ffff800000103f88:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103f8c	kernel.asm	/^ffff800000103f8c:	48 be e2 cc 10 00 00 	movabs $0xffff80000010cce2,%rsi$/;"	l
ffff800000103f93	kernel.asm	/^ffff800000103f93:	80 ff ff $/;"	l
ffff800000103f96	kernel.asm	/^ffff800000103f96:	48 bf 40 a1 11 00 00 	movabs $0xffff80000011a140,%rdi$/;"	l
ffff800000103f9d	kernel.asm	/^ffff800000103f9d:	80 ff ff $/;"	l
ffff800000103fa0	kernel.asm	/^ffff800000103fa0:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff800000103fa7	kernel.asm	/^ffff800000103fa7:	80 ff ff $/;"	l
ffff800000103faa	kernel.asm	/^ffff800000103faa:	ff d0                	callq  *%rax$/;"	l
ffff800000103fac	kernel.asm	/^ffff800000103fac:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff800000103fb3	kernel.asm	/^ffff800000103fb3:	80 ff ff $/;"	l
ffff800000103fb6	kernel.asm	/^ffff800000103fb6:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff800000103fbd	kernel.asm	/^ffff800000103fbd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000103fc1	kernel.asm	/^ffff800000103fc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103fc5	kernel.asm	/^ffff800000103fc5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103fc8	kernel.asm	/^ffff800000103fc8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103fcb	kernel.asm	/^ffff800000103fcb:	48 b8 18 40 10 00 00 	movabs $0xffff800000104018,%rax$/;"	l
ffff800000103fd2	kernel.asm	/^ffff800000103fd2:	80 ff ff $/;"	l
ffff800000103fd5	kernel.asm	/^ffff800000103fd5:	ff d0                	callq  *%rax$/;"	l
ffff800000103fd7	kernel.asm	/^ffff800000103fd7:	90                   	nop$/;"	l
ffff800000103fd8	kernel.asm	/^ffff800000103fd8:	c9                   	leaveq $/;"	l
ffff800000103fd9	kernel.asm	/^ffff800000103fd9:	c3                   	retq   $/;"	l
ffff800000103fda	kernel.asm	/^ffff800000103fda <kinit2>:$/;"	l
ffff800000103fda	kernel.asm	/^ffff800000103fda:	55                   	push   %rbp$/;"	l
ffff800000103fdb	kernel.asm	/^ffff800000103fdb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103fde	kernel.asm	/^ffff800000103fde:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103fe2	kernel.asm	/^ffff800000103fe2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000103fe6	kernel.asm	/^ffff800000103fe6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103fea	kernel.asm	/^ffff800000103fea:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000103fee	kernel.asm	/^ffff800000103fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103ff2	kernel.asm	/^ffff800000103ff2:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000103ff5	kernel.asm	/^ffff800000103ff5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103ff8	kernel.asm	/^ffff800000103ff8:	48 b8 18 40 10 00 00 	movabs $0xffff800000104018,%rax$/;"	l
ffff800000103fff	kernel.asm	/^ffff800000103fff:	80 ff ff $/;"	l
ffff800000104002	kernel.asm	/^ffff800000104002:	ff d0                	callq  *%rax$/;"	l
ffff800000104004	kernel.asm	/^ffff800000104004:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff80000010400b	kernel.asm	/^ffff80000010400b:	80 ff ff $/;"	l
ffff80000010400e	kernel.asm	/^ffff80000010400e:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff800000104015	kernel.asm	/^ffff800000104015:	90                   	nop$/;"	l
ffff800000104016	kernel.asm	/^ffff800000104016:	c9                   	leaveq $/;"	l
ffff800000104017	kernel.asm	/^ffff800000104017:	c3                   	retq   $/;"	l
ffff800000104018	kernel.asm	/^ffff800000104018 <freerange>:$/;"	l
ffff800000104018	kernel.asm	/^ffff800000104018:	55                   	push   %rbp$/;"	l
ffff800000104019	kernel.asm	/^ffff800000104019:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010401c	kernel.asm	/^ffff80000010401c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104020	kernel.asm	/^ffff800000104020:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000104024	kernel.asm	/^ffff800000104024:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000104028	kernel.asm	/^ffff800000104028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010402c	kernel.asm	/^ffff80000010402c:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff800000104032	kernel.asm	/^ffff800000104032:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff800000104038	kernel.asm	/^ffff800000104038:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010403c	kernel.asm	/^ffff80000010403c:	eb 1b                	jmp    ffff800000104059 <freerange+0x41>$/;"	l
ffff80000010403e	kernel.asm	/^ffff80000010403e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104042	kernel.asm	/^ffff800000104042:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104045	kernel.asm	/^ffff800000104045:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010404c	kernel.asm	/^ffff80000010404c:	80 ff ff $/;"	l
ffff80000010404f	kernel.asm	/^ffff80000010404f:	ff d0                	callq  *%rax$/;"	l
ffff800000104051	kernel.asm	/^ffff800000104051:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff800000104058	kernel.asm	/^ffff800000104058:	00 $/;"	l
ffff800000104059	kernel.asm	/^ffff800000104059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010405d	kernel.asm	/^ffff80000010405d:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000104063	kernel.asm	/^ffff800000104063:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax$/;"	l
ffff800000104067	kernel.asm	/^ffff800000104067:	76 d5                	jbe    ffff80000010403e <freerange+0x26>$/;"	l
ffff800000104069	kernel.asm	/^ffff800000104069:	90                   	nop$/;"	l
ffff80000010406a	kernel.asm	/^ffff80000010406a:	c9                   	leaveq $/;"	l
ffff80000010406b	kernel.asm	/^ffff80000010406b:	c3                   	retq   $/;"	l
ffff80000010406c	kernel.asm	/^ffff80000010406c <kfree>:$/;"	l
ffff80000010406c	kernel.asm	/^ffff80000010406c:	55                   	push   %rbp$/;"	l
ffff80000010406d	kernel.asm	/^ffff80000010406d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104070	kernel.asm	/^ffff800000104070:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104074	kernel.asm	/^ffff800000104074:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000104078	kernel.asm	/^ffff800000104078:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010407c	kernel.asm	/^ffff80000010407c:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff800000104081	kernel.asm	/^ffff800000104081:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104084	kernel.asm	/^ffff800000104084:	75 29                	jne    ffff8000001040af <kfree+0x43>$/;"	l
ffff800000104086	kernel.asm	/^ffff800000104086:	48 b8 00 f0 11 00 00 	movabs $0xffff80000011f000,%rax$/;"	l
ffff80000010408d	kernel.asm	/^ffff80000010408d:	80 ff ff $/;"	l
ffff800000104090	kernel.asm	/^ffff800000104090:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000104094	kernel.asm	/^ffff800000104094:	72 19                	jb     ffff8000001040af <kfree+0x43>$/;"	l
ffff800000104096	kernel.asm	/^ffff800000104096:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010409a	kernel.asm	/^ffff80000010409a:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff8000001040a1	kernel.asm	/^ffff8000001040a1:	80 00 00 $/;"	l
ffff8000001040a4	kernel.asm	/^ffff8000001040a4:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001040a7	kernel.asm	/^ffff8000001040a7:	48 3d ff ff ff 0d    	cmp    $0xdffffff,%rax$/;"	l
ffff8000001040ad	kernel.asm	/^ffff8000001040ad:	76 16                	jbe    ffff8000001040c5 <kfree+0x59>$/;"	l
ffff8000001040af	kernel.asm	/^ffff8000001040af:	48 bf e7 cc 10 00 00 	movabs $0xffff80000010cce7,%rdi$/;"	l
ffff8000001040b6	kernel.asm	/^ffff8000001040b6:	80 ff ff $/;"	l
ffff8000001040b9	kernel.asm	/^ffff8000001040b9:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001040c0	kernel.asm	/^ffff8000001040c0:	80 ff ff $/;"	l
ffff8000001040c3	kernel.asm	/^ffff8000001040c3:	ff d0                	callq  *%rax$/;"	l
ffff8000001040c5	kernel.asm	/^ffff8000001040c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001040c9	kernel.asm	/^ffff8000001040c9:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff8000001040ce	kernel.asm	/^ffff8000001040ce:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001040d3	kernel.asm	/^ffff8000001040d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001040d6	kernel.asm	/^ffff8000001040d6:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff8000001040dd	kernel.asm	/^ffff8000001040dd:	80 ff ff $/;"	l
ffff8000001040e0	kernel.asm	/^ffff8000001040e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001040e2	kernel.asm	/^ffff8000001040e2:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff8000001040e9	kernel.asm	/^ffff8000001040e9:	80 ff ff $/;"	l
ffff8000001040ec	kernel.asm	/^ffff8000001040ec:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff8000001040ef	kernel.asm	/^ffff8000001040ef:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001040f1	kernel.asm	/^ffff8000001040f1:	74 16                	je     ffff800000104109 <kfree+0x9d>$/;"	l
ffff8000001040f3	kernel.asm	/^ffff8000001040f3:	48 bf 40 a1 11 00 00 	movabs $0xffff80000011a140,%rdi$/;"	l
ffff8000001040fa	kernel.asm	/^ffff8000001040fa:	80 ff ff $/;"	l
ffff8000001040fd	kernel.asm	/^ffff8000001040fd:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000104104	kernel.asm	/^ffff800000104104:	80 ff ff $/;"	l
ffff800000104107	kernel.asm	/^ffff800000104107:	ff d0                	callq  *%rax$/;"	l
ffff800000104109	kernel.asm	/^ffff800000104109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010410d	kernel.asm	/^ffff80000010410d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104111	kernel.asm	/^ffff800000104111:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff800000104118	kernel.asm	/^ffff800000104118:	80 ff ff $/;"	l
ffff80000010411b	kernel.asm	/^ffff80000010411b:	48 8b 50 70          	mov    0x70(%rax),%rdx$/;"	l
ffff80000010411f	kernel.asm	/^ffff80000010411f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104123	kernel.asm	/^ffff800000104123:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000104126	kernel.asm	/^ffff800000104126:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff80000010412d	kernel.asm	/^ffff80000010412d:	80 ff ff $/;"	l
ffff800000104130	kernel.asm	/^ffff800000104130:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000104134	kernel.asm	/^ffff800000104134:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff800000104138	kernel.asm	/^ffff800000104138:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff80000010413f	kernel.asm	/^ffff80000010413f:	80 ff ff $/;"	l
ffff800000104142	kernel.asm	/^ffff800000104142:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104145	kernel.asm	/^ffff800000104145:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104147	kernel.asm	/^ffff800000104147:	74 16                	je     ffff80000010415f <kfree+0xf3>$/;"	l
ffff800000104149	kernel.asm	/^ffff800000104149:	48 bf 40 a1 11 00 00 	movabs $0xffff80000011a140,%rdi$/;"	l
ffff800000104150	kernel.asm	/^ffff800000104150:	80 ff ff $/;"	l
ffff800000104153	kernel.asm	/^ffff800000104153:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010415a	kernel.asm	/^ffff80000010415a:	80 ff ff $/;"	l
ffff80000010415d	kernel.asm	/^ffff80000010415d:	ff d0                	callq  *%rax$/;"	l
ffff80000010415f	kernel.asm	/^ffff80000010415f:	90                   	nop$/;"	l
ffff800000104160	kernel.asm	/^ffff800000104160:	c9                   	leaveq $/;"	l
ffff800000104161	kernel.asm	/^ffff800000104161:	c3                   	retq   $/;"	l
ffff800000104162	kernel.asm	/^ffff800000104162 <kalloc>:$/;"	l
ffff800000104162	kernel.asm	/^ffff800000104162:	55                   	push   %rbp$/;"	l
ffff800000104163	kernel.asm	/^ffff800000104163:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104166	kernel.asm	/^ffff800000104166:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010416a	kernel.asm	/^ffff80000010416a:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff800000104171	kernel.asm	/^ffff800000104171:	80 ff ff $/;"	l
ffff800000104174	kernel.asm	/^ffff800000104174:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104177	kernel.asm	/^ffff800000104177:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104179	kernel.asm	/^ffff800000104179:	74 16                	je     ffff800000104191 <kalloc+0x2f>$/;"	l
ffff80000010417b	kernel.asm	/^ffff80000010417b:	48 bf 40 a1 11 00 00 	movabs $0xffff80000011a140,%rdi$/;"	l
ffff800000104182	kernel.asm	/^ffff800000104182:	80 ff ff $/;"	l
ffff800000104185	kernel.asm	/^ffff800000104185:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010418c	kernel.asm	/^ffff80000010418c:	80 ff ff $/;"	l
ffff80000010418f	kernel.asm	/^ffff80000010418f:	ff d0                	callq  *%rax$/;"	l
ffff800000104191	kernel.asm	/^ffff800000104191:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff800000104198	kernel.asm	/^ffff800000104198:	80 ff ff $/;"	l
ffff80000010419b	kernel.asm	/^ffff80000010419b:	48 8b 40 70          	mov    0x70(%rax),%rax$/;"	l
ffff80000010419f	kernel.asm	/^ffff80000010419f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001041a3	kernel.asm	/^ffff8000001041a3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001041a8	kernel.asm	/^ffff8000001041a8:	74 15                	je     ffff8000001041bf <kalloc+0x5d>$/;"	l
ffff8000001041aa	kernel.asm	/^ffff8000001041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001041ae	kernel.asm	/^ffff8000001041ae:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff8000001041b1	kernel.asm	/^ffff8000001041b1:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff8000001041b8	kernel.asm	/^ffff8000001041b8:	80 ff ff $/;"	l
ffff8000001041bb	kernel.asm	/^ffff8000001041bb:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff8000001041bf	kernel.asm	/^ffff8000001041bf:	48 b8 40 a1 11 00 00 	movabs $0xffff80000011a140,%rax$/;"	l
ffff8000001041c6	kernel.asm	/^ffff8000001041c6:	80 ff ff $/;"	l
ffff8000001041c9	kernel.asm	/^ffff8000001041c9:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff8000001041cc	kernel.asm	/^ffff8000001041cc:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001041ce	kernel.asm	/^ffff8000001041ce:	74 16                	je     ffff8000001041e6 <kalloc+0x84>$/;"	l
ffff8000001041d0	kernel.asm	/^ffff8000001041d0:	48 bf 40 a1 11 00 00 	movabs $0xffff80000011a140,%rdi$/;"	l
ffff8000001041d7	kernel.asm	/^ffff8000001041d7:	80 ff ff $/;"	l
ffff8000001041da	kernel.asm	/^ffff8000001041da:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001041e1	kernel.asm	/^ffff8000001041e1:	80 ff ff $/;"	l
ffff8000001041e4	kernel.asm	/^ffff8000001041e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001041e6	kernel.asm	/^ffff8000001041e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001041ea	kernel.asm	/^ffff8000001041ea:	c9                   	leaveq $/;"	l
ffff8000001041eb	kernel.asm	/^ffff8000001041eb:	c3                   	retq   $/;"	l
ffff8000001041ec	kernel.asm	/^ffff8000001041ec <inb>:$/;"	l
ffff8000001041ec	kernel.asm	/^ffff8000001041ec:	55                   	push   %rbp$/;"	l
ffff8000001041ed	kernel.asm	/^ffff8000001041ed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001041f0	kernel.asm	/^ffff8000001041f0:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001041f4	kernel.asm	/^ffff8000001041f4:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001041f6	kernel.asm	/^ffff8000001041f6:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001041fa	kernel.asm	/^ffff8000001041fa:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001041fe	kernel.asm	/^ffff8000001041fe:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104200	kernel.asm	/^ffff800000104200:	ec                   	in     (%dx),%al$/;"	l
ffff800000104201	kernel.asm	/^ffff800000104201:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000104204	kernel.asm	/^ffff800000104204:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000104208	kernel.asm	/^ffff800000104208:	c9                   	leaveq $/;"	l
ffff800000104209	kernel.asm	/^ffff800000104209:	c3                   	retq   $/;"	l
ffff80000010420a	kernel.asm	/^ffff80000010420a <kbdgetc>:$/;"	l
ffff80000010420a	kernel.asm	/^ffff80000010420a:	55                   	push   %rbp$/;"	l
ffff80000010420b	kernel.asm	/^ffff80000010420b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010420e	kernel.asm	/^ffff80000010420e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104212	kernel.asm	/^ffff800000104212:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff800000104217	kernel.asm	/^ffff800000104217:	48 b8 ec 41 10 00 00 	movabs $0xffff8000001041ec,%rax$/;"	l
ffff80000010421e	kernel.asm	/^ffff80000010421e:	80 ff ff $/;"	l
ffff800000104221	kernel.asm	/^ffff800000104221:	ff d0                	callq  *%rax$/;"	l
ffff800000104223	kernel.asm	/^ffff800000104223:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104226	kernel.asm	/^ffff800000104226:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000104229	kernel.asm	/^ffff800000104229:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010422c	kernel.asm	/^ffff80000010422c:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010422f	kernel.asm	/^ffff80000010422f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104231	kernel.asm	/^ffff800000104231:	75 0a                	jne    ffff80000010423d <kbdgetc+0x33>$/;"	l
ffff800000104233	kernel.asm	/^ffff800000104233:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000104238	kernel.asm	/^ffff800000104238:	e9 ae 01 00 00       	jmpq   ffff8000001043eb <kbdgetc+0x1e1>$/;"	l
ffff80000010423d	kernel.asm	/^ffff80000010423d:	bf 60 00 00 00       	mov    $0x60,%edi$/;"	l
ffff800000104242	kernel.asm	/^ffff800000104242:	48 b8 ec 41 10 00 00 	movabs $0xffff8000001041ec,%rax$/;"	l
ffff800000104249	kernel.asm	/^ffff800000104249:	80 ff ff $/;"	l
ffff80000010424c	kernel.asm	/^ffff80000010424c:	ff d0                	callq  *%rax$/;"	l
ffff80000010424e	kernel.asm	/^ffff80000010424e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104251	kernel.asm	/^ffff800000104251:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104254	kernel.asm	/^ffff800000104254:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%rbp)$/;"	l
ffff80000010425b	kernel.asm	/^ffff80000010425b:	75 27                	jne    ffff800000104284 <kbdgetc+0x7a>$/;"	l
ffff80000010425d	kernel.asm	/^ffff80000010425d:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104264	kernel.asm	/^ffff800000104264:	80 ff ff $/;"	l
ffff800000104267	kernel.asm	/^ffff800000104267:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104269	kernel.asm	/^ffff800000104269:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff80000010426c	kernel.asm	/^ffff80000010426c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010426e	kernel.asm	/^ffff80000010426e:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104275	kernel.asm	/^ffff800000104275:	80 ff ff $/;"	l
ffff800000104278	kernel.asm	/^ffff800000104278:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010427a	kernel.asm	/^ffff80000010427a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010427f	kernel.asm	/^ffff80000010427f:	e9 67 01 00 00       	jmpq   ffff8000001043eb <kbdgetc+0x1e1>$/;"	l
ffff800000104284	kernel.asm	/^ffff800000104284:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104287	kernel.asm	/^ffff800000104287:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff80000010428c	kernel.asm	/^ffff80000010428c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010428e	kernel.asm	/^ffff80000010428e:	74 60                	je     ffff8000001042f0 <kbdgetc+0xe6>$/;"	l
ffff800000104290	kernel.asm	/^ffff800000104290:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104297	kernel.asm	/^ffff800000104297:	80 ff ff $/;"	l
ffff80000010429a	kernel.asm	/^ffff80000010429a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010429c	kernel.asm	/^ffff80000010429c:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff80000010429f	kernel.asm	/^ffff80000010429f:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001042a1	kernel.asm	/^ffff8000001042a1:	75 08                	jne    ffff8000001042ab <kbdgetc+0xa1>$/;"	l
ffff8000001042a3	kernel.asm	/^ffff8000001042a3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001042a6	kernel.asm	/^ffff8000001042a6:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff8000001042a9	kernel.asm	/^ffff8000001042a9:	eb 03                	jmp    ffff8000001042ae <kbdgetc+0xa4>$/;"	l
ffff8000001042ab	kernel.asm	/^ffff8000001042ab:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001042ae	kernel.asm	/^ffff8000001042ae:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001042b1	kernel.asm	/^ffff8000001042b1:	48 ba 20 e0 10 00 00 	movabs $0xffff80000010e020,%rdx$/;"	l
ffff8000001042b8	kernel.asm	/^ffff8000001042b8:	80 ff ff $/;"	l
ffff8000001042bb	kernel.asm	/^ffff8000001042bb:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001042be	kernel.asm	/^ffff8000001042be:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff8000001042c2	kernel.asm	/^ffff8000001042c2:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff8000001042c5	kernel.asm	/^ffff8000001042c5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001042c8	kernel.asm	/^ffff8000001042c8:	f7 d0                	not    %eax$/;"	l
ffff8000001042ca	kernel.asm	/^ffff8000001042ca:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001042cc	kernel.asm	/^ffff8000001042cc:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff8000001042d3	kernel.asm	/^ffff8000001042d3:	80 ff ff $/;"	l
ffff8000001042d6	kernel.asm	/^ffff8000001042d6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001042d8	kernel.asm	/^ffff8000001042d8:	21 c2                	and    %eax,%edx$/;"	l
ffff8000001042da	kernel.asm	/^ffff8000001042da:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff8000001042e1	kernel.asm	/^ffff8000001042e1:	80 ff ff $/;"	l
ffff8000001042e4	kernel.asm	/^ffff8000001042e4:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001042e6	kernel.asm	/^ffff8000001042e6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001042eb	kernel.asm	/^ffff8000001042eb:	e9 fb 00 00 00       	jmpq   ffff8000001043eb <kbdgetc+0x1e1>$/;"	l
ffff8000001042f0	kernel.asm	/^ffff8000001042f0:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff8000001042f7	kernel.asm	/^ffff8000001042f7:	80 ff ff $/;"	l
ffff8000001042fa	kernel.asm	/^ffff8000001042fa:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001042fc	kernel.asm	/^ffff8000001042fc:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff8000001042ff	kernel.asm	/^ffff8000001042ff:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104301	kernel.asm	/^ffff800000104301:	74 24                	je     ffff800000104327 <kbdgetc+0x11d>$/;"	l
ffff800000104303	kernel.asm	/^ffff800000104303:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%rbp)$/;"	l
ffff80000010430a	kernel.asm	/^ffff80000010430a:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104311	kernel.asm	/^ffff800000104311:	80 ff ff $/;"	l
ffff800000104314	kernel.asm	/^ffff800000104314:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104316	kernel.asm	/^ffff800000104316:	83 e0 bf             	and    $0xffffffbf,%eax$/;"	l
ffff800000104319	kernel.asm	/^ffff800000104319:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010431b	kernel.asm	/^ffff80000010431b:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104322	kernel.asm	/^ffff800000104322:	80 ff ff $/;"	l
ffff800000104325	kernel.asm	/^ffff800000104325:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104327	kernel.asm	/^ffff800000104327:	48 ba 20 e0 10 00 00 	movabs $0xffff80000010e020,%rdx$/;"	l
ffff80000010432e	kernel.asm	/^ffff80000010432e:	80 ff ff $/;"	l
ffff800000104331	kernel.asm	/^ffff800000104331:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104334	kernel.asm	/^ffff800000104334:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff800000104338	kernel.asm	/^ffff800000104338:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff80000010433b	kernel.asm	/^ffff80000010433b:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104342	kernel.asm	/^ffff800000104342:	80 ff ff $/;"	l
ffff800000104345	kernel.asm	/^ffff800000104345:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104347	kernel.asm	/^ffff800000104347:	09 c2                	or     %eax,%edx$/;"	l
ffff800000104349	kernel.asm	/^ffff800000104349:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104350	kernel.asm	/^ffff800000104350:	80 ff ff $/;"	l
ffff800000104353	kernel.asm	/^ffff800000104353:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104355	kernel.asm	/^ffff800000104355:	48 ba 20 e1 10 00 00 	movabs $0xffff80000010e120,%rdx$/;"	l
ffff80000010435c	kernel.asm	/^ffff80000010435c:	80 ff ff $/;"	l
ffff80000010435f	kernel.asm	/^ffff80000010435f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104362	kernel.asm	/^ffff800000104362:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff800000104366	kernel.asm	/^ffff800000104366:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000104369	kernel.asm	/^ffff800000104369:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff800000104370	kernel.asm	/^ffff800000104370:	80 ff ff $/;"	l
ffff800000104373	kernel.asm	/^ffff800000104373:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104375	kernel.asm	/^ffff800000104375:	31 c2                	xor    %eax,%edx$/;"	l
ffff800000104377	kernel.asm	/^ffff800000104377:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff80000010437e	kernel.asm	/^ffff80000010437e:	80 ff ff $/;"	l
ffff800000104381	kernel.asm	/^ffff800000104381:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104383	kernel.asm	/^ffff800000104383:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff80000010438a	kernel.asm	/^ffff80000010438a:	80 ff ff $/;"	l
ffff80000010438d	kernel.asm	/^ffff80000010438d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010438f	kernel.asm	/^ffff80000010438f:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000104392	kernel.asm	/^ffff800000104392:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104394	kernel.asm	/^ffff800000104394:	48 b8 20 e5 10 00 00 	movabs $0xffff80000010e520,%rax$/;"	l
ffff80000010439b	kernel.asm	/^ffff80000010439b:	80 ff ff $/;"	l
ffff80000010439e	kernel.asm	/^ffff80000010439e:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001043a0	kernel.asm	/^ffff8000001043a0:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx$/;"	l
ffff8000001043a4	kernel.asm	/^ffff8000001043a4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001043a7	kernel.asm	/^ffff8000001043a7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001043aa	kernel.asm	/^ffff8000001043aa:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001043ad	kernel.asm	/^ffff8000001043ad:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001043b0	kernel.asm	/^ffff8000001043b0:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001043b3	kernel.asm	/^ffff8000001043b3:	48 b8 b8 a1 11 00 00 	movabs $0xffff80000011a1b8,%rax$/;"	l
ffff8000001043ba	kernel.asm	/^ffff8000001043ba:	80 ff ff $/;"	l
ffff8000001043bd	kernel.asm	/^ffff8000001043bd:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001043bf	kernel.asm	/^ffff8000001043bf:	83 e0 08             	and    $0x8,%eax$/;"	l
ffff8000001043c2	kernel.asm	/^ffff8000001043c2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001043c4	kernel.asm	/^ffff8000001043c4:	74 22                	je     ffff8000001043e8 <kbdgetc+0x1de>$/;"	l
ffff8000001043c6	kernel.asm	/^ffff8000001043c6:	83 7d f8 60          	cmpl   $0x60,-0x8(%rbp)$/;"	l
ffff8000001043ca	kernel.asm	/^ffff8000001043ca:	76 0c                	jbe    ffff8000001043d8 <kbdgetc+0x1ce>$/;"	l
ffff8000001043cc	kernel.asm	/^ffff8000001043cc:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%rbp)$/;"	l
ffff8000001043d0	kernel.asm	/^ffff8000001043d0:	77 06                	ja     ffff8000001043d8 <kbdgetc+0x1ce>$/;"	l
ffff8000001043d2	kernel.asm	/^ffff8000001043d2:	83 6d f8 20          	subl   $0x20,-0x8(%rbp)$/;"	l
ffff8000001043d6	kernel.asm	/^ffff8000001043d6:	eb 10                	jmp    ffff8000001043e8 <kbdgetc+0x1de>$/;"	l
ffff8000001043d8	kernel.asm	/^ffff8000001043d8:	83 7d f8 40          	cmpl   $0x40,-0x8(%rbp)$/;"	l
ffff8000001043dc	kernel.asm	/^ffff8000001043dc:	76 0a                	jbe    ffff8000001043e8 <kbdgetc+0x1de>$/;"	l
ffff8000001043de	kernel.asm	/^ffff8000001043de:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%rbp)$/;"	l
ffff8000001043e2	kernel.asm	/^ffff8000001043e2:	77 04                	ja     ffff8000001043e8 <kbdgetc+0x1de>$/;"	l
ffff8000001043e4	kernel.asm	/^ffff8000001043e4:	83 45 f8 20          	addl   $0x20,-0x8(%rbp)$/;"	l
ffff8000001043e8	kernel.asm	/^ffff8000001043e8:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001043eb	kernel.asm	/^ffff8000001043eb:	c9                   	leaveq $/;"	l
ffff8000001043ec	kernel.asm	/^ffff8000001043ec:	c3                   	retq   $/;"	l
ffff8000001043ed	kernel.asm	/^ffff8000001043ed <kbdintr>:$/;"	l
ffff8000001043ed	kernel.asm	/^ffff8000001043ed:	55                   	push   %rbp$/;"	l
ffff8000001043ee	kernel.asm	/^ffff8000001043ee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043f1	kernel.asm	/^ffff8000001043f1:	48 bf 0a 42 10 00 00 	movabs $0xffff80000010420a,%rdi$/;"	l
ffff8000001043f8	kernel.asm	/^ffff8000001043f8:	80 ff ff $/;"	l
ffff8000001043fb	kernel.asm	/^ffff8000001043fb:	48 b8 c7 0e 10 00 00 	movabs $0xffff800000100ec7,%rax$/;"	l
ffff800000104402	kernel.asm	/^ffff800000104402:	80 ff ff $/;"	l
ffff800000104405	kernel.asm	/^ffff800000104405:	ff d0                	callq  *%rax$/;"	l
ffff800000104407	kernel.asm	/^ffff800000104407:	90                   	nop$/;"	l
ffff800000104408	kernel.asm	/^ffff800000104408:	5d                   	pop    %rbp$/;"	l
ffff800000104409	kernel.asm	/^ffff800000104409:	c3                   	retq   $/;"	l
ffff80000010440a	kernel.asm	/^ffff80000010440a <inb>:$/;"	l
ffff80000010440a	kernel.asm	/^ffff80000010440a:	55                   	push   %rbp$/;"	l
ffff80000010440b	kernel.asm	/^ffff80000010440b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010440e	kernel.asm	/^ffff80000010440e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000104412	kernel.asm	/^ffff800000104412:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000104414	kernel.asm	/^ffff800000104414:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000104418	kernel.asm	/^ffff800000104418:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010441c	kernel.asm	/^ffff80000010441c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010441e	kernel.asm	/^ffff80000010441e:	ec                   	in     (%dx),%al$/;"	l
ffff80000010441f	kernel.asm	/^ffff80000010441f:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000104422	kernel.asm	/^ffff800000104422:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000104426	kernel.asm	/^ffff800000104426:	c9                   	leaveq $/;"	l
ffff800000104427	kernel.asm	/^ffff800000104427:	c3                   	retq   $/;"	l
ffff800000104428	kernel.asm	/^ffff800000104428 <outb>:$/;"	l
ffff800000104428	kernel.asm	/^ffff800000104428:	55                   	push   %rbp$/;"	l
ffff800000104429	kernel.asm	/^ffff800000104429:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010442c	kernel.asm	/^ffff80000010442c:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104430	kernel.asm	/^ffff800000104430:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000104432	kernel.asm	/^ffff800000104432:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000104434	kernel.asm	/^ffff800000104434:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000104438	kernel.asm	/^ffff800000104438:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010443b	kernel.asm	/^ffff80000010443b:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010443f	kernel.asm	/^ffff80000010443f:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000104443	kernel.asm	/^ffff800000104443:	ee                   	out    %al,(%dx)$/;"	l
ffff800000104444	kernel.asm	/^ffff800000104444:	90                   	nop$/;"	l
ffff800000104445	kernel.asm	/^ffff800000104445:	c9                   	leaveq $/;"	l
ffff800000104446	kernel.asm	/^ffff800000104446:	c3                   	retq   $/;"	l
ffff800000104447	kernel.asm	/^ffff800000104447 <readeflags>:$/;"	l
ffff800000104447	kernel.asm	/^ffff800000104447:	55                   	push   %rbp$/;"	l
ffff800000104448	kernel.asm	/^ffff800000104448:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010444b	kernel.asm	/^ffff80000010444b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010444f	kernel.asm	/^ffff80000010444f:	9c                   	pushfq $/;"	l
ffff800000104450	kernel.asm	/^ffff800000104450:	58                   	pop    %rax$/;"	l
ffff800000104451	kernel.asm	/^ffff800000104451:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104455	kernel.asm	/^ffff800000104455:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104459	kernel.asm	/^ffff800000104459:	c9                   	leaveq $/;"	l
ffff80000010445a	kernel.asm	/^ffff80000010445a:	c3                   	retq   $/;"	l
ffff80000010445b	kernel.asm	/^ffff80000010445b <lapicw>:$/;"	l
ffff80000010445b	kernel.asm	/^ffff80000010445b:	55                   	push   %rbp$/;"	l
ffff80000010445c	kernel.asm	/^ffff80000010445c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010445f	kernel.asm	/^ffff80000010445f:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104463	kernel.asm	/^ffff800000104463:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104466	kernel.asm	/^ffff800000104466:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000104469	kernel.asm	/^ffff800000104469:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff800000104470	kernel.asm	/^ffff800000104470:	80 ff ff $/;"	l
ffff800000104473	kernel.asm	/^ffff800000104473:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104476	kernel.asm	/^ffff800000104476:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104479	kernel.asm	/^ffff800000104479:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010447c	kernel.asm	/^ffff80000010447c:	48 c1 e2 02          	shl    $0x2,%rdx$/;"	l
ffff800000104480	kernel.asm	/^ffff800000104480:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000104483	kernel.asm	/^ffff800000104483:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000104486	kernel.asm	/^ffff800000104486:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff800000104488	kernel.asm	/^ffff800000104488:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff80000010448f	kernel.asm	/^ffff80000010448f:	80 ff ff $/;"	l
ffff800000104492	kernel.asm	/^ffff800000104492:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104495	kernel.asm	/^ffff800000104495:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff800000104499	kernel.asm	/^ffff800000104499:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010449b	kernel.asm	/^ffff80000010449b:	90                   	nop$/;"	l
ffff80000010449c	kernel.asm	/^ffff80000010449c:	c9                   	leaveq $/;"	l
ffff80000010449d	kernel.asm	/^ffff80000010449d:	c3                   	retq   $/;"	l
ffff80000010449e	kernel.asm	/^ffff80000010449e <lapicinit>:$/;"	l
ffff80000010449e	kernel.asm	/^ffff80000010449e:	55                   	push   %rbp$/;"	l
ffff80000010449f	kernel.asm	/^ffff80000010449f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001044a2	kernel.asm	/^ffff8000001044a2:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff8000001044a9	kernel.asm	/^ffff8000001044a9:	80 ff ff $/;"	l
ffff8000001044ac	kernel.asm	/^ffff8000001044ac:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001044af	kernel.asm	/^ffff8000001044af:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001044b2	kernel.asm	/^ffff8000001044b2:	0f 84 73 01 00 00    	je     ffff80000010462b <lapicinit+0x18d>$/;"	l
ffff8000001044b8	kernel.asm	/^ffff8000001044b8:	be 3f 01 00 00       	mov    $0x13f,%esi$/;"	l
ffff8000001044bd	kernel.asm	/^ffff8000001044bd:	bf 3c 00 00 00       	mov    $0x3c,%edi$/;"	l
ffff8000001044c2	kernel.asm	/^ffff8000001044c2:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001044c9	kernel.asm	/^ffff8000001044c9:	80 ff ff $/;"	l
ffff8000001044cc	kernel.asm	/^ffff8000001044cc:	ff d0                	callq  *%rax$/;"	l
ffff8000001044ce	kernel.asm	/^ffff8000001044ce:	be 0b 00 00 00       	mov    $0xb,%esi$/;"	l
ffff8000001044d3	kernel.asm	/^ffff8000001044d3:	bf f8 00 00 00       	mov    $0xf8,%edi$/;"	l
ffff8000001044d8	kernel.asm	/^ffff8000001044d8:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001044df	kernel.asm	/^ffff8000001044df:	80 ff ff $/;"	l
ffff8000001044e2	kernel.asm	/^ffff8000001044e2:	ff d0                	callq  *%rax$/;"	l
ffff8000001044e4	kernel.asm	/^ffff8000001044e4:	be 20 00 02 00       	mov    $0x20020,%esi$/;"	l
ffff8000001044e9	kernel.asm	/^ffff8000001044e9:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff8000001044ee	kernel.asm	/^ffff8000001044ee:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001044f5	kernel.asm	/^ffff8000001044f5:	80 ff ff $/;"	l
ffff8000001044f8	kernel.asm	/^ffff8000001044f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001044fa	kernel.asm	/^ffff8000001044fa:	be 80 96 98 00       	mov    $0x989680,%esi$/;"	l
ffff8000001044ff	kernel.asm	/^ffff8000001044ff:	bf e0 00 00 00       	mov    $0xe0,%edi$/;"	l
ffff800000104504	kernel.asm	/^ffff800000104504:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff80000010450b	kernel.asm	/^ffff80000010450b:	80 ff ff $/;"	l
ffff80000010450e	kernel.asm	/^ffff80000010450e:	ff d0                	callq  *%rax$/;"	l
ffff800000104510	kernel.asm	/^ffff800000104510:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff800000104515	kernel.asm	/^ffff800000104515:	bf d4 00 00 00       	mov    $0xd4,%edi$/;"	l
ffff80000010451a	kernel.asm	/^ffff80000010451a:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104521	kernel.asm	/^ffff800000104521:	80 ff ff $/;"	l
ffff800000104524	kernel.asm	/^ffff800000104524:	ff d0                	callq  *%rax$/;"	l
ffff800000104526	kernel.asm	/^ffff800000104526:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff80000010452b	kernel.asm	/^ffff80000010452b:	bf d8 00 00 00       	mov    $0xd8,%edi$/;"	l
ffff800000104530	kernel.asm	/^ffff800000104530:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104537	kernel.asm	/^ffff800000104537:	80 ff ff $/;"	l
ffff80000010453a	kernel.asm	/^ffff80000010453a:	ff d0                	callq  *%rax$/;"	l
ffff80000010453c	kernel.asm	/^ffff80000010453c:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff800000104543	kernel.asm	/^ffff800000104543:	80 ff ff $/;"	l
ffff800000104546	kernel.asm	/^ffff800000104546:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104549	kernel.asm	/^ffff800000104549:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff80000010454d	kernel.asm	/^ffff80000010454d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010454f	kernel.asm	/^ffff80000010454f:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff800000104552	kernel.asm	/^ffff800000104552:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104555	kernel.asm	/^ffff800000104555:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff800000104558	kernel.asm	/^ffff800000104558:	76 16                	jbe    ffff800000104570 <lapicinit+0xd2>$/;"	l
ffff80000010455a	kernel.asm	/^ffff80000010455a:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff80000010455f	kernel.asm	/^ffff80000010455f:	bf d0 00 00 00       	mov    $0xd0,%edi$/;"	l
ffff800000104564	kernel.asm	/^ffff800000104564:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff80000010456b	kernel.asm	/^ffff80000010456b:	80 ff ff $/;"	l
ffff80000010456e	kernel.asm	/^ffff80000010456e:	ff d0                	callq  *%rax$/;"	l
ffff800000104570	kernel.asm	/^ffff800000104570:	be 33 00 00 00       	mov    $0x33,%esi$/;"	l
ffff800000104575	kernel.asm	/^ffff800000104575:	bf dc 00 00 00       	mov    $0xdc,%edi$/;"	l
ffff80000010457a	kernel.asm	/^ffff80000010457a:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104581	kernel.asm	/^ffff800000104581:	80 ff ff $/;"	l
ffff800000104584	kernel.asm	/^ffff800000104584:	ff d0                	callq  *%rax$/;"	l
ffff800000104586	kernel.asm	/^ffff800000104586:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010458b	kernel.asm	/^ffff80000010458b:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff800000104590	kernel.asm	/^ffff800000104590:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104597	kernel.asm	/^ffff800000104597:	80 ff ff $/;"	l
ffff80000010459a	kernel.asm	/^ffff80000010459a:	ff d0                	callq  *%rax$/;"	l
ffff80000010459c	kernel.asm	/^ffff80000010459c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001045a1	kernel.asm	/^ffff8000001045a1:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff8000001045a6	kernel.asm	/^ffff8000001045a6:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001045ad	kernel.asm	/^ffff8000001045ad:	80 ff ff $/;"	l
ffff8000001045b0	kernel.asm	/^ffff8000001045b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001045b2	kernel.asm	/^ffff8000001045b2:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001045b7	kernel.asm	/^ffff8000001045b7:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff8000001045bc	kernel.asm	/^ffff8000001045bc:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001045c3	kernel.asm	/^ffff8000001045c3:	80 ff ff $/;"	l
ffff8000001045c6	kernel.asm	/^ffff8000001045c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001045c8	kernel.asm	/^ffff8000001045c8:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001045cd	kernel.asm	/^ffff8000001045cd:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff8000001045d2	kernel.asm	/^ffff8000001045d2:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001045d9	kernel.asm	/^ffff8000001045d9:	80 ff ff $/;"	l
ffff8000001045dc	kernel.asm	/^ffff8000001045dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001045de	kernel.asm	/^ffff8000001045de:	be 00 85 08 00       	mov    $0x88500,%esi$/;"	l
ffff8000001045e3	kernel.asm	/^ffff8000001045e3:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001045e8	kernel.asm	/^ffff8000001045e8:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001045ef	kernel.asm	/^ffff8000001045ef:	80 ff ff $/;"	l
ffff8000001045f2	kernel.asm	/^ffff8000001045f2:	ff d0                	callq  *%rax$/;"	l
ffff8000001045f4	kernel.asm	/^ffff8000001045f4:	90                   	nop$/;"	l
ffff8000001045f5	kernel.asm	/^ffff8000001045f5:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff8000001045fc	kernel.asm	/^ffff8000001045fc:	80 ff ff $/;"	l
ffff8000001045ff	kernel.asm	/^ffff8000001045ff:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104602	kernel.asm	/^ffff800000104602:	48 05 00 03 00 00    	add    $0x300,%rax$/;"	l
ffff800000104608	kernel.asm	/^ffff800000104608:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010460a	kernel.asm	/^ffff80000010460a:	25 00 10 00 00       	and    $0x1000,%eax$/;"	l
ffff80000010460f	kernel.asm	/^ffff80000010460f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104611	kernel.asm	/^ffff800000104611:	75 e2                	jne    ffff8000001045f5 <lapicinit+0x157>$/;"	l
ffff800000104613	kernel.asm	/^ffff800000104613:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104618	kernel.asm	/^ffff800000104618:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff80000010461d	kernel.asm	/^ffff80000010461d:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104624	kernel.asm	/^ffff800000104624:	80 ff ff $/;"	l
ffff800000104627	kernel.asm	/^ffff800000104627:	ff d0                	callq  *%rax$/;"	l
ffff800000104629	kernel.asm	/^ffff800000104629:	eb 01                	jmp    ffff80000010462c <lapicinit+0x18e>$/;"	l
ffff80000010462b	kernel.asm	/^ffff80000010462b:	90                   	nop$/;"	l
ffff80000010462c	kernel.asm	/^ffff80000010462c:	5d                   	pop    %rbp$/;"	l
ffff80000010462d	kernel.asm	/^ffff80000010462d:	c3                   	retq   $/;"	l
ffff80000010462e	kernel.asm	/^ffff80000010462e <cpunum>:$/;"	l
ffff80000010462e	kernel.asm	/^ffff80000010462e:	55                   	push   %rbp$/;"	l
ffff80000010462f	kernel.asm	/^ffff80000010462f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104632	kernel.asm	/^ffff800000104632:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104636	kernel.asm	/^ffff800000104636:	48 b8 47 44 10 00 00 	movabs $0xffff800000104447,%rax$/;"	l
ffff80000010463d	kernel.asm	/^ffff80000010463d:	80 ff ff $/;"	l
ffff800000104640	kernel.asm	/^ffff800000104640:	ff d0                	callq  *%rax$/;"	l
ffff800000104642	kernel.asm	/^ffff800000104642:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000104647	kernel.asm	/^ffff800000104647:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010464a	kernel.asm	/^ffff80000010464a:	74 41                	je     ffff80000010468d <cpunum+0x5f>$/;"	l
ffff80000010464c	kernel.asm	/^ffff80000010464c:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000104653	kernel.asm	/^ffff800000104653:	80 ff ff $/;"	l
ffff800000104656	kernel.asm	/^ffff800000104656:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104658	kernel.asm	/^ffff800000104658:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff80000010465b	kernel.asm	/^ffff80000010465b:	48 ba c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rdx$/;"	l
ffff800000104662	kernel.asm	/^ffff800000104662:	80 ff ff $/;"	l
ffff800000104665	kernel.asm	/^ffff800000104665:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff800000104667	kernel.asm	/^ffff800000104667:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104669	kernel.asm	/^ffff800000104669:	75 22                	jne    ffff80000010468d <cpunum+0x5f>$/;"	l
ffff80000010466b	kernel.asm	/^ffff80000010466b:	48 8b 45 08          	mov    0x8(%rbp),%rax$/;"	l
ffff80000010466f	kernel.asm	/^ffff80000010466f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000104672	kernel.asm	/^ffff800000104672:	48 bf f0 cc 10 00 00 	movabs $0xffff80000010ccf0,%rdi$/;"	l
ffff800000104679	kernel.asm	/^ffff800000104679:	80 ff ff $/;"	l
ffff80000010467c	kernel.asm	/^ffff80000010467c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104681	kernel.asm	/^ffff800000104681:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000104688	kernel.asm	/^ffff800000104688:	80 ff ff $/;"	l
ffff80000010468b	kernel.asm	/^ffff80000010468b:	ff d2                	callq  *%rdx$/;"	l
ffff80000010468d	kernel.asm	/^ffff80000010468d:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff800000104694	kernel.asm	/^ffff800000104694:	80 ff ff $/;"	l
ffff800000104697	kernel.asm	/^ffff800000104697:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010469a	kernel.asm	/^ffff80000010469a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010469d	kernel.asm	/^ffff80000010469d:	75 0a                	jne    ffff8000001046a9 <cpunum+0x7b>$/;"	l
ffff80000010469f	kernel.asm	/^ffff80000010469f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001046a4	kernel.asm	/^ffff8000001046a4:	e9 8a 00 00 00       	jmpq   ffff800000104733 <cpunum+0x105>$/;"	l
ffff8000001046a9	kernel.asm	/^ffff8000001046a9:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff8000001046b0	kernel.asm	/^ffff8000001046b0:	80 ff ff $/;"	l
ffff8000001046b3	kernel.asm	/^ffff8000001046b3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001046b6	kernel.asm	/^ffff8000001046b6:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff8000001046ba	kernel.asm	/^ffff8000001046ba:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001046bc	kernel.asm	/^ffff8000001046bc:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff8000001046bf	kernel.asm	/^ffff8000001046bf:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001046c2	kernel.asm	/^ffff8000001046c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001046c9	kernel.asm	/^ffff8000001046c9:	eb 41                	jmp    ffff80000010470c <cpunum+0xde>$/;"	l
ffff8000001046cb	kernel.asm	/^ffff8000001046cb:	48 b9 e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rcx$/;"	l
ffff8000001046d2	kernel.asm	/^ffff8000001046d2:	80 ff ff $/;"	l
ffff8000001046d5	kernel.asm	/^ffff8000001046d5:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001046d8	kernel.asm	/^ffff8000001046d8:	48 98                	cltq   $/;"	l
ffff8000001046da	kernel.asm	/^ffff8000001046da:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001046dd	kernel.asm	/^ffff8000001046dd:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001046e0	kernel.asm	/^ffff8000001046e0:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff8000001046e4	kernel.asm	/^ffff8000001046e4:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001046e7	kernel.asm	/^ffff8000001046e7:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001046ea	kernel.asm	/^ffff8000001046ea:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff8000001046ee	kernel.asm	/^ffff8000001046ee:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff8000001046f1	kernel.asm	/^ffff8000001046f1:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff8000001046f4	kernel.asm	/^ffff8000001046f4:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff8000001046f8	kernel.asm	/^ffff8000001046f8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001046fb	kernel.asm	/^ffff8000001046fb:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001046fe	kernel.asm	/^ffff8000001046fe:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff800000104701	kernel.asm	/^ffff800000104701:	75 05                	jne    ffff800000104708 <cpunum+0xda>$/;"	l
ffff800000104703	kernel.asm	/^ffff800000104703:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104706	kernel.asm	/^ffff800000104706:	eb 2b                	jmp    ffff800000104733 <cpunum+0x105>$/;"	l
ffff800000104708	kernel.asm	/^ffff800000104708:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010470c	kernel.asm	/^ffff80000010470c:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000104713	kernel.asm	/^ffff800000104713:	80 ff ff $/;"	l
ffff800000104716	kernel.asm	/^ffff800000104716:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104718	kernel.asm	/^ffff800000104718:	39 45 fc             	cmp    %eax,-0x4(%rbp)$/;"	l
ffff80000010471b	kernel.asm	/^ffff80000010471b:	7c ae                	jl     ffff8000001046cb <cpunum+0x9d>$/;"	l
ffff80000010471d	kernel.asm	/^ffff80000010471d:	48 bf 1c cd 10 00 00 	movabs $0xffff80000010cd1c,%rdi$/;"	l
ffff800000104724	kernel.asm	/^ffff800000104724:	80 ff ff $/;"	l
ffff800000104727	kernel.asm	/^ffff800000104727:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010472e	kernel.asm	/^ffff80000010472e:	80 ff ff $/;"	l
ffff800000104731	kernel.asm	/^ffff800000104731:	ff d0                	callq  *%rax$/;"	l
ffff800000104733	kernel.asm	/^ffff800000104733:	c9                   	leaveq $/;"	l
ffff800000104734	kernel.asm	/^ffff800000104734:	c3                   	retq   $/;"	l
ffff800000104735	kernel.asm	/^ffff800000104735 <lapiceoi>:$/;"	l
ffff800000104735	kernel.asm	/^ffff800000104735:	55                   	push   %rbp$/;"	l
ffff800000104736	kernel.asm	/^ffff800000104736:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104739	kernel.asm	/^ffff800000104739:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff800000104740	kernel.asm	/^ffff800000104740:	80 ff ff $/;"	l
ffff800000104743	kernel.asm	/^ffff800000104743:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104746	kernel.asm	/^ffff800000104746:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104749	kernel.asm	/^ffff800000104749:	74 16                	je     ffff800000104761 <lapiceoi+0x2c>$/;"	l
ffff80000010474b	kernel.asm	/^ffff80000010474b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104750	kernel.asm	/^ffff800000104750:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff800000104755	kernel.asm	/^ffff800000104755:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff80000010475c	kernel.asm	/^ffff80000010475c:	80 ff ff $/;"	l
ffff80000010475f	kernel.asm	/^ffff80000010475f:	ff d0                	callq  *%rax$/;"	l
ffff800000104761	kernel.asm	/^ffff800000104761:	90                   	nop$/;"	l
ffff800000104762	kernel.asm	/^ffff800000104762:	5d                   	pop    %rbp$/;"	l
ffff800000104763	kernel.asm	/^ffff800000104763:	c3                   	retq   $/;"	l
ffff800000104764	kernel.asm	/^ffff800000104764 <microdelay>:$/;"	l
ffff800000104764	kernel.asm	/^ffff800000104764:	55                   	push   %rbp$/;"	l
ffff800000104765	kernel.asm	/^ffff800000104765:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104768	kernel.asm	/^ffff800000104768:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010476c	kernel.asm	/^ffff80000010476c:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff80000010476f	kernel.asm	/^ffff80000010476f:	90                   	nop$/;"	l
ffff800000104770	kernel.asm	/^ffff800000104770:	c9                   	leaveq $/;"	l
ffff800000104771	kernel.asm	/^ffff800000104771:	c3                   	retq   $/;"	l
ffff800000104772	kernel.asm	/^ffff800000104772 <lapicstartap>:$/;"	l
ffff800000104772	kernel.asm	/^ffff800000104772:	55                   	push   %rbp$/;"	l
ffff800000104773	kernel.asm	/^ffff800000104773:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104776	kernel.asm	/^ffff800000104776:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010477a	kernel.asm	/^ffff80000010477a:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010477c	kernel.asm	/^ffff80000010477c:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff80000010477f	kernel.asm	/^ffff80000010477f:	88 45 ec             	mov    %al,-0x14(%rbp)$/;"	l
ffff800000104782	kernel.asm	/^ffff800000104782:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000104787	kernel.asm	/^ffff800000104787:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff80000010478c	kernel.asm	/^ffff80000010478c:	48 b8 28 44 10 00 00 	movabs $0xffff800000104428,%rax$/;"	l
ffff800000104793	kernel.asm	/^ffff800000104793:	80 ff ff $/;"	l
ffff800000104796	kernel.asm	/^ffff800000104796:	ff d0                	callq  *%rax$/;"	l
ffff800000104798	kernel.asm	/^ffff800000104798:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff80000010479d	kernel.asm	/^ffff80000010479d:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff8000001047a2	kernel.asm	/^ffff8000001047a2:	48 b8 28 44 10 00 00 	movabs $0xffff800000104428,%rax$/;"	l
ffff8000001047a9	kernel.asm	/^ffff8000001047a9:	80 ff ff $/;"	l
ffff8000001047ac	kernel.asm	/^ffff8000001047ac:	ff d0                	callq  *%rax$/;"	l
ffff8000001047ae	kernel.asm	/^ffff8000001047ae:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax$/;"	l
ffff8000001047b5	kernel.asm	/^ffff8000001047b5:	80 ff ff $/;"	l
ffff8000001047b8	kernel.asm	/^ffff8000001047b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001047bc	kernel.asm	/^ffff8000001047bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001047c0	kernel.asm	/^ffff8000001047c0:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff8000001047c5	kernel.asm	/^ffff8000001047c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001047c9	kernel.asm	/^ffff8000001047c9:	48 83 c0 02          	add    $0x2,%rax$/;"	l
ffff8000001047cd	kernel.asm	/^ffff8000001047cd:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff8000001047d0	kernel.asm	/^ffff8000001047d0:	c1 ea 04             	shr    $0x4,%edx$/;"	l
ffff8000001047d3	kernel.asm	/^ffff8000001047d3:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001047d6	kernel.asm	/^ffff8000001047d6:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff8000001047da	kernel.asm	/^ffff8000001047da:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001047dd	kernel.asm	/^ffff8000001047dd:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001047df	kernel.asm	/^ffff8000001047df:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff8000001047e4	kernel.asm	/^ffff8000001047e4:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff8000001047eb	kernel.asm	/^ffff8000001047eb:	80 ff ff $/;"	l
ffff8000001047ee	kernel.asm	/^ffff8000001047ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001047f0	kernel.asm	/^ffff8000001047f0:	be 00 c5 00 00       	mov    $0xc500,%esi$/;"	l
ffff8000001047f5	kernel.asm	/^ffff8000001047f5:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001047fa	kernel.asm	/^ffff8000001047fa:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104801	kernel.asm	/^ffff800000104801:	80 ff ff $/;"	l
ffff800000104804	kernel.asm	/^ffff800000104804:	ff d0                	callq  *%rax$/;"	l
ffff800000104806	kernel.asm	/^ffff800000104806:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff80000010480b	kernel.asm	/^ffff80000010480b:	48 b8 64 47 10 00 00 	movabs $0xffff800000104764,%rax$/;"	l
ffff800000104812	kernel.asm	/^ffff800000104812:	80 ff ff $/;"	l
ffff800000104815	kernel.asm	/^ffff800000104815:	ff d0                	callq  *%rax$/;"	l
ffff800000104817	kernel.asm	/^ffff800000104817:	be 00 85 00 00       	mov    $0x8500,%esi$/;"	l
ffff80000010481c	kernel.asm	/^ffff80000010481c:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff800000104821	kernel.asm	/^ffff800000104821:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104828	kernel.asm	/^ffff800000104828:	80 ff ff $/;"	l
ffff80000010482b	kernel.asm	/^ffff80000010482b:	ff d0                	callq  *%rax$/;"	l
ffff80000010482d	kernel.asm	/^ffff80000010482d:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff800000104832	kernel.asm	/^ffff800000104832:	48 b8 64 47 10 00 00 	movabs $0xffff800000104764,%rax$/;"	l
ffff800000104839	kernel.asm	/^ffff800000104839:	80 ff ff $/;"	l
ffff80000010483c	kernel.asm	/^ffff80000010483c:	ff d0                	callq  *%rax$/;"	l
ffff80000010483e	kernel.asm	/^ffff80000010483e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104845	kernel.asm	/^ffff800000104845:	eb 4b                	jmp    ffff800000104892 <lapicstartap+0x120>$/;"	l
ffff800000104847	kernel.asm	/^ffff800000104847:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff80000010484b	kernel.asm	/^ffff80000010484b:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff80000010484e	kernel.asm	/^ffff80000010484e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000104850	kernel.asm	/^ffff800000104850:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff800000104855	kernel.asm	/^ffff800000104855:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff80000010485c	kernel.asm	/^ffff80000010485c:	80 ff ff $/;"	l
ffff80000010485f	kernel.asm	/^ffff80000010485f:	ff d0                	callq  *%rax$/;"	l
ffff800000104861	kernel.asm	/^ffff800000104861:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104864	kernel.asm	/^ffff800000104864:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff800000104867	kernel.asm	/^ffff800000104867:	80 cc 06             	or     $0x6,%ah$/;"	l
ffff80000010486a	kernel.asm	/^ffff80000010486a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010486c	kernel.asm	/^ffff80000010486c:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff800000104871	kernel.asm	/^ffff800000104871:	48 b8 5b 44 10 00 00 	movabs $0xffff80000010445b,%rax$/;"	l
ffff800000104878	kernel.asm	/^ffff800000104878:	80 ff ff $/;"	l
ffff80000010487b	kernel.asm	/^ffff80000010487b:	ff d0                	callq  *%rax$/;"	l
ffff80000010487d	kernel.asm	/^ffff80000010487d:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff800000104882	kernel.asm	/^ffff800000104882:	48 b8 64 47 10 00 00 	movabs $0xffff800000104764,%rax$/;"	l
ffff800000104889	kernel.asm	/^ffff800000104889:	80 ff ff $/;"	l
ffff80000010488c	kernel.asm	/^ffff80000010488c:	ff d0                	callq  *%rax$/;"	l
ffff80000010488e	kernel.asm	/^ffff80000010488e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104892	kernel.asm	/^ffff800000104892:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104896	kernel.asm	/^ffff800000104896:	7e af                	jle    ffff800000104847 <lapicstartap+0xd5>$/;"	l
ffff800000104898	kernel.asm	/^ffff800000104898:	90                   	nop$/;"	l
ffff800000104899	kernel.asm	/^ffff800000104899:	c9                   	leaveq $/;"	l
ffff80000010489a	kernel.asm	/^ffff80000010489a:	c3                   	retq   $/;"	l
ffff80000010489b	kernel.asm	/^ffff80000010489b <cmos_read>:$/;"	l
ffff80000010489b	kernel.asm	/^ffff80000010489b:	55                   	push   %rbp$/;"	l
ffff80000010489c	kernel.asm	/^ffff80000010489c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010489f	kernel.asm	/^ffff80000010489f:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001048a3	kernel.asm	/^ffff8000001048a3:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff8000001048a6	kernel.asm	/^ffff8000001048a6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001048a9	kernel.asm	/^ffff8000001048a9:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001048ac	kernel.asm	/^ffff8000001048ac:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001048ae	kernel.asm	/^ffff8000001048ae:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff8000001048b3	kernel.asm	/^ffff8000001048b3:	48 b8 28 44 10 00 00 	movabs $0xffff800000104428,%rax$/;"	l
ffff8000001048ba	kernel.asm	/^ffff8000001048ba:	80 ff ff $/;"	l
ffff8000001048bd	kernel.asm	/^ffff8000001048bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001048bf	kernel.asm	/^ffff8000001048bf:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff8000001048c4	kernel.asm	/^ffff8000001048c4:	48 b8 64 47 10 00 00 	movabs $0xffff800000104764,%rax$/;"	l
ffff8000001048cb	kernel.asm	/^ffff8000001048cb:	80 ff ff $/;"	l
ffff8000001048ce	kernel.asm	/^ffff8000001048ce:	ff d0                	callq  *%rax$/;"	l
ffff8000001048d0	kernel.asm	/^ffff8000001048d0:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff8000001048d5	kernel.asm	/^ffff8000001048d5:	48 b8 0a 44 10 00 00 	movabs $0xffff80000010440a,%rax$/;"	l
ffff8000001048dc	kernel.asm	/^ffff8000001048dc:	80 ff ff $/;"	l
ffff8000001048df	kernel.asm	/^ffff8000001048df:	ff d0                	callq  *%rax$/;"	l
ffff8000001048e1	kernel.asm	/^ffff8000001048e1:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001048e4	kernel.asm	/^ffff8000001048e4:	c9                   	leaveq $/;"	l
ffff8000001048e5	kernel.asm	/^ffff8000001048e5:	c3                   	retq   $/;"	l
ffff8000001048e6	kernel.asm	/^ffff8000001048e6 <fill_rtcdate>:$/;"	l
ffff8000001048e6	kernel.asm	/^ffff8000001048e6:	55                   	push   %rbp$/;"	l
ffff8000001048e7	kernel.asm	/^ffff8000001048e7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001048ea	kernel.asm	/^ffff8000001048ea:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001048ee	kernel.asm	/^ffff8000001048ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001048f2	kernel.asm	/^ffff8000001048f2:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001048f7	kernel.asm	/^ffff8000001048f7:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff8000001048fe	kernel.asm	/^ffff8000001048fe:	80 ff ff $/;"	l
ffff800000104901	kernel.asm	/^ffff800000104901:	ff d0                	callq  *%rax$/;"	l
ffff800000104903	kernel.asm	/^ffff800000104903:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104905	kernel.asm	/^ffff800000104905:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104909	kernel.asm	/^ffff800000104909:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010490b	kernel.asm	/^ffff80000010490b:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000104910	kernel.asm	/^ffff800000104910:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff800000104917	kernel.asm	/^ffff800000104917:	80 ff ff $/;"	l
ffff80000010491a	kernel.asm	/^ffff80000010491a:	ff d0                	callq  *%rax$/;"	l
ffff80000010491c	kernel.asm	/^ffff80000010491c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010491e	kernel.asm	/^ffff80000010491e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104922	kernel.asm	/^ffff800000104922:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000104925	kernel.asm	/^ffff800000104925:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010492a	kernel.asm	/^ffff80000010492a:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff800000104931	kernel.asm	/^ffff800000104931:	80 ff ff $/;"	l
ffff800000104934	kernel.asm	/^ffff800000104934:	ff d0                	callq  *%rax$/;"	l
ffff800000104936	kernel.asm	/^ffff800000104936:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104938	kernel.asm	/^ffff800000104938:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010493c	kernel.asm	/^ffff80000010493c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff80000010493f	kernel.asm	/^ffff80000010493f:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff800000104944	kernel.asm	/^ffff800000104944:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff80000010494b	kernel.asm	/^ffff80000010494b:	80 ff ff $/;"	l
ffff80000010494e	kernel.asm	/^ffff80000010494e:	ff d0                	callq  *%rax$/;"	l
ffff800000104950	kernel.asm	/^ffff800000104950:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104952	kernel.asm	/^ffff800000104952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104956	kernel.asm	/^ffff800000104956:	89 50 0c             	mov    %edx,0xc(%rax)$/;"	l
ffff800000104959	kernel.asm	/^ffff800000104959:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010495e	kernel.asm	/^ffff80000010495e:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff800000104965	kernel.asm	/^ffff800000104965:	80 ff ff $/;"	l
ffff800000104968	kernel.asm	/^ffff800000104968:	ff d0                	callq  *%rax$/;"	l
ffff80000010496a	kernel.asm	/^ffff80000010496a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010496c	kernel.asm	/^ffff80000010496c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104970	kernel.asm	/^ffff800000104970:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000104973	kernel.asm	/^ffff800000104973:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff800000104978	kernel.asm	/^ffff800000104978:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff80000010497f	kernel.asm	/^ffff80000010497f:	80 ff ff $/;"	l
ffff800000104982	kernel.asm	/^ffff800000104982:	ff d0                	callq  *%rax$/;"	l
ffff800000104984	kernel.asm	/^ffff800000104984:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104986	kernel.asm	/^ffff800000104986:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010498a	kernel.asm	/^ffff80000010498a:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff80000010498d	kernel.asm	/^ffff80000010498d:	90                   	nop$/;"	l
ffff80000010498e	kernel.asm	/^ffff80000010498e:	c9                   	leaveq $/;"	l
ffff80000010498f	kernel.asm	/^ffff80000010498f:	c3                   	retq   $/;"	l
ffff800000104990	kernel.asm	/^ffff800000104990 <cmostime>:$/;"	l
ffff800000104990	kernel.asm	/^ffff800000104990:	55                   	push   %rbp$/;"	l
ffff800000104991	kernel.asm	/^ffff800000104991:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104994	kernel.asm	/^ffff800000104994:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff800000104998	kernel.asm	/^ffff800000104998:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)$/;"	l
ffff80000010499c	kernel.asm	/^ffff80000010499c:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff8000001049a1	kernel.asm	/^ffff8000001049a1:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff8000001049a8	kernel.asm	/^ffff8000001049a8:	80 ff ff $/;"	l
ffff8000001049ab	kernel.asm	/^ffff8000001049ab:	ff d0                	callq  *%rax$/;"	l
ffff8000001049ad	kernel.asm	/^ffff8000001049ad:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001049b0	kernel.asm	/^ffff8000001049b0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001049b3	kernel.asm	/^ffff8000001049b3:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff8000001049b6	kernel.asm	/^ffff8000001049b6:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001049b8	kernel.asm	/^ffff8000001049b8:	0f 94 c0             	sete   %al$/;"	l
ffff8000001049bb	kernel.asm	/^ffff8000001049bb:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001049be	kernel.asm	/^ffff8000001049be:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001049c1	kernel.asm	/^ffff8000001049c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff8000001049c5	kernel.asm	/^ffff8000001049c5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001049c8	kernel.asm	/^ffff8000001049c8:	48 b8 e6 48 10 00 00 	movabs $0xffff8000001048e6,%rax$/;"	l
ffff8000001049cf	kernel.asm	/^ffff8000001049cf:	80 ff ff $/;"	l
ffff8000001049d2	kernel.asm	/^ffff8000001049d2:	ff d0                	callq  *%rax$/;"	l
ffff8000001049d4	kernel.asm	/^ffff8000001049d4:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff8000001049d9	kernel.asm	/^ffff8000001049d9:	48 b8 9b 48 10 00 00 	movabs $0xffff80000010489b,%rax$/;"	l
ffff8000001049e0	kernel.asm	/^ffff8000001049e0:	80 ff ff $/;"	l
ffff8000001049e3	kernel.asm	/^ffff8000001049e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001049e5	kernel.asm	/^ffff8000001049e5:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff8000001049ea	kernel.asm	/^ffff8000001049ea:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001049ec	kernel.asm	/^ffff8000001049ec:	75 38                	jne    ffff800000104a26 <cmostime+0x96>$/;"	l
ffff8000001049ee	kernel.asm	/^ffff8000001049ee:	48 8d 45 c0          	lea    -0x40(%rbp),%rax$/;"	l
ffff8000001049f2	kernel.asm	/^ffff8000001049f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001049f5	kernel.asm	/^ffff8000001049f5:	48 b8 e6 48 10 00 00 	movabs $0xffff8000001048e6,%rax$/;"	l
ffff8000001049fc	kernel.asm	/^ffff8000001049fc:	80 ff ff $/;"	l
ffff8000001049ff	kernel.asm	/^ffff8000001049ff:	ff d0                	callq  *%rax$/;"	l
ffff800000104a01	kernel.asm	/^ffff800000104a01:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx$/;"	l
ffff800000104a05	kernel.asm	/^ffff800000104a05:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000104a09	kernel.asm	/^ffff800000104a09:	ba 18 00 00 00       	mov    $0x18,%edx$/;"	l
ffff800000104a0e	kernel.asm	/^ffff800000104a0e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104a11	kernel.asm	/^ffff800000104a11:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104a14	kernel.asm	/^ffff800000104a14:	48 b8 24 77 10 00 00 	movabs $0xffff800000107724,%rax$/;"	l
ffff800000104a1b	kernel.asm	/^ffff800000104a1b:	80 ff ff $/;"	l
ffff800000104a1e	kernel.asm	/^ffff800000104a1e:	ff d0                	callq  *%rax$/;"	l
ffff800000104a20	kernel.asm	/^ffff800000104a20:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104a22	kernel.asm	/^ffff800000104a22:	74 05                	je     ffff800000104a29 <cmostime+0x99>$/;"	l
ffff800000104a24	kernel.asm	/^ffff800000104a24:	eb 9b                	jmp    ffff8000001049c1 <cmostime+0x31>$/;"	l
ffff800000104a26	kernel.asm	/^ffff800000104a26:	90                   	nop$/;"	l
ffff800000104a27	kernel.asm	/^ffff800000104a27:	eb 98                	jmp    ffff8000001049c1 <cmostime+0x31>$/;"	l
ffff800000104a29	kernel.asm	/^ffff800000104a29:	90                   	nop$/;"	l
ffff800000104a2a	kernel.asm	/^ffff800000104a2a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff800000104a2e	kernel.asm	/^ffff800000104a2e:	0f 84 b4 00 00 00    	je     ffff800000104ae8 <cmostime+0x158>$/;"	l
ffff800000104a34	kernel.asm	/^ffff800000104a34:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff800000104a37	kernel.asm	/^ffff800000104a37:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a3a	kernel.asm	/^ffff800000104a3a:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a3c	kernel.asm	/^ffff800000104a3c:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a3e	kernel.asm	/^ffff800000104a3e:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a41	kernel.asm	/^ffff800000104a41:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a43	kernel.asm	/^ffff800000104a43:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a45	kernel.asm	/^ffff800000104a45:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a47	kernel.asm	/^ffff800000104a47:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff800000104a4a	kernel.asm	/^ffff800000104a4a:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a4d	kernel.asm	/^ffff800000104a4d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a4f	kernel.asm	/^ffff800000104a4f:	89 45 e0             	mov    %eax,-0x20(%rbp)$/;"	l
ffff800000104a52	kernel.asm	/^ffff800000104a52:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000104a55	kernel.asm	/^ffff800000104a55:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a58	kernel.asm	/^ffff800000104a58:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a5a	kernel.asm	/^ffff800000104a5a:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a5c	kernel.asm	/^ffff800000104a5c:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a5f	kernel.asm	/^ffff800000104a5f:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a61	kernel.asm	/^ffff800000104a61:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a63	kernel.asm	/^ffff800000104a63:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a65	kernel.asm	/^ffff800000104a65:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000104a68	kernel.asm	/^ffff800000104a68:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a6b	kernel.asm	/^ffff800000104a6b:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a6d	kernel.asm	/^ffff800000104a6d:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
ffff800000104a70	kernel.asm	/^ffff800000104a70:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104a73	kernel.asm	/^ffff800000104a73:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a76	kernel.asm	/^ffff800000104a76:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a78	kernel.asm	/^ffff800000104a78:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a7a	kernel.asm	/^ffff800000104a7a:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a7d	kernel.asm	/^ffff800000104a7d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a7f	kernel.asm	/^ffff800000104a7f:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a81	kernel.asm	/^ffff800000104a81:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a83	kernel.asm	/^ffff800000104a83:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104a86	kernel.asm	/^ffff800000104a86:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104a89	kernel.asm	/^ffff800000104a89:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a8b	kernel.asm	/^ffff800000104a8b:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000104a8e	kernel.asm	/^ffff800000104a8e:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104a91	kernel.asm	/^ffff800000104a91:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104a94	kernel.asm	/^ffff800000104a94:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104a96	kernel.asm	/^ffff800000104a96:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104a98	kernel.asm	/^ffff800000104a98:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104a9b	kernel.asm	/^ffff800000104a9b:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104a9d	kernel.asm	/^ffff800000104a9d:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104a9f	kernel.asm	/^ffff800000104a9f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104aa1	kernel.asm	/^ffff800000104aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104aa4	kernel.asm	/^ffff800000104aa4:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104aa7	kernel.asm	/^ffff800000104aa7:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104aa9	kernel.asm	/^ffff800000104aa9:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000104aac	kernel.asm	/^ffff800000104aac:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104aaf	kernel.asm	/^ffff800000104aaf:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104ab2	kernel.asm	/^ffff800000104ab2:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104ab4	kernel.asm	/^ffff800000104ab4:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104ab6	kernel.asm	/^ffff800000104ab6:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104ab9	kernel.asm	/^ffff800000104ab9:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104abb	kernel.asm	/^ffff800000104abb:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104abd	kernel.asm	/^ffff800000104abd:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104abf	kernel.asm	/^ffff800000104abf:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104ac2	kernel.asm	/^ffff800000104ac2:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104ac5	kernel.asm	/^ffff800000104ac5:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104ac7	kernel.asm	/^ffff800000104ac7:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000104aca	kernel.asm	/^ffff800000104aca:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104acd	kernel.asm	/^ffff800000104acd:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104ad0	kernel.asm	/^ffff800000104ad0:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104ad2	kernel.asm	/^ffff800000104ad2:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104ad4	kernel.asm	/^ffff800000104ad4:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104ad7	kernel.asm	/^ffff800000104ad7:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104ad9	kernel.asm	/^ffff800000104ad9:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104adb	kernel.asm	/^ffff800000104adb:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104add	kernel.asm	/^ffff800000104add:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104ae0	kernel.asm	/^ffff800000104ae0:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104ae3	kernel.asm	/^ffff800000104ae3:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104ae5	kernel.asm	/^ffff800000104ae5:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000104ae8	kernel.asm	/^ffff800000104ae8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104aec	kernel.asm	/^ffff800000104aec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000104af0	kernel.asm	/^ffff800000104af0:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000104af3	kernel.asm	/^ffff800000104af3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000104af7	kernel.asm	/^ffff800000104af7:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000104afb	kernel.asm	/^ffff800000104afb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000104aff	kernel.asm	/^ffff800000104aff:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000104b03	kernel.asm	/^ffff800000104b03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104b07	kernel.asm	/^ffff800000104b07:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000104b0a	kernel.asm	/^ffff800000104b0a:	8d 90 d0 07 00 00    	lea    0x7d0(%rax),%edx$/;"	l
ffff800000104b10	kernel.asm	/^ffff800000104b10:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104b14	kernel.asm	/^ffff800000104b14:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff800000104b17	kernel.asm	/^ffff800000104b17:	90                   	nop$/;"	l
ffff800000104b18	kernel.asm	/^ffff800000104b18:	c9                   	leaveq $/;"	l
ffff800000104b19	kernel.asm	/^ffff800000104b19:	c3                   	retq   $/;"	l
ffff800000104b1a	kernel.asm	/^ffff800000104b1a <initlog>:$/;"	l
ffff800000104b1a	kernel.asm	/^ffff800000104b1a:	55                   	push   %rbp$/;"	l
ffff800000104b1b	kernel.asm	/^ffff800000104b1b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104b1e	kernel.asm	/^ffff800000104b1e:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000104b22	kernel.asm	/^ffff800000104b22:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000104b25	kernel.asm	/^ffff800000104b25:	48 be 2c cd 10 00 00 	movabs $0xffff80000010cd2c,%rsi$/;"	l
ffff800000104b2c	kernel.asm	/^ffff800000104b2c:	80 ff ff $/;"	l
ffff800000104b2f	kernel.asm	/^ffff800000104b2f:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104b36	kernel.asm	/^ffff800000104b36:	80 ff ff $/;"	l
ffff800000104b39	kernel.asm	/^ffff800000104b39:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff800000104b40	kernel.asm	/^ffff800000104b40:	80 ff ff $/;"	l
ffff800000104b43	kernel.asm	/^ffff800000104b43:	ff d0                	callq  *%rax$/;"	l
ffff800000104b45	kernel.asm	/^ffff800000104b45:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000104b49	kernel.asm	/^ffff800000104b49:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000104b4c	kernel.asm	/^ffff800000104b4c:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000104b4f	kernel.asm	/^ffff800000104b4f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104b51	kernel.asm	/^ffff800000104b51:	48 b8 e2 21 10 00 00 	movabs $0xffff8000001021e2,%rax$/;"	l
ffff800000104b58	kernel.asm	/^ffff800000104b58:	80 ff ff $/;"	l
ffff800000104b5b	kernel.asm	/^ffff800000104b5b:	ff d0                	callq  *%rax$/;"	l
ffff800000104b5d	kernel.asm	/^ffff800000104b5d:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104b60	kernel.asm	/^ffff800000104b60:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b62	kernel.asm	/^ffff800000104b62:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104b69	kernel.asm	/^ffff800000104b69:	80 ff ff $/;"	l
ffff800000104b6c	kernel.asm	/^ffff800000104b6c:	89 50 68             	mov    %edx,0x68(%rax)$/;"	l
ffff800000104b6f	kernel.asm	/^ffff800000104b6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104b72	kernel.asm	/^ffff800000104b72:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b74	kernel.asm	/^ffff800000104b74:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104b7b	kernel.asm	/^ffff800000104b7b:	80 ff ff $/;"	l
ffff800000104b7e	kernel.asm	/^ffff800000104b7e:	89 50 6c             	mov    %edx,0x6c(%rax)$/;"	l
ffff800000104b81	kernel.asm	/^ffff800000104b81:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104b88	kernel.asm	/^ffff800000104b88:	80 ff ff $/;"	l
ffff800000104b8b	kernel.asm	/^ffff800000104b8b:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000104b8e	kernel.asm	/^ffff800000104b8e:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff800000104b91	kernel.asm	/^ffff800000104b91:	48 b8 24 4e 10 00 00 	movabs $0xffff800000104e24,%rax$/;"	l
ffff800000104b98	kernel.asm	/^ffff800000104b98:	80 ff ff $/;"	l
ffff800000104b9b	kernel.asm	/^ffff800000104b9b:	ff d0                	callq  *%rax$/;"	l
ffff800000104b9d	kernel.asm	/^ffff800000104b9d:	90                   	nop$/;"	l
ffff800000104b9e	kernel.asm	/^ffff800000104b9e:	c9                   	leaveq $/;"	l
ffff800000104b9f	kernel.asm	/^ffff800000104b9f:	c3                   	retq   $/;"	l
ffff800000104ba0	kernel.asm	/^ffff800000104ba0 <install_trans>:$/;"	l
ffff800000104ba0	kernel.asm	/^ffff800000104ba0:	55                   	push   %rbp$/;"	l
ffff800000104ba1	kernel.asm	/^ffff800000104ba1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104ba4	kernel.asm	/^ffff800000104ba4:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104ba8	kernel.asm	/^ffff800000104ba8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104baf	kernel.asm	/^ffff800000104baf:	e9 dc 00 00 00       	jmpq   ffff800000104c90 <install_trans+0xf0>$/;"	l
ffff800000104bb4	kernel.asm	/^ffff800000104bb4:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104bbb	kernel.asm	/^ffff800000104bbb:	80 ff ff $/;"	l
ffff800000104bbe	kernel.asm	/^ffff800000104bbe:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000104bc1	kernel.asm	/^ffff800000104bc1:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104bc4	kernel.asm	/^ffff800000104bc4:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104bc6	kernel.asm	/^ffff800000104bc6:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000104bc9	kernel.asm	/^ffff800000104bc9:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104bcb	kernel.asm	/^ffff800000104bcb:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104bd2	kernel.asm	/^ffff800000104bd2:	80 ff ff $/;"	l
ffff800000104bd5	kernel.asm	/^ffff800000104bd5:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104bd8	kernel.asm	/^ffff800000104bd8:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104bda	kernel.asm	/^ffff800000104bda:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104bdc	kernel.asm	/^ffff800000104bdc:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104be3	kernel.asm	/^ffff800000104be3:	80 ff ff $/;"	l
ffff800000104be6	kernel.asm	/^ffff800000104be6:	ff d0                	callq  *%rax$/;"	l
ffff800000104be8	kernel.asm	/^ffff800000104be8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104bec	kernel.asm	/^ffff800000104bec:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104bf3	kernel.asm	/^ffff800000104bf3:	80 ff ff $/;"	l
ffff800000104bf6	kernel.asm	/^ffff800000104bf6:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104bf9	kernel.asm	/^ffff800000104bf9:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104bfc	kernel.asm	/^ffff800000104bfc:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104c00	kernel.asm	/^ffff800000104c00:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000104c04	kernel.asm	/^ffff800000104c04:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c06	kernel.asm	/^ffff800000104c06:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104c0d	kernel.asm	/^ffff800000104c0d:	80 ff ff $/;"	l
ffff800000104c10	kernel.asm	/^ffff800000104c10:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104c13	kernel.asm	/^ffff800000104c13:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104c15	kernel.asm	/^ffff800000104c15:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104c17	kernel.asm	/^ffff800000104c17:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104c1e	kernel.asm	/^ffff800000104c1e:	80 ff ff $/;"	l
ffff800000104c21	kernel.asm	/^ffff800000104c21:	ff d0                	callq  *%rax$/;"	l
ffff800000104c23	kernel.asm	/^ffff800000104c23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104c27	kernel.asm	/^ffff800000104c27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104c2b	kernel.asm	/^ffff800000104c2b:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000104c32	kernel.asm	/^ffff800000104c32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104c36	kernel.asm	/^ffff800000104c36:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104c3c	kernel.asm	/^ffff800000104c3c:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000104c41	kernel.asm	/^ffff800000104c41:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104c44	kernel.asm	/^ffff800000104c44:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104c47	kernel.asm	/^ffff800000104c47:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000104c4e	kernel.asm	/^ffff800000104c4e:	80 ff ff $/;"	l
ffff800000104c51	kernel.asm	/^ffff800000104c51:	ff d0                	callq  *%rax$/;"	l
ffff800000104c53	kernel.asm	/^ffff800000104c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104c57	kernel.asm	/^ffff800000104c57:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104c5a	kernel.asm	/^ffff800000104c5a:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104c61	kernel.asm	/^ffff800000104c61:	80 ff ff $/;"	l
ffff800000104c64	kernel.asm	/^ffff800000104c64:	ff d0                	callq  *%rax$/;"	l
ffff800000104c66	kernel.asm	/^ffff800000104c66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104c6a	kernel.asm	/^ffff800000104c6a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104c6d	kernel.asm	/^ffff800000104c6d:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104c74	kernel.asm	/^ffff800000104c74:	80 ff ff $/;"	l
ffff800000104c77	kernel.asm	/^ffff800000104c77:	ff d0                	callq  *%rax$/;"	l
ffff800000104c79	kernel.asm	/^ffff800000104c79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104c7d	kernel.asm	/^ffff800000104c7d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104c80	kernel.asm	/^ffff800000104c80:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104c87	kernel.asm	/^ffff800000104c87:	80 ff ff $/;"	l
ffff800000104c8a	kernel.asm	/^ffff800000104c8a:	ff d0                	callq  *%rax$/;"	l
ffff800000104c8c	kernel.asm	/^ffff800000104c8c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104c90	kernel.asm	/^ffff800000104c90:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104c97	kernel.asm	/^ffff800000104c97:	80 ff ff $/;"	l
ffff800000104c9a	kernel.asm	/^ffff800000104c9a:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104c9d	kernel.asm	/^ffff800000104c9d:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104ca0	kernel.asm	/^ffff800000104ca0:	0f 8f 0e ff ff ff    	jg     ffff800000104bb4 <install_trans+0x14>$/;"	l
ffff800000104ca6	kernel.asm	/^ffff800000104ca6:	90                   	nop$/;"	l
ffff800000104ca7	kernel.asm	/^ffff800000104ca7:	c9                   	leaveq $/;"	l
ffff800000104ca8	kernel.asm	/^ffff800000104ca8:	c3                   	retq   $/;"	l
ffff800000104ca9	kernel.asm	/^ffff800000104ca9 <read_head>:$/;"	l
ffff800000104ca9	kernel.asm	/^ffff800000104ca9:	55                   	push   %rbp$/;"	l
ffff800000104caa	kernel.asm	/^ffff800000104caa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104cad	kernel.asm	/^ffff800000104cad:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104cb1	kernel.asm	/^ffff800000104cb1:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104cb8	kernel.asm	/^ffff800000104cb8:	80 ff ff $/;"	l
ffff800000104cbb	kernel.asm	/^ffff800000104cbb:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104cbe	kernel.asm	/^ffff800000104cbe:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104cc0	kernel.asm	/^ffff800000104cc0:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104cc7	kernel.asm	/^ffff800000104cc7:	80 ff ff $/;"	l
ffff800000104cca	kernel.asm	/^ffff800000104cca:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104ccd	kernel.asm	/^ffff800000104ccd:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104ccf	kernel.asm	/^ffff800000104ccf:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104cd1	kernel.asm	/^ffff800000104cd1:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104cd8	kernel.asm	/^ffff800000104cd8:	80 ff ff $/;"	l
ffff800000104cdb	kernel.asm	/^ffff800000104cdb:	ff d0                	callq  *%rax$/;"	l
ffff800000104cdd	kernel.asm	/^ffff800000104cdd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104ce1	kernel.asm	/^ffff800000104ce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104ce5	kernel.asm	/^ffff800000104ce5:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104ceb	kernel.asm	/^ffff800000104ceb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104cef	kernel.asm	/^ffff800000104cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104cf3	kernel.asm	/^ffff800000104cf3:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000104cf5	kernel.asm	/^ffff800000104cf5:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104cfc	kernel.asm	/^ffff800000104cfc:	80 ff ff $/;"	l
ffff800000104cff	kernel.asm	/^ffff800000104cff:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff800000104d02	kernel.asm	/^ffff800000104d02:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104d09	kernel.asm	/^ffff800000104d09:	eb 2a                	jmp    ffff800000104d35 <read_head+0x8c>$/;"	l
ffff800000104d0b	kernel.asm	/^ffff800000104d0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104d0f	kernel.asm	/^ffff800000104d0f:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104d12	kernel.asm	/^ffff800000104d12:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104d15	kernel.asm	/^ffff800000104d15:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx$/;"	l
ffff800000104d19	kernel.asm	/^ffff800000104d19:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104d20	kernel.asm	/^ffff800000104d20:	80 ff ff $/;"	l
ffff800000104d23	kernel.asm	/^ffff800000104d23:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000104d26	kernel.asm	/^ffff800000104d26:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000104d29	kernel.asm	/^ffff800000104d29:	48 83 c1 1c          	add    $0x1c,%rcx$/;"	l
ffff800000104d2d	kernel.asm	/^ffff800000104d2d:	89 54 88 10          	mov    %edx,0x10(%rax,%rcx,4)$/;"	l
ffff800000104d31	kernel.asm	/^ffff800000104d31:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104d35	kernel.asm	/^ffff800000104d35:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104d3c	kernel.asm	/^ffff800000104d3c:	80 ff ff $/;"	l
ffff800000104d3f	kernel.asm	/^ffff800000104d3f:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104d42	kernel.asm	/^ffff800000104d42:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104d45	kernel.asm	/^ffff800000104d45:	7f c4                	jg     ffff800000104d0b <read_head+0x62>$/;"	l
ffff800000104d47	kernel.asm	/^ffff800000104d47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104d4b	kernel.asm	/^ffff800000104d4b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104d4e	kernel.asm	/^ffff800000104d4e:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104d55	kernel.asm	/^ffff800000104d55:	80 ff ff $/;"	l
ffff800000104d58	kernel.asm	/^ffff800000104d58:	ff d0                	callq  *%rax$/;"	l
ffff800000104d5a	kernel.asm	/^ffff800000104d5a:	90                   	nop$/;"	l
ffff800000104d5b	kernel.asm	/^ffff800000104d5b:	c9                   	leaveq $/;"	l
ffff800000104d5c	kernel.asm	/^ffff800000104d5c:	c3                   	retq   $/;"	l
ffff800000104d5d	kernel.asm	/^ffff800000104d5d <write_head>:$/;"	l
ffff800000104d5d	kernel.asm	/^ffff800000104d5d:	55                   	push   %rbp$/;"	l
ffff800000104d5e	kernel.asm	/^ffff800000104d5e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104d61	kernel.asm	/^ffff800000104d61:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104d65	kernel.asm	/^ffff800000104d65:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104d6c	kernel.asm	/^ffff800000104d6c:	80 ff ff $/;"	l
ffff800000104d6f	kernel.asm	/^ffff800000104d6f:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104d72	kernel.asm	/^ffff800000104d72:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104d74	kernel.asm	/^ffff800000104d74:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104d7b	kernel.asm	/^ffff800000104d7b:	80 ff ff $/;"	l
ffff800000104d7e	kernel.asm	/^ffff800000104d7e:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104d81	kernel.asm	/^ffff800000104d81:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104d83	kernel.asm	/^ffff800000104d83:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104d85	kernel.asm	/^ffff800000104d85:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104d8c	kernel.asm	/^ffff800000104d8c:	80 ff ff $/;"	l
ffff800000104d8f	kernel.asm	/^ffff800000104d8f:	ff d0                	callq  *%rax$/;"	l
ffff800000104d91	kernel.asm	/^ffff800000104d91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104d95	kernel.asm	/^ffff800000104d95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104d99	kernel.asm	/^ffff800000104d99:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104d9f	kernel.asm	/^ffff800000104d9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104da3	kernel.asm	/^ffff800000104da3:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104daa	kernel.asm	/^ffff800000104daa:	80 ff ff $/;"	l
ffff800000104dad	kernel.asm	/^ffff800000104dad:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff800000104db0	kernel.asm	/^ffff800000104db0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104db4	kernel.asm	/^ffff800000104db4:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104db6	kernel.asm	/^ffff800000104db6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104dbd	kernel.asm	/^ffff800000104dbd:	eb 2a                	jmp    ffff800000104de9 <write_head+0x8c>$/;"	l
ffff800000104dbf	kernel.asm	/^ffff800000104dbf:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104dc6	kernel.asm	/^ffff800000104dc6:	80 ff ff $/;"	l
ffff800000104dc9	kernel.asm	/^ffff800000104dc9:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104dcc	kernel.asm	/^ffff800000104dcc:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104dcf	kernel.asm	/^ffff800000104dcf:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104dd3	kernel.asm	/^ffff800000104dd3:	8b 4c 90 10          	mov    0x10(%rax,%rdx,4),%ecx$/;"	l
ffff800000104dd7	kernel.asm	/^ffff800000104dd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104ddb	kernel.asm	/^ffff800000104ddb:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104dde	kernel.asm	/^ffff800000104dde:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104de1	kernel.asm	/^ffff800000104de1:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)$/;"	l
ffff800000104de5	kernel.asm	/^ffff800000104de5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104de9	kernel.asm	/^ffff800000104de9:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104df0	kernel.asm	/^ffff800000104df0:	80 ff ff $/;"	l
ffff800000104df3	kernel.asm	/^ffff800000104df3:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104df6	kernel.asm	/^ffff800000104df6:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104df9	kernel.asm	/^ffff800000104df9:	7f c4                	jg     ffff800000104dbf <write_head+0x62>$/;"	l
ffff800000104dfb	kernel.asm	/^ffff800000104dfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104dff	kernel.asm	/^ffff800000104dff:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e02	kernel.asm	/^ffff800000104e02:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104e09	kernel.asm	/^ffff800000104e09:	80 ff ff $/;"	l
ffff800000104e0c	kernel.asm	/^ffff800000104e0c:	ff d0                	callq  *%rax$/;"	l
ffff800000104e0e	kernel.asm	/^ffff800000104e0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104e12	kernel.asm	/^ffff800000104e12:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e15	kernel.asm	/^ffff800000104e15:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104e1c	kernel.asm	/^ffff800000104e1c:	80 ff ff $/;"	l
ffff800000104e1f	kernel.asm	/^ffff800000104e1f:	ff d0                	callq  *%rax$/;"	l
ffff800000104e21	kernel.asm	/^ffff800000104e21:	90                   	nop$/;"	l
ffff800000104e22	kernel.asm	/^ffff800000104e22:	c9                   	leaveq $/;"	l
ffff800000104e23	kernel.asm	/^ffff800000104e23:	c3                   	retq   $/;"	l
ffff800000104e24	kernel.asm	/^ffff800000104e24 <recover_from_log>:$/;"	l
ffff800000104e24	kernel.asm	/^ffff800000104e24:	55                   	push   %rbp$/;"	l
ffff800000104e25	kernel.asm	/^ffff800000104e25:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104e28	kernel.asm	/^ffff800000104e28:	48 b8 a9 4c 10 00 00 	movabs $0xffff800000104ca9,%rax$/;"	l
ffff800000104e2f	kernel.asm	/^ffff800000104e2f:	80 ff ff $/;"	l
ffff800000104e32	kernel.asm	/^ffff800000104e32:	ff d0                	callq  *%rax$/;"	l
ffff800000104e34	kernel.asm	/^ffff800000104e34:	48 b8 a0 4b 10 00 00 	movabs $0xffff800000104ba0,%rax$/;"	l
ffff800000104e3b	kernel.asm	/^ffff800000104e3b:	80 ff ff $/;"	l
ffff800000104e3e	kernel.asm	/^ffff800000104e3e:	ff d0                	callq  *%rax$/;"	l
ffff800000104e40	kernel.asm	/^ffff800000104e40:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104e47	kernel.asm	/^ffff800000104e47:	80 ff ff $/;"	l
ffff800000104e4a	kernel.asm	/^ffff800000104e4a:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff800000104e51	kernel.asm	/^ffff800000104e51:	48 b8 5d 4d 10 00 00 	movabs $0xffff800000104d5d,%rax$/;"	l
ffff800000104e58	kernel.asm	/^ffff800000104e58:	80 ff ff $/;"	l
ffff800000104e5b	kernel.asm	/^ffff800000104e5b:	ff d0                	callq  *%rax$/;"	l
ffff800000104e5d	kernel.asm	/^ffff800000104e5d:	90                   	nop$/;"	l
ffff800000104e5e	kernel.asm	/^ffff800000104e5e:	5d                   	pop    %rbp$/;"	l
ffff800000104e5f	kernel.asm	/^ffff800000104e5f:	c3                   	retq   $/;"	l
ffff800000104e60	kernel.asm	/^ffff800000104e60 <begin_op>:$/;"	l
ffff800000104e60	kernel.asm	/^ffff800000104e60:	55                   	push   %rbp$/;"	l
ffff800000104e61	kernel.asm	/^ffff800000104e61:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104e64	kernel.asm	/^ffff800000104e64:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104e6b	kernel.asm	/^ffff800000104e6b:	80 ff ff $/;"	l
ffff800000104e6e	kernel.asm	/^ffff800000104e6e:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000104e75	kernel.asm	/^ffff800000104e75:	80 ff ff $/;"	l
ffff800000104e78	kernel.asm	/^ffff800000104e78:	ff d0                	callq  *%rax$/;"	l
ffff800000104e7a	kernel.asm	/^ffff800000104e7a:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104e81	kernel.asm	/^ffff800000104e81:	80 ff ff $/;"	l
ffff800000104e84	kernel.asm	/^ffff800000104e84:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000104e87	kernel.asm	/^ffff800000104e87:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104e89	kernel.asm	/^ffff800000104e89:	74 22                	je     ffff800000104ead <begin_op+0x4d>$/;"	l
ffff800000104e8b	kernel.asm	/^ffff800000104e8b:	48 be e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rsi$/;"	l
ffff800000104e92	kernel.asm	/^ffff800000104e92:	80 ff ff $/;"	l
ffff800000104e95	kernel.asm	/^ffff800000104e95:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104e9c	kernel.asm	/^ffff800000104e9c:	80 ff ff $/;"	l
ffff800000104e9f	kernel.asm	/^ffff800000104e9f:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000104ea6	kernel.asm	/^ffff800000104ea6:	80 ff ff $/;"	l
ffff800000104ea9	kernel.asm	/^ffff800000104ea9:	ff d0                	callq  *%rax$/;"	l
ffff800000104eab	kernel.asm	/^ffff800000104eab:	eb cd                	jmp    ffff800000104e7a <begin_op+0x1a>$/;"	l
ffff800000104ead	kernel.asm	/^ffff800000104ead:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104eb4	kernel.asm	/^ffff800000104eb4:	80 ff ff $/;"	l
ffff800000104eb7	kernel.asm	/^ffff800000104eb7:	8b 48 7c             	mov    0x7c(%rax),%ecx$/;"	l
ffff800000104eba	kernel.asm	/^ffff800000104eba:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104ec1	kernel.asm	/^ffff800000104ec1:	80 ff ff $/;"	l
ffff800000104ec4	kernel.asm	/^ffff800000104ec4:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104ec7	kernel.asm	/^ffff800000104ec7:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000104eca	kernel.asm	/^ffff800000104eca:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104ecc	kernel.asm	/^ffff800000104ecc:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104ecf	kernel.asm	/^ffff800000104ecf:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104ed1	kernel.asm	/^ffff800000104ed1:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104ed3	kernel.asm	/^ffff800000104ed3:	01 c8                	add    %ecx,%eax$/;"	l
ffff800000104ed5	kernel.asm	/^ffff800000104ed5:	83 f8 1e             	cmp    $0x1e,%eax$/;"	l
ffff800000104ed8	kernel.asm	/^ffff800000104ed8:	7e 25                	jle    ffff800000104eff <begin_op+0x9f>$/;"	l
ffff800000104eda	kernel.asm	/^ffff800000104eda:	48 be e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rsi$/;"	l
ffff800000104ee1	kernel.asm	/^ffff800000104ee1:	80 ff ff $/;"	l
ffff800000104ee4	kernel.asm	/^ffff800000104ee4:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104eeb	kernel.asm	/^ffff800000104eeb:	80 ff ff $/;"	l
ffff800000104eee	kernel.asm	/^ffff800000104eee:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000104ef5	kernel.asm	/^ffff800000104ef5:	80 ff ff $/;"	l
ffff800000104ef8	kernel.asm	/^ffff800000104ef8:	ff d0                	callq  *%rax$/;"	l
ffff800000104efa	kernel.asm	/^ffff800000104efa:	e9 7b ff ff ff       	jmpq   ffff800000104e7a <begin_op+0x1a>$/;"	l
ffff800000104eff	kernel.asm	/^ffff800000104eff:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104f06	kernel.asm	/^ffff800000104f06:	80 ff ff $/;"	l
ffff800000104f09	kernel.asm	/^ffff800000104f09:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104f0c	kernel.asm	/^ffff800000104f0c:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000104f0f	kernel.asm	/^ffff800000104f0f:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104f16	kernel.asm	/^ffff800000104f16:	80 ff ff $/;"	l
ffff800000104f19	kernel.asm	/^ffff800000104f19:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff800000104f1c	kernel.asm	/^ffff800000104f1c:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104f23	kernel.asm	/^ffff800000104f23:	80 ff ff $/;"	l
ffff800000104f26	kernel.asm	/^ffff800000104f26:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000104f2d	kernel.asm	/^ffff800000104f2d:	80 ff ff $/;"	l
ffff800000104f30	kernel.asm	/^ffff800000104f30:	ff d0                	callq  *%rax$/;"	l
ffff800000104f32	kernel.asm	/^ffff800000104f32:	90                   	nop$/;"	l
ffff800000104f33	kernel.asm	/^ffff800000104f33:	90                   	nop$/;"	l
ffff800000104f34	kernel.asm	/^ffff800000104f34:	5d                   	pop    %rbp$/;"	l
ffff800000104f35	kernel.asm	/^ffff800000104f35:	c3                   	retq   $/;"	l
ffff800000104f36	kernel.asm	/^ffff800000104f36 <end_op>:$/;"	l
ffff800000104f36	kernel.asm	/^ffff800000104f36:	55                   	push   %rbp$/;"	l
ffff800000104f37	kernel.asm	/^ffff800000104f37:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104f3a	kernel.asm	/^ffff800000104f3a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104f3e	kernel.asm	/^ffff800000104f3e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104f45	kernel.asm	/^ffff800000104f45:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104f4c	kernel.asm	/^ffff800000104f4c:	80 ff ff $/;"	l
ffff800000104f4f	kernel.asm	/^ffff800000104f4f:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000104f56	kernel.asm	/^ffff800000104f56:	80 ff ff $/;"	l
ffff800000104f59	kernel.asm	/^ffff800000104f59:	ff d0                	callq  *%rax$/;"	l
ffff800000104f5b	kernel.asm	/^ffff800000104f5b:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104f62	kernel.asm	/^ffff800000104f62:	80 ff ff $/;"	l
ffff800000104f65	kernel.asm	/^ffff800000104f65:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104f68	kernel.asm	/^ffff800000104f68:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000104f6b	kernel.asm	/^ffff800000104f6b:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104f72	kernel.asm	/^ffff800000104f72:	80 ff ff $/;"	l
ffff800000104f75	kernel.asm	/^ffff800000104f75:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff800000104f78	kernel.asm	/^ffff800000104f78:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104f7f	kernel.asm	/^ffff800000104f7f:	80 ff ff $/;"	l
ffff800000104f82	kernel.asm	/^ffff800000104f82:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000104f85	kernel.asm	/^ffff800000104f85:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104f87	kernel.asm	/^ffff800000104f87:	74 16                	je     ffff800000104f9f <end_op+0x69>$/;"	l
ffff800000104f89	kernel.asm	/^ffff800000104f89:	48 bf 30 cd 10 00 00 	movabs $0xffff80000010cd30,%rdi$/;"	l
ffff800000104f90	kernel.asm	/^ffff800000104f90:	80 ff ff $/;"	l
ffff800000104f93	kernel.asm	/^ffff800000104f93:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000104f9a	kernel.asm	/^ffff800000104f9a:	80 ff ff $/;"	l
ffff800000104f9d	kernel.asm	/^ffff800000104f9d:	ff d0                	callq  *%rax$/;"	l
ffff800000104f9f	kernel.asm	/^ffff800000104f9f:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104fa6	kernel.asm	/^ffff800000104fa6:	80 ff ff $/;"	l
ffff800000104fa9	kernel.asm	/^ffff800000104fa9:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000104fac	kernel.asm	/^ffff800000104fac:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104fae	kernel.asm	/^ffff800000104fae:	75 1a                	jne    ffff800000104fca <end_op+0x94>$/;"	l
ffff800000104fb0	kernel.asm	/^ffff800000104fb0:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104fb7	kernel.asm	/^ffff800000104fb7:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104fbe	kernel.asm	/^ffff800000104fbe:	80 ff ff $/;"	l
ffff800000104fc1	kernel.asm	/^ffff800000104fc1:	c7 40 74 01 00 00 00 	movl   $0x1,0x74(%rax)$/;"	l
ffff800000104fc8	kernel.asm	/^ffff800000104fc8:	eb 16                	jmp    ffff800000104fe0 <end_op+0xaa>$/;"	l
ffff800000104fca	kernel.asm	/^ffff800000104fca:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104fd1	kernel.asm	/^ffff800000104fd1:	80 ff ff $/;"	l
ffff800000104fd4	kernel.asm	/^ffff800000104fd4:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000104fdb	kernel.asm	/^ffff800000104fdb:	80 ff ff $/;"	l
ffff800000104fde	kernel.asm	/^ffff800000104fde:	ff d0                	callq  *%rax$/;"	l
ffff800000104fe0	kernel.asm	/^ffff800000104fe0:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104fe7	kernel.asm	/^ffff800000104fe7:	80 ff ff $/;"	l
ffff800000104fea	kernel.asm	/^ffff800000104fea:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000104ff1	kernel.asm	/^ffff800000104ff1:	80 ff ff $/;"	l
ffff800000104ff4	kernel.asm	/^ffff800000104ff4:	ff d0                	callq  *%rax$/;"	l
ffff800000104ff6	kernel.asm	/^ffff800000104ff6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104ffa	kernel.asm	/^ffff800000104ffa:	74 64                	je     ffff800000105060 <end_op+0x12a>$/;"	l
ffff800000104ffc	kernel.asm	/^ffff800000104ffc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105001	kernel.asm	/^ffff800000105001:	48 ba 6c 51 10 00 00 	movabs $0xffff80000010516c,%rdx$/;"	l
ffff800000105008	kernel.asm	/^ffff800000105008:	80 ff ff $/;"	l
ffff80000010500b	kernel.asm	/^ffff80000010500b:	ff d2                	callq  *%rdx$/;"	l
ffff80000010500d	kernel.asm	/^ffff80000010500d:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000105014	kernel.asm	/^ffff800000105014:	80 ff ff $/;"	l
ffff800000105017	kernel.asm	/^ffff800000105017:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff80000010501e	kernel.asm	/^ffff80000010501e:	80 ff ff $/;"	l
ffff800000105021	kernel.asm	/^ffff800000105021:	ff d0                	callq  *%rax$/;"	l
ffff800000105023	kernel.asm	/^ffff800000105023:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff80000010502a	kernel.asm	/^ffff80000010502a:	80 ff ff $/;"	l
ffff80000010502d	kernel.asm	/^ffff80000010502d:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%rax)$/;"	l
ffff800000105034	kernel.asm	/^ffff800000105034:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff80000010503b	kernel.asm	/^ffff80000010503b:	80 ff ff $/;"	l
ffff80000010503e	kernel.asm	/^ffff80000010503e:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000105045	kernel.asm	/^ffff800000105045:	80 ff ff $/;"	l
ffff800000105048	kernel.asm	/^ffff800000105048:	ff d0                	callq  *%rax$/;"	l
ffff80000010504a	kernel.asm	/^ffff80000010504a:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000105051	kernel.asm	/^ffff800000105051:	80 ff ff $/;"	l
ffff800000105054	kernel.asm	/^ffff800000105054:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010505b	kernel.asm	/^ffff80000010505b:	80 ff ff $/;"	l
ffff80000010505e	kernel.asm	/^ffff80000010505e:	ff d0                	callq  *%rax$/;"	l
ffff800000105060	kernel.asm	/^ffff800000105060:	90                   	nop$/;"	l
ffff800000105061	kernel.asm	/^ffff800000105061:	c9                   	leaveq $/;"	l
ffff800000105062	kernel.asm	/^ffff800000105062:	c3                   	retq   $/;"	l
ffff800000105063	kernel.asm	/^ffff800000105063 <write_log>:$/;"	l
ffff800000105063	kernel.asm	/^ffff800000105063:	55                   	push   %rbp$/;"	l
ffff800000105064	kernel.asm	/^ffff800000105064:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105067	kernel.asm	/^ffff800000105067:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010506b	kernel.asm	/^ffff80000010506b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105072	kernel.asm	/^ffff800000105072:	e9 dc 00 00 00       	jmpq   ffff800000105153 <write_log+0xf0>$/;"	l
ffff800000105077	kernel.asm	/^ffff800000105077:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff80000010507e	kernel.asm	/^ffff80000010507e:	80 ff ff $/;"	l
ffff800000105081	kernel.asm	/^ffff800000105081:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000105084	kernel.asm	/^ffff800000105084:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105087	kernel.asm	/^ffff800000105087:	01 d0                	add    %edx,%eax$/;"	l
ffff800000105089	kernel.asm	/^ffff800000105089:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010508c	kernel.asm	/^ffff80000010508c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010508e	kernel.asm	/^ffff80000010508e:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000105095	kernel.asm	/^ffff800000105095:	80 ff ff $/;"	l
ffff800000105098	kernel.asm	/^ffff800000105098:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff80000010509b	kernel.asm	/^ffff80000010509b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010509d	kernel.asm	/^ffff80000010509d:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010509f	kernel.asm	/^ffff80000010509f:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001050a6	kernel.asm	/^ffff8000001050a6:	80 ff ff $/;"	l
ffff8000001050a9	kernel.asm	/^ffff8000001050a9:	ff d0                	callq  *%rax$/;"	l
ffff8000001050ab	kernel.asm	/^ffff8000001050ab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001050af	kernel.asm	/^ffff8000001050af:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001050b6	kernel.asm	/^ffff8000001050b6:	80 ff ff $/;"	l
ffff8000001050b9	kernel.asm	/^ffff8000001050b9:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001050bc	kernel.asm	/^ffff8000001050bc:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001050bf	kernel.asm	/^ffff8000001050bf:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff8000001050c3	kernel.asm	/^ffff8000001050c3:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff8000001050c7	kernel.asm	/^ffff8000001050c7:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001050c9	kernel.asm	/^ffff8000001050c9:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001050d0	kernel.asm	/^ffff8000001050d0:	80 ff ff $/;"	l
ffff8000001050d3	kernel.asm	/^ffff8000001050d3:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff8000001050d6	kernel.asm	/^ffff8000001050d6:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001050d8	kernel.asm	/^ffff8000001050d8:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001050da	kernel.asm	/^ffff8000001050da:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001050e1	kernel.asm	/^ffff8000001050e1:	80 ff ff $/;"	l
ffff8000001050e4	kernel.asm	/^ffff8000001050e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001050e6	kernel.asm	/^ffff8000001050e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001050ea	kernel.asm	/^ffff8000001050ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001050ee	kernel.asm	/^ffff8000001050ee:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff8000001050f5	kernel.asm	/^ffff8000001050f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001050f9	kernel.asm	/^ffff8000001050f9:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff8000001050ff	kernel.asm	/^ffff8000001050ff:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000105104	kernel.asm	/^ffff800000105104:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000105107	kernel.asm	/^ffff800000105107:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010510a	kernel.asm	/^ffff80000010510a:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000105111	kernel.asm	/^ffff800000105111:	80 ff ff $/;"	l
ffff800000105114	kernel.asm	/^ffff800000105114:	ff d0                	callq  *%rax$/;"	l
ffff800000105116	kernel.asm	/^ffff800000105116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010511a	kernel.asm	/^ffff80000010511a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010511d	kernel.asm	/^ffff80000010511d:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000105124	kernel.asm	/^ffff800000105124:	80 ff ff $/;"	l
ffff800000105127	kernel.asm	/^ffff800000105127:	ff d0                	callq  *%rax$/;"	l
ffff800000105129	kernel.asm	/^ffff800000105129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010512d	kernel.asm	/^ffff80000010512d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105130	kernel.asm	/^ffff800000105130:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000105137	kernel.asm	/^ffff800000105137:	80 ff ff $/;"	l
ffff80000010513a	kernel.asm	/^ffff80000010513a:	ff d0                	callq  *%rax$/;"	l
ffff80000010513c	kernel.asm	/^ffff80000010513c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105140	kernel.asm	/^ffff800000105140:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105143	kernel.asm	/^ffff800000105143:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010514a	kernel.asm	/^ffff80000010514a:	80 ff ff $/;"	l
ffff80000010514d	kernel.asm	/^ffff80000010514d:	ff d0                	callq  *%rax$/;"	l
ffff80000010514f	kernel.asm	/^ffff80000010514f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105153	kernel.asm	/^ffff800000105153:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff80000010515a	kernel.asm	/^ffff80000010515a:	80 ff ff $/;"	l
ffff80000010515d	kernel.asm	/^ffff80000010515d:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000105160	kernel.asm	/^ffff800000105160:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000105163	kernel.asm	/^ffff800000105163:	0f 8f 0e ff ff ff    	jg     ffff800000105077 <write_log+0x14>$/;"	l
ffff800000105169	kernel.asm	/^ffff800000105169:	90                   	nop$/;"	l
ffff80000010516a	kernel.asm	/^ffff80000010516a:	c9                   	leaveq $/;"	l
ffff80000010516b	kernel.asm	/^ffff80000010516b:	c3                   	retq   $/;"	l
ffff80000010516c	kernel.asm	/^ffff80000010516c <commit>:$/;"	l
ffff80000010516c	kernel.asm	/^ffff80000010516c:	55                   	push   %rbp$/;"	l
ffff80000010516d	kernel.asm	/^ffff80000010516d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105170	kernel.asm	/^ffff800000105170:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000105177	kernel.asm	/^ffff800000105177:	80 ff ff $/;"	l
ffff80000010517a	kernel.asm	/^ffff80000010517a:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010517d	kernel.asm	/^ffff80000010517d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010517f	kernel.asm	/^ffff80000010517f:	7e 41                	jle    ffff8000001051c2 <commit+0x56>$/;"	l
ffff800000105181	kernel.asm	/^ffff800000105181:	48 b8 63 50 10 00 00 	movabs $0xffff800000105063,%rax$/;"	l
ffff800000105188	kernel.asm	/^ffff800000105188:	80 ff ff $/;"	l
ffff80000010518b	kernel.asm	/^ffff80000010518b:	ff d0                	callq  *%rax$/;"	l
ffff80000010518d	kernel.asm	/^ffff80000010518d:	48 b8 5d 4d 10 00 00 	movabs $0xffff800000104d5d,%rax$/;"	l
ffff800000105194	kernel.asm	/^ffff800000105194:	80 ff ff $/;"	l
ffff800000105197	kernel.asm	/^ffff800000105197:	ff d0                	callq  *%rax$/;"	l
ffff800000105199	kernel.asm	/^ffff800000105199:	48 b8 a0 4b 10 00 00 	movabs $0xffff800000104ba0,%rax$/;"	l
ffff8000001051a0	kernel.asm	/^ffff8000001051a0:	80 ff ff $/;"	l
ffff8000001051a3	kernel.asm	/^ffff8000001051a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001051a5	kernel.asm	/^ffff8000001051a5:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001051ac	kernel.asm	/^ffff8000001051ac:	80 ff ff $/;"	l
ffff8000001051af	kernel.asm	/^ffff8000001051af:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff8000001051b6	kernel.asm	/^ffff8000001051b6:	48 b8 5d 4d 10 00 00 	movabs $0xffff800000104d5d,%rax$/;"	l
ffff8000001051bd	kernel.asm	/^ffff8000001051bd:	80 ff ff $/;"	l
ffff8000001051c0	kernel.asm	/^ffff8000001051c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001051c2	kernel.asm	/^ffff8000001051c2:	90                   	nop$/;"	l
ffff8000001051c3	kernel.asm	/^ffff8000001051c3:	5d                   	pop    %rbp$/;"	l
ffff8000001051c4	kernel.asm	/^ffff8000001051c4:	c3                   	retq   $/;"	l
ffff8000001051c5	kernel.asm	/^ffff8000001051c5 <log_write>:$/;"	l
ffff8000001051c5	kernel.asm	/^ffff8000001051c5:	55                   	push   %rbp$/;"	l
ffff8000001051c6	kernel.asm	/^ffff8000001051c6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001051c9	kernel.asm	/^ffff8000001051c9:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001051cd	kernel.asm	/^ffff8000001051cd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001051d1	kernel.asm	/^ffff8000001051d1:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001051d8	kernel.asm	/^ffff8000001051d8:	80 ff ff $/;"	l
ffff8000001051db	kernel.asm	/^ffff8000001051db:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001051de	kernel.asm	/^ffff8000001051de:	83 f8 1d             	cmp    $0x1d,%eax$/;"	l
ffff8000001051e1	kernel.asm	/^ffff8000001051e1:	7f 21                	jg     ffff800000105204 <log_write+0x3f>$/;"	l
ffff8000001051e3	kernel.asm	/^ffff8000001051e3:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001051ea	kernel.asm	/^ffff8000001051ea:	80 ff ff $/;"	l
ffff8000001051ed	kernel.asm	/^ffff8000001051ed:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff8000001051f0	kernel.asm	/^ffff8000001051f0:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001051f7	kernel.asm	/^ffff8000001051f7:	80 ff ff $/;"	l
ffff8000001051fa	kernel.asm	/^ffff8000001051fa:	8b 40 6c             	mov    0x6c(%rax),%eax$/;"	l
ffff8000001051fd	kernel.asm	/^ffff8000001051fd:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000105200	kernel.asm	/^ffff800000105200:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105202	kernel.asm	/^ffff800000105202:	7c 16                	jl     ffff80000010521a <log_write+0x55>$/;"	l
ffff800000105204	kernel.asm	/^ffff800000105204:	48 bf 3f cd 10 00 00 	movabs $0xffff80000010cd3f,%rdi$/;"	l
ffff80000010520b	kernel.asm	/^ffff80000010520b:	80 ff ff $/;"	l
ffff80000010520e	kernel.asm	/^ffff80000010520e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000105215	kernel.asm	/^ffff800000105215:	80 ff ff $/;"	l
ffff800000105218	kernel.asm	/^ffff800000105218:	ff d0                	callq  *%rax$/;"	l
ffff80000010521a	kernel.asm	/^ffff80000010521a:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000105221	kernel.asm	/^ffff800000105221:	80 ff ff $/;"	l
ffff800000105224	kernel.asm	/^ffff800000105224:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000105227	kernel.asm	/^ffff800000105227:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105229	kernel.asm	/^ffff800000105229:	7f 16                	jg     ffff800000105241 <log_write+0x7c>$/;"	l
ffff80000010522b	kernel.asm	/^ffff80000010522b:	48 bf 55 cd 10 00 00 	movabs $0xffff80000010cd55,%rdi$/;"	l
ffff800000105232	kernel.asm	/^ffff800000105232:	80 ff ff $/;"	l
ffff800000105235	kernel.asm	/^ffff800000105235:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010523c	kernel.asm	/^ffff80000010523c:	80 ff ff $/;"	l
ffff80000010523f	kernel.asm	/^ffff80000010523f:	ff d0                	callq  *%rax$/;"	l
ffff800000105241	kernel.asm	/^ffff800000105241:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000105248	kernel.asm	/^ffff800000105248:	80 ff ff $/;"	l
ffff80000010524b	kernel.asm	/^ffff80000010524b:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000105252	kernel.asm	/^ffff800000105252:	80 ff ff $/;"	l
ffff800000105255	kernel.asm	/^ffff800000105255:	ff d0                	callq  *%rax$/;"	l
ffff800000105257	kernel.asm	/^ffff800000105257:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010525e	kernel.asm	/^ffff80000010525e:	eb 29                	jmp    ffff800000105289 <log_write+0xc4>$/;"	l
ffff800000105260	kernel.asm	/^ffff800000105260:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000105267	kernel.asm	/^ffff800000105267:	80 ff ff $/;"	l
ffff80000010526a	kernel.asm	/^ffff80000010526a:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010526d	kernel.asm	/^ffff80000010526d:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105270	kernel.asm	/^ffff800000105270:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000105274	kernel.asm	/^ffff800000105274:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000105278	kernel.asm	/^ffff800000105278:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010527a	kernel.asm	/^ffff80000010527a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010527e	kernel.asm	/^ffff80000010527e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000105281	kernel.asm	/^ffff800000105281:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105283	kernel.asm	/^ffff800000105283:	74 18                	je     ffff80000010529d <log_write+0xd8>$/;"	l
ffff800000105285	kernel.asm	/^ffff800000105285:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105289	kernel.asm	/^ffff800000105289:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000105290	kernel.asm	/^ffff800000105290:	80 ff ff $/;"	l
ffff800000105293	kernel.asm	/^ffff800000105293:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000105296	kernel.asm	/^ffff800000105296:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000105299	kernel.asm	/^ffff800000105299:	7f c5                	jg     ffff800000105260 <log_write+0x9b>$/;"	l
ffff80000010529b	kernel.asm	/^ffff80000010529b:	eb 01                	jmp    ffff80000010529e <log_write+0xd9>$/;"	l
ffff80000010529d	kernel.asm	/^ffff80000010529d:	90                   	nop$/;"	l
ffff80000010529e	kernel.asm	/^ffff80000010529e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001052a2	kernel.asm	/^ffff8000001052a2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001052a5	kernel.asm	/^ffff8000001052a5:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001052a7	kernel.asm	/^ffff8000001052a7:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001052ae	kernel.asm	/^ffff8000001052ae:	80 ff ff $/;"	l
ffff8000001052b1	kernel.asm	/^ffff8000001052b1:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001052b4	kernel.asm	/^ffff8000001052b4:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001052b7	kernel.asm	/^ffff8000001052b7:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff8000001052bb	kernel.asm	/^ffff8000001052bb:	89 4c 90 10          	mov    %ecx,0x10(%rax,%rdx,4)$/;"	l
ffff8000001052bf	kernel.asm	/^ffff8000001052bf:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001052c6	kernel.asm	/^ffff8000001052c6:	80 ff ff $/;"	l
ffff8000001052c9	kernel.asm	/^ffff8000001052c9:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001052cc	kernel.asm	/^ffff8000001052cc:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001052cf	kernel.asm	/^ffff8000001052cf:	75 1d                	jne    ffff8000001052ee <log_write+0x129>$/;"	l
ffff8000001052d1	kernel.asm	/^ffff8000001052d1:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001052d8	kernel.asm	/^ffff8000001052d8:	80 ff ff $/;"	l
ffff8000001052db	kernel.asm	/^ffff8000001052db:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001052de	kernel.asm	/^ffff8000001052de:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001052e1	kernel.asm	/^ffff8000001052e1:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001052e8	kernel.asm	/^ffff8000001052e8:	80 ff ff $/;"	l
ffff8000001052eb	kernel.asm	/^ffff8000001052eb:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff8000001052ee	kernel.asm	/^ffff8000001052ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001052f2	kernel.asm	/^ffff8000001052f2:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001052f4	kernel.asm	/^ffff8000001052f4:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff8000001052f7	kernel.asm	/^ffff8000001052f7:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001052f9	kernel.asm	/^ffff8000001052f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001052fd	kernel.asm	/^ffff8000001052fd:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001052ff	kernel.asm	/^ffff8000001052ff:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000105306	kernel.asm	/^ffff800000105306:	80 ff ff $/;"	l
ffff800000105309	kernel.asm	/^ffff800000105309:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105310	kernel.asm	/^ffff800000105310:	80 ff ff $/;"	l
ffff800000105313	kernel.asm	/^ffff800000105313:	ff d0                	callq  *%rax$/;"	l
ffff800000105315	kernel.asm	/^ffff800000105315:	90                   	nop$/;"	l
ffff800000105316	kernel.asm	/^ffff800000105316:	c9                   	leaveq $/;"	l
ffff800000105317	kernel.asm	/^ffff800000105317:	c3                   	retq   $/;"	l
ffff800000105318	kernel.asm	/^ffff800000105318 <v2p>:$/;"	l
ffff800000105318	kernel.asm	/^ffff800000105318:	55                   	push   %rbp$/;"	l
ffff800000105319	kernel.asm	/^ffff800000105319:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010531c	kernel.asm	/^ffff80000010531c:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000105320	kernel.asm	/^ffff800000105320:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000105324	kernel.asm	/^ffff800000105324:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105328	kernel.asm	/^ffff800000105328:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010532f	kernel.asm	/^ffff80000010532f:	80 00 00 $/;"	l
ffff800000105332	kernel.asm	/^ffff800000105332:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105335	kernel.asm	/^ffff800000105335:	c9                   	leaveq $/;"	l
ffff800000105336	kernel.asm	/^ffff800000105336:	c3                   	retq   $/;"	l
ffff800000105337	kernel.asm	/^ffff800000105337 <xchg>:$/;"	l
ffff800000105337	kernel.asm	/^ffff800000105337:	55                   	push   %rbp$/;"	l
ffff800000105338	kernel.asm	/^ffff800000105338:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010533b	kernel.asm	/^ffff80000010533b:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010533f	kernel.asm	/^ffff80000010533f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105343	kernel.asm	/^ffff800000105343:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105347	kernel.asm	/^ffff800000105347:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010534b	kernel.asm	/^ffff80000010534b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010534f	kernel.asm	/^ffff80000010534f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000105353	kernel.asm	/^ffff800000105353:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff800000105356	kernel.asm	/^ffff800000105356:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000105359	kernel.asm	/^ffff800000105359:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010535c	kernel.asm	/^ffff80000010535c:	c9                   	leaveq $/;"	l
ffff80000010535d	kernel.asm	/^ffff80000010535d:	c3                   	retq   $/;"	l
ffff80000010535e	kernel.asm	/^ffff80000010535e <main>:$/;"	l
ffff80000010535e	kernel.asm	/^ffff80000010535e:	55                   	push   %rbp$/;"	l
ffff80000010535f	kernel.asm	/^ffff80000010535f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105362	kernel.asm	/^ffff800000105362:	48 b8 67 9a 10 00 00 	movabs $0xffff800000109a67,%rax$/;"	l
ffff800000105369	kernel.asm	/^ffff800000105369:	80 ff ff $/;"	l
ffff80000010536c	kernel.asm	/^ffff80000010536c:	ff d0                	callq  *%rax$/;"	l
ffff80000010536e	kernel.asm	/^ffff80000010536e:	48 be 00 00 40 00 00 	movabs $0xffff800000400000,%rsi$/;"	l
ffff800000105375	kernel.asm	/^ffff800000105375:	80 ff ff $/;"	l
ffff800000105378	kernel.asm	/^ffff800000105378:	48 bf 00 f0 11 00 00 	movabs $0xffff80000011f000,%rdi$/;"	l
ffff80000010537f	kernel.asm	/^ffff80000010537f:	80 ff ff $/;"	l
ffff800000105382	kernel.asm	/^ffff800000105382:	48 b8 7c 3f 10 00 00 	movabs $0xffff800000103f7c,%rax$/;"	l
ffff800000105389	kernel.asm	/^ffff800000105389:	80 ff ff $/;"	l
ffff80000010538c	kernel.asm	/^ffff80000010538c:	ff d0                	callq  *%rax$/;"	l
ffff80000010538e	kernel.asm	/^ffff80000010538e:	48 b8 22 bc 10 00 00 	movabs $0xffff80000010bc22,%rax$/;"	l
ffff800000105395	kernel.asm	/^ffff800000105395:	80 ff ff $/;"	l
ffff800000105398	kernel.asm	/^ffff800000105398:	ff d0                	callq  *%rax$/;"	l
ffff80000010539a	kernel.asm	/^ffff80000010539a:	48 b8 6d 59 10 00 00 	movabs $0xffff80000010596d,%rax$/;"	l
ffff8000001053a1	kernel.asm	/^ffff8000001053a1:	80 ff ff $/;"	l
ffff8000001053a4	kernel.asm	/^ffff8000001053a4:	ff d0                	callq  *%rax$/;"	l
ffff8000001053a6	kernel.asm	/^ffff8000001053a6:	48 b8 9e 44 10 00 00 	movabs $0xffff80000010449e,%rax$/;"	l
ffff8000001053ad	kernel.asm	/^ffff8000001053ad:	80 ff ff $/;"	l
ffff8000001053b0	kernel.asm	/^ffff8000001053b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001053b2	kernel.asm	/^ffff8000001053b2:	48 b8 2f 95 10 00 00 	movabs $0xffff80000010952f,%rax$/;"	l
ffff8000001053b9	kernel.asm	/^ffff8000001053b9:	80 ff ff $/;"	l
ffff8000001053bc	kernel.asm	/^ffff8000001053bc:	ff d0                	callq  *%rax$/;"	l
ffff8000001053be	kernel.asm	/^ffff8000001053be:	48 b8 65 b7 10 00 00 	movabs $0xffff80000010b765,%rax$/;"	l
ffff8000001053c5	kernel.asm	/^ffff8000001053c5:	80 ff ff $/;"	l
ffff8000001053c8	kernel.asm	/^ffff8000001053c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001053ca	kernel.asm	/^ffff8000001053ca:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001053d1	kernel.asm	/^ffff8000001053d1:	80 ff ff $/;"	l
ffff8000001053d4	kernel.asm	/^ffff8000001053d4:	ff d0                	callq  *%rax$/;"	l
ffff8000001053d6	kernel.asm	/^ffff8000001053d6:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001053d8	kernel.asm	/^ffff8000001053d8:	48 bf 70 cd 10 00 00 	movabs $0xffff80000010cd70,%rdi$/;"	l
ffff8000001053df	kernel.asm	/^ffff8000001053df:	80 ff ff $/;"	l
ffff8000001053e2	kernel.asm	/^ffff8000001053e2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001053e7	kernel.asm	/^ffff8000001053e7:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001053ee	kernel.asm	/^ffff8000001053ee:	80 ff ff $/;"	l
ffff8000001053f1	kernel.asm	/^ffff8000001053f1:	ff d2                	callq  *%rdx$/;"	l
ffff8000001053f3	kernel.asm	/^ffff8000001053f3:	48 b8 4b 3e 10 00 00 	movabs $0xffff800000103e4b,%rax$/;"	l
ffff8000001053fa	kernel.asm	/^ffff8000001053fa:	80 ff ff $/;"	l
ffff8000001053fd	kernel.asm	/^ffff8000001053fd:	ff d0                	callq  *%rax$/;"	l
ffff8000001053ff	kernel.asm	/^ffff8000001053ff:	48 b8 af 13 10 00 00 	movabs $0xffff8000001013af,%rax$/;"	l
ffff800000105406	kernel.asm	/^ffff800000105406:	80 ff ff $/;"	l
ffff800000105409	kernel.asm	/^ffff800000105409:	ff d0                	callq  *%rax$/;"	l
ffff80000010540b	kernel.asm	/^ffff80000010540b:	48 b8 6b 9b 10 00 00 	movabs $0xffff800000109b6b,%rax$/;"	l
ffff800000105412	kernel.asm	/^ffff800000105412:	80 ff ff $/;"	l
ffff800000105415	kernel.asm	/^ffff800000105415:	ff d0                	callq  *%rax$/;"	l
ffff800000105417	kernel.asm	/^ffff800000105417:	48 b8 93 60 10 00 00 	movabs $0xffff800000106093,%rax$/;"	l
ffff80000010541e	kernel.asm	/^ffff80000010541e:	80 ff ff $/;"	l
ffff800000105421	kernel.asm	/^ffff800000105421:	ff d0                	callq  *%rax$/;"	l
ffff800000105423	kernel.asm	/^ffff800000105423:	48 b8 2f 95 10 00 00 	movabs $0xffff80000010952f,%rax$/;"	l
ffff80000010542a	kernel.asm	/^ffff80000010542a:	80 ff ff $/;"	l
ffff80000010542d	kernel.asm	/^ffff80000010542d:	ff d0                	callq  *%rax$/;"	l
ffff80000010542f	kernel.asm	/^ffff80000010542f:	48 b8 53 01 10 00 00 	movabs $0xffff800000100153,%rax$/;"	l
ffff800000105436	kernel.asm	/^ffff800000105436:	80 ff ff $/;"	l
ffff800000105439	kernel.asm	/^ffff800000105439:	ff d0                	callq  *%rax$/;"	l
ffff80000010543b	kernel.asm	/^ffff80000010543b:	48 b8 6d 1a 10 00 00 	movabs $0xffff800000101a6d,%rax$/;"	l
ffff800000105442	kernel.asm	/^ffff800000105442:	80 ff ff $/;"	l
ffff800000105445	kernel.asm	/^ffff800000105445:	ff d0                	callq  *%rax$/;"	l
ffff800000105447	kernel.asm	/^ffff800000105447:	48 b8 c6 38 10 00 00 	movabs $0xffff8000001038c6,%rax$/;"	l
ffff80000010544e	kernel.asm	/^ffff80000010544e:	80 ff ff $/;"	l
ffff800000105451	kernel.asm	/^ffff800000105451:	ff d0                	callq  *%rax$/;"	l
ffff800000105453	kernel.asm	/^ffff800000105453:	48 b8 46 55 10 00 00 	movabs $0xffff800000105546,%rax$/;"	l
ffff80000010545a	kernel.asm	/^ffff80000010545a:	80 ff ff $/;"	l
ffff80000010545d	kernel.asm	/^ffff80000010545d:	ff d0                	callq  *%rax$/;"	l
ffff80000010545f	kernel.asm	/^ffff80000010545f:	48 be 00 00 00 0e 00 	movabs $0xffff80000e000000,%rsi$/;"	l
ffff800000105466	kernel.asm	/^ffff800000105466:	80 ff ff $/;"	l
ffff800000105469	kernel.asm	/^ffff800000105469:	48 bf 00 00 40 00 00 	movabs $0xffff800000400000,%rdi$/;"	l
ffff800000105470	kernel.asm	/^ffff800000105470:	80 ff ff $/;"	l
ffff800000105473	kernel.asm	/^ffff800000105473:	48 b8 da 3f 10 00 00 	movabs $0xffff800000103fda,%rax$/;"	l
ffff80000010547a	kernel.asm	/^ffff80000010547a:	80 ff ff $/;"	l
ffff80000010547d	kernel.asm	/^ffff80000010547d:	ff d0                	callq  *%rax$/;"	l
ffff80000010547f	kernel.asm	/^ffff80000010547f:	48 b8 32 62 10 00 00 	movabs $0xffff800000106232,%rax$/;"	l
ffff800000105486	kernel.asm	/^ffff800000105486:	80 ff ff $/;"	l
ffff800000105489	kernel.asm	/^ffff800000105489:	ff d0                	callq  *%rax$/;"	l
ffff80000010548b	kernel.asm	/^ffff80000010548b:	48 b8 cb 54 10 00 00 	movabs $0xffff8000001054cb,%rax$/;"	l
ffff800000105492	kernel.asm	/^ffff800000105492:	80 ff ff $/;"	l
ffff800000105495	kernel.asm	/^ffff800000105495:	ff d0                	callq  *%rax$/;"	l
ffff800000105497	kernel.asm	/^ffff800000105497 <mpenter>:$/;"	l
ffff800000105497	kernel.asm	/^ffff800000105497:	55                   	push   %rbp$/;"	l
ffff800000105498	kernel.asm	/^ffff800000105498:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010549b	kernel.asm	/^ffff80000010549b:	48 b8 27 bd 10 00 00 	movabs $0xffff80000010bd27,%rax$/;"	l
ffff8000001054a2	kernel.asm	/^ffff8000001054a2:	80 ff ff $/;"	l
ffff8000001054a5	kernel.asm	/^ffff8000001054a5:	ff d0                	callq  *%rax$/;"	l
ffff8000001054a7	kernel.asm	/^ffff8000001054a7:	48 b8 65 b7 10 00 00 	movabs $0xffff80000010b765,%rax$/;"	l
ffff8000001054ae	kernel.asm	/^ffff8000001054ae:	80 ff ff $/;"	l
ffff8000001054b1	kernel.asm	/^ffff8000001054b1:	ff d0                	callq  *%rax$/;"	l
ffff8000001054b3	kernel.asm	/^ffff8000001054b3:	48 b8 9e 44 10 00 00 	movabs $0xffff80000010449e,%rax$/;"	l
ffff8000001054ba	kernel.asm	/^ffff8000001054ba:	80 ff ff $/;"	l
ffff8000001054bd	kernel.asm	/^ffff8000001054bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001054bf	kernel.asm	/^ffff8000001054bf:	48 b8 cb 54 10 00 00 	movabs $0xffff8000001054cb,%rax$/;"	l
ffff8000001054c6	kernel.asm	/^ffff8000001054c6:	80 ff ff $/;"	l
ffff8000001054c9	kernel.asm	/^ffff8000001054c9:	ff d0                	callq  *%rax$/;"	l
ffff8000001054cb	kernel.asm	/^ffff8000001054cb <mpmain>:$/;"	l
ffff8000001054cb	kernel.asm	/^ffff8000001054cb:	55                   	push   %rbp$/;"	l
ffff8000001054cc	kernel.asm	/^ffff8000001054cc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001054cf	kernel.asm	/^ffff8000001054cf:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001054d6	kernel.asm	/^ffff8000001054d6:	80 ff ff $/;"	l
ffff8000001054d9	kernel.asm	/^ffff8000001054d9:	ff d0                	callq  *%rax$/;"	l
ffff8000001054db	kernel.asm	/^ffff8000001054db:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001054dd	kernel.asm	/^ffff8000001054dd:	48 bf 87 cd 10 00 00 	movabs $0xffff80000010cd87,%rdi$/;"	l
ffff8000001054e4	kernel.asm	/^ffff8000001054e4:	80 ff ff $/;"	l
ffff8000001054e7	kernel.asm	/^ffff8000001054e7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001054ec	kernel.asm	/^ffff8000001054ec:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001054f3	kernel.asm	/^ffff8000001054f3:	80 ff ff $/;"	l
ffff8000001054f6	kernel.asm	/^ffff8000001054f6:	ff d2                	callq  *%rdx$/;"	l
ffff8000001054f8	kernel.asm	/^ffff8000001054f8:	48 b8 07 95 10 00 00 	movabs $0xffff800000109507,%rax$/;"	l
ffff8000001054ff	kernel.asm	/^ffff8000001054ff:	80 ff ff $/;"	l
ffff800000105502	kernel.asm	/^ffff800000105502:	ff d0                	callq  *%rax$/;"	l
ffff800000105504	kernel.asm	/^ffff800000105504:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105509	kernel.asm	/^ffff800000105509:	48 ba f1 b6 10 00 00 	movabs $0xffff80000010b6f1,%rdx$/;"	l
ffff800000105510	kernel.asm	/^ffff800000105510:	80 ff ff $/;"	l
ffff800000105513	kernel.asm	/^ffff800000105513:	ff d2                	callq  *%rdx$/;"	l
ffff800000105515	kernel.asm	/^ffff800000105515:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff80000010551c	kernel.asm	/^ffff80000010551c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105520	kernel.asm	/^ffff800000105520:	48 05 d8 00 00 00    	add    $0xd8,%rax$/;"	l
ffff800000105526	kernel.asm	/^ffff800000105526:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010552b	kernel.asm	/^ffff80000010552b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010552e	kernel.asm	/^ffff80000010552e:	48 b8 37 53 10 00 00 	movabs $0xffff800000105337,%rax$/;"	l
ffff800000105535	kernel.asm	/^ffff800000105535:	80 ff ff $/;"	l
ffff800000105538	kernel.asm	/^ffff800000105538:	ff d0                	callq  *%rax$/;"	l
ffff80000010553a	kernel.asm	/^ffff80000010553a:	48 b8 48 6a 10 00 00 	movabs $0xffff800000106a48,%rax$/;"	l
ffff800000105541	kernel.asm	/^ffff800000105541:	80 ff ff $/;"	l
ffff800000105544	kernel.asm	/^ffff800000105544:	ff d0                	callq  *%rax$/;"	l
ffff800000105546	kernel.asm	/^ffff800000105546 <startothers>:$/;"	l
ffff800000105546	kernel.asm	/^ffff800000105546:	55                   	push   %rbp$/;"	l
ffff800000105547	kernel.asm	/^ffff800000105547:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010554a	kernel.asm	/^ffff80000010554a:	53                   	push   %rbx$/;"	l
ffff80000010554b	kernel.asm	/^ffff80000010554b:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010554f	kernel.asm	/^ffff80000010554f:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax$/;"	l
ffff800000105556	kernel.asm	/^ffff800000105556:	80 ff ff $/;"	l
ffff800000105559	kernel.asm	/^ffff800000105559:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010555d	kernel.asm	/^ffff80000010555d:	48 b8 72 00 00 00 00 	movabs $0x72,%rax$/;"	l
ffff800000105564	kernel.asm	/^ffff800000105564:	00 00 00 $/;"	l
ffff800000105567	kernel.asm	/^ffff800000105567:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105569	kernel.asm	/^ffff800000105569:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010556d	kernel.asm	/^ffff80000010556d:	48 be 9c 02 11 00 00 	movabs $0xffff80000011029c,%rsi$/;"	l
ffff800000105574	kernel.asm	/^ffff800000105574:	80 ff ff $/;"	l
ffff800000105577	kernel.asm	/^ffff800000105577:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010557a	kernel.asm	/^ffff80000010557a:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000105581	kernel.asm	/^ffff800000105581:	80 ff ff $/;"	l
ffff800000105584	kernel.asm	/^ffff800000105584:	ff d0                	callq  *%rax$/;"	l
ffff800000105586	kernel.asm	/^ffff800000105586:	48 b8 e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rax$/;"	l
ffff80000010558d	kernel.asm	/^ffff80000010558d:	80 ff ff $/;"	l
ffff800000105590	kernel.asm	/^ffff800000105590:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105594	kernel.asm	/^ffff800000105594:	e9 c2 00 00 00       	jmpq   ffff80000010565b <startothers+0x115>$/;"	l
ffff800000105599	kernel.asm	/^ffff800000105599:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001055a0	kernel.asm	/^ffff8000001055a0:	80 ff ff $/;"	l
ffff8000001055a3	kernel.asm	/^ffff8000001055a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001055a5	kernel.asm	/^ffff8000001055a5:	48 98                	cltq   $/;"	l
ffff8000001055a7	kernel.asm	/^ffff8000001055a7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff8000001055ab	kernel.asm	/^ffff8000001055ab:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001055ae	kernel.asm	/^ffff8000001055ae:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff8000001055b2	kernel.asm	/^ffff8000001055b2:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff8000001055b5	kernel.asm	/^ffff8000001055b5:	48 b8 e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rax$/;"	l
ffff8000001055bc	kernel.asm	/^ffff8000001055bc:	80 ff ff $/;"	l
ffff8000001055bf	kernel.asm	/^ffff8000001055bf:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001055c2	kernel.asm	/^ffff8000001055c2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff8000001055c6	kernel.asm	/^ffff8000001055c6:	0f 84 86 00 00 00    	je     ffff800000105652 <startothers+0x10c>$/;"	l
ffff8000001055cc	kernel.asm	/^ffff8000001055cc:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff8000001055d3	kernel.asm	/^ffff8000001055d3:	80 ff ff $/;"	l
ffff8000001055d6	kernel.asm	/^ffff8000001055d6:	ff d0                	callq  *%rax$/;"	l
ffff8000001055d8	kernel.asm	/^ffff8000001055d8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001055dc	kernel.asm	/^ffff8000001055dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001055e0	kernel.asm	/^ffff8000001055e0:	48 83 e8 04          	sub    $0x4,%rax$/;"	l
ffff8000001055e4	kernel.asm	/^ffff8000001055e4:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)$/;"	l
ffff8000001055ea	kernel.asm	/^ffff8000001055ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001055ee	kernel.asm	/^ffff8000001055ee:	48 8d 58 f8          	lea    -0x8(%rax),%rbx$/;"	l
ffff8000001055f2	kernel.asm	/^ffff8000001055f2:	48 bf 49 00 10 00 00 	movabs $0xffff800000100049,%rdi$/;"	l
ffff8000001055f9	kernel.asm	/^ffff8000001055f9:	80 ff ff $/;"	l
ffff8000001055fc	kernel.asm	/^ffff8000001055fc:	48 b8 18 53 10 00 00 	movabs $0xffff800000105318,%rax$/;"	l
ffff800000105603	kernel.asm	/^ffff800000105603:	80 ff ff $/;"	l
ffff800000105606	kernel.asm	/^ffff800000105606:	ff d0                	callq  *%rax$/;"	l
ffff800000105608	kernel.asm	/^ffff800000105608:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff80000010560a	kernel.asm	/^ffff80000010560a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010560e	kernel.asm	/^ffff80000010560e:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff800000105612	kernel.asm	/^ffff800000105612:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000105616	kernel.asm	/^ffff800000105616:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx$/;"	l
ffff80000010561d	kernel.asm	/^ffff80000010561d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105620	kernel.asm	/^ffff800000105620:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105624	kernel.asm	/^ffff800000105624:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105626	kernel.asm	/^ffff800000105626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010562a	kernel.asm	/^ffff80000010562a:	0f b6 40 01          	movzbl 0x1(%rax),%eax$/;"	l
ffff80000010562e	kernel.asm	/^ffff80000010562e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105631	kernel.asm	/^ffff800000105631:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000105633	kernel.asm	/^ffff800000105633:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000105635	kernel.asm	/^ffff800000105635:	48 b8 72 47 10 00 00 	movabs $0xffff800000104772,%rax$/;"	l
ffff80000010563c	kernel.asm	/^ffff80000010563c:	80 ff ff $/;"	l
ffff80000010563f	kernel.asm	/^ffff80000010563f:	ff d0                	callq  *%rax$/;"	l
ffff800000105641	kernel.asm	/^ffff800000105641:	90                   	nop$/;"	l
ffff800000105642	kernel.asm	/^ffff800000105642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105646	kernel.asm	/^ffff800000105646:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax$/;"	l
ffff80000010564c	kernel.asm	/^ffff80000010564c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010564e	kernel.asm	/^ffff80000010564e:	74 f2                	je     ffff800000105642 <startothers+0xfc>$/;"	l
ffff800000105650	kernel.asm	/^ffff800000105650:	eb 01                	jmp    ffff800000105653 <startothers+0x10d>$/;"	l
ffff800000105652	kernel.asm	/^ffff800000105652:	90                   	nop$/;"	l
ffff800000105653	kernel.asm	/^ffff800000105653:	48 81 45 e8 f0 00 00 	addq   $0xf0,-0x18(%rbp)$/;"	l
ffff80000010565a	kernel.asm	/^ffff80000010565a:	00 $/;"	l
ffff80000010565b	kernel.asm	/^ffff80000010565b:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105662	kernel.asm	/^ffff800000105662:	80 ff ff $/;"	l
ffff800000105665	kernel.asm	/^ffff800000105665:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105667	kernel.asm	/^ffff800000105667:	48 98                	cltq   $/;"	l
ffff800000105669	kernel.asm	/^ffff800000105669:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010566d	kernel.asm	/^ffff80000010566d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105670	kernel.asm	/^ffff800000105670:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000105674	kernel.asm	/^ffff800000105674:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000105677	kernel.asm	/^ffff800000105677:	48 b8 e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rax$/;"	l
ffff80000010567e	kernel.asm	/^ffff80000010567e:	80 ff ff $/;"	l
ffff800000105681	kernel.asm	/^ffff800000105681:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105684	kernel.asm	/^ffff800000105684:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105688	kernel.asm	/^ffff800000105688:	0f 87 0b ff ff ff    	ja     ffff800000105599 <startothers+0x53>$/;"	l
ffff80000010568e	kernel.asm	/^ffff80000010568e:	90                   	nop$/;"	l
ffff80000010568f	kernel.asm	/^ffff80000010568f:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff800000105693	kernel.asm	/^ffff800000105693:	5b                   	pop    %rbx$/;"	l
ffff800000105694	kernel.asm	/^ffff800000105694:	5d                   	pop    %rbp$/;"	l
ffff800000105695	kernel.asm	/^ffff800000105695:	c3                   	retq   $/;"	l
ffff800000105696	kernel.asm	/^ffff800000105696 <inb>:$/;"	l
ffff800000105696	kernel.asm	/^ffff800000105696:	55                   	push   %rbp$/;"	l
ffff800000105697	kernel.asm	/^ffff800000105697:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010569a	kernel.asm	/^ffff80000010569a:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010569e	kernel.asm	/^ffff80000010569e:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001056a0	kernel.asm	/^ffff8000001056a0:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001056a4	kernel.asm	/^ffff8000001056a4:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001056a8	kernel.asm	/^ffff8000001056a8:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001056aa	kernel.asm	/^ffff8000001056aa:	ec                   	in     (%dx),%al$/;"	l
ffff8000001056ab	kernel.asm	/^ffff8000001056ab:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001056ae	kernel.asm	/^ffff8000001056ae:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001056b2	kernel.asm	/^ffff8000001056b2:	c9                   	leaveq $/;"	l
ffff8000001056b3	kernel.asm	/^ffff8000001056b3:	c3                   	retq   $/;"	l
ffff8000001056b4	kernel.asm	/^ffff8000001056b4 <outb>:$/;"	l
ffff8000001056b4	kernel.asm	/^ffff8000001056b4:	55                   	push   %rbp$/;"	l
ffff8000001056b5	kernel.asm	/^ffff8000001056b5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001056b8	kernel.asm	/^ffff8000001056b8:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001056bc	kernel.asm	/^ffff8000001056bc:	89 fa                	mov    %edi,%edx$/;"	l
ffff8000001056be	kernel.asm	/^ffff8000001056be:	89 f0                	mov    %esi,%eax$/;"	l
ffff8000001056c0	kernel.asm	/^ffff8000001056c0:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff8000001056c4	kernel.asm	/^ffff8000001056c4:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff8000001056c7	kernel.asm	/^ffff8000001056c7:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff8000001056cb	kernel.asm	/^ffff8000001056cb:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff8000001056cf	kernel.asm	/^ffff8000001056cf:	ee                   	out    %al,(%dx)$/;"	l
ffff8000001056d0	kernel.asm	/^ffff8000001056d0:	90                   	nop$/;"	l
ffff8000001056d1	kernel.asm	/^ffff8000001056d1:	c9                   	leaveq $/;"	l
ffff8000001056d2	kernel.asm	/^ffff8000001056d2:	c3                   	retq   $/;"	l
ffff8000001056d3	kernel.asm	/^ffff8000001056d3 <sum>:$/;"	l
ffff8000001056d3	kernel.asm	/^ffff8000001056d3:	55                   	push   %rbp$/;"	l
ffff8000001056d4	kernel.asm	/^ffff8000001056d4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001056d7	kernel.asm	/^ffff8000001056d7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001056db	kernel.asm	/^ffff8000001056db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001056df	kernel.asm	/^ffff8000001056df:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001056e2	kernel.asm	/^ffff8000001056e2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001056e9	kernel.asm	/^ffff8000001056e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001056f0	kernel.asm	/^ffff8000001056f0:	eb 1a                	jmp    ffff80000010570c <sum+0x39>$/;"	l
ffff8000001056f2	kernel.asm	/^ffff8000001056f2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001056f5	kernel.asm	/^ffff8000001056f5:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001056f8	kernel.asm	/^ffff8000001056f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001056fc	kernel.asm	/^ffff8000001056fc:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001056ff	kernel.asm	/^ffff8000001056ff:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105702	kernel.asm	/^ffff800000105702:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105705	kernel.asm	/^ffff800000105705:	01 45 f8             	add    %eax,-0x8(%rbp)$/;"	l
ffff800000105708	kernel.asm	/^ffff800000105708:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010570c	kernel.asm	/^ffff80000010570c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010570f	kernel.asm	/^ffff80000010570f:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff800000105712	kernel.asm	/^ffff800000105712:	7c de                	jl     ffff8000001056f2 <sum+0x1f>$/;"	l
ffff800000105714	kernel.asm	/^ffff800000105714:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000105717	kernel.asm	/^ffff800000105717:	c9                   	leaveq $/;"	l
ffff800000105718	kernel.asm	/^ffff800000105718:	c3                   	retq   $/;"	l
ffff800000105719	kernel.asm	/^ffff800000105719 <mpsearch1>:$/;"	l
ffff800000105719	kernel.asm	/^ffff800000105719:	55                   	push   %rbp$/;"	l
ffff80000010571a	kernel.asm	/^ffff80000010571a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010571d	kernel.asm	/^ffff80000010571d:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105721	kernel.asm	/^ffff800000105721:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000105725	kernel.asm	/^ffff800000105725:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff800000105728	kernel.asm	/^ffff800000105728:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010572f	kernel.asm	/^ffff80000010572f:	80 ff ff $/;"	l
ffff800000105732	kernel.asm	/^ffff800000105732:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000105736	kernel.asm	/^ffff800000105736:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105739	kernel.asm	/^ffff800000105739:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010573d	kernel.asm	/^ffff80000010573d:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff800000105740	kernel.asm	/^ffff800000105740:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000105743	kernel.asm	/^ffff800000105743:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105747	kernel.asm	/^ffff800000105747:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010574a	kernel.asm	/^ffff80000010574a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010574e	kernel.asm	/^ffff80000010574e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105752	kernel.asm	/^ffff800000105752:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105756	kernel.asm	/^ffff800000105756:	eb 4d                	jmp    ffff8000001057a5 <mpsearch1+0x8c>$/;"	l
ffff800000105758	kernel.asm	/^ffff800000105758:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010575c	kernel.asm	/^ffff80000010575c:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff800000105761	kernel.asm	/^ffff800000105761:	48 be 98 cd 10 00 00 	movabs $0xffff80000010cd98,%rsi$/;"	l
ffff800000105768	kernel.asm	/^ffff800000105768:	80 ff ff $/;"	l
ffff80000010576b	kernel.asm	/^ffff80000010576b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010576e	kernel.asm	/^ffff80000010576e:	48 b8 24 77 10 00 00 	movabs $0xffff800000107724,%rax$/;"	l
ffff800000105775	kernel.asm	/^ffff800000105775:	80 ff ff $/;"	l
ffff800000105778	kernel.asm	/^ffff800000105778:	ff d0                	callq  *%rax$/;"	l
ffff80000010577a	kernel.asm	/^ffff80000010577a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010577c	kernel.asm	/^ffff80000010577c:	75 22                	jne    ffff8000001057a0 <mpsearch1+0x87>$/;"	l
ffff80000010577e	kernel.asm	/^ffff80000010577e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105782	kernel.asm	/^ffff800000105782:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff800000105787	kernel.asm	/^ffff800000105787:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010578a	kernel.asm	/^ffff80000010578a:	48 b8 d3 56 10 00 00 	movabs $0xffff8000001056d3,%rax$/;"	l
ffff800000105791	kernel.asm	/^ffff800000105791:	80 ff ff $/;"	l
ffff800000105794	kernel.asm	/^ffff800000105794:	ff d0                	callq  *%rax$/;"	l
ffff800000105796	kernel.asm	/^ffff800000105796:	84 c0                	test   %al,%al$/;"	l
ffff800000105798	kernel.asm	/^ffff800000105798:	75 06                	jne    ffff8000001057a0 <mpsearch1+0x87>$/;"	l
ffff80000010579a	kernel.asm	/^ffff80000010579a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010579e	kernel.asm	/^ffff80000010579e:	eb 14                	jmp    ffff8000001057b4 <mpsearch1+0x9b>$/;"	l
ffff8000001057a0	kernel.asm	/^ffff8000001057a0:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)$/;"	l
ffff8000001057a5	kernel.asm	/^ffff8000001057a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001057a9	kernel.asm	/^ffff8000001057a9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff8000001057ad	kernel.asm	/^ffff8000001057ad:	72 a9                	jb     ffff800000105758 <mpsearch1+0x3f>$/;"	l
ffff8000001057af	kernel.asm	/^ffff8000001057af:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001057b4	kernel.asm	/^ffff8000001057b4:	c9                   	leaveq $/;"	l
ffff8000001057b5	kernel.asm	/^ffff8000001057b5:	c3                   	retq   $/;"	l
ffff8000001057b6	kernel.asm	/^ffff8000001057b6 <mpsearch>:$/;"	l
ffff8000001057b6	kernel.asm	/^ffff8000001057b6:	55                   	push   %rbp$/;"	l
ffff8000001057b7	kernel.asm	/^ffff8000001057b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001057ba	kernel.asm	/^ffff8000001057ba:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001057be	kernel.asm	/^ffff8000001057be:	48 b8 00 04 00 00 00 	movabs $0xffff800000000400,%rax$/;"	l
ffff8000001057c5	kernel.asm	/^ffff8000001057c5:	80 ff ff $/;"	l
ffff8000001057c8	kernel.asm	/^ffff8000001057c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001057cc	kernel.asm	/^ffff8000001057cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001057d0	kernel.asm	/^ffff8000001057d0:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ffff8000001057d4	kernel.asm	/^ffff8000001057d4:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001057d7	kernel.asm	/^ffff8000001057d7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001057da	kernel.asm	/^ffff8000001057da:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001057dd	kernel.asm	/^ffff8000001057dd:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001057df	kernel.asm	/^ffff8000001057df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001057e3	kernel.asm	/^ffff8000001057e3:	48 83 c0 0e          	add    $0xe,%rax$/;"	l
ffff8000001057e7	kernel.asm	/^ffff8000001057e7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001057ea	kernel.asm	/^ffff8000001057ea:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001057ed	kernel.asm	/^ffff8000001057ed:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001057ef	kernel.asm	/^ffff8000001057ef:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff8000001057f2	kernel.asm	/^ffff8000001057f2:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001057f5	kernel.asm	/^ffff8000001057f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001057f9	kernel.asm	/^ffff8000001057f9:	74 28                	je     ffff800000105823 <mpsearch+0x6d>$/;"	l
ffff8000001057fb	kernel.asm	/^ffff8000001057fb:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001057fe	kernel.asm	/^ffff8000001057fe:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff800000105803	kernel.asm	/^ffff800000105803:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105806	kernel.asm	/^ffff800000105806:	48 b8 19 57 10 00 00 	movabs $0xffff800000105719,%rax$/;"	l
ffff80000010580d	kernel.asm	/^ffff80000010580d:	80 ff ff $/;"	l
ffff800000105810	kernel.asm	/^ffff800000105810:	ff d0                	callq  *%rax$/;"	l
ffff800000105812	kernel.asm	/^ffff800000105812:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105816	kernel.asm	/^ffff800000105816:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010581b	kernel.asm	/^ffff80000010581b:	74 5e                	je     ffff80000010587b <mpsearch+0xc5>$/;"	l
ffff80000010581d	kernel.asm	/^ffff80000010581d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105821	kernel.asm	/^ffff800000105821:	eb 6e                	jmp    ffff800000105891 <mpsearch+0xdb>$/;"	l
ffff800000105823	kernel.asm	/^ffff800000105823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105827	kernel.asm	/^ffff800000105827:	48 83 c0 14          	add    $0x14,%rax$/;"	l
ffff80000010582b	kernel.asm	/^ffff80000010582b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010582e	kernel.asm	/^ffff80000010582e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105831	kernel.asm	/^ffff800000105831:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000105834	kernel.asm	/^ffff800000105834:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105836	kernel.asm	/^ffff800000105836:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010583a	kernel.asm	/^ffff80000010583a:	48 83 c0 13          	add    $0x13,%rax$/;"	l
ffff80000010583e	kernel.asm	/^ffff80000010583e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105841	kernel.asm	/^ffff800000105841:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105844	kernel.asm	/^ffff800000105844:	09 d0                	or     %edx,%eax$/;"	l
ffff800000105846	kernel.asm	/^ffff800000105846:	c1 e0 0a             	shl    $0xa,%eax$/;"	l
ffff800000105849	kernel.asm	/^ffff800000105849:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff80000010584c	kernel.asm	/^ffff80000010584c:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010584f	kernel.asm	/^ffff80000010584f:	2d 00 04 00 00       	sub    $0x400,%eax$/;"	l
ffff800000105854	kernel.asm	/^ffff800000105854:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000105856	kernel.asm	/^ffff800000105856:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff80000010585b	kernel.asm	/^ffff80000010585b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010585e	kernel.asm	/^ffff80000010585e:	48 b8 19 57 10 00 00 	movabs $0xffff800000105719,%rax$/;"	l
ffff800000105865	kernel.asm	/^ffff800000105865:	80 ff ff $/;"	l
ffff800000105868	kernel.asm	/^ffff800000105868:	ff d0                	callq  *%rax$/;"	l
ffff80000010586a	kernel.asm	/^ffff80000010586a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010586e	kernel.asm	/^ffff80000010586e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000105873	kernel.asm	/^ffff800000105873:	74 06                	je     ffff80000010587b <mpsearch+0xc5>$/;"	l
ffff800000105875	kernel.asm	/^ffff800000105875:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105879	kernel.asm	/^ffff800000105879:	eb 16                	jmp    ffff800000105891 <mpsearch+0xdb>$/;"	l
ffff80000010587b	kernel.asm	/^ffff80000010587b:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff800000105880	kernel.asm	/^ffff800000105880:	bf 00 00 0f 00       	mov    $0xf0000,%edi$/;"	l
ffff800000105885	kernel.asm	/^ffff800000105885:	48 b8 19 57 10 00 00 	movabs $0xffff800000105719,%rax$/;"	l
ffff80000010588c	kernel.asm	/^ffff80000010588c:	80 ff ff $/;"	l
ffff80000010588f	kernel.asm	/^ffff80000010588f:	ff d0                	callq  *%rax$/;"	l
ffff800000105891	kernel.asm	/^ffff800000105891:	c9                   	leaveq $/;"	l
ffff800000105892	kernel.asm	/^ffff800000105892:	c3                   	retq   $/;"	l
ffff800000105893	kernel.asm	/^ffff800000105893 <mpconfig>:$/;"	l
ffff800000105893	kernel.asm	/^ffff800000105893:	55                   	push   %rbp$/;"	l
ffff800000105894	kernel.asm	/^ffff800000105894:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105897	kernel.asm	/^ffff800000105897:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010589b	kernel.asm	/^ffff80000010589b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010589f	kernel.asm	/^ffff80000010589f:	48 b8 b6 57 10 00 00 	movabs $0xffff8000001057b6,%rax$/;"	l
ffff8000001058a6	kernel.asm	/^ffff8000001058a6:	80 ff ff $/;"	l
ffff8000001058a9	kernel.asm	/^ffff8000001058a9:	ff d0                	callq  *%rax$/;"	l
ffff8000001058ab	kernel.asm	/^ffff8000001058ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001058af	kernel.asm	/^ffff8000001058af:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001058b4	kernel.asm	/^ffff8000001058b4:	74 0b                	je     ffff8000001058c1 <mpconfig+0x2e>$/;"	l
ffff8000001058b6	kernel.asm	/^ffff8000001058b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001058ba	kernel.asm	/^ffff8000001058ba:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001058bd	kernel.asm	/^ffff8000001058bd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001058bf	kernel.asm	/^ffff8000001058bf:	75 0a                	jne    ffff8000001058cb <mpconfig+0x38>$/;"	l
ffff8000001058c1	kernel.asm	/^ffff8000001058c1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001058c6	kernel.asm	/^ffff8000001058c6:	e9 a0 00 00 00       	jmpq   ffff80000010596b <mpconfig+0xd8>$/;"	l
ffff8000001058cb	kernel.asm	/^ffff8000001058cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001058cf	kernel.asm	/^ffff8000001058cf:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001058d2	kernel.asm	/^ffff8000001058d2:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001058d4	kernel.asm	/^ffff8000001058d4:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff8000001058db	kernel.asm	/^ffff8000001058db:	80 ff ff $/;"	l
ffff8000001058de	kernel.asm	/^ffff8000001058de:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001058e1	kernel.asm	/^ffff8000001058e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001058e5	kernel.asm	/^ffff8000001058e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001058e9	kernel.asm	/^ffff8000001058e9:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff8000001058ee	kernel.asm	/^ffff8000001058ee:	48 be 9d cd 10 00 00 	movabs $0xffff80000010cd9d,%rsi$/;"	l
ffff8000001058f5	kernel.asm	/^ffff8000001058f5:	80 ff ff $/;"	l
ffff8000001058f8	kernel.asm	/^ffff8000001058f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001058fb	kernel.asm	/^ffff8000001058fb:	48 b8 24 77 10 00 00 	movabs $0xffff800000107724,%rax$/;"	l
ffff800000105902	kernel.asm	/^ffff800000105902:	80 ff ff $/;"	l
ffff800000105905	kernel.asm	/^ffff800000105905:	ff d0                	callq  *%rax$/;"	l
ffff800000105907	kernel.asm	/^ffff800000105907:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105909	kernel.asm	/^ffff800000105909:	74 07                	je     ffff800000105912 <mpconfig+0x7f>$/;"	l
ffff80000010590b	kernel.asm	/^ffff80000010590b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105910	kernel.asm	/^ffff800000105910:	eb 59                	jmp    ffff80000010596b <mpconfig+0xd8>$/;"	l
ffff800000105912	kernel.asm	/^ffff800000105912:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105916	kernel.asm	/^ffff800000105916:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff80000010591a	kernel.asm	/^ffff80000010591a:	3c 01                	cmp    $0x1,%al$/;"	l
ffff80000010591c	kernel.asm	/^ffff80000010591c:	74 13                	je     ffff800000105931 <mpconfig+0x9e>$/;"	l
ffff80000010591e	kernel.asm	/^ffff80000010591e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105922	kernel.asm	/^ffff800000105922:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff800000105926	kernel.asm	/^ffff800000105926:	3c 04                	cmp    $0x4,%al$/;"	l
ffff800000105928	kernel.asm	/^ffff800000105928:	74 07                	je     ffff800000105931 <mpconfig+0x9e>$/;"	l
ffff80000010592a	kernel.asm	/^ffff80000010592a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010592f	kernel.asm	/^ffff80000010592f:	eb 3a                	jmp    ffff80000010596b <mpconfig+0xd8>$/;"	l
ffff800000105931	kernel.asm	/^ffff800000105931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105935	kernel.asm	/^ffff800000105935:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff800000105939	kernel.asm	/^ffff800000105939:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff80000010593c	kernel.asm	/^ffff80000010593c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105940	kernel.asm	/^ffff800000105940:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000105942	kernel.asm	/^ffff800000105942:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105945	kernel.asm	/^ffff800000105945:	48 b8 d3 56 10 00 00 	movabs $0xffff8000001056d3,%rax$/;"	l
ffff80000010594c	kernel.asm	/^ffff80000010594c:	80 ff ff $/;"	l
ffff80000010594f	kernel.asm	/^ffff80000010594f:	ff d0                	callq  *%rax$/;"	l
ffff800000105951	kernel.asm	/^ffff800000105951:	84 c0                	test   %al,%al$/;"	l
ffff800000105953	kernel.asm	/^ffff800000105953:	74 07                	je     ffff80000010595c <mpconfig+0xc9>$/;"	l
ffff800000105955	kernel.asm	/^ffff800000105955:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010595a	kernel.asm	/^ffff80000010595a:	eb 0f                	jmp    ffff80000010596b <mpconfig+0xd8>$/;"	l
ffff80000010595c	kernel.asm	/^ffff80000010595c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105960	kernel.asm	/^ffff800000105960:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105964	kernel.asm	/^ffff800000105964:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105967	kernel.asm	/^ffff800000105967:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010596b	kernel.asm	/^ffff80000010596b:	c9                   	leaveq $/;"	l
ffff80000010596c	kernel.asm	/^ffff80000010596c:	c3                   	retq   $/;"	l
ffff80000010596d	kernel.asm	/^ffff80000010596d <mpinit>:$/;"	l
ffff80000010596d	kernel.asm	/^ffff80000010596d:	55                   	push   %rbp$/;"	l
ffff80000010596e	kernel.asm	/^ffff80000010596e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105971	kernel.asm	/^ffff800000105971:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105975	kernel.asm	/^ffff800000105975:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000105979	kernel.asm	/^ffff800000105979:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010597c	kernel.asm	/^ffff80000010597c:	48 b8 93 58 10 00 00 	movabs $0xffff800000105893,%rax$/;"	l
ffff800000105983	kernel.asm	/^ffff800000105983:	80 ff ff $/;"	l
ffff800000105986	kernel.asm	/^ffff800000105986:	ff d0                	callq  *%rax$/;"	l
ffff800000105988	kernel.asm	/^ffff800000105988:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010598c	kernel.asm	/^ffff80000010598c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000105991	kernel.asm	/^ffff800000105991:	75 20                	jne    ffff8000001059b3 <mpinit+0x46>$/;"	l
ffff800000105993	kernel.asm	/^ffff800000105993:	48 bf a2 cd 10 00 00 	movabs $0xffff80000010cda2,%rdi$/;"	l
ffff80000010599a	kernel.asm	/^ffff80000010599a:	80 ff ff $/;"	l
ffff80000010599d	kernel.asm	/^ffff80000010599d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001059a2	kernel.asm	/^ffff8000001059a2:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001059a9	kernel.asm	/^ffff8000001059a9:	80 ff ff $/;"	l
ffff8000001059ac	kernel.asm	/^ffff8000001059ac:	ff d2                	callq  *%rdx$/;"	l
ffff8000001059ae	kernel.asm	/^ffff8000001059ae:	e9 bb 01 00 00       	jmpq   ffff800000105b6e <mpinit+0x201>$/;"	l
ffff8000001059b3	kernel.asm	/^ffff8000001059b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001059b7	kernel.asm	/^ffff8000001059b7:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
ffff8000001059ba	kernel.asm	/^ffff8000001059ba:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001059bc	kernel.asm	/^ffff8000001059bc:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff8000001059c3	kernel.asm	/^ffff8000001059c3:	80 ff ff $/;"	l
ffff8000001059c6	kernel.asm	/^ffff8000001059c6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001059c9	kernel.asm	/^ffff8000001059c9:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001059cc	kernel.asm	/^ffff8000001059cc:	48 b8 c0 a1 11 00 00 	movabs $0xffff80000011a1c0,%rax$/;"	l
ffff8000001059d3	kernel.asm	/^ffff8000001059d3:	80 ff ff $/;"	l
ffff8000001059d6	kernel.asm	/^ffff8000001059d6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001059d9	kernel.asm	/^ffff8000001059d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001059dd	kernel.asm	/^ffff8000001059dd:	48 83 c0 2c          	add    $0x2c,%rax$/;"	l
ffff8000001059e1	kernel.asm	/^ffff8000001059e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001059e5	kernel.asm	/^ffff8000001059e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001059e9	kernel.asm	/^ffff8000001059e9:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff8000001059ed	kernel.asm	/^ffff8000001059ed:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff8000001059f0	kernel.asm	/^ffff8000001059f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001059f4	kernel.asm	/^ffff8000001059f4:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001059f7	kernel.asm	/^ffff8000001059f7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001059fb	kernel.asm	/^ffff8000001059fb:	e9 eb 00 00 00       	jmpq   ffff800000105aeb <mpinit+0x17e>$/;"	l
ffff800000105a00	kernel.asm	/^ffff800000105a00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a04	kernel.asm	/^ffff800000105a04:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105a07	kernel.asm	/^ffff800000105a07:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105a0a	kernel.asm	/^ffff800000105a0a:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000105a0d	kernel.asm	/^ffff800000105a0d:	0f 87 c2 00 00 00    	ja     ffff800000105ad5 <mpinit+0x168>$/;"	l
ffff800000105a13	kernel.asm	/^ffff800000105a13:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000105a15	kernel.asm	/^ffff800000105a15:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000105a1c	kernel.asm	/^ffff800000105a1c:	00 $/;"	l
ffff800000105a1d	kernel.asm	/^ffff800000105a1d:	48 b8 f8 cd 10 00 00 	movabs $0xffff80000010cdf8,%rax$/;"	l
ffff800000105a24	kernel.asm	/^ffff800000105a24:	80 ff ff $/;"	l
ffff800000105a27	kernel.asm	/^ffff800000105a27:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105a2a	kernel.asm	/^ffff800000105a2a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105a2d	kernel.asm	/^ffff800000105a2d:	ff e0                	jmpq   *%rax$/;"	l
ffff800000105a2f	kernel.asm	/^ffff800000105a2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a33	kernel.asm	/^ffff800000105a33:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff800000105a37	kernel.asm	/^ffff800000105a37:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105a3e	kernel.asm	/^ffff800000105a3e:	80 ff ff $/;"	l
ffff800000105a41	kernel.asm	/^ffff800000105a41:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105a43	kernel.asm	/^ffff800000105a43:	83 f8 07             	cmp    $0x7,%eax$/;"	l
ffff800000105a46	kernel.asm	/^ffff800000105a46:	7f 5c                	jg     ffff800000105aa4 <mpinit+0x137>$/;"	l
ffff800000105a48	kernel.asm	/^ffff800000105a48:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105a4f	kernel.asm	/^ffff800000105a4f:	80 ff ff $/;"	l
ffff800000105a52	kernel.asm	/^ffff800000105a52:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000105a54	kernel.asm	/^ffff800000105a54:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105a58	kernel.asm	/^ffff800000105a58:	0f b6 48 01          	movzbl 0x1(%rax),%ecx$/;"	l
ffff800000105a5c	kernel.asm	/^ffff800000105a5c:	48 be e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rsi$/;"	l
ffff800000105a63	kernel.asm	/^ffff800000105a63:	80 ff ff $/;"	l
ffff800000105a66	kernel.asm	/^ffff800000105a66:	48 63 c2             	movslq %edx,%rax$/;"	l
ffff800000105a69	kernel.asm	/^ffff800000105a69:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105a6c	kernel.asm	/^ffff800000105a6c:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000105a6f	kernel.asm	/^ffff800000105a6f:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff800000105a73	kernel.asm	/^ffff800000105a73:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105a76	kernel.asm	/^ffff800000105a76:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000105a79	kernel.asm	/^ffff800000105a79:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff800000105a7d	kernel.asm	/^ffff800000105a7d:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff800000105a80	kernel.asm	/^ffff800000105a80:	48 01 f0             	add    %rsi,%rax$/;"	l
ffff800000105a83	kernel.asm	/^ffff800000105a83:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000105a87	kernel.asm	/^ffff800000105a87:	88 08                	mov    %cl,(%rax)$/;"	l
ffff800000105a89	kernel.asm	/^ffff800000105a89:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105a90	kernel.asm	/^ffff800000105a90:	80 ff ff $/;"	l
ffff800000105a93	kernel.asm	/^ffff800000105a93:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105a95	kernel.asm	/^ffff800000105a95:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000105a98	kernel.asm	/^ffff800000105a98:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105a9f	kernel.asm	/^ffff800000105a9f:	80 ff ff $/;"	l
ffff800000105aa2	kernel.asm	/^ffff800000105aa2:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000105aa4	kernel.asm	/^ffff800000105aa4:	48 83 45 f8 14       	addq   $0x14,-0x8(%rbp)$/;"	l
ffff800000105aa9	kernel.asm	/^ffff800000105aa9:	eb 40                	jmp    ffff800000105aeb <mpinit+0x17e>$/;"	l
ffff800000105aab	kernel.asm	/^ffff800000105aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105aaf	kernel.asm	/^ffff800000105aaf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000105ab3	kernel.asm	/^ffff800000105ab3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000105ab7	kernel.asm	/^ffff800000105ab7:	0f b6 50 01          	movzbl 0x1(%rax),%edx$/;"	l
ffff800000105abb	kernel.asm	/^ffff800000105abb:	48 b8 64 aa 11 00 00 	movabs $0xffff80000011aa64,%rax$/;"	l
ffff800000105ac2	kernel.asm	/^ffff800000105ac2:	80 ff ff $/;"	l
ffff800000105ac5	kernel.asm	/^ffff800000105ac5:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000105ac7	kernel.asm	/^ffff800000105ac7:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105acc	kernel.asm	/^ffff800000105acc:	eb 1d                	jmp    ffff800000105aeb <mpinit+0x17e>$/;"	l
ffff800000105ace	kernel.asm	/^ffff800000105ace:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105ad3	kernel.asm	/^ffff800000105ad3:	eb 16                	jmp    ffff800000105aeb <mpinit+0x17e>$/;"	l
ffff800000105ad5	kernel.asm	/^ffff800000105ad5:	48 bf b8 cd 10 00 00 	movabs $0xffff80000010cdb8,%rdi$/;"	l
ffff800000105adc	kernel.asm	/^ffff800000105adc:	80 ff ff $/;"	l
ffff800000105adf	kernel.asm	/^ffff800000105adf:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000105ae6	kernel.asm	/^ffff800000105ae6:	80 ff ff $/;"	l
ffff800000105ae9	kernel.asm	/^ffff800000105ae9:	ff d0                	callq  *%rax$/;"	l
ffff800000105aeb	kernel.asm	/^ffff800000105aeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105aef	kernel.asm	/^ffff800000105aef:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105af3	kernel.asm	/^ffff800000105af3:	0f 82 07 ff ff ff    	jb     ffff800000105a00 <mpinit+0x93>$/;"	l
ffff800000105af9	kernel.asm	/^ffff800000105af9:	48 b8 60 aa 11 00 00 	movabs $0xffff80000011aa60,%rax$/;"	l
ffff800000105b00	kernel.asm	/^ffff800000105b00:	80 ff ff $/;"	l
ffff800000105b03	kernel.asm	/^ffff800000105b03:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105b05	kernel.asm	/^ffff800000105b05:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105b07	kernel.asm	/^ffff800000105b07:	48 bf d9 cd 10 00 00 	movabs $0xffff80000010cdd9,%rdi$/;"	l
ffff800000105b0e	kernel.asm	/^ffff800000105b0e:	80 ff ff $/;"	l
ffff800000105b11	kernel.asm	/^ffff800000105b11:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105b16	kernel.asm	/^ffff800000105b16:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000105b1d	kernel.asm	/^ffff800000105b1d:	80 ff ff $/;"	l
ffff800000105b20	kernel.asm	/^ffff800000105b20:	ff d2                	callq  *%rdx$/;"	l
ffff800000105b22	kernel.asm	/^ffff800000105b22:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000105b26	kernel.asm	/^ffff800000105b26:	0f b6 40 0c          	movzbl 0xc(%rax),%eax$/;"	l
ffff800000105b2a	kernel.asm	/^ffff800000105b2a:	84 c0                	test   %al,%al$/;"	l
ffff800000105b2c	kernel.asm	/^ffff800000105b2c:	74 40                	je     ffff800000105b6e <mpinit+0x201>$/;"	l
ffff800000105b2e	kernel.asm	/^ffff800000105b2e:	be 70 00 00 00       	mov    $0x70,%esi$/;"	l
ffff800000105b33	kernel.asm	/^ffff800000105b33:	bf 22 00 00 00       	mov    $0x22,%edi$/;"	l
ffff800000105b38	kernel.asm	/^ffff800000105b38:	48 b8 b4 56 10 00 00 	movabs $0xffff8000001056b4,%rax$/;"	l
ffff800000105b3f	kernel.asm	/^ffff800000105b3f:	80 ff ff $/;"	l
ffff800000105b42	kernel.asm	/^ffff800000105b42:	ff d0                	callq  *%rax$/;"	l
ffff800000105b44	kernel.asm	/^ffff800000105b44:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105b49	kernel.asm	/^ffff800000105b49:	48 b8 96 56 10 00 00 	movabs $0xffff800000105696,%rax$/;"	l
ffff800000105b50	kernel.asm	/^ffff800000105b50:	80 ff ff $/;"	l
ffff800000105b53	kernel.asm	/^ffff800000105b53:	ff d0                	callq  *%rax$/;"	l
ffff800000105b55	kernel.asm	/^ffff800000105b55:	83 c8 01             	or     $0x1,%eax$/;"	l
ffff800000105b58	kernel.asm	/^ffff800000105b58:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105b5b	kernel.asm	/^ffff800000105b5b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105b5d	kernel.asm	/^ffff800000105b5d:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105b62	kernel.asm	/^ffff800000105b62:	48 b8 b4 56 10 00 00 	movabs $0xffff8000001056b4,%rax$/;"	l
ffff800000105b69	kernel.asm	/^ffff800000105b69:	80 ff ff $/;"	l
ffff800000105b6c	kernel.asm	/^ffff800000105b6c:	ff d0                	callq  *%rax$/;"	l
ffff800000105b6e	kernel.asm	/^ffff800000105b6e:	c9                   	leaveq $/;"	l
ffff800000105b6f	kernel.asm	/^ffff800000105b6f:	c3                   	retq   $/;"	l
ffff800000105b70	kernel.asm	/^ffff800000105b70 <pipealloc>:$/;"	l
ffff800000105b70	kernel.asm	/^ffff800000105b70:	55                   	push   %rbp$/;"	l
ffff800000105b71	kernel.asm	/^ffff800000105b71:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105b74	kernel.asm	/^ffff800000105b74:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105b78	kernel.asm	/^ffff800000105b78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105b7c	kernel.asm	/^ffff800000105b7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105b80	kernel.asm	/^ffff800000105b80:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105b87	kernel.asm	/^ffff800000105b87:	00 $/;"	l
ffff800000105b88	kernel.asm	/^ffff800000105b88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b8c	kernel.asm	/^ffff800000105b8c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000105b93	kernel.asm	/^ffff800000105b93:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105b97	kernel.asm	/^ffff800000105b97:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000105b9a	kernel.asm	/^ffff800000105b9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105b9e	kernel.asm	/^ffff800000105b9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105ba1	kernel.asm	/^ffff800000105ba1:	48 b8 94 1a 10 00 00 	movabs $0xffff800000101a94,%rax$/;"	l
ffff800000105ba8	kernel.asm	/^ffff800000105ba8:	80 ff ff $/;"	l
ffff800000105bab	kernel.asm	/^ffff800000105bab:	ff d0                	callq  *%rax$/;"	l
ffff800000105bad	kernel.asm	/^ffff800000105bad:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105bb0	kernel.asm	/^ffff800000105bb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105bb4	kernel.asm	/^ffff800000105bb4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105bb7	kernel.asm	/^ffff800000105bb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105bbb	kernel.asm	/^ffff800000105bbb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105bbe	kernel.asm	/^ffff800000105bbe:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105bc1	kernel.asm	/^ffff800000105bc1:	0f 84 02 01 00 00    	je     ffff800000105cc9 <pipealloc+0x159>$/;"	l
ffff800000105bc7	kernel.asm	/^ffff800000105bc7:	48 b8 94 1a 10 00 00 	movabs $0xffff800000101a94,%rax$/;"	l
ffff800000105bce	kernel.asm	/^ffff800000105bce:	80 ff ff $/;"	l
ffff800000105bd1	kernel.asm	/^ffff800000105bd1:	ff d0                	callq  *%rax$/;"	l
ffff800000105bd3	kernel.asm	/^ffff800000105bd3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105bd6	kernel.asm	/^ffff800000105bd6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105bda	kernel.asm	/^ffff800000105bda:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105bdd	kernel.asm	/^ffff800000105bdd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105be1	kernel.asm	/^ffff800000105be1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105be4	kernel.asm	/^ffff800000105be4:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105be7	kernel.asm	/^ffff800000105be7:	0f 84 dc 00 00 00    	je     ffff800000105cc9 <pipealloc+0x159>$/;"	l
ffff800000105bed	kernel.asm	/^ffff800000105bed:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff800000105bf4	kernel.asm	/^ffff800000105bf4:	80 ff ff $/;"	l
ffff800000105bf7	kernel.asm	/^ffff800000105bf7:	ff d0                	callq  *%rax$/;"	l
ffff800000105bf9	kernel.asm	/^ffff800000105bf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105bfd	kernel.asm	/^ffff800000105bfd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105c02	kernel.asm	/^ffff800000105c02:	0f 84 c0 00 00 00    	je     ffff800000105cc8 <pipealloc+0x158>$/;"	l
ffff800000105c08	kernel.asm	/^ffff800000105c08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c0c	kernel.asm	/^ffff800000105c0c:	c7 80 70 02 00 00 01 	movl   $0x1,0x270(%rax)$/;"	l
ffff800000105c13	kernel.asm	/^ffff800000105c13:	00 00 00 $/;"	l
ffff800000105c16	kernel.asm	/^ffff800000105c16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c1a	kernel.asm	/^ffff800000105c1a:	c7 80 74 02 00 00 01 	movl   $0x1,0x274(%rax)$/;"	l
ffff800000105c21	kernel.asm	/^ffff800000105c21:	00 00 00 $/;"	l
ffff800000105c24	kernel.asm	/^ffff800000105c24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c28	kernel.asm	/^ffff800000105c28:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)$/;"	l
ffff800000105c2f	kernel.asm	/^ffff800000105c2f:	00 00 00 $/;"	l
ffff800000105c32	kernel.asm	/^ffff800000105c32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c36	kernel.asm	/^ffff800000105c36:	c7 80 68 02 00 00 00 	movl   $0x0,0x268(%rax)$/;"	l
ffff800000105c3d	kernel.asm	/^ffff800000105c3d:	00 00 00 $/;"	l
ffff800000105c40	kernel.asm	/^ffff800000105c40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c44	kernel.asm	/^ffff800000105c44:	48 be 20 ce 10 00 00 	movabs $0xffff80000010ce20,%rsi$/;"	l
ffff800000105c4b	kernel.asm	/^ffff800000105c4b:	80 ff ff $/;"	l
ffff800000105c4e	kernel.asm	/^ffff800000105c4e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105c51	kernel.asm	/^ffff800000105c51:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff800000105c58	kernel.asm	/^ffff800000105c58:	80 ff ff $/;"	l
ffff800000105c5b	kernel.asm	/^ffff800000105c5b:	ff d0                	callq  *%rax$/;"	l
ffff800000105c5d	kernel.asm	/^ffff800000105c5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c61	kernel.asm	/^ffff800000105c61:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c64	kernel.asm	/^ffff800000105c64:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105c6a	kernel.asm	/^ffff800000105c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c6e	kernel.asm	/^ffff800000105c6e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c71	kernel.asm	/^ffff800000105c71:	c6 40 08 01          	movb   $0x1,0x8(%rax)$/;"	l
ffff800000105c75	kernel.asm	/^ffff800000105c75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c79	kernel.asm	/^ffff800000105c79:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c7c	kernel.asm	/^ffff800000105c7c:	c6 40 09 00          	movb   $0x0,0x9(%rax)$/;"	l
ffff800000105c80	kernel.asm	/^ffff800000105c80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105c84	kernel.asm	/^ffff800000105c84:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c87	kernel.asm	/^ffff800000105c87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105c8b	kernel.asm	/^ffff800000105c8b:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105c8f	kernel.asm	/^ffff800000105c8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c93	kernel.asm	/^ffff800000105c93:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105c96	kernel.asm	/^ffff800000105c96:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105c9c	kernel.asm	/^ffff800000105c9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105ca0	kernel.asm	/^ffff800000105ca0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105ca3	kernel.asm	/^ffff800000105ca3:	c6 40 08 00          	movb   $0x0,0x8(%rax)$/;"	l
ffff800000105ca7	kernel.asm	/^ffff800000105ca7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105cab	kernel.asm	/^ffff800000105cab:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105cae	kernel.asm	/^ffff800000105cae:	c6 40 09 01          	movb   $0x1,0x9(%rax)$/;"	l
ffff800000105cb2	kernel.asm	/^ffff800000105cb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105cb6	kernel.asm	/^ffff800000105cb6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105cb9	kernel.asm	/^ffff800000105cb9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105cbd	kernel.asm	/^ffff800000105cbd:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105cc1	kernel.asm	/^ffff800000105cc1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105cc6	kernel.asm	/^ffff800000105cc6:	eb 64                	jmp    ffff800000105d2c <pipealloc+0x1bc>$/;"	l
ffff800000105cc8	kernel.asm	/^ffff800000105cc8:	90                   	nop$/;"	l
ffff800000105cc9	kernel.asm	/^ffff800000105cc9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105cce	kernel.asm	/^ffff800000105cce:	74 13                	je     ffff800000105ce3 <pipealloc+0x173>$/;"	l
ffff800000105cd0	kernel.asm	/^ffff800000105cd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cd4	kernel.asm	/^ffff800000105cd4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105cd7	kernel.asm	/^ffff800000105cd7:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff800000105cde	kernel.asm	/^ffff800000105cde:	80 ff ff $/;"	l
ffff800000105ce1	kernel.asm	/^ffff800000105ce1:	ff d0                	callq  *%rax$/;"	l
ffff800000105ce3	kernel.asm	/^ffff800000105ce3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ce7	kernel.asm	/^ffff800000105ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105cea	kernel.asm	/^ffff800000105cea:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105ced	kernel.asm	/^ffff800000105ced:	74 16                	je     ffff800000105d05 <pipealloc+0x195>$/;"	l
ffff800000105cef	kernel.asm	/^ffff800000105cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105cf3	kernel.asm	/^ffff800000105cf3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105cf6	kernel.asm	/^ffff800000105cf6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105cf9	kernel.asm	/^ffff800000105cf9:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff800000105d00	kernel.asm	/^ffff800000105d00:	80 ff ff $/;"	l
ffff800000105d03	kernel.asm	/^ffff800000105d03:	ff d0                	callq  *%rax$/;"	l
ffff800000105d05	kernel.asm	/^ffff800000105d05:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105d09	kernel.asm	/^ffff800000105d09:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105d0c	kernel.asm	/^ffff800000105d0c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105d0f	kernel.asm	/^ffff800000105d0f:	74 16                	je     ffff800000105d27 <pipealloc+0x1b7>$/;"	l
ffff800000105d11	kernel.asm	/^ffff800000105d11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105d15	kernel.asm	/^ffff800000105d15:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105d18	kernel.asm	/^ffff800000105d18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d1b	kernel.asm	/^ffff800000105d1b:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff800000105d22	kernel.asm	/^ffff800000105d22:	80 ff ff $/;"	l
ffff800000105d25	kernel.asm	/^ffff800000105d25:	ff d0                	callq  *%rax$/;"	l
ffff800000105d27	kernel.asm	/^ffff800000105d27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105d2c	kernel.asm	/^ffff800000105d2c:	c9                   	leaveq $/;"	l
ffff800000105d2d	kernel.asm	/^ffff800000105d2d:	c3                   	retq   $/;"	l
ffff800000105d2e	kernel.asm	/^ffff800000105d2e <pipeclose>:$/;"	l
ffff800000105d2e	kernel.asm	/^ffff800000105d2e:	55                   	push   %rbp$/;"	l
ffff800000105d2f	kernel.asm	/^ffff800000105d2f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105d32	kernel.asm	/^ffff800000105d32:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000105d36	kernel.asm	/^ffff800000105d36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000105d3a	kernel.asm	/^ffff800000105d3a:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000105d3d	kernel.asm	/^ffff800000105d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d41	kernel.asm	/^ffff800000105d41:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d44	kernel.asm	/^ffff800000105d44:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000105d4b	kernel.asm	/^ffff800000105d4b:	80 ff ff $/;"	l
ffff800000105d4e	kernel.asm	/^ffff800000105d4e:	ff d0                	callq  *%rax$/;"	l
ffff800000105d50	kernel.asm	/^ffff800000105d50:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff800000105d54	kernel.asm	/^ffff800000105d54:	74 29                	je     ffff800000105d7f <pipeclose+0x51>$/;"	l
ffff800000105d56	kernel.asm	/^ffff800000105d56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d5a	kernel.asm	/^ffff800000105d5a:	c7 80 74 02 00 00 00 	movl   $0x0,0x274(%rax)$/;"	l
ffff800000105d61	kernel.asm	/^ffff800000105d61:	00 00 00 $/;"	l
ffff800000105d64	kernel.asm	/^ffff800000105d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d68	kernel.asm	/^ffff800000105d68:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105d6e	kernel.asm	/^ffff800000105d6e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d71	kernel.asm	/^ffff800000105d71:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000105d78	kernel.asm	/^ffff800000105d78:	80 ff ff $/;"	l
ffff800000105d7b	kernel.asm	/^ffff800000105d7b:	ff d0                	callq  *%rax$/;"	l
ffff800000105d7d	kernel.asm	/^ffff800000105d7d:	eb 27                	jmp    ffff800000105da6 <pipeclose+0x78>$/;"	l
ffff800000105d7f	kernel.asm	/^ffff800000105d7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d83	kernel.asm	/^ffff800000105d83:	c7 80 70 02 00 00 00 	movl   $0x0,0x270(%rax)$/;"	l
ffff800000105d8a	kernel.asm	/^ffff800000105d8a:	00 00 00 $/;"	l
ffff800000105d8d	kernel.asm	/^ffff800000105d8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105d91	kernel.asm	/^ffff800000105d91:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000105d97	kernel.asm	/^ffff800000105d97:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105d9a	kernel.asm	/^ffff800000105d9a:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000105da1	kernel.asm	/^ffff800000105da1:	80 ff ff $/;"	l
ffff800000105da4	kernel.asm	/^ffff800000105da4:	ff d0                	callq  *%rax$/;"	l
ffff800000105da6	kernel.asm	/^ffff800000105da6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105daa	kernel.asm	/^ffff800000105daa:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff800000105db0	kernel.asm	/^ffff800000105db0:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105db2	kernel.asm	/^ffff800000105db2:	75 36                	jne    ffff800000105dea <pipeclose+0xbc>$/;"	l
ffff800000105db4	kernel.asm	/^ffff800000105db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105db8	kernel.asm	/^ffff800000105db8:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff800000105dbe	kernel.asm	/^ffff800000105dbe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105dc0	kernel.asm	/^ffff800000105dc0:	75 28                	jne    ffff800000105dea <pipeclose+0xbc>$/;"	l
ffff800000105dc2	kernel.asm	/^ffff800000105dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dc6	kernel.asm	/^ffff800000105dc6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105dc9	kernel.asm	/^ffff800000105dc9:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105dd0	kernel.asm	/^ffff800000105dd0:	80 ff ff $/;"	l
ffff800000105dd3	kernel.asm	/^ffff800000105dd3:	ff d0                	callq  *%rax$/;"	l
ffff800000105dd5	kernel.asm	/^ffff800000105dd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dd9	kernel.asm	/^ffff800000105dd9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ddc	kernel.asm	/^ffff800000105ddc:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff800000105de3	kernel.asm	/^ffff800000105de3:	80 ff ff $/;"	l
ffff800000105de6	kernel.asm	/^ffff800000105de6:	ff d0                	callq  *%rax$/;"	l
ffff800000105de8	kernel.asm	/^ffff800000105de8:	eb 13                	jmp    ffff800000105dfd <pipeclose+0xcf>$/;"	l
ffff800000105dea	kernel.asm	/^ffff800000105dea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dee	kernel.asm	/^ffff800000105dee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105df1	kernel.asm	/^ffff800000105df1:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105df8	kernel.asm	/^ffff800000105df8:	80 ff ff $/;"	l
ffff800000105dfb	kernel.asm	/^ffff800000105dfb:	ff d0                	callq  *%rax$/;"	l
ffff800000105dfd	kernel.asm	/^ffff800000105dfd:	90                   	nop$/;"	l
ffff800000105dfe	kernel.asm	/^ffff800000105dfe:	c9                   	leaveq $/;"	l
ffff800000105dff	kernel.asm	/^ffff800000105dff:	c3                   	retq   $/;"	l
ffff800000105e00	kernel.asm	/^ffff800000105e00 <pipewrite>:$/;"	l
ffff800000105e00	kernel.asm	/^ffff800000105e00:	55                   	push   %rbp$/;"	l
ffff800000105e01	kernel.asm	/^ffff800000105e01:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105e04	kernel.asm	/^ffff800000105e04:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105e08	kernel.asm	/^ffff800000105e08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105e0c	kernel.asm	/^ffff800000105e0c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105e10	kernel.asm	/^ffff800000105e10:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000105e13	kernel.asm	/^ffff800000105e13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e17	kernel.asm	/^ffff800000105e17:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105e1a	kernel.asm	/^ffff800000105e1a:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000105e21	kernel.asm	/^ffff800000105e21:	80 ff ff $/;"	l
ffff800000105e24	kernel.asm	/^ffff800000105e24:	ff d0                	callq  *%rax$/;"	l
ffff800000105e26	kernel.asm	/^ffff800000105e26:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105e2d	kernel.asm	/^ffff800000105e2d:	e9 d4 00 00 00       	jmpq   ffff800000105f06 <pipewrite+0x106>$/;"	l
ffff800000105e32	kernel.asm	/^ffff800000105e32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e36	kernel.asm	/^ffff800000105e36:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff800000105e3c	kernel.asm	/^ffff800000105e3c:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105e3e	kernel.asm	/^ffff800000105e3e:	74 12                	je     ffff800000105e52 <pipewrite+0x52>$/;"	l
ffff800000105e40	kernel.asm	/^ffff800000105e40:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000105e47	kernel.asm	/^ffff800000105e47:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105e4b	kernel.asm	/^ffff800000105e4b:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000105e4e	kernel.asm	/^ffff800000105e4e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105e50	kernel.asm	/^ffff800000105e50:	74 1d                	je     ffff800000105e6f <pipewrite+0x6f>$/;"	l
ffff800000105e52	kernel.asm	/^ffff800000105e52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e56	kernel.asm	/^ffff800000105e56:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105e59	kernel.asm	/^ffff800000105e59:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105e60	kernel.asm	/^ffff800000105e60:	80 ff ff $/;"	l
ffff800000105e63	kernel.asm	/^ffff800000105e63:	ff d0                	callq  *%rax$/;"	l
ffff800000105e65	kernel.asm	/^ffff800000105e65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105e6a	kernel.asm	/^ffff800000105e6a:	e9 ce 00 00 00       	jmpq   ffff800000105f3d <pipewrite+0x13d>$/;"	l
ffff800000105e6f	kernel.asm	/^ffff800000105e6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e73	kernel.asm	/^ffff800000105e73:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105e79	kernel.asm	/^ffff800000105e79:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105e7c	kernel.asm	/^ffff800000105e7c:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000105e83	kernel.asm	/^ffff800000105e83:	80 ff ff $/;"	l
ffff800000105e86	kernel.asm	/^ffff800000105e86:	ff d0                	callq  *%rax$/;"	l
ffff800000105e88	kernel.asm	/^ffff800000105e88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e8c	kernel.asm	/^ffff800000105e8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105e90	kernel.asm	/^ffff800000105e90:	48 81 c2 6c 02 00 00 	add    $0x26c,%rdx$/;"	l
ffff800000105e97	kernel.asm	/^ffff800000105e97:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000105e9a	kernel.asm	/^ffff800000105e9a:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000105e9d	kernel.asm	/^ffff800000105e9d:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000105ea4	kernel.asm	/^ffff800000105ea4:	80 ff ff $/;"	l
ffff800000105ea7	kernel.asm	/^ffff800000105ea7:	ff d0                	callq  *%rax$/;"	l
ffff800000105ea9	kernel.asm	/^ffff800000105ea9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ead	kernel.asm	/^ffff800000105ead:	8b 90 6c 02 00 00    	mov    0x26c(%rax),%edx$/;"	l
ffff800000105eb3	kernel.asm	/^ffff800000105eb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105eb7	kernel.asm	/^ffff800000105eb7:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff800000105ebd	kernel.asm	/^ffff800000105ebd:	05 00 02 00 00       	add    $0x200,%eax$/;"	l
ffff800000105ec2	kernel.asm	/^ffff800000105ec2:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105ec4	kernel.asm	/^ffff800000105ec4:	0f 84 68 ff ff ff    	je     ffff800000105e32 <pipewrite+0x32>$/;"	l
ffff800000105eca	kernel.asm	/^ffff800000105eca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ece	kernel.asm	/^ffff800000105ece:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105ed4	kernel.asm	/^ffff800000105ed4:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000105ed7	kernel.asm	/^ffff800000105ed7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105edb	kernel.asm	/^ffff800000105edb:	89 8a 6c 02 00 00    	mov    %ecx,0x26c(%rdx)$/;"	l
ffff800000105ee1	kernel.asm	/^ffff800000105ee1:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000105ee6	kernel.asm	/^ffff800000105ee6:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000105ee8	kernel.asm	/^ffff800000105ee8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105eeb	kernel.asm	/^ffff800000105eeb:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000105eee	kernel.asm	/^ffff800000105eee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105ef2	kernel.asm	/^ffff800000105ef2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105ef5	kernel.asm	/^ffff800000105ef5:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000105ef8	kernel.asm	/^ffff800000105ef8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105efc	kernel.asm	/^ffff800000105efc:	89 c9                	mov    %ecx,%ecx$/;"	l
ffff800000105efe	kernel.asm	/^ffff800000105efe:	88 54 08 68          	mov    %dl,0x68(%rax,%rcx,1)$/;"	l
ffff800000105f02	kernel.asm	/^ffff800000105f02:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105f06	kernel.asm	/^ffff800000105f06:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105f09	kernel.asm	/^ffff800000105f09:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000105f0c	kernel.asm	/^ffff800000105f0c:	7c 9b                	jl     ffff800000105ea9 <pipewrite+0xa9>$/;"	l
ffff800000105f0e	kernel.asm	/^ffff800000105f0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f12	kernel.asm	/^ffff800000105f12:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105f18	kernel.asm	/^ffff800000105f18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f1b	kernel.asm	/^ffff800000105f1b:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000105f22	kernel.asm	/^ffff800000105f22:	80 ff ff $/;"	l
ffff800000105f25	kernel.asm	/^ffff800000105f25:	ff d0                	callq  *%rax$/;"	l
ffff800000105f27	kernel.asm	/^ffff800000105f27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f2b	kernel.asm	/^ffff800000105f2b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f2e	kernel.asm	/^ffff800000105f2e:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105f35	kernel.asm	/^ffff800000105f35:	80 ff ff $/;"	l
ffff800000105f38	kernel.asm	/^ffff800000105f38:	ff d0                	callq  *%rax$/;"	l
ffff800000105f3a	kernel.asm	/^ffff800000105f3a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000105f3d	kernel.asm	/^ffff800000105f3d:	c9                   	leaveq $/;"	l
ffff800000105f3e	kernel.asm	/^ffff800000105f3e:	c3                   	retq   $/;"	l
ffff800000105f3f	kernel.asm	/^ffff800000105f3f <piperead>:$/;"	l
ffff800000105f3f	kernel.asm	/^ffff800000105f3f:	55                   	push   %rbp$/;"	l
ffff800000105f40	kernel.asm	/^ffff800000105f40:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105f43	kernel.asm	/^ffff800000105f43:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105f47	kernel.asm	/^ffff800000105f47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105f4b	kernel.asm	/^ffff800000105f4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105f4f	kernel.asm	/^ffff800000105f4f:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000105f52	kernel.asm	/^ffff800000105f52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f56	kernel.asm	/^ffff800000105f56:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f59	kernel.asm	/^ffff800000105f59:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000105f60	kernel.asm	/^ffff800000105f60:	80 ff ff $/;"	l
ffff800000105f63	kernel.asm	/^ffff800000105f63:	ff d0                	callq  *%rax$/;"	l
ffff800000105f65	kernel.asm	/^ffff800000105f65:	eb 50                	jmp    ffff800000105fb7 <piperead+0x78>$/;"	l
ffff800000105f67	kernel.asm	/^ffff800000105f67:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000105f6e	kernel.asm	/^ffff800000105f6e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000105f72	kernel.asm	/^ffff800000105f72:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000105f75	kernel.asm	/^ffff800000105f75:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105f77	kernel.asm	/^ffff800000105f77:	74 1d                	je     ffff800000105f96 <piperead+0x57>$/;"	l
ffff800000105f79	kernel.asm	/^ffff800000105f79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f7d	kernel.asm	/^ffff800000105f7d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f80	kernel.asm	/^ffff800000105f80:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000105f87	kernel.asm	/^ffff800000105f87:	80 ff ff $/;"	l
ffff800000105f8a	kernel.asm	/^ffff800000105f8a:	ff d0                	callq  *%rax$/;"	l
ffff800000105f8c	kernel.asm	/^ffff800000105f8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105f91	kernel.asm	/^ffff800000105f91:	e9 df 00 00 00       	jmpq   ffff800000106075 <piperead+0x136>$/;"	l
ffff800000105f96	kernel.asm	/^ffff800000105f96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105f9a	kernel.asm	/^ffff800000105f9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000105f9e	kernel.asm	/^ffff800000105f9e:	48 81 c2 68 02 00 00 	add    $0x268,%rdx$/;"	l
ffff800000105fa5	kernel.asm	/^ffff800000105fa5:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000105fa8	kernel.asm	/^ffff800000105fa8:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000105fab	kernel.asm	/^ffff800000105fab:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000105fb2	kernel.asm	/^ffff800000105fb2:	80 ff ff $/;"	l
ffff800000105fb5	kernel.asm	/^ffff800000105fb5:	ff d0                	callq  *%rax$/;"	l
ffff800000105fb7	kernel.asm	/^ffff800000105fb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fbb	kernel.asm	/^ffff800000105fbb:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff800000105fc1	kernel.asm	/^ffff800000105fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fc5	kernel.asm	/^ffff800000105fc5:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105fcb	kernel.asm	/^ffff800000105fcb:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105fcd	kernel.asm	/^ffff800000105fcd:	75 0e                	jne    ffff800000105fdd <piperead+0x9e>$/;"	l
ffff800000105fcf	kernel.asm	/^ffff800000105fcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fd3	kernel.asm	/^ffff800000105fd3:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff800000105fd9	kernel.asm	/^ffff800000105fd9:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105fdb	kernel.asm	/^ffff800000105fdb:	75 8a                	jne    ffff800000105f67 <piperead+0x28>$/;"	l
ffff800000105fdd	kernel.asm	/^ffff800000105fdd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105fe4	kernel.asm	/^ffff800000105fe4:	eb 55                	jmp    ffff80000010603b <piperead+0xfc>$/;"	l
ffff800000105fe6	kernel.asm	/^ffff800000105fe6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fea	kernel.asm	/^ffff800000105fea:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff800000105ff0	kernel.asm	/^ffff800000105ff0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ff4	kernel.asm	/^ffff800000105ff4:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff800000105ffa	kernel.asm	/^ffff800000105ffa:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105ffc	kernel.asm	/^ffff800000105ffc:	74 47                	je     ffff800000106045 <piperead+0x106>$/;"	l
ffff800000105ffe	kernel.asm	/^ffff800000105ffe:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000106001	kernel.asm	/^ffff800000106001:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000106004	kernel.asm	/^ffff800000106004:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000106008	kernel.asm	/^ffff800000106008:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi$/;"	l
ffff80000010600c	kernel.asm	/^ffff80000010600c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106010	kernel.asm	/^ffff800000106010:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff800000106016	kernel.asm	/^ffff800000106016:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000106019	kernel.asm	/^ffff800000106019:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010601d	kernel.asm	/^ffff80000010601d:	89 8a 68 02 00 00    	mov    %ecx,0x268(%rdx)$/;"	l
ffff800000106023	kernel.asm	/^ffff800000106023:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff800000106028	kernel.asm	/^ffff800000106028:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010602a	kernel.asm	/^ffff80000010602a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010602e	kernel.asm	/^ffff80000010602e:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106030	kernel.asm	/^ffff800000106030:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000106035	kernel.asm	/^ffff800000106035:	88 06                	mov    %al,(%rsi)$/;"	l
ffff800000106037	kernel.asm	/^ffff800000106037:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010603b	kernel.asm	/^ffff80000010603b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010603e	kernel.asm	/^ffff80000010603e:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000106041	kernel.asm	/^ffff800000106041:	7c a3                	jl     ffff800000105fe6 <piperead+0xa7>$/;"	l
ffff800000106043	kernel.asm	/^ffff800000106043:	eb 01                	jmp    ffff800000106046 <piperead+0x107>$/;"	l
ffff800000106045	kernel.asm	/^ffff800000106045:	90                   	nop$/;"	l
ffff800000106046	kernel.asm	/^ffff800000106046:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010604a	kernel.asm	/^ffff80000010604a:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000106050	kernel.asm	/^ffff800000106050:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106053	kernel.asm	/^ffff800000106053:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff80000010605a	kernel.asm	/^ffff80000010605a:	80 ff ff $/;"	l
ffff80000010605d	kernel.asm	/^ffff80000010605d:	ff d0                	callq  *%rax$/;"	l
ffff80000010605f	kernel.asm	/^ffff80000010605f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106063	kernel.asm	/^ffff800000106063:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106066	kernel.asm	/^ffff800000106066:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010606d	kernel.asm	/^ffff80000010606d:	80 ff ff $/;"	l
ffff800000106070	kernel.asm	/^ffff800000106070:	ff d0                	callq  *%rax$/;"	l
ffff800000106072	kernel.asm	/^ffff800000106072:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000106075	kernel.asm	/^ffff800000106075:	c9                   	leaveq $/;"	l
ffff800000106076	kernel.asm	/^ffff800000106076:	c3                   	retq   $/;"	l
ffff800000106077	kernel.asm	/^ffff800000106077 <readeflags>:$/;"	l
ffff800000106077	kernel.asm	/^ffff800000106077:	55                   	push   %rbp$/;"	l
ffff800000106078	kernel.asm	/^ffff800000106078:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010607b	kernel.asm	/^ffff80000010607b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010607f	kernel.asm	/^ffff80000010607f:	9c                   	pushfq $/;"	l
ffff800000106080	kernel.asm	/^ffff800000106080:	58                   	pop    %rax$/;"	l
ffff800000106081	kernel.asm	/^ffff800000106081:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106085	kernel.asm	/^ffff800000106085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106089	kernel.asm	/^ffff800000106089:	c9                   	leaveq $/;"	l
ffff80000010608a	kernel.asm	/^ffff80000010608a:	c3                   	retq   $/;"	l
ffff80000010608b	kernel.asm	/^ffff80000010608b <sti>:$/;"	l
ffff80000010608b	kernel.asm	/^ffff80000010608b:	55                   	push   %rbp$/;"	l
ffff80000010608c	kernel.asm	/^ffff80000010608c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010608f	kernel.asm	/^ffff80000010608f:	fb                   	sti    $/;"	l
ffff800000106090	kernel.asm	/^ffff800000106090:	90                   	nop$/;"	l
ffff800000106091	kernel.asm	/^ffff800000106091:	5d                   	pop    %rbp$/;"	l
ffff800000106092	kernel.asm	/^ffff800000106092:	c3                   	retq   $/;"	l
ffff800000106093	kernel.asm	/^ffff800000106093 <pinit>:$/;"	l
ffff800000106093	kernel.asm	/^ffff800000106093:	55                   	push   %rbp$/;"	l
ffff800000106094	kernel.asm	/^ffff800000106094:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106097	kernel.asm	/^ffff800000106097:	48 be 25 ce 10 00 00 	movabs $0xffff80000010ce25,%rsi$/;"	l
ffff80000010609e	kernel.asm	/^ffff80000010609e:	80 ff ff $/;"	l
ffff8000001060a1	kernel.asm	/^ffff8000001060a1:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001060a8	kernel.asm	/^ffff8000001060a8:	80 ff ff $/;"	l
ffff8000001060ab	kernel.asm	/^ffff8000001060ab:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff8000001060b2	kernel.asm	/^ffff8000001060b2:	80 ff ff $/;"	l
ffff8000001060b5	kernel.asm	/^ffff8000001060b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001060b7	kernel.asm	/^ffff8000001060b7:	90                   	nop$/;"	l
ffff8000001060b8	kernel.asm	/^ffff8000001060b8:	5d                   	pop    %rbp$/;"	l
ffff8000001060b9	kernel.asm	/^ffff8000001060b9:	c3                   	retq   $/;"	l
ffff8000001060ba	kernel.asm	/^ffff8000001060ba <allocproc>:$/;"	l
ffff8000001060ba	kernel.asm	/^ffff8000001060ba:	55                   	push   %rbp$/;"	l
ffff8000001060bb	kernel.asm	/^ffff8000001060bb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001060be	kernel.asm	/^ffff8000001060be:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001060c2	kernel.asm	/^ffff8000001060c2:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001060c9	kernel.asm	/^ffff8000001060c9:	80 ff ff $/;"	l
ffff8000001060cc	kernel.asm	/^ffff8000001060cc:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001060d3	kernel.asm	/^ffff8000001060d3:	80 ff ff $/;"	l
ffff8000001060d6	kernel.asm	/^ffff8000001060d6:	ff d0                	callq  *%rax$/;"	l
ffff8000001060d8	kernel.asm	/^ffff8000001060d8:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff8000001060df	kernel.asm	/^ffff8000001060df:	80 ff ff $/;"	l
ffff8000001060e2	kernel.asm	/^ffff8000001060e2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001060e6	kernel.asm	/^ffff8000001060e6:	eb 13                	jmp    ffff8000001060fb <allocproc+0x41>$/;"	l
ffff8000001060e8	kernel.asm	/^ffff8000001060e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001060ec	kernel.asm	/^ffff8000001060ec:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001060ef	kernel.asm	/^ffff8000001060ef:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001060f1	kernel.asm	/^ffff8000001060f1:	74 38                	je     ffff80000010612b <allocproc+0x71>$/;"	l
ffff8000001060f3	kernel.asm	/^ffff8000001060f3:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff8000001060fa	kernel.asm	/^ffff8000001060fa:	00 $/;"	l
ffff8000001060fb	kernel.asm	/^ffff8000001060fb:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106102	kernel.asm	/^ffff800000106102:	80 ff ff $/;"	l
ffff800000106105	kernel.asm	/^ffff800000106105:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106109	kernel.asm	/^ffff800000106109:	72 dd                	jb     ffff8000001060e8 <allocproc+0x2e>$/;"	l
ffff80000010610b	kernel.asm	/^ffff80000010610b:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106112	kernel.asm	/^ffff800000106112:	80 ff ff $/;"	l
ffff800000106115	kernel.asm	/^ffff800000106115:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010611c	kernel.asm	/^ffff80000010611c:	80 ff ff $/;"	l
ffff80000010611f	kernel.asm	/^ffff80000010611f:	ff d0                	callq  *%rax$/;"	l
ffff800000106121	kernel.asm	/^ffff800000106121:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106126	kernel.asm	/^ffff800000106126:	e9 05 01 00 00       	jmpq   ffff800000106230 <allocproc+0x176>$/;"	l
ffff80000010612b	kernel.asm	/^ffff80000010612b:	90                   	nop$/;"	l
ffff80000010612c	kernel.asm	/^ffff80000010612c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106130	kernel.asm	/^ffff800000106130:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)$/;"	l
ffff800000106137	kernel.asm	/^ffff800000106137:	48 b8 40 e5 10 00 00 	movabs $0xffff80000010e540,%rax$/;"	l
ffff80000010613e	kernel.asm	/^ffff80000010613e:	80 ff ff $/;"	l
ffff800000106141	kernel.asm	/^ffff800000106141:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000106143	kernel.asm	/^ffff800000106143:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000106146	kernel.asm	/^ffff800000106146:	48 ba 40 e5 10 00 00 	movabs $0xffff80000010e540,%rdx$/;"	l
ffff80000010614d	kernel.asm	/^ffff80000010614d:	80 ff ff $/;"	l
ffff800000106150	kernel.asm	/^ffff800000106150:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff800000106152	kernel.asm	/^ffff800000106152:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106156	kernel.asm	/^ffff800000106156:	89 42 1c             	mov    %eax,0x1c(%rdx)$/;"	l
ffff800000106159	kernel.asm	/^ffff800000106159:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106160	kernel.asm	/^ffff800000106160:	80 ff ff $/;"	l
ffff800000106163	kernel.asm	/^ffff800000106163:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010616a	kernel.asm	/^ffff80000010616a:	80 ff ff $/;"	l
ffff80000010616d	kernel.asm	/^ffff80000010616d:	ff d0                	callq  *%rax$/;"	l
ffff80000010616f	kernel.asm	/^ffff80000010616f:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff800000106176	kernel.asm	/^ffff800000106176:	80 ff ff $/;"	l
ffff800000106179	kernel.asm	/^ffff800000106179:	ff d0                	callq  *%rax$/;"	l
ffff80000010617b	kernel.asm	/^ffff80000010617b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010617e	kernel.asm	/^ffff80000010617e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106182	kernel.asm	/^ffff800000106182:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000106186	kernel.asm	/^ffff800000106186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010618a	kernel.asm	/^ffff80000010618a:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010618e	kernel.asm	/^ffff80000010618e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106191	kernel.asm	/^ffff800000106191:	75 15                	jne    ffff8000001061a8 <allocproc+0xee>$/;"	l
ffff800000106193	kernel.asm	/^ffff800000106193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106197	kernel.asm	/^ffff800000106197:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff80000010619e	kernel.asm	/^ffff80000010619e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001061a3	kernel.asm	/^ffff8000001061a3:	e9 88 00 00 00       	jmpq   ffff800000106230 <allocproc+0x176>$/;"	l
ffff8000001061a8	kernel.asm	/^ffff8000001061a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061ac	kernel.asm	/^ffff8000001061ac:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff8000001061b0	kernel.asm	/^ffff8000001061b0:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff8000001061b6	kernel.asm	/^ffff8000001061b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001061ba	kernel.asm	/^ffff8000001061ba:	48 81 6d f0 b0 00 00 	subq   $0xb0,-0x10(%rbp)$/;"	l
ffff8000001061c1	kernel.asm	/^ffff8000001061c1:	00 $/;"	l
ffff8000001061c2	kernel.asm	/^ffff8000001061c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061c6	kernel.asm	/^ffff8000001061c6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001061ca	kernel.asm	/^ffff8000001061ca:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff8000001061ce	kernel.asm	/^ffff8000001061ce:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)$/;"	l
ffff8000001061d3	kernel.asm	/^ffff8000001061d3:	48 ba 8d 93 10 00 00 	movabs $0xffff80000010938d,%rdx$/;"	l
ffff8000001061da	kernel.asm	/^ffff8000001061da:	80 ff ff $/;"	l
ffff8000001061dd	kernel.asm	/^ffff8000001061dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001061e1	kernel.asm	/^ffff8000001061e1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001061e4	kernel.asm	/^ffff8000001061e4:	48 83 6d f0 40       	subq   $0x40,-0x10(%rbp)$/;"	l
ffff8000001061e9	kernel.asm	/^ffff8000001061e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061ed	kernel.asm	/^ffff8000001061ed:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001061f1	kernel.asm	/^ffff8000001061f1:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff8000001061f5	kernel.asm	/^ffff8000001061f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001061f9	kernel.asm	/^ffff8000001061f9:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff8000001061fd	kernel.asm	/^ffff8000001061fd:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff800000106202	kernel.asm	/^ffff800000106202:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000106207	kernel.asm	/^ffff800000106207:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010620a	kernel.asm	/^ffff80000010620a:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff800000106211	kernel.asm	/^ffff800000106211:	80 ff ff $/;"	l
ffff800000106214	kernel.asm	/^ffff800000106214:	ff d0                	callq  *%rax$/;"	l
ffff800000106216	kernel.asm	/^ffff800000106216:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010621a	kernel.asm	/^ffff80000010621a:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff80000010621e	kernel.asm	/^ffff80000010621e:	48 ba ac 6c 10 00 00 	movabs $0xffff800000106cac,%rdx$/;"	l
ffff800000106225	kernel.asm	/^ffff800000106225:	80 ff ff $/;"	l
ffff800000106228	kernel.asm	/^ffff800000106228:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff80000010622c	kernel.asm	/^ffff80000010622c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106230	kernel.asm	/^ffff800000106230:	c9                   	leaveq $/;"	l
ffff800000106231	kernel.asm	/^ffff800000106231:	c3                   	retq   $/;"	l
ffff800000106232	kernel.asm	/^ffff800000106232 <userinit>:$/;"	l
ffff800000106232	kernel.asm	/^ffff800000106232:	55                   	push   %rbp$/;"	l
ffff800000106233	kernel.asm	/^ffff800000106233:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106236	kernel.asm	/^ffff800000106236:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010623a	kernel.asm	/^ffff80000010623a:	48 b8 ba 60 10 00 00 	movabs $0xffff8000001060ba,%rax$/;"	l
ffff800000106241	kernel.asm	/^ffff800000106241:	80 ff ff $/;"	l
ffff800000106244	kernel.asm	/^ffff800000106244:	ff d0                	callq  *%rax$/;"	l
ffff800000106246	kernel.asm	/^ffff800000106246:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010624a	kernel.asm	/^ffff80000010624a:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106251	kernel.asm	/^ffff800000106251:	80 ff ff $/;"	l
ffff800000106254	kernel.asm	/^ffff800000106254:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106258	kernel.asm	/^ffff800000106258:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010625b	kernel.asm	/^ffff80000010625b:	48 b8 b3 bb 10 00 00 	movabs $0xffff80000010bbb3,%rax$/;"	l
ffff800000106262	kernel.asm	/^ffff800000106262:	80 ff ff $/;"	l
ffff800000106265	kernel.asm	/^ffff800000106265:	ff d0                	callq  *%rax$/;"	l
ffff800000106267	kernel.asm	/^ffff800000106267:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010626a	kernel.asm	/^ffff80000010626a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010626e	kernel.asm	/^ffff80000010626e:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000106272	kernel.asm	/^ffff800000106272:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106276	kernel.asm	/^ffff800000106276:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010627a	kernel.asm	/^ffff80000010627a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010627d	kernel.asm	/^ffff80000010627d:	75 16                	jne    ffff800000106295 <userinit+0x63>$/;"	l
ffff80000010627f	kernel.asm	/^ffff80000010627f:	48 bf 2c ce 10 00 00 	movabs $0xffff80000010ce2c,%rdi$/;"	l
ffff800000106286	kernel.asm	/^ffff800000106286:	80 ff ff $/;"	l
ffff800000106289	kernel.asm	/^ffff800000106289:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106290	kernel.asm	/^ffff800000106290:	80 ff ff $/;"	l
ffff800000106293	kernel.asm	/^ffff800000106293:	ff d0                	callq  *%rax$/;"	l
ffff800000106295	kernel.asm	/^ffff800000106295:	48 b8 3c 00 00 00 00 	movabs $0x3c,%rax$/;"	l
ffff80000010629c	kernel.asm	/^ffff80000010629c:	00 00 00 $/;"	l
ffff80000010629f	kernel.asm	/^ffff80000010629f:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001062a1	kernel.asm	/^ffff8000001062a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062a5	kernel.asm	/^ffff8000001062a5:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001062a9	kernel.asm	/^ffff8000001062a9:	48 be 60 02 11 00 00 	movabs $0xffff800000110260,%rsi$/;"	l
ffff8000001062b0	kernel.asm	/^ffff8000001062b0:	80 ff ff $/;"	l
ffff8000001062b3	kernel.asm	/^ffff8000001062b3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001062b6	kernel.asm	/^ffff8000001062b6:	48 b8 33 c1 10 00 00 	movabs $0xffff80000010c133,%rax$/;"	l
ffff8000001062bd	kernel.asm	/^ffff8000001062bd:	80 ff ff $/;"	l
ffff8000001062c0	kernel.asm	/^ffff8000001062c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001062c2	kernel.asm	/^ffff8000001062c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062c6	kernel.asm	/^ffff8000001062c6:	48 c7 00 00 10 00 00 	movq   $0x1000,(%rax)$/;"	l
ffff8000001062cd	kernel.asm	/^ffff8000001062cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062d1	kernel.asm	/^ffff8000001062d1:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001062d5	kernel.asm	/^ffff8000001062d5:	ba b0 00 00 00       	mov    $0xb0,%edx$/;"	l
ffff8000001062da	kernel.asm	/^ffff8000001062da:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001062df	kernel.asm	/^ffff8000001062df:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001062e2	kernel.asm	/^ffff8000001062e2:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff8000001062e9	kernel.asm	/^ffff8000001062e9:	80 ff ff $/;"	l
ffff8000001062ec	kernel.asm	/^ffff8000001062ec:	ff d0                	callq  *%rax$/;"	l
ffff8000001062ee	kernel.asm	/^ffff8000001062ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062f2	kernel.asm	/^ffff8000001062f2:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001062f6	kernel.asm	/^ffff8000001062f6:	48 c7 80 90 00 00 00 	movq   $0x23,0x90(%rax)$/;"	l
ffff8000001062fd	kernel.asm	/^ffff8000001062fd:	23 00 00 00 $/;"	l
ffff800000106301	kernel.asm	/^ffff800000106301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106305	kernel.asm	/^ffff800000106305:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106309	kernel.asm	/^ffff800000106309:	48 c7 80 a8 00 00 00 	movq   $0x2b,0xa8(%rax)$/;"	l
ffff800000106310	kernel.asm	/^ffff800000106310:	2b 00 00 00 $/;"	l
ffff800000106314	kernel.asm	/^ffff800000106314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106318	kernel.asm	/^ffff800000106318:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010631c	kernel.asm	/^ffff80000010631c:	48 c7 80 98 00 00 00 	movq   $0x200,0x98(%rax)$/;"	l
ffff800000106323	kernel.asm	/^ffff800000106323:	00 02 00 00 $/;"	l
ffff800000106327	kernel.asm	/^ffff800000106327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010632b	kernel.asm	/^ffff80000010632b:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010632f	kernel.asm	/^ffff80000010632f:	48 c7 80 a0 00 00 00 	movq   $0x1000,0xa0(%rax)$/;"	l
ffff800000106336	kernel.asm	/^ffff800000106336:	00 10 00 00 $/;"	l
ffff80000010633a	kernel.asm	/^ffff80000010633a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010633e	kernel.asm	/^ffff80000010633e:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106342	kernel.asm	/^ffff800000106342:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)$/;"	l
ffff800000106349	kernel.asm	/^ffff800000106349:	00 00 00 00 $/;"	l
ffff80000010634d	kernel.asm	/^ffff80000010634d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106351	kernel.asm	/^ffff800000106351:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106355	kernel.asm	/^ffff800000106355:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff80000010635c	kernel.asm	/^ffff80000010635c:	00 $/;"	l
ffff80000010635d	kernel.asm	/^ffff80000010635d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106361	kernel.asm	/^ffff800000106361:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff800000106367	kernel.asm	/^ffff800000106367:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010636c	kernel.asm	/^ffff80000010636c:	48 be 45 ce 10 00 00 	movabs $0xffff80000010ce45,%rsi$/;"	l
ffff800000106373	kernel.asm	/^ffff800000106373:	80 ff ff $/;"	l
ffff800000106376	kernel.asm	/^ffff800000106376:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106379	kernel.asm	/^ffff800000106379:	48 b8 46 79 10 00 00 	movabs $0xffff800000107946,%rax$/;"	l
ffff800000106380	kernel.asm	/^ffff800000106380:	80 ff ff $/;"	l
ffff800000106383	kernel.asm	/^ffff800000106383:	ff d0                	callq  *%rax$/;"	l
ffff800000106385	kernel.asm	/^ffff800000106385:	48 bf 4e ce 10 00 00 	movabs $0xffff80000010ce4e,%rdi$/;"	l
ffff80000010638c	kernel.asm	/^ffff80000010638c:	80 ff ff $/;"	l
ffff80000010638f	kernel.asm	/^ffff80000010638f:	48 b8 7d 37 10 00 00 	movabs $0xffff80000010377d,%rax$/;"	l
ffff800000106396	kernel.asm	/^ffff800000106396:	80 ff ff $/;"	l
ffff800000106399	kernel.asm	/^ffff800000106399:	ff d0                	callq  *%rax$/;"	l
ffff80000010639b	kernel.asm	/^ffff80000010639b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010639e	kernel.asm	/^ffff80000010639e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001063a2	kernel.asm	/^ffff8000001063a2:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff8000001063a9	kernel.asm	/^ffff8000001063a9:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001063b0	kernel.asm	/^ffff8000001063b0:	80 ff ff $/;"	l
ffff8000001063b3	kernel.asm	/^ffff8000001063b3:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001063ba	kernel.asm	/^ffff8000001063ba:	80 ff ff $/;"	l
ffff8000001063bd	kernel.asm	/^ffff8000001063bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001063bf	kernel.asm	/^ffff8000001063bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001063c3	kernel.asm	/^ffff8000001063c3:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff8000001063ca	kernel.asm	/^ffff8000001063ca:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001063d1	kernel.asm	/^ffff8000001063d1:	80 ff ff $/;"	l
ffff8000001063d4	kernel.asm	/^ffff8000001063d4:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001063db	kernel.asm	/^ffff8000001063db:	80 ff ff $/;"	l
ffff8000001063de	kernel.asm	/^ffff8000001063de:	ff d0                	callq  *%rax$/;"	l
ffff8000001063e0	kernel.asm	/^ffff8000001063e0:	90                   	nop$/;"	l
ffff8000001063e1	kernel.asm	/^ffff8000001063e1:	c9                   	leaveq $/;"	l
ffff8000001063e2	kernel.asm	/^ffff8000001063e2:	c3                   	retq   $/;"	l
ffff8000001063e3	kernel.asm	/^ffff8000001063e3 <growproc>:$/;"	l
ffff8000001063e3	kernel.asm	/^ffff8000001063e3:	55                   	push   %rbp$/;"	l
ffff8000001063e4	kernel.asm	/^ffff8000001063e4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001063e7	kernel.asm	/^ffff8000001063e7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001063eb	kernel.asm	/^ffff8000001063eb:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001063ee	kernel.asm	/^ffff8000001063ee:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001063f5	kernel.asm	/^ffff8000001063f5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001063f9	kernel.asm	/^ffff8000001063f9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001063fc	kernel.asm	/^ffff8000001063fc:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001063ff	kernel.asm	/^ffff8000001063ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000106403	kernel.asm	/^ffff800000106403:	7e 3b                	jle    ffff800000106440 <growproc+0x5d>$/;"	l
ffff800000106405	kernel.asm	/^ffff800000106405:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000106408	kernel.asm	/^ffff800000106408:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010640b	kernel.asm	/^ffff80000010640b:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010640d	kernel.asm	/^ffff80000010640d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106414	kernel.asm	/^ffff800000106414:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106418	kernel.asm	/^ffff800000106418:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010641c	kernel.asm	/^ffff80000010641c:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff80000010641f	kernel.asm	/^ffff80000010641f:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000106421	kernel.asm	/^ffff800000106421:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106424	kernel.asm	/^ffff800000106424:	48 b8 0b c3 10 00 00 	movabs $0xffff80000010c30b,%rax$/;"	l
ffff80000010642b	kernel.asm	/^ffff80000010642b:	80 ff ff $/;"	l
ffff80000010642e	kernel.asm	/^ffff80000010642e:	ff d0                	callq  *%rax$/;"	l
ffff800000106430	kernel.asm	/^ffff800000106430:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106433	kernel.asm	/^ffff800000106433:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000106437	kernel.asm	/^ffff800000106437:	75 4b                	jne    ffff800000106484 <growproc+0xa1>$/;"	l
ffff800000106439	kernel.asm	/^ffff800000106439:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010643e	kernel.asm	/^ffff80000010643e:	eb 74                	jmp    ffff8000001064b4 <growproc+0xd1>$/;"	l
ffff800000106440	kernel.asm	/^ffff800000106440:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000106444	kernel.asm	/^ffff800000106444:	79 3e                	jns    ffff800000106484 <growproc+0xa1>$/;"	l
ffff800000106446	kernel.asm	/^ffff800000106446:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000106449	kernel.asm	/^ffff800000106449:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010644c	kernel.asm	/^ffff80000010644c:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010644e	kernel.asm	/^ffff80000010644e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000106450	kernel.asm	/^ffff800000106450:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000106453	kernel.asm	/^ffff800000106453:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010645a	kernel.asm	/^ffff80000010645a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010645e	kernel.asm	/^ffff80000010645e:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106462	kernel.asm	/^ffff800000106462:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000106465	kernel.asm	/^ffff800000106465:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106468	kernel.asm	/^ffff800000106468:	48 b8 5f c4 10 00 00 	movabs $0xffff80000010c45f,%rax$/;"	l
ffff80000010646f	kernel.asm	/^ffff80000010646f:	80 ff ff $/;"	l
ffff800000106472	kernel.asm	/^ffff800000106472:	ff d0                	callq  *%rax$/;"	l
ffff800000106474	kernel.asm	/^ffff800000106474:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106477	kernel.asm	/^ffff800000106477:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010647b	kernel.asm	/^ffff80000010647b:	75 07                	jne    ffff800000106484 <growproc+0xa1>$/;"	l
ffff80000010647d	kernel.asm	/^ffff80000010647d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106482	kernel.asm	/^ffff800000106482:	eb 30                	jmp    ffff8000001064b4 <growproc+0xd1>$/;"	l
ffff800000106484	kernel.asm	/^ffff800000106484:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010648b	kernel.asm	/^ffff80000010648b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010648f	kernel.asm	/^ffff80000010648f:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106492	kernel.asm	/^ffff800000106492:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000106495	kernel.asm	/^ffff800000106495:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010649c	kernel.asm	/^ffff80000010649c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001064a0	kernel.asm	/^ffff8000001064a0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001064a3	kernel.asm	/^ffff8000001064a3:	48 b8 59 bd 10 00 00 	movabs $0xffff80000010bd59,%rax$/;"	l
ffff8000001064aa	kernel.asm	/^ffff8000001064aa:	80 ff ff $/;"	l
ffff8000001064ad	kernel.asm	/^ffff8000001064ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001064af	kernel.asm	/^ffff8000001064af:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001064b4	kernel.asm	/^ffff8000001064b4:	c9                   	leaveq $/;"	l
ffff8000001064b5	kernel.asm	/^ffff8000001064b5:	c3                   	retq   $/;"	l
ffff8000001064b6	kernel.asm	/^ffff8000001064b6 <fork>:$/;"	l
ffff8000001064b6	kernel.asm	/^ffff8000001064b6:	55                   	push   %rbp$/;"	l
ffff8000001064b7	kernel.asm	/^ffff8000001064b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001064ba	kernel.asm	/^ffff8000001064ba:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001064be	kernel.asm	/^ffff8000001064be:	48 b8 ba 60 10 00 00 	movabs $0xffff8000001060ba,%rax$/;"	l
ffff8000001064c5	kernel.asm	/^ffff8000001064c5:	80 ff ff $/;"	l
ffff8000001064c8	kernel.asm	/^ffff8000001064c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001064ca	kernel.asm	/^ffff8000001064ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001064ce	kernel.asm	/^ffff8000001064ce:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001064d3	kernel.asm	/^ffff8000001064d3:	75 0a                	jne    ffff8000001064df <fork+0x29>$/;"	l
ffff8000001064d5	kernel.asm	/^ffff8000001064d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001064da	kernel.asm	/^ffff8000001064da:	e9 f6 01 00 00       	jmpq   ffff8000001066d5 <fork+0x21f>$/;"	l
ffff8000001064df	kernel.asm	/^ffff8000001064df:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001064e6	kernel.asm	/^ffff8000001064e6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001064ea	kernel.asm	/^ffff8000001064ea:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001064ed	kernel.asm	/^ffff8000001064ed:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001064ef	kernel.asm	/^ffff8000001064ef:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001064f6	kernel.asm	/^ffff8000001064f6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001064fa	kernel.asm	/^ffff8000001064fa:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001064fe	kernel.asm	/^ffff8000001064fe:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000106500	kernel.asm	/^ffff800000106500:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106503	kernel.asm	/^ffff800000106503:	48 b8 8e c7 10 00 00 	movabs $0xffff80000010c78e,%rax$/;"	l
ffff80000010650a	kernel.asm	/^ffff80000010650a:	80 ff ff $/;"	l
ffff80000010650d	kernel.asm	/^ffff80000010650d:	ff d0                	callq  *%rax$/;"	l
ffff80000010650f	kernel.asm	/^ffff80000010650f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106512	kernel.asm	/^ffff800000106512:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106516	kernel.asm	/^ffff800000106516:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff80000010651a	kernel.asm	/^ffff80000010651a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010651e	kernel.asm	/^ffff80000010651e:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106522	kernel.asm	/^ffff800000106522:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106525	kernel.asm	/^ffff800000106525:	75 38                	jne    ffff80000010655f <fork+0xa9>$/;"	l
ffff800000106527	kernel.asm	/^ffff800000106527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010652b	kernel.asm	/^ffff80000010652b:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010652f	kernel.asm	/^ffff80000010652f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106532	kernel.asm	/^ffff800000106532:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff800000106539	kernel.asm	/^ffff800000106539:	80 ff ff $/;"	l
ffff80000010653c	kernel.asm	/^ffff80000010653c:	ff d0                	callq  *%rax$/;"	l
ffff80000010653e	kernel.asm	/^ffff80000010653e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106542	kernel.asm	/^ffff800000106542:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff800000106549	kernel.asm	/^ffff800000106549:	00 $/;"	l
ffff80000010654a	kernel.asm	/^ffff80000010654a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010654e	kernel.asm	/^ffff80000010654e:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106555	kernel.asm	/^ffff800000106555:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010655a	kernel.asm	/^ffff80000010655a:	e9 76 01 00 00       	jmpq   ffff8000001066d5 <fork+0x21f>$/;"	l
ffff80000010655f	kernel.asm	/^ffff80000010655f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106566	kernel.asm	/^ffff800000106566:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010656a	kernel.asm	/^ffff80000010656a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff80000010656d	kernel.asm	/^ffff80000010656d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106571	kernel.asm	/^ffff800000106571:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000106574	kernel.asm	/^ffff800000106574:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010657b	kernel.asm	/^ffff80000010657b:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff80000010657f	kernel.asm	/^ffff80000010657f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106583	kernel.asm	/^ffff800000106583:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff800000106587	kernel.asm	/^ffff800000106587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010658b	kernel.asm	/^ffff80000010658b:	48 8b 50 28          	mov    0x28(%rax),%rdx$/;"	l
ffff80000010658f	kernel.asm	/^ffff80000010658f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106596	kernel.asm	/^ffff800000106596:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010659a	kernel.asm	/^ffff80000010659a:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff80000010659e	kernel.asm	/^ffff80000010659e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001065a1	kernel.asm	/^ffff8000001065a1:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
ffff8000001065a6	kernel.asm	/^ffff8000001065a6:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff8000001065a9	kernel.asm	/^ffff8000001065a9:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff8000001065ac	kernel.asm	/^ffff8000001065ac:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)$/;"	l
ffff8000001065af	kernel.asm	/^ffff8000001065af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001065b3	kernel.asm	/^ffff8000001065b3:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001065b7	kernel.asm	/^ffff8000001065b7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff8000001065be	kernel.asm	/^ffff8000001065be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001065c5	kernel.asm	/^ffff8000001065c5:	eb 62                	jmp    ffff800000106629 <fork+0x173>$/;"	l
ffff8000001065c7	kernel.asm	/^ffff8000001065c7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065ce	kernel.asm	/^ffff8000001065ce:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065d2	kernel.asm	/^ffff8000001065d2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001065d5	kernel.asm	/^ffff8000001065d5:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001065d8	kernel.asm	/^ffff8000001065d8:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001065dc	kernel.asm	/^ffff8000001065dc:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001065e1	kernel.asm	/^ffff8000001065e1:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001065e4	kernel.asm	/^ffff8000001065e4:	74 3f                	je     ffff800000106625 <fork+0x16f>$/;"	l
ffff8000001065e6	kernel.asm	/^ffff8000001065e6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065ed	kernel.asm	/^ffff8000001065ed:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065f1	kernel.asm	/^ffff8000001065f1:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001065f4	kernel.asm	/^ffff8000001065f4:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001065f7	kernel.asm	/^ffff8000001065f7:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001065fb	kernel.asm	/^ffff8000001065fb:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106600	kernel.asm	/^ffff800000106600:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106603	kernel.asm	/^ffff800000106603:	48 b8 26 1b 10 00 00 	movabs $0xffff800000101b26,%rax$/;"	l
ffff80000010660a	kernel.asm	/^ffff80000010660a:	80 ff ff $/;"	l
ffff80000010660d	kernel.asm	/^ffff80000010660d:	ff d0                	callq  *%rax$/;"	l
ffff80000010660f	kernel.asm	/^ffff80000010660f:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff800000106612	kernel.asm	/^ffff800000106612:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106616	kernel.asm	/^ffff800000106616:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106619	kernel.asm	/^ffff800000106619:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010661c	kernel.asm	/^ffff80000010661c:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106620	kernel.asm	/^ffff800000106620:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
ffff800000106625	kernel.asm	/^ffff800000106625:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000106629	kernel.asm	/^ffff800000106629:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff80000010662d	kernel.asm	/^ffff80000010662d:	7e 98                	jle    ffff8000001065c7 <fork+0x111>$/;"	l
ffff80000010662f	kernel.asm	/^ffff80000010662f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106636	kernel.asm	/^ffff800000106636:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010663a	kernel.asm	/^ffff80000010663a:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000106641	kernel.asm	/^ffff800000106641:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106644	kernel.asm	/^ffff800000106644:	48 b8 8e 29 10 00 00 	movabs $0xffff80000010298e,%rax$/;"	l
ffff80000010664b	kernel.asm	/^ffff80000010664b:	80 ff ff $/;"	l
ffff80000010664e	kernel.asm	/^ffff80000010664e:	ff d0                	callq  *%rax$/;"	l
ffff800000106650	kernel.asm	/^ffff800000106650:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106653	kernel.asm	/^ffff800000106653:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106657	kernel.asm	/^ffff800000106657:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff80000010665e	kernel.asm	/^ffff80000010665e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106665	kernel.asm	/^ffff800000106665:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106669	kernel.asm	/^ffff800000106669:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000106670	kernel.asm	/^ffff800000106670:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106674	kernel.asm	/^ffff800000106674:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff80000010667a	kernel.asm	/^ffff80000010667a:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010667f	kernel.asm	/^ffff80000010667f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000106682	kernel.asm	/^ffff800000106682:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106685	kernel.asm	/^ffff800000106685:	48 b8 46 79 10 00 00 	movabs $0xffff800000107946,%rax$/;"	l
ffff80000010668c	kernel.asm	/^ffff80000010668c:	80 ff ff $/;"	l
ffff80000010668f	kernel.asm	/^ffff80000010668f:	ff d0                	callq  *%rax$/;"	l
ffff800000106691	kernel.asm	/^ffff800000106691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106695	kernel.asm	/^ffff800000106695:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000106698	kernel.asm	/^ffff800000106698:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff80000010669b	kernel.asm	/^ffff80000010669b:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001066a2	kernel.asm	/^ffff8000001066a2:	80 ff ff $/;"	l
ffff8000001066a5	kernel.asm	/^ffff8000001066a5:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001066ac	kernel.asm	/^ffff8000001066ac:	80 ff ff $/;"	l
ffff8000001066af	kernel.asm	/^ffff8000001066af:	ff d0                	callq  *%rax$/;"	l
ffff8000001066b1	kernel.asm	/^ffff8000001066b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001066b5	kernel.asm	/^ffff8000001066b5:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff8000001066bc	kernel.asm	/^ffff8000001066bc:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001066c3	kernel.asm	/^ffff8000001066c3:	80 ff ff $/;"	l
ffff8000001066c6	kernel.asm	/^ffff8000001066c6:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001066cd	kernel.asm	/^ffff8000001066cd:	80 ff ff $/;"	l
ffff8000001066d0	kernel.asm	/^ffff8000001066d0:	ff d0                	callq  *%rax$/;"	l
ffff8000001066d2	kernel.asm	/^ffff8000001066d2:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001066d5	kernel.asm	/^ffff8000001066d5:	c9                   	leaveq $/;"	l
ffff8000001066d6	kernel.asm	/^ffff8000001066d6:	c3                   	retq   $/;"	l
ffff8000001066d7	kernel.asm	/^ffff8000001066d7 <exit>:$/;"	l
ffff8000001066d7	kernel.asm	/^ffff8000001066d7:	55                   	push   %rbp$/;"	l
ffff8000001066d8	kernel.asm	/^ffff8000001066d8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001066db	kernel.asm	/^ffff8000001066db:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001066df	kernel.asm	/^ffff8000001066df:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001066e6	kernel.asm	/^ffff8000001066e6:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff8000001066ea	kernel.asm	/^ffff8000001066ea:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff8000001066f1	kernel.asm	/^ffff8000001066f1:	80 ff ff $/;"	l
ffff8000001066f4	kernel.asm	/^ffff8000001066f4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001066f7	kernel.asm	/^ffff8000001066f7:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001066fa	kernel.asm	/^ffff8000001066fa:	75 16                	jne    ffff800000106712 <exit+0x3b>$/;"	l
ffff8000001066fc	kernel.asm	/^ffff8000001066fc:	48 bf 50 ce 10 00 00 	movabs $0xffff80000010ce50,%rdi$/;"	l
ffff800000106703	kernel.asm	/^ffff800000106703:	80 ff ff $/;"	l
ffff800000106706	kernel.asm	/^ffff800000106706:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010670d	kernel.asm	/^ffff80000010670d:	80 ff ff $/;"	l
ffff800000106710	kernel.asm	/^ffff800000106710:	ff d0                	callq  *%rax$/;"	l
ffff800000106712	kernel.asm	/^ffff800000106712:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff800000106719	kernel.asm	/^ffff800000106719:	eb 6a                	jmp    ffff800000106785 <exit+0xae>$/;"	l
ffff80000010671b	kernel.asm	/^ffff80000010671b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106722	kernel.asm	/^ffff800000106722:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106726	kernel.asm	/^ffff800000106726:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000106729	kernel.asm	/^ffff800000106729:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010672c	kernel.asm	/^ffff80000010672c:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106730	kernel.asm	/^ffff800000106730:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106735	kernel.asm	/^ffff800000106735:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106738	kernel.asm	/^ffff800000106738:	74 47                	je     ffff800000106781 <exit+0xaa>$/;"	l
ffff80000010673a	kernel.asm	/^ffff80000010673a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106741	kernel.asm	/^ffff800000106741:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106745	kernel.asm	/^ffff800000106745:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000106748	kernel.asm	/^ffff800000106748:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010674b	kernel.asm	/^ffff80000010674b:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff80000010674f	kernel.asm	/^ffff80000010674f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106754	kernel.asm	/^ffff800000106754:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106757	kernel.asm	/^ffff800000106757:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff80000010675e	kernel.asm	/^ffff80000010675e:	80 ff ff $/;"	l
ffff800000106761	kernel.asm	/^ffff800000106761:	ff d0                	callq  *%rax$/;"	l
ffff800000106763	kernel.asm	/^ffff800000106763:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010676a	kernel.asm	/^ffff80000010676a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010676e	kernel.asm	/^ffff80000010676e:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000106771	kernel.asm	/^ffff800000106771:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000106774	kernel.asm	/^ffff800000106774:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106778	kernel.asm	/^ffff800000106778:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff80000010677f	kernel.asm	/^ffff80000010677f:	00 00 $/;"	l
ffff800000106781	kernel.asm	/^ffff800000106781:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff800000106785	kernel.asm	/^ffff800000106785:	83 7d f4 0f          	cmpl   $0xf,-0xc(%rbp)$/;"	l
ffff800000106789	kernel.asm	/^ffff800000106789:	7e 90                	jle    ffff80000010671b <exit+0x44>$/;"	l
ffff80000010678b	kernel.asm	/^ffff80000010678b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106790	kernel.asm	/^ffff800000106790:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000106797	kernel.asm	/^ffff800000106797:	80 ff ff $/;"	l
ffff80000010679a	kernel.asm	/^ffff80000010679a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010679c	kernel.asm	/^ffff80000010679c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067a3	kernel.asm	/^ffff8000001067a3:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067a7	kernel.asm	/^ffff8000001067a7:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff8000001067ae	kernel.asm	/^ffff8000001067ae:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001067b1	kernel.asm	/^ffff8000001067b1:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff8000001067b8	kernel.asm	/^ffff8000001067b8:	80 ff ff $/;"	l
ffff8000001067bb	kernel.asm	/^ffff8000001067bb:	ff d0                	callq  *%rax$/;"	l
ffff8000001067bd	kernel.asm	/^ffff8000001067bd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001067c2	kernel.asm	/^ffff8000001067c2:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff8000001067c9	kernel.asm	/^ffff8000001067c9:	80 ff ff $/;"	l
ffff8000001067cc	kernel.asm	/^ffff8000001067cc:	ff d2                	callq  *%rdx$/;"	l
ffff8000001067ce	kernel.asm	/^ffff8000001067ce:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067d5	kernel.asm	/^ffff8000001067d5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067d9	kernel.asm	/^ffff8000001067d9:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)$/;"	l
ffff8000001067e0	kernel.asm	/^ffff8000001067e0:	00 00 00 00 $/;"	l
ffff8000001067e4	kernel.asm	/^ffff8000001067e4:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001067eb	kernel.asm	/^ffff8000001067eb:	80 ff ff $/;"	l
ffff8000001067ee	kernel.asm	/^ffff8000001067ee:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001067f5	kernel.asm	/^ffff8000001067f5:	80 ff ff $/;"	l
ffff8000001067f8	kernel.asm	/^ffff8000001067f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001067fa	kernel.asm	/^ffff8000001067fa:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106801	kernel.asm	/^ffff800000106801:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106805	kernel.asm	/^ffff800000106805:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff800000106809	kernel.asm	/^ffff800000106809:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010680c	kernel.asm	/^ffff80000010680c:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000106813	kernel.asm	/^ffff800000106813:	80 ff ff $/;"	l
ffff800000106816	kernel.asm	/^ffff800000106816:	ff d0                	callq  *%rax$/;"	l
ffff800000106818	kernel.asm	/^ffff800000106818:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff80000010681f	kernel.asm	/^ffff80000010681f:	80 ff ff $/;"	l
ffff800000106822	kernel.asm	/^ffff800000106822:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106826	kernel.asm	/^ffff800000106826:	eb 5d                	jmp    ffff800000106885 <exit+0x1ae>$/;"	l
ffff800000106828	kernel.asm	/^ffff800000106828:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010682c	kernel.asm	/^ffff80000010682c:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff800000106830	kernel.asm	/^ffff800000106830:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106837	kernel.asm	/^ffff800000106837:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010683b	kernel.asm	/^ffff80000010683b:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff80000010683e	kernel.asm	/^ffff80000010683e:	75 3d                	jne    ffff80000010687d <exit+0x1a6>$/;"	l
ffff800000106840	kernel.asm	/^ffff800000106840:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106847	kernel.asm	/^ffff800000106847:	80 ff ff $/;"	l
ffff80000010684a	kernel.asm	/^ffff80000010684a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff80000010684d	kernel.asm	/^ffff80000010684d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106851	kernel.asm	/^ffff800000106851:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff800000106855	kernel.asm	/^ffff800000106855:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106859	kernel.asm	/^ffff800000106859:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010685c	kernel.asm	/^ffff80000010685c:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff80000010685f	kernel.asm	/^ffff80000010685f:	75 1c                	jne    ffff80000010687d <exit+0x1a6>$/;"	l
ffff800000106861	kernel.asm	/^ffff800000106861:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106868	kernel.asm	/^ffff800000106868:	80 ff ff $/;"	l
ffff80000010686b	kernel.asm	/^ffff80000010686b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010686e	kernel.asm	/^ffff80000010686e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106871	kernel.asm	/^ffff800000106871:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000106878	kernel.asm	/^ffff800000106878:	80 ff ff $/;"	l
ffff80000010687b	kernel.asm	/^ffff80000010687b:	ff d0                	callq  *%rax$/;"	l
ffff80000010687d	kernel.asm	/^ffff80000010687d:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106884	kernel.asm	/^ffff800000106884:	00 $/;"	l
ffff800000106885	kernel.asm	/^ffff800000106885:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff80000010688c	kernel.asm	/^ffff80000010688c:	80 ff ff $/;"	l
ffff80000010688f	kernel.asm	/^ffff80000010688f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106893	kernel.asm	/^ffff800000106893:	72 93                	jb     ffff800000106828 <exit+0x151>$/;"	l
ffff800000106895	kernel.asm	/^ffff800000106895:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010689c	kernel.asm	/^ffff80000010689c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001068a0	kernel.asm	/^ffff8000001068a0:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%rax)$/;"	l
ffff8000001068a7	kernel.asm	/^ffff8000001068a7:	48 b8 47 6b 10 00 00 	movabs $0xffff800000106b47,%rax$/;"	l
ffff8000001068ae	kernel.asm	/^ffff8000001068ae:	80 ff ff $/;"	l
ffff8000001068b1	kernel.asm	/^ffff8000001068b1:	ff d0                	callq  *%rax$/;"	l
ffff8000001068b3	kernel.asm	/^ffff8000001068b3:	48 bf 5d ce 10 00 00 	movabs $0xffff80000010ce5d,%rdi$/;"	l
ffff8000001068ba	kernel.asm	/^ffff8000001068ba:	80 ff ff $/;"	l
ffff8000001068bd	kernel.asm	/^ffff8000001068bd:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001068c4	kernel.asm	/^ffff8000001068c4:	80 ff ff $/;"	l
ffff8000001068c7	kernel.asm	/^ffff8000001068c7:	ff d0                	callq  *%rax$/;"	l
ffff8000001068c9	kernel.asm	/^ffff8000001068c9 <wait>:$/;"	l
ffff8000001068c9	kernel.asm	/^ffff8000001068c9:	55                   	push   %rbp$/;"	l
ffff8000001068ca	kernel.asm	/^ffff8000001068ca:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001068cd	kernel.asm	/^ffff8000001068cd:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001068d1	kernel.asm	/^ffff8000001068d1:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001068d8	kernel.asm	/^ffff8000001068d8:	80 ff ff $/;"	l
ffff8000001068db	kernel.asm	/^ffff8000001068db:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001068e2	kernel.asm	/^ffff8000001068e2:	80 ff ff $/;"	l
ffff8000001068e5	kernel.asm	/^ffff8000001068e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001068e7	kernel.asm	/^ffff8000001068e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001068ee	kernel.asm	/^ffff8000001068ee:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff8000001068f5	kernel.asm	/^ffff8000001068f5:	80 ff ff $/;"	l
ffff8000001068f8	kernel.asm	/^ffff8000001068f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001068fc	kernel.asm	/^ffff8000001068fc:	e9 d3 00 00 00       	jmpq   ffff8000001069d4 <wait+0x10b>$/;"	l
ffff800000106901	kernel.asm	/^ffff800000106901:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106905	kernel.asm	/^ffff800000106905:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff800000106909	kernel.asm	/^ffff800000106909:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106910	kernel.asm	/^ffff800000106910:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106914	kernel.asm	/^ffff800000106914:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000106917	kernel.asm	/^ffff800000106917:	0f 85 ae 00 00 00    	jne    ffff8000001069cb <wait+0x102>$/;"	l
ffff80000010691d	kernel.asm	/^ffff80000010691d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)$/;"	l
ffff800000106924	kernel.asm	/^ffff800000106924:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106928	kernel.asm	/^ffff800000106928:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010692b	kernel.asm	/^ffff80000010692b:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff80000010692e	kernel.asm	/^ffff80000010692e:	0f 85 98 00 00 00    	jne    ffff8000001069cc <wait+0x103>$/;"	l
ffff800000106934	kernel.asm	/^ffff800000106934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106938	kernel.asm	/^ffff800000106938:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff80000010693b	kernel.asm	/^ffff80000010693b:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff80000010693e	kernel.asm	/^ffff80000010693e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106942	kernel.asm	/^ffff800000106942:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106946	kernel.asm	/^ffff800000106946:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106949	kernel.asm	/^ffff800000106949:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff800000106950	kernel.asm	/^ffff800000106950:	80 ff ff $/;"	l
ffff800000106953	kernel.asm	/^ffff800000106953:	ff d0                	callq  *%rax$/;"	l
ffff800000106955	kernel.asm	/^ffff800000106955:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106959	kernel.asm	/^ffff800000106959:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff800000106960	kernel.asm	/^ffff800000106960:	00 $/;"	l
ffff800000106961	kernel.asm	/^ffff800000106961:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106965	kernel.asm	/^ffff800000106965:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106969	kernel.asm	/^ffff800000106969:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010696c	kernel.asm	/^ffff80000010696c:	48 b8 55 c5 10 00 00 	movabs $0xffff80000010c555,%rax$/;"	l
ffff800000106973	kernel.asm	/^ffff800000106973:	80 ff ff $/;"	l
ffff800000106976	kernel.asm	/^ffff800000106976:	ff d0                	callq  *%rax$/;"	l
ffff800000106978	kernel.asm	/^ffff800000106978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010697c	kernel.asm	/^ffff80000010697c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)$/;"	l
ffff800000106983	kernel.asm	/^ffff800000106983:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106987	kernel.asm	/^ffff800000106987:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)$/;"	l
ffff80000010698e	kernel.asm	/^ffff80000010698e:	00 $/;"	l
ffff80000010698f	kernel.asm	/^ffff80000010698f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106993	kernel.asm	/^ffff800000106993:	c6 80 d0 00 00 00 00 	movb   $0x0,0xd0(%rax)$/;"	l
ffff80000010699a	kernel.asm	/^ffff80000010699a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010699e	kernel.asm	/^ffff80000010699e:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)$/;"	l
ffff8000001069a5	kernel.asm	/^ffff8000001069a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001069a9	kernel.asm	/^ffff8000001069a9:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff8000001069b0	kernel.asm	/^ffff8000001069b0:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff8000001069b7	kernel.asm	/^ffff8000001069b7:	80 ff ff $/;"	l
ffff8000001069ba	kernel.asm	/^ffff8000001069ba:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001069c1	kernel.asm	/^ffff8000001069c1:	80 ff ff $/;"	l
ffff8000001069c4	kernel.asm	/^ffff8000001069c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001069c6	kernel.asm	/^ffff8000001069c6:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff8000001069c9	kernel.asm	/^ffff8000001069c9:	eb 7b                	jmp    ffff800000106a46 <wait+0x17d>$/;"	l
ffff8000001069cb	kernel.asm	/^ffff8000001069cb:	90                   	nop$/;"	l
ffff8000001069cc	kernel.asm	/^ffff8000001069cc:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff8000001069d3	kernel.asm	/^ffff8000001069d3:	00 $/;"	l
ffff8000001069d4	kernel.asm	/^ffff8000001069d4:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff8000001069db	kernel.asm	/^ffff8000001069db:	80 ff ff $/;"	l
ffff8000001069de	kernel.asm	/^ffff8000001069de:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff8000001069e2	kernel.asm	/^ffff8000001069e2:	0f 82 19 ff ff ff    	jb     ffff800000106901 <wait+0x38>$/;"	l
ffff8000001069e8	kernel.asm	/^ffff8000001069e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001069ec	kernel.asm	/^ffff8000001069ec:	74 12                	je     ffff800000106a00 <wait+0x137>$/;"	l
ffff8000001069ee	kernel.asm	/^ffff8000001069ee:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001069f5	kernel.asm	/^ffff8000001069f5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001069f9	kernel.asm	/^ffff8000001069f9:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001069fc	kernel.asm	/^ffff8000001069fc:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001069fe	kernel.asm	/^ffff8000001069fe:	74 1d                	je     ffff800000106a1d <wait+0x154>$/;"	l
ffff800000106a00	kernel.asm	/^ffff800000106a00:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106a07	kernel.asm	/^ffff800000106a07:	80 ff ff $/;"	l
ffff800000106a0a	kernel.asm	/^ffff800000106a0a:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106a11	kernel.asm	/^ffff800000106a11:	80 ff ff $/;"	l
ffff800000106a14	kernel.asm	/^ffff800000106a14:	ff d0                	callq  *%rax$/;"	l
ffff800000106a16	kernel.asm	/^ffff800000106a16:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106a1b	kernel.asm	/^ffff800000106a1b:	eb 29                	jmp    ffff800000106a46 <wait+0x17d>$/;"	l
ffff800000106a1d	kernel.asm	/^ffff800000106a1d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106a24	kernel.asm	/^ffff800000106a24:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106a28	kernel.asm	/^ffff800000106a28:	48 be 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rsi$/;"	l
ffff800000106a2f	kernel.asm	/^ffff800000106a2f:	80 ff ff $/;"	l
ffff800000106a32	kernel.asm	/^ffff800000106a32:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106a35	kernel.asm	/^ffff800000106a35:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000106a3c	kernel.asm	/^ffff800000106a3c:	80 ff ff $/;"	l
ffff800000106a3f	kernel.asm	/^ffff800000106a3f:	ff d0                	callq  *%rax$/;"	l
ffff800000106a41	kernel.asm	/^ffff800000106a41:	e9 a1 fe ff ff       	jmpq   ffff8000001068e7 <wait+0x1e>$/;"	l
ffff800000106a46	kernel.asm	/^ffff800000106a46:	c9                   	leaveq $/;"	l
ffff800000106a47	kernel.asm	/^ffff800000106a47:	c3                   	retq   $/;"	l
ffff800000106a48	kernel.asm	/^ffff800000106a48 <scheduler>:$/;"	l
ffff800000106a48	kernel.asm	/^ffff800000106a48:	55                   	push   %rbp$/;"	l
ffff800000106a49	kernel.asm	/^ffff800000106a49:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106a4c	kernel.asm	/^ffff800000106a4c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106a50	kernel.asm	/^ffff800000106a50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000106a57	kernel.asm	/^ffff800000106a57:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000106a5b	kernel.asm	/^ffff800000106a5b:	48 b8 8b 60 10 00 00 	movabs $0xffff80000010608b,%rax$/;"	l
ffff800000106a62	kernel.asm	/^ffff800000106a62:	80 ff ff $/;"	l
ffff800000106a65	kernel.asm	/^ffff800000106a65:	ff d0                	callq  *%rax$/;"	l
ffff800000106a67	kernel.asm	/^ffff800000106a67:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106a6e	kernel.asm	/^ffff800000106a6e:	80 ff ff $/;"	l
ffff800000106a71	kernel.asm	/^ffff800000106a71:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106a78	kernel.asm	/^ffff800000106a78:	80 ff ff $/;"	l
ffff800000106a7b	kernel.asm	/^ffff800000106a7b:	ff d0                	callq  *%rax$/;"	l
ffff800000106a7d	kernel.asm	/^ffff800000106a7d:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff800000106a84	kernel.asm	/^ffff800000106a84:	80 ff ff $/;"	l
ffff800000106a87	kernel.asm	/^ffff800000106a87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106a8b	kernel.asm	/^ffff800000106a8b:	e9 88 00 00 00       	jmpq   ffff800000106b18 <scheduler+0xd0>$/;"	l
ffff800000106a90	kernel.asm	/^ffff800000106a90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106a94	kernel.asm	/^ffff800000106a94:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106a97	kernel.asm	/^ffff800000106a97:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff800000106a9a	kernel.asm	/^ffff800000106a9a:	75 73                	jne    ffff800000106b0f <scheduler+0xc7>$/;"	l
ffff800000106a9c	kernel.asm	/^ffff800000106a9c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106aa3	kernel.asm	/^ffff800000106aa3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000106aa7	kernel.asm	/^ffff800000106aa7:	64 48 89 10          	mov    %rdx,%fs:(%rax)$/;"	l
ffff800000106aab	kernel.asm	/^ffff800000106aab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106aaf	kernel.asm	/^ffff800000106aaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106ab2	kernel.asm	/^ffff800000106ab2:	48 b8 59 bd 10 00 00 	movabs $0xffff80000010bd59,%rax$/;"	l
ffff800000106ab9	kernel.asm	/^ffff800000106ab9:	80 ff ff $/;"	l
ffff800000106abc	kernel.asm	/^ffff800000106abc:	ff d0                	callq  *%rax$/;"	l
ffff800000106abe	kernel.asm	/^ffff800000106abe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106ac2	kernel.asm	/^ffff800000106ac2:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%rax)$/;"	l
ffff800000106ac9	kernel.asm	/^ffff800000106ac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106acd	kernel.asm	/^ffff800000106acd:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106ad1	kernel.asm	/^ffff800000106ad1:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000106ad8	kernel.asm	/^ffff800000106ad8:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106adc	kernel.asm	/^ffff800000106adc:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106ae0	kernel.asm	/^ffff800000106ae0:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106ae3	kernel.asm	/^ffff800000106ae3:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106ae6	kernel.asm	/^ffff800000106ae6:	48 b8 da 79 10 00 00 	movabs $0xffff8000001079da,%rax$/;"	l
ffff800000106aed	kernel.asm	/^ffff800000106aed:	80 ff ff $/;"	l
ffff800000106af0	kernel.asm	/^ffff800000106af0:	ff d0                	callq  *%rax$/;"	l
ffff800000106af2	kernel.asm	/^ffff800000106af2:	48 b8 27 bd 10 00 00 	movabs $0xffff80000010bd27,%rax$/;"	l
ffff800000106af9	kernel.asm	/^ffff800000106af9:	80 ff ff $/;"	l
ffff800000106afc	kernel.asm	/^ffff800000106afc:	ff d0                	callq  *%rax$/;"	l
ffff800000106afe	kernel.asm	/^ffff800000106afe:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106b05	kernel.asm	/^ffff800000106b05:	64 48 c7 00 00 00 00 	movq   $0x0,%fs:(%rax)$/;"	l
ffff800000106b0c	kernel.asm	/^ffff800000106b0c:	00 $/;"	l
ffff800000106b0d	kernel.asm	/^ffff800000106b0d:	eb 01                	jmp    ffff800000106b10 <scheduler+0xc8>$/;"	l
ffff800000106b0f	kernel.asm	/^ffff800000106b0f:	90                   	nop$/;"	l
ffff800000106b10	kernel.asm	/^ffff800000106b10:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff800000106b17	kernel.asm	/^ffff800000106b17:	00 $/;"	l
ffff800000106b18	kernel.asm	/^ffff800000106b18:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106b1f	kernel.asm	/^ffff800000106b1f:	80 ff ff $/;"	l
ffff800000106b22	kernel.asm	/^ffff800000106b22:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106b26	kernel.asm	/^ffff800000106b26:	0f 82 64 ff ff ff    	jb     ffff800000106a90 <scheduler+0x48>$/;"	l
ffff800000106b2c	kernel.asm	/^ffff800000106b2c:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106b33	kernel.asm	/^ffff800000106b33:	80 ff ff $/;"	l
ffff800000106b36	kernel.asm	/^ffff800000106b36:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106b3d	kernel.asm	/^ffff800000106b3d:	80 ff ff $/;"	l
ffff800000106b40	kernel.asm	/^ffff800000106b40:	ff d0                	callq  *%rax$/;"	l
ffff800000106b42	kernel.asm	/^ffff800000106b42:	e9 10 ff ff ff       	jmpq   ffff800000106a57 <scheduler+0xf>$/;"	l
ffff800000106b47	kernel.asm	/^ffff800000106b47 <sched>:$/;"	l
ffff800000106b47	kernel.asm	/^ffff800000106b47:	55                   	push   %rbp$/;"	l
ffff800000106b48	kernel.asm	/^ffff800000106b48:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106b4b	kernel.asm	/^ffff800000106b4b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106b4f	kernel.asm	/^ffff800000106b4f:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106b56	kernel.asm	/^ffff800000106b56:	80 ff ff $/;"	l
ffff800000106b59	kernel.asm	/^ffff800000106b59:	48 b8 d1 74 10 00 00 	movabs $0xffff8000001074d1,%rax$/;"	l
ffff800000106b60	kernel.asm	/^ffff800000106b60:	80 ff ff $/;"	l
ffff800000106b63	kernel.asm	/^ffff800000106b63:	ff d0                	callq  *%rax$/;"	l
ffff800000106b65	kernel.asm	/^ffff800000106b65:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106b67	kernel.asm	/^ffff800000106b67:	75 16                	jne    ffff800000106b7f <sched+0x38>$/;"	l
ffff800000106b69	kernel.asm	/^ffff800000106b69:	48 bf 69 ce 10 00 00 	movabs $0xffff80000010ce69,%rdi$/;"	l
ffff800000106b70	kernel.asm	/^ffff800000106b70:	80 ff ff $/;"	l
ffff800000106b73	kernel.asm	/^ffff800000106b73:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106b7a	kernel.asm	/^ffff800000106b7a:	80 ff ff $/;"	l
ffff800000106b7d	kernel.asm	/^ffff800000106b7d:	ff d0                	callq  *%rax$/;"	l
ffff800000106b7f	kernel.asm	/^ffff800000106b7f:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106b86	kernel.asm	/^ffff800000106b86:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106b8a	kernel.asm	/^ffff800000106b8a:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff800000106b90	kernel.asm	/^ffff800000106b90:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000106b93	kernel.asm	/^ffff800000106b93:	74 16                	je     ffff800000106bab <sched+0x64>$/;"	l
ffff800000106b95	kernel.asm	/^ffff800000106b95:	48 bf 7b ce 10 00 00 	movabs $0xffff80000010ce7b,%rdi$/;"	l
ffff800000106b9c	kernel.asm	/^ffff800000106b9c:	80 ff ff $/;"	l
ffff800000106b9f	kernel.asm	/^ffff800000106b9f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106ba6	kernel.asm	/^ffff800000106ba6:	80 ff ff $/;"	l
ffff800000106ba9	kernel.asm	/^ffff800000106ba9:	ff d0                	callq  *%rax$/;"	l
ffff800000106bab	kernel.asm	/^ffff800000106bab:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106bb2	kernel.asm	/^ffff800000106bb2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106bb6	kernel.asm	/^ffff800000106bb6:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106bb9	kernel.asm	/^ffff800000106bb9:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000106bbc	kernel.asm	/^ffff800000106bbc:	75 16                	jne    ffff800000106bd4 <sched+0x8d>$/;"	l
ffff800000106bbe	kernel.asm	/^ffff800000106bbe:	48 bf 87 ce 10 00 00 	movabs $0xffff80000010ce87,%rdi$/;"	l
ffff800000106bc5	kernel.asm	/^ffff800000106bc5:	80 ff ff $/;"	l
ffff800000106bc8	kernel.asm	/^ffff800000106bc8:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106bcf	kernel.asm	/^ffff800000106bcf:	80 ff ff $/;"	l
ffff800000106bd2	kernel.asm	/^ffff800000106bd2:	ff d0                	callq  *%rax$/;"	l
ffff800000106bd4	kernel.asm	/^ffff800000106bd4:	48 b8 77 60 10 00 00 	movabs $0xffff800000106077,%rax$/;"	l
ffff800000106bdb	kernel.asm	/^ffff800000106bdb:	80 ff ff $/;"	l
ffff800000106bde	kernel.asm	/^ffff800000106bde:	ff d0                	callq  *%rax$/;"	l
ffff800000106be0	kernel.asm	/^ffff800000106be0:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000106be5	kernel.asm	/^ffff800000106be5:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106be8	kernel.asm	/^ffff800000106be8:	74 16                	je     ffff800000106c00 <sched+0xb9>$/;"	l
ffff800000106bea	kernel.asm	/^ffff800000106bea:	48 bf 95 ce 10 00 00 	movabs $0xffff80000010ce95,%rdi$/;"	l
ffff800000106bf1	kernel.asm	/^ffff800000106bf1:	80 ff ff $/;"	l
ffff800000106bf4	kernel.asm	/^ffff800000106bf4:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106bfb	kernel.asm	/^ffff800000106bfb:	80 ff ff $/;"	l
ffff800000106bfe	kernel.asm	/^ffff800000106bfe:	ff d0                	callq  *%rax$/;"	l
ffff800000106c00	kernel.asm	/^ffff800000106c00:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106c07	kernel.asm	/^ffff800000106c07:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106c0b	kernel.asm	/^ffff800000106c0b:	8b 80 e0 00 00 00    	mov    0xe0(%rax),%eax$/;"	l
ffff800000106c11	kernel.asm	/^ffff800000106c11:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106c14	kernel.asm	/^ffff800000106c14:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106c1b	kernel.asm	/^ffff800000106c1b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106c1f	kernel.asm	/^ffff800000106c1f:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106c23	kernel.asm	/^ffff800000106c23:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx$/;"	l
ffff800000106c2a	kernel.asm	/^ffff800000106c2a:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106c2e	kernel.asm	/^ffff800000106c2e:	48 83 c2 30          	add    $0x30,%rdx$/;"	l
ffff800000106c32	kernel.asm	/^ffff800000106c32:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106c35	kernel.asm	/^ffff800000106c35:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106c38	kernel.asm	/^ffff800000106c38:	48 b8 da 79 10 00 00 	movabs $0xffff8000001079da,%rax$/;"	l
ffff800000106c3f	kernel.asm	/^ffff800000106c3f:	80 ff ff $/;"	l
ffff800000106c42	kernel.asm	/^ffff800000106c42:	ff d0                	callq  *%rax$/;"	l
ffff800000106c44	kernel.asm	/^ffff800000106c44:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106c4b	kernel.asm	/^ffff800000106c4b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106c4f	kernel.asm	/^ffff800000106c4f:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106c52	kernel.asm	/^ffff800000106c52:	89 90 e0 00 00 00    	mov    %edx,0xe0(%rax)$/;"	l
ffff800000106c58	kernel.asm	/^ffff800000106c58:	90                   	nop$/;"	l
ffff800000106c59	kernel.asm	/^ffff800000106c59:	c9                   	leaveq $/;"	l
ffff800000106c5a	kernel.asm	/^ffff800000106c5a:	c3                   	retq   $/;"	l
ffff800000106c5b	kernel.asm	/^ffff800000106c5b <yield>:$/;"	l
ffff800000106c5b	kernel.asm	/^ffff800000106c5b:	55                   	push   %rbp$/;"	l
ffff800000106c5c	kernel.asm	/^ffff800000106c5c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106c5f	kernel.asm	/^ffff800000106c5f:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106c66	kernel.asm	/^ffff800000106c66:	80 ff ff $/;"	l
ffff800000106c69	kernel.asm	/^ffff800000106c69:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106c70	kernel.asm	/^ffff800000106c70:	80 ff ff $/;"	l
ffff800000106c73	kernel.asm	/^ffff800000106c73:	ff d0                	callq  *%rax$/;"	l
ffff800000106c75	kernel.asm	/^ffff800000106c75:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106c7c	kernel.asm	/^ffff800000106c7c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106c80	kernel.asm	/^ffff800000106c80:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106c87	kernel.asm	/^ffff800000106c87:	48 b8 47 6b 10 00 00 	movabs $0xffff800000106b47,%rax$/;"	l
ffff800000106c8e	kernel.asm	/^ffff800000106c8e:	80 ff ff $/;"	l
ffff800000106c91	kernel.asm	/^ffff800000106c91:	ff d0                	callq  *%rax$/;"	l
ffff800000106c93	kernel.asm	/^ffff800000106c93:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106c9a	kernel.asm	/^ffff800000106c9a:	80 ff ff $/;"	l
ffff800000106c9d	kernel.asm	/^ffff800000106c9d:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106ca4	kernel.asm	/^ffff800000106ca4:	80 ff ff $/;"	l
ffff800000106ca7	kernel.asm	/^ffff800000106ca7:	ff d0                	callq  *%rax$/;"	l
ffff800000106ca9	kernel.asm	/^ffff800000106ca9:	90                   	nop$/;"	l
ffff800000106caa	kernel.asm	/^ffff800000106caa:	5d                   	pop    %rbp$/;"	l
ffff800000106cab	kernel.asm	/^ffff800000106cab:	c3                   	retq   $/;"	l
ffff800000106cac	kernel.asm	/^ffff800000106cac <forkret>:$/;"	l
ffff800000106cac	kernel.asm	/^ffff800000106cac:	55                   	push   %rbp$/;"	l
ffff800000106cad	kernel.asm	/^ffff800000106cad:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106cb0	kernel.asm	/^ffff800000106cb0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106cb4	kernel.asm	/^ffff800000106cb4:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106cbb	kernel.asm	/^ffff800000106cbb:	80 ff ff $/;"	l
ffff800000106cbe	kernel.asm	/^ffff800000106cbe:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106cc5	kernel.asm	/^ffff800000106cc5:	80 ff ff $/;"	l
ffff800000106cc8	kernel.asm	/^ffff800000106cc8:	ff d0                	callq  *%rax$/;"	l
ffff800000106cca	kernel.asm	/^ffff800000106cca:	48 b8 44 e5 10 00 00 	movabs $0xffff80000010e544,%rax$/;"	l
ffff800000106cd1	kernel.asm	/^ffff800000106cd1:	80 ff ff $/;"	l
ffff800000106cd4	kernel.asm	/^ffff800000106cd4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000106cd6	kernel.asm	/^ffff800000106cd6:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106cd8	kernel.asm	/^ffff800000106cd8:	74 32                	je     ffff800000106d0c <forkret+0x60>$/;"	l
ffff800000106cda	kernel.asm	/^ffff800000106cda:	48 b8 44 e5 10 00 00 	movabs $0xffff80000010e544,%rax$/;"	l
ffff800000106ce1	kernel.asm	/^ffff800000106ce1:	80 ff ff $/;"	l
ffff800000106ce4	kernel.asm	/^ffff800000106ce4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000106cea	kernel.asm	/^ffff800000106cea:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106cef	kernel.asm	/^ffff800000106cef:	48 b8 77 25 10 00 00 	movabs $0xffff800000102577,%rax$/;"	l
ffff800000106cf6	kernel.asm	/^ffff800000106cf6:	80 ff ff $/;"	l
ffff800000106cf9	kernel.asm	/^ffff800000106cf9:	ff d0                	callq  *%rax$/;"	l
ffff800000106cfb	kernel.asm	/^ffff800000106cfb:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106d00	kernel.asm	/^ffff800000106d00:	48 b8 1a 4b 10 00 00 	movabs $0xffff800000104b1a,%rax$/;"	l
ffff800000106d07	kernel.asm	/^ffff800000106d07:	80 ff ff $/;"	l
ffff800000106d0a	kernel.asm	/^ffff800000106d0a:	ff d0                	callq  *%rax$/;"	l
ffff800000106d0c	kernel.asm	/^ffff800000106d0c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d13	kernel.asm	/^ffff800000106d13:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d17	kernel.asm	/^ffff800000106d17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106d1b	kernel.asm	/^ffff800000106d1b:	90                   	nop$/;"	l
ffff800000106d1c	kernel.asm	/^ffff800000106d1c:	c9                   	leaveq $/;"	l
ffff800000106d1d	kernel.asm	/^ffff800000106d1d:	c3                   	retq   $/;"	l
ffff800000106d1e	kernel.asm	/^ffff800000106d1e <sleep>:$/;"	l
ffff800000106d1e	kernel.asm	/^ffff800000106d1e:	55                   	push   %rbp$/;"	l
ffff800000106d1f	kernel.asm	/^ffff800000106d1f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106d22	kernel.asm	/^ffff800000106d22:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106d26	kernel.asm	/^ffff800000106d26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000106d2a	kernel.asm	/^ffff800000106d2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000106d2e	kernel.asm	/^ffff800000106d2e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d35	kernel.asm	/^ffff800000106d35:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d39	kernel.asm	/^ffff800000106d39:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106d3c	kernel.asm	/^ffff800000106d3c:	75 16                	jne    ffff800000106d54 <sleep+0x36>$/;"	l
ffff800000106d3e	kernel.asm	/^ffff800000106d3e:	48 bf a9 ce 10 00 00 	movabs $0xffff80000010cea9,%rdi$/;"	l
ffff800000106d45	kernel.asm	/^ffff800000106d45:	80 ff ff $/;"	l
ffff800000106d48	kernel.asm	/^ffff800000106d48:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106d4f	kernel.asm	/^ffff800000106d4f:	80 ff ff $/;"	l
ffff800000106d52	kernel.asm	/^ffff800000106d52:	ff d0                	callq  *%rax$/;"	l
ffff800000106d54	kernel.asm	/^ffff800000106d54:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000106d59	kernel.asm	/^ffff800000106d59:	75 16                	jne    ffff800000106d71 <sleep+0x53>$/;"	l
ffff800000106d5b	kernel.asm	/^ffff800000106d5b:	48 bf af ce 10 00 00 	movabs $0xffff80000010ceaf,%rdi$/;"	l
ffff800000106d62	kernel.asm	/^ffff800000106d62:	80 ff ff $/;"	l
ffff800000106d65	kernel.asm	/^ffff800000106d65:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000106d6c	kernel.asm	/^ffff800000106d6c:	80 ff ff $/;"	l
ffff800000106d6f	kernel.asm	/^ffff800000106d6f:	ff d0                	callq  *%rax$/;"	l
ffff800000106d71	kernel.asm	/^ffff800000106d71:	48 b8 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rax$/;"	l
ffff800000106d78	kernel.asm	/^ffff800000106d78:	80 ff ff $/;"	l
ffff800000106d7b	kernel.asm	/^ffff800000106d7b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106d7f	kernel.asm	/^ffff800000106d7f:	74 29                	je     ffff800000106daa <sleep+0x8c>$/;"	l
ffff800000106d81	kernel.asm	/^ffff800000106d81:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106d88	kernel.asm	/^ffff800000106d88:	80 ff ff $/;"	l
ffff800000106d8b	kernel.asm	/^ffff800000106d8b:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106d92	kernel.asm	/^ffff800000106d92:	80 ff ff $/;"	l
ffff800000106d95	kernel.asm	/^ffff800000106d95:	ff d0                	callq  *%rax$/;"	l
ffff800000106d97	kernel.asm	/^ffff800000106d97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106d9b	kernel.asm	/^ffff800000106d9b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106d9e	kernel.asm	/^ffff800000106d9e:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106da5	kernel.asm	/^ffff800000106da5:	80 ff ff $/;"	l
ffff800000106da8	kernel.asm	/^ffff800000106da8:	ff d0                	callq  *%rax$/;"	l
ffff800000106daa	kernel.asm	/^ffff800000106daa:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106db1	kernel.asm	/^ffff800000106db1:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106db5	kernel.asm	/^ffff800000106db5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106db9	kernel.asm	/^ffff800000106db9:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff800000106dbd	kernel.asm	/^ffff800000106dbd:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106dc4	kernel.asm	/^ffff800000106dc4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106dc8	kernel.asm	/^ffff800000106dc8:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%rax)$/;"	l
ffff800000106dcf	kernel.asm	/^ffff800000106dcf:	48 b8 47 6b 10 00 00 	movabs $0xffff800000106b47,%rax$/;"	l
ffff800000106dd6	kernel.asm	/^ffff800000106dd6:	80 ff ff $/;"	l
ffff800000106dd9	kernel.asm	/^ffff800000106dd9:	ff d0                	callq  *%rax$/;"	l
ffff800000106ddb	kernel.asm	/^ffff800000106ddb:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106de2	kernel.asm	/^ffff800000106de2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106de6	kernel.asm	/^ffff800000106de6:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)$/;"	l
ffff800000106ded	kernel.asm	/^ffff800000106ded:	00 $/;"	l
ffff800000106dee	kernel.asm	/^ffff800000106dee:	48 b8 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rax$/;"	l
ffff800000106df5	kernel.asm	/^ffff800000106df5:	80 ff ff $/;"	l
ffff800000106df8	kernel.asm	/^ffff800000106df8:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106dfc	kernel.asm	/^ffff800000106dfc:	74 29                	je     ffff800000106e27 <sleep+0x109>$/;"	l
ffff800000106dfe	kernel.asm	/^ffff800000106dfe:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106e05	kernel.asm	/^ffff800000106e05:	80 ff ff $/;"	l
ffff800000106e08	kernel.asm	/^ffff800000106e08:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106e0f	kernel.asm	/^ffff800000106e0f:	80 ff ff $/;"	l
ffff800000106e12	kernel.asm	/^ffff800000106e12:	ff d0                	callq  *%rax$/;"	l
ffff800000106e14	kernel.asm	/^ffff800000106e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106e18	kernel.asm	/^ffff800000106e18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106e1b	kernel.asm	/^ffff800000106e1b:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106e22	kernel.asm	/^ffff800000106e22:	80 ff ff $/;"	l
ffff800000106e25	kernel.asm	/^ffff800000106e25:	ff d0                	callq  *%rax$/;"	l
ffff800000106e27	kernel.asm	/^ffff800000106e27:	90                   	nop$/;"	l
ffff800000106e28	kernel.asm	/^ffff800000106e28:	c9                   	leaveq $/;"	l
ffff800000106e29	kernel.asm	/^ffff800000106e29:	c3                   	retq   $/;"	l
ffff800000106e2a	kernel.asm	/^ffff800000106e2a <wakeup1>:$/;"	l
ffff800000106e2a	kernel.asm	/^ffff800000106e2a:	55                   	push   %rbp$/;"	l
ffff800000106e2b	kernel.asm	/^ffff800000106e2b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e2e	kernel.asm	/^ffff800000106e2e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000106e32	kernel.asm	/^ffff800000106e32:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000106e36	kernel.asm	/^ffff800000106e36:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff800000106e3d	kernel.asm	/^ffff800000106e3d:	80 ff ff $/;"	l
ffff800000106e40	kernel.asm	/^ffff800000106e40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106e44	kernel.asm	/^ffff800000106e44:	eb 2d                	jmp    ffff800000106e73 <wakeup1+0x49>$/;"	l
ffff800000106e46	kernel.asm	/^ffff800000106e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106e4a	kernel.asm	/^ffff800000106e4a:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106e4d	kernel.asm	/^ffff800000106e4d:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000106e50	kernel.asm	/^ffff800000106e50:	75 19                	jne    ffff800000106e6b <wakeup1+0x41>$/;"	l
ffff800000106e52	kernel.asm	/^ffff800000106e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106e56	kernel.asm	/^ffff800000106e56:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff800000106e5a	kernel.asm	/^ffff800000106e5a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000106e5e	kernel.asm	/^ffff800000106e5e:	75 0b                	jne    ffff800000106e6b <wakeup1+0x41>$/;"	l
ffff800000106e60	kernel.asm	/^ffff800000106e60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106e64	kernel.asm	/^ffff800000106e64:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106e6b	kernel.asm	/^ffff800000106e6b:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106e72	kernel.asm	/^ffff800000106e72:	00 $/;"	l
ffff800000106e73	kernel.asm	/^ffff800000106e73:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106e7a	kernel.asm	/^ffff800000106e7a:	80 ff ff $/;"	l
ffff800000106e7d	kernel.asm	/^ffff800000106e7d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106e81	kernel.asm	/^ffff800000106e81:	72 c3                	jb     ffff800000106e46 <wakeup1+0x1c>$/;"	l
ffff800000106e83	kernel.asm	/^ffff800000106e83:	90                   	nop$/;"	l
ffff800000106e84	kernel.asm	/^ffff800000106e84:	c9                   	leaveq $/;"	l
ffff800000106e85	kernel.asm	/^ffff800000106e85:	c3                   	retq   $/;"	l
ffff800000106e86	kernel.asm	/^ffff800000106e86 <wakeup>:$/;"	l
ffff800000106e86	kernel.asm	/^ffff800000106e86:	55                   	push   %rbp$/;"	l
ffff800000106e87	kernel.asm	/^ffff800000106e87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e8a	kernel.asm	/^ffff800000106e8a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106e8e	kernel.asm	/^ffff800000106e8e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000106e92	kernel.asm	/^ffff800000106e92:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106e99	kernel.asm	/^ffff800000106e99:	80 ff ff $/;"	l
ffff800000106e9c	kernel.asm	/^ffff800000106e9c:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106ea3	kernel.asm	/^ffff800000106ea3:	80 ff ff $/;"	l
ffff800000106ea6	kernel.asm	/^ffff800000106ea6:	ff d0                	callq  *%rax$/;"	l
ffff800000106ea8	kernel.asm	/^ffff800000106ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106eac	kernel.asm	/^ffff800000106eac:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106eaf	kernel.asm	/^ffff800000106eaf:	48 b8 2a 6e 10 00 00 	movabs $0xffff800000106e2a,%rax$/;"	l
ffff800000106eb6	kernel.asm	/^ffff800000106eb6:	80 ff ff $/;"	l
ffff800000106eb9	kernel.asm	/^ffff800000106eb9:	ff d0                	callq  *%rax$/;"	l
ffff800000106ebb	kernel.asm	/^ffff800000106ebb:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106ec2	kernel.asm	/^ffff800000106ec2:	80 ff ff $/;"	l
ffff800000106ec5	kernel.asm	/^ffff800000106ec5:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106ecc	kernel.asm	/^ffff800000106ecc:	80 ff ff $/;"	l
ffff800000106ecf	kernel.asm	/^ffff800000106ecf:	ff d0                	callq  *%rax$/;"	l
ffff800000106ed1	kernel.asm	/^ffff800000106ed1:	90                   	nop$/;"	l
ffff800000106ed2	kernel.asm	/^ffff800000106ed2:	c9                   	leaveq $/;"	l
ffff800000106ed3	kernel.asm	/^ffff800000106ed3:	c3                   	retq   $/;"	l
ffff800000106ed4	kernel.asm	/^ffff800000106ed4 <kill>:$/;"	l
ffff800000106ed4	kernel.asm	/^ffff800000106ed4:	55                   	push   %rbp$/;"	l
ffff800000106ed5	kernel.asm	/^ffff800000106ed5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106ed8	kernel.asm	/^ffff800000106ed8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000106edc	kernel.asm	/^ffff800000106edc:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000106edf	kernel.asm	/^ffff800000106edf:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106ee6	kernel.asm	/^ffff800000106ee6:	80 ff ff $/;"	l
ffff800000106ee9	kernel.asm	/^ffff800000106ee9:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000106ef0	kernel.asm	/^ffff800000106ef0:	80 ff ff $/;"	l
ffff800000106ef3	kernel.asm	/^ffff800000106ef3:	ff d0                	callq  *%rax$/;"	l
ffff800000106ef5	kernel.asm	/^ffff800000106ef5:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff800000106efc	kernel.asm	/^ffff800000106efc:	80 ff ff $/;"	l
ffff800000106eff	kernel.asm	/^ffff800000106eff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106f03	kernel.asm	/^ffff800000106f03:	eb 53                	jmp    ffff800000106f58 <kill+0x84>$/;"	l
ffff800000106f05	kernel.asm	/^ffff800000106f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106f09	kernel.asm	/^ffff800000106f09:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000106f0c	kernel.asm	/^ffff800000106f0c:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000106f0f	kernel.asm	/^ffff800000106f0f:	75 3f                	jne    ffff800000106f50 <kill+0x7c>$/;"	l
ffff800000106f11	kernel.asm	/^ffff800000106f11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106f15	kernel.asm	/^ffff800000106f15:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff800000106f1c	kernel.asm	/^ffff800000106f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106f20	kernel.asm	/^ffff800000106f20:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106f23	kernel.asm	/^ffff800000106f23:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000106f26	kernel.asm	/^ffff800000106f26:	75 0b                	jne    ffff800000106f33 <kill+0x5f>$/;"	l
ffff800000106f28	kernel.asm	/^ffff800000106f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106f2c	kernel.asm	/^ffff800000106f2c:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106f33	kernel.asm	/^ffff800000106f33:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106f3a	kernel.asm	/^ffff800000106f3a:	80 ff ff $/;"	l
ffff800000106f3d	kernel.asm	/^ffff800000106f3d:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106f44	kernel.asm	/^ffff800000106f44:	80 ff ff $/;"	l
ffff800000106f47	kernel.asm	/^ffff800000106f47:	ff d0                	callq  *%rax$/;"	l
ffff800000106f49	kernel.asm	/^ffff800000106f49:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106f4e	kernel.asm	/^ffff800000106f4e:	eb 33                	jmp    ffff800000106f83 <kill+0xaf>$/;"	l
ffff800000106f50	kernel.asm	/^ffff800000106f50:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106f57	kernel.asm	/^ffff800000106f57:	00 $/;"	l
ffff800000106f58	kernel.asm	/^ffff800000106f58:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff800000106f5f	kernel.asm	/^ffff800000106f5f:	80 ff ff $/;"	l
ffff800000106f62	kernel.asm	/^ffff800000106f62:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106f66	kernel.asm	/^ffff800000106f66:	72 9d                	jb     ffff800000106f05 <kill+0x31>$/;"	l
ffff800000106f68	kernel.asm	/^ffff800000106f68:	48 bf 80 aa 11 00 00 	movabs $0xffff80000011aa80,%rdi$/;"	l
ffff800000106f6f	kernel.asm	/^ffff800000106f6f:	80 ff ff $/;"	l
ffff800000106f72	kernel.asm	/^ffff800000106f72:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000106f79	kernel.asm	/^ffff800000106f79:	80 ff ff $/;"	l
ffff800000106f7c	kernel.asm	/^ffff800000106f7c:	ff d0                	callq  *%rax$/;"	l
ffff800000106f7e	kernel.asm	/^ffff800000106f7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106f83	kernel.asm	/^ffff800000106f83:	c9                   	leaveq $/;"	l
ffff800000106f84	kernel.asm	/^ffff800000106f84:	c3                   	retq   $/;"	l
ffff800000106f85	kernel.asm	/^ffff800000106f85 <procdump>:$/;"	l
ffff800000106f85	kernel.asm	/^ffff800000106f85:	55                   	push   %rbp$/;"	l
ffff800000106f86	kernel.asm	/^ffff800000106f86:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106f89	kernel.asm	/^ffff800000106f89:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff800000106f8d	kernel.asm	/^ffff800000106f8d:	48 b8 e8 aa 11 00 00 	movabs $0xffff80000011aae8,%rax$/;"	l
ffff800000106f94	kernel.asm	/^ffff800000106f94:	80 ff ff $/;"	l
ffff800000106f97	kernel.asm	/^ffff800000106f97:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106f9b	kernel.asm	/^ffff800000106f9b:	e9 3b 01 00 00       	jmpq   ffff8000001070db <procdump+0x156>$/;"	l
ffff800000106fa0	kernel.asm	/^ffff800000106fa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fa4	kernel.asm	/^ffff800000106fa4:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106fa7	kernel.asm	/^ffff800000106fa7:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106fa9	kernel.asm	/^ffff800000106fa9:	0f 84 23 01 00 00    	je     ffff8000001070d2 <procdump+0x14d>$/;"	l
ffff800000106faf	kernel.asm	/^ffff800000106faf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fb3	kernel.asm	/^ffff800000106fb3:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106fb6	kernel.asm	/^ffff800000106fb6:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff800000106fb9	kernel.asm	/^ffff800000106fb9:	77 39                	ja     ffff800000106ff4 <procdump+0x6f>$/;"	l
ffff800000106fbb	kernel.asm	/^ffff800000106fbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fbf	kernel.asm	/^ffff800000106fbf:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff800000106fc2	kernel.asm	/^ffff800000106fc2:	48 b8 60 e5 10 00 00 	movabs $0xffff80000010e560,%rax$/;"	l
ffff800000106fc9	kernel.asm	/^ffff800000106fc9:	80 ff ff $/;"	l
ffff800000106fcc	kernel.asm	/^ffff800000106fcc:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106fce	kernel.asm	/^ffff800000106fce:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000106fd2	kernel.asm	/^ffff800000106fd2:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106fd5	kernel.asm	/^ffff800000106fd5:	74 1d                	je     ffff800000106ff4 <procdump+0x6f>$/;"	l
ffff800000106fd7	kernel.asm	/^ffff800000106fd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fdb	kernel.asm	/^ffff800000106fdb:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff800000106fde	kernel.asm	/^ffff800000106fde:	48 b8 60 e5 10 00 00 	movabs $0xffff80000010e560,%rax$/;"	l
ffff800000106fe5	kernel.asm	/^ffff800000106fe5:	80 ff ff $/;"	l
ffff800000106fe8	kernel.asm	/^ffff800000106fe8:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106fea	kernel.asm	/^ffff800000106fea:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000106fee	kernel.asm	/^ffff800000106fee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000106ff2	kernel.asm	/^ffff800000106ff2:	eb 0e                	jmp    ffff800000107002 <procdump+0x7d>$/;"	l
ffff800000106ff4	kernel.asm	/^ffff800000106ff4:	48 b8 c0 ce 10 00 00 	movabs $0xffff80000010cec0,%rax$/;"	l
ffff800000106ffb	kernel.asm	/^ffff800000106ffb:	80 ff ff $/;"	l
ffff800000106ffe	kernel.asm	/^ffff800000106ffe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000107002	kernel.asm	/^ffff800000107002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107006	kernel.asm	/^ffff800000107006:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff80000010700d	kernel.asm	/^ffff80000010700d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107011	kernel.asm	/^ffff800000107011:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000107014	kernel.asm	/^ffff800000107014:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107018	kernel.asm	/^ffff800000107018:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010701a	kernel.asm	/^ffff80000010701a:	48 bf c4 ce 10 00 00 	movabs $0xffff80000010cec4,%rdi$/;"	l
ffff800000107021	kernel.asm	/^ffff800000107021:	80 ff ff $/;"	l
ffff800000107024	kernel.asm	/^ffff800000107024:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107029	kernel.asm	/^ffff800000107029:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff800000107030	kernel.asm	/^ffff800000107030:	80 ff ff $/;"	l
ffff800000107033	kernel.asm	/^ffff800000107033:	41 ff d0             	callq  *%r8$/;"	l
ffff800000107036	kernel.asm	/^ffff800000107036:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010703a	kernel.asm	/^ffff80000010703a:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010703d	kernel.asm	/^ffff80000010703d:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000107040	kernel.asm	/^ffff800000107040:	75 73                	jne    ffff8000001070b5 <procdump+0x130>$/;"	l
ffff800000107042	kernel.asm	/^ffff800000107042:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107046	kernel.asm	/^ffff800000107046:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff80000010704a	kernel.asm	/^ffff80000010704a:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff80000010704e	kernel.asm	/^ffff80000010704e:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000107052	kernel.asm	/^ffff800000107052:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107055	kernel.asm	/^ffff800000107055:	48 8d 45 90          	lea    -0x70(%rbp),%rax$/;"	l
ffff800000107059	kernel.asm	/^ffff800000107059:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010705c	kernel.asm	/^ffff80000010705c:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff80000010705f	kernel.asm	/^ffff80000010705f:	48 b8 38 74 10 00 00 	movabs $0xffff800000107438,%rax$/;"	l
ffff800000107066	kernel.asm	/^ffff800000107066:	80 ff ff $/;"	l
ffff800000107069	kernel.asm	/^ffff800000107069:	ff d0                	callq  *%rax$/;"	l
ffff80000010706b	kernel.asm	/^ffff80000010706b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107072	kernel.asm	/^ffff800000107072:	eb 2c                	jmp    ffff8000001070a0 <procdump+0x11b>$/;"	l
ffff800000107074	kernel.asm	/^ffff800000107074:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107077	kernel.asm	/^ffff800000107077:	48 98                	cltq   $/;"	l
ffff800000107079	kernel.asm	/^ffff800000107079:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff80000010707e	kernel.asm	/^ffff80000010707e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107081	kernel.asm	/^ffff800000107081:	48 bf cd ce 10 00 00 	movabs $0xffff80000010cecd,%rdi$/;"	l
ffff800000107088	kernel.asm	/^ffff800000107088:	80 ff ff $/;"	l
ffff80000010708b	kernel.asm	/^ffff80000010708b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107090	kernel.asm	/^ffff800000107090:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff800000107097	kernel.asm	/^ffff800000107097:	80 ff ff $/;"	l
ffff80000010709a	kernel.asm	/^ffff80000010709a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010709c	kernel.asm	/^ffff80000010709c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001070a0	kernel.asm	/^ffff8000001070a0:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff8000001070a4	kernel.asm	/^ffff8000001070a4:	7f 0f                	jg     ffff8000001070b5 <procdump+0x130>$/;"	l
ffff8000001070a6	kernel.asm	/^ffff8000001070a6:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001070a9	kernel.asm	/^ffff8000001070a9:	48 98                	cltq   $/;"	l
ffff8000001070ab	kernel.asm	/^ffff8000001070ab:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff8000001070b0	kernel.asm	/^ffff8000001070b0:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001070b3	kernel.asm	/^ffff8000001070b3:	75 bf                	jne    ffff800000107074 <procdump+0xef>$/;"	l
ffff8000001070b5	kernel.asm	/^ffff8000001070b5:	48 bf d1 ce 10 00 00 	movabs $0xffff80000010ced1,%rdi$/;"	l
ffff8000001070bc	kernel.asm	/^ffff8000001070bc:	80 ff ff $/;"	l
ffff8000001070bf	kernel.asm	/^ffff8000001070bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001070c4	kernel.asm	/^ffff8000001070c4:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001070cb	kernel.asm	/^ffff8000001070cb:	80 ff ff $/;"	l
ffff8000001070ce	kernel.asm	/^ffff8000001070ce:	ff d2                	callq  *%rdx$/;"	l
ffff8000001070d0	kernel.asm	/^ffff8000001070d0:	eb 01                	jmp    ffff8000001070d3 <procdump+0x14e>$/;"	l
ffff8000001070d2	kernel.asm	/^ffff8000001070d2:	90                   	nop$/;"	l
ffff8000001070d3	kernel.asm	/^ffff8000001070d3:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff8000001070da	kernel.asm	/^ffff8000001070da:	00 $/;"	l
ffff8000001070db	kernel.asm	/^ffff8000001070db:	48 b8 e8 e2 11 00 00 	movabs $0xffff80000011e2e8,%rax$/;"	l
ffff8000001070e2	kernel.asm	/^ffff8000001070e2:	80 ff ff $/;"	l
ffff8000001070e5	kernel.asm	/^ffff8000001070e5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff8000001070e9	kernel.asm	/^ffff8000001070e9:	0f 82 b1 fe ff ff    	jb     ffff800000106fa0 <procdump+0x1b>$/;"	l
ffff8000001070ef	kernel.asm	/^ffff8000001070ef:	90                   	nop$/;"	l
ffff8000001070f0	kernel.asm	/^ffff8000001070f0:	c9                   	leaveq $/;"	l
ffff8000001070f1	kernel.asm	/^ffff8000001070f1:	c3                   	retq   $/;"	l
ffff8000001070f2	kernel.asm	/^ffff8000001070f2 <initsleeplock>:$/;"	l
ffff8000001070f2	kernel.asm	/^ffff8000001070f2:	55                   	push   %rbp$/;"	l
ffff8000001070f3	kernel.asm	/^ffff8000001070f3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001070f6	kernel.asm	/^ffff8000001070f6:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001070fa	kernel.asm	/^ffff8000001070fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001070fe	kernel.asm	/^ffff8000001070fe:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107102	kernel.asm	/^ffff800000107102:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107106	kernel.asm	/^ffff800000107106:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010710a	kernel.asm	/^ffff80000010710a:	48 be fd ce 10 00 00 	movabs $0xffff80000010cefd,%rsi$/;"	l
ffff800000107111	kernel.asm	/^ffff800000107111:	80 ff ff $/;"	l
ffff800000107114	kernel.asm	/^ffff800000107114:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107117	kernel.asm	/^ffff800000107117:	48 b8 c5 72 10 00 00 	movabs $0xffff8000001072c5,%rax$/;"	l
ffff80000010711e	kernel.asm	/^ffff80000010711e:	80 ff ff $/;"	l
ffff800000107121	kernel.asm	/^ffff800000107121:	ff d0                	callq  *%rax$/;"	l
ffff800000107123	kernel.asm	/^ffff800000107123:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107127	kernel.asm	/^ffff800000107127:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010712b	kernel.asm	/^ffff80000010712b:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff80000010712f	kernel.asm	/^ffff80000010712f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107133	kernel.asm	/^ffff800000107133:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000107139	kernel.asm	/^ffff800000107139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010713d	kernel.asm	/^ffff80000010713d:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff800000107144	kernel.asm	/^ffff800000107144:	90                   	nop$/;"	l
ffff800000107145	kernel.asm	/^ffff800000107145:	c9                   	leaveq $/;"	l
ffff800000107146	kernel.asm	/^ffff800000107146:	c3                   	retq   $/;"	l
ffff800000107147	kernel.asm	/^ffff800000107147 <acquiresleep>:$/;"	l
ffff800000107147	kernel.asm	/^ffff800000107147:	55                   	push   %rbp$/;"	l
ffff800000107148	kernel.asm	/^ffff800000107148:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010714b	kernel.asm	/^ffff80000010714b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010714f	kernel.asm	/^ffff80000010714f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107153	kernel.asm	/^ffff800000107153:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107157	kernel.asm	/^ffff800000107157:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010715b	kernel.asm	/^ffff80000010715b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010715e	kernel.asm	/^ffff80000010715e:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000107165	kernel.asm	/^ffff800000107165:	80 ff ff $/;"	l
ffff800000107168	kernel.asm	/^ffff800000107168:	ff d0                	callq  *%rax$/;"	l
ffff80000010716a	kernel.asm	/^ffff80000010716a:	eb 1e                	jmp    ffff80000010718a <acquiresleep+0x43>$/;"	l
ffff80000010716c	kernel.asm	/^ffff80000010716c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107170	kernel.asm	/^ffff800000107170:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107174	kernel.asm	/^ffff800000107174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107178	kernel.asm	/^ffff800000107178:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010717b	kernel.asm	/^ffff80000010717b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010717e	kernel.asm	/^ffff80000010717e:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff800000107185	kernel.asm	/^ffff800000107185:	80 ff ff $/;"	l
ffff800000107188	kernel.asm	/^ffff800000107188:	ff d0                	callq  *%rax$/;"	l
ffff80000010718a	kernel.asm	/^ffff80000010718a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010718e	kernel.asm	/^ffff80000010718e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000107190	kernel.asm	/^ffff800000107190:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107192	kernel.asm	/^ffff800000107192:	75 d8                	jne    ffff80000010716c <acquiresleep+0x25>$/;"	l
ffff800000107194	kernel.asm	/^ffff800000107194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107198	kernel.asm	/^ffff800000107198:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff80000010719e	kernel.asm	/^ffff80000010719e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001071a5	kernel.asm	/^ffff8000001071a5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001071a9	kernel.asm	/^ffff8000001071a9:	8b 50 1c             	mov    0x1c(%rax),%edx$/;"	l
ffff8000001071ac	kernel.asm	/^ffff8000001071ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071b0	kernel.asm	/^ffff8000001071b0:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff8000001071b3	kernel.asm	/^ffff8000001071b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071b7	kernel.asm	/^ffff8000001071b7:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001071bb	kernel.asm	/^ffff8000001071bb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001071be	kernel.asm	/^ffff8000001071be:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001071c5	kernel.asm	/^ffff8000001071c5:	80 ff ff $/;"	l
ffff8000001071c8	kernel.asm	/^ffff8000001071c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001071ca	kernel.asm	/^ffff8000001071ca:	90                   	nop$/;"	l
ffff8000001071cb	kernel.asm	/^ffff8000001071cb:	c9                   	leaveq $/;"	l
ffff8000001071cc	kernel.asm	/^ffff8000001071cc:	c3                   	retq   $/;"	l
ffff8000001071cd	kernel.asm	/^ffff8000001071cd <releasesleep>:$/;"	l
ffff8000001071cd	kernel.asm	/^ffff8000001071cd:	55                   	push   %rbp$/;"	l
ffff8000001071ce	kernel.asm	/^ffff8000001071ce:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001071d1	kernel.asm	/^ffff8000001071d1:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001071d5	kernel.asm	/^ffff8000001071d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001071d9	kernel.asm	/^ffff8000001071d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071dd	kernel.asm	/^ffff8000001071dd:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001071e1	kernel.asm	/^ffff8000001071e1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001071e4	kernel.asm	/^ffff8000001071e4:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001071eb	kernel.asm	/^ffff8000001071eb:	80 ff ff $/;"	l
ffff8000001071ee	kernel.asm	/^ffff8000001071ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001071f0	kernel.asm	/^ffff8000001071f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071f4	kernel.asm	/^ffff8000001071f4:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001071fa	kernel.asm	/^ffff8000001071fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001071fe	kernel.asm	/^ffff8000001071fe:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff800000107205	kernel.asm	/^ffff800000107205:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107209	kernel.asm	/^ffff800000107209:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010720c	kernel.asm	/^ffff80000010720c:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000107213	kernel.asm	/^ffff800000107213:	80 ff ff $/;"	l
ffff800000107216	kernel.asm	/^ffff800000107216:	ff d0                	callq  *%rax$/;"	l
ffff800000107218	kernel.asm	/^ffff800000107218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010721c	kernel.asm	/^ffff80000010721c:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107220	kernel.asm	/^ffff800000107220:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107223	kernel.asm	/^ffff800000107223:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010722a	kernel.asm	/^ffff80000010722a:	80 ff ff $/;"	l
ffff80000010722d	kernel.asm	/^ffff80000010722d:	ff d0                	callq  *%rax$/;"	l
ffff80000010722f	kernel.asm	/^ffff80000010722f:	90                   	nop$/;"	l
ffff800000107230	kernel.asm	/^ffff800000107230:	c9                   	leaveq $/;"	l
ffff800000107231	kernel.asm	/^ffff800000107231:	c3                   	retq   $/;"	l
ffff800000107232	kernel.asm	/^ffff800000107232 <holdingsleep>:$/;"	l
ffff800000107232	kernel.asm	/^ffff800000107232:	55                   	push   %rbp$/;"	l
ffff800000107233	kernel.asm	/^ffff800000107233:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107236	kernel.asm	/^ffff800000107236:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010723a	kernel.asm	/^ffff80000010723a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010723e	kernel.asm	/^ffff80000010723e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107242	kernel.asm	/^ffff800000107242:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107246	kernel.asm	/^ffff800000107246:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107249	kernel.asm	/^ffff800000107249:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000107250	kernel.asm	/^ffff800000107250:	80 ff ff $/;"	l
ffff800000107253	kernel.asm	/^ffff800000107253:	ff d0                	callq  *%rax$/;"	l
ffff800000107255	kernel.asm	/^ffff800000107255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107259	kernel.asm	/^ffff800000107259:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010725b	kernel.asm	/^ffff80000010725b:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010725e	kernel.asm	/^ffff80000010725e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107262	kernel.asm	/^ffff800000107262:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107266	kernel.asm	/^ffff800000107266:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107269	kernel.asm	/^ffff800000107269:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000107270	kernel.asm	/^ffff800000107270:	80 ff ff $/;"	l
ffff800000107273	kernel.asm	/^ffff800000107273:	ff d0                	callq  *%rax$/;"	l
ffff800000107275	kernel.asm	/^ffff800000107275:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107278	kernel.asm	/^ffff800000107278:	c9                   	leaveq $/;"	l
ffff800000107279	kernel.asm	/^ffff800000107279:	c3                   	retq   $/;"	l
ffff80000010727a	kernel.asm	/^ffff80000010727a <readeflags>:$/;"	l
ffff80000010727a	kernel.asm	/^ffff80000010727a:	55                   	push   %rbp$/;"	l
ffff80000010727b	kernel.asm	/^ffff80000010727b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010727e	kernel.asm	/^ffff80000010727e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107282	kernel.asm	/^ffff800000107282:	9c                   	pushfq $/;"	l
ffff800000107283	kernel.asm	/^ffff800000107283:	58                   	pop    %rax$/;"	l
ffff800000107284	kernel.asm	/^ffff800000107284:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107288	kernel.asm	/^ffff800000107288:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010728c	kernel.asm	/^ffff80000010728c:	c9                   	leaveq $/;"	l
ffff80000010728d	kernel.asm	/^ffff80000010728d:	c3                   	retq   $/;"	l
ffff80000010728e	kernel.asm	/^ffff80000010728e <cli>:$/;"	l
ffff80000010728e	kernel.asm	/^ffff80000010728e:	55                   	push   %rbp$/;"	l
ffff80000010728f	kernel.asm	/^ffff80000010728f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107292	kernel.asm	/^ffff800000107292:	fa                   	cli    $/;"	l
ffff800000107293	kernel.asm	/^ffff800000107293:	90                   	nop$/;"	l
ffff800000107294	kernel.asm	/^ffff800000107294:	5d                   	pop    %rbp$/;"	l
ffff800000107295	kernel.asm	/^ffff800000107295:	c3                   	retq   $/;"	l
ffff800000107296	kernel.asm	/^ffff800000107296 <sti>:$/;"	l
ffff800000107296	kernel.asm	/^ffff800000107296:	55                   	push   %rbp$/;"	l
ffff800000107297	kernel.asm	/^ffff800000107297:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010729a	kernel.asm	/^ffff80000010729a:	fb                   	sti    $/;"	l
ffff80000010729b	kernel.asm	/^ffff80000010729b:	90                   	nop$/;"	l
ffff80000010729c	kernel.asm	/^ffff80000010729c:	5d                   	pop    %rbp$/;"	l
ffff80000010729d	kernel.asm	/^ffff80000010729d:	c3                   	retq   $/;"	l
ffff80000010729e	kernel.asm	/^ffff80000010729e <xchg>:$/;"	l
ffff80000010729e	kernel.asm	/^ffff80000010729e:	55                   	push   %rbp$/;"	l
ffff80000010729f	kernel.asm	/^ffff80000010729f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001072a2	kernel.asm	/^ffff8000001072a2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001072a6	kernel.asm	/^ffff8000001072a6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001072aa	kernel.asm	/^ffff8000001072aa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001072ae	kernel.asm	/^ffff8000001072ae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001072b2	kernel.asm	/^ffff8000001072b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001072b6	kernel.asm	/^ffff8000001072b6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff8000001072ba	kernel.asm	/^ffff8000001072ba:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff8000001072bd	kernel.asm	/^ffff8000001072bd:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001072c0	kernel.asm	/^ffff8000001072c0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001072c3	kernel.asm	/^ffff8000001072c3:	c9                   	leaveq $/;"	l
ffff8000001072c4	kernel.asm	/^ffff8000001072c4:	c3                   	retq   $/;"	l
ffff8000001072c5	kernel.asm	/^ffff8000001072c5 <initlock>:$/;"	l
ffff8000001072c5	kernel.asm	/^ffff8000001072c5:	55                   	push   %rbp$/;"	l
ffff8000001072c6	kernel.asm	/^ffff8000001072c6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001072c9	kernel.asm	/^ffff8000001072c9:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001072cd	kernel.asm	/^ffff8000001072cd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001072d1	kernel.asm	/^ffff8000001072d1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001072d5	kernel.asm	/^ffff8000001072d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072d9	kernel.asm	/^ffff8000001072d9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001072dd	kernel.asm	/^ffff8000001072dd:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff8000001072e1	kernel.asm	/^ffff8000001072e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072e5	kernel.asm	/^ffff8000001072e5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001072eb	kernel.asm	/^ffff8000001072eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072ef	kernel.asm	/^ffff8000001072ef:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001072f6	kernel.asm	/^ffff8000001072f6:	00 $/;"	l
ffff8000001072f7	kernel.asm	/^ffff8000001072f7:	90                   	nop$/;"	l
ffff8000001072f8	kernel.asm	/^ffff8000001072f8:	c9                   	leaveq $/;"	l
ffff8000001072f9	kernel.asm	/^ffff8000001072f9:	c3                   	retq   $/;"	l
ffff8000001072fa	kernel.asm	/^ffff8000001072fa <acquire>:$/;"	l
ffff8000001072fa	kernel.asm	/^ffff8000001072fa:	55                   	push   %rbp$/;"	l
ffff8000001072fb	kernel.asm	/^ffff8000001072fb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001072fe	kernel.asm	/^ffff8000001072fe:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107302	kernel.asm	/^ffff800000107302:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107306	kernel.asm	/^ffff800000107306:	48 b8 0d 75 10 00 00 	movabs $0xffff80000010750d,%rax$/;"	l
ffff80000010730d	kernel.asm	/^ffff80000010730d:	80 ff ff $/;"	l
ffff800000107310	kernel.asm	/^ffff800000107310:	ff d0                	callq  *%rax$/;"	l
ffff800000107312	kernel.asm	/^ffff800000107312:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107316	kernel.asm	/^ffff800000107316:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107319	kernel.asm	/^ffff800000107319:	48 b8 d1 74 10 00 00 	movabs $0xffff8000001074d1,%rax$/;"	l
ffff800000107320	kernel.asm	/^ffff800000107320:	80 ff ff $/;"	l
ffff800000107323	kernel.asm	/^ffff800000107323:	ff d0                	callq  *%rax$/;"	l
ffff800000107325	kernel.asm	/^ffff800000107325:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107327	kernel.asm	/^ffff800000107327:	74 16                	je     ffff80000010733f <acquire+0x45>$/;"	l
ffff800000107329	kernel.asm	/^ffff800000107329:	48 bf 08 cf 10 00 00 	movabs $0xffff80000010cf08,%rdi$/;"	l
ffff800000107330	kernel.asm	/^ffff800000107330:	80 ff ff $/;"	l
ffff800000107333	kernel.asm	/^ffff800000107333:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010733a	kernel.asm	/^ffff80000010733a:	80 ff ff $/;"	l
ffff80000010733d	kernel.asm	/^ffff80000010733d:	ff d0                	callq  *%rax$/;"	l
ffff80000010733f	kernel.asm	/^ffff80000010733f:	90                   	nop$/;"	l
ffff800000107340	kernel.asm	/^ffff800000107340:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107344	kernel.asm	/^ffff800000107344:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000107349	kernel.asm	/^ffff800000107349:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010734c	kernel.asm	/^ffff80000010734c:	48 b8 9e 72 10 00 00 	movabs $0xffff80000010729e,%rax$/;"	l
ffff800000107353	kernel.asm	/^ffff800000107353:	80 ff ff $/;"	l
ffff800000107356	kernel.asm	/^ffff800000107356:	ff d0                	callq  *%rax$/;"	l
ffff800000107358	kernel.asm	/^ffff800000107358:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010735a	kernel.asm	/^ffff80000010735a:	75 e4                	jne    ffff800000107340 <acquire+0x46>$/;"	l
ffff80000010735c	kernel.asm	/^ffff80000010735c:	0f ae f0             	mfence $/;"	l
ffff80000010735f	kernel.asm	/^ffff80000010735f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107363	kernel.asm	/^ffff800000107363:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff80000010736a	kernel.asm	/^ffff80000010736a:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff80000010736e	kernel.asm	/^ffff80000010736e:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000107372	kernel.asm	/^ffff800000107372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107376	kernel.asm	/^ffff800000107376:	48 8d 50 18          	lea    0x18(%rax),%rdx$/;"	l
ffff80000010737a	kernel.asm	/^ffff80000010737a:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff80000010737e	kernel.asm	/^ffff80000010737e:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107381	kernel.asm	/^ffff800000107381:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107384	kernel.asm	/^ffff800000107384:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff80000010738b	kernel.asm	/^ffff80000010738b:	80 ff ff $/;"	l
ffff80000010738e	kernel.asm	/^ffff80000010738e:	ff d0                	callq  *%rax$/;"	l
ffff800000107390	kernel.asm	/^ffff800000107390:	90                   	nop$/;"	l
ffff800000107391	kernel.asm	/^ffff800000107391:	c9                   	leaveq $/;"	l
ffff800000107392	kernel.asm	/^ffff800000107392:	c3                   	retq   $/;"	l
ffff800000107393	kernel.asm	/^ffff800000107393 <release>:$/;"	l
ffff800000107393	kernel.asm	/^ffff800000107393:	55                   	push   %rbp$/;"	l
ffff800000107394	kernel.asm	/^ffff800000107394:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107397	kernel.asm	/^ffff800000107397:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010739b	kernel.asm	/^ffff80000010739b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010739f	kernel.asm	/^ffff80000010739f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073a3	kernel.asm	/^ffff8000001073a3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001073a6	kernel.asm	/^ffff8000001073a6:	48 b8 d1 74 10 00 00 	movabs $0xffff8000001074d1,%rax$/;"	l
ffff8000001073ad	kernel.asm	/^ffff8000001073ad:	80 ff ff $/;"	l
ffff8000001073b0	kernel.asm	/^ffff8000001073b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001073b2	kernel.asm	/^ffff8000001073b2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001073b4	kernel.asm	/^ffff8000001073b4:	75 16                	jne    ffff8000001073cc <release+0x39>$/;"	l
ffff8000001073b6	kernel.asm	/^ffff8000001073b6:	48 bf 10 cf 10 00 00 	movabs $0xffff80000010cf10,%rdi$/;"	l
ffff8000001073bd	kernel.asm	/^ffff8000001073bd:	80 ff ff $/;"	l
ffff8000001073c0	kernel.asm	/^ffff8000001073c0:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001073c7	kernel.asm	/^ffff8000001073c7:	80 ff ff $/;"	l
ffff8000001073ca	kernel.asm	/^ffff8000001073ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001073cc	kernel.asm	/^ffff8000001073cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073d0	kernel.asm	/^ffff8000001073d0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)$/;"	l
ffff8000001073d7	kernel.asm	/^ffff8000001073d7:	00 $/;"	l
ffff8000001073d8	kernel.asm	/^ffff8000001073d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073dc	kernel.asm	/^ffff8000001073dc:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001073e3	kernel.asm	/^ffff8000001073e3:	00 $/;"	l
ffff8000001073e4	kernel.asm	/^ffff8000001073e4:	0f ae f0             	mfence $/;"	l
ffff8000001073e7	kernel.asm	/^ffff8000001073e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073eb	kernel.asm	/^ffff8000001073eb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001073ef	kernel.asm	/^ffff8000001073ef:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001073f5	kernel.asm	/^ffff8000001073f5:	48 b8 87 75 10 00 00 	movabs $0xffff800000107587,%rax$/;"	l
ffff8000001073fc	kernel.asm	/^ffff8000001073fc:	80 ff ff $/;"	l
ffff8000001073ff	kernel.asm	/^ffff8000001073ff:	ff d0                	callq  *%rax$/;"	l
ffff800000107401	kernel.asm	/^ffff800000107401:	90                   	nop$/;"	l
ffff800000107402	kernel.asm	/^ffff800000107402:	c9                   	leaveq $/;"	l
ffff800000107403	kernel.asm	/^ffff800000107403:	c3                   	retq   $/;"	l
ffff800000107404	kernel.asm	/^ffff800000107404 <getcallerpcs>:$/;"	l
ffff800000107404	kernel.asm	/^ffff800000107404:	55                   	push   %rbp$/;"	l
ffff800000107405	kernel.asm	/^ffff800000107405:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107408	kernel.asm	/^ffff800000107408:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010740c	kernel.asm	/^ffff80000010740c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107410	kernel.asm	/^ffff800000107410:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107414	kernel.asm	/^ffff800000107414:	48 89 e8             	mov    %rbp,%rax$/;"	l
ffff800000107417	kernel.asm	/^ffff800000107417:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010741b	kernel.asm	/^ffff80000010741b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff80000010741f	kernel.asm	/^ffff80000010741f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107423	kernel.asm	/^ffff800000107423:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107426	kernel.asm	/^ffff800000107426:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107429	kernel.asm	/^ffff800000107429:	48 b8 38 74 10 00 00 	movabs $0xffff800000107438,%rax$/;"	l
ffff800000107430	kernel.asm	/^ffff800000107430:	80 ff ff $/;"	l
ffff800000107433	kernel.asm	/^ffff800000107433:	ff d0                	callq  *%rax$/;"	l
ffff800000107435	kernel.asm	/^ffff800000107435:	90                   	nop$/;"	l
ffff800000107436	kernel.asm	/^ffff800000107436:	c9                   	leaveq $/;"	l
ffff800000107437	kernel.asm	/^ffff800000107437:	c3                   	retq   $/;"	l
ffff800000107438	kernel.asm	/^ffff800000107438 <getstackpcs>:$/;"	l
ffff800000107438	kernel.asm	/^ffff800000107438:	55                   	push   %rbp$/;"	l
ffff800000107439	kernel.asm	/^ffff800000107439:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010743c	kernel.asm	/^ffff80000010743c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107440	kernel.asm	/^ffff800000107440:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107444	kernel.asm	/^ffff800000107444:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107448	kernel.asm	/^ffff800000107448:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010744f	kernel.asm	/^ffff80000010744f:	eb 50                	jmp    ffff8000001074a1 <getstackpcs+0x69>$/;"	l
ffff800000107451	kernel.asm	/^ffff800000107451:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000107456	kernel.asm	/^ffff800000107456:	74 70                	je     ffff8000001074c8 <getstackpcs+0x90>$/;"	l
ffff800000107458	kernel.asm	/^ffff800000107458:	48 b8 ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rax$/;"	l
ffff80000010745f	kernel.asm	/^ffff80000010745f:	7f ff ff $/;"	l
ffff800000107462	kernel.asm	/^ffff800000107462:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107466	kernel.asm	/^ffff800000107466:	76 60                	jbe    ffff8000001074c8 <getstackpcs+0x90>$/;"	l
ffff800000107468	kernel.asm	/^ffff800000107468:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010746d	kernel.asm	/^ffff80000010746d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107471	kernel.asm	/^ffff800000107471:	74 55                	je     ffff8000001074c8 <getstackpcs+0x90>$/;"	l
ffff800000107473	kernel.asm	/^ffff800000107473:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107476	kernel.asm	/^ffff800000107476:	48 98                	cltq   $/;"	l
ffff800000107478	kernel.asm	/^ffff800000107478:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010747f	kernel.asm	/^ffff80000010747f:	00 $/;"	l
ffff800000107480	kernel.asm	/^ffff800000107480:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107484	kernel.asm	/^ffff800000107484:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000107487	kernel.asm	/^ffff800000107487:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010748b	kernel.asm	/^ffff80000010748b:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010748f	kernel.asm	/^ffff80000010748f:	48 89 02             	mov    %rax,(%rdx)$/;"	l
ffff800000107492	kernel.asm	/^ffff800000107492:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107496	kernel.asm	/^ffff800000107496:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107499	kernel.asm	/^ffff800000107499:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010749d	kernel.asm	/^ffff80000010749d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001074a1	kernel.asm	/^ffff8000001074a1:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff8000001074a5	kernel.asm	/^ffff8000001074a5:	7e aa                	jle    ffff800000107451 <getstackpcs+0x19>$/;"	l
ffff8000001074a7	kernel.asm	/^ffff8000001074a7:	eb 1f                	jmp    ffff8000001074c8 <getstackpcs+0x90>$/;"	l
ffff8000001074a9	kernel.asm	/^ffff8000001074a9:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001074ac	kernel.asm	/^ffff8000001074ac:	48 98                	cltq   $/;"	l
ffff8000001074ae	kernel.asm	/^ffff8000001074ae:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001074b5	kernel.asm	/^ffff8000001074b5:	00 $/;"	l
ffff8000001074b6	kernel.asm	/^ffff8000001074b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001074ba	kernel.asm	/^ffff8000001074ba:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001074bd	kernel.asm	/^ffff8000001074bd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff8000001074c4	kernel.asm	/^ffff8000001074c4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001074c8	kernel.asm	/^ffff8000001074c8:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff8000001074cc	kernel.asm	/^ffff8000001074cc:	7e db                	jle    ffff8000001074a9 <getstackpcs+0x71>$/;"	l
ffff8000001074ce	kernel.asm	/^ffff8000001074ce:	90                   	nop$/;"	l
ffff8000001074cf	kernel.asm	/^ffff8000001074cf:	c9                   	leaveq $/;"	l
ffff8000001074d0	kernel.asm	/^ffff8000001074d0:	c3                   	retq   $/;"	l
ffff8000001074d1	kernel.asm	/^ffff8000001074d1 <holding>:$/;"	l
ffff8000001074d1	kernel.asm	/^ffff8000001074d1:	55                   	push   %rbp$/;"	l
ffff8000001074d2	kernel.asm	/^ffff8000001074d2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001074d5	kernel.asm	/^ffff8000001074d5:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001074d9	kernel.asm	/^ffff8000001074d9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001074dd	kernel.asm	/^ffff8000001074dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074e1	kernel.asm	/^ffff8000001074e1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001074e3	kernel.asm	/^ffff8000001074e3:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001074e5	kernel.asm	/^ffff8000001074e5:	74 1f                	je     ffff800000107506 <holding+0x35>$/;"	l
ffff8000001074e7	kernel.asm	/^ffff8000001074e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074eb	kernel.asm	/^ffff8000001074eb:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff8000001074ef	kernel.asm	/^ffff8000001074ef:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001074f6	kernel.asm	/^ffff8000001074f6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001074fa	kernel.asm	/^ffff8000001074fa:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001074fd	kernel.asm	/^ffff8000001074fd:	75 07                	jne    ffff800000107506 <holding+0x35>$/;"	l
ffff8000001074ff	kernel.asm	/^ffff8000001074ff:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff800000107504	kernel.asm	/^ffff800000107504:	eb 05                	jmp    ffff80000010750b <holding+0x3a>$/;"	l
ffff800000107506	kernel.asm	/^ffff800000107506:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010750b	kernel.asm	/^ffff80000010750b:	c9                   	leaveq $/;"	l
ffff80000010750c	kernel.asm	/^ffff80000010750c:	c3                   	retq   $/;"	l
ffff80000010750d	kernel.asm	/^ffff80000010750d <pushcli>:$/;"	l
ffff80000010750d	kernel.asm	/^ffff80000010750d:	55                   	push   %rbp$/;"	l
ffff80000010750e	kernel.asm	/^ffff80000010750e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107511	kernel.asm	/^ffff800000107511:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107515	kernel.asm	/^ffff800000107515:	48 b8 7a 72 10 00 00 	movabs $0xffff80000010727a,%rax$/;"	l
ffff80000010751c	kernel.asm	/^ffff80000010751c:	80 ff ff $/;"	l
ffff80000010751f	kernel.asm	/^ffff80000010751f:	ff d0                	callq  *%rax$/;"	l
ffff800000107521	kernel.asm	/^ffff800000107521:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107524	kernel.asm	/^ffff800000107524:	48 b8 8e 72 10 00 00 	movabs $0xffff80000010728e,%rax$/;"	l
ffff80000010752b	kernel.asm	/^ffff80000010752b:	80 ff ff $/;"	l
ffff80000010752e	kernel.asm	/^ffff80000010752e:	ff d0                	callq  *%rax$/;"	l
ffff800000107530	kernel.asm	/^ffff800000107530:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107537	kernel.asm	/^ffff800000107537:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010753b	kernel.asm	/^ffff80000010753b:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff800000107541	kernel.asm	/^ffff800000107541:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107543	kernel.asm	/^ffff800000107543:	75 1a                	jne    ffff80000010755f <pushcli+0x52>$/;"	l
ffff800000107545	kernel.asm	/^ffff800000107545:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff80000010754c	kernel.asm	/^ffff80000010754c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107550	kernel.asm	/^ffff800000107550:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107553	kernel.asm	/^ffff800000107553:	81 e2 00 02 00 00    	and    $0x200,%edx$/;"	l
ffff800000107559	kernel.asm	/^ffff800000107559:	89 90 e0 00 00 00    	mov    %edx,0xe0(%rax)$/;"	l
ffff80000010755f	kernel.asm	/^ffff80000010755f:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107566	kernel.asm	/^ffff800000107566:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010756a	kernel.asm	/^ffff80000010756a:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000107571	kernel.asm	/^ffff800000107571:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000107575	kernel.asm	/^ffff800000107575:	8b 92 dc 00 00 00    	mov    0xdc(%rdx),%edx$/;"	l
ffff80000010757b	kernel.asm	/^ffff80000010757b:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff80000010757e	kernel.asm	/^ffff80000010757e:	89 90 dc 00 00 00    	mov    %edx,0xdc(%rax)$/;"	l
ffff800000107584	kernel.asm	/^ffff800000107584:	90                   	nop$/;"	l
ffff800000107585	kernel.asm	/^ffff800000107585:	c9                   	leaveq $/;"	l
ffff800000107586	kernel.asm	/^ffff800000107586:	c3                   	retq   $/;"	l
ffff800000107587	kernel.asm	/^ffff800000107587 <popcli>:$/;"	l
ffff800000107587	kernel.asm	/^ffff800000107587:	55                   	push   %rbp$/;"	l
ffff800000107588	kernel.asm	/^ffff800000107588:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010758b	kernel.asm	/^ffff80000010758b:	48 b8 7a 72 10 00 00 	movabs $0xffff80000010727a,%rax$/;"	l
ffff800000107592	kernel.asm	/^ffff800000107592:	80 ff ff $/;"	l
ffff800000107595	kernel.asm	/^ffff800000107595:	ff d0                	callq  *%rax$/;"	l
ffff800000107597	kernel.asm	/^ffff800000107597:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff80000010759c	kernel.asm	/^ffff80000010759c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010759f	kernel.asm	/^ffff80000010759f:	74 16                	je     ffff8000001075b7 <popcli+0x30>$/;"	l
ffff8000001075a1	kernel.asm	/^ffff8000001075a1:	48 bf 18 cf 10 00 00 	movabs $0xffff80000010cf18,%rdi$/;"	l
ffff8000001075a8	kernel.asm	/^ffff8000001075a8:	80 ff ff $/;"	l
ffff8000001075ab	kernel.asm	/^ffff8000001075ab:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001075b2	kernel.asm	/^ffff8000001075b2:	80 ff ff $/;"	l
ffff8000001075b5	kernel.asm	/^ffff8000001075b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001075b7	kernel.asm	/^ffff8000001075b7:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001075be	kernel.asm	/^ffff8000001075be:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001075c2	kernel.asm	/^ffff8000001075c2:	8b 90 dc 00 00 00    	mov    0xdc(%rax),%edx$/;"	l
ffff8000001075c8	kernel.asm	/^ffff8000001075c8:	83 ea 01             	sub    $0x1,%edx$/;"	l
ffff8000001075cb	kernel.asm	/^ffff8000001075cb:	89 90 dc 00 00 00    	mov    %edx,0xdc(%rax)$/;"	l
ffff8000001075d1	kernel.asm	/^ffff8000001075d1:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff8000001075d7	kernel.asm	/^ffff8000001075d7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001075d9	kernel.asm	/^ffff8000001075d9:	79 16                	jns    ffff8000001075f1 <popcli+0x6a>$/;"	l
ffff8000001075db	kernel.asm	/^ffff8000001075db:	48 bf 2f cf 10 00 00 	movabs $0xffff80000010cf2f,%rdi$/;"	l
ffff8000001075e2	kernel.asm	/^ffff8000001075e2:	80 ff ff $/;"	l
ffff8000001075e5	kernel.asm	/^ffff8000001075e5:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001075ec	kernel.asm	/^ffff8000001075ec:	80 ff ff $/;"	l
ffff8000001075ef	kernel.asm	/^ffff8000001075ef:	ff d0                	callq  *%rax$/;"	l
ffff8000001075f1	kernel.asm	/^ffff8000001075f1:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001075f8	kernel.asm	/^ffff8000001075f8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001075fc	kernel.asm	/^ffff8000001075fc:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff800000107602	kernel.asm	/^ffff800000107602:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107604	kernel.asm	/^ffff800000107604:	75 21                	jne    ffff800000107627 <popcli+0xa0>$/;"	l
ffff800000107606	kernel.asm	/^ffff800000107606:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff80000010760d	kernel.asm	/^ffff80000010760d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107611	kernel.asm	/^ffff800000107611:	8b 80 e0 00 00 00    	mov    0xe0(%rax),%eax$/;"	l
ffff800000107617	kernel.asm	/^ffff800000107617:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107619	kernel.asm	/^ffff800000107619:	74 0c                	je     ffff800000107627 <popcli+0xa0>$/;"	l
ffff80000010761b	kernel.asm	/^ffff80000010761b:	48 b8 96 72 10 00 00 	movabs $0xffff800000107296,%rax$/;"	l
ffff800000107622	kernel.asm	/^ffff800000107622:	80 ff ff $/;"	l
ffff800000107625	kernel.asm	/^ffff800000107625:	ff d0                	callq  *%rax$/;"	l
ffff800000107627	kernel.asm	/^ffff800000107627:	90                   	nop$/;"	l
ffff800000107628	kernel.asm	/^ffff800000107628:	5d                   	pop    %rbp$/;"	l
ffff800000107629	kernel.asm	/^ffff800000107629:	c3                   	retq   $/;"	l
ffff80000010762a	kernel.asm	/^ffff80000010762a <stosb>:$/;"	l
ffff80000010762a	kernel.asm	/^ffff80000010762a:	55                   	push   %rbp$/;"	l
ffff80000010762b	kernel.asm	/^ffff80000010762b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010762e	kernel.asm	/^ffff80000010762e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107632	kernel.asm	/^ffff800000107632:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107636	kernel.asm	/^ffff800000107636:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000107639	kernel.asm	/^ffff800000107639:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010763c	kernel.asm	/^ffff80000010763c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107640	kernel.asm	/^ffff800000107640:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000107643	kernel.asm	/^ffff800000107643:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107646	kernel.asm	/^ffff800000107646:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107649	kernel.asm	/^ffff800000107649:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff80000010764c	kernel.asm	/^ffff80000010764c:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010764e	kernel.asm	/^ffff80000010764e:	fc                   	cld    $/;"	l
ffff80000010764f	kernel.asm	/^ffff80000010764f:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff800000107651	kernel.asm	/^ffff800000107651:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000107653	kernel.asm	/^ffff800000107653:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff800000107656	kernel.asm	/^ffff800000107656:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff80000010765a	kernel.asm	/^ffff80000010765a:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010765d	kernel.asm	/^ffff80000010765d:	90                   	nop$/;"	l
ffff80000010765e	kernel.asm	/^ffff80000010765e:	c9                   	leaveq $/;"	l
ffff80000010765f	kernel.asm	/^ffff80000010765f:	c3                   	retq   $/;"	l
ffff800000107660	kernel.asm	/^ffff800000107660 <stosl>:$/;"	l
ffff800000107660	kernel.asm	/^ffff800000107660:	55                   	push   %rbp$/;"	l
ffff800000107661	kernel.asm	/^ffff800000107661:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107664	kernel.asm	/^ffff800000107664:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107668	kernel.asm	/^ffff800000107668:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010766c	kernel.asm	/^ffff80000010766c:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010766f	kernel.asm	/^ffff80000010766f:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107672	kernel.asm	/^ffff800000107672:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107676	kernel.asm	/^ffff800000107676:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000107679	kernel.asm	/^ffff800000107679:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010767c	kernel.asm	/^ffff80000010767c:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010767f	kernel.asm	/^ffff80000010767f:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff800000107682	kernel.asm	/^ffff800000107682:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107684	kernel.asm	/^ffff800000107684:	fc                   	cld    $/;"	l
ffff800000107685	kernel.asm	/^ffff800000107685:	f3 ab                	rep stos %eax,%es:(%rdi)$/;"	l
ffff800000107687	kernel.asm	/^ffff800000107687:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000107689	kernel.asm	/^ffff800000107689:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010768c	kernel.asm	/^ffff80000010768c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff800000107690	kernel.asm	/^ffff800000107690:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107693	kernel.asm	/^ffff800000107693:	90                   	nop$/;"	l
ffff800000107694	kernel.asm	/^ffff800000107694:	c9                   	leaveq $/;"	l
ffff800000107695	kernel.asm	/^ffff800000107695:	c3                   	retq   $/;"	l
ffff800000107696	kernel.asm	/^ffff800000107696 <memset>:$/;"	l
ffff800000107696	kernel.asm	/^ffff800000107696:	55                   	push   %rbp$/;"	l
ffff800000107697	kernel.asm	/^ffff800000107697:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010769a	kernel.asm	/^ffff80000010769a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010769e	kernel.asm	/^ffff80000010769e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001076a2	kernel.asm	/^ffff8000001076a2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff8000001076a5	kernel.asm	/^ffff8000001076a5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff8000001076a8	kernel.asm	/^ffff8000001076a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076ac	kernel.asm	/^ffff8000001076ac:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff8000001076af	kernel.asm	/^ffff8000001076af:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001076b2	kernel.asm	/^ffff8000001076b2:	75 4f                	jne    ffff800000107703 <memset+0x6d>$/;"	l
ffff8000001076b4	kernel.asm	/^ffff8000001076b4:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff8000001076b7	kernel.asm	/^ffff8000001076b7:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff8000001076ba	kernel.asm	/^ffff8000001076ba:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001076bc	kernel.asm	/^ffff8000001076bc:	75 45                	jne    ffff800000107703 <memset+0x6d>$/;"	l
ffff8000001076be	kernel.asm	/^ffff8000001076be:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)$/;"	l
ffff8000001076c5	kernel.asm	/^ffff8000001076c5:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff8000001076c8	kernel.asm	/^ffff8000001076c8:	c1 e8 02             	shr    $0x2,%eax$/;"	l
ffff8000001076cb	kernel.asm	/^ffff8000001076cb:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001076cd	kernel.asm	/^ffff8000001076cd:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076d0	kernel.asm	/^ffff8000001076d0:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001076d3	kernel.asm	/^ffff8000001076d3:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001076d5	kernel.asm	/^ffff8000001076d5:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076d8	kernel.asm	/^ffff8000001076d8:	c1 e0 10             	shl    $0x10,%eax$/;"	l
ffff8000001076db	kernel.asm	/^ffff8000001076db:	09 c2                	or     %eax,%edx$/;"	l
ffff8000001076dd	kernel.asm	/^ffff8000001076dd:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001076e0	kernel.asm	/^ffff8000001076e0:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001076e3	kernel.asm	/^ffff8000001076e3:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001076e5	kernel.asm	/^ffff8000001076e5:	0b 45 f4             	or     -0xc(%rbp),%eax$/;"	l
ffff8000001076e8	kernel.asm	/^ffff8000001076e8:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001076ea	kernel.asm	/^ffff8000001076ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076ee	kernel.asm	/^ffff8000001076ee:	89 f2                	mov    %esi,%edx$/;"	l
ffff8000001076f0	kernel.asm	/^ffff8000001076f0:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001076f2	kernel.asm	/^ffff8000001076f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001076f5	kernel.asm	/^ffff8000001076f5:	48 b8 60 76 10 00 00 	movabs $0xffff800000107660,%rax$/;"	l
ffff8000001076fc	kernel.asm	/^ffff8000001076fc:	80 ff ff $/;"	l
ffff8000001076ff	kernel.asm	/^ffff8000001076ff:	ff d0                	callq  *%rax$/;"	l
ffff800000107701	kernel.asm	/^ffff800000107701:	eb 1b                	jmp    ffff80000010771e <memset+0x88>$/;"	l
ffff800000107703	kernel.asm	/^ffff800000107703:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000107706	kernel.asm	/^ffff800000107706:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff800000107709	kernel.asm	/^ffff800000107709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010770d	kernel.asm	/^ffff80000010770d:	89 ce                	mov    %ecx,%esi$/;"	l
ffff80000010770f	kernel.asm	/^ffff80000010770f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107712	kernel.asm	/^ffff800000107712:	48 b8 2a 76 10 00 00 	movabs $0xffff80000010762a,%rax$/;"	l
ffff800000107719	kernel.asm	/^ffff800000107719:	80 ff ff $/;"	l
ffff80000010771c	kernel.asm	/^ffff80000010771c:	ff d0                	callq  *%rax$/;"	l
ffff80000010771e	kernel.asm	/^ffff80000010771e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107722	kernel.asm	/^ffff800000107722:	c9                   	leaveq $/;"	l
ffff800000107723	kernel.asm	/^ffff800000107723:	c3                   	retq   $/;"	l
ffff800000107724	kernel.asm	/^ffff800000107724 <memcmp>:$/;"	l
ffff800000107724	kernel.asm	/^ffff800000107724:	55                   	push   %rbp$/;"	l
ffff800000107725	kernel.asm	/^ffff800000107725:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107728	kernel.asm	/^ffff800000107728:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010772c	kernel.asm	/^ffff80000010772c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107730	kernel.asm	/^ffff800000107730:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107734	kernel.asm	/^ffff800000107734:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107737	kernel.asm	/^ffff800000107737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010773b	kernel.asm	/^ffff80000010773b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010773f	kernel.asm	/^ffff80000010773f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107743	kernel.asm	/^ffff800000107743:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107747	kernel.asm	/^ffff800000107747:	eb 36                	jmp    ffff80000010777f <memcmp+0x5b>$/;"	l
ffff800000107749	kernel.asm	/^ffff800000107749:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010774d	kernel.asm	/^ffff80000010774d:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000107750	kernel.asm	/^ffff800000107750:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107754	kernel.asm	/^ffff800000107754:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107757	kernel.asm	/^ffff800000107757:	38 c2                	cmp    %al,%dl$/;"	l
ffff800000107759	kernel.asm	/^ffff800000107759:	74 1a                	je     ffff800000107775 <memcmp+0x51>$/;"	l
ffff80000010775b	kernel.asm	/^ffff80000010775b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010775f	kernel.asm	/^ffff80000010775f:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107762	kernel.asm	/^ffff800000107762:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000107765	kernel.asm	/^ffff800000107765:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107769	kernel.asm	/^ffff800000107769:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010776c	kernel.asm	/^ffff80000010776c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010776f	kernel.asm	/^ffff80000010776f:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000107771	kernel.asm	/^ffff800000107771:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000107773	kernel.asm	/^ffff800000107773:	eb 1c                	jmp    ffff800000107791 <memcmp+0x6d>$/;"	l
ffff800000107775	kernel.asm	/^ffff800000107775:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff80000010777a	kernel.asm	/^ffff80000010777a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff80000010777f	kernel.asm	/^ffff80000010777f:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107782	kernel.asm	/^ffff800000107782:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107785	kernel.asm	/^ffff800000107785:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107788	kernel.asm	/^ffff800000107788:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010778a	kernel.asm	/^ffff80000010778a:	75 bd                	jne    ffff800000107749 <memcmp+0x25>$/;"	l
ffff80000010778c	kernel.asm	/^ffff80000010778c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107791	kernel.asm	/^ffff800000107791:	c9                   	leaveq $/;"	l
ffff800000107792	kernel.asm	/^ffff800000107792:	c3                   	retq   $/;"	l
ffff800000107793	kernel.asm	/^ffff800000107793 <memmove>:$/;"	l
ffff800000107793	kernel.asm	/^ffff800000107793:	55                   	push   %rbp$/;"	l
ffff800000107794	kernel.asm	/^ffff800000107794:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107797	kernel.asm	/^ffff800000107797:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010779b	kernel.asm	/^ffff80000010779b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010779f	kernel.asm	/^ffff80000010779f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001077a3	kernel.asm	/^ffff8000001077a3:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001077a6	kernel.asm	/^ffff8000001077a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001077aa	kernel.asm	/^ffff8000001077aa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001077ae	kernel.asm	/^ffff8000001077ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001077b2	kernel.asm	/^ffff8000001077b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001077b6	kernel.asm	/^ffff8000001077b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001077ba	kernel.asm	/^ffff8000001077ba:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff8000001077be	kernel.asm	/^ffff8000001077be:	73 63                	jae    ffff800000107823 <memmove+0x90>$/;"	l
ffff8000001077c0	kernel.asm	/^ffff8000001077c0:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff8000001077c3	kernel.asm	/^ffff8000001077c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001077c7	kernel.asm	/^ffff8000001077c7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001077ca	kernel.asm	/^ffff8000001077ca:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff8000001077ce	kernel.asm	/^ffff8000001077ce:	76 53                	jbe    ffff800000107823 <memmove+0x90>$/;"	l
ffff8000001077d0	kernel.asm	/^ffff8000001077d0:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077d3	kernel.asm	/^ffff8000001077d3:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff8000001077d7	kernel.asm	/^ffff8000001077d7:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077da	kernel.asm	/^ffff8000001077da:	48 01 45 f0          	add    %rax,-0x10(%rbp)$/;"	l
ffff8000001077de	kernel.asm	/^ffff8000001077de:	eb 17                	jmp    ffff8000001077f7 <memmove+0x64>$/;"	l
ffff8000001077e0	kernel.asm	/^ffff8000001077e0:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)$/;"	l
ffff8000001077e5	kernel.asm	/^ffff8000001077e5:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)$/;"	l
ffff8000001077ea	kernel.asm	/^ffff8000001077ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001077ee	kernel.asm	/^ffff8000001077ee:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff8000001077f1	kernel.asm	/^ffff8000001077f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001077f5	kernel.asm	/^ffff8000001077f5:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001077f7	kernel.asm	/^ffff8000001077f7:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001077fa	kernel.asm	/^ffff8000001077fa:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001077fd	kernel.asm	/^ffff8000001077fd:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107800	kernel.asm	/^ffff800000107800:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107802	kernel.asm	/^ffff800000107802:	75 dc                	jne    ffff8000001077e0 <memmove+0x4d>$/;"	l
ffff800000107804	kernel.asm	/^ffff800000107804:	eb 2a                	jmp    ffff800000107830 <memmove+0x9d>$/;"	l
ffff800000107806	kernel.asm	/^ffff800000107806:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010780a	kernel.asm	/^ffff80000010780a:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff80000010780e	kernel.asm	/^ffff80000010780e:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)$/;"	l
ffff800000107812	kernel.asm	/^ffff800000107812:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107816	kernel.asm	/^ffff800000107816:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff80000010781a	kernel.asm	/^ffff80000010781a:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)$/;"	l
ffff80000010781e	kernel.asm	/^ffff80000010781e:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107821	kernel.asm	/^ffff800000107821:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000107823	kernel.asm	/^ffff800000107823:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107826	kernel.asm	/^ffff800000107826:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107829	kernel.asm	/^ffff800000107829:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010782c	kernel.asm	/^ffff80000010782c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010782e	kernel.asm	/^ffff80000010782e:	75 d6                	jne    ffff800000107806 <memmove+0x73>$/;"	l
ffff800000107830	kernel.asm	/^ffff800000107830:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107834	kernel.asm	/^ffff800000107834:	c9                   	leaveq $/;"	l
ffff800000107835	kernel.asm	/^ffff800000107835:	c3                   	retq   $/;"	l
ffff800000107836	kernel.asm	/^ffff800000107836 <memcpy>:$/;"	l
ffff800000107836	kernel.asm	/^ffff800000107836:	55                   	push   %rbp$/;"	l
ffff800000107837	kernel.asm	/^ffff800000107837:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010783a	kernel.asm	/^ffff80000010783a:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010783e	kernel.asm	/^ffff80000010783e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107842	kernel.asm	/^ffff800000107842:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107846	kernel.asm	/^ffff800000107846:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff800000107849	kernel.asm	/^ffff800000107849:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010784c	kernel.asm	/^ffff80000010784c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000107850	kernel.asm	/^ffff800000107850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107854	kernel.asm	/^ffff800000107854:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107857	kernel.asm	/^ffff800000107857:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010785a	kernel.asm	/^ffff80000010785a:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff800000107861	kernel.asm	/^ffff800000107861:	80 ff ff $/;"	l
ffff800000107864	kernel.asm	/^ffff800000107864:	ff d0                	callq  *%rax$/;"	l
ffff800000107866	kernel.asm	/^ffff800000107866:	c9                   	leaveq $/;"	l
ffff800000107867	kernel.asm	/^ffff800000107867:	c3                   	retq   $/;"	l
ffff800000107868	kernel.asm	/^ffff800000107868 <strncmp>:$/;"	l
ffff800000107868	kernel.asm	/^ffff800000107868:	55                   	push   %rbp$/;"	l
ffff800000107869	kernel.asm	/^ffff800000107869:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010786c	kernel.asm	/^ffff80000010786c:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107870	kernel.asm	/^ffff800000107870:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107874	kernel.asm	/^ffff800000107874:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107878	kernel.asm	/^ffff800000107878:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff80000010787b	kernel.asm	/^ffff80000010787b:	eb 0e                	jmp    ffff80000010788b <strncmp+0x23>$/;"	l
ffff80000010787d	kernel.asm	/^ffff80000010787d:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)$/;"	l
ffff800000107881	kernel.asm	/^ffff800000107881:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107886	kernel.asm	/^ffff800000107886:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff80000010788b	kernel.asm	/^ffff80000010788b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff80000010788f	kernel.asm	/^ffff80000010788f:	74 1d                	je     ffff8000001078ae <strncmp+0x46>$/;"	l
ffff800000107891	kernel.asm	/^ffff800000107891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107895	kernel.asm	/^ffff800000107895:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107898	kernel.asm	/^ffff800000107898:	84 c0                	test   %al,%al$/;"	l
ffff80000010789a	kernel.asm	/^ffff80000010789a:	74 12                	je     ffff8000001078ae <strncmp+0x46>$/;"	l
ffff80000010789c	kernel.asm	/^ffff80000010789c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001078a0	kernel.asm	/^ffff8000001078a0:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff8000001078a3	kernel.asm	/^ffff8000001078a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001078a7	kernel.asm	/^ffff8000001078a7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001078aa	kernel.asm	/^ffff8000001078aa:	38 c2                	cmp    %al,%dl$/;"	l
ffff8000001078ac	kernel.asm	/^ffff8000001078ac:	74 cf                	je     ffff80000010787d <strncmp+0x15>$/;"	l
ffff8000001078ae	kernel.asm	/^ffff8000001078ae:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001078b2	kernel.asm	/^ffff8000001078b2:	75 07                	jne    ffff8000001078bb <strncmp+0x53>$/;"	l
ffff8000001078b4	kernel.asm	/^ffff8000001078b4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001078b9	kernel.asm	/^ffff8000001078b9:	eb 18                	jmp    ffff8000001078d3 <strncmp+0x6b>$/;"	l
ffff8000001078bb	kernel.asm	/^ffff8000001078bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001078bf	kernel.asm	/^ffff8000001078bf:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001078c2	kernel.asm	/^ffff8000001078c2:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff8000001078c5	kernel.asm	/^ffff8000001078c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001078c9	kernel.asm	/^ffff8000001078c9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001078cc	kernel.asm	/^ffff8000001078cc:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001078cf	kernel.asm	/^ffff8000001078cf:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001078d1	kernel.asm	/^ffff8000001078d1:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001078d3	kernel.asm	/^ffff8000001078d3:	c9                   	leaveq $/;"	l
ffff8000001078d4	kernel.asm	/^ffff8000001078d4:	c3                   	retq   $/;"	l
ffff8000001078d5	kernel.asm	/^ffff8000001078d5 <strncpy>:$/;"	l
ffff8000001078d5	kernel.asm	/^ffff8000001078d5:	55                   	push   %rbp$/;"	l
ffff8000001078d6	kernel.asm	/^ffff8000001078d6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001078d9	kernel.asm	/^ffff8000001078d9:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff8000001078dd	kernel.asm	/^ffff8000001078dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001078e1	kernel.asm	/^ffff8000001078e1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001078e5	kernel.asm	/^ffff8000001078e5:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001078e8	kernel.asm	/^ffff8000001078e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001078ec	kernel.asm	/^ffff8000001078ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001078f0	kernel.asm	/^ffff8000001078f0:	90                   	nop$/;"	l
ffff8000001078f1	kernel.asm	/^ffff8000001078f1:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001078f4	kernel.asm	/^ffff8000001078f4:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001078f7	kernel.asm	/^ffff8000001078f7:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001078fa	kernel.asm	/^ffff8000001078fa:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001078fc	kernel.asm	/^ffff8000001078fc:	7e 35                	jle    ffff800000107933 <strncpy+0x5e>$/;"	l
ffff8000001078fe	kernel.asm	/^ffff8000001078fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107902	kernel.asm	/^ffff800000107902:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000107906	kernel.asm	/^ffff800000107906:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff80000010790a	kernel.asm	/^ffff80000010790a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff80000010790e	kernel.asm	/^ffff80000010790e:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff800000107912	kernel.asm	/^ffff800000107912:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff800000107916	kernel.asm	/^ffff800000107916:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107919	kernel.asm	/^ffff800000107919:	88 10                	mov    %dl,(%rax)$/;"	l
ffff80000010791b	kernel.asm	/^ffff80000010791b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010791e	kernel.asm	/^ffff80000010791e:	84 c0                	test   %al,%al$/;"	l
ffff800000107920	kernel.asm	/^ffff800000107920:	75 cf                	jne    ffff8000001078f1 <strncpy+0x1c>$/;"	l
ffff800000107922	kernel.asm	/^ffff800000107922:	eb 0f                	jmp    ffff800000107933 <strncpy+0x5e>$/;"	l
ffff800000107924	kernel.asm	/^ffff800000107924:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107928	kernel.asm	/^ffff800000107928:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff80000010792c	kernel.asm	/^ffff80000010792c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107930	kernel.asm	/^ffff800000107930:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff800000107933	kernel.asm	/^ffff800000107933:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107936	kernel.asm	/^ffff800000107936:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107939	kernel.asm	/^ffff800000107939:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010793c	kernel.asm	/^ffff80000010793c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010793e	kernel.asm	/^ffff80000010793e:	7f e4                	jg     ffff800000107924 <strncpy+0x4f>$/;"	l
ffff800000107940	kernel.asm	/^ffff800000107940:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107944	kernel.asm	/^ffff800000107944:	c9                   	leaveq $/;"	l
ffff800000107945	kernel.asm	/^ffff800000107945:	c3                   	retq   $/;"	l
ffff800000107946	kernel.asm	/^ffff800000107946 <safestrcpy>:$/;"	l
ffff800000107946	kernel.asm	/^ffff800000107946:	55                   	push   %rbp$/;"	l
ffff800000107947	kernel.asm	/^ffff800000107947:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010794a	kernel.asm	/^ffff80000010794a:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010794e	kernel.asm	/^ffff80000010794e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107952	kernel.asm	/^ffff800000107952:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107956	kernel.asm	/^ffff800000107956:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107959	kernel.asm	/^ffff800000107959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010795d	kernel.asm	/^ffff80000010795d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107961	kernel.asm	/^ffff800000107961:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107965	kernel.asm	/^ffff800000107965:	7f 06                	jg     ffff80000010796d <safestrcpy+0x27>$/;"	l
ffff800000107967	kernel.asm	/^ffff800000107967:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010796b	kernel.asm	/^ffff80000010796b:	eb 39                	jmp    ffff8000001079a6 <safestrcpy+0x60>$/;"	l
ffff80000010796d	kernel.asm	/^ffff80000010796d:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff800000107971	kernel.asm	/^ffff800000107971:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107975	kernel.asm	/^ffff800000107975:	7e 24                	jle    ffff80000010799b <safestrcpy+0x55>$/;"	l
ffff800000107977	kernel.asm	/^ffff800000107977:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010797b	kernel.asm	/^ffff80000010797b:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff80000010797f	kernel.asm	/^ffff80000010797f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107983	kernel.asm	/^ffff800000107983:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107987	kernel.asm	/^ffff800000107987:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff80000010798b	kernel.asm	/^ffff80000010798b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff80000010798f	kernel.asm	/^ffff80000010798f:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107992	kernel.asm	/^ffff800000107992:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000107994	kernel.asm	/^ffff800000107994:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107997	kernel.asm	/^ffff800000107997:	84 c0                	test   %al,%al$/;"	l
ffff800000107999	kernel.asm	/^ffff800000107999:	75 d2                	jne    ffff80000010796d <safestrcpy+0x27>$/;"	l
ffff80000010799b	kernel.asm	/^ffff80000010799b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010799f	kernel.asm	/^ffff80000010799f:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff8000001079a2	kernel.asm	/^ffff8000001079a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001079a6	kernel.asm	/^ffff8000001079a6:	c9                   	leaveq $/;"	l
ffff8000001079a7	kernel.asm	/^ffff8000001079a7:	c3                   	retq   $/;"	l
ffff8000001079a8	kernel.asm	/^ffff8000001079a8 <strlen>:$/;"	l
ffff8000001079a8	kernel.asm	/^ffff8000001079a8:	55                   	push   %rbp$/;"	l
ffff8000001079a9	kernel.asm	/^ffff8000001079a9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001079ac	kernel.asm	/^ffff8000001079ac:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001079b0	kernel.asm	/^ffff8000001079b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001079b4	kernel.asm	/^ffff8000001079b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001079bb	kernel.asm	/^ffff8000001079bb:	eb 04                	jmp    ffff8000001079c1 <strlen+0x19>$/;"	l
ffff8000001079bd	kernel.asm	/^ffff8000001079bd:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001079c1	kernel.asm	/^ffff8000001079c1:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001079c4	kernel.asm	/^ffff8000001079c4:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001079c7	kernel.asm	/^ffff8000001079c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001079cb	kernel.asm	/^ffff8000001079cb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001079ce	kernel.asm	/^ffff8000001079ce:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001079d1	kernel.asm	/^ffff8000001079d1:	84 c0                	test   %al,%al$/;"	l
ffff8000001079d3	kernel.asm	/^ffff8000001079d3:	75 e8                	jne    ffff8000001079bd <strlen+0x15>$/;"	l
ffff8000001079d5	kernel.asm	/^ffff8000001079d5:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001079d8	kernel.asm	/^ffff8000001079d8:	c9                   	leaveq $/;"	l
ffff8000001079d9	kernel.asm	/^ffff8000001079d9:	c3                   	retq   $/;"	l
ffff8000001079da	kernel.asm	/^ffff8000001079da <swtch>:$/;"	l
ffff8000001079da	kernel.asm	/^ffff8000001079da:	55                   	push   %rbp$/;"	l
ffff8000001079db	kernel.asm	/^ffff8000001079db:	53                   	push   %rbx$/;"	l
ffff8000001079dc	kernel.asm	/^ffff8000001079dc:	41 53                	push   %r11$/;"	l
ffff8000001079de	kernel.asm	/^ffff8000001079de:	41 54                	push   %r12$/;"	l
ffff8000001079e0	kernel.asm	/^ffff8000001079e0:	41 55                	push   %r13$/;"	l
ffff8000001079e2	kernel.asm	/^ffff8000001079e2:	41 56                	push   %r14$/;"	l
ffff8000001079e4	kernel.asm	/^ffff8000001079e4:	41 57                	push   %r15$/;"	l
ffff8000001079e6	kernel.asm	/^ffff8000001079e6:	48 89 27             	mov    %rsp,(%rdi)$/;"	l
ffff8000001079e9	kernel.asm	/^ffff8000001079e9:	48 89 f4             	mov    %rsi,%rsp$/;"	l
ffff8000001079ec	kernel.asm	/^ffff8000001079ec:	41 5f                	pop    %r15$/;"	l
ffff8000001079ee	kernel.asm	/^ffff8000001079ee:	41 5e                	pop    %r14$/;"	l
ffff8000001079f0	kernel.asm	/^ffff8000001079f0:	41 5d                	pop    %r13$/;"	l
ffff8000001079f2	kernel.asm	/^ffff8000001079f2:	41 5c                	pop    %r12$/;"	l
ffff8000001079f4	kernel.asm	/^ffff8000001079f4:	41 5b                	pop    %r11$/;"	l
ffff8000001079f6	kernel.asm	/^ffff8000001079f6:	5b                   	pop    %rbx$/;"	l
ffff8000001079f7	kernel.asm	/^ffff8000001079f7:	5d                   	pop    %rbp$/;"	l
ffff8000001079f8	kernel.asm	/^ffff8000001079f8:	c3                   	retq   $/;"	l
ffff8000001079f9	kernel.asm	/^ffff8000001079f9 <fetchint>:$/;"	l
ffff8000001079f9	kernel.asm	/^ffff8000001079f9:	55                   	push   %rbp$/;"	l
ffff8000001079fa	kernel.asm	/^ffff8000001079fa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001079fd	kernel.asm	/^ffff8000001079fd:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107a01	kernel.asm	/^ffff800000107a01:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107a05	kernel.asm	/^ffff800000107a05:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107a09	kernel.asm	/^ffff800000107a09:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a10	kernel.asm	/^ffff800000107a10:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a14	kernel.asm	/^ffff800000107a14:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a17	kernel.asm	/^ffff800000107a17:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff800000107a1b	kernel.asm	/^ffff800000107a1b:	76 1b                	jbe    ffff800000107a38 <fetchint+0x3f>$/;"	l
ffff800000107a1d	kernel.asm	/^ffff800000107a1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a21	kernel.asm	/^ffff800000107a21:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff800000107a25	kernel.asm	/^ffff800000107a25:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a2c	kernel.asm	/^ffff800000107a2c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a30	kernel.asm	/^ffff800000107a30:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a33	kernel.asm	/^ffff800000107a33:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107a36	kernel.asm	/^ffff800000107a36:	76 07                	jbe    ffff800000107a3f <fetchint+0x46>$/;"	l
ffff800000107a38	kernel.asm	/^ffff800000107a38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107a3d	kernel.asm	/^ffff800000107a3d:	eb 11                	jmp    ffff800000107a50 <fetchint+0x57>$/;"	l
ffff800000107a3f	kernel.asm	/^ffff800000107a3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a43	kernel.asm	/^ffff800000107a43:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000107a45	kernel.asm	/^ffff800000107a45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107a49	kernel.asm	/^ffff800000107a49:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107a4b	kernel.asm	/^ffff800000107a4b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107a50	kernel.asm	/^ffff800000107a50:	c9                   	leaveq $/;"	l
ffff800000107a51	kernel.asm	/^ffff800000107a51:	c3                   	retq   $/;"	l
ffff800000107a52	kernel.asm	/^ffff800000107a52 <fetchaddr>:$/;"	l
ffff800000107a52	kernel.asm	/^ffff800000107a52:	55                   	push   %rbp$/;"	l
ffff800000107a53	kernel.asm	/^ffff800000107a53:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107a56	kernel.asm	/^ffff800000107a56:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107a5a	kernel.asm	/^ffff800000107a5a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107a5e	kernel.asm	/^ffff800000107a5e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107a62	kernel.asm	/^ffff800000107a62:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a69	kernel.asm	/^ffff800000107a69:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a6d	kernel.asm	/^ffff800000107a6d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a70	kernel.asm	/^ffff800000107a70:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff800000107a74	kernel.asm	/^ffff800000107a74:	76 1b                	jbe    ffff800000107a91 <fetchaddr+0x3f>$/;"	l
ffff800000107a76	kernel.asm	/^ffff800000107a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a7a	kernel.asm	/^ffff800000107a7a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107a7e	kernel.asm	/^ffff800000107a7e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107a85	kernel.asm	/^ffff800000107a85:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107a89	kernel.asm	/^ffff800000107a89:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107a8c	kernel.asm	/^ffff800000107a8c:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107a8f	kernel.asm	/^ffff800000107a8f:	76 07                	jbe    ffff800000107a98 <fetchaddr+0x46>$/;"	l
ffff800000107a91	kernel.asm	/^ffff800000107a91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107a96	kernel.asm	/^ffff800000107a96:	eb 13                	jmp    ffff800000107aab <fetchaddr+0x59>$/;"	l
ffff800000107a98	kernel.asm	/^ffff800000107a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a9c	kernel.asm	/^ffff800000107a9c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000107a9f	kernel.asm	/^ffff800000107a9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107aa3	kernel.asm	/^ffff800000107aa3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107aa6	kernel.asm	/^ffff800000107aa6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107aab	kernel.asm	/^ffff800000107aab:	c9                   	leaveq $/;"	l
ffff800000107aac	kernel.asm	/^ffff800000107aac:	c3                   	retq   $/;"	l
ffff800000107aad	kernel.asm	/^ffff800000107aad <fetchstr>:$/;"	l
ffff800000107aad	kernel.asm	/^ffff800000107aad:	55                   	push   %rbp$/;"	l
ffff800000107aae	kernel.asm	/^ffff800000107aae:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107ab1	kernel.asm	/^ffff800000107ab1:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107ab5	kernel.asm	/^ffff800000107ab5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107ab9	kernel.asm	/^ffff800000107ab9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107abd	kernel.asm	/^ffff800000107abd:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107ac4	kernel.asm	/^ffff800000107ac4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107ac8	kernel.asm	/^ffff800000107ac8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107acb	kernel.asm	/^ffff800000107acb:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000107acf	kernel.asm	/^ffff800000107acf:	77 07                	ja     ffff800000107ad8 <fetchstr+0x2b>$/;"	l
ffff800000107ad1	kernel.asm	/^ffff800000107ad1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ad6	kernel.asm	/^ffff800000107ad6:	eb 5c                	jmp    ffff800000107b34 <fetchstr+0x87>$/;"	l
ffff800000107ad8	kernel.asm	/^ffff800000107ad8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107adc	kernel.asm	/^ffff800000107adc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ae0	kernel.asm	/^ffff800000107ae0:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107ae3	kernel.asm	/^ffff800000107ae3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107aea	kernel.asm	/^ffff800000107aea:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107aee	kernel.asm	/^ffff800000107aee:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107af1	kernel.asm	/^ffff800000107af1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107af5	kernel.asm	/^ffff800000107af5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107af9	kernel.asm	/^ffff800000107af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107afc	kernel.asm	/^ffff800000107afc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107b00	kernel.asm	/^ffff800000107b00:	eb 23                	jmp    ffff800000107b25 <fetchstr+0x78>$/;"	l
ffff800000107b02	kernel.asm	/^ffff800000107b02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107b06	kernel.asm	/^ffff800000107b06:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107b09	kernel.asm	/^ffff800000107b09:	84 c0                	test   %al,%al$/;"	l
ffff800000107b0b	kernel.asm	/^ffff800000107b0b:	75 13                	jne    ffff800000107b20 <fetchstr+0x73>$/;"	l
ffff800000107b0d	kernel.asm	/^ffff800000107b0d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107b11	kernel.asm	/^ffff800000107b11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107b15	kernel.asm	/^ffff800000107b15:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107b18	kernel.asm	/^ffff800000107b18:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000107b1b	kernel.asm	/^ffff800000107b1b:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000107b1e	kernel.asm	/^ffff800000107b1e:	eb 14                	jmp    ffff800000107b34 <fetchstr+0x87>$/;"	l
ffff800000107b20	kernel.asm	/^ffff800000107b20:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107b25	kernel.asm	/^ffff800000107b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107b29	kernel.asm	/^ffff800000107b29:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff800000107b2d	kernel.asm	/^ffff800000107b2d:	72 d3                	jb     ffff800000107b02 <fetchstr+0x55>$/;"	l
ffff800000107b2f	kernel.asm	/^ffff800000107b2f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107b34	kernel.asm	/^ffff800000107b34:	c9                   	leaveq $/;"	l
ffff800000107b35	kernel.asm	/^ffff800000107b35:	c3                   	retq   $/;"	l
ffff800000107b36	kernel.asm	/^ffff800000107b36 <fetcharg>:$/;"	l
ffff800000107b36	kernel.asm	/^ffff800000107b36:	55                   	push   %rbp$/;"	l
ffff800000107b37	kernel.asm	/^ffff800000107b37:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107b3a	kernel.asm	/^ffff800000107b3a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107b3e	kernel.asm	/^ffff800000107b3e:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107b41	kernel.asm	/^ffff800000107b41:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)$/;"	l
ffff800000107b45	kernel.asm	/^ffff800000107b45:	0f 87 9b 00 00 00    	ja     ffff800000107be6 <fetcharg+0xb0>$/;"	l
ffff800000107b4b	kernel.asm	/^ffff800000107b4b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107b4e	kernel.asm	/^ffff800000107b4e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107b55	kernel.asm	/^ffff800000107b55:	00 $/;"	l
ffff800000107b56	kernel.asm	/^ffff800000107b56:	48 b8 48 cf 10 00 00 	movabs $0xffff80000010cf48,%rax$/;"	l
ffff800000107b5d	kernel.asm	/^ffff800000107b5d:	80 ff ff $/;"	l
ffff800000107b60	kernel.asm	/^ffff800000107b60:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000107b63	kernel.asm	/^ffff800000107b63:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107b66	kernel.asm	/^ffff800000107b66:	ff e0                	jmpq   *%rax$/;"	l
ffff800000107b68	kernel.asm	/^ffff800000107b68:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b6f	kernel.asm	/^ffff800000107b6f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b73	kernel.asm	/^ffff800000107b73:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b77	kernel.asm	/^ffff800000107b77:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000107b7b	kernel.asm	/^ffff800000107b7b:	eb 7f                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107b7d	kernel.asm	/^ffff800000107b7d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b84	kernel.asm	/^ffff800000107b84:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b88	kernel.asm	/^ffff800000107b88:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b8c	kernel.asm	/^ffff800000107b8c:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107b90	kernel.asm	/^ffff800000107b90:	eb 6a                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107b92	kernel.asm	/^ffff800000107b92:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107b99	kernel.asm	/^ffff800000107b99:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107b9d	kernel.asm	/^ffff800000107b9d:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107ba1	kernel.asm	/^ffff800000107ba1:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000107ba5	kernel.asm	/^ffff800000107ba5:	eb 55                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107ba7	kernel.asm	/^ffff800000107ba7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107bae	kernel.asm	/^ffff800000107bae:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107bb2	kernel.asm	/^ffff800000107bb2:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107bb6	kernel.asm	/^ffff800000107bb6:	48 8b 40 48          	mov    0x48(%rax),%rax$/;"	l
ffff800000107bba	kernel.asm	/^ffff800000107bba:	eb 40                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107bbc	kernel.asm	/^ffff800000107bbc:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107bc3	kernel.asm	/^ffff800000107bc3:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107bc7	kernel.asm	/^ffff800000107bc7:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107bcb	kernel.asm	/^ffff800000107bcb:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff800000107bcf	kernel.asm	/^ffff800000107bcf:	eb 2b                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107bd1	kernel.asm	/^ffff800000107bd1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107bd8	kernel.asm	/^ffff800000107bd8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107bdc	kernel.asm	/^ffff800000107bdc:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107be0	kernel.asm	/^ffff800000107be0:	48 8b 40 40          	mov    0x40(%rax),%rax$/;"	l
ffff800000107be4	kernel.asm	/^ffff800000107be4:	eb 16                	jmp    ffff800000107bfc <fetcharg+0xc6>$/;"	l
ffff800000107be6	kernel.asm	/^ffff800000107be6:	48 bf 38 cf 10 00 00 	movabs $0xffff80000010cf38,%rdi$/;"	l
ffff800000107bed	kernel.asm	/^ffff800000107bed:	80 ff ff $/;"	l
ffff800000107bf0	kernel.asm	/^ffff800000107bf0:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000107bf7	kernel.asm	/^ffff800000107bf7:	80 ff ff $/;"	l
ffff800000107bfa	kernel.asm	/^ffff800000107bfa:	ff d0                	callq  *%rax$/;"	l
ffff800000107bfc	kernel.asm	/^ffff800000107bfc:	c9                   	leaveq $/;"	l
ffff800000107bfd	kernel.asm	/^ffff800000107bfd:	c3                   	retq   $/;"	l
ffff800000107bfe	kernel.asm	/^ffff800000107bfe <argint>:$/;"	l
ffff800000107bfe	kernel.asm	/^ffff800000107bfe:	55                   	push   %rbp$/;"	l
ffff800000107bff	kernel.asm	/^ffff800000107bff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c02	kernel.asm	/^ffff800000107c02:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107c06	kernel.asm	/^ffff800000107c06:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107c09	kernel.asm	/^ffff800000107c09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107c0d	kernel.asm	/^ffff800000107c0d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107c10	kernel.asm	/^ffff800000107c10:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107c12	kernel.asm	/^ffff800000107c12:	48 b8 36 7b 10 00 00 	movabs $0xffff800000107b36,%rax$/;"	l
ffff800000107c19	kernel.asm	/^ffff800000107c19:	80 ff ff $/;"	l
ffff800000107c1c	kernel.asm	/^ffff800000107c1c:	ff d0                	callq  *%rax$/;"	l
ffff800000107c1e	kernel.asm	/^ffff800000107c1e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107c20	kernel.asm	/^ffff800000107c20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107c24	kernel.asm	/^ffff800000107c24:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107c26	kernel.asm	/^ffff800000107c26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107c2b	kernel.asm	/^ffff800000107c2b:	c9                   	leaveq $/;"	l
ffff800000107c2c	kernel.asm	/^ffff800000107c2c:	c3                   	retq   $/;"	l
ffff800000107c2d	kernel.asm	/^ffff800000107c2d <argaddr>:$/;"	l
ffff800000107c2d	kernel.asm	/^ffff800000107c2d:	55                   	push   %rbp$/;"	l
ffff800000107c2e	kernel.asm	/^ffff800000107c2e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c31	kernel.asm	/^ffff800000107c31:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107c35	kernel.asm	/^ffff800000107c35:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107c38	kernel.asm	/^ffff800000107c38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107c3c	kernel.asm	/^ffff800000107c3c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107c3f	kernel.asm	/^ffff800000107c3f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107c41	kernel.asm	/^ffff800000107c41:	48 b8 36 7b 10 00 00 	movabs $0xffff800000107b36,%rax$/;"	l
ffff800000107c48	kernel.asm	/^ffff800000107c48:	80 ff ff $/;"	l
ffff800000107c4b	kernel.asm	/^ffff800000107c4b:	ff d0                	callq  *%rax$/;"	l
ffff800000107c4d	kernel.asm	/^ffff800000107c4d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107c50	kernel.asm	/^ffff800000107c50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107c54	kernel.asm	/^ffff800000107c54:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107c57	kernel.asm	/^ffff800000107c57:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107c5c	kernel.asm	/^ffff800000107c5c:	c9                   	leaveq $/;"	l
ffff800000107c5d	kernel.asm	/^ffff800000107c5d:	c3                   	retq   $/;"	l
ffff800000107c5e	kernel.asm	/^ffff800000107c5e <argptr>:$/;"	l
ffff800000107c5e	kernel.asm	/^ffff800000107c5e:	55                   	push   %rbp$/;"	l
ffff800000107c5f	kernel.asm	/^ffff800000107c5f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c62	kernel.asm	/^ffff800000107c62:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107c66	kernel.asm	/^ffff800000107c66:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107c69	kernel.asm	/^ffff800000107c69:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107c6d	kernel.asm	/^ffff800000107c6d:	89 55 e8             	mov    %edx,-0x18(%rbp)$/;"	l
ffff800000107c70	kernel.asm	/^ffff800000107c70:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx$/;"	l
ffff800000107c74	kernel.asm	/^ffff800000107c74:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107c77	kernel.asm	/^ffff800000107c77:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107c7a	kernel.asm	/^ffff800000107c7a:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107c7c	kernel.asm	/^ffff800000107c7c:	48 b8 2d 7c 10 00 00 	movabs $0xffff800000107c2d,%rax$/;"	l
ffff800000107c83	kernel.asm	/^ffff800000107c83:	80 ff ff $/;"	l
ffff800000107c86	kernel.asm	/^ffff800000107c86:	ff d0                	callq  *%rax$/;"	l
ffff800000107c88	kernel.asm	/^ffff800000107c88:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107c8a	kernel.asm	/^ffff800000107c8a:	79 07                	jns    ffff800000107c93 <argptr+0x35>$/;"	l
ffff800000107c8c	kernel.asm	/^ffff800000107c8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107c91	kernel.asm	/^ffff800000107c91:	eb 59                	jmp    ffff800000107cec <argptr+0x8e>$/;"	l
ffff800000107c93	kernel.asm	/^ffff800000107c93:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
ffff800000107c97	kernel.asm	/^ffff800000107c97:	78 39                	js     ffff800000107cd2 <argptr+0x74>$/;"	l
ffff800000107c99	kernel.asm	/^ffff800000107c99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c9d	kernel.asm	/^ffff800000107c9d:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107c9f	kernel.asm	/^ffff800000107c9f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107ca6	kernel.asm	/^ffff800000107ca6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107caa	kernel.asm	/^ffff800000107caa:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107cad	kernel.asm	/^ffff800000107cad:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107cb0	kernel.asm	/^ffff800000107cb0:	73 20                	jae    ffff800000107cd2 <argptr+0x74>$/;"	l
ffff800000107cb2	kernel.asm	/^ffff800000107cb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107cb6	kernel.asm	/^ffff800000107cb6:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107cb8	kernel.asm	/^ffff800000107cb8:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000107cbb	kernel.asm	/^ffff800000107cbb:	01 d0                	add    %edx,%eax$/;"	l
ffff800000107cbd	kernel.asm	/^ffff800000107cbd:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107cbf	kernel.asm	/^ffff800000107cbf:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107cc6	kernel.asm	/^ffff800000107cc6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107cca	kernel.asm	/^ffff800000107cca:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107ccd	kernel.asm	/^ffff800000107ccd:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107cd0	kernel.asm	/^ffff800000107cd0:	76 07                	jbe    ffff800000107cd9 <argptr+0x7b>$/;"	l
ffff800000107cd2	kernel.asm	/^ffff800000107cd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107cd7	kernel.asm	/^ffff800000107cd7:	eb 13                	jmp    ffff800000107cec <argptr+0x8e>$/;"	l
ffff800000107cd9	kernel.asm	/^ffff800000107cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107cdd	kernel.asm	/^ffff800000107cdd:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107ce0	kernel.asm	/^ffff800000107ce0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ce4	kernel.asm	/^ffff800000107ce4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107ce7	kernel.asm	/^ffff800000107ce7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107cec	kernel.asm	/^ffff800000107cec:	c9                   	leaveq $/;"	l
ffff800000107ced	kernel.asm	/^ffff800000107ced:	c3                   	retq   $/;"	l
ffff800000107cee	kernel.asm	/^ffff800000107cee <argstr>:$/;"	l
ffff800000107cee	kernel.asm	/^ffff800000107cee:	55                   	push   %rbp$/;"	l
ffff800000107cef	kernel.asm	/^ffff800000107cef:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107cf2	kernel.asm	/^ffff800000107cf2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107cf6	kernel.asm	/^ffff800000107cf6:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107cf9	kernel.asm	/^ffff800000107cf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107cfd	kernel.asm	/^ffff800000107cfd:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx$/;"	l
ffff800000107d01	kernel.asm	/^ffff800000107d01:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107d04	kernel.asm	/^ffff800000107d04:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107d07	kernel.asm	/^ffff800000107d07:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107d09	kernel.asm	/^ffff800000107d09:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000107d10	kernel.asm	/^ffff800000107d10:	80 ff ff $/;"	l
ffff800000107d13	kernel.asm	/^ffff800000107d13:	ff d0                	callq  *%rax$/;"	l
ffff800000107d15	kernel.asm	/^ffff800000107d15:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107d17	kernel.asm	/^ffff800000107d17:	79 07                	jns    ffff800000107d20 <argstr+0x32>$/;"	l
ffff800000107d19	kernel.asm	/^ffff800000107d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107d1e	kernel.asm	/^ffff800000107d1e:	eb 1b                	jmp    ffff800000107d3b <argstr+0x4d>$/;"	l
ffff800000107d20	kernel.asm	/^ffff800000107d20:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107d23	kernel.asm	/^ffff800000107d23:	48 98                	cltq   $/;"	l
ffff800000107d25	kernel.asm	/^ffff800000107d25:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107d29	kernel.asm	/^ffff800000107d29:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107d2c	kernel.asm	/^ffff800000107d2c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107d2f	kernel.asm	/^ffff800000107d2f:	48 b8 ad 7a 10 00 00 	movabs $0xffff800000107aad,%rax$/;"	l
ffff800000107d36	kernel.asm	/^ffff800000107d36:	80 ff ff $/;"	l
ffff800000107d39	kernel.asm	/^ffff800000107d39:	ff d0                	callq  *%rax$/;"	l
ffff800000107d3b	kernel.asm	/^ffff800000107d3b:	c9                   	leaveq $/;"	l
ffff800000107d3c	kernel.asm	/^ffff800000107d3c:	c3                   	retq   $/;"	l
ffff800000107d3d	kernel.asm	/^ffff800000107d3d <syscall>:$/;"	l
ffff800000107d3d	kernel.asm	/^ffff800000107d3d:	55                   	push   %rbp$/;"	l
ffff800000107d3e	kernel.asm	/^ffff800000107d3e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107d41	kernel.asm	/^ffff800000107d41:	53                   	push   %rbx$/;"	l
ffff800000107d42	kernel.asm	/^ffff800000107d42:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107d46	kernel.asm	/^ffff800000107d46:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d4d	kernel.asm	/^ffff800000107d4d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d51	kernel.asm	/^ffff800000107d51:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d55	kernel.asm	/^ffff800000107d55:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107d58	kernel.asm	/^ffff800000107d58:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000107d5b	kernel.asm	/^ffff800000107d5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107d5f	kernel.asm	/^ffff800000107d5f:	7e 4d                	jle    ffff800000107dae <syscall+0x71>$/;"	l
ffff800000107d61	kernel.asm	/^ffff800000107d61:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107d64	kernel.asm	/^ffff800000107d64:	83 f8 16             	cmp    $0x16,%eax$/;"	l
ffff800000107d67	kernel.asm	/^ffff800000107d67:	77 45                	ja     ffff800000107dae <syscall+0x71>$/;"	l
ffff800000107d69	kernel.asm	/^ffff800000107d69:	48 b8 a0 e5 10 00 00 	movabs $0xffff80000010e5a0,%rax$/;"	l
ffff800000107d70	kernel.asm	/^ffff800000107d70:	80 ff ff $/;"	l
ffff800000107d73	kernel.asm	/^ffff800000107d73:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107d76	kernel.asm	/^ffff800000107d76:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107d79	kernel.asm	/^ffff800000107d79:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107d7d	kernel.asm	/^ffff800000107d7d:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107d80	kernel.asm	/^ffff800000107d80:	74 2c                	je     ffff800000107dae <syscall+0x71>$/;"	l
ffff800000107d82	kernel.asm	/^ffff800000107d82:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d89	kernel.asm	/^ffff800000107d89:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d8d	kernel.asm	/^ffff800000107d8d:	48 8b 58 28          	mov    0x28(%rax),%rbx$/;"	l
ffff800000107d91	kernel.asm	/^ffff800000107d91:	48 b8 a0 e5 10 00 00 	movabs $0xffff80000010e5a0,%rax$/;"	l
ffff800000107d98	kernel.asm	/^ffff800000107d98:	80 ff ff $/;"	l
ffff800000107d9b	kernel.asm	/^ffff800000107d9b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107d9e	kernel.asm	/^ffff800000107d9e:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107da1	kernel.asm	/^ffff800000107da1:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107da5	kernel.asm	/^ffff800000107da5:	ff d0                	callq  *%rax$/;"	l
ffff800000107da7	kernel.asm	/^ffff800000107da7:	48 98                	cltq   $/;"	l
ffff800000107da9	kernel.asm	/^ffff800000107da9:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff800000107dac	kernel.asm	/^ffff800000107dac:	eb 5c                	jmp    ffff800000107e0a <syscall+0xcd>$/;"	l
ffff800000107dae	kernel.asm	/^ffff800000107dae:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107db5	kernel.asm	/^ffff800000107db5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107db9	kernel.asm	/^ffff800000107db9:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff800000107dc0	kernel.asm	/^ffff800000107dc0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107dc7	kernel.asm	/^ffff800000107dc7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107dcb	kernel.asm	/^ffff800000107dcb:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000107dce	kernel.asm	/^ffff800000107dce:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107dd1	kernel.asm	/^ffff800000107dd1:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107dd3	kernel.asm	/^ffff800000107dd3:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff800000107dd6	kernel.asm	/^ffff800000107dd6:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000107dd8	kernel.asm	/^ffff800000107dd8:	48 bf 78 cf 10 00 00 	movabs $0xffff80000010cf78,%rdi$/;"	l
ffff800000107ddf	kernel.asm	/^ffff800000107ddf:	80 ff ff $/;"	l
ffff800000107de2	kernel.asm	/^ffff800000107de2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107de7	kernel.asm	/^ffff800000107de7:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff800000107dee	kernel.asm	/^ffff800000107dee:	80 ff ff $/;"	l
ffff800000107df1	kernel.asm	/^ffff800000107df1:	41 ff d0             	callq  *%r8$/;"	l
ffff800000107df4	kernel.asm	/^ffff800000107df4:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107dfb	kernel.asm	/^ffff800000107dfb:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107dff	kernel.asm	/^ffff800000107dff:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107e03	kernel.asm	/^ffff800000107e03:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)$/;"	l
ffff800000107e0a	kernel.asm	/^ffff800000107e0a:	90                   	nop$/;"	l
ffff800000107e0b	kernel.asm	/^ffff800000107e0b:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff800000107e0f	kernel.asm	/^ffff800000107e0f:	5b                   	pop    %rbx$/;"	l
ffff800000107e10	kernel.asm	/^ffff800000107e10:	5d                   	pop    %rbp$/;"	l
ffff800000107e11	kernel.asm	/^ffff800000107e11:	c3                   	retq   $/;"	l
ffff800000107e12	kernel.asm	/^ffff800000107e12 <argfd>:$/;"	l
ffff800000107e12	kernel.asm	/^ffff800000107e12:	55                   	push   %rbp$/;"	l
ffff800000107e13	kernel.asm	/^ffff800000107e13:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107e16	kernel.asm	/^ffff800000107e16:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000107e1a	kernel.asm	/^ffff800000107e1a:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107e1d	kernel.asm	/^ffff800000107e1d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107e21	kernel.asm	/^ffff800000107e21:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000107e25	kernel.asm	/^ffff800000107e25:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx$/;"	l
ffff800000107e29	kernel.asm	/^ffff800000107e29:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107e2c	kernel.asm	/^ffff800000107e2c:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107e2f	kernel.asm	/^ffff800000107e2f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107e31	kernel.asm	/^ffff800000107e31:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000107e38	kernel.asm	/^ffff800000107e38:	80 ff ff $/;"	l
ffff800000107e3b	kernel.asm	/^ffff800000107e3b:	ff d0                	callq  *%rax$/;"	l
ffff800000107e3d	kernel.asm	/^ffff800000107e3d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107e3f	kernel.asm	/^ffff800000107e3f:	79 07                	jns    ffff800000107e48 <argfd+0x36>$/;"	l
ffff800000107e41	kernel.asm	/^ffff800000107e41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107e46	kernel.asm	/^ffff800000107e46:	eb 62                	jmp    ffff800000107eaa <argfd+0x98>$/;"	l
ffff800000107e48	kernel.asm	/^ffff800000107e48:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107e4b	kernel.asm	/^ffff800000107e4b:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107e4d	kernel.asm	/^ffff800000107e4d:	78 2d                	js     ffff800000107e7c <argfd+0x6a>$/;"	l
ffff800000107e4f	kernel.asm	/^ffff800000107e4f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107e52	kernel.asm	/^ffff800000107e52:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff800000107e55	kernel.asm	/^ffff800000107e55:	7f 25                	jg     ffff800000107e7c <argfd+0x6a>$/;"	l
ffff800000107e57	kernel.asm	/^ffff800000107e57:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107e5e	kernel.asm	/^ffff800000107e5e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107e62	kernel.asm	/^ffff800000107e62:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107e65	kernel.asm	/^ffff800000107e65:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107e68	kernel.asm	/^ffff800000107e68:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000107e6c	kernel.asm	/^ffff800000107e6c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000107e71	kernel.asm	/^ffff800000107e71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107e75	kernel.asm	/^ffff800000107e75:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000107e7a	kernel.asm	/^ffff800000107e7a:	75 07                	jne    ffff800000107e83 <argfd+0x71>$/;"	l
ffff800000107e7c	kernel.asm	/^ffff800000107e7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107e81	kernel.asm	/^ffff800000107e81:	eb 27                	jmp    ffff800000107eaa <argfd+0x98>$/;"	l
ffff800000107e83	kernel.asm	/^ffff800000107e83:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff800000107e88	kernel.asm	/^ffff800000107e88:	74 09                	je     ffff800000107e93 <argfd+0x81>$/;"	l
ffff800000107e8a	kernel.asm	/^ffff800000107e8a:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107e8d	kernel.asm	/^ffff800000107e8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107e91	kernel.asm	/^ffff800000107e91:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107e93	kernel.asm	/^ffff800000107e93:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff800000107e98	kernel.asm	/^ffff800000107e98:	74 0b                	je     ffff800000107ea5 <argfd+0x93>$/;"	l
ffff800000107e9a	kernel.asm	/^ffff800000107e9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000107e9e	kernel.asm	/^ffff800000107e9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107ea2	kernel.asm	/^ffff800000107ea2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107ea5	kernel.asm	/^ffff800000107ea5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107eaa	kernel.asm	/^ffff800000107eaa:	c9                   	leaveq $/;"	l
ffff800000107eab	kernel.asm	/^ffff800000107eab:	c3                   	retq   $/;"	l
ffff800000107eac	kernel.asm	/^ffff800000107eac <fdalloc>:$/;"	l
ffff800000107eac	kernel.asm	/^ffff800000107eac:	55                   	push   %rbp$/;"	l
ffff800000107ead	kernel.asm	/^ffff800000107ead:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107eb0	kernel.asm	/^ffff800000107eb0:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107eb4	kernel.asm	/^ffff800000107eb4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107eb8	kernel.asm	/^ffff800000107eb8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107ebf	kernel.asm	/^ffff800000107ebf:	eb 46                	jmp    ffff800000107f07 <fdalloc+0x5b>$/;"	l
ffff800000107ec1	kernel.asm	/^ffff800000107ec1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107ec8	kernel.asm	/^ffff800000107ec8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107ecc	kernel.asm	/^ffff800000107ecc:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107ecf	kernel.asm	/^ffff800000107ecf:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107ed2	kernel.asm	/^ffff800000107ed2:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000107ed6	kernel.asm	/^ffff800000107ed6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000107edb	kernel.asm	/^ffff800000107edb:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107ede	kernel.asm	/^ffff800000107ede:	75 23                	jne    ffff800000107f03 <fdalloc+0x57>$/;"	l
ffff800000107ee0	kernel.asm	/^ffff800000107ee0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107ee7	kernel.asm	/^ffff800000107ee7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107eeb	kernel.asm	/^ffff800000107eeb:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107eee	kernel.asm	/^ffff800000107eee:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107ef1	kernel.asm	/^ffff800000107ef1:	48 8d 4a 08          	lea    0x8(%rdx),%rcx$/;"	l
ffff800000107ef5	kernel.asm	/^ffff800000107ef5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107ef9	kernel.asm	/^ffff800000107ef9:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
ffff800000107efe	kernel.asm	/^ffff800000107efe:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107f01	kernel.asm	/^ffff800000107f01:	eb 0f                	jmp    ffff800000107f12 <fdalloc+0x66>$/;"	l
ffff800000107f03	kernel.asm	/^ffff800000107f03:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107f07	kernel.asm	/^ffff800000107f07:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff800000107f0b	kernel.asm	/^ffff800000107f0b:	7e b4                	jle    ffff800000107ec1 <fdalloc+0x15>$/;"	l
ffff800000107f0d	kernel.asm	/^ffff800000107f0d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107f12	kernel.asm	/^ffff800000107f12:	c9                   	leaveq $/;"	l
ffff800000107f13	kernel.asm	/^ffff800000107f13:	c3                   	retq   $/;"	l
ffff800000107f14	kernel.asm	/^ffff800000107f14 <sys_dup>:$/;"	l
ffff800000107f14	kernel.asm	/^ffff800000107f14:	55                   	push   %rbp$/;"	l
ffff800000107f15	kernel.asm	/^ffff800000107f15:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107f18	kernel.asm	/^ffff800000107f18:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107f1c	kernel.asm	/^ffff800000107f1c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000107f20	kernel.asm	/^ffff800000107f20:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107f23	kernel.asm	/^ffff800000107f23:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000107f28	kernel.asm	/^ffff800000107f28:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000107f2d	kernel.asm	/^ffff800000107f2d:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff800000107f34	kernel.asm	/^ffff800000107f34:	80 ff ff $/;"	l
ffff800000107f37	kernel.asm	/^ffff800000107f37:	ff d0                	callq  *%rax$/;"	l
ffff800000107f39	kernel.asm	/^ffff800000107f39:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107f3b	kernel.asm	/^ffff800000107f3b:	79 07                	jns    ffff800000107f44 <sys_dup+0x30>$/;"	l
ffff800000107f3d	kernel.asm	/^ffff800000107f3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107f42	kernel.asm	/^ffff800000107f42:	eb 39                	jmp    ffff800000107f7d <sys_dup+0x69>$/;"	l
ffff800000107f44	kernel.asm	/^ffff800000107f44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107f48	kernel.asm	/^ffff800000107f48:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107f4b	kernel.asm	/^ffff800000107f4b:	48 b8 ac 7e 10 00 00 	movabs $0xffff800000107eac,%rax$/;"	l
ffff800000107f52	kernel.asm	/^ffff800000107f52:	80 ff ff $/;"	l
ffff800000107f55	kernel.asm	/^ffff800000107f55:	ff d0                	callq  *%rax$/;"	l
ffff800000107f57	kernel.asm	/^ffff800000107f57:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107f5a	kernel.asm	/^ffff800000107f5a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107f5e	kernel.asm	/^ffff800000107f5e:	79 07                	jns    ffff800000107f67 <sys_dup+0x53>$/;"	l
ffff800000107f60	kernel.asm	/^ffff800000107f60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107f65	kernel.asm	/^ffff800000107f65:	eb 16                	jmp    ffff800000107f7d <sys_dup+0x69>$/;"	l
ffff800000107f67	kernel.asm	/^ffff800000107f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107f6b	kernel.asm	/^ffff800000107f6b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107f6e	kernel.asm	/^ffff800000107f6e:	48 b8 26 1b 10 00 00 	movabs $0xffff800000101b26,%rax$/;"	l
ffff800000107f75	kernel.asm	/^ffff800000107f75:	80 ff ff $/;"	l
ffff800000107f78	kernel.asm	/^ffff800000107f78:	ff d0                	callq  *%rax$/;"	l
ffff800000107f7a	kernel.asm	/^ffff800000107f7a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107f7d	kernel.asm	/^ffff800000107f7d:	c9                   	leaveq $/;"	l
ffff800000107f7e	kernel.asm	/^ffff800000107f7e:	c3                   	retq   $/;"	l
ffff800000107f7f	kernel.asm	/^ffff800000107f7f <sys_read>:$/;"	l
ffff800000107f7f	kernel.asm	/^ffff800000107f7f:	55                   	push   %rbp$/;"	l
ffff800000107f80	kernel.asm	/^ffff800000107f80:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107f83	kernel.asm	/^ffff800000107f83:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107f87	kernel.asm	/^ffff800000107f87:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000107f8b	kernel.asm	/^ffff800000107f8b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107f8e	kernel.asm	/^ffff800000107f8e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000107f93	kernel.asm	/^ffff800000107f93:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000107f98	kernel.asm	/^ffff800000107f98:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff800000107f9f	kernel.asm	/^ffff800000107f9f:	80 ff ff $/;"	l
ffff800000107fa2	kernel.asm	/^ffff800000107fa2:	ff d0                	callq  *%rax$/;"	l
ffff800000107fa4	kernel.asm	/^ffff800000107fa4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107fa6	kernel.asm	/^ffff800000107fa6:	78 3b                	js     ffff800000107fe3 <sys_read+0x64>$/;"	l
ffff800000107fa8	kernel.asm	/^ffff800000107fa8:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000107fac	kernel.asm	/^ffff800000107fac:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107faf	kernel.asm	/^ffff800000107faf:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000107fb4	kernel.asm	/^ffff800000107fb4:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000107fbb	kernel.asm	/^ffff800000107fbb:	80 ff ff $/;"	l
ffff800000107fbe	kernel.asm	/^ffff800000107fbe:	ff d0                	callq  *%rax$/;"	l
ffff800000107fc0	kernel.asm	/^ffff800000107fc0:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107fc2	kernel.asm	/^ffff800000107fc2:	78 1f                	js     ffff800000107fe3 <sys_read+0x64>$/;"	l
ffff800000107fc4	kernel.asm	/^ffff800000107fc4:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107fc7	kernel.asm	/^ffff800000107fc7:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000107fcb	kernel.asm	/^ffff800000107fcb:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107fce	kernel.asm	/^ffff800000107fce:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000107fd3	kernel.asm	/^ffff800000107fd3:	48 b8 5e 7c 10 00 00 	movabs $0xffff800000107c5e,%rax$/;"	l
ffff800000107fda	kernel.asm	/^ffff800000107fda:	80 ff ff $/;"	l
ffff800000107fdd	kernel.asm	/^ffff800000107fdd:	ff d0                	callq  *%rax$/;"	l
ffff800000107fdf	kernel.asm	/^ffff800000107fdf:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107fe1	kernel.asm	/^ffff800000107fe1:	79 07                	jns    ffff800000107fea <sys_read+0x6b>$/;"	l
ffff800000107fe3	kernel.asm	/^ffff800000107fe3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107fe8	kernel.asm	/^ffff800000107fe8:	eb 1d                	jmp    ffff800000108007 <sys_read+0x88>$/;"	l
ffff800000107fea	kernel.asm	/^ffff800000107fea:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000107fed	kernel.asm	/^ffff800000107fed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000107ff1	kernel.asm	/^ffff800000107ff1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107ff5	kernel.asm	/^ffff800000107ff5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107ff8	kernel.asm	/^ffff800000107ff8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107ffb	kernel.asm	/^ffff800000107ffb:	48 b8 e3 1d 10 00 00 	movabs $0xffff800000101de3,%rax$/;"	l
ffff800000108002	kernel.asm	/^ffff800000108002:	80 ff ff $/;"	l
ffff800000108005	kernel.asm	/^ffff800000108005:	ff d0                	callq  *%rax$/;"	l
ffff800000108007	kernel.asm	/^ffff800000108007:	c9                   	leaveq $/;"	l
ffff800000108008	kernel.asm	/^ffff800000108008:	c3                   	retq   $/;"	l
ffff800000108009	kernel.asm	/^ffff800000108009 <sys_write>:$/;"	l
ffff800000108009	kernel.asm	/^ffff800000108009:	55                   	push   %rbp$/;"	l
ffff80000010800a	kernel.asm	/^ffff80000010800a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010800d	kernel.asm	/^ffff80000010800d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108011	kernel.asm	/^ffff800000108011:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000108015	kernel.asm	/^ffff800000108015:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000108018	kernel.asm	/^ffff800000108018:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010801d	kernel.asm	/^ffff80000010801d:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108022	kernel.asm	/^ffff800000108022:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff800000108029	kernel.asm	/^ffff800000108029:	80 ff ff $/;"	l
ffff80000010802c	kernel.asm	/^ffff80000010802c:	ff d0                	callq  *%rax$/;"	l
ffff80000010802e	kernel.asm	/^ffff80000010802e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108030	kernel.asm	/^ffff800000108030:	78 3b                	js     ffff80000010806d <sys_write+0x64>$/;"	l
ffff800000108032	kernel.asm	/^ffff800000108032:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000108036	kernel.asm	/^ffff800000108036:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108039	kernel.asm	/^ffff800000108039:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010803e	kernel.asm	/^ffff80000010803e:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000108045	kernel.asm	/^ffff800000108045:	80 ff ff $/;"	l
ffff800000108048	kernel.asm	/^ffff800000108048:	ff d0                	callq  *%rax$/;"	l
ffff80000010804a	kernel.asm	/^ffff80000010804a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010804c	kernel.asm	/^ffff80000010804c:	78 1f                	js     ffff80000010806d <sys_write+0x64>$/;"	l
ffff80000010804e	kernel.asm	/^ffff80000010804e:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108051	kernel.asm	/^ffff800000108051:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108055	kernel.asm	/^ffff800000108055:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108058	kernel.asm	/^ffff800000108058:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010805d	kernel.asm	/^ffff80000010805d:	48 b8 5e 7c 10 00 00 	movabs $0xffff800000107c5e,%rax$/;"	l
ffff800000108064	kernel.asm	/^ffff800000108064:	80 ff ff $/;"	l
ffff800000108067	kernel.asm	/^ffff800000108067:	ff d0                	callq  *%rax$/;"	l
ffff800000108069	kernel.asm	/^ffff800000108069:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010806b	kernel.asm	/^ffff80000010806b:	79 07                	jns    ffff800000108074 <sys_write+0x6b>$/;"	l
ffff80000010806d	kernel.asm	/^ffff80000010806d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108072	kernel.asm	/^ffff800000108072:	eb 1d                	jmp    ffff800000108091 <sys_write+0x88>$/;"	l
ffff800000108074	kernel.asm	/^ffff800000108074:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108077	kernel.asm	/^ffff800000108077:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff80000010807b	kernel.asm	/^ffff80000010807b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010807f	kernel.asm	/^ffff80000010807f:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000108082	kernel.asm	/^ffff800000108082:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108085	kernel.asm	/^ffff800000108085:	48 b8 90 1f 10 00 00 	movabs $0xffff800000101f90,%rax$/;"	l
ffff80000010808c	kernel.asm	/^ffff80000010808c:	80 ff ff $/;"	l
ffff80000010808f	kernel.asm	/^ffff80000010808f:	ff d0                	callq  *%rax$/;"	l
ffff800000108091	kernel.asm	/^ffff800000108091:	c9                   	leaveq $/;"	l
ffff800000108092	kernel.asm	/^ffff800000108092:	c3                   	retq   $/;"	l
ffff800000108093	kernel.asm	/^ffff800000108093 <sys_close>:$/;"	l
ffff800000108093	kernel.asm	/^ffff800000108093:	55                   	push   %rbp$/;"	l
ffff800000108094	kernel.asm	/^ffff800000108094:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108097	kernel.asm	/^ffff800000108097:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010809b	kernel.asm	/^ffff80000010809b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff80000010809f	kernel.asm	/^ffff80000010809f:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff8000001080a3	kernel.asm	/^ffff8000001080a3:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001080a6	kernel.asm	/^ffff8000001080a6:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001080ab	kernel.asm	/^ffff8000001080ab:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff8000001080b2	kernel.asm	/^ffff8000001080b2:	80 ff ff $/;"	l
ffff8000001080b5	kernel.asm	/^ffff8000001080b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001080b7	kernel.asm	/^ffff8000001080b7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001080b9	kernel.asm	/^ffff8000001080b9:	79 07                	jns    ffff8000001080c2 <sys_close+0x2f>$/;"	l
ffff8000001080bb	kernel.asm	/^ffff8000001080bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001080c0	kernel.asm	/^ffff8000001080c0:	eb 36                	jmp    ffff8000001080f8 <sys_close+0x65>$/;"	l
ffff8000001080c2	kernel.asm	/^ffff8000001080c2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001080c9	kernel.asm	/^ffff8000001080c9:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001080cd	kernel.asm	/^ffff8000001080cd:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001080d0	kernel.asm	/^ffff8000001080d0:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001080d3	kernel.asm	/^ffff8000001080d3:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001080d7	kernel.asm	/^ffff8000001080d7:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff8000001080de	kernel.asm	/^ffff8000001080de:	00 00 $/;"	l
ffff8000001080e0	kernel.asm	/^ffff8000001080e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001080e4	kernel.asm	/^ffff8000001080e4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001080e7	kernel.asm	/^ffff8000001080e7:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff8000001080ee	kernel.asm	/^ffff8000001080ee:	80 ff ff $/;"	l
ffff8000001080f1	kernel.asm	/^ffff8000001080f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001080f3	kernel.asm	/^ffff8000001080f3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001080f8	kernel.asm	/^ffff8000001080f8:	c9                   	leaveq $/;"	l
ffff8000001080f9	kernel.asm	/^ffff8000001080f9:	c3                   	retq   $/;"	l
ffff8000001080fa	kernel.asm	/^ffff8000001080fa <sys_ioctl>:$/;"	l
ffff8000001080fa	kernel.asm	/^ffff8000001080fa:	55                   	push   %rbp$/;"	l
ffff8000001080fb	kernel.asm	/^ffff8000001080fb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001080fe	kernel.asm	/^ffff8000001080fe:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108102	kernel.asm	/^ffff800000108102:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx$/;"	l
ffff800000108106	kernel.asm	/^ffff800000108106:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff80000010810a	kernel.asm	/^ffff80000010810a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010810d	kernel.asm	/^ffff80000010810d:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108112	kernel.asm	/^ffff800000108112:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff800000108119	kernel.asm	/^ffff800000108119:	80 ff ff $/;"	l
ffff80000010811c	kernel.asm	/^ffff80000010811c:	ff d0                	callq  *%rax$/;"	l
ffff80000010811e	kernel.asm	/^ffff80000010811e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108120	kernel.asm	/^ffff800000108120:	79 07                	jns    ffff800000108129 <sys_ioctl+0x2f>$/;"	l
ffff800000108122	kernel.asm	/^ffff800000108122:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108127	kernel.asm	/^ffff800000108127:	eb 61                	jmp    ffff80000010818a <sys_ioctl+0x90>$/;"	l
ffff800000108129	kernel.asm	/^ffff800000108129:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff80000010812d	kernel.asm	/^ffff80000010812d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108130	kernel.asm	/^ffff800000108130:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108135	kernel.asm	/^ffff800000108135:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff80000010813c	kernel.asm	/^ffff80000010813c:	80 ff ff $/;"	l
ffff80000010813f	kernel.asm	/^ffff80000010813f:	ff d0                	callq  *%rax$/;"	l
ffff800000108141	kernel.asm	/^ffff800000108141:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108143	kernel.asm	/^ffff800000108143:	79 07                	jns    ffff80000010814c <sys_ioctl+0x52>$/;"	l
ffff800000108145	kernel.asm	/^ffff800000108145:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010814a	kernel.asm	/^ffff80000010814a:	eb 3e                	jmp    ffff80000010818a <sys_ioctl+0x90>$/;"	l
ffff80000010814c	kernel.asm	/^ffff80000010814c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000108150	kernel.asm	/^ffff800000108150:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108153	kernel.asm	/^ffff800000108153:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108158	kernel.asm	/^ffff800000108158:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff80000010815f	kernel.asm	/^ffff80000010815f:	80 ff ff $/;"	l
ffff800000108162	kernel.asm	/^ffff800000108162:	ff d0                	callq  *%rax$/;"	l
ffff800000108164	kernel.asm	/^ffff800000108164:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108166	kernel.asm	/^ffff800000108166:	79 07                	jns    ffff80000010816f <sys_ioctl+0x75>$/;"	l
ffff800000108168	kernel.asm	/^ffff800000108168:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010816d	kernel.asm	/^ffff80000010816d:	eb 1b                	jmp    ffff80000010818a <sys_ioctl+0x90>$/;"	l
ffff80000010816f	kernel.asm	/^ffff80000010816f:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108172	kernel.asm	/^ffff800000108172:	8b 4d f8             	mov    -0x8(%rbp),%ecx$/;"	l
ffff800000108175	kernel.asm	/^ffff800000108175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000108179	kernel.asm	/^ffff800000108179:	89 ce                	mov    %ecx,%esi$/;"	l
ffff80000010817b	kernel.asm	/^ffff80000010817b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010817e	kernel.asm	/^ffff80000010817e:	48 b8 cb 1c 10 00 00 	movabs $0xffff800000101ccb,%rax$/;"	l
ffff800000108185	kernel.asm	/^ffff800000108185:	80 ff ff $/;"	l
ffff800000108188	kernel.asm	/^ffff800000108188:	ff d0                	callq  *%rax$/;"	l
ffff80000010818a	kernel.asm	/^ffff80000010818a:	c9                   	leaveq $/;"	l
ffff80000010818b	kernel.asm	/^ffff80000010818b:	c3                   	retq   $/;"	l
ffff80000010818c	kernel.asm	/^ffff80000010818c <sys_fstat>:$/;"	l
ffff80000010818c	kernel.asm	/^ffff80000010818c:	55                   	push   %rbp$/;"	l
ffff80000010818d	kernel.asm	/^ffff80000010818d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108190	kernel.asm	/^ffff800000108190:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108194	kernel.asm	/^ffff800000108194:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000108198	kernel.asm	/^ffff800000108198:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010819b	kernel.asm	/^ffff80000010819b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001081a0	kernel.asm	/^ffff8000001081a0:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001081a5	kernel.asm	/^ffff8000001081a5:	48 b8 12 7e 10 00 00 	movabs $0xffff800000107e12,%rax$/;"	l
ffff8000001081ac	kernel.asm	/^ffff8000001081ac:	80 ff ff $/;"	l
ffff8000001081af	kernel.asm	/^ffff8000001081af:	ff d0                	callq  *%rax$/;"	l
ffff8000001081b1	kernel.asm	/^ffff8000001081b1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001081b3	kernel.asm	/^ffff8000001081b3:	78 21                	js     ffff8000001081d6 <sys_fstat+0x4a>$/;"	l
ffff8000001081b5	kernel.asm	/^ffff8000001081b5:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001081b9	kernel.asm	/^ffff8000001081b9:	ba 14 00 00 00       	mov    $0x14,%edx$/;"	l
ffff8000001081be	kernel.asm	/^ffff8000001081be:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001081c1	kernel.asm	/^ffff8000001081c1:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001081c6	kernel.asm	/^ffff8000001081c6:	48 b8 5e 7c 10 00 00 	movabs $0xffff800000107c5e,%rax$/;"	l
ffff8000001081cd	kernel.asm	/^ffff8000001081cd:	80 ff ff $/;"	l
ffff8000001081d0	kernel.asm	/^ffff8000001081d0:	ff d0                	callq  *%rax$/;"	l
ffff8000001081d2	kernel.asm	/^ffff8000001081d2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001081d4	kernel.asm	/^ffff8000001081d4:	79 07                	jns    ffff8000001081dd <sys_fstat+0x51>$/;"	l
ffff8000001081d6	kernel.asm	/^ffff8000001081d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001081db	kernel.asm	/^ffff8000001081db:	eb 1a                	jmp    ffff8000001081f7 <sys_fstat+0x6b>$/;"	l
ffff8000001081dd	kernel.asm	/^ffff8000001081dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001081e1	kernel.asm	/^ffff8000001081e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001081e5	kernel.asm	/^ffff8000001081e5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001081e8	kernel.asm	/^ffff8000001081e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001081eb	kernel.asm	/^ffff8000001081eb:	48 b8 6e 1d 10 00 00 	movabs $0xffff800000101d6e,%rax$/;"	l
ffff8000001081f2	kernel.asm	/^ffff8000001081f2:	80 ff ff $/;"	l
ffff8000001081f5	kernel.asm	/^ffff8000001081f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001081f7	kernel.asm	/^ffff8000001081f7:	c9                   	leaveq $/;"	l
ffff8000001081f8	kernel.asm	/^ffff8000001081f8:	c3                   	retq   $/;"	l
ffff8000001081f9	kernel.asm	/^ffff8000001081f9 <sys_link>:$/;"	l
ffff8000001081f9	kernel.asm	/^ffff8000001081f9:	55                   	push   %rbp$/;"	l
ffff8000001081fa	kernel.asm	/^ffff8000001081fa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001081fd	kernel.asm	/^ffff8000001081fd:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000108201	kernel.asm	/^ffff800000108201:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000108205	kernel.asm	/^ffff800000108205:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108208	kernel.asm	/^ffff800000108208:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010820d	kernel.asm	/^ffff80000010820d:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108214	kernel.asm	/^ffff800000108214:	80 ff ff $/;"	l
ffff800000108217	kernel.asm	/^ffff800000108217:	ff d0                	callq  *%rax$/;"	l
ffff800000108219	kernel.asm	/^ffff800000108219:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010821b	kernel.asm	/^ffff80000010821b:	78 1c                	js     ffff800000108239 <sys_link+0x40>$/;"	l
ffff80000010821d	kernel.asm	/^ffff80000010821d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
ffff800000108221	kernel.asm	/^ffff800000108221:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108224	kernel.asm	/^ffff800000108224:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108229	kernel.asm	/^ffff800000108229:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108230	kernel.asm	/^ffff800000108230:	80 ff ff $/;"	l
ffff800000108233	kernel.asm	/^ffff800000108233:	ff d0                	callq  *%rax$/;"	l
ffff800000108235	kernel.asm	/^ffff800000108235:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108237	kernel.asm	/^ffff800000108237:	79 0a                	jns    ffff800000108243 <sys_link+0x4a>$/;"	l
ffff800000108239	kernel.asm	/^ffff800000108239:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010823e	kernel.asm	/^ffff80000010823e:	e9 0c 02 00 00       	jmpq   ffff80000010844f <sys_link+0x256>$/;"	l
ffff800000108243	kernel.asm	/^ffff800000108243:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108248	kernel.asm	/^ffff800000108248:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff80000010824f	kernel.asm	/^ffff80000010824f:	80 ff ff $/;"	l
ffff800000108252	kernel.asm	/^ffff800000108252:	ff d2                	callq  *%rdx$/;"	l
ffff800000108254	kernel.asm	/^ffff800000108254:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000108258	kernel.asm	/^ffff800000108258:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010825b	kernel.asm	/^ffff80000010825b:	48 b8 7d 37 10 00 00 	movabs $0xffff80000010377d,%rax$/;"	l
ffff800000108262	kernel.asm	/^ffff800000108262:	80 ff ff $/;"	l
ffff800000108265	kernel.asm	/^ffff800000108265:	ff d0                	callq  *%rax$/;"	l
ffff800000108267	kernel.asm	/^ffff800000108267:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010826b	kernel.asm	/^ffff80000010826b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108270	kernel.asm	/^ffff800000108270:	75 1b                	jne    ffff80000010828d <sys_link+0x94>$/;"	l
ffff800000108272	kernel.asm	/^ffff800000108272:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108277	kernel.asm	/^ffff800000108277:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff80000010827e	kernel.asm	/^ffff80000010827e:	80 ff ff $/;"	l
ffff800000108281	kernel.asm	/^ffff800000108281:	ff d2                	callq  *%rdx$/;"	l
ffff800000108283	kernel.asm	/^ffff800000108283:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108288	kernel.asm	/^ffff800000108288:	e9 c2 01 00 00       	jmpq   ffff80000010844f <sys_link+0x256>$/;"	l
ffff80000010828d	kernel.asm	/^ffff80000010828d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108291	kernel.asm	/^ffff800000108291:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108294	kernel.asm	/^ffff800000108294:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff80000010829b	kernel.asm	/^ffff80000010829b:	80 ff ff $/;"	l
ffff80000010829e	kernel.asm	/^ffff80000010829e:	ff d0                	callq  *%rax$/;"	l
ffff8000001082a0	kernel.asm	/^ffff8000001082a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082a4	kernel.asm	/^ffff8000001082a4:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001082ab	kernel.asm	/^ffff8000001082ab:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001082af	kernel.asm	/^ffff8000001082af:	75 2e                	jne    ffff8000001082df <sys_link+0xe6>$/;"	l
ffff8000001082b1	kernel.asm	/^ffff8000001082b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082b5	kernel.asm	/^ffff8000001082b5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082b8	kernel.asm	/^ffff8000001082b8:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff8000001082bf	kernel.asm	/^ffff8000001082bf:	80 ff ff $/;"	l
ffff8000001082c2	kernel.asm	/^ffff8000001082c2:	ff d0                	callq  *%rax$/;"	l
ffff8000001082c4	kernel.asm	/^ffff8000001082c4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001082c9	kernel.asm	/^ffff8000001082c9:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff8000001082d0	kernel.asm	/^ffff8000001082d0:	80 ff ff $/;"	l
ffff8000001082d3	kernel.asm	/^ffff8000001082d3:	ff d2                	callq  *%rdx$/;"	l
ffff8000001082d5	kernel.asm	/^ffff8000001082d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001082da	kernel.asm	/^ffff8000001082da:	e9 70 01 00 00       	jmpq   ffff80000010844f <sys_link+0x256>$/;"	l
ffff8000001082df	kernel.asm	/^ffff8000001082df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082e3	kernel.asm	/^ffff8000001082e3:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001082ea	kernel.asm	/^ffff8000001082ea:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff8000001082ed	kernel.asm	/^ffff8000001082ed:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001082ef	kernel.asm	/^ffff8000001082ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082f3	kernel.asm	/^ffff8000001082f3:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001082fa	kernel.asm	/^ffff8000001082fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001082fe	kernel.asm	/^ffff8000001082fe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108301	kernel.asm	/^ffff800000108301:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff800000108308	kernel.asm	/^ffff800000108308:	80 ff ff $/;"	l
ffff80000010830b	kernel.asm	/^ffff80000010830b:	ff d0                	callq  *%rax$/;"	l
ffff80000010830d	kernel.asm	/^ffff80000010830d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108311	kernel.asm	/^ffff800000108311:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108314	kernel.asm	/^ffff800000108314:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff80000010831b	kernel.asm	/^ffff80000010831b:	80 ff ff $/;"	l
ffff80000010831e	kernel.asm	/^ffff80000010831e:	ff d0                	callq  *%rax$/;"	l
ffff800000108320	kernel.asm	/^ffff800000108320:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000108324	kernel.asm	/^ffff800000108324:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000108328	kernel.asm	/^ffff800000108328:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010832b	kernel.asm	/^ffff80000010832b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010832e	kernel.asm	/^ffff80000010832e:	48 b8 a7 37 10 00 00 	movabs $0xffff8000001037a7,%rax$/;"	l
ffff800000108335	kernel.asm	/^ffff800000108335:	80 ff ff $/;"	l
ffff800000108338	kernel.asm	/^ffff800000108338:	ff d0                	callq  *%rax$/;"	l
ffff80000010833a	kernel.asm	/^ffff80000010833a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010833e	kernel.asm	/^ffff80000010833e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108343	kernel.asm	/^ffff800000108343:	0f 84 9b 00 00 00    	je     ffff8000001083e4 <sys_link+0x1eb>$/;"	l
ffff800000108349	kernel.asm	/^ffff800000108349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010834d	kernel.asm	/^ffff80000010834d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108350	kernel.asm	/^ffff800000108350:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000108357	kernel.asm	/^ffff800000108357:	80 ff ff $/;"	l
ffff80000010835a	kernel.asm	/^ffff80000010835a:	ff d0                	callq  *%rax$/;"	l
ffff80000010835c	kernel.asm	/^ffff80000010835c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108360	kernel.asm	/^ffff800000108360:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000108362	kernel.asm	/^ffff800000108362:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108366	kernel.asm	/^ffff800000108366:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000108368	kernel.asm	/^ffff800000108368:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010836a	kernel.asm	/^ffff80000010836a:	75 25                	jne    ffff800000108391 <sys_link+0x198>$/;"	l
ffff80000010836c	kernel.asm	/^ffff80000010836c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108370	kernel.asm	/^ffff800000108370:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108373	kernel.asm	/^ffff800000108373:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx$/;"	l
ffff800000108377	kernel.asm	/^ffff800000108377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010837b	kernel.asm	/^ffff80000010837b:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010837e	kernel.asm	/^ffff80000010837e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108381	kernel.asm	/^ffff800000108381:	48 b8 f3 33 10 00 00 	movabs $0xffff8000001033f3,%rax$/;"	l
ffff800000108388	kernel.asm	/^ffff800000108388:	80 ff ff $/;"	l
ffff80000010838b	kernel.asm	/^ffff80000010838b:	ff d0                	callq  *%rax$/;"	l
ffff80000010838d	kernel.asm	/^ffff80000010838d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010838f	kernel.asm	/^ffff80000010838f:	79 15                	jns    ffff8000001083a6 <sys_link+0x1ad>$/;"	l
ffff800000108391	kernel.asm	/^ffff800000108391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108395	kernel.asm	/^ffff800000108395:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108398	kernel.asm	/^ffff800000108398:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff80000010839f	kernel.asm	/^ffff80000010839f:	80 ff ff $/;"	l
ffff8000001083a2	kernel.asm	/^ffff8000001083a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001083a4	kernel.asm	/^ffff8000001083a4:	eb 3f                	jmp    ffff8000001083e5 <sys_link+0x1ec>$/;"	l
ffff8000001083a6	kernel.asm	/^ffff8000001083a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001083aa	kernel.asm	/^ffff8000001083aa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001083ad	kernel.asm	/^ffff8000001083ad:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff8000001083b4	kernel.asm	/^ffff8000001083b4:	80 ff ff $/;"	l
ffff8000001083b7	kernel.asm	/^ffff8000001083b7:	ff d0                	callq  *%rax$/;"	l
ffff8000001083b9	kernel.asm	/^ffff8000001083b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001083bd	kernel.asm	/^ffff8000001083bd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001083c0	kernel.asm	/^ffff8000001083c0:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff8000001083c7	kernel.asm	/^ffff8000001083c7:	80 ff ff $/;"	l
ffff8000001083ca	kernel.asm	/^ffff8000001083ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001083cc	kernel.asm	/^ffff8000001083cc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001083d1	kernel.asm	/^ffff8000001083d1:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff8000001083d8	kernel.asm	/^ffff8000001083d8:	80 ff ff $/;"	l
ffff8000001083db	kernel.asm	/^ffff8000001083db:	ff d2                	callq  *%rdx$/;"	l
ffff8000001083dd	kernel.asm	/^ffff8000001083dd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001083e2	kernel.asm	/^ffff8000001083e2:	eb 6b                	jmp    ffff80000010844f <sys_link+0x256>$/;"	l
ffff8000001083e4	kernel.asm	/^ffff8000001083e4:	90                   	nop$/;"	l
ffff8000001083e5	kernel.asm	/^ffff8000001083e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001083e9	kernel.asm	/^ffff8000001083e9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001083ec	kernel.asm	/^ffff8000001083ec:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001083f3	kernel.asm	/^ffff8000001083f3:	80 ff ff $/;"	l
ffff8000001083f6	kernel.asm	/^ffff8000001083f6:	ff d0                	callq  *%rax$/;"	l
ffff8000001083f8	kernel.asm	/^ffff8000001083f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001083fc	kernel.asm	/^ffff8000001083fc:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108403	kernel.asm	/^ffff800000108403:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000108406	kernel.asm	/^ffff800000108406:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108408	kernel.asm	/^ffff800000108408:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010840c	kernel.asm	/^ffff80000010840c:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108413	kernel.asm	/^ffff800000108413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108417	kernel.asm	/^ffff800000108417:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010841a	kernel.asm	/^ffff80000010841a:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff800000108421	kernel.asm	/^ffff800000108421:	80 ff ff $/;"	l
ffff800000108424	kernel.asm	/^ffff800000108424:	ff d0                	callq  *%rax$/;"	l
ffff800000108426	kernel.asm	/^ffff800000108426:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010842a	kernel.asm	/^ffff80000010842a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010842d	kernel.asm	/^ffff80000010842d:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108434	kernel.asm	/^ffff800000108434:	80 ff ff $/;"	l
ffff800000108437	kernel.asm	/^ffff800000108437:	ff d0                	callq  *%rax$/;"	l
ffff800000108439	kernel.asm	/^ffff800000108439:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010843e	kernel.asm	/^ffff80000010843e:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108445	kernel.asm	/^ffff800000108445:	80 ff ff $/;"	l
ffff800000108448	kernel.asm	/^ffff800000108448:	ff d2                	callq  *%rdx$/;"	l
ffff80000010844a	kernel.asm	/^ffff80000010844a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010844f	kernel.asm	/^ffff80000010844f:	c9                   	leaveq $/;"	l
ffff800000108450	kernel.asm	/^ffff800000108450:	c3                   	retq   $/;"	l
ffff800000108451	kernel.asm	/^ffff800000108451 <isdirempty>:$/;"	l
ffff800000108451	kernel.asm	/^ffff800000108451:	55                   	push   %rbp$/;"	l
ffff800000108452	kernel.asm	/^ffff800000108452:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108455	kernel.asm	/^ffff800000108455:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000108459	kernel.asm	/^ffff800000108459:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010845d	kernel.asm	/^ffff80000010845d:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)$/;"	l
ffff800000108464	kernel.asm	/^ffff800000108464:	eb 53                	jmp    ffff8000001084b9 <isdirempty+0x68>$/;"	l
ffff800000108466	kernel.asm	/^ffff800000108466:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000108469	kernel.asm	/^ffff800000108469:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010846d	kernel.asm	/^ffff80000010846d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000108471	kernel.asm	/^ffff800000108471:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000108476	kernel.asm	/^ffff800000108476:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108479	kernel.asm	/^ffff800000108479:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff800000108480	kernel.asm	/^ffff800000108480:	80 ff ff $/;"	l
ffff800000108483	kernel.asm	/^ffff800000108483:	ff d0                	callq  *%rax$/;"	l
ffff800000108485	kernel.asm	/^ffff800000108485:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000108488	kernel.asm	/^ffff800000108488:	74 16                	je     ffff8000001084a0 <isdirempty+0x4f>$/;"	l
ffff80000010848a	kernel.asm	/^ffff80000010848a:	48 bf 94 cf 10 00 00 	movabs $0xffff80000010cf94,%rdi$/;"	l
ffff800000108491	kernel.asm	/^ffff800000108491:	80 ff ff $/;"	l
ffff800000108494	kernel.asm	/^ffff800000108494:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010849b	kernel.asm	/^ffff80000010849b:	80 ff ff $/;"	l
ffff80000010849e	kernel.asm	/^ffff80000010849e:	ff d0                	callq  *%rax$/;"	l
ffff8000001084a0	kernel.asm	/^ffff8000001084a0:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff8000001084a4	kernel.asm	/^ffff8000001084a4:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001084a7	kernel.asm	/^ffff8000001084a7:	74 07                	je     ffff8000001084b0 <isdirempty+0x5f>$/;"	l
ffff8000001084a9	kernel.asm	/^ffff8000001084a9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001084ae	kernel.asm	/^ffff8000001084ae:	eb 1f                	jmp    ffff8000001084cf <isdirempty+0x7e>$/;"	l
ffff8000001084b0	kernel.asm	/^ffff8000001084b0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001084b3	kernel.asm	/^ffff8000001084b3:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff8000001084b6	kernel.asm	/^ffff8000001084b6:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001084b9	kernel.asm	/^ffff8000001084b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001084bd	kernel.asm	/^ffff8000001084bd:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001084c3	kernel.asm	/^ffff8000001084c3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001084c6	kernel.asm	/^ffff8000001084c6:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001084c8	kernel.asm	/^ffff8000001084c8:	77 9c                	ja     ffff800000108466 <isdirempty+0x15>$/;"	l
ffff8000001084ca	kernel.asm	/^ffff8000001084ca:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001084cf	kernel.asm	/^ffff8000001084cf:	c9                   	leaveq $/;"	l
ffff8000001084d0	kernel.asm	/^ffff8000001084d0:	c3                   	retq   $/;"	l
ffff8000001084d1	kernel.asm	/^ffff8000001084d1 <sys_unlink>:$/;"	l
ffff8000001084d1	kernel.asm	/^ffff8000001084d1:	55                   	push   %rbp$/;"	l
ffff8000001084d2	kernel.asm	/^ffff8000001084d2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001084d5	kernel.asm	/^ffff8000001084d5:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001084d9	kernel.asm	/^ffff8000001084d9:	48 8d 45 c8          	lea    -0x38(%rbp),%rax$/;"	l
ffff8000001084dd	kernel.asm	/^ffff8000001084dd:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001084e0	kernel.asm	/^ffff8000001084e0:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001084e5	kernel.asm	/^ffff8000001084e5:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff8000001084ec	kernel.asm	/^ffff8000001084ec:	80 ff ff $/;"	l
ffff8000001084ef	kernel.asm	/^ffff8000001084ef:	ff d0                	callq  *%rax$/;"	l
ffff8000001084f1	kernel.asm	/^ffff8000001084f1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001084f3	kernel.asm	/^ffff8000001084f3:	79 0a                	jns    ffff8000001084ff <sys_unlink+0x2e>$/;"	l
ffff8000001084f5	kernel.asm	/^ffff8000001084f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001084fa	kernel.asm	/^ffff8000001084fa:	e9 80 02 00 00       	jmpq   ffff80000010877f <sys_unlink+0x2ae>$/;"	l
ffff8000001084ff	kernel.asm	/^ffff8000001084ff:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108504	kernel.asm	/^ffff800000108504:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff80000010850b	kernel.asm	/^ffff80000010850b:	80 ff ff $/;"	l
ffff80000010850e	kernel.asm	/^ffff80000010850e:	ff d2                	callq  *%rdx$/;"	l
ffff800000108510	kernel.asm	/^ffff800000108510:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000108514	kernel.asm	/^ffff800000108514:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff800000108518	kernel.asm	/^ffff800000108518:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010851b	kernel.asm	/^ffff80000010851b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010851e	kernel.asm	/^ffff80000010851e:	48 b8 a7 37 10 00 00 	movabs $0xffff8000001037a7,%rax$/;"	l
ffff800000108525	kernel.asm	/^ffff800000108525:	80 ff ff $/;"	l
ffff800000108528	kernel.asm	/^ffff800000108528:	ff d0                	callq  *%rax$/;"	l
ffff80000010852a	kernel.asm	/^ffff80000010852a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010852e	kernel.asm	/^ffff80000010852e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108533	kernel.asm	/^ffff800000108533:	75 1b                	jne    ffff800000108550 <sys_unlink+0x7f>$/;"	l
ffff800000108535	kernel.asm	/^ffff800000108535:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010853a	kernel.asm	/^ffff80000010853a:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108541	kernel.asm	/^ffff800000108541:	80 ff ff $/;"	l
ffff800000108544	kernel.asm	/^ffff800000108544:	ff d2                	callq  *%rdx$/;"	l
ffff800000108546	kernel.asm	/^ffff800000108546:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010854b	kernel.asm	/^ffff80000010854b:	e9 2f 02 00 00       	jmpq   ffff80000010877f <sys_unlink+0x2ae>$/;"	l
ffff800000108550	kernel.asm	/^ffff800000108550:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108554	kernel.asm	/^ffff800000108554:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108557	kernel.asm	/^ffff800000108557:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff80000010855e	kernel.asm	/^ffff80000010855e:	80 ff ff $/;"	l
ffff800000108561	kernel.asm	/^ffff800000108561:	ff d0                	callq  *%rax$/;"	l
ffff800000108563	kernel.asm	/^ffff800000108563:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000108567	kernel.asm	/^ffff800000108567:	48 be a6 cf 10 00 00 	movabs $0xffff80000010cfa6,%rsi$/;"	l
ffff80000010856e	kernel.asm	/^ffff80000010856e:	80 ff ff $/;"	l
ffff800000108571	kernel.asm	/^ffff800000108571:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108574	kernel.asm	/^ffff800000108574:	48 b8 c2 32 10 00 00 	movabs $0xffff8000001032c2,%rax$/;"	l
ffff80000010857b	kernel.asm	/^ffff80000010857b:	80 ff ff $/;"	l
ffff80000010857e	kernel.asm	/^ffff80000010857e:	ff d0                	callq  *%rax$/;"	l
ffff800000108580	kernel.asm	/^ffff800000108580:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108582	kernel.asm	/^ffff800000108582:	0f 84 ce 01 00 00    	je     ffff800000108756 <sys_unlink+0x285>$/;"	l
ffff800000108588	kernel.asm	/^ffff800000108588:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff80000010858c	kernel.asm	/^ffff80000010858c:	48 be a8 cf 10 00 00 	movabs $0xffff80000010cfa8,%rsi$/;"	l
ffff800000108593	kernel.asm	/^ffff800000108593:	80 ff ff $/;"	l
ffff800000108596	kernel.asm	/^ffff800000108596:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108599	kernel.asm	/^ffff800000108599:	48 b8 c2 32 10 00 00 	movabs $0xffff8000001032c2,%rax$/;"	l
ffff8000001085a0	kernel.asm	/^ffff8000001085a0:	80 ff ff $/;"	l
ffff8000001085a3	kernel.asm	/^ffff8000001085a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001085a5	kernel.asm	/^ffff8000001085a5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001085a7	kernel.asm	/^ffff8000001085a7:	0f 84 a9 01 00 00    	je     ffff800000108756 <sys_unlink+0x285>$/;"	l
ffff8000001085ad	kernel.asm	/^ffff8000001085ad:	48 8d 55 c4          	lea    -0x3c(%rbp),%rdx$/;"	l
ffff8000001085b1	kernel.asm	/^ffff8000001085b1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001085b5	kernel.asm	/^ffff8000001085b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085b9	kernel.asm	/^ffff8000001085b9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001085bc	kernel.asm	/^ffff8000001085bc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085bf	kernel.asm	/^ffff8000001085bf:	48 b8 f3 32 10 00 00 	movabs $0xffff8000001032f3,%rax$/;"	l
ffff8000001085c6	kernel.asm	/^ffff8000001085c6:	80 ff ff $/;"	l
ffff8000001085c9	kernel.asm	/^ffff8000001085c9:	ff d0                	callq  *%rax$/;"	l
ffff8000001085cb	kernel.asm	/^ffff8000001085cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001085cf	kernel.asm	/^ffff8000001085cf:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001085d4	kernel.asm	/^ffff8000001085d4:	0f 84 7b 01 00 00    	je     ffff800000108755 <sys_unlink+0x284>$/;"	l
ffff8000001085da	kernel.asm	/^ffff8000001085da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001085de	kernel.asm	/^ffff8000001085de:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085e1	kernel.asm	/^ffff8000001085e1:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001085e8	kernel.asm	/^ffff8000001085e8:	80 ff ff $/;"	l
ffff8000001085eb	kernel.asm	/^ffff8000001085eb:	ff d0                	callq  *%rax$/;"	l
ffff8000001085ed	kernel.asm	/^ffff8000001085ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001085f1	kernel.asm	/^ffff8000001085f1:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001085f8	kernel.asm	/^ffff8000001085f8:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001085fb	kernel.asm	/^ffff8000001085fb:	7f 16                	jg     ffff800000108613 <sys_unlink+0x142>$/;"	l
ffff8000001085fd	kernel.asm	/^ffff8000001085fd:	48 bf ab cf 10 00 00 	movabs $0xffff80000010cfab,%rdi$/;"	l
ffff800000108604	kernel.asm	/^ffff800000108604:	80 ff ff $/;"	l
ffff800000108607	kernel.asm	/^ffff800000108607:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010860e	kernel.asm	/^ffff80000010860e:	80 ff ff $/;"	l
ffff800000108611	kernel.asm	/^ffff800000108611:	ff d0                	callq  *%rax$/;"	l
ffff800000108613	kernel.asm	/^ffff800000108613:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108617	kernel.asm	/^ffff800000108617:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010861e	kernel.asm	/^ffff80000010861e:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108622	kernel.asm	/^ffff800000108622:	75 2f                	jne    ffff800000108653 <sys_unlink+0x182>$/;"	l
ffff800000108624	kernel.asm	/^ffff800000108624:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108628	kernel.asm	/^ffff800000108628:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010862b	kernel.asm	/^ffff80000010862b:	48 b8 51 84 10 00 00 	movabs $0xffff800000108451,%rax$/;"	l
ffff800000108632	kernel.asm	/^ffff800000108632:	80 ff ff $/;"	l
ffff800000108635	kernel.asm	/^ffff800000108635:	ff d0                	callq  *%rax$/;"	l
ffff800000108637	kernel.asm	/^ffff800000108637:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108639	kernel.asm	/^ffff800000108639:	75 18                	jne    ffff800000108653 <sys_unlink+0x182>$/;"	l
ffff80000010863b	kernel.asm	/^ffff80000010863b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010863f	kernel.asm	/^ffff80000010863f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108642	kernel.asm	/^ffff800000108642:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108649	kernel.asm	/^ffff800000108649:	80 ff ff $/;"	l
ffff80000010864c	kernel.asm	/^ffff80000010864c:	ff d0                	callq  *%rax$/;"	l
ffff80000010864e	kernel.asm	/^ffff80000010864e:	e9 03 01 00 00       	jmpq   ffff800000108756 <sys_unlink+0x285>$/;"	l
ffff800000108653	kernel.asm	/^ffff800000108653:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000108657	kernel.asm	/^ffff800000108657:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010865c	kernel.asm	/^ffff80000010865c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108661	kernel.asm	/^ffff800000108661:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108664	kernel.asm	/^ffff800000108664:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010866b	kernel.asm	/^ffff80000010866b:	80 ff ff $/;"	l
ffff80000010866e	kernel.asm	/^ffff80000010866e:	ff d0                	callq  *%rax$/;"	l
ffff800000108670	kernel.asm	/^ffff800000108670:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000108673	kernel.asm	/^ffff800000108673:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff800000108677	kernel.asm	/^ffff800000108677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010867b	kernel.asm	/^ffff80000010867b:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000108680	kernel.asm	/^ffff800000108680:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108683	kernel.asm	/^ffff800000108683:	48 b8 5c 31 10 00 00 	movabs $0xffff80000010315c,%rax$/;"	l
ffff80000010868a	kernel.asm	/^ffff80000010868a:	80 ff ff $/;"	l
ffff80000010868d	kernel.asm	/^ffff80000010868d:	ff d0                	callq  *%rax$/;"	l
ffff80000010868f	kernel.asm	/^ffff80000010868f:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000108692	kernel.asm	/^ffff800000108692:	74 16                	je     ffff8000001086aa <sys_unlink+0x1d9>$/;"	l
ffff800000108694	kernel.asm	/^ffff800000108694:	48 bf bd cf 10 00 00 	movabs $0xffff80000010cfbd,%rdi$/;"	l
ffff80000010869b	kernel.asm	/^ffff80000010869b:	80 ff ff $/;"	l
ffff80000010869e	kernel.asm	/^ffff80000010869e:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001086a5	kernel.asm	/^ffff8000001086a5:	80 ff ff $/;"	l
ffff8000001086a8	kernel.asm	/^ffff8000001086a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001086aa	kernel.asm	/^ffff8000001086aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001086ae	kernel.asm	/^ffff8000001086ae:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001086b5	kernel.asm	/^ffff8000001086b5:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001086b9	kernel.asm	/^ffff8000001086b9:	75 2e                	jne    ffff8000001086e9 <sys_unlink+0x218>$/;"	l
ffff8000001086bb	kernel.asm	/^ffff8000001086bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001086bf	kernel.asm	/^ffff8000001086bf:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001086c6	kernel.asm	/^ffff8000001086c6:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001086c9	kernel.asm	/^ffff8000001086c9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001086cb	kernel.asm	/^ffff8000001086cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001086cf	kernel.asm	/^ffff8000001086cf:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001086d6	kernel.asm	/^ffff8000001086d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001086da	kernel.asm	/^ffff8000001086da:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001086dd	kernel.asm	/^ffff8000001086dd:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff8000001086e4	kernel.asm	/^ffff8000001086e4:	80 ff ff $/;"	l
ffff8000001086e7	kernel.asm	/^ffff8000001086e7:	ff d0                	callq  *%rax$/;"	l
ffff8000001086e9	kernel.asm	/^ffff8000001086e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001086ed	kernel.asm	/^ffff8000001086ed:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001086f0	kernel.asm	/^ffff8000001086f0:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff8000001086f7	kernel.asm	/^ffff8000001086f7:	80 ff ff $/;"	l
ffff8000001086fa	kernel.asm	/^ffff8000001086fa:	ff d0                	callq  *%rax$/;"	l
ffff8000001086fc	kernel.asm	/^ffff8000001086fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108700	kernel.asm	/^ffff800000108700:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108707	kernel.asm	/^ffff800000108707:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010870a	kernel.asm	/^ffff80000010870a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010870c	kernel.asm	/^ffff80000010870c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108710	kernel.asm	/^ffff800000108710:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108717	kernel.asm	/^ffff800000108717:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010871b	kernel.asm	/^ffff80000010871b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010871e	kernel.asm	/^ffff80000010871e:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff800000108725	kernel.asm	/^ffff800000108725:	80 ff ff $/;"	l
ffff800000108728	kernel.asm	/^ffff800000108728:	ff d0                	callq  *%rax$/;"	l
ffff80000010872a	kernel.asm	/^ffff80000010872a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010872e	kernel.asm	/^ffff80000010872e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108731	kernel.asm	/^ffff800000108731:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108738	kernel.asm	/^ffff800000108738:	80 ff ff $/;"	l
ffff80000010873b	kernel.asm	/^ffff80000010873b:	ff d0                	callq  *%rax$/;"	l
ffff80000010873d	kernel.asm	/^ffff80000010873d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108742	kernel.asm	/^ffff800000108742:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108749	kernel.asm	/^ffff800000108749:	80 ff ff $/;"	l
ffff80000010874c	kernel.asm	/^ffff80000010874c:	ff d2                	callq  *%rdx$/;"	l
ffff80000010874e	kernel.asm	/^ffff80000010874e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108753	kernel.asm	/^ffff800000108753:	eb 2a                	jmp    ffff80000010877f <sys_unlink+0x2ae>$/;"	l
ffff800000108755	kernel.asm	/^ffff800000108755:	90                   	nop$/;"	l
ffff800000108756	kernel.asm	/^ffff800000108756:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010875a	kernel.asm	/^ffff80000010875a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010875d	kernel.asm	/^ffff80000010875d:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108764	kernel.asm	/^ffff800000108764:	80 ff ff $/;"	l
ffff800000108767	kernel.asm	/^ffff800000108767:	ff d0                	callq  *%rax$/;"	l
ffff800000108769	kernel.asm	/^ffff800000108769:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010876e	kernel.asm	/^ffff80000010876e:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108775	kernel.asm	/^ffff800000108775:	80 ff ff $/;"	l
ffff800000108778	kernel.asm	/^ffff800000108778:	ff d2                	callq  *%rdx$/;"	l
ffff80000010877a	kernel.asm	/^ffff80000010877a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010877f	kernel.asm	/^ffff80000010877f:	c9                   	leaveq $/;"	l
ffff800000108780	kernel.asm	/^ffff800000108780:	c3                   	retq   $/;"	l
ffff800000108781	kernel.asm	/^ffff800000108781 <create>:$/;"	l
ffff800000108781	kernel.asm	/^ffff800000108781:	55                   	push   %rbp$/;"	l
ffff800000108782	kernel.asm	/^ffff800000108782:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108785	kernel.asm	/^ffff800000108785:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff800000108789	kernel.asm	/^ffff800000108789:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010878d	kernel.asm	/^ffff80000010878d:	89 c8                	mov    %ecx,%eax$/;"	l
ffff80000010878f	kernel.asm	/^ffff80000010878f:	66 89 75 c4          	mov    %si,-0x3c(%rbp)$/;"	l
ffff800000108793	kernel.asm	/^ffff800000108793:	66 89 55 c0          	mov    %dx,-0x40(%rbp)$/;"	l
ffff800000108797	kernel.asm	/^ffff800000108797:	66 89 45 bc          	mov    %ax,-0x44(%rbp)$/;"	l
ffff80000010879b	kernel.asm	/^ffff80000010879b:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff80000010879f	kernel.asm	/^ffff80000010879f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001087a3	kernel.asm	/^ffff8000001087a3:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001087a6	kernel.asm	/^ffff8000001087a6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087a9	kernel.asm	/^ffff8000001087a9:	48 b8 a7 37 10 00 00 	movabs $0xffff8000001037a7,%rax$/;"	l
ffff8000001087b0	kernel.asm	/^ffff8000001087b0:	80 ff ff $/;"	l
ffff8000001087b3	kernel.asm	/^ffff8000001087b3:	ff d0                	callq  *%rax$/;"	l
ffff8000001087b5	kernel.asm	/^ffff8000001087b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001087b9	kernel.asm	/^ffff8000001087b9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff8000001087be	kernel.asm	/^ffff8000001087be:	75 0a                	jne    ffff8000001087ca <create+0x49>$/;"	l
ffff8000001087c0	kernel.asm	/^ffff8000001087c0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001087c5	kernel.asm	/^ffff8000001087c5:	e9 1d 02 00 00       	jmpq   ffff8000001089e7 <create+0x266>$/;"	l
ffff8000001087ca	kernel.asm	/^ffff8000001087ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001087ce	kernel.asm	/^ffff8000001087ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087d1	kernel.asm	/^ffff8000001087d1:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001087d8	kernel.asm	/^ffff8000001087d8:	80 ff ff $/;"	l
ffff8000001087db	kernel.asm	/^ffff8000001087db:	ff d0                	callq  *%rax$/;"	l
ffff8000001087dd	kernel.asm	/^ffff8000001087dd:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx$/;"	l
ffff8000001087e1	kernel.asm	/^ffff8000001087e1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001087e5	kernel.asm	/^ffff8000001087e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001087e9	kernel.asm	/^ffff8000001087e9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001087ec	kernel.asm	/^ffff8000001087ec:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087ef	kernel.asm	/^ffff8000001087ef:	48 b8 f3 32 10 00 00 	movabs $0xffff8000001032f3,%rax$/;"	l
ffff8000001087f6	kernel.asm	/^ffff8000001087f6:	80 ff ff $/;"	l
ffff8000001087f9	kernel.asm	/^ffff8000001087f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001087fb	kernel.asm	/^ffff8000001087fb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001087ff	kernel.asm	/^ffff8000001087ff:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108804	kernel.asm	/^ffff800000108804:	74 64                	je     ffff80000010886a <create+0xe9>$/;"	l
ffff800000108806	kernel.asm	/^ffff800000108806:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010880a	kernel.asm	/^ffff80000010880a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010880d	kernel.asm	/^ffff80000010880d:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108814	kernel.asm	/^ffff800000108814:	80 ff ff $/;"	l
ffff800000108817	kernel.asm	/^ffff800000108817:	ff d0                	callq  *%rax$/;"	l
ffff800000108819	kernel.asm	/^ffff800000108819:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010881d	kernel.asm	/^ffff80000010881d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108820	kernel.asm	/^ffff800000108820:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000108827	kernel.asm	/^ffff800000108827:	80 ff ff $/;"	l
ffff80000010882a	kernel.asm	/^ffff80000010882a:	ff d0                	callq  *%rax$/;"	l
ffff80000010882c	kernel.asm	/^ffff80000010882c:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%rbp)$/;"	l
ffff800000108831	kernel.asm	/^ffff800000108831:	75 1a                	jne    ffff80000010884d <create+0xcc>$/;"	l
ffff800000108833	kernel.asm	/^ffff800000108833:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108837	kernel.asm	/^ffff800000108837:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010883e	kernel.asm	/^ffff80000010883e:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
ffff800000108842	kernel.asm	/^ffff800000108842:	75 09                	jne    ffff80000010884d <create+0xcc>$/;"	l
ffff800000108844	kernel.asm	/^ffff800000108844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108848	kernel.asm	/^ffff800000108848:	e9 9a 01 00 00       	jmpq   ffff8000001089e7 <create+0x266>$/;"	l
ffff80000010884d	kernel.asm	/^ffff80000010884d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108851	kernel.asm	/^ffff800000108851:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108854	kernel.asm	/^ffff800000108854:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff80000010885b	kernel.asm	/^ffff80000010885b:	80 ff ff $/;"	l
ffff80000010885e	kernel.asm	/^ffff80000010885e:	ff d0                	callq  *%rax$/;"	l
ffff800000108860	kernel.asm	/^ffff800000108860:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108865	kernel.asm	/^ffff800000108865:	e9 7d 01 00 00       	jmpq   ffff8000001089e7 <create+0x266>$/;"	l
ffff80000010886a	kernel.asm	/^ffff80000010886a:	0f bf 55 c4          	movswl -0x3c(%rbp),%edx$/;"	l
ffff80000010886e	kernel.asm	/^ffff80000010886e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108872	kernel.asm	/^ffff800000108872:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000108874	kernel.asm	/^ffff800000108874:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000108876	kernel.asm	/^ffff800000108876:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000108878	kernel.asm	/^ffff800000108878:	48 b8 26 26 10 00 00 	movabs $0xffff800000102626,%rax$/;"	l
ffff80000010887f	kernel.asm	/^ffff80000010887f:	80 ff ff $/;"	l
ffff800000108882	kernel.asm	/^ffff800000108882:	ff d0                	callq  *%rax$/;"	l
ffff800000108884	kernel.asm	/^ffff800000108884:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108888	kernel.asm	/^ffff800000108888:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010888d	kernel.asm	/^ffff80000010888d:	75 16                	jne    ffff8000001088a5 <create+0x124>$/;"	l
ffff80000010888f	kernel.asm	/^ffff80000010888f:	48 bf cc cf 10 00 00 	movabs $0xffff80000010cfcc,%rdi$/;"	l
ffff800000108896	kernel.asm	/^ffff800000108896:	80 ff ff $/;"	l
ffff800000108899	kernel.asm	/^ffff800000108899:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001088a0	kernel.asm	/^ffff8000001088a0:	80 ff ff $/;"	l
ffff8000001088a3	kernel.asm	/^ffff8000001088a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001088a5	kernel.asm	/^ffff8000001088a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088a9	kernel.asm	/^ffff8000001088a9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088ac	kernel.asm	/^ffff8000001088ac:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff8000001088b3	kernel.asm	/^ffff8000001088b3:	80 ff ff $/;"	l
ffff8000001088b6	kernel.asm	/^ffff8000001088b6:	ff d0                	callq  *%rax$/;"	l
ffff8000001088b8	kernel.asm	/^ffff8000001088b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088bc	kernel.asm	/^ffff8000001088bc:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx$/;"	l
ffff8000001088c0	kernel.asm	/^ffff8000001088c0:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff8000001088c7	kernel.asm	/^ffff8000001088c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088cb	kernel.asm	/^ffff8000001088cb:	0f b7 55 bc          	movzwl -0x44(%rbp),%edx$/;"	l
ffff8000001088cf	kernel.asm	/^ffff8000001088cf:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff8000001088d6	kernel.asm	/^ffff8000001088d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088da	kernel.asm	/^ffff8000001088da:	66 c7 80 9a 00 00 00 	movw   $0x1,0x9a(%rax)$/;"	l
ffff8000001088e1	kernel.asm	/^ffff8000001088e1:	01 00 $/;"	l
ffff8000001088e3	kernel.asm	/^ffff8000001088e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088e7	kernel.asm	/^ffff8000001088e7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088ea	kernel.asm	/^ffff8000001088ea:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff8000001088f1	kernel.asm	/^ffff8000001088f1:	80 ff ff $/;"	l
ffff8000001088f4	kernel.asm	/^ffff8000001088f4:	ff d0                	callq  *%rax$/;"	l
ffff8000001088f6	kernel.asm	/^ffff8000001088f6:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%rbp)$/;"	l
ffff8000001088fb	kernel.asm	/^ffff8000001088fb:	0f 85 94 00 00 00    	jne    ffff800000108995 <create+0x214>$/;"	l
ffff800000108901	kernel.asm	/^ffff800000108901:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108905	kernel.asm	/^ffff800000108905:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff80000010890c	kernel.asm	/^ffff80000010890c:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010890f	kernel.asm	/^ffff80000010890f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108911	kernel.asm	/^ffff800000108911:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108915	kernel.asm	/^ffff800000108915:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff80000010891c	kernel.asm	/^ffff80000010891c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108920	kernel.asm	/^ffff800000108920:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108923	kernel.asm	/^ffff800000108923:	48 b8 4b 27 10 00 00 	movabs $0xffff80000010274b,%rax$/;"	l
ffff80000010892a	kernel.asm	/^ffff80000010892a:	80 ff ff $/;"	l
ffff80000010892d	kernel.asm	/^ffff80000010892d:	ff d0                	callq  *%rax$/;"	l
ffff80000010892f	kernel.asm	/^ffff80000010892f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108933	kernel.asm	/^ffff800000108933:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108936	kernel.asm	/^ffff800000108936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010893a	kernel.asm	/^ffff80000010893a:	48 be a6 cf 10 00 00 	movabs $0xffff80000010cfa6,%rsi$/;"	l
ffff800000108941	kernel.asm	/^ffff800000108941:	80 ff ff $/;"	l
ffff800000108944	kernel.asm	/^ffff800000108944:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108947	kernel.asm	/^ffff800000108947:	48 b8 f3 33 10 00 00 	movabs $0xffff8000001033f3,%rax$/;"	l
ffff80000010894e	kernel.asm	/^ffff80000010894e:	80 ff ff $/;"	l
ffff800000108951	kernel.asm	/^ffff800000108951:	ff d0                	callq  *%rax$/;"	l
ffff800000108953	kernel.asm	/^ffff800000108953:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108955	kernel.asm	/^ffff800000108955:	78 28                	js     ffff80000010897f <create+0x1fe>$/;"	l
ffff800000108957	kernel.asm	/^ffff800000108957:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010895b	kernel.asm	/^ffff80000010895b:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff80000010895e	kernel.asm	/^ffff80000010895e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108962	kernel.asm	/^ffff800000108962:	48 be a8 cf 10 00 00 	movabs $0xffff80000010cfa8,%rsi$/;"	l
ffff800000108969	kernel.asm	/^ffff800000108969:	80 ff ff $/;"	l
ffff80000010896c	kernel.asm	/^ffff80000010896c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010896f	kernel.asm	/^ffff80000010896f:	48 b8 f3 33 10 00 00 	movabs $0xffff8000001033f3,%rax$/;"	l
ffff800000108976	kernel.asm	/^ffff800000108976:	80 ff ff $/;"	l
ffff800000108979	kernel.asm	/^ffff800000108979:	ff d0                	callq  *%rax$/;"	l
ffff80000010897b	kernel.asm	/^ffff80000010897b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010897d	kernel.asm	/^ffff80000010897d:	79 16                	jns    ffff800000108995 <create+0x214>$/;"	l
ffff80000010897f	kernel.asm	/^ffff80000010897f:	48 bf db cf 10 00 00 	movabs $0xffff80000010cfdb,%rdi$/;"	l
ffff800000108986	kernel.asm	/^ffff800000108986:	80 ff ff $/;"	l
ffff800000108989	kernel.asm	/^ffff800000108989:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff800000108990	kernel.asm	/^ffff800000108990:	80 ff ff $/;"	l
ffff800000108993	kernel.asm	/^ffff800000108993:	ff d0                	callq  *%rax$/;"	l
ffff800000108995	kernel.asm	/^ffff800000108995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108999	kernel.asm	/^ffff800000108999:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff80000010899c	kernel.asm	/^ffff80000010899c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001089a0	kernel.asm	/^ffff8000001089a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001089a4	kernel.asm	/^ffff8000001089a4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001089a7	kernel.asm	/^ffff8000001089a7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089aa	kernel.asm	/^ffff8000001089aa:	48 b8 f3 33 10 00 00 	movabs $0xffff8000001033f3,%rax$/;"	l
ffff8000001089b1	kernel.asm	/^ffff8000001089b1:	80 ff ff $/;"	l
ffff8000001089b4	kernel.asm	/^ffff8000001089b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001089b6	kernel.asm	/^ffff8000001089b6:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001089b8	kernel.asm	/^ffff8000001089b8:	79 16                	jns    ffff8000001089d0 <create+0x24f>$/;"	l
ffff8000001089ba	kernel.asm	/^ffff8000001089ba:	48 bf e7 cf 10 00 00 	movabs $0xffff80000010cfe7,%rdi$/;"	l
ffff8000001089c1	kernel.asm	/^ffff8000001089c1:	80 ff ff $/;"	l
ffff8000001089c4	kernel.asm	/^ffff8000001089c4:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001089cb	kernel.asm	/^ffff8000001089cb:	80 ff ff $/;"	l
ffff8000001089ce	kernel.asm	/^ffff8000001089ce:	ff d0                	callq  *%rax$/;"	l
ffff8000001089d0	kernel.asm	/^ffff8000001089d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001089d4	kernel.asm	/^ffff8000001089d4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089d7	kernel.asm	/^ffff8000001089d7:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff8000001089de	kernel.asm	/^ffff8000001089de:	80 ff ff $/;"	l
ffff8000001089e1	kernel.asm	/^ffff8000001089e1:	ff d0                	callq  *%rax$/;"	l
ffff8000001089e3	kernel.asm	/^ffff8000001089e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001089e7	kernel.asm	/^ffff8000001089e7:	c9                   	leaveq $/;"	l
ffff8000001089e8	kernel.asm	/^ffff8000001089e8:	c3                   	retq   $/;"	l
ffff8000001089e9	kernel.asm	/^ffff8000001089e9 <sys_open>:$/;"	l
ffff8000001089e9	kernel.asm	/^ffff8000001089e9:	55                   	push   %rbp$/;"	l
ffff8000001089ea	kernel.asm	/^ffff8000001089ea:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001089ed	kernel.asm	/^ffff8000001089ed:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001089f1	kernel.asm	/^ffff8000001089f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff8000001089f5	kernel.asm	/^ffff8000001089f5:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001089f8	kernel.asm	/^ffff8000001089f8:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001089fd	kernel.asm	/^ffff8000001089fd:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108a04	kernel.asm	/^ffff800000108a04:	80 ff ff $/;"	l
ffff800000108a07	kernel.asm	/^ffff800000108a07:	ff d0                	callq  *%rax$/;"	l
ffff800000108a09	kernel.asm	/^ffff800000108a09:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108a0b	kernel.asm	/^ffff800000108a0b:	78 1c                	js     ffff800000108a29 <sys_open+0x40>$/;"	l
ffff800000108a0d	kernel.asm	/^ffff800000108a0d:	48 8d 45 dc          	lea    -0x24(%rbp),%rax$/;"	l
ffff800000108a11	kernel.asm	/^ffff800000108a11:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108a14	kernel.asm	/^ffff800000108a14:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108a19	kernel.asm	/^ffff800000108a19:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000108a20	kernel.asm	/^ffff800000108a20:	80 ff ff $/;"	l
ffff800000108a23	kernel.asm	/^ffff800000108a23:	ff d0                	callq  *%rax$/;"	l
ffff800000108a25	kernel.asm	/^ffff800000108a25:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108a27	kernel.asm	/^ffff800000108a27:	79 0a                	jns    ffff800000108a33 <sys_open+0x4a>$/;"	l
ffff800000108a29	kernel.asm	/^ffff800000108a29:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108a2e	kernel.asm	/^ffff800000108a2e:	e9 fb 01 00 00       	jmpq   ffff800000108c2e <sys_open+0x245>$/;"	l
ffff800000108a33	kernel.asm	/^ffff800000108a33:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108a38	kernel.asm	/^ffff800000108a38:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000108a3f	kernel.asm	/^ffff800000108a3f:	80 ff ff $/;"	l
ffff800000108a42	kernel.asm	/^ffff800000108a42:	ff d2                	callq  *%rdx$/;"	l
ffff800000108a44	kernel.asm	/^ffff800000108a44:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108a47	kernel.asm	/^ffff800000108a47:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000108a4c	kernel.asm	/^ffff800000108a4c:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108a4e	kernel.asm	/^ffff800000108a4e:	74 4c                	je     ffff800000108a9c <sys_open+0xb3>$/;"	l
ffff800000108a50	kernel.asm	/^ffff800000108a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108a54	kernel.asm	/^ffff800000108a54:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108a59	kernel.asm	/^ffff800000108a59:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000108a5e	kernel.asm	/^ffff800000108a5e:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff800000108a63	kernel.asm	/^ffff800000108a63:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a66	kernel.asm	/^ffff800000108a66:	48 b8 81 87 10 00 00 	movabs $0xffff800000108781,%rax$/;"	l
ffff800000108a6d	kernel.asm	/^ffff800000108a6d:	80 ff ff $/;"	l
ffff800000108a70	kernel.asm	/^ffff800000108a70:	ff d0                	callq  *%rax$/;"	l
ffff800000108a72	kernel.asm	/^ffff800000108a72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108a76	kernel.asm	/^ffff800000108a76:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108a7b	kernel.asm	/^ffff800000108a7b:	0f 85 ad 00 00 00    	jne    ffff800000108b2e <sys_open+0x145>$/;"	l
ffff800000108a81	kernel.asm	/^ffff800000108a81:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108a86	kernel.asm	/^ffff800000108a86:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108a8d	kernel.asm	/^ffff800000108a8d:	80 ff ff $/;"	l
ffff800000108a90	kernel.asm	/^ffff800000108a90:	ff d2                	callq  *%rdx$/;"	l
ffff800000108a92	kernel.asm	/^ffff800000108a92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108a97	kernel.asm	/^ffff800000108a97:	e9 92 01 00 00       	jmpq   ffff800000108c2e <sys_open+0x245>$/;"	l
ffff800000108a9c	kernel.asm	/^ffff800000108a9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108aa0	kernel.asm	/^ffff800000108aa0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108aa3	kernel.asm	/^ffff800000108aa3:	48 b8 7d 37 10 00 00 	movabs $0xffff80000010377d,%rax$/;"	l
ffff800000108aaa	kernel.asm	/^ffff800000108aaa:	80 ff ff $/;"	l
ffff800000108aad	kernel.asm	/^ffff800000108aad:	ff d0                	callq  *%rax$/;"	l
ffff800000108aaf	kernel.asm	/^ffff800000108aaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108ab3	kernel.asm	/^ffff800000108ab3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108ab8	kernel.asm	/^ffff800000108ab8:	75 1b                	jne    ffff800000108ad5 <sys_open+0xec>$/;"	l
ffff800000108aba	kernel.asm	/^ffff800000108aba:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108abf	kernel.asm	/^ffff800000108abf:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108ac6	kernel.asm	/^ffff800000108ac6:	80 ff ff $/;"	l
ffff800000108ac9	kernel.asm	/^ffff800000108ac9:	ff d2                	callq  *%rdx$/;"	l
ffff800000108acb	kernel.asm	/^ffff800000108acb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108ad0	kernel.asm	/^ffff800000108ad0:	e9 59 01 00 00       	jmpq   ffff800000108c2e <sys_open+0x245>$/;"	l
ffff800000108ad5	kernel.asm	/^ffff800000108ad5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ad9	kernel.asm	/^ffff800000108ad9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108adc	kernel.asm	/^ffff800000108adc:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000108ae3	kernel.asm	/^ffff800000108ae3:	80 ff ff $/;"	l
ffff800000108ae6	kernel.asm	/^ffff800000108ae6:	ff d0                	callq  *%rax$/;"	l
ffff800000108ae8	kernel.asm	/^ffff800000108ae8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108aec	kernel.asm	/^ffff800000108aec:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108af3	kernel.asm	/^ffff800000108af3:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108af7	kernel.asm	/^ffff800000108af7:	75 35                	jne    ffff800000108b2e <sys_open+0x145>$/;"	l
ffff800000108af9	kernel.asm	/^ffff800000108af9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108afc	kernel.asm	/^ffff800000108afc:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108afe	kernel.asm	/^ffff800000108afe:	74 2e                	je     ffff800000108b2e <sys_open+0x145>$/;"	l
ffff800000108b00	kernel.asm	/^ffff800000108b00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108b04	kernel.asm	/^ffff800000108b04:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b07	kernel.asm	/^ffff800000108b07:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108b0e	kernel.asm	/^ffff800000108b0e:	80 ff ff $/;"	l
ffff800000108b11	kernel.asm	/^ffff800000108b11:	ff d0                	callq  *%rax$/;"	l
ffff800000108b13	kernel.asm	/^ffff800000108b13:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108b18	kernel.asm	/^ffff800000108b18:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108b1f	kernel.asm	/^ffff800000108b1f:	80 ff ff $/;"	l
ffff800000108b22	kernel.asm	/^ffff800000108b22:	ff d2                	callq  *%rdx$/;"	l
ffff800000108b24	kernel.asm	/^ffff800000108b24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108b29	kernel.asm	/^ffff800000108b29:	e9 00 01 00 00       	jmpq   ffff800000108c2e <sys_open+0x245>$/;"	l
ffff800000108b2e	kernel.asm	/^ffff800000108b2e:	48 b8 94 1a 10 00 00 	movabs $0xffff800000101a94,%rax$/;"	l
ffff800000108b35	kernel.asm	/^ffff800000108b35:	80 ff ff $/;"	l
ffff800000108b38	kernel.asm	/^ffff800000108b38:	ff d0                	callq  *%rax$/;"	l
ffff800000108b3a	kernel.asm	/^ffff800000108b3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108b3e	kernel.asm	/^ffff800000108b3e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108b43	kernel.asm	/^ffff800000108b43:	74 1c                	je     ffff800000108b61 <sys_open+0x178>$/;"	l
ffff800000108b45	kernel.asm	/^ffff800000108b45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b49	kernel.asm	/^ffff800000108b49:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b4c	kernel.asm	/^ffff800000108b4c:	48 b8 ac 7e 10 00 00 	movabs $0xffff800000107eac,%rax$/;"	l
ffff800000108b53	kernel.asm	/^ffff800000108b53:	80 ff ff $/;"	l
ffff800000108b56	kernel.asm	/^ffff800000108b56:	ff d0                	callq  *%rax$/;"	l
ffff800000108b58	kernel.asm	/^ffff800000108b58:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000108b5b	kernel.asm	/^ffff800000108b5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000108b5f	kernel.asm	/^ffff800000108b5f:	79 48                	jns    ffff800000108ba9 <sys_open+0x1c0>$/;"	l
ffff800000108b61	kernel.asm	/^ffff800000108b61:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108b66	kernel.asm	/^ffff800000108b66:	74 13                	je     ffff800000108b7b <sys_open+0x192>$/;"	l
ffff800000108b68	kernel.asm	/^ffff800000108b68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b6c	kernel.asm	/^ffff800000108b6c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b6f	kernel.asm	/^ffff800000108b6f:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff800000108b76	kernel.asm	/^ffff800000108b76:	80 ff ff $/;"	l
ffff800000108b79	kernel.asm	/^ffff800000108b79:	ff d0                	callq  *%rax$/;"	l
ffff800000108b7b	kernel.asm	/^ffff800000108b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108b7f	kernel.asm	/^ffff800000108b7f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b82	kernel.asm	/^ffff800000108b82:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108b89	kernel.asm	/^ffff800000108b89:	80 ff ff $/;"	l
ffff800000108b8c	kernel.asm	/^ffff800000108b8c:	ff d0                	callq  *%rax$/;"	l
ffff800000108b8e	kernel.asm	/^ffff800000108b8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108b93	kernel.asm	/^ffff800000108b93:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108b9a	kernel.asm	/^ffff800000108b9a:	80 ff ff $/;"	l
ffff800000108b9d	kernel.asm	/^ffff800000108b9d:	ff d2                	callq  *%rdx$/;"	l
ffff800000108b9f	kernel.asm	/^ffff800000108b9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108ba4	kernel.asm	/^ffff800000108ba4:	e9 85 00 00 00       	jmpq   ffff800000108c2e <sys_open+0x245>$/;"	l
ffff800000108ba9	kernel.asm	/^ffff800000108ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108bad	kernel.asm	/^ffff800000108bad:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108bb0	kernel.asm	/^ffff800000108bb0:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000108bb7	kernel.asm	/^ffff800000108bb7:	80 ff ff $/;"	l
ffff800000108bba	kernel.asm	/^ffff800000108bba:	ff d0                	callq  *%rax$/;"	l
ffff800000108bbc	kernel.asm	/^ffff800000108bbc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108bc1	kernel.asm	/^ffff800000108bc1:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108bc8	kernel.asm	/^ffff800000108bc8:	80 ff ff $/;"	l
ffff800000108bcb	kernel.asm	/^ffff800000108bcb:	ff d2                	callq  *%rdx$/;"	l
ffff800000108bcd	kernel.asm	/^ffff800000108bcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108bd1	kernel.asm	/^ffff800000108bd1:	c7 00 02 00 00 00    	movl   $0x2,(%rax)$/;"	l
ffff800000108bd7	kernel.asm	/^ffff800000108bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108bdb	kernel.asm	/^ffff800000108bdb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108bdf	kernel.asm	/^ffff800000108bdf:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff800000108be3	kernel.asm	/^ffff800000108be3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108be7	kernel.asm	/^ffff800000108be7:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)$/;"	l
ffff800000108bee	kernel.asm	/^ffff800000108bee:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108bf1	kernel.asm	/^ffff800000108bf1:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108bf4	kernel.asm	/^ffff800000108bf4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108bf6	kernel.asm	/^ffff800000108bf6:	0f 94 c0             	sete   %al$/;"	l
ffff800000108bf9	kernel.asm	/^ffff800000108bf9:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108bfb	kernel.asm	/^ffff800000108bfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108bff	kernel.asm	/^ffff800000108bff:	88 50 08             	mov    %dl,0x8(%rax)$/;"	l
ffff800000108c02	kernel.asm	/^ffff800000108c02:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108c05	kernel.asm	/^ffff800000108c05:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108c08	kernel.asm	/^ffff800000108c08:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c0a	kernel.asm	/^ffff800000108c0a:	75 0a                	jne    ffff800000108c16 <sys_open+0x22d>$/;"	l
ffff800000108c0c	kernel.asm	/^ffff800000108c0c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108c0f	kernel.asm	/^ffff800000108c0f:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000108c12	kernel.asm	/^ffff800000108c12:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c14	kernel.asm	/^ffff800000108c14:	74 07                	je     ffff800000108c1d <sys_open+0x234>$/;"	l
ffff800000108c16	kernel.asm	/^ffff800000108c16:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff800000108c1b	kernel.asm	/^ffff800000108c1b:	eb 05                	jmp    ffff800000108c22 <sys_open+0x239>$/;"	l
ffff800000108c1d	kernel.asm	/^ffff800000108c1d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c22	kernel.asm	/^ffff800000108c22:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108c24	kernel.asm	/^ffff800000108c24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108c28	kernel.asm	/^ffff800000108c28:	88 50 09             	mov    %dl,0x9(%rax)$/;"	l
ffff800000108c2b	kernel.asm	/^ffff800000108c2b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108c2e	kernel.asm	/^ffff800000108c2e:	c9                   	leaveq $/;"	l
ffff800000108c2f	kernel.asm	/^ffff800000108c2f:	c3                   	retq   $/;"	l
ffff800000108c30	kernel.asm	/^ffff800000108c30 <sys_mkdir>:$/;"	l
ffff800000108c30	kernel.asm	/^ffff800000108c30:	55                   	push   %rbp$/;"	l
ffff800000108c31	kernel.asm	/^ffff800000108c31:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108c34	kernel.asm	/^ffff800000108c34:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108c38	kernel.asm	/^ffff800000108c38:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c3d	kernel.asm	/^ffff800000108c3d:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000108c44	kernel.asm	/^ffff800000108c44:	80 ff ff $/;"	l
ffff800000108c47	kernel.asm	/^ffff800000108c47:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c49	kernel.asm	/^ffff800000108c49:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108c4d	kernel.asm	/^ffff800000108c4d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108c50	kernel.asm	/^ffff800000108c50:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108c55	kernel.asm	/^ffff800000108c55:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108c5c	kernel.asm	/^ffff800000108c5c:	80 ff ff $/;"	l
ffff800000108c5f	kernel.asm	/^ffff800000108c5f:	ff d0                	callq  *%rax$/;"	l
ffff800000108c61	kernel.asm	/^ffff800000108c61:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c63	kernel.asm	/^ffff800000108c63:	78 2d                	js     ffff800000108c92 <sys_mkdir+0x62>$/;"	l
ffff800000108c65	kernel.asm	/^ffff800000108c65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108c69	kernel.asm	/^ffff800000108c69:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108c6e	kernel.asm	/^ffff800000108c6e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000108c73	kernel.asm	/^ffff800000108c73:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000108c78	kernel.asm	/^ffff800000108c78:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108c7b	kernel.asm	/^ffff800000108c7b:	48 b8 81 87 10 00 00 	movabs $0xffff800000108781,%rax$/;"	l
ffff800000108c82	kernel.asm	/^ffff800000108c82:	80 ff ff $/;"	l
ffff800000108c85	kernel.asm	/^ffff800000108c85:	ff d0                	callq  *%rax$/;"	l
ffff800000108c87	kernel.asm	/^ffff800000108c87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108c8b	kernel.asm	/^ffff800000108c8b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108c90	kernel.asm	/^ffff800000108c90:	75 18                	jne    ffff800000108caa <sys_mkdir+0x7a>$/;"	l
ffff800000108c92	kernel.asm	/^ffff800000108c92:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c97	kernel.asm	/^ffff800000108c97:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108c9e	kernel.asm	/^ffff800000108c9e:	80 ff ff $/;"	l
ffff800000108ca1	kernel.asm	/^ffff800000108ca1:	ff d2                	callq  *%rdx$/;"	l
ffff800000108ca3	kernel.asm	/^ffff800000108ca3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108ca8	kernel.asm	/^ffff800000108ca8:	eb 29                	jmp    ffff800000108cd3 <sys_mkdir+0xa3>$/;"	l
ffff800000108caa	kernel.asm	/^ffff800000108caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108cae	kernel.asm	/^ffff800000108cae:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108cb1	kernel.asm	/^ffff800000108cb1:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108cb8	kernel.asm	/^ffff800000108cb8:	80 ff ff $/;"	l
ffff800000108cbb	kernel.asm	/^ffff800000108cbb:	ff d0                	callq  *%rax$/;"	l
ffff800000108cbd	kernel.asm	/^ffff800000108cbd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cc2	kernel.asm	/^ffff800000108cc2:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108cc9	kernel.asm	/^ffff800000108cc9:	80 ff ff $/;"	l
ffff800000108ccc	kernel.asm	/^ffff800000108ccc:	ff d2                	callq  *%rdx$/;"	l
ffff800000108cce	kernel.asm	/^ffff800000108cce:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cd3	kernel.asm	/^ffff800000108cd3:	c9                   	leaveq $/;"	l
ffff800000108cd4	kernel.asm	/^ffff800000108cd4:	c3                   	retq   $/;"	l
ffff800000108cd5	kernel.asm	/^ffff800000108cd5 <sys_mknod>:$/;"	l
ffff800000108cd5	kernel.asm	/^ffff800000108cd5:	55                   	push   %rbp$/;"	l
ffff800000108cd6	kernel.asm	/^ffff800000108cd6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108cd9	kernel.asm	/^ffff800000108cd9:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108cdd	kernel.asm	/^ffff800000108cdd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108ce2	kernel.asm	/^ffff800000108ce2:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000108ce9	kernel.asm	/^ffff800000108ce9:	80 ff ff $/;"	l
ffff800000108cec	kernel.asm	/^ffff800000108cec:	ff d2                	callq  *%rdx$/;"	l
ffff800000108cee	kernel.asm	/^ffff800000108cee:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108cf2	kernel.asm	/^ffff800000108cf2:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108cf5	kernel.asm	/^ffff800000108cf5:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108cfa	kernel.asm	/^ffff800000108cfa:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108d01	kernel.asm	/^ffff800000108d01:	80 ff ff $/;"	l
ffff800000108d04	kernel.asm	/^ffff800000108d04:	ff d0                	callq  *%rax$/;"	l
ffff800000108d06	kernel.asm	/^ffff800000108d06:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108d08	kernel.asm	/^ffff800000108d08:	78 67                	js     ffff800000108d71 <sys_mknod+0x9c>$/;"	l
ffff800000108d0a	kernel.asm	/^ffff800000108d0a:	48 8d 45 ec          	lea    -0x14(%rbp),%rax$/;"	l
ffff800000108d0e	kernel.asm	/^ffff800000108d0e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108d11	kernel.asm	/^ffff800000108d11:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108d16	kernel.asm	/^ffff800000108d16:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000108d1d	kernel.asm	/^ffff800000108d1d:	80 ff ff $/;"	l
ffff800000108d20	kernel.asm	/^ffff800000108d20:	ff d0                	callq  *%rax$/;"	l
ffff800000108d22	kernel.asm	/^ffff800000108d22:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108d24	kernel.asm	/^ffff800000108d24:	78 4b                	js     ffff800000108d71 <sys_mknod+0x9c>$/;"	l
ffff800000108d26	kernel.asm	/^ffff800000108d26:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108d2a	kernel.asm	/^ffff800000108d2a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108d2d	kernel.asm	/^ffff800000108d2d:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108d32	kernel.asm	/^ffff800000108d32:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff800000108d39	kernel.asm	/^ffff800000108d39:	80 ff ff $/;"	l
ffff800000108d3c	kernel.asm	/^ffff800000108d3c:	ff d0                	callq  *%rax$/;"	l
ffff800000108d3e	kernel.asm	/^ffff800000108d3e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108d40	kernel.asm	/^ffff800000108d40:	78 2f                	js     ffff800000108d71 <sys_mknod+0x9c>$/;"	l
ffff800000108d42	kernel.asm	/^ffff800000108d42:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000108d45	kernel.asm	/^ffff800000108d45:	0f bf c8             	movswl %ax,%ecx$/;"	l
ffff800000108d48	kernel.asm	/^ffff800000108d48:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108d4b	kernel.asm	/^ffff800000108d4b:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000108d4e	kernel.asm	/^ffff800000108d4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108d52	kernel.asm	/^ffff800000108d52:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000108d57	kernel.asm	/^ffff800000108d57:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d5a	kernel.asm	/^ffff800000108d5a:	48 b8 81 87 10 00 00 	movabs $0xffff800000108781,%rax$/;"	l
ffff800000108d61	kernel.asm	/^ffff800000108d61:	80 ff ff $/;"	l
ffff800000108d64	kernel.asm	/^ffff800000108d64:	ff d0                	callq  *%rax$/;"	l
ffff800000108d66	kernel.asm	/^ffff800000108d66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108d6a	kernel.asm	/^ffff800000108d6a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108d6f	kernel.asm	/^ffff800000108d6f:	75 18                	jne    ffff800000108d89 <sys_mknod+0xb4>$/;"	l
ffff800000108d71	kernel.asm	/^ffff800000108d71:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108d76	kernel.asm	/^ffff800000108d76:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108d7d	kernel.asm	/^ffff800000108d7d:	80 ff ff $/;"	l
ffff800000108d80	kernel.asm	/^ffff800000108d80:	ff d2                	callq  *%rdx$/;"	l
ffff800000108d82	kernel.asm	/^ffff800000108d82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108d87	kernel.asm	/^ffff800000108d87:	eb 29                	jmp    ffff800000108db2 <sys_mknod+0xdd>$/;"	l
ffff800000108d89	kernel.asm	/^ffff800000108d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d8d	kernel.asm	/^ffff800000108d8d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d90	kernel.asm	/^ffff800000108d90:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108d97	kernel.asm	/^ffff800000108d97:	80 ff ff $/;"	l
ffff800000108d9a	kernel.asm	/^ffff800000108d9a:	ff d0                	callq  *%rax$/;"	l
ffff800000108d9c	kernel.asm	/^ffff800000108d9c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108da1	kernel.asm	/^ffff800000108da1:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108da8	kernel.asm	/^ffff800000108da8:	80 ff ff $/;"	l
ffff800000108dab	kernel.asm	/^ffff800000108dab:	ff d2                	callq  *%rdx$/;"	l
ffff800000108dad	kernel.asm	/^ffff800000108dad:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108db2	kernel.asm	/^ffff800000108db2:	c9                   	leaveq $/;"	l
ffff800000108db3	kernel.asm	/^ffff800000108db3:	c3                   	retq   $/;"	l
ffff800000108db4	kernel.asm	/^ffff800000108db4 <sys_chdir>:$/;"	l
ffff800000108db4	kernel.asm	/^ffff800000108db4:	55                   	push   %rbp$/;"	l
ffff800000108db5	kernel.asm	/^ffff800000108db5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108db8	kernel.asm	/^ffff800000108db8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108dbc	kernel.asm	/^ffff800000108dbc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108dc1	kernel.asm	/^ffff800000108dc1:	48 ba 60 4e 10 00 00 	movabs $0xffff800000104e60,%rdx$/;"	l
ffff800000108dc8	kernel.asm	/^ffff800000108dc8:	80 ff ff $/;"	l
ffff800000108dcb	kernel.asm	/^ffff800000108dcb:	ff d2                	callq  *%rdx$/;"	l
ffff800000108dcd	kernel.asm	/^ffff800000108dcd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108dd1	kernel.asm	/^ffff800000108dd1:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108dd4	kernel.asm	/^ffff800000108dd4:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108dd9	kernel.asm	/^ffff800000108dd9:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108de0	kernel.asm	/^ffff800000108de0:	80 ff ff $/;"	l
ffff800000108de3	kernel.asm	/^ffff800000108de3:	ff d0                	callq  *%rax$/;"	l
ffff800000108de5	kernel.asm	/^ffff800000108de5:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108de7	kernel.asm	/^ffff800000108de7:	78 1e                	js     ffff800000108e07 <sys_chdir+0x53>$/;"	l
ffff800000108de9	kernel.asm	/^ffff800000108de9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108ded	kernel.asm	/^ffff800000108ded:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108df0	kernel.asm	/^ffff800000108df0:	48 b8 7d 37 10 00 00 	movabs $0xffff80000010377d,%rax$/;"	l
ffff800000108df7	kernel.asm	/^ffff800000108df7:	80 ff ff $/;"	l
ffff800000108dfa	kernel.asm	/^ffff800000108dfa:	ff d0                	callq  *%rax$/;"	l
ffff800000108dfc	kernel.asm	/^ffff800000108dfc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108e00	kernel.asm	/^ffff800000108e00:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108e05	kernel.asm	/^ffff800000108e05:	75 1b                	jne    ffff800000108e22 <sys_chdir+0x6e>$/;"	l
ffff800000108e07	kernel.asm	/^ffff800000108e07:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e0c	kernel.asm	/^ffff800000108e0c:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108e13	kernel.asm	/^ffff800000108e13:	80 ff ff $/;"	l
ffff800000108e16	kernel.asm	/^ffff800000108e16:	ff d2                	callq  *%rdx$/;"	l
ffff800000108e18	kernel.asm	/^ffff800000108e18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108e1d	kernel.asm	/^ffff800000108e1d:	e9 af 00 00 00       	jmpq   ffff800000108ed1 <sys_chdir+0x11d>$/;"	l
ffff800000108e22	kernel.asm	/^ffff800000108e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108e26	kernel.asm	/^ffff800000108e26:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e29	kernel.asm	/^ffff800000108e29:	48 b8 dd 29 10 00 00 	movabs $0xffff8000001029dd,%rax$/;"	l
ffff800000108e30	kernel.asm	/^ffff800000108e30:	80 ff ff $/;"	l
ffff800000108e33	kernel.asm	/^ffff800000108e33:	ff d0                	callq  *%rax$/;"	l
ffff800000108e35	kernel.asm	/^ffff800000108e35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108e39	kernel.asm	/^ffff800000108e39:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108e40	kernel.asm	/^ffff800000108e40:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108e44	kernel.asm	/^ffff800000108e44:	74 2b                	je     ffff800000108e71 <sys_chdir+0xbd>$/;"	l
ffff800000108e46	kernel.asm	/^ffff800000108e46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108e4a	kernel.asm	/^ffff800000108e4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e4d	kernel.asm	/^ffff800000108e4d:	48 b8 c1 2c 10 00 00 	movabs $0xffff800000102cc1,%rax$/;"	l
ffff800000108e54	kernel.asm	/^ffff800000108e54:	80 ff ff $/;"	l
ffff800000108e57	kernel.asm	/^ffff800000108e57:	ff d0                	callq  *%rax$/;"	l
ffff800000108e59	kernel.asm	/^ffff800000108e59:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e5e	kernel.asm	/^ffff800000108e5e:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108e65	kernel.asm	/^ffff800000108e65:	80 ff ff $/;"	l
ffff800000108e68	kernel.asm	/^ffff800000108e68:	ff d2                	callq  *%rdx$/;"	l
ffff800000108e6a	kernel.asm	/^ffff800000108e6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108e6f	kernel.asm	/^ffff800000108e6f:	eb 60                	jmp    ffff800000108ed1 <sys_chdir+0x11d>$/;"	l
ffff800000108e71	kernel.asm	/^ffff800000108e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108e75	kernel.asm	/^ffff800000108e75:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e78	kernel.asm	/^ffff800000108e78:	48 b8 6e 2b 10 00 00 	movabs $0xffff800000102b6e,%rax$/;"	l
ffff800000108e7f	kernel.asm	/^ffff800000108e7f:	80 ff ff $/;"	l
ffff800000108e82	kernel.asm	/^ffff800000108e82:	ff d0                	callq  *%rax$/;"	l
ffff800000108e84	kernel.asm	/^ffff800000108e84:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108e8b	kernel.asm	/^ffff800000108e8b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000108e8f	kernel.asm	/^ffff800000108e8f:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000108e96	kernel.asm	/^ffff800000108e96:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e99	kernel.asm	/^ffff800000108e99:	48 b8 d7 2b 10 00 00 	movabs $0xffff800000102bd7,%rax$/;"	l
ffff800000108ea0	kernel.asm	/^ffff800000108ea0:	80 ff ff $/;"	l
ffff800000108ea3	kernel.asm	/^ffff800000108ea3:	ff d0                	callq  *%rax$/;"	l
ffff800000108ea5	kernel.asm	/^ffff800000108ea5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108eaa	kernel.asm	/^ffff800000108eaa:	48 ba 36 4f 10 00 00 	movabs $0xffff800000104f36,%rdx$/;"	l
ffff800000108eb1	kernel.asm	/^ffff800000108eb1:	80 ff ff $/;"	l
ffff800000108eb4	kernel.asm	/^ffff800000108eb4:	ff d2                	callq  *%rdx$/;"	l
ffff800000108eb6	kernel.asm	/^ffff800000108eb6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108ebd	kernel.asm	/^ffff800000108ebd:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000108ec1	kernel.asm	/^ffff800000108ec1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108ec5	kernel.asm	/^ffff800000108ec5:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff800000108ecc	kernel.asm	/^ffff800000108ecc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108ed1	kernel.asm	/^ffff800000108ed1:	c9                   	leaveq $/;"	l
ffff800000108ed2	kernel.asm	/^ffff800000108ed2:	c3                   	retq   $/;"	l
ffff800000108ed3	kernel.asm	/^ffff800000108ed3 <sys_exec>:$/;"	l
ffff800000108ed3	kernel.asm	/^ffff800000108ed3:	55                   	push   %rbp$/;"	l
ffff800000108ed4	kernel.asm	/^ffff800000108ed4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108ed7	kernel.asm	/^ffff800000108ed7:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp$/;"	l
ffff800000108ede	kernel.asm	/^ffff800000108ede:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108ee2	kernel.asm	/^ffff800000108ee2:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108ee5	kernel.asm	/^ffff800000108ee5:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108eea	kernel.asm	/^ffff800000108eea:	48 b8 ee 7c 10 00 00 	movabs $0xffff800000107cee,%rax$/;"	l
ffff800000108ef1	kernel.asm	/^ffff800000108ef1:	80 ff ff $/;"	l
ffff800000108ef4	kernel.asm	/^ffff800000108ef4:	ff d0                	callq  *%rax$/;"	l
ffff800000108ef6	kernel.asm	/^ffff800000108ef6:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108ef8	kernel.asm	/^ffff800000108ef8:	78 24                	js     ffff800000108f1e <sys_exec+0x4b>$/;"	l
ffff800000108efa	kernel.asm	/^ffff800000108efa:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax$/;"	l
ffff800000108f01	kernel.asm	/^ffff800000108f01:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108f04	kernel.asm	/^ffff800000108f04:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108f09	kernel.asm	/^ffff800000108f09:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f0e	kernel.asm	/^ffff800000108f0e:	48 ba 2d 7c 10 00 00 	movabs $0xffff800000107c2d,%rdx$/;"	l
ffff800000108f15	kernel.asm	/^ffff800000108f15:	80 ff ff $/;"	l
ffff800000108f18	kernel.asm	/^ffff800000108f18:	ff d2                	callq  *%rdx$/;"	l
ffff800000108f1a	kernel.asm	/^ffff800000108f1a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108f1c	kernel.asm	/^ffff800000108f1c:	79 0a                	jns    ffff800000108f28 <sys_exec+0x55>$/;"	l
ffff800000108f1e	kernel.asm	/^ffff800000108f1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f23	kernel.asm	/^ffff800000108f23:	e9 f7 00 00 00       	jmpq   ffff80000010901f <sys_exec+0x14c>$/;"	l
ffff800000108f28	kernel.asm	/^ffff800000108f28:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff800000108f2f	kernel.asm	/^ffff800000108f2f:	ba 00 01 00 00       	mov    $0x100,%edx$/;"	l
ffff800000108f34	kernel.asm	/^ffff800000108f34:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108f39	kernel.asm	/^ffff800000108f39:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108f3c	kernel.asm	/^ffff800000108f3c:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff800000108f43	kernel.asm	/^ffff800000108f43:	80 ff ff $/;"	l
ffff800000108f46	kernel.asm	/^ffff800000108f46:	ff d0                	callq  *%rax$/;"	l
ffff800000108f48	kernel.asm	/^ffff800000108f48:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108f4f	kernel.asm	/^ffff800000108f4f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108f52	kernel.asm	/^ffff800000108f52:	83 f8 1f             	cmp    $0x1f,%eax$/;"	l
ffff800000108f55	kernel.asm	/^ffff800000108f55:	76 0a                	jbe    ffff800000108f61 <sys_exec+0x8e>$/;"	l
ffff800000108f57	kernel.asm	/^ffff800000108f57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f5c	kernel.asm	/^ffff800000108f5c:	e9 be 00 00 00       	jmpq   ffff80000010901f <sys_exec+0x14c>$/;"	l
ffff800000108f61	kernel.asm	/^ffff800000108f61:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108f64	kernel.asm	/^ffff800000108f64:	48 98                	cltq   $/;"	l
ffff800000108f66	kernel.asm	/^ffff800000108f66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000108f6d	kernel.asm	/^ffff800000108f6d:	00 $/;"	l
ffff800000108f6e	kernel.asm	/^ffff800000108f6e:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax$/;"	l
ffff800000108f75	kernel.asm	/^ffff800000108f75:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000108f78	kernel.asm	/^ffff800000108f78:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax$/;"	l
ffff800000108f7f	kernel.asm	/^ffff800000108f7f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108f82	kernel.asm	/^ffff800000108f82:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000108f85	kernel.asm	/^ffff800000108f85:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f8a	kernel.asm	/^ffff800000108f8a:	48 ba 52 7a 10 00 00 	movabs $0xffff800000107a52,%rdx$/;"	l
ffff800000108f91	kernel.asm	/^ffff800000108f91:	80 ff ff $/;"	l
ffff800000108f94	kernel.asm	/^ffff800000108f94:	ff d2                	callq  *%rdx$/;"	l
ffff800000108f96	kernel.asm	/^ffff800000108f96:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108f98	kernel.asm	/^ffff800000108f98:	79 07                	jns    ffff800000108fa1 <sys_exec+0xce>$/;"	l
ffff800000108f9a	kernel.asm	/^ffff800000108f9a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f9f	kernel.asm	/^ffff800000108f9f:	eb 7e                	jmp    ffff80000010901f <sys_exec+0x14c>$/;"	l
ffff800000108fa1	kernel.asm	/^ffff800000108fa1:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff800000108fa8	kernel.asm	/^ffff800000108fa8:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000108fab	kernel.asm	/^ffff800000108fab:	75 31                	jne    ffff800000108fde <sys_exec+0x10b>$/;"	l
ffff800000108fad	kernel.asm	/^ffff800000108fad:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108fb0	kernel.asm	/^ffff800000108fb0:	48 98                	cltq   $/;"	l
ffff800000108fb2	kernel.asm	/^ffff800000108fb2:	48 c7 84 c5 f0 fe ff 	movq   $0x0,-0x110(%rbp,%rax,8)$/;"	l
ffff800000108fb9	kernel.asm	/^ffff800000108fb9:	ff 00 00 00 00 $/;"	l
ffff800000108fbe	kernel.asm	/^ffff800000108fbe:	90                   	nop$/;"	l
ffff800000108fbf	kernel.asm	/^ffff800000108fbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108fc3	kernel.asm	/^ffff800000108fc3:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx$/;"	l
ffff800000108fca	kernel.asm	/^ffff800000108fca:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108fcd	kernel.asm	/^ffff800000108fcd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fd0	kernel.asm	/^ffff800000108fd0:	48 b8 4d 14 10 00 00 	movabs $0xffff80000010144d,%rax$/;"	l
ffff800000108fd7	kernel.asm	/^ffff800000108fd7:	80 ff ff $/;"	l
ffff800000108fda	kernel.asm	/^ffff800000108fda:	ff d0                	callq  *%rax$/;"	l
ffff800000108fdc	kernel.asm	/^ffff800000108fdc:	eb 41                	jmp    ffff80000010901f <sys_exec+0x14c>$/;"	l
ffff800000108fde	kernel.asm	/^ffff800000108fde:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff800000108fe5	kernel.asm	/^ffff800000108fe5:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000108fe8	kernel.asm	/^ffff800000108fe8:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000108feb	kernel.asm	/^ffff800000108feb:	48 c1 e2 03          	shl    $0x3,%rdx$/;"	l
ffff800000108fef	kernel.asm	/^ffff800000108fef:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000108ff2	kernel.asm	/^ffff800000108ff2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff800000108ff9	kernel.asm	/^ffff800000108ff9:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108ffc	kernel.asm	/^ffff800000108ffc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fff	kernel.asm	/^ffff800000108fff:	48 b8 ad 7a 10 00 00 	movabs $0xffff800000107aad,%rax$/;"	l
ffff800000109006	kernel.asm	/^ffff800000109006:	80 ff ff $/;"	l
ffff800000109009	kernel.asm	/^ffff800000109009:	ff d0                	callq  *%rax$/;"	l
ffff80000010900b	kernel.asm	/^ffff80000010900b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010900d	kernel.asm	/^ffff80000010900d:	79 07                	jns    ffff800000109016 <sys_exec+0x143>$/;"	l
ffff80000010900f	kernel.asm	/^ffff80000010900f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109014	kernel.asm	/^ffff800000109014:	eb 09                	jmp    ffff80000010901f <sys_exec+0x14c>$/;"	l
ffff800000109016	kernel.asm	/^ffff800000109016:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010901a	kernel.asm	/^ffff80000010901a:	e9 30 ff ff ff       	jmpq   ffff800000108f4f <sys_exec+0x7c>$/;"	l
ffff80000010901f	kernel.asm	/^ffff80000010901f:	c9                   	leaveq $/;"	l
ffff800000109020	kernel.asm	/^ffff800000109020:	c3                   	retq   $/;"	l
ffff800000109021	kernel.asm	/^ffff800000109021 <sys_pipe>:$/;"	l
ffff800000109021	kernel.asm	/^ffff800000109021:	55                   	push   %rbp$/;"	l
ffff800000109022	kernel.asm	/^ffff800000109022:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109025	kernel.asm	/^ffff800000109025:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109029	kernel.asm	/^ffff800000109029:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff80000010902d	kernel.asm	/^ffff80000010902d:	ba 08 00 00 00       	mov    $0x8,%edx$/;"	l
ffff800000109032	kernel.asm	/^ffff800000109032:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109035	kernel.asm	/^ffff800000109035:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010903a	kernel.asm	/^ffff80000010903a:	48 b8 5e 7c 10 00 00 	movabs $0xffff800000107c5e,%rax$/;"	l
ffff800000109041	kernel.asm	/^ffff800000109041:	80 ff ff $/;"	l
ffff800000109044	kernel.asm	/^ffff800000109044:	ff d0                	callq  *%rax$/;"	l
ffff800000109046	kernel.asm	/^ffff800000109046:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109048	kernel.asm	/^ffff800000109048:	79 0a                	jns    ffff800000109054 <sys_pipe+0x33>$/;"	l
ffff80000010904a	kernel.asm	/^ffff80000010904a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010904f	kernel.asm	/^ffff80000010904f:	e9 d3 00 00 00       	jmpq   ffff800000109127 <sys_pipe+0x106>$/;"	l
ffff800000109054	kernel.asm	/^ffff800000109054:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000109058	kernel.asm	/^ffff800000109058:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff80000010905c	kernel.asm	/^ffff80000010905c:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010905f	kernel.asm	/^ffff80000010905f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109062	kernel.asm	/^ffff800000109062:	48 b8 70 5b 10 00 00 	movabs $0xffff800000105b70,%rax$/;"	l
ffff800000109069	kernel.asm	/^ffff800000109069:	80 ff ff $/;"	l
ffff80000010906c	kernel.asm	/^ffff80000010906c:	ff d0                	callq  *%rax$/;"	l
ffff80000010906e	kernel.asm	/^ffff80000010906e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109070	kernel.asm	/^ffff800000109070:	79 0a                	jns    ffff80000010907c <sys_pipe+0x5b>$/;"	l
ffff800000109072	kernel.asm	/^ffff800000109072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109077	kernel.asm	/^ffff800000109077:	e9 ab 00 00 00       	jmpq   ffff800000109127 <sys_pipe+0x106>$/;"	l
ffff80000010907c	kernel.asm	/^ffff80000010907c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)$/;"	l
ffff800000109083	kernel.asm	/^ffff800000109083:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109087	kernel.asm	/^ffff800000109087:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010908a	kernel.asm	/^ffff80000010908a:	48 b8 ac 7e 10 00 00 	movabs $0xffff800000107eac,%rax$/;"	l
ffff800000109091	kernel.asm	/^ffff800000109091:	80 ff ff $/;"	l
ffff800000109094	kernel.asm	/^ffff800000109094:	ff d0                	callq  *%rax$/;"	l
ffff800000109096	kernel.asm	/^ffff800000109096:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109099	kernel.asm	/^ffff800000109099:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010909d	kernel.asm	/^ffff80000010909d:	78 1c                	js     ffff8000001090bb <sys_pipe+0x9a>$/;"	l
ffff80000010909f	kernel.asm	/^ffff80000010909f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001090a3	kernel.asm	/^ffff8000001090a3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001090a6	kernel.asm	/^ffff8000001090a6:	48 b8 ac 7e 10 00 00 	movabs $0xffff800000107eac,%rax$/;"	l
ffff8000001090ad	kernel.asm	/^ffff8000001090ad:	80 ff ff $/;"	l
ffff8000001090b0	kernel.asm	/^ffff8000001090b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001090b2	kernel.asm	/^ffff8000001090b2:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001090b5	kernel.asm	/^ffff8000001090b5:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001090b9	kernel.asm	/^ffff8000001090b9:	79 51                	jns    ffff80000010910c <sys_pipe+0xeb>$/;"	l
ffff8000001090bb	kernel.asm	/^ffff8000001090bb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001090bf	kernel.asm	/^ffff8000001090bf:	78 1e                	js     ffff8000001090df <sys_pipe+0xbe>$/;"	l
ffff8000001090c1	kernel.asm	/^ffff8000001090c1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001090c8	kernel.asm	/^ffff8000001090c8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001090cc	kernel.asm	/^ffff8000001090cc:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001090cf	kernel.asm	/^ffff8000001090cf:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001090d2	kernel.asm	/^ffff8000001090d2:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001090d6	kernel.asm	/^ffff8000001090d6:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff8000001090dd	kernel.asm	/^ffff8000001090dd:	00 00 $/;"	l
ffff8000001090df	kernel.asm	/^ffff8000001090df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001090e3	kernel.asm	/^ffff8000001090e3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001090e6	kernel.asm	/^ffff8000001090e6:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff8000001090ed	kernel.asm	/^ffff8000001090ed:	80 ff ff $/;"	l
ffff8000001090f0	kernel.asm	/^ffff8000001090f0:	ff d0                	callq  *%rax$/;"	l
ffff8000001090f2	kernel.asm	/^ffff8000001090f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001090f6	kernel.asm	/^ffff8000001090f6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001090f9	kernel.asm	/^ffff8000001090f9:	48 b8 96 1b 10 00 00 	movabs $0xffff800000101b96,%rax$/;"	l
ffff800000109100	kernel.asm	/^ffff800000109100:	80 ff ff $/;"	l
ffff800000109103	kernel.asm	/^ffff800000109103:	ff d0                	callq  *%rax$/;"	l
ffff800000109105	kernel.asm	/^ffff800000109105:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010910a	kernel.asm	/^ffff80000010910a:	eb 1b                	jmp    ffff800000109127 <sys_pipe+0x106>$/;"	l
ffff80000010910c	kernel.asm	/^ffff80000010910c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000109110	kernel.asm	/^ffff800000109110:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000109113	kernel.asm	/^ffff800000109113:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109115	kernel.asm	/^ffff800000109115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000109119	kernel.asm	/^ffff800000109119:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff80000010911d	kernel.asm	/^ffff80000010911d:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000109120	kernel.asm	/^ffff800000109120:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff800000109122	kernel.asm	/^ffff800000109122:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109127	kernel.asm	/^ffff800000109127:	c9                   	leaveq $/;"	l
ffff800000109128	kernel.asm	/^ffff800000109128:	c3                   	retq   $/;"	l
ffff800000109129	kernel.asm	/^ffff800000109129 <sys_fork>:$/;"	l
ffff800000109129	kernel.asm	/^ffff800000109129:	55                   	push   %rbp$/;"	l
ffff80000010912a	kernel.asm	/^ffff80000010912a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010912d	kernel.asm	/^ffff80000010912d:	48 b8 b6 64 10 00 00 	movabs $0xffff8000001064b6,%rax$/;"	l
ffff800000109134	kernel.asm	/^ffff800000109134:	80 ff ff $/;"	l
ffff800000109137	kernel.asm	/^ffff800000109137:	ff d0                	callq  *%rax$/;"	l
ffff800000109139	kernel.asm	/^ffff800000109139:	5d                   	pop    %rbp$/;"	l
ffff80000010913a	kernel.asm	/^ffff80000010913a:	c3                   	retq   $/;"	l
ffff80000010913b	kernel.asm	/^ffff80000010913b <sys_exit>:$/;"	l
ffff80000010913b	kernel.asm	/^ffff80000010913b:	55                   	push   %rbp$/;"	l
ffff80000010913c	kernel.asm	/^ffff80000010913c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010913f	kernel.asm	/^ffff80000010913f:	48 b8 d7 66 10 00 00 	movabs $0xffff8000001066d7,%rax$/;"	l
ffff800000109146	kernel.asm	/^ffff800000109146:	80 ff ff $/;"	l
ffff800000109149	kernel.asm	/^ffff800000109149:	ff d0                	callq  *%rax$/;"	l
ffff80000010914b	kernel.asm	/^ffff80000010914b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109150	kernel.asm	/^ffff800000109150:	5d                   	pop    %rbp$/;"	l
ffff800000109151	kernel.asm	/^ffff800000109151:	c3                   	retq   $/;"	l
ffff800000109152	kernel.asm	/^ffff800000109152 <sys_wait>:$/;"	l
ffff800000109152	kernel.asm	/^ffff800000109152:	55                   	push   %rbp$/;"	l
ffff800000109153	kernel.asm	/^ffff800000109153:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109156	kernel.asm	/^ffff800000109156:	48 b8 c9 68 10 00 00 	movabs $0xffff8000001068c9,%rax$/;"	l
ffff80000010915d	kernel.asm	/^ffff80000010915d:	80 ff ff $/;"	l
ffff800000109160	kernel.asm	/^ffff800000109160:	ff d0                	callq  *%rax$/;"	l
ffff800000109162	kernel.asm	/^ffff800000109162:	5d                   	pop    %rbp$/;"	l
ffff800000109163	kernel.asm	/^ffff800000109163:	c3                   	retq   $/;"	l
ffff800000109164	kernel.asm	/^ffff800000109164 <sys_kill>:$/;"	l
ffff800000109164	kernel.asm	/^ffff800000109164:	55                   	push   %rbp$/;"	l
ffff800000109165	kernel.asm	/^ffff800000109165:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109168	kernel.asm	/^ffff800000109168:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010916c	kernel.asm	/^ffff80000010916c:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff800000109170	kernel.asm	/^ffff800000109170:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109173	kernel.asm	/^ffff800000109173:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000109178	kernel.asm	/^ffff800000109178:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff80000010917f	kernel.asm	/^ffff80000010917f:	80 ff ff $/;"	l
ffff800000109182	kernel.asm	/^ffff800000109182:	ff d0                	callq  *%rax$/;"	l
ffff800000109184	kernel.asm	/^ffff800000109184:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109186	kernel.asm	/^ffff800000109186:	79 07                	jns    ffff80000010918f <sys_kill+0x2b>$/;"	l
ffff800000109188	kernel.asm	/^ffff800000109188:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010918d	kernel.asm	/^ffff80000010918d:	eb 11                	jmp    ffff8000001091a0 <sys_kill+0x3c>$/;"	l
ffff80000010918f	kernel.asm	/^ffff80000010918f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109192	kernel.asm	/^ffff800000109192:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109194	kernel.asm	/^ffff800000109194:	48 b8 d4 6e 10 00 00 	movabs $0xffff800000106ed4,%rax$/;"	l
ffff80000010919b	kernel.asm	/^ffff80000010919b:	80 ff ff $/;"	l
ffff80000010919e	kernel.asm	/^ffff80000010919e:	ff d0                	callq  *%rax$/;"	l
ffff8000001091a0	kernel.asm	/^ffff8000001091a0:	c9                   	leaveq $/;"	l
ffff8000001091a1	kernel.asm	/^ffff8000001091a1:	c3                   	retq   $/;"	l
ffff8000001091a2	kernel.asm	/^ffff8000001091a2 <sys_getpid>:$/;"	l
ffff8000001091a2	kernel.asm	/^ffff8000001091a2:	55                   	push   %rbp$/;"	l
ffff8000001091a3	kernel.asm	/^ffff8000001091a3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001091a6	kernel.asm	/^ffff8000001091a6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001091ad	kernel.asm	/^ffff8000001091ad:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001091b1	kernel.asm	/^ffff8000001091b1:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001091b4	kernel.asm	/^ffff8000001091b4:	5d                   	pop    %rbp$/;"	l
ffff8000001091b5	kernel.asm	/^ffff8000001091b5:	c3                   	retq   $/;"	l
ffff8000001091b6	kernel.asm	/^ffff8000001091b6 <sys_sbrk>:$/;"	l
ffff8000001091b6	kernel.asm	/^ffff8000001091b6:	55                   	push   %rbp$/;"	l
ffff8000001091b7	kernel.asm	/^ffff8000001091b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001091ba	kernel.asm	/^ffff8000001091ba:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001091be	kernel.asm	/^ffff8000001091be:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001091c2	kernel.asm	/^ffff8000001091c2:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001091c5	kernel.asm	/^ffff8000001091c5:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001091ca	kernel.asm	/^ffff8000001091ca:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff8000001091d1	kernel.asm	/^ffff8000001091d1:	80 ff ff $/;"	l
ffff8000001091d4	kernel.asm	/^ffff8000001091d4:	ff d0                	callq  *%rax$/;"	l
ffff8000001091d6	kernel.asm	/^ffff8000001091d6:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001091d8	kernel.asm	/^ffff8000001091d8:	79 07                	jns    ffff8000001091e1 <sys_sbrk+0x2b>$/;"	l
ffff8000001091da	kernel.asm	/^ffff8000001091da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001091df	kernel.asm	/^ffff8000001091df:	eb 30                	jmp    ffff800000109211 <sys_sbrk+0x5b>$/;"	l
ffff8000001091e1	kernel.asm	/^ffff8000001091e1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001091e8	kernel.asm	/^ffff8000001091e8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001091ec	kernel.asm	/^ffff8000001091ec:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001091ef	kernel.asm	/^ffff8000001091ef:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001091f2	kernel.asm	/^ffff8000001091f2:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001091f5	kernel.asm	/^ffff8000001091f5:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001091f7	kernel.asm	/^ffff8000001091f7:	48 b8 e3 63 10 00 00 	movabs $0xffff8000001063e3,%rax$/;"	l
ffff8000001091fe	kernel.asm	/^ffff8000001091fe:	80 ff ff $/;"	l
ffff800000109201	kernel.asm	/^ffff800000109201:	ff d0                	callq  *%rax$/;"	l
ffff800000109203	kernel.asm	/^ffff800000109203:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109205	kernel.asm	/^ffff800000109205:	79 07                	jns    ffff80000010920e <sys_sbrk+0x58>$/;"	l
ffff800000109207	kernel.asm	/^ffff800000109207:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010920c	kernel.asm	/^ffff80000010920c:	eb 03                	jmp    ffff800000109211 <sys_sbrk+0x5b>$/;"	l
ffff80000010920e	kernel.asm	/^ffff80000010920e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109211	kernel.asm	/^ffff800000109211:	c9                   	leaveq $/;"	l
ffff800000109212	kernel.asm	/^ffff800000109212:	c3                   	retq   $/;"	l
ffff800000109213	kernel.asm	/^ffff800000109213 <sys_sleep>:$/;"	l
ffff800000109213	kernel.asm	/^ffff800000109213:	55                   	push   %rbp$/;"	l
ffff800000109214	kernel.asm	/^ffff800000109214:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109217	kernel.asm	/^ffff800000109217:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010921b	kernel.asm	/^ffff80000010921b:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff80000010921f	kernel.asm	/^ffff80000010921f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109222	kernel.asm	/^ffff800000109222:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000109227	kernel.asm	/^ffff800000109227:	48 b8 fe 7b 10 00 00 	movabs $0xffff800000107bfe,%rax$/;"	l
ffff80000010922e	kernel.asm	/^ffff80000010922e:	80 ff ff $/;"	l
ffff800000109231	kernel.asm	/^ffff800000109231:	ff d0                	callq  *%rax$/;"	l
ffff800000109233	kernel.asm	/^ffff800000109233:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109235	kernel.asm	/^ffff800000109235:	79 0a                	jns    ffff800000109241 <sys_sleep+0x2e>$/;"	l
ffff800000109237	kernel.asm	/^ffff800000109237:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010923c	kernel.asm	/^ffff80000010923c:	e9 a7 00 00 00       	jmpq   ffff8000001092e8 <sys_sleep+0xd5>$/;"	l
ffff800000109241	kernel.asm	/^ffff800000109241:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff800000109248	kernel.asm	/^ffff800000109248:	80 ff ff $/;"	l
ffff80000010924b	kernel.asm	/^ffff80000010924b:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000109252	kernel.asm	/^ffff800000109252:	80 ff ff $/;"	l
ffff800000109255	kernel.asm	/^ffff800000109255:	ff d0                	callq  *%rax$/;"	l
ffff800000109257	kernel.asm	/^ffff800000109257:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff80000010925e	kernel.asm	/^ffff80000010925e:	80 ff ff $/;"	l
ffff800000109261	kernel.asm	/^ffff800000109261:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109263	kernel.asm	/^ffff800000109263:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109266	kernel.asm	/^ffff800000109266:	eb 4f                	jmp    ffff8000001092b7 <sys_sleep+0xa4>$/;"	l
ffff800000109268	kernel.asm	/^ffff800000109268:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010926f	kernel.asm	/^ffff80000010926f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109273	kernel.asm	/^ffff800000109273:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109276	kernel.asm	/^ffff800000109276:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109278	kernel.asm	/^ffff800000109278:	74 1d                	je     ffff800000109297 <sys_sleep+0x84>$/;"	l
ffff80000010927a	kernel.asm	/^ffff80000010927a:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff800000109281	kernel.asm	/^ffff800000109281:	80 ff ff $/;"	l
ffff800000109284	kernel.asm	/^ffff800000109284:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010928b	kernel.asm	/^ffff80000010928b:	80 ff ff $/;"	l
ffff80000010928e	kernel.asm	/^ffff80000010928e:	ff d0                	callq  *%rax$/;"	l
ffff800000109290	kernel.asm	/^ffff800000109290:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109295	kernel.asm	/^ffff800000109295:	eb 51                	jmp    ffff8000001092e8 <sys_sleep+0xd5>$/;"	l
ffff800000109297	kernel.asm	/^ffff800000109297:	48 be 20 e3 11 00 00 	movabs $0xffff80000011e320,%rsi$/;"	l
ffff80000010929e	kernel.asm	/^ffff80000010929e:	80 ff ff $/;"	l
ffff8000001092a1	kernel.asm	/^ffff8000001092a1:	48 bf 88 e3 11 00 00 	movabs $0xffff80000011e388,%rdi$/;"	l
ffff8000001092a8	kernel.asm	/^ffff8000001092a8:	80 ff ff $/;"	l
ffff8000001092ab	kernel.asm	/^ffff8000001092ab:	48 b8 1e 6d 10 00 00 	movabs $0xffff800000106d1e,%rax$/;"	l
ffff8000001092b2	kernel.asm	/^ffff8000001092b2:	80 ff ff $/;"	l
ffff8000001092b5	kernel.asm	/^ffff8000001092b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001092b7	kernel.asm	/^ffff8000001092b7:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff8000001092be	kernel.asm	/^ffff8000001092be:	80 ff ff $/;"	l
ffff8000001092c1	kernel.asm	/^ffff8000001092c1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001092c3	kernel.asm	/^ffff8000001092c3:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001092c6	kernel.asm	/^ffff8000001092c6:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff8000001092c9	kernel.asm	/^ffff8000001092c9:	39 d0                	cmp    %edx,%eax$/;"	l
ffff8000001092cb	kernel.asm	/^ffff8000001092cb:	72 9b                	jb     ffff800000109268 <sys_sleep+0x55>$/;"	l
ffff8000001092cd	kernel.asm	/^ffff8000001092cd:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff8000001092d4	kernel.asm	/^ffff8000001092d4:	80 ff ff $/;"	l
ffff8000001092d7	kernel.asm	/^ffff8000001092d7:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff8000001092de	kernel.asm	/^ffff8000001092de:	80 ff ff $/;"	l
ffff8000001092e1	kernel.asm	/^ffff8000001092e1:	ff d0                	callq  *%rax$/;"	l
ffff8000001092e3	kernel.asm	/^ffff8000001092e3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001092e8	kernel.asm	/^ffff8000001092e8:	c9                   	leaveq $/;"	l
ffff8000001092e9	kernel.asm	/^ffff8000001092e9:	c3                   	retq   $/;"	l
ffff8000001092ea	kernel.asm	/^ffff8000001092ea <sys_uptime>:$/;"	l
ffff8000001092ea	kernel.asm	/^ffff8000001092ea:	55                   	push   %rbp$/;"	l
ffff8000001092eb	kernel.asm	/^ffff8000001092eb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001092ee	kernel.asm	/^ffff8000001092ee:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001092f2	kernel.asm	/^ffff8000001092f2:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff8000001092f9	kernel.asm	/^ffff8000001092f9:	80 ff ff $/;"	l
ffff8000001092fc	kernel.asm	/^ffff8000001092fc:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff800000109303	kernel.asm	/^ffff800000109303:	80 ff ff $/;"	l
ffff800000109306	kernel.asm	/^ffff800000109306:	ff d0                	callq  *%rax$/;"	l
ffff800000109308	kernel.asm	/^ffff800000109308:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff80000010930f	kernel.asm	/^ffff80000010930f:	80 ff ff $/;"	l
ffff800000109312	kernel.asm	/^ffff800000109312:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109314	kernel.asm	/^ffff800000109314:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109317	kernel.asm	/^ffff800000109317:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff80000010931e	kernel.asm	/^ffff80000010931e:	80 ff ff $/;"	l
ffff800000109321	kernel.asm	/^ffff800000109321:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff800000109328	kernel.asm	/^ffff800000109328:	80 ff ff $/;"	l
ffff80000010932b	kernel.asm	/^ffff80000010932b:	ff d0                	callq  *%rax$/;"	l
ffff80000010932d	kernel.asm	/^ffff80000010932d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109330	kernel.asm	/^ffff800000109330:	c9                   	leaveq $/;"	l
ffff800000109331	kernel.asm	/^ffff800000109331:	c3                   	retq   $/;"	l
ffff800000109332	kernel.asm	/^ffff800000109332 <alltraps>:$/;"	l
ffff800000109332	kernel.asm	/^ffff800000109332:	41 57                	push   %r15$/;"	l
ffff800000109334	kernel.asm	/^ffff800000109334:	41 56                	push   %r14$/;"	l
ffff800000109336	kernel.asm	/^ffff800000109336:	41 55                	push   %r13$/;"	l
ffff800000109338	kernel.asm	/^ffff800000109338:	41 54                	push   %r12$/;"	l
ffff80000010933a	kernel.asm	/^ffff80000010933a:	41 53                	push   %r11$/;"	l
ffff80000010933c	kernel.asm	/^ffff80000010933c:	41 52                	push   %r10$/;"	l
ffff80000010933e	kernel.asm	/^ffff80000010933e:	41 51                	push   %r9$/;"	l
ffff800000109340	kernel.asm	/^ffff800000109340:	41 50                	push   %r8$/;"	l
ffff800000109342	kernel.asm	/^ffff800000109342:	57                   	push   %rdi$/;"	l
ffff800000109343	kernel.asm	/^ffff800000109343:	56                   	push   %rsi$/;"	l
ffff800000109344	kernel.asm	/^ffff800000109344:	55                   	push   %rbp$/;"	l
ffff800000109345	kernel.asm	/^ffff800000109345:	52                   	push   %rdx$/;"	l
ffff800000109346	kernel.asm	/^ffff800000109346:	51                   	push   %rcx$/;"	l
ffff800000109347	kernel.asm	/^ffff800000109347:	53                   	push   %rbx$/;"	l
ffff800000109348	kernel.asm	/^ffff800000109348:	50                   	push   %rax$/;"	l
ffff800000109349	kernel.asm	/^ffff800000109349:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff80000010934c	kernel.asm	/^ffff80000010934c:	e8 c2 02 00 00       	callq  ffff800000109613 <trap>$/;"	l
ffff800000109351	kernel.asm	/^ffff800000109351 <trapret>:$/;"	l
ffff800000109351	kernel.asm	/^ffff800000109351:	58                   	pop    %rax$/;"	l
ffff800000109352	kernel.asm	/^ffff800000109352:	5b                   	pop    %rbx$/;"	l
ffff800000109353	kernel.asm	/^ffff800000109353:	59                   	pop    %rcx$/;"	l
ffff800000109354	kernel.asm	/^ffff800000109354:	5a                   	pop    %rdx$/;"	l
ffff800000109355	kernel.asm	/^ffff800000109355:	5d                   	pop    %rbp$/;"	l
ffff800000109356	kernel.asm	/^ffff800000109356:	5e                   	pop    %rsi$/;"	l
ffff800000109357	kernel.asm	/^ffff800000109357:	5f                   	pop    %rdi$/;"	l
ffff800000109358	kernel.asm	/^ffff800000109358:	41 58                	pop    %r8$/;"	l
ffff80000010935a	kernel.asm	/^ffff80000010935a:	41 59                	pop    %r9$/;"	l
ffff80000010935c	kernel.asm	/^ffff80000010935c:	41 5a                	pop    %r10$/;"	l
ffff80000010935e	kernel.asm	/^ffff80000010935e:	41 5b                	pop    %r11$/;"	l
ffff800000109360	kernel.asm	/^ffff800000109360:	41 5c                	pop    %r12$/;"	l
ffff800000109362	kernel.asm	/^ffff800000109362:	41 5d                	pop    %r13$/;"	l
ffff800000109364	kernel.asm	/^ffff800000109364:	41 5e                	pop    %r14$/;"	l
ffff800000109366	kernel.asm	/^ffff800000109366:	41 5f                	pop    %r15$/;"	l
ffff800000109368	kernel.asm	/^ffff800000109368:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff80000010936c	kernel.asm	/^ffff80000010936c:	48 cf                	iretq  $/;"	l
ffff80000010936e	kernel.asm	/^ffff80000010936e <syscall_trap>:$/;"	l
ffff80000010936e	kernel.asm	/^ffff80000010936e:	41 57                	push   %r15$/;"	l
ffff800000109370	kernel.asm	/^ffff800000109370:	41 56                	push   %r14$/;"	l
ffff800000109372	kernel.asm	/^ffff800000109372:	41 55                	push   %r13$/;"	l
ffff800000109374	kernel.asm	/^ffff800000109374:	41 54                	push   %r12$/;"	l
ffff800000109376	kernel.asm	/^ffff800000109376:	41 53                	push   %r11$/;"	l
ffff800000109378	kernel.asm	/^ffff800000109378:	41 52                	push   %r10$/;"	l
ffff80000010937a	kernel.asm	/^ffff80000010937a:	41 51                	push   %r9$/;"	l
ffff80000010937c	kernel.asm	/^ffff80000010937c:	41 50                	push   %r8$/;"	l
ffff80000010937e	kernel.asm	/^ffff80000010937e:	57                   	push   %rdi$/;"	l
ffff80000010937f	kernel.asm	/^ffff80000010937f:	56                   	push   %rsi$/;"	l
ffff800000109380	kernel.asm	/^ffff800000109380:	55                   	push   %rbp$/;"	l
ffff800000109381	kernel.asm	/^ffff800000109381:	52                   	push   %rdx$/;"	l
ffff800000109382	kernel.asm	/^ffff800000109382:	51                   	push   %rcx$/;"	l
ffff800000109383	kernel.asm	/^ffff800000109383:	53                   	push   %rbx$/;"	l
ffff800000109384	kernel.asm	/^ffff800000109384:	50                   	push   %rax$/;"	l
ffff800000109385	kernel.asm	/^ffff800000109385:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff800000109388	kernel.asm	/^ffff800000109388:	e8 86 02 00 00       	callq  ffff800000109613 <trap>$/;"	l
ffff80000010938d	kernel.asm	/^ffff80000010938d <syscall_trapret>:$/;"	l
ffff80000010938d	kernel.asm	/^ffff80000010938d:	58                   	pop    %rax$/;"	l
ffff80000010938e	kernel.asm	/^ffff80000010938e:	5b                   	pop    %rbx$/;"	l
ffff80000010938f	kernel.asm	/^ffff80000010938f:	59                   	pop    %rcx$/;"	l
ffff800000109390	kernel.asm	/^ffff800000109390:	5a                   	pop    %rdx$/;"	l
ffff800000109391	kernel.asm	/^ffff800000109391:	5d                   	pop    %rbp$/;"	l
ffff800000109392	kernel.asm	/^ffff800000109392:	5e                   	pop    %rsi$/;"	l
ffff800000109393	kernel.asm	/^ffff800000109393:	5f                   	pop    %rdi$/;"	l
ffff800000109394	kernel.asm	/^ffff800000109394:	41 58                	pop    %r8$/;"	l
ffff800000109396	kernel.asm	/^ffff800000109396:	41 59                	pop    %r9$/;"	l
ffff800000109398	kernel.asm	/^ffff800000109398:	41 5a                	pop    %r10$/;"	l
ffff80000010939a	kernel.asm	/^ffff80000010939a:	41 5b                	pop    %r11$/;"	l
ffff80000010939c	kernel.asm	/^ffff80000010939c:	41 5c                	pop    %r12$/;"	l
ffff80000010939e	kernel.asm	/^ffff80000010939e:	41 5d                	pop    %r13$/;"	l
ffff8000001093a0	kernel.asm	/^ffff8000001093a0:	41 5e                	pop    %r14$/;"	l
ffff8000001093a2	kernel.asm	/^ffff8000001093a2:	41 5f                	pop    %r15$/;"	l
ffff8000001093a4	kernel.asm	/^ffff8000001093a4:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff8000001093a8	kernel.asm	/^ffff8000001093a8:	48 8b 24 24          	mov    (%rsp),%rsp$/;"	l
ffff8000001093ac	kernel.asm	/^ffff8000001093ac:	48 0f 07             	sysretq $/;"	l
ffff8000001093af	kernel.asm	/^ffff8000001093af <lidt>:$/;"	l
ffff8000001093af	kernel.asm	/^ffff8000001093af:	55                   	push   %rbp$/;"	l
ffff8000001093b0	kernel.asm	/^ffff8000001093b0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001093b3	kernel.asm	/^ffff8000001093b3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001093b7	kernel.asm	/^ffff8000001093b7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001093bb	kernel.asm	/^ffff8000001093bb:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001093be	kernel.asm	/^ffff8000001093be:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001093c1	kernel.asm	/^ffff8000001093c1:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001093c4	kernel.asm	/^ffff8000001093c4:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff8000001093c8	kernel.asm	/^ffff8000001093c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093cc	kernel.asm	/^ffff8000001093cc:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff8000001093d0	kernel.asm	/^ffff8000001093d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093d4	kernel.asm	/^ffff8000001093d4:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff8000001093d8	kernel.asm	/^ffff8000001093d8:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff8000001093dc	kernel.asm	/^ffff8000001093dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093e0	kernel.asm	/^ffff8000001093e0:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff8000001093e4	kernel.asm	/^ffff8000001093e4:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff8000001093e8	kernel.asm	/^ffff8000001093e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001093ec	kernel.asm	/^ffff8000001093ec:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff8000001093f0	kernel.asm	/^ffff8000001093f0:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff8000001093f4	kernel.asm	/^ffff8000001093f4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001093f8	kernel.asm	/^ffff8000001093f8:	0f 01 18             	lidt   (%rax)$/;"	l
ffff8000001093fb	kernel.asm	/^ffff8000001093fb:	90                   	nop$/;"	l
ffff8000001093fc	kernel.asm	/^ffff8000001093fc:	c9                   	leaveq $/;"	l
ffff8000001093fd	kernel.asm	/^ffff8000001093fd:	c3                   	retq   $/;"	l
ffff8000001093fe	kernel.asm	/^ffff8000001093fe <rcr2>:$/;"	l
ffff8000001093fe	kernel.asm	/^ffff8000001093fe:	55                   	push   %rbp$/;"	l
ffff8000001093ff	kernel.asm	/^ffff8000001093ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109402	kernel.asm	/^ffff800000109402:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109406	kernel.asm	/^ffff800000109406:	0f 20 d0             	mov    %cr2,%rax$/;"	l
ffff800000109409	kernel.asm	/^ffff800000109409:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010940d	kernel.asm	/^ffff80000010940d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109411	kernel.asm	/^ffff800000109411:	c9                   	leaveq $/;"	l
ffff800000109412	kernel.asm	/^ffff800000109412:	c3                   	retq   $/;"	l
ffff800000109413	kernel.asm	/^ffff800000109413 <mkgate>:$/;"	l
ffff800000109413	kernel.asm	/^ffff800000109413:	55                   	push   %rbp$/;"	l
ffff800000109414	kernel.asm	/^ffff800000109414:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109417	kernel.asm	/^ffff800000109417:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010941b	kernel.asm	/^ffff80000010941b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010941f	kernel.asm	/^ffff80000010941f:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff800000109422	kernel.asm	/^ffff800000109422:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000109426	kernel.asm	/^ffff800000109426:	89 4d e0             	mov    %ecx,-0x20(%rbp)$/;"	l
ffff800000109429	kernel.asm	/^ffff800000109429:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)$/;"	l
ffff80000010942d	kernel.asm	/^ffff80000010942d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109431	kernel.asm	/^ffff800000109431:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109435	kernel.asm	/^ffff800000109435:	c1 65 e4 02          	shll   $0x2,-0x1c(%rbp)$/;"	l
ffff800000109439	kernel.asm	/^ffff800000109439:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010943c	kernel.asm	/^ffff80000010943c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109443	kernel.asm	/^ffff800000109443:	00 $/;"	l
ffff800000109444	kernel.asm	/^ffff800000109444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109448	kernel.asm	/^ffff800000109448:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010944b	kernel.asm	/^ffff80000010944b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010944f	kernel.asm	/^ffff80000010944f:	0f b7 d2             	movzwl %dx,%edx$/;"	l
ffff800000109452	kernel.asm	/^ffff800000109452:	81 ca 00 00 08 00    	or     $0x80000,%edx$/;"	l
ffff800000109458	kernel.asm	/^ffff800000109458:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010945a	kernel.asm	/^ffff80000010945a:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010945d	kernel.asm	/^ffff80000010945d:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000109460	kernel.asm	/^ffff800000109460:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000109462	kernel.asm	/^ffff800000109462:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109469	kernel.asm	/^ffff800000109469:	00 $/;"	l
ffff80000010946a	kernel.asm	/^ffff80000010946a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010946e	kernel.asm	/^ffff80000010946e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000109471	kernel.asm	/^ffff800000109471:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000109475	kernel.asm	/^ffff800000109475:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000109477	kernel.asm	/^ffff800000109477:	66 b9 00 00          	mov    $0x0,%cx$/;"	l
ffff80000010947b	kernel.asm	/^ffff80000010947b:	8b 55 e0             	mov    -0x20(%rbp),%edx$/;"	l
ffff80000010947e	kernel.asm	/^ffff80000010947e:	83 e2 03             	and    $0x3,%edx$/;"	l
ffff800000109481	kernel.asm	/^ffff800000109481:	c1 e2 0d             	shl    $0xd,%edx$/;"	l
ffff800000109484	kernel.asm	/^ffff800000109484:	09 ca                	or     %ecx,%edx$/;"	l
ffff800000109486	kernel.asm	/^ffff800000109486:	80 ce 8e             	or     $0x8e,%dh$/;"	l
ffff800000109489	kernel.asm	/^ffff800000109489:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010948b	kernel.asm	/^ffff80000010948b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)$/;"	l
ffff80000010948f	kernel.asm	/^ffff80000010948f:	74 35                	je     ffff8000001094c6 <mkgate+0xb3>$/;"	l
ffff800000109491	kernel.asm	/^ffff800000109491:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000109494	kernel.asm	/^ffff800000109494:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000109497	kernel.asm	/^ffff800000109497:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000109499	kernel.asm	/^ffff800000109499:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001094a0	kernel.asm	/^ffff8000001094a0:	00 $/;"	l
ffff8000001094a1	kernel.asm	/^ffff8000001094a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001094a5	kernel.asm	/^ffff8000001094a5:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001094a8	kernel.asm	/^ffff8000001094a8:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff8000001094ab	kernel.asm	/^ffff8000001094ab:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff8000001094ae	kernel.asm	/^ffff8000001094ae:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001094b0	kernel.asm	/^ffff8000001094b0:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx$/;"	l
ffff8000001094b7	kernel.asm	/^ffff8000001094b7:	00 $/;"	l
ffff8000001094b8	kernel.asm	/^ffff8000001094b8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001094bc	kernel.asm	/^ffff8000001094bc:	48 01 ca             	add    %rcx,%rdx$/;"	l
ffff8000001094bf	kernel.asm	/^ffff8000001094bf:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff8000001094c1	kernel.asm	/^ffff8000001094c1:	80 ce 01             	or     $0x1,%dh$/;"	l
ffff8000001094c4	kernel.asm	/^ffff8000001094c4:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001094c6	kernel.asm	/^ffff8000001094c6:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001094c9	kernel.asm	/^ffff8000001094c9:	83 c0 02             	add    $0x2,%eax$/;"	l
ffff8000001094cc	kernel.asm	/^ffff8000001094cc:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001094ce	kernel.asm	/^ffff8000001094ce:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001094d5	kernel.asm	/^ffff8000001094d5:	00 $/;"	l
ffff8000001094d6	kernel.asm	/^ffff8000001094d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001094da	kernel.asm	/^ffff8000001094da:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001094dd	kernel.asm	/^ffff8000001094dd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001094e1	kernel.asm	/^ffff8000001094e1:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff8000001094e5	kernel.asm	/^ffff8000001094e5:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001094e7	kernel.asm	/^ffff8000001094e7:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001094ea	kernel.asm	/^ffff8000001094ea:	83 c0 03             	add    $0x3,%eax$/;"	l
ffff8000001094ed	kernel.asm	/^ffff8000001094ed:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001094ef	kernel.asm	/^ffff8000001094ef:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001094f6	kernel.asm	/^ffff8000001094f6:	00 $/;"	l
ffff8000001094f7	kernel.asm	/^ffff8000001094f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001094fb	kernel.asm	/^ffff8000001094fb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001094fe	kernel.asm	/^ffff8000001094fe:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000109504	kernel.asm	/^ffff800000109504:	90                   	nop$/;"	l
ffff800000109505	kernel.asm	/^ffff800000109505:	c9                   	leaveq $/;"	l
ffff800000109506	kernel.asm	/^ffff800000109506:	c3                   	retq   $/;"	l
ffff800000109507	kernel.asm	/^ffff800000109507 <idtinit>:$/;"	l
ffff800000109507	kernel.asm	/^ffff800000109507:	55                   	push   %rbp$/;"	l
ffff800000109508	kernel.asm	/^ffff800000109508:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010950b	kernel.asm	/^ffff80000010950b:	48 b8 00 e3 11 00 00 	movabs $0xffff80000011e300,%rax$/;"	l
ffff800000109512	kernel.asm	/^ffff800000109512:	80 ff ff $/;"	l
ffff800000109515	kernel.asm	/^ffff800000109515:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000109518	kernel.asm	/^ffff800000109518:	be 00 10 00 00       	mov    $0x1000,%esi$/;"	l
ffff80000010951d	kernel.asm	/^ffff80000010951d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109520	kernel.asm	/^ffff800000109520:	48 b8 af 93 10 00 00 	movabs $0xffff8000001093af,%rax$/;"	l
ffff800000109527	kernel.asm	/^ffff800000109527:	80 ff ff $/;"	l
ffff80000010952a	kernel.asm	/^ffff80000010952a:	ff d0                	callq  *%rax$/;"	l
ffff80000010952c	kernel.asm	/^ffff80000010952c:	90                   	nop$/;"	l
ffff80000010952d	kernel.asm	/^ffff80000010952d:	5d                   	pop    %rbp$/;"	l
ffff80000010952e	kernel.asm	/^ffff80000010952e:	c3                   	retq   $/;"	l
ffff80000010952f	kernel.asm	/^ffff80000010952f <tvinit>:$/;"	l
ffff80000010952f	kernel.asm	/^ffff80000010952f:	55                   	push   %rbp$/;"	l
ffff800000109530	kernel.asm	/^ffff800000109530:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109533	kernel.asm	/^ffff800000109533:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109537	kernel.asm	/^ffff800000109537:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010953e	kernel.asm	/^ffff80000010953e:	80 ff ff $/;"	l
ffff800000109541	kernel.asm	/^ffff800000109541:	ff d0                	callq  *%rax$/;"	l
ffff800000109543	kernel.asm	/^ffff800000109543:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000109546	kernel.asm	/^ffff800000109546:	48 b8 00 e3 11 00 00 	movabs $0xffff80000011e300,%rax$/;"	l
ffff80000010954d	kernel.asm	/^ffff80000010954d:	80 ff ff $/;"	l
ffff800000109550	kernel.asm	/^ffff800000109550:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000109553	kernel.asm	/^ffff800000109553:	48 b8 00 e3 11 00 00 	movabs $0xffff80000011e300,%rax$/;"	l
ffff80000010955a	kernel.asm	/^ffff80000010955a:	80 ff ff $/;"	l
ffff80000010955d	kernel.asm	/^ffff80000010955d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000109560	kernel.asm	/^ffff800000109560:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff800000109565	kernel.asm	/^ffff800000109565:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010956a	kernel.asm	/^ffff80000010956a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010956d	kernel.asm	/^ffff80000010956d:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff800000109574	kernel.asm	/^ffff800000109574:	80 ff ff $/;"	l
ffff800000109577	kernel.asm	/^ffff800000109577:	ff d0                	callq  *%rax$/;"	l
ffff800000109579	kernel.asm	/^ffff800000109579:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109580	kernel.asm	/^ffff800000109580:	eb 45                	jmp    ffff8000001095c7 <tvinit+0x98>$/;"	l
ffff800000109582	kernel.asm	/^ffff800000109582:	48 b8 58 e6 10 00 00 	movabs $0xffff80000010e658,%rax$/;"	l
ffff800000109589	kernel.asm	/^ffff800000109589:	80 ff ff $/;"	l
ffff80000010958c	kernel.asm	/^ffff80000010958c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010958f	kernel.asm	/^ffff80000010958f:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000109592	kernel.asm	/^ffff800000109592:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000109596	kernel.asm	/^ffff800000109596:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000109599	kernel.asm	/^ffff800000109599:	8b 75 fc             	mov    -0x4(%rbp),%esi$/;"	l
ffff80000010959c	kernel.asm	/^ffff80000010959c:	48 b8 00 e3 11 00 00 	movabs $0xffff80000011e300,%rax$/;"	l
ffff8000001095a3	kernel.asm	/^ffff8000001095a3:	80 ff ff $/;"	l
ffff8000001095a6	kernel.asm	/^ffff8000001095a6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001095a9	kernel.asm	/^ffff8000001095a9:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
ffff8000001095af	kernel.asm	/^ffff8000001095af:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff8000001095b4	kernel.asm	/^ffff8000001095b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001095b7	kernel.asm	/^ffff8000001095b7:	48 b8 13 94 10 00 00 	movabs $0xffff800000109413,%rax$/;"	l
ffff8000001095be	kernel.asm	/^ffff8000001095be:	80 ff ff $/;"	l
ffff8000001095c1	kernel.asm	/^ffff8000001095c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001095c3	kernel.asm	/^ffff8000001095c3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001095c7	kernel.asm	/^ffff8000001095c7:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff8000001095ce	kernel.asm	/^ffff8000001095ce:	7e b2                	jle    ffff800000109582 <tvinit+0x53>$/;"	l
ffff8000001095d0	kernel.asm	/^ffff8000001095d0:	48 b8 58 e6 10 00 00 	movabs $0xffff80000010e658,%rax$/;"	l
ffff8000001095d7	kernel.asm	/^ffff8000001095d7:	80 ff ff $/;"	l
ffff8000001095da	kernel.asm	/^ffff8000001095da:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax$/;"	l
ffff8000001095e1	kernel.asm	/^ffff8000001095e1:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001095e4	kernel.asm	/^ffff8000001095e4:	48 b8 00 e3 11 00 00 	movabs $0xffff80000011e300,%rax$/;"	l
ffff8000001095eb	kernel.asm	/^ffff8000001095eb:	80 ff ff $/;"	l
ffff8000001095ee	kernel.asm	/^ffff8000001095ee:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001095f1	kernel.asm	/^ffff8000001095f1:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
ffff8000001095f7	kernel.asm	/^ffff8000001095f7:	b9 03 00 00 00       	mov    $0x3,%ecx$/;"	l
ffff8000001095fc	kernel.asm	/^ffff8000001095fc:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff800000109601	kernel.asm	/^ffff800000109601:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109604	kernel.asm	/^ffff800000109604:	48 b8 13 94 10 00 00 	movabs $0xffff800000109413,%rax$/;"	l
ffff80000010960b	kernel.asm	/^ffff80000010960b:	80 ff ff $/;"	l
ffff80000010960e	kernel.asm	/^ffff80000010960e:	ff d0                	callq  *%rax$/;"	l
ffff800000109610	kernel.asm	/^ffff800000109610:	90                   	nop$/;"	l
ffff800000109611	kernel.asm	/^ffff800000109611:	c9                   	leaveq $/;"	l
ffff800000109612	kernel.asm	/^ffff800000109612:	c3                   	retq   $/;"	l
ffff800000109613	kernel.asm	/^ffff800000109613 <trap>:$/;"	l
ffff800000109613	kernel.asm	/^ffff800000109613:	55                   	push   %rbp$/;"	l
ffff800000109614	kernel.asm	/^ffff800000109614:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109617	kernel.asm	/^ffff800000109617:	41 54                	push   %r12$/;"	l
ffff800000109619	kernel.asm	/^ffff800000109619:	53                   	push   %rbx$/;"	l
ffff80000010961a	kernel.asm	/^ffff80000010961a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010961e	kernel.asm	/^ffff80000010961e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000109622	kernel.asm	/^ffff800000109622:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109626	kernel.asm	/^ffff800000109626:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff80000010962a	kernel.asm	/^ffff80000010962a:	48 83 f8 40          	cmp    $0x40,%rax$/;"	l
ffff80000010962e	kernel.asm	/^ffff80000010962e:	75 73                	jne    ffff8000001096a3 <trap+0x90>$/;"	l
ffff800000109630	kernel.asm	/^ffff800000109630:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109637	kernel.asm	/^ffff800000109637:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010963b	kernel.asm	/^ffff80000010963b:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff80000010963e	kernel.asm	/^ffff80000010963e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109640	kernel.asm	/^ffff800000109640:	74 0c                	je     ffff80000010964e <trap+0x3b>$/;"	l
ffff800000109642	kernel.asm	/^ffff800000109642:	48 b8 d7 66 10 00 00 	movabs $0xffff8000001066d7,%rax$/;"	l
ffff800000109649	kernel.asm	/^ffff800000109649:	80 ff ff $/;"	l
ffff80000010964c	kernel.asm	/^ffff80000010964c:	ff d0                	callq  *%rax$/;"	l
ffff80000010964e	kernel.asm	/^ffff80000010964e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109655	kernel.asm	/^ffff800000109655:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109659	kernel.asm	/^ffff800000109659:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010965d	kernel.asm	/^ffff80000010965d:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff800000109661	kernel.asm	/^ffff800000109661:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109668	kernel.asm	/^ffff800000109668:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010966c	kernel.asm	/^ffff80000010966c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000109670	kernel.asm	/^ffff800000109670:	48 b8 3d 7d 10 00 00 	movabs $0xffff800000107d3d,%rax$/;"	l
ffff800000109677	kernel.asm	/^ffff800000109677:	80 ff ff $/;"	l
ffff80000010967a	kernel.asm	/^ffff80000010967a:	ff d0                	callq  *%rax$/;"	l
ffff80000010967c	kernel.asm	/^ffff80000010967c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109683	kernel.asm	/^ffff800000109683:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109687	kernel.asm	/^ffff800000109687:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff80000010968a	kernel.asm	/^ffff80000010968a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010968c	kernel.asm	/^ffff80000010968c:	0f 84 8e 03 00 00    	je     ffff800000109a20 <trap+0x40d>$/;"	l
ffff800000109692	kernel.asm	/^ffff800000109692:	48 b8 d7 66 10 00 00 	movabs $0xffff8000001066d7,%rax$/;"	l
ffff800000109699	kernel.asm	/^ffff800000109699:	80 ff ff $/;"	l
ffff80000010969c	kernel.asm	/^ffff80000010969c:	ff d0                	callq  *%rax$/;"	l
ffff80000010969e	kernel.asm	/^ffff80000010969e:	e9 7d 03 00 00       	jmpq   ffff800000109a20 <trap+0x40d>$/;"	l
ffff8000001096a3	kernel.asm	/^ffff8000001096a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001096a7	kernel.asm	/^ffff8000001096a7:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff8000001096ab	kernel.asm	/^ffff8000001096ab:	48 83 e8 20          	sub    $0x20,%rax$/;"	l
ffff8000001096af	kernel.asm	/^ffff8000001096af:	48 83 f8 1f          	cmp    $0x1f,%rax$/;"	l
ffff8000001096b3	kernel.asm	/^ffff8000001096b3:	0f 87 46 01 00 00    	ja     ffff8000001097ff <trap+0x1ec>$/;"	l
ffff8000001096b9	kernel.asm	/^ffff8000001096b9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001096c0	kernel.asm	/^ffff8000001096c0:	00 $/;"	l
ffff8000001096c1	kernel.asm	/^ffff8000001096c1:	48 b8 b0 d0 10 00 00 	movabs $0xffff80000010d0b0,%rax$/;"	l
ffff8000001096c8	kernel.asm	/^ffff8000001096c8:	80 ff ff $/;"	l
ffff8000001096cb	kernel.asm	/^ffff8000001096cb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001096ce	kernel.asm	/^ffff8000001096ce:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001096d1	kernel.asm	/^ffff8000001096d1:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001096d3	kernel.asm	/^ffff8000001096d3:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001096da	kernel.asm	/^ffff8000001096da:	80 ff ff $/;"	l
ffff8000001096dd	kernel.asm	/^ffff8000001096dd:	ff d0                	callq  *%rax$/;"	l
ffff8000001096df	kernel.asm	/^ffff8000001096df:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001096e1	kernel.asm	/^ffff8000001096e1:	75 5d                	jne    ffff800000109740 <trap+0x12d>$/;"	l
ffff8000001096e3	kernel.asm	/^ffff8000001096e3:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff8000001096ea	kernel.asm	/^ffff8000001096ea:	80 ff ff $/;"	l
ffff8000001096ed	kernel.asm	/^ffff8000001096ed:	48 b8 fa 72 10 00 00 	movabs $0xffff8000001072fa,%rax$/;"	l
ffff8000001096f4	kernel.asm	/^ffff8000001096f4:	80 ff ff $/;"	l
ffff8000001096f7	kernel.asm	/^ffff8000001096f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001096f9	kernel.asm	/^ffff8000001096f9:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000109700	kernel.asm	/^ffff800000109700:	80 ff ff $/;"	l
ffff800000109703	kernel.asm	/^ffff800000109703:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109705	kernel.asm	/^ffff800000109705:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000109708	kernel.asm	/^ffff800000109708:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff80000010970f	kernel.asm	/^ffff80000010970f:	80 ff ff $/;"	l
ffff800000109712	kernel.asm	/^ffff800000109712:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109714	kernel.asm	/^ffff800000109714:	48 bf 88 e3 11 00 00 	movabs $0xffff80000011e388,%rdi$/;"	l
ffff80000010971b	kernel.asm	/^ffff80000010971b:	80 ff ff $/;"	l
ffff80000010971e	kernel.asm	/^ffff80000010971e:	48 b8 86 6e 10 00 00 	movabs $0xffff800000106e86,%rax$/;"	l
ffff800000109725	kernel.asm	/^ffff800000109725:	80 ff ff $/;"	l
ffff800000109728	kernel.asm	/^ffff800000109728:	ff d0                	callq  *%rax$/;"	l
ffff80000010972a	kernel.asm	/^ffff80000010972a:	48 bf 20 e3 11 00 00 	movabs $0xffff80000011e320,%rdi$/;"	l
ffff800000109731	kernel.asm	/^ffff800000109731:	80 ff ff $/;"	l
ffff800000109734	kernel.asm	/^ffff800000109734:	48 b8 93 73 10 00 00 	movabs $0xffff800000107393,%rax$/;"	l
ffff80000010973b	kernel.asm	/^ffff80000010973b:	80 ff ff $/;"	l
ffff80000010973e	kernel.asm	/^ffff80000010973e:	ff d0                	callq  *%rax$/;"	l
ffff800000109740	kernel.asm	/^ffff800000109740:	48 b8 35 47 10 00 00 	movabs $0xffff800000104735,%rax$/;"	l
ffff800000109747	kernel.asm	/^ffff800000109747:	80 ff ff $/;"	l
ffff80000010974a	kernel.asm	/^ffff80000010974a:	ff d0                	callq  *%rax$/;"	l
ffff80000010974c	kernel.asm	/^ffff80000010974c:	e9 0c 02 00 00       	jmpq   ffff80000010995d <trap+0x34a>$/;"	l
ffff800000109751	kernel.asm	/^ffff800000109751:	48 b8 62 3b 10 00 00 	movabs $0xffff800000103b62,%rax$/;"	l
ffff800000109758	kernel.asm	/^ffff800000109758:	80 ff ff $/;"	l
ffff80000010975b	kernel.asm	/^ffff80000010975b:	ff d0                	callq  *%rax$/;"	l
ffff80000010975d	kernel.asm	/^ffff80000010975d:	48 b8 35 47 10 00 00 	movabs $0xffff800000104735,%rax$/;"	l
ffff800000109764	kernel.asm	/^ffff800000109764:	80 ff ff $/;"	l
ffff800000109767	kernel.asm	/^ffff800000109767:	ff d0                	callq  *%rax$/;"	l
ffff800000109769	kernel.asm	/^ffff800000109769:	e9 ef 01 00 00       	jmpq   ffff80000010995d <trap+0x34a>$/;"	l
ffff80000010976e	kernel.asm	/^ffff80000010976e:	48 b8 ed 43 10 00 00 	movabs $0xffff8000001043ed,%rax$/;"	l
ffff800000109775	kernel.asm	/^ffff800000109775:	80 ff ff $/;"	l
ffff800000109778	kernel.asm	/^ffff800000109778:	ff d0                	callq  *%rax$/;"	l
ffff80000010977a	kernel.asm	/^ffff80000010977a:	48 b8 35 47 10 00 00 	movabs $0xffff800000104735,%rax$/;"	l
ffff800000109781	kernel.asm	/^ffff800000109781:	80 ff ff $/;"	l
ffff800000109784	kernel.asm	/^ffff800000109784:	ff d0                	callq  *%rax$/;"	l
ffff800000109786	kernel.asm	/^ffff800000109786:	e9 d2 01 00 00       	jmpq   ffff80000010995d <trap+0x34a>$/;"	l
ffff80000010978b	kernel.asm	/^ffff80000010978b:	48 b8 87 9c 10 00 00 	movabs $0xffff800000109c87,%rax$/;"	l
ffff800000109792	kernel.asm	/^ffff800000109792:	80 ff ff $/;"	l
ffff800000109795	kernel.asm	/^ffff800000109795:	ff d0                	callq  *%rax$/;"	l
ffff800000109797	kernel.asm	/^ffff800000109797:	48 b8 35 47 10 00 00 	movabs $0xffff800000104735,%rax$/;"	l
ffff80000010979e	kernel.asm	/^ffff80000010979e:	80 ff ff $/;"	l
ffff8000001097a1	kernel.asm	/^ffff8000001097a1:	ff d0                	callq  *%rax$/;"	l
ffff8000001097a3	kernel.asm	/^ffff8000001097a3:	e9 b5 01 00 00       	jmpq   ffff80000010995d <trap+0x34a>$/;"	l
ffff8000001097a8	kernel.asm	/^ffff8000001097a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001097ac	kernel.asm	/^ffff8000001097ac:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12$/;"	l
ffff8000001097b3	kernel.asm	/^ffff8000001097b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001097b7	kernel.asm	/^ffff8000001097b7:	48 8b 98 90 00 00 00 	mov    0x90(%rax),%rbx$/;"	l
ffff8000001097be	kernel.asm	/^ffff8000001097be:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001097c5	kernel.asm	/^ffff8000001097c5:	80 ff ff $/;"	l
ffff8000001097c8	kernel.asm	/^ffff8000001097c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001097ca	kernel.asm	/^ffff8000001097ca:	4c 89 e1             	mov    %r12,%rcx$/;"	l
ffff8000001097cd	kernel.asm	/^ffff8000001097cd:	48 89 da             	mov    %rbx,%rdx$/;"	l
ffff8000001097d0	kernel.asm	/^ffff8000001097d0:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001097d2	kernel.asm	/^ffff8000001097d2:	48 bf f8 cf 10 00 00 	movabs $0xffff80000010cff8,%rdi$/;"	l
ffff8000001097d9	kernel.asm	/^ffff8000001097d9:	80 ff ff $/;"	l
ffff8000001097dc	kernel.asm	/^ffff8000001097dc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001097e1	kernel.asm	/^ffff8000001097e1:	49 b8 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r8$/;"	l
ffff8000001097e8	kernel.asm	/^ffff8000001097e8:	80 ff ff $/;"	l
ffff8000001097eb	kernel.asm	/^ffff8000001097eb:	41 ff d0             	callq  *%r8$/;"	l
ffff8000001097ee	kernel.asm	/^ffff8000001097ee:	48 b8 35 47 10 00 00 	movabs $0xffff800000104735,%rax$/;"	l
ffff8000001097f5	kernel.asm	/^ffff8000001097f5:	80 ff ff $/;"	l
ffff8000001097f8	kernel.asm	/^ffff8000001097f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001097fa	kernel.asm	/^ffff8000001097fa:	e9 5e 01 00 00       	jmpq   ffff80000010995d <trap+0x34a>$/;"	l
ffff8000001097ff	kernel.asm	/^ffff8000001097ff:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109806	kernel.asm	/^ffff800000109806:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010980a	kernel.asm	/^ffff80000010980a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010980d	kernel.asm	/^ffff80000010980d:	74 17                	je     ffff800000109826 <trap+0x213>$/;"	l
ffff80000010980f	kernel.asm	/^ffff80000010980f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109813	kernel.asm	/^ffff800000109813:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff80000010981a	kernel.asm	/^ffff80000010981a:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff80000010981d	kernel.asm	/^ffff80000010981d:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000109820	kernel.asm	/^ffff800000109820:	0f 85 96 00 00 00    	jne    ffff8000001098bc <trap+0x2a9>$/;"	l
ffff800000109826	kernel.asm	/^ffff800000109826:	48 b8 fe 93 10 00 00 	movabs $0xffff8000001093fe,%rax$/;"	l
ffff80000010982d	kernel.asm	/^ffff80000010982d:	80 ff ff $/;"	l
ffff800000109830	kernel.asm	/^ffff800000109830:	ff d0                	callq  *%rax$/;"	l
ffff800000109832	kernel.asm	/^ffff800000109832:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff800000109835	kernel.asm	/^ffff800000109835:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109839	kernel.asm	/^ffff800000109839:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff800000109840	kernel.asm	/^ffff800000109840:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff800000109847	kernel.asm	/^ffff800000109847:	80 ff ff $/;"	l
ffff80000010984a	kernel.asm	/^ffff80000010984a:	ff d0                	callq  *%rax$/;"	l
ffff80000010984c	kernel.asm	/^ffff80000010984c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010984e	kernel.asm	/^ffff80000010984e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109852	kernel.asm	/^ffff800000109852:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109856	kernel.asm	/^ffff800000109856:	4d 89 e0             	mov    %r12,%r8$/;"	l
ffff800000109859	kernel.asm	/^ffff800000109859:	48 89 d9             	mov    %rbx,%rcx$/;"	l
ffff80000010985c	kernel.asm	/^ffff80000010985c:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010985f	kernel.asm	/^ffff80000010985f:	48 bf 20 d0 10 00 00 	movabs $0xffff80000010d020,%rdi$/;"	l
ffff800000109866	kernel.asm	/^ffff800000109866:	80 ff ff $/;"	l
ffff800000109869	kernel.asm	/^ffff800000109869:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010986e	kernel.asm	/^ffff80000010986e:	49 b9 ac 07 10 00 00 	movabs $0xffff8000001007ac,%r9$/;"	l
ffff800000109875	kernel.asm	/^ffff800000109875:	80 ff ff $/;"	l
ffff800000109878	kernel.asm	/^ffff800000109878:	41 ff d1             	callq  *%r9$/;"	l
ffff80000010987b	kernel.asm	/^ffff80000010987b:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109882	kernel.asm	/^ffff800000109882:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109886	kernel.asm	/^ffff800000109886:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109889	kernel.asm	/^ffff800000109889:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010988b	kernel.asm	/^ffff80000010988b:	48 bf 52 d0 10 00 00 	movabs $0xffff80000010d052,%rdi$/;"	l
ffff800000109892	kernel.asm	/^ffff800000109892:	80 ff ff $/;"	l
ffff800000109895	kernel.asm	/^ffff800000109895:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010989a	kernel.asm	/^ffff80000010989a:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff8000001098a1	kernel.asm	/^ffff8000001098a1:	80 ff ff $/;"	l
ffff8000001098a4	kernel.asm	/^ffff8000001098a4:	ff d2                	callq  *%rdx$/;"	l
ffff8000001098a6	kernel.asm	/^ffff8000001098a6:	48 bf 5f d0 10 00 00 	movabs $0xffff80000010d05f,%rdi$/;"	l
ffff8000001098ad	kernel.asm	/^ffff8000001098ad:	80 ff ff $/;"	l
ffff8000001098b0	kernel.asm	/^ffff8000001098b0:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff8000001098b7	kernel.asm	/^ffff8000001098b7:	80 ff ff $/;"	l
ffff8000001098ba	kernel.asm	/^ffff8000001098ba:	ff d0                	callq  *%rax$/;"	l
ffff8000001098bc	kernel.asm	/^ffff8000001098bc:	48 b8 fe 93 10 00 00 	movabs $0xffff8000001093fe,%rax$/;"	l
ffff8000001098c3	kernel.asm	/^ffff8000001098c3:	80 ff ff $/;"	l
ffff8000001098c6	kernel.asm	/^ffff8000001098c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001098c8	kernel.asm	/^ffff8000001098c8:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff8000001098cb	kernel.asm	/^ffff8000001098cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001098cf	kernel.asm	/^ffff8000001098cf:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff8000001098d6	kernel.asm	/^ffff8000001098d6:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff8000001098dd	kernel.asm	/^ffff8000001098dd:	80 ff ff $/;"	l
ffff8000001098e0	kernel.asm	/^ffff8000001098e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001098e2	kernel.asm	/^ffff8000001098e2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001098e4	kernel.asm	/^ffff8000001098e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001098e8	kernel.asm	/^ffff8000001098e8:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx$/;"	l
ffff8000001098ef	kernel.asm	/^ffff8000001098ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001098f3	kernel.asm	/^ffff8000001098f3:	48 8b 50 78          	mov    0x78(%rax),%rdx$/;"	l
ffff8000001098f7	kernel.asm	/^ffff8000001098f7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001098fe	kernel.asm	/^ffff8000001098fe:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109902	kernel.asm	/^ffff800000109902:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff800000109909	kernel.asm	/^ffff800000109909:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109910	kernel.asm	/^ffff800000109910:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109914	kernel.asm	/^ffff800000109914:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109917	kernel.asm	/^ffff800000109917:	41 54                	push   %r12$/;"	l
ffff800000109919	kernel.asm	/^ffff800000109919:	53                   	push   %rbx$/;"	l
ffff80000010991a	kernel.asm	/^ffff80000010991a:	41 89 f9             	mov    %edi,%r9d$/;"	l
ffff80000010991d	kernel.asm	/^ffff80000010991d:	49 89 c8             	mov    %rcx,%r8$/;"	l
ffff800000109920	kernel.asm	/^ffff800000109920:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff800000109923	kernel.asm	/^ffff800000109923:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff800000109926	kernel.asm	/^ffff800000109926:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109928	kernel.asm	/^ffff800000109928:	48 bf 68 d0 10 00 00 	movabs $0xffff80000010d068,%rdi$/;"	l
ffff80000010992f	kernel.asm	/^ffff80000010992f:	80 ff ff $/;"	l
ffff800000109932	kernel.asm	/^ffff800000109932:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109937	kernel.asm	/^ffff800000109937:	49 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%r10$/;"	l
ffff80000010993e	kernel.asm	/^ffff80000010993e:	80 ff ff $/;"	l
ffff800000109941	kernel.asm	/^ffff800000109941:	41 ff d2             	callq  *%r10$/;"	l
ffff800000109944	kernel.asm	/^ffff800000109944:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff800000109948	kernel.asm	/^ffff800000109948:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010994f	kernel.asm	/^ffff80000010994f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109953	kernel.asm	/^ffff800000109953:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff80000010995a	kernel.asm	/^ffff80000010995a:	eb 01                	jmp    ffff80000010995d <trap+0x34a>$/;"	l
ffff80000010995c	kernel.asm	/^ffff80000010995c:	90                   	nop$/;"	l
ffff80000010995d	kernel.asm	/^ffff80000010995d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109964	kernel.asm	/^ffff800000109964:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109968	kernel.asm	/^ffff800000109968:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010996b	kernel.asm	/^ffff80000010996b:	74 32                	je     ffff80000010999f <trap+0x38c>$/;"	l
ffff80000010996d	kernel.asm	/^ffff80000010996d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109974	kernel.asm	/^ffff800000109974:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109978	kernel.asm	/^ffff800000109978:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff80000010997b	kernel.asm	/^ffff80000010997b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010997d	kernel.asm	/^ffff80000010997d:	74 20                	je     ffff80000010999f <trap+0x38c>$/;"	l
ffff80000010997f	kernel.asm	/^ffff80000010997f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109983	kernel.asm	/^ffff800000109983:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff80000010998a	kernel.asm	/^ffff80000010998a:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff80000010998d	kernel.asm	/^ffff80000010998d:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff800000109991	kernel.asm	/^ffff800000109991:	75 0c                	jne    ffff80000010999f <trap+0x38c>$/;"	l
ffff800000109993	kernel.asm	/^ffff800000109993:	48 b8 d7 66 10 00 00 	movabs $0xffff8000001066d7,%rax$/;"	l
ffff80000010999a	kernel.asm	/^ffff80000010999a:	80 ff ff $/;"	l
ffff80000010999d	kernel.asm	/^ffff80000010999d:	ff d0                	callq  *%rax$/;"	l
ffff80000010999f	kernel.asm	/^ffff80000010999f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099a6	kernel.asm	/^ffff8000001099a6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099aa	kernel.asm	/^ffff8000001099aa:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001099ad	kernel.asm	/^ffff8000001099ad:	74 2d                	je     ffff8000001099dc <trap+0x3c9>$/;"	l
ffff8000001099af	kernel.asm	/^ffff8000001099af:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099b6	kernel.asm	/^ffff8000001099b6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099ba	kernel.asm	/^ffff8000001099ba:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001099bd	kernel.asm	/^ffff8000001099bd:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff8000001099c0	kernel.asm	/^ffff8000001099c0:	75 1a                	jne    ffff8000001099dc <trap+0x3c9>$/;"	l
ffff8000001099c2	kernel.asm	/^ffff8000001099c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001099c6	kernel.asm	/^ffff8000001099c6:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff8000001099ca	kernel.asm	/^ffff8000001099ca:	48 83 f8 20          	cmp    $0x20,%rax$/;"	l
ffff8000001099ce	kernel.asm	/^ffff8000001099ce:	75 0c                	jne    ffff8000001099dc <trap+0x3c9>$/;"	l
ffff8000001099d0	kernel.asm	/^ffff8000001099d0:	48 b8 5b 6c 10 00 00 	movabs $0xffff800000106c5b,%rax$/;"	l
ffff8000001099d7	kernel.asm	/^ffff8000001099d7:	80 ff ff $/;"	l
ffff8000001099da	kernel.asm	/^ffff8000001099da:	ff d0                	callq  *%rax$/;"	l
ffff8000001099dc	kernel.asm	/^ffff8000001099dc:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099e3	kernel.asm	/^ffff8000001099e3:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099e7	kernel.asm	/^ffff8000001099e7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001099ea	kernel.asm	/^ffff8000001099ea:	74 35                	je     ffff800000109a21 <trap+0x40e>$/;"	l
ffff8000001099ec	kernel.asm	/^ffff8000001099ec:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099f3	kernel.asm	/^ffff8000001099f3:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099f7	kernel.asm	/^ffff8000001099f7:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff8000001099fa	kernel.asm	/^ffff8000001099fa:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001099fc	kernel.asm	/^ffff8000001099fc:	74 23                	je     ffff800000109a21 <trap+0x40e>$/;"	l
ffff8000001099fe	kernel.asm	/^ffff8000001099fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109a02	kernel.asm	/^ffff800000109a02:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff800000109a09	kernel.asm	/^ffff800000109a09:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000109a0c	kernel.asm	/^ffff800000109a0c:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff800000109a10	kernel.asm	/^ffff800000109a10:	75 0f                	jne    ffff800000109a21 <trap+0x40e>$/;"	l
ffff800000109a12	kernel.asm	/^ffff800000109a12:	48 b8 d7 66 10 00 00 	movabs $0xffff8000001066d7,%rax$/;"	l
ffff800000109a19	kernel.asm	/^ffff800000109a19:	80 ff ff $/;"	l
ffff800000109a1c	kernel.asm	/^ffff800000109a1c:	ff d0                	callq  *%rax$/;"	l
ffff800000109a1e	kernel.asm	/^ffff800000109a1e:	eb 01                	jmp    ffff800000109a21 <trap+0x40e>$/;"	l
ffff800000109a20	kernel.asm	/^ffff800000109a20:	90                   	nop$/;"	l
ffff800000109a21	kernel.asm	/^ffff800000109a21:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp$/;"	l
ffff800000109a25	kernel.asm	/^ffff800000109a25:	5b                   	pop    %rbx$/;"	l
ffff800000109a26	kernel.asm	/^ffff800000109a26:	41 5c                	pop    %r12$/;"	l
ffff800000109a28	kernel.asm	/^ffff800000109a28:	5d                   	pop    %rbp$/;"	l
ffff800000109a29	kernel.asm	/^ffff800000109a29:	c3                   	retq   $/;"	l
ffff800000109a2a	kernel.asm	/^ffff800000109a2a <inb>:$/;"	l
ffff800000109a2a	kernel.asm	/^ffff800000109a2a:	55                   	push   %rbp$/;"	l
ffff800000109a2b	kernel.asm	/^ffff800000109a2b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109a2e	kernel.asm	/^ffff800000109a2e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000109a32	kernel.asm	/^ffff800000109a32:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000109a34	kernel.asm	/^ffff800000109a34:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000109a38	kernel.asm	/^ffff800000109a38:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000109a3c	kernel.asm	/^ffff800000109a3c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000109a3e	kernel.asm	/^ffff800000109a3e:	ec                   	in     (%dx),%al$/;"	l
ffff800000109a3f	kernel.asm	/^ffff800000109a3f:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000109a42	kernel.asm	/^ffff800000109a42:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000109a46	kernel.asm	/^ffff800000109a46:	c9                   	leaveq $/;"	l
ffff800000109a47	kernel.asm	/^ffff800000109a47:	c3                   	retq   $/;"	l
ffff800000109a48	kernel.asm	/^ffff800000109a48 <outb>:$/;"	l
ffff800000109a48	kernel.asm	/^ffff800000109a48:	55                   	push   %rbp$/;"	l
ffff800000109a49	kernel.asm	/^ffff800000109a49:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109a4c	kernel.asm	/^ffff800000109a4c:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000109a50	kernel.asm	/^ffff800000109a50:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000109a52	kernel.asm	/^ffff800000109a52:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000109a54	kernel.asm	/^ffff800000109a54:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000109a58	kernel.asm	/^ffff800000109a58:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000109a5b	kernel.asm	/^ffff800000109a5b:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000109a5f	kernel.asm	/^ffff800000109a5f:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000109a63	kernel.asm	/^ffff800000109a63:	ee                   	out    %al,(%dx)$/;"	l
ffff800000109a64	kernel.asm	/^ffff800000109a64:	90                   	nop$/;"	l
ffff800000109a65	kernel.asm	/^ffff800000109a65:	c9                   	leaveq $/;"	l
ffff800000109a66	kernel.asm	/^ffff800000109a66:	c3                   	retq   $/;"	l
ffff800000109a67	kernel.asm	/^ffff800000109a67 <uartearlyinit>:$/;"	l
ffff800000109a67	kernel.asm	/^ffff800000109a67:	55                   	push   %rbp$/;"	l
ffff800000109a68	kernel.asm	/^ffff800000109a68:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109a6b	kernel.asm	/^ffff800000109a6b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109a6f	kernel.asm	/^ffff800000109a6f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109a74	kernel.asm	/^ffff800000109a74:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109a79	kernel.asm	/^ffff800000109a79:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109a80	kernel.asm	/^ffff800000109a80:	80 ff ff $/;"	l
ffff800000109a83	kernel.asm	/^ffff800000109a83:	ff d0                	callq  *%rax$/;"	l
ffff800000109a85	kernel.asm	/^ffff800000109a85:	be 80 00 00 00       	mov    $0x80,%esi$/;"	l
ffff800000109a8a	kernel.asm	/^ffff800000109a8a:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109a8f	kernel.asm	/^ffff800000109a8f:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109a96	kernel.asm	/^ffff800000109a96:	80 ff ff $/;"	l
ffff800000109a99	kernel.asm	/^ffff800000109a99:	ff d0                	callq  *%rax$/;"	l
ffff800000109a9b	kernel.asm	/^ffff800000109a9b:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff800000109aa0	kernel.asm	/^ffff800000109aa0:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109aa5	kernel.asm	/^ffff800000109aa5:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109aac	kernel.asm	/^ffff800000109aac:	80 ff ff $/;"	l
ffff800000109aaf	kernel.asm	/^ffff800000109aaf:	ff d0                	callq  *%rax$/;"	l
ffff800000109ab1	kernel.asm	/^ffff800000109ab1:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109ab6	kernel.asm	/^ffff800000109ab6:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109abb	kernel.asm	/^ffff800000109abb:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109ac2	kernel.asm	/^ffff800000109ac2:	80 ff ff $/;"	l
ffff800000109ac5	kernel.asm	/^ffff800000109ac5:	ff d0                	callq  *%rax$/;"	l
ffff800000109ac7	kernel.asm	/^ffff800000109ac7:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000109acc	kernel.asm	/^ffff800000109acc:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109ad1	kernel.asm	/^ffff800000109ad1:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109ad8	kernel.asm	/^ffff800000109ad8:	80 ff ff $/;"	l
ffff800000109adb	kernel.asm	/^ffff800000109adb:	ff d0                	callq  *%rax$/;"	l
ffff800000109add	kernel.asm	/^ffff800000109add:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109ae2	kernel.asm	/^ffff800000109ae2:	bf fc 03 00 00       	mov    $0x3fc,%edi$/;"	l
ffff800000109ae7	kernel.asm	/^ffff800000109ae7:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109aee	kernel.asm	/^ffff800000109aee:	80 ff ff $/;"	l
ffff800000109af1	kernel.asm	/^ffff800000109af1:	ff d0                	callq  *%rax$/;"	l
ffff800000109af3	kernel.asm	/^ffff800000109af3:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000109af8	kernel.asm	/^ffff800000109af8:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109afd	kernel.asm	/^ffff800000109afd:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109b04	kernel.asm	/^ffff800000109b04:	80 ff ff $/;"	l
ffff800000109b07	kernel.asm	/^ffff800000109b07:	ff d0                	callq  *%rax$/;"	l
ffff800000109b09	kernel.asm	/^ffff800000109b09:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109b0e	kernel.asm	/^ffff800000109b0e:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109b15	kernel.asm	/^ffff800000109b15:	80 ff ff $/;"	l
ffff800000109b18	kernel.asm	/^ffff800000109b18:	ff d0                	callq  *%rax$/;"	l
ffff800000109b1a	kernel.asm	/^ffff800000109b1a:	3c ff                	cmp    $0xff,%al$/;"	l
ffff800000109b1c	kernel.asm	/^ffff800000109b1c:	74 4a                	je     ffff800000109b68 <uartearlyinit+0x101>$/;"	l
ffff800000109b1e	kernel.asm	/^ffff800000109b1e:	48 b8 8c e3 11 00 00 	movabs $0xffff80000011e38c,%rax$/;"	l
ffff800000109b25	kernel.asm	/^ffff800000109b25:	80 ff ff $/;"	l
ffff800000109b28	kernel.asm	/^ffff800000109b28:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000109b2e	kernel.asm	/^ffff800000109b2e:	48 b8 b0 d1 10 00 00 	movabs $0xffff80000010d1b0,%rax$/;"	l
ffff800000109b35	kernel.asm	/^ffff800000109b35:	80 ff ff $/;"	l
ffff800000109b38	kernel.asm	/^ffff800000109b38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109b3c	kernel.asm	/^ffff800000109b3c:	eb 1d                	jmp    ffff800000109b5b <uartearlyinit+0xf4>$/;"	l
ffff800000109b3e	kernel.asm	/^ffff800000109b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109b42	kernel.asm	/^ffff800000109b42:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109b45	kernel.asm	/^ffff800000109b45:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000109b48	kernel.asm	/^ffff800000109b48:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109b4a	kernel.asm	/^ffff800000109b4a:	48 b8 bc 9b 10 00 00 	movabs $0xffff800000109bbc,%rax$/;"	l
ffff800000109b51	kernel.asm	/^ffff800000109b51:	80 ff ff $/;"	l
ffff800000109b54	kernel.asm	/^ffff800000109b54:	ff d0                	callq  *%rax$/;"	l
ffff800000109b56	kernel.asm	/^ffff800000109b56:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000109b5b	kernel.asm	/^ffff800000109b5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109b5f	kernel.asm	/^ffff800000109b5f:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109b62	kernel.asm	/^ffff800000109b62:	84 c0                	test   %al,%al$/;"	l
ffff800000109b64	kernel.asm	/^ffff800000109b64:	75 d8                	jne    ffff800000109b3e <uartearlyinit+0xd7>$/;"	l
ffff800000109b66	kernel.asm	/^ffff800000109b66:	eb 01                	jmp    ffff800000109b69 <uartearlyinit+0x102>$/;"	l
ffff800000109b68	kernel.asm	/^ffff800000109b68:	90                   	nop$/;"	l
ffff800000109b69	kernel.asm	/^ffff800000109b69:	c9                   	leaveq $/;"	l
ffff800000109b6a	kernel.asm	/^ffff800000109b6a:	c3                   	retq   $/;"	l
ffff800000109b6b	kernel.asm	/^ffff800000109b6b <uartinit>:$/;"	l
ffff800000109b6b	kernel.asm	/^ffff800000109b6b:	55                   	push   %rbp$/;"	l
ffff800000109b6c	kernel.asm	/^ffff800000109b6c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109b6f	kernel.asm	/^ffff800000109b6f:	48 b8 8c e3 11 00 00 	movabs $0xffff80000011e38c,%rax$/;"	l
ffff800000109b76	kernel.asm	/^ffff800000109b76:	80 ff ff $/;"	l
ffff800000109b79	kernel.asm	/^ffff800000109b79:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109b7b	kernel.asm	/^ffff800000109b7b:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109b7d	kernel.asm	/^ffff800000109b7d:	74 3a                	je     ffff800000109bb9 <uartinit+0x4e>$/;"	l
ffff800000109b7f	kernel.asm	/^ffff800000109b7f:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109b84	kernel.asm	/^ffff800000109b84:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109b8b	kernel.asm	/^ffff800000109b8b:	80 ff ff $/;"	l
ffff800000109b8e	kernel.asm	/^ffff800000109b8e:	ff d0                	callq  *%rax$/;"	l
ffff800000109b90	kernel.asm	/^ffff800000109b90:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109b95	kernel.asm	/^ffff800000109b95:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109b9c	kernel.asm	/^ffff800000109b9c:	80 ff ff $/;"	l
ffff800000109b9f	kernel.asm	/^ffff800000109b9f:	ff d0                	callq  *%rax$/;"	l
ffff800000109ba1	kernel.asm	/^ffff800000109ba1:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109ba6	kernel.asm	/^ffff800000109ba6:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff800000109bab	kernel.asm	/^ffff800000109bab:	48 b8 28 3f 10 00 00 	movabs $0xffff800000103f28,%rax$/;"	l
ffff800000109bb2	kernel.asm	/^ffff800000109bb2:	80 ff ff $/;"	l
ffff800000109bb5	kernel.asm	/^ffff800000109bb5:	ff d0                	callq  *%rax$/;"	l
ffff800000109bb7	kernel.asm	/^ffff800000109bb7:	eb 01                	jmp    ffff800000109bba <uartinit+0x4f>$/;"	l
ffff800000109bb9	kernel.asm	/^ffff800000109bb9:	90                   	nop$/;"	l
ffff800000109bba	kernel.asm	/^ffff800000109bba:	5d                   	pop    %rbp$/;"	l
ffff800000109bbb	kernel.asm	/^ffff800000109bbb:	c3                   	retq   $/;"	l
ffff800000109bbc	kernel.asm	/^ffff800000109bbc <uartputc>:$/;"	l
ffff800000109bbc	kernel.asm	/^ffff800000109bbc:	55                   	push   %rbp$/;"	l
ffff800000109bbd	kernel.asm	/^ffff800000109bbd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109bc0	kernel.asm	/^ffff800000109bc0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109bc4	kernel.asm	/^ffff800000109bc4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000109bc7	kernel.asm	/^ffff800000109bc7:	48 b8 8c e3 11 00 00 	movabs $0xffff80000011e38c,%rax$/;"	l
ffff800000109bce	kernel.asm	/^ffff800000109bce:	80 ff ff $/;"	l
ffff800000109bd1	kernel.asm	/^ffff800000109bd1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109bd3	kernel.asm	/^ffff800000109bd3:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109bd5	kernel.asm	/^ffff800000109bd5:	74 5a                	je     ffff800000109c31 <uartputc+0x75>$/;"	l
ffff800000109bd7	kernel.asm	/^ffff800000109bd7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109bde	kernel.asm	/^ffff800000109bde:	eb 15                	jmp    ffff800000109bf5 <uartputc+0x39>$/;"	l
ffff800000109be0	kernel.asm	/^ffff800000109be0:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff800000109be5	kernel.asm	/^ffff800000109be5:	48 b8 64 47 10 00 00 	movabs $0xffff800000104764,%rax$/;"	l
ffff800000109bec	kernel.asm	/^ffff800000109bec:	80 ff ff $/;"	l
ffff800000109bef	kernel.asm	/^ffff800000109bef:	ff d0                	callq  *%rax$/;"	l
ffff800000109bf1	kernel.asm	/^ffff800000109bf1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000109bf5	kernel.asm	/^ffff800000109bf5:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)$/;"	l
ffff800000109bf9	kernel.asm	/^ffff800000109bf9:	7f 1b                	jg     ffff800000109c16 <uartputc+0x5a>$/;"	l
ffff800000109bfb	kernel.asm	/^ffff800000109bfb:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109c00	kernel.asm	/^ffff800000109c00:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109c07	kernel.asm	/^ffff800000109c07:	80 ff ff $/;"	l
ffff800000109c0a	kernel.asm	/^ffff800000109c0a:	ff d0                	callq  *%rax$/;"	l
ffff800000109c0c	kernel.asm	/^ffff800000109c0c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c0f	kernel.asm	/^ffff800000109c0f:	83 e0 20             	and    $0x20,%eax$/;"	l
ffff800000109c12	kernel.asm	/^ffff800000109c12:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109c14	kernel.asm	/^ffff800000109c14:	74 ca                	je     ffff800000109be0 <uartputc+0x24>$/;"	l
ffff800000109c16	kernel.asm	/^ffff800000109c16:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000109c19	kernel.asm	/^ffff800000109c19:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c1c	kernel.asm	/^ffff800000109c1c:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109c1e	kernel.asm	/^ffff800000109c1e:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109c23	kernel.asm	/^ffff800000109c23:	48 b8 48 9a 10 00 00 	movabs $0xffff800000109a48,%rax$/;"	l
ffff800000109c2a	kernel.asm	/^ffff800000109c2a:	80 ff ff $/;"	l
ffff800000109c2d	kernel.asm	/^ffff800000109c2d:	ff d0                	callq  *%rax$/;"	l
ffff800000109c2f	kernel.asm	/^ffff800000109c2f:	eb 01                	jmp    ffff800000109c32 <uartputc+0x76>$/;"	l
ffff800000109c31	kernel.asm	/^ffff800000109c31:	90                   	nop$/;"	l
ffff800000109c32	kernel.asm	/^ffff800000109c32:	c9                   	leaveq $/;"	l
ffff800000109c33	kernel.asm	/^ffff800000109c33:	c3                   	retq   $/;"	l
ffff800000109c34	kernel.asm	/^ffff800000109c34 <uartgetc>:$/;"	l
ffff800000109c34	kernel.asm	/^ffff800000109c34:	55                   	push   %rbp$/;"	l
ffff800000109c35	kernel.asm	/^ffff800000109c35:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c38	kernel.asm	/^ffff800000109c38:	48 b8 8c e3 11 00 00 	movabs $0xffff80000011e38c,%rax$/;"	l
ffff800000109c3f	kernel.asm	/^ffff800000109c3f:	80 ff ff $/;"	l
ffff800000109c42	kernel.asm	/^ffff800000109c42:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109c44	kernel.asm	/^ffff800000109c44:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109c46	kernel.asm	/^ffff800000109c46:	75 07                	jne    ffff800000109c4f <uartgetc+0x1b>$/;"	l
ffff800000109c48	kernel.asm	/^ffff800000109c48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109c4d	kernel.asm	/^ffff800000109c4d:	eb 36                	jmp    ffff800000109c85 <uartgetc+0x51>$/;"	l
ffff800000109c4f	kernel.asm	/^ffff800000109c4f:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109c54	kernel.asm	/^ffff800000109c54:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109c5b	kernel.asm	/^ffff800000109c5b:	80 ff ff $/;"	l
ffff800000109c5e	kernel.asm	/^ffff800000109c5e:	ff d0                	callq  *%rax$/;"	l
ffff800000109c60	kernel.asm	/^ffff800000109c60:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c63	kernel.asm	/^ffff800000109c63:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000109c66	kernel.asm	/^ffff800000109c66:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109c68	kernel.asm	/^ffff800000109c68:	75 07                	jne    ffff800000109c71 <uartgetc+0x3d>$/;"	l
ffff800000109c6a	kernel.asm	/^ffff800000109c6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109c6f	kernel.asm	/^ffff800000109c6f:	eb 14                	jmp    ffff800000109c85 <uartgetc+0x51>$/;"	l
ffff800000109c71	kernel.asm	/^ffff800000109c71:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109c76	kernel.asm	/^ffff800000109c76:	48 b8 2a 9a 10 00 00 	movabs $0xffff800000109a2a,%rax$/;"	l
ffff800000109c7d	kernel.asm	/^ffff800000109c7d:	80 ff ff $/;"	l
ffff800000109c80	kernel.asm	/^ffff800000109c80:	ff d0                	callq  *%rax$/;"	l
ffff800000109c82	kernel.asm	/^ffff800000109c82:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109c85	kernel.asm	/^ffff800000109c85:	5d                   	pop    %rbp$/;"	l
ffff800000109c86	kernel.asm	/^ffff800000109c86:	c3                   	retq   $/;"	l
ffff800000109c87	kernel.asm	/^ffff800000109c87 <uartintr>:$/;"	l
ffff800000109c87	kernel.asm	/^ffff800000109c87:	55                   	push   %rbp$/;"	l
ffff800000109c88	kernel.asm	/^ffff800000109c88:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c8b	kernel.asm	/^ffff800000109c8b:	48 bf 34 9c 10 00 00 	movabs $0xffff800000109c34,%rdi$/;"	l
ffff800000109c92	kernel.asm	/^ffff800000109c92:	80 ff ff $/;"	l
ffff800000109c95	kernel.asm	/^ffff800000109c95:	48 b8 c7 0e 10 00 00 	movabs $0xffff800000100ec7,%rax$/;"	l
ffff800000109c9c	kernel.asm	/^ffff800000109c9c:	80 ff ff $/;"	l
ffff800000109c9f	kernel.asm	/^ffff800000109c9f:	ff d0                	callq  *%rax$/;"	l
ffff800000109ca1	kernel.asm	/^ffff800000109ca1:	90                   	nop$/;"	l
ffff800000109ca2	kernel.asm	/^ffff800000109ca2:	5d                   	pop    %rbp$/;"	l
ffff800000109ca3	kernel.asm	/^ffff800000109ca3:	c3                   	retq   $/;"	l
ffff800000109ca4	kernel.asm	/^ffff800000109ca4 <vector0>:$/;"	l
ffff800000109ca4	kernel.asm	/^ffff800000109ca4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ca6	kernel.asm	/^ffff800000109ca6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ca8	kernel.asm	/^ffff800000109ca8:	e9 85 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cad	kernel.asm	/^ffff800000109cad <vector1>:$/;"	l
ffff800000109cad	kernel.asm	/^ffff800000109cad:	6a 00                	pushq  $0x0$/;"	l
ffff800000109caf	kernel.asm	/^ffff800000109caf:	6a 01                	pushq  $0x1$/;"	l
ffff800000109cb1	kernel.asm	/^ffff800000109cb1:	e9 7c f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cb6	kernel.asm	/^ffff800000109cb6 <vector2>:$/;"	l
ffff800000109cb6	kernel.asm	/^ffff800000109cb6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cb8	kernel.asm	/^ffff800000109cb8:	6a 02                	pushq  $0x2$/;"	l
ffff800000109cba	kernel.asm	/^ffff800000109cba:	e9 73 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cbf	kernel.asm	/^ffff800000109cbf <vector3>:$/;"	l
ffff800000109cbf	kernel.asm	/^ffff800000109cbf:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cc1	kernel.asm	/^ffff800000109cc1:	6a 03                	pushq  $0x3$/;"	l
ffff800000109cc3	kernel.asm	/^ffff800000109cc3:	e9 6a f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cc8	kernel.asm	/^ffff800000109cc8 <vector4>:$/;"	l
ffff800000109cc8	kernel.asm	/^ffff800000109cc8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cca	kernel.asm	/^ffff800000109cca:	6a 04                	pushq  $0x4$/;"	l
ffff800000109ccc	kernel.asm	/^ffff800000109ccc:	e9 61 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cd1	kernel.asm	/^ffff800000109cd1 <vector5>:$/;"	l
ffff800000109cd1	kernel.asm	/^ffff800000109cd1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cd3	kernel.asm	/^ffff800000109cd3:	6a 05                	pushq  $0x5$/;"	l
ffff800000109cd5	kernel.asm	/^ffff800000109cd5:	e9 58 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cda	kernel.asm	/^ffff800000109cda <vector6>:$/;"	l
ffff800000109cda	kernel.asm	/^ffff800000109cda:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cdc	kernel.asm	/^ffff800000109cdc:	6a 06                	pushq  $0x6$/;"	l
ffff800000109cde	kernel.asm	/^ffff800000109cde:	e9 4f f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ce3	kernel.asm	/^ffff800000109ce3 <vector7>:$/;"	l
ffff800000109ce3	kernel.asm	/^ffff800000109ce3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ce5	kernel.asm	/^ffff800000109ce5:	6a 07                	pushq  $0x7$/;"	l
ffff800000109ce7	kernel.asm	/^ffff800000109ce7:	e9 46 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cec	kernel.asm	/^ffff800000109cec <vector8>:$/;"	l
ffff800000109cec	kernel.asm	/^ffff800000109cec:	6a 08                	pushq  $0x8$/;"	l
ffff800000109cee	kernel.asm	/^ffff800000109cee:	e9 3f f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cf3	kernel.asm	/^ffff800000109cf3 <vector9>:$/;"	l
ffff800000109cf3	kernel.asm	/^ffff800000109cf3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109cf5	kernel.asm	/^ffff800000109cf5:	6a 09                	pushq  $0x9$/;"	l
ffff800000109cf7	kernel.asm	/^ffff800000109cf7:	e9 36 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109cfc	kernel.asm	/^ffff800000109cfc <vector10>:$/;"	l
ffff800000109cfc	kernel.asm	/^ffff800000109cfc:	6a 0a                	pushq  $0xa$/;"	l
ffff800000109cfe	kernel.asm	/^ffff800000109cfe:	e9 2f f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d03	kernel.asm	/^ffff800000109d03 <vector11>:$/;"	l
ffff800000109d03	kernel.asm	/^ffff800000109d03:	6a 0b                	pushq  $0xb$/;"	l
ffff800000109d05	kernel.asm	/^ffff800000109d05:	e9 28 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d0a	kernel.asm	/^ffff800000109d0a <vector12>:$/;"	l
ffff800000109d0a	kernel.asm	/^ffff800000109d0a:	6a 0c                	pushq  $0xc$/;"	l
ffff800000109d0c	kernel.asm	/^ffff800000109d0c:	e9 21 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d11	kernel.asm	/^ffff800000109d11 <vector13>:$/;"	l
ffff800000109d11	kernel.asm	/^ffff800000109d11:	6a 0d                	pushq  $0xd$/;"	l
ffff800000109d13	kernel.asm	/^ffff800000109d13:	e9 1a f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d18	kernel.asm	/^ffff800000109d18 <vector14>:$/;"	l
ffff800000109d18	kernel.asm	/^ffff800000109d18:	6a 0e                	pushq  $0xe$/;"	l
ffff800000109d1a	kernel.asm	/^ffff800000109d1a:	e9 13 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d1f	kernel.asm	/^ffff800000109d1f <vector15>:$/;"	l
ffff800000109d1f	kernel.asm	/^ffff800000109d1f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d21	kernel.asm	/^ffff800000109d21:	6a 0f                	pushq  $0xf$/;"	l
ffff800000109d23	kernel.asm	/^ffff800000109d23:	e9 0a f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d28	kernel.asm	/^ffff800000109d28 <vector16>:$/;"	l
ffff800000109d28	kernel.asm	/^ffff800000109d28:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d2a	kernel.asm	/^ffff800000109d2a:	6a 10                	pushq  $0x10$/;"	l
ffff800000109d2c	kernel.asm	/^ffff800000109d2c:	e9 01 f6 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d31	kernel.asm	/^ffff800000109d31 <vector17>:$/;"	l
ffff800000109d31	kernel.asm	/^ffff800000109d31:	6a 11                	pushq  $0x11$/;"	l
ffff800000109d33	kernel.asm	/^ffff800000109d33:	e9 fa f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d38	kernel.asm	/^ffff800000109d38 <vector18>:$/;"	l
ffff800000109d38	kernel.asm	/^ffff800000109d38:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d3a	kernel.asm	/^ffff800000109d3a:	6a 12                	pushq  $0x12$/;"	l
ffff800000109d3c	kernel.asm	/^ffff800000109d3c:	e9 f1 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d41	kernel.asm	/^ffff800000109d41 <vector19>:$/;"	l
ffff800000109d41	kernel.asm	/^ffff800000109d41:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d43	kernel.asm	/^ffff800000109d43:	6a 13                	pushq  $0x13$/;"	l
ffff800000109d45	kernel.asm	/^ffff800000109d45:	e9 e8 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d4a	kernel.asm	/^ffff800000109d4a <vector20>:$/;"	l
ffff800000109d4a	kernel.asm	/^ffff800000109d4a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d4c	kernel.asm	/^ffff800000109d4c:	6a 14                	pushq  $0x14$/;"	l
ffff800000109d4e	kernel.asm	/^ffff800000109d4e:	e9 df f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d53	kernel.asm	/^ffff800000109d53 <vector21>:$/;"	l
ffff800000109d53	kernel.asm	/^ffff800000109d53:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d55	kernel.asm	/^ffff800000109d55:	6a 15                	pushq  $0x15$/;"	l
ffff800000109d57	kernel.asm	/^ffff800000109d57:	e9 d6 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d5c	kernel.asm	/^ffff800000109d5c <vector22>:$/;"	l
ffff800000109d5c	kernel.asm	/^ffff800000109d5c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d5e	kernel.asm	/^ffff800000109d5e:	6a 16                	pushq  $0x16$/;"	l
ffff800000109d60	kernel.asm	/^ffff800000109d60:	e9 cd f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d65	kernel.asm	/^ffff800000109d65 <vector23>:$/;"	l
ffff800000109d65	kernel.asm	/^ffff800000109d65:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d67	kernel.asm	/^ffff800000109d67:	6a 17                	pushq  $0x17$/;"	l
ffff800000109d69	kernel.asm	/^ffff800000109d69:	e9 c4 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d6e	kernel.asm	/^ffff800000109d6e <vector24>:$/;"	l
ffff800000109d6e	kernel.asm	/^ffff800000109d6e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d70	kernel.asm	/^ffff800000109d70:	6a 18                	pushq  $0x18$/;"	l
ffff800000109d72	kernel.asm	/^ffff800000109d72:	e9 bb f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d77	kernel.asm	/^ffff800000109d77 <vector25>:$/;"	l
ffff800000109d77	kernel.asm	/^ffff800000109d77:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d79	kernel.asm	/^ffff800000109d79:	6a 19                	pushq  $0x19$/;"	l
ffff800000109d7b	kernel.asm	/^ffff800000109d7b:	e9 b2 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d80	kernel.asm	/^ffff800000109d80 <vector26>:$/;"	l
ffff800000109d80	kernel.asm	/^ffff800000109d80:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d82	kernel.asm	/^ffff800000109d82:	6a 1a                	pushq  $0x1a$/;"	l
ffff800000109d84	kernel.asm	/^ffff800000109d84:	e9 a9 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d89	kernel.asm	/^ffff800000109d89 <vector27>:$/;"	l
ffff800000109d89	kernel.asm	/^ffff800000109d89:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d8b	kernel.asm	/^ffff800000109d8b:	6a 1b                	pushq  $0x1b$/;"	l
ffff800000109d8d	kernel.asm	/^ffff800000109d8d:	e9 a0 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d92	kernel.asm	/^ffff800000109d92 <vector28>:$/;"	l
ffff800000109d92	kernel.asm	/^ffff800000109d92:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d94	kernel.asm	/^ffff800000109d94:	6a 1c                	pushq  $0x1c$/;"	l
ffff800000109d96	kernel.asm	/^ffff800000109d96:	e9 97 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109d9b	kernel.asm	/^ffff800000109d9b <vector29>:$/;"	l
ffff800000109d9b	kernel.asm	/^ffff800000109d9b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109d9d	kernel.asm	/^ffff800000109d9d:	6a 1d                	pushq  $0x1d$/;"	l
ffff800000109d9f	kernel.asm	/^ffff800000109d9f:	e9 8e f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109da4	kernel.asm	/^ffff800000109da4 <vector30>:$/;"	l
ffff800000109da4	kernel.asm	/^ffff800000109da4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109da6	kernel.asm	/^ffff800000109da6:	6a 1e                	pushq  $0x1e$/;"	l
ffff800000109da8	kernel.asm	/^ffff800000109da8:	e9 85 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dad	kernel.asm	/^ffff800000109dad <vector31>:$/;"	l
ffff800000109dad	kernel.asm	/^ffff800000109dad:	6a 00                	pushq  $0x0$/;"	l
ffff800000109daf	kernel.asm	/^ffff800000109daf:	6a 1f                	pushq  $0x1f$/;"	l
ffff800000109db1	kernel.asm	/^ffff800000109db1:	e9 7c f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109db6	kernel.asm	/^ffff800000109db6 <vector32>:$/;"	l
ffff800000109db6	kernel.asm	/^ffff800000109db6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109db8	kernel.asm	/^ffff800000109db8:	6a 20                	pushq  $0x20$/;"	l
ffff800000109dba	kernel.asm	/^ffff800000109dba:	e9 73 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dbf	kernel.asm	/^ffff800000109dbf <vector33>:$/;"	l
ffff800000109dbf	kernel.asm	/^ffff800000109dbf:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dc1	kernel.asm	/^ffff800000109dc1:	6a 21                	pushq  $0x21$/;"	l
ffff800000109dc3	kernel.asm	/^ffff800000109dc3:	e9 6a f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dc8	kernel.asm	/^ffff800000109dc8 <vector34>:$/;"	l
ffff800000109dc8	kernel.asm	/^ffff800000109dc8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dca	kernel.asm	/^ffff800000109dca:	6a 22                	pushq  $0x22$/;"	l
ffff800000109dcc	kernel.asm	/^ffff800000109dcc:	e9 61 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dd1	kernel.asm	/^ffff800000109dd1 <vector35>:$/;"	l
ffff800000109dd1	kernel.asm	/^ffff800000109dd1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dd3	kernel.asm	/^ffff800000109dd3:	6a 23                	pushq  $0x23$/;"	l
ffff800000109dd5	kernel.asm	/^ffff800000109dd5:	e9 58 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dda	kernel.asm	/^ffff800000109dda <vector36>:$/;"	l
ffff800000109dda	kernel.asm	/^ffff800000109dda:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ddc	kernel.asm	/^ffff800000109ddc:	6a 24                	pushq  $0x24$/;"	l
ffff800000109dde	kernel.asm	/^ffff800000109dde:	e9 4f f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109de3	kernel.asm	/^ffff800000109de3 <vector37>:$/;"	l
ffff800000109de3	kernel.asm	/^ffff800000109de3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109de5	kernel.asm	/^ffff800000109de5:	6a 25                	pushq  $0x25$/;"	l
ffff800000109de7	kernel.asm	/^ffff800000109de7:	e9 46 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dec	kernel.asm	/^ffff800000109dec <vector38>:$/;"	l
ffff800000109dec	kernel.asm	/^ffff800000109dec:	6a 00                	pushq  $0x0$/;"	l
ffff800000109dee	kernel.asm	/^ffff800000109dee:	6a 26                	pushq  $0x26$/;"	l
ffff800000109df0	kernel.asm	/^ffff800000109df0:	e9 3d f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109df5	kernel.asm	/^ffff800000109df5 <vector39>:$/;"	l
ffff800000109df5	kernel.asm	/^ffff800000109df5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109df7	kernel.asm	/^ffff800000109df7:	6a 27                	pushq  $0x27$/;"	l
ffff800000109df9	kernel.asm	/^ffff800000109df9:	e9 34 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109dfe	kernel.asm	/^ffff800000109dfe <vector40>:$/;"	l
ffff800000109dfe	kernel.asm	/^ffff800000109dfe:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e00	kernel.asm	/^ffff800000109e00:	6a 28                	pushq  $0x28$/;"	l
ffff800000109e02	kernel.asm	/^ffff800000109e02:	e9 2b f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e07	kernel.asm	/^ffff800000109e07 <vector41>:$/;"	l
ffff800000109e07	kernel.asm	/^ffff800000109e07:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e09	kernel.asm	/^ffff800000109e09:	6a 29                	pushq  $0x29$/;"	l
ffff800000109e0b	kernel.asm	/^ffff800000109e0b:	e9 22 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e10	kernel.asm	/^ffff800000109e10 <vector42>:$/;"	l
ffff800000109e10	kernel.asm	/^ffff800000109e10:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e12	kernel.asm	/^ffff800000109e12:	6a 2a                	pushq  $0x2a$/;"	l
ffff800000109e14	kernel.asm	/^ffff800000109e14:	e9 19 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e19	kernel.asm	/^ffff800000109e19 <vector43>:$/;"	l
ffff800000109e19	kernel.asm	/^ffff800000109e19:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e1b	kernel.asm	/^ffff800000109e1b:	6a 2b                	pushq  $0x2b$/;"	l
ffff800000109e1d	kernel.asm	/^ffff800000109e1d:	e9 10 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e22	kernel.asm	/^ffff800000109e22 <vector44>:$/;"	l
ffff800000109e22	kernel.asm	/^ffff800000109e22:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e24	kernel.asm	/^ffff800000109e24:	6a 2c                	pushq  $0x2c$/;"	l
ffff800000109e26	kernel.asm	/^ffff800000109e26:	e9 07 f5 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e2b	kernel.asm	/^ffff800000109e2b <vector45>:$/;"	l
ffff800000109e2b	kernel.asm	/^ffff800000109e2b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e2d	kernel.asm	/^ffff800000109e2d:	6a 2d                	pushq  $0x2d$/;"	l
ffff800000109e2f	kernel.asm	/^ffff800000109e2f:	e9 fe f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e34	kernel.asm	/^ffff800000109e34 <vector46>:$/;"	l
ffff800000109e34	kernel.asm	/^ffff800000109e34:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e36	kernel.asm	/^ffff800000109e36:	6a 2e                	pushq  $0x2e$/;"	l
ffff800000109e38	kernel.asm	/^ffff800000109e38:	e9 f5 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e3d	kernel.asm	/^ffff800000109e3d <vector47>:$/;"	l
ffff800000109e3d	kernel.asm	/^ffff800000109e3d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e3f	kernel.asm	/^ffff800000109e3f:	6a 2f                	pushq  $0x2f$/;"	l
ffff800000109e41	kernel.asm	/^ffff800000109e41:	e9 ec f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e46	kernel.asm	/^ffff800000109e46 <vector48>:$/;"	l
ffff800000109e46	kernel.asm	/^ffff800000109e46:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e48	kernel.asm	/^ffff800000109e48:	6a 30                	pushq  $0x30$/;"	l
ffff800000109e4a	kernel.asm	/^ffff800000109e4a:	e9 e3 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e4f	kernel.asm	/^ffff800000109e4f <vector49>:$/;"	l
ffff800000109e4f	kernel.asm	/^ffff800000109e4f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e51	kernel.asm	/^ffff800000109e51:	6a 31                	pushq  $0x31$/;"	l
ffff800000109e53	kernel.asm	/^ffff800000109e53:	e9 da f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e58	kernel.asm	/^ffff800000109e58 <vector50>:$/;"	l
ffff800000109e58	kernel.asm	/^ffff800000109e58:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e5a	kernel.asm	/^ffff800000109e5a:	6a 32                	pushq  $0x32$/;"	l
ffff800000109e5c	kernel.asm	/^ffff800000109e5c:	e9 d1 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e61	kernel.asm	/^ffff800000109e61 <vector51>:$/;"	l
ffff800000109e61	kernel.asm	/^ffff800000109e61:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e63	kernel.asm	/^ffff800000109e63:	6a 33                	pushq  $0x33$/;"	l
ffff800000109e65	kernel.asm	/^ffff800000109e65:	e9 c8 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e6a	kernel.asm	/^ffff800000109e6a <vector52>:$/;"	l
ffff800000109e6a	kernel.asm	/^ffff800000109e6a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e6c	kernel.asm	/^ffff800000109e6c:	6a 34                	pushq  $0x34$/;"	l
ffff800000109e6e	kernel.asm	/^ffff800000109e6e:	e9 bf f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e73	kernel.asm	/^ffff800000109e73 <vector53>:$/;"	l
ffff800000109e73	kernel.asm	/^ffff800000109e73:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e75	kernel.asm	/^ffff800000109e75:	6a 35                	pushq  $0x35$/;"	l
ffff800000109e77	kernel.asm	/^ffff800000109e77:	e9 b6 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e7c	kernel.asm	/^ffff800000109e7c <vector54>:$/;"	l
ffff800000109e7c	kernel.asm	/^ffff800000109e7c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e7e	kernel.asm	/^ffff800000109e7e:	6a 36                	pushq  $0x36$/;"	l
ffff800000109e80	kernel.asm	/^ffff800000109e80:	e9 ad f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e85	kernel.asm	/^ffff800000109e85 <vector55>:$/;"	l
ffff800000109e85	kernel.asm	/^ffff800000109e85:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e87	kernel.asm	/^ffff800000109e87:	6a 37                	pushq  $0x37$/;"	l
ffff800000109e89	kernel.asm	/^ffff800000109e89:	e9 a4 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e8e	kernel.asm	/^ffff800000109e8e <vector56>:$/;"	l
ffff800000109e8e	kernel.asm	/^ffff800000109e8e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e90	kernel.asm	/^ffff800000109e90:	6a 38                	pushq  $0x38$/;"	l
ffff800000109e92	kernel.asm	/^ffff800000109e92:	e9 9b f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109e97	kernel.asm	/^ffff800000109e97 <vector57>:$/;"	l
ffff800000109e97	kernel.asm	/^ffff800000109e97:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e99	kernel.asm	/^ffff800000109e99:	6a 39                	pushq  $0x39$/;"	l
ffff800000109e9b	kernel.asm	/^ffff800000109e9b:	e9 92 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ea0	kernel.asm	/^ffff800000109ea0 <vector58>:$/;"	l
ffff800000109ea0	kernel.asm	/^ffff800000109ea0:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ea2	kernel.asm	/^ffff800000109ea2:	6a 3a                	pushq  $0x3a$/;"	l
ffff800000109ea4	kernel.asm	/^ffff800000109ea4:	e9 89 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ea9	kernel.asm	/^ffff800000109ea9 <vector59>:$/;"	l
ffff800000109ea9	kernel.asm	/^ffff800000109ea9:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eab	kernel.asm	/^ffff800000109eab:	6a 3b                	pushq  $0x3b$/;"	l
ffff800000109ead	kernel.asm	/^ffff800000109ead:	e9 80 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109eb2	kernel.asm	/^ffff800000109eb2 <vector60>:$/;"	l
ffff800000109eb2	kernel.asm	/^ffff800000109eb2:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eb4	kernel.asm	/^ffff800000109eb4:	6a 3c                	pushq  $0x3c$/;"	l
ffff800000109eb6	kernel.asm	/^ffff800000109eb6:	e9 77 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ebb	kernel.asm	/^ffff800000109ebb <vector61>:$/;"	l
ffff800000109ebb	kernel.asm	/^ffff800000109ebb:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ebd	kernel.asm	/^ffff800000109ebd:	6a 3d                	pushq  $0x3d$/;"	l
ffff800000109ebf	kernel.asm	/^ffff800000109ebf:	e9 6e f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ec4	kernel.asm	/^ffff800000109ec4 <vector62>:$/;"	l
ffff800000109ec4	kernel.asm	/^ffff800000109ec4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ec6	kernel.asm	/^ffff800000109ec6:	6a 3e                	pushq  $0x3e$/;"	l
ffff800000109ec8	kernel.asm	/^ffff800000109ec8:	e9 65 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ecd	kernel.asm	/^ffff800000109ecd <vector63>:$/;"	l
ffff800000109ecd	kernel.asm	/^ffff800000109ecd:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ecf	kernel.asm	/^ffff800000109ecf:	6a 3f                	pushq  $0x3f$/;"	l
ffff800000109ed1	kernel.asm	/^ffff800000109ed1:	e9 5c f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ed6	kernel.asm	/^ffff800000109ed6 <vector64>:$/;"	l
ffff800000109ed6	kernel.asm	/^ffff800000109ed6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ed8	kernel.asm	/^ffff800000109ed8:	6a 40                	pushq  $0x40$/;"	l
ffff800000109eda	kernel.asm	/^ffff800000109eda:	e9 53 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109edf	kernel.asm	/^ffff800000109edf <vector65>:$/;"	l
ffff800000109edf	kernel.asm	/^ffff800000109edf:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ee1	kernel.asm	/^ffff800000109ee1:	6a 41                	pushq  $0x41$/;"	l
ffff800000109ee3	kernel.asm	/^ffff800000109ee3:	e9 4a f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ee8	kernel.asm	/^ffff800000109ee8 <vector66>:$/;"	l
ffff800000109ee8	kernel.asm	/^ffff800000109ee8:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eea	kernel.asm	/^ffff800000109eea:	6a 42                	pushq  $0x42$/;"	l
ffff800000109eec	kernel.asm	/^ffff800000109eec:	e9 41 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ef1	kernel.asm	/^ffff800000109ef1 <vector67>:$/;"	l
ffff800000109ef1	kernel.asm	/^ffff800000109ef1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ef3	kernel.asm	/^ffff800000109ef3:	6a 43                	pushq  $0x43$/;"	l
ffff800000109ef5	kernel.asm	/^ffff800000109ef5:	e9 38 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109efa	kernel.asm	/^ffff800000109efa <vector68>:$/;"	l
ffff800000109efa	kernel.asm	/^ffff800000109efa:	6a 00                	pushq  $0x0$/;"	l
ffff800000109efc	kernel.asm	/^ffff800000109efc:	6a 44                	pushq  $0x44$/;"	l
ffff800000109efe	kernel.asm	/^ffff800000109efe:	e9 2f f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f03	kernel.asm	/^ffff800000109f03 <vector69>:$/;"	l
ffff800000109f03	kernel.asm	/^ffff800000109f03:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f05	kernel.asm	/^ffff800000109f05:	6a 45                	pushq  $0x45$/;"	l
ffff800000109f07	kernel.asm	/^ffff800000109f07:	e9 26 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f0c	kernel.asm	/^ffff800000109f0c <vector70>:$/;"	l
ffff800000109f0c	kernel.asm	/^ffff800000109f0c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f0e	kernel.asm	/^ffff800000109f0e:	6a 46                	pushq  $0x46$/;"	l
ffff800000109f10	kernel.asm	/^ffff800000109f10:	e9 1d f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f15	kernel.asm	/^ffff800000109f15 <vector71>:$/;"	l
ffff800000109f15	kernel.asm	/^ffff800000109f15:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f17	kernel.asm	/^ffff800000109f17:	6a 47                	pushq  $0x47$/;"	l
ffff800000109f19	kernel.asm	/^ffff800000109f19:	e9 14 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f1e	kernel.asm	/^ffff800000109f1e <vector72>:$/;"	l
ffff800000109f1e	kernel.asm	/^ffff800000109f1e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f20	kernel.asm	/^ffff800000109f20:	6a 48                	pushq  $0x48$/;"	l
ffff800000109f22	kernel.asm	/^ffff800000109f22:	e9 0b f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f27	kernel.asm	/^ffff800000109f27 <vector73>:$/;"	l
ffff800000109f27	kernel.asm	/^ffff800000109f27:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f29	kernel.asm	/^ffff800000109f29:	6a 49                	pushq  $0x49$/;"	l
ffff800000109f2b	kernel.asm	/^ffff800000109f2b:	e9 02 f4 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f30	kernel.asm	/^ffff800000109f30 <vector74>:$/;"	l
ffff800000109f30	kernel.asm	/^ffff800000109f30:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f32	kernel.asm	/^ffff800000109f32:	6a 4a                	pushq  $0x4a$/;"	l
ffff800000109f34	kernel.asm	/^ffff800000109f34:	e9 f9 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f39	kernel.asm	/^ffff800000109f39 <vector75>:$/;"	l
ffff800000109f39	kernel.asm	/^ffff800000109f39:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f3b	kernel.asm	/^ffff800000109f3b:	6a 4b                	pushq  $0x4b$/;"	l
ffff800000109f3d	kernel.asm	/^ffff800000109f3d:	e9 f0 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f42	kernel.asm	/^ffff800000109f42 <vector76>:$/;"	l
ffff800000109f42	kernel.asm	/^ffff800000109f42:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f44	kernel.asm	/^ffff800000109f44:	6a 4c                	pushq  $0x4c$/;"	l
ffff800000109f46	kernel.asm	/^ffff800000109f46:	e9 e7 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f4b	kernel.asm	/^ffff800000109f4b <vector77>:$/;"	l
ffff800000109f4b	kernel.asm	/^ffff800000109f4b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f4d	kernel.asm	/^ffff800000109f4d:	6a 4d                	pushq  $0x4d$/;"	l
ffff800000109f4f	kernel.asm	/^ffff800000109f4f:	e9 de f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f54	kernel.asm	/^ffff800000109f54 <vector78>:$/;"	l
ffff800000109f54	kernel.asm	/^ffff800000109f54:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f56	kernel.asm	/^ffff800000109f56:	6a 4e                	pushq  $0x4e$/;"	l
ffff800000109f58	kernel.asm	/^ffff800000109f58:	e9 d5 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f5d	kernel.asm	/^ffff800000109f5d <vector79>:$/;"	l
ffff800000109f5d	kernel.asm	/^ffff800000109f5d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f5f	kernel.asm	/^ffff800000109f5f:	6a 4f                	pushq  $0x4f$/;"	l
ffff800000109f61	kernel.asm	/^ffff800000109f61:	e9 cc f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f66	kernel.asm	/^ffff800000109f66 <vector80>:$/;"	l
ffff800000109f66	kernel.asm	/^ffff800000109f66:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f68	kernel.asm	/^ffff800000109f68:	6a 50                	pushq  $0x50$/;"	l
ffff800000109f6a	kernel.asm	/^ffff800000109f6a:	e9 c3 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f6f	kernel.asm	/^ffff800000109f6f <vector81>:$/;"	l
ffff800000109f6f	kernel.asm	/^ffff800000109f6f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f71	kernel.asm	/^ffff800000109f71:	6a 51                	pushq  $0x51$/;"	l
ffff800000109f73	kernel.asm	/^ffff800000109f73:	e9 ba f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f78	kernel.asm	/^ffff800000109f78 <vector82>:$/;"	l
ffff800000109f78	kernel.asm	/^ffff800000109f78:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f7a	kernel.asm	/^ffff800000109f7a:	6a 52                	pushq  $0x52$/;"	l
ffff800000109f7c	kernel.asm	/^ffff800000109f7c:	e9 b1 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f81	kernel.asm	/^ffff800000109f81 <vector83>:$/;"	l
ffff800000109f81	kernel.asm	/^ffff800000109f81:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f83	kernel.asm	/^ffff800000109f83:	6a 53                	pushq  $0x53$/;"	l
ffff800000109f85	kernel.asm	/^ffff800000109f85:	e9 a8 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f8a	kernel.asm	/^ffff800000109f8a <vector84>:$/;"	l
ffff800000109f8a	kernel.asm	/^ffff800000109f8a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f8c	kernel.asm	/^ffff800000109f8c:	6a 54                	pushq  $0x54$/;"	l
ffff800000109f8e	kernel.asm	/^ffff800000109f8e:	e9 9f f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f93	kernel.asm	/^ffff800000109f93 <vector85>:$/;"	l
ffff800000109f93	kernel.asm	/^ffff800000109f93:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f95	kernel.asm	/^ffff800000109f95:	6a 55                	pushq  $0x55$/;"	l
ffff800000109f97	kernel.asm	/^ffff800000109f97:	e9 96 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109f9c	kernel.asm	/^ffff800000109f9c <vector86>:$/;"	l
ffff800000109f9c	kernel.asm	/^ffff800000109f9c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f9e	kernel.asm	/^ffff800000109f9e:	6a 56                	pushq  $0x56$/;"	l
ffff800000109fa0	kernel.asm	/^ffff800000109fa0:	e9 8d f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fa5	kernel.asm	/^ffff800000109fa5 <vector87>:$/;"	l
ffff800000109fa5	kernel.asm	/^ffff800000109fa5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fa7	kernel.asm	/^ffff800000109fa7:	6a 57                	pushq  $0x57$/;"	l
ffff800000109fa9	kernel.asm	/^ffff800000109fa9:	e9 84 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fae	kernel.asm	/^ffff800000109fae <vector88>:$/;"	l
ffff800000109fae	kernel.asm	/^ffff800000109fae:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fb0	kernel.asm	/^ffff800000109fb0:	6a 58                	pushq  $0x58$/;"	l
ffff800000109fb2	kernel.asm	/^ffff800000109fb2:	e9 7b f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fb7	kernel.asm	/^ffff800000109fb7 <vector89>:$/;"	l
ffff800000109fb7	kernel.asm	/^ffff800000109fb7:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fb9	kernel.asm	/^ffff800000109fb9:	6a 59                	pushq  $0x59$/;"	l
ffff800000109fbb	kernel.asm	/^ffff800000109fbb:	e9 72 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fc0	kernel.asm	/^ffff800000109fc0 <vector90>:$/;"	l
ffff800000109fc0	kernel.asm	/^ffff800000109fc0:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fc2	kernel.asm	/^ffff800000109fc2:	6a 5a                	pushq  $0x5a$/;"	l
ffff800000109fc4	kernel.asm	/^ffff800000109fc4:	e9 69 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fc9	kernel.asm	/^ffff800000109fc9 <vector91>:$/;"	l
ffff800000109fc9	kernel.asm	/^ffff800000109fc9:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fcb	kernel.asm	/^ffff800000109fcb:	6a 5b                	pushq  $0x5b$/;"	l
ffff800000109fcd	kernel.asm	/^ffff800000109fcd:	e9 60 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fd2	kernel.asm	/^ffff800000109fd2 <vector92>:$/;"	l
ffff800000109fd2	kernel.asm	/^ffff800000109fd2:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fd4	kernel.asm	/^ffff800000109fd4:	6a 5c                	pushq  $0x5c$/;"	l
ffff800000109fd6	kernel.asm	/^ffff800000109fd6:	e9 57 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fdb	kernel.asm	/^ffff800000109fdb <vector93>:$/;"	l
ffff800000109fdb	kernel.asm	/^ffff800000109fdb:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fdd	kernel.asm	/^ffff800000109fdd:	6a 5d                	pushq  $0x5d$/;"	l
ffff800000109fdf	kernel.asm	/^ffff800000109fdf:	e9 4e f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fe4	kernel.asm	/^ffff800000109fe4 <vector94>:$/;"	l
ffff800000109fe4	kernel.asm	/^ffff800000109fe4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fe6	kernel.asm	/^ffff800000109fe6:	6a 5e                	pushq  $0x5e$/;"	l
ffff800000109fe8	kernel.asm	/^ffff800000109fe8:	e9 45 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fed	kernel.asm	/^ffff800000109fed <vector95>:$/;"	l
ffff800000109fed	kernel.asm	/^ffff800000109fed:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fef	kernel.asm	/^ffff800000109fef:	6a 5f                	pushq  $0x5f$/;"	l
ffff800000109ff1	kernel.asm	/^ffff800000109ff1:	e9 3c f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109ff6	kernel.asm	/^ffff800000109ff6 <vector96>:$/;"	l
ffff800000109ff6	kernel.asm	/^ffff800000109ff6:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ff8	kernel.asm	/^ffff800000109ff8:	6a 60                	pushq  $0x60$/;"	l
ffff800000109ffa	kernel.asm	/^ffff800000109ffa:	e9 33 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff800000109fff	kernel.asm	/^ffff800000109fff <vector97>:$/;"	l
ffff800000109fff	kernel.asm	/^ffff800000109fff:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a001	kernel.asm	/^ffff80000010a001:	6a 61                	pushq  $0x61$/;"	l
ffff80000010a003	kernel.asm	/^ffff80000010a003:	e9 2a f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a008	kernel.asm	/^ffff80000010a008 <vector98>:$/;"	l
ffff80000010a008	kernel.asm	/^ffff80000010a008:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a00a	kernel.asm	/^ffff80000010a00a:	6a 62                	pushq  $0x62$/;"	l
ffff80000010a00c	kernel.asm	/^ffff80000010a00c:	e9 21 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a011	kernel.asm	/^ffff80000010a011 <vector99>:$/;"	l
ffff80000010a011	kernel.asm	/^ffff80000010a011:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a013	kernel.asm	/^ffff80000010a013:	6a 63                	pushq  $0x63$/;"	l
ffff80000010a015	kernel.asm	/^ffff80000010a015:	e9 18 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a01a	kernel.asm	/^ffff80000010a01a <vector100>:$/;"	l
ffff80000010a01a	kernel.asm	/^ffff80000010a01a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a01c	kernel.asm	/^ffff80000010a01c:	6a 64                	pushq  $0x64$/;"	l
ffff80000010a01e	kernel.asm	/^ffff80000010a01e:	e9 0f f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a023	kernel.asm	/^ffff80000010a023 <vector101>:$/;"	l
ffff80000010a023	kernel.asm	/^ffff80000010a023:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a025	kernel.asm	/^ffff80000010a025:	6a 65                	pushq  $0x65$/;"	l
ffff80000010a027	kernel.asm	/^ffff80000010a027:	e9 06 f3 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a02c	kernel.asm	/^ffff80000010a02c <vector102>:$/;"	l
ffff80000010a02c	kernel.asm	/^ffff80000010a02c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a02e	kernel.asm	/^ffff80000010a02e:	6a 66                	pushq  $0x66$/;"	l
ffff80000010a030	kernel.asm	/^ffff80000010a030:	e9 fd f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a035	kernel.asm	/^ffff80000010a035 <vector103>:$/;"	l
ffff80000010a035	kernel.asm	/^ffff80000010a035:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a037	kernel.asm	/^ffff80000010a037:	6a 67                	pushq  $0x67$/;"	l
ffff80000010a039	kernel.asm	/^ffff80000010a039:	e9 f4 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a03e	kernel.asm	/^ffff80000010a03e <vector104>:$/;"	l
ffff80000010a03e	kernel.asm	/^ffff80000010a03e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a040	kernel.asm	/^ffff80000010a040:	6a 68                	pushq  $0x68$/;"	l
ffff80000010a042	kernel.asm	/^ffff80000010a042:	e9 eb f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a047	kernel.asm	/^ffff80000010a047 <vector105>:$/;"	l
ffff80000010a047	kernel.asm	/^ffff80000010a047:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a049	kernel.asm	/^ffff80000010a049:	6a 69                	pushq  $0x69$/;"	l
ffff80000010a04b	kernel.asm	/^ffff80000010a04b:	e9 e2 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a050	kernel.asm	/^ffff80000010a050 <vector106>:$/;"	l
ffff80000010a050	kernel.asm	/^ffff80000010a050:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a052	kernel.asm	/^ffff80000010a052:	6a 6a                	pushq  $0x6a$/;"	l
ffff80000010a054	kernel.asm	/^ffff80000010a054:	e9 d9 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a059	kernel.asm	/^ffff80000010a059 <vector107>:$/;"	l
ffff80000010a059	kernel.asm	/^ffff80000010a059:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a05b	kernel.asm	/^ffff80000010a05b:	6a 6b                	pushq  $0x6b$/;"	l
ffff80000010a05d	kernel.asm	/^ffff80000010a05d:	e9 d0 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a062	kernel.asm	/^ffff80000010a062 <vector108>:$/;"	l
ffff80000010a062	kernel.asm	/^ffff80000010a062:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a064	kernel.asm	/^ffff80000010a064:	6a 6c                	pushq  $0x6c$/;"	l
ffff80000010a066	kernel.asm	/^ffff80000010a066:	e9 c7 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a06b	kernel.asm	/^ffff80000010a06b <vector109>:$/;"	l
ffff80000010a06b	kernel.asm	/^ffff80000010a06b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a06d	kernel.asm	/^ffff80000010a06d:	6a 6d                	pushq  $0x6d$/;"	l
ffff80000010a06f	kernel.asm	/^ffff80000010a06f:	e9 be f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a074	kernel.asm	/^ffff80000010a074 <vector110>:$/;"	l
ffff80000010a074	kernel.asm	/^ffff80000010a074:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a076	kernel.asm	/^ffff80000010a076:	6a 6e                	pushq  $0x6e$/;"	l
ffff80000010a078	kernel.asm	/^ffff80000010a078:	e9 b5 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a07d	kernel.asm	/^ffff80000010a07d <vector111>:$/;"	l
ffff80000010a07d	kernel.asm	/^ffff80000010a07d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a07f	kernel.asm	/^ffff80000010a07f:	6a 6f                	pushq  $0x6f$/;"	l
ffff80000010a081	kernel.asm	/^ffff80000010a081:	e9 ac f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a086	kernel.asm	/^ffff80000010a086 <vector112>:$/;"	l
ffff80000010a086	kernel.asm	/^ffff80000010a086:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a088	kernel.asm	/^ffff80000010a088:	6a 70                	pushq  $0x70$/;"	l
ffff80000010a08a	kernel.asm	/^ffff80000010a08a:	e9 a3 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a08f	kernel.asm	/^ffff80000010a08f <vector113>:$/;"	l
ffff80000010a08f	kernel.asm	/^ffff80000010a08f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a091	kernel.asm	/^ffff80000010a091:	6a 71                	pushq  $0x71$/;"	l
ffff80000010a093	kernel.asm	/^ffff80000010a093:	e9 9a f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a098	kernel.asm	/^ffff80000010a098 <vector114>:$/;"	l
ffff80000010a098	kernel.asm	/^ffff80000010a098:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a09a	kernel.asm	/^ffff80000010a09a:	6a 72                	pushq  $0x72$/;"	l
ffff80000010a09c	kernel.asm	/^ffff80000010a09c:	e9 91 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0a1	kernel.asm	/^ffff80000010a0a1 <vector115>:$/;"	l
ffff80000010a0a1	kernel.asm	/^ffff80000010a0a1:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0a3	kernel.asm	/^ffff80000010a0a3:	6a 73                	pushq  $0x73$/;"	l
ffff80000010a0a5	kernel.asm	/^ffff80000010a0a5:	e9 88 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0aa	kernel.asm	/^ffff80000010a0aa <vector116>:$/;"	l
ffff80000010a0aa	kernel.asm	/^ffff80000010a0aa:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0ac	kernel.asm	/^ffff80000010a0ac:	6a 74                	pushq  $0x74$/;"	l
ffff80000010a0ae	kernel.asm	/^ffff80000010a0ae:	e9 7f f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0b3	kernel.asm	/^ffff80000010a0b3 <vector117>:$/;"	l
ffff80000010a0b3	kernel.asm	/^ffff80000010a0b3:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0b5	kernel.asm	/^ffff80000010a0b5:	6a 75                	pushq  $0x75$/;"	l
ffff80000010a0b7	kernel.asm	/^ffff80000010a0b7:	e9 76 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0bc	kernel.asm	/^ffff80000010a0bc <vector118>:$/;"	l
ffff80000010a0bc	kernel.asm	/^ffff80000010a0bc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0be	kernel.asm	/^ffff80000010a0be:	6a 76                	pushq  $0x76$/;"	l
ffff80000010a0c0	kernel.asm	/^ffff80000010a0c0:	e9 6d f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0c5	kernel.asm	/^ffff80000010a0c5 <vector119>:$/;"	l
ffff80000010a0c5	kernel.asm	/^ffff80000010a0c5:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0c7	kernel.asm	/^ffff80000010a0c7:	6a 77                	pushq  $0x77$/;"	l
ffff80000010a0c9	kernel.asm	/^ffff80000010a0c9:	e9 64 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0ce	kernel.asm	/^ffff80000010a0ce <vector120>:$/;"	l
ffff80000010a0ce	kernel.asm	/^ffff80000010a0ce:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0d0	kernel.asm	/^ffff80000010a0d0:	6a 78                	pushq  $0x78$/;"	l
ffff80000010a0d2	kernel.asm	/^ffff80000010a0d2:	e9 5b f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0d7	kernel.asm	/^ffff80000010a0d7 <vector121>:$/;"	l
ffff80000010a0d7	kernel.asm	/^ffff80000010a0d7:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0d9	kernel.asm	/^ffff80000010a0d9:	6a 79                	pushq  $0x79$/;"	l
ffff80000010a0db	kernel.asm	/^ffff80000010a0db:	e9 52 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0e0	kernel.asm	/^ffff80000010a0e0 <vector122>:$/;"	l
ffff80000010a0e0	kernel.asm	/^ffff80000010a0e0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0e2	kernel.asm	/^ffff80000010a0e2:	6a 7a                	pushq  $0x7a$/;"	l
ffff80000010a0e4	kernel.asm	/^ffff80000010a0e4:	e9 49 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0e9	kernel.asm	/^ffff80000010a0e9 <vector123>:$/;"	l
ffff80000010a0e9	kernel.asm	/^ffff80000010a0e9:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0eb	kernel.asm	/^ffff80000010a0eb:	6a 7b                	pushq  $0x7b$/;"	l
ffff80000010a0ed	kernel.asm	/^ffff80000010a0ed:	e9 40 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0f2	kernel.asm	/^ffff80000010a0f2 <vector124>:$/;"	l
ffff80000010a0f2	kernel.asm	/^ffff80000010a0f2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0f4	kernel.asm	/^ffff80000010a0f4:	6a 7c                	pushq  $0x7c$/;"	l
ffff80000010a0f6	kernel.asm	/^ffff80000010a0f6:	e9 37 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a0fb	kernel.asm	/^ffff80000010a0fb <vector125>:$/;"	l
ffff80000010a0fb	kernel.asm	/^ffff80000010a0fb:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0fd	kernel.asm	/^ffff80000010a0fd:	6a 7d                	pushq  $0x7d$/;"	l
ffff80000010a0ff	kernel.asm	/^ffff80000010a0ff:	e9 2e f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a104	kernel.asm	/^ffff80000010a104 <vector126>:$/;"	l
ffff80000010a104	kernel.asm	/^ffff80000010a104:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a106	kernel.asm	/^ffff80000010a106:	6a 7e                	pushq  $0x7e$/;"	l
ffff80000010a108	kernel.asm	/^ffff80000010a108:	e9 25 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a10d	kernel.asm	/^ffff80000010a10d <vector127>:$/;"	l
ffff80000010a10d	kernel.asm	/^ffff80000010a10d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a10f	kernel.asm	/^ffff80000010a10f:	6a 7f                	pushq  $0x7f$/;"	l
ffff80000010a111	kernel.asm	/^ffff80000010a111:	e9 1c f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a116	kernel.asm	/^ffff80000010a116 <vector128>:$/;"	l
ffff80000010a116	kernel.asm	/^ffff80000010a116:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a118	kernel.asm	/^ffff80000010a118:	68 80 00 00 00       	pushq  $0x80$/;"	l
ffff80000010a11d	kernel.asm	/^ffff80000010a11d:	e9 10 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a122	kernel.asm	/^ffff80000010a122 <vector129>:$/;"	l
ffff80000010a122	kernel.asm	/^ffff80000010a122:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a124	kernel.asm	/^ffff80000010a124:	68 81 00 00 00       	pushq  $0x81$/;"	l
ffff80000010a129	kernel.asm	/^ffff80000010a129:	e9 04 f2 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a12e	kernel.asm	/^ffff80000010a12e <vector130>:$/;"	l
ffff80000010a12e	kernel.asm	/^ffff80000010a12e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a130	kernel.asm	/^ffff80000010a130:	68 82 00 00 00       	pushq  $0x82$/;"	l
ffff80000010a135	kernel.asm	/^ffff80000010a135:	e9 f8 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a13a	kernel.asm	/^ffff80000010a13a <vector131>:$/;"	l
ffff80000010a13a	kernel.asm	/^ffff80000010a13a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a13c	kernel.asm	/^ffff80000010a13c:	68 83 00 00 00       	pushq  $0x83$/;"	l
ffff80000010a141	kernel.asm	/^ffff80000010a141:	e9 ec f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a146	kernel.asm	/^ffff80000010a146 <vector132>:$/;"	l
ffff80000010a146	kernel.asm	/^ffff80000010a146:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a148	kernel.asm	/^ffff80000010a148:	68 84 00 00 00       	pushq  $0x84$/;"	l
ffff80000010a14d	kernel.asm	/^ffff80000010a14d:	e9 e0 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a152	kernel.asm	/^ffff80000010a152 <vector133>:$/;"	l
ffff80000010a152	kernel.asm	/^ffff80000010a152:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a154	kernel.asm	/^ffff80000010a154:	68 85 00 00 00       	pushq  $0x85$/;"	l
ffff80000010a159	kernel.asm	/^ffff80000010a159:	e9 d4 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a15e	kernel.asm	/^ffff80000010a15e <vector134>:$/;"	l
ffff80000010a15e	kernel.asm	/^ffff80000010a15e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a160	kernel.asm	/^ffff80000010a160:	68 86 00 00 00       	pushq  $0x86$/;"	l
ffff80000010a165	kernel.asm	/^ffff80000010a165:	e9 c8 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a16a	kernel.asm	/^ffff80000010a16a <vector135>:$/;"	l
ffff80000010a16a	kernel.asm	/^ffff80000010a16a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a16c	kernel.asm	/^ffff80000010a16c:	68 87 00 00 00       	pushq  $0x87$/;"	l
ffff80000010a171	kernel.asm	/^ffff80000010a171:	e9 bc f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a176	kernel.asm	/^ffff80000010a176 <vector136>:$/;"	l
ffff80000010a176	kernel.asm	/^ffff80000010a176:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a178	kernel.asm	/^ffff80000010a178:	68 88 00 00 00       	pushq  $0x88$/;"	l
ffff80000010a17d	kernel.asm	/^ffff80000010a17d:	e9 b0 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a182	kernel.asm	/^ffff80000010a182 <vector137>:$/;"	l
ffff80000010a182	kernel.asm	/^ffff80000010a182:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a184	kernel.asm	/^ffff80000010a184:	68 89 00 00 00       	pushq  $0x89$/;"	l
ffff80000010a189	kernel.asm	/^ffff80000010a189:	e9 a4 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a18e	kernel.asm	/^ffff80000010a18e <vector138>:$/;"	l
ffff80000010a18e	kernel.asm	/^ffff80000010a18e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a190	kernel.asm	/^ffff80000010a190:	68 8a 00 00 00       	pushq  $0x8a$/;"	l
ffff80000010a195	kernel.asm	/^ffff80000010a195:	e9 98 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a19a	kernel.asm	/^ffff80000010a19a <vector139>:$/;"	l
ffff80000010a19a	kernel.asm	/^ffff80000010a19a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a19c	kernel.asm	/^ffff80000010a19c:	68 8b 00 00 00       	pushq  $0x8b$/;"	l
ffff80000010a1a1	kernel.asm	/^ffff80000010a1a1:	e9 8c f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1a6	kernel.asm	/^ffff80000010a1a6 <vector140>:$/;"	l
ffff80000010a1a6	kernel.asm	/^ffff80000010a1a6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1a8	kernel.asm	/^ffff80000010a1a8:	68 8c 00 00 00       	pushq  $0x8c$/;"	l
ffff80000010a1ad	kernel.asm	/^ffff80000010a1ad:	e9 80 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1b2	kernel.asm	/^ffff80000010a1b2 <vector141>:$/;"	l
ffff80000010a1b2	kernel.asm	/^ffff80000010a1b2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1b4	kernel.asm	/^ffff80000010a1b4:	68 8d 00 00 00       	pushq  $0x8d$/;"	l
ffff80000010a1b9	kernel.asm	/^ffff80000010a1b9:	e9 74 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1be	kernel.asm	/^ffff80000010a1be <vector142>:$/;"	l
ffff80000010a1be	kernel.asm	/^ffff80000010a1be:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1c0	kernel.asm	/^ffff80000010a1c0:	68 8e 00 00 00       	pushq  $0x8e$/;"	l
ffff80000010a1c5	kernel.asm	/^ffff80000010a1c5:	e9 68 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1ca	kernel.asm	/^ffff80000010a1ca <vector143>:$/;"	l
ffff80000010a1ca	kernel.asm	/^ffff80000010a1ca:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1cc	kernel.asm	/^ffff80000010a1cc:	68 8f 00 00 00       	pushq  $0x8f$/;"	l
ffff80000010a1d1	kernel.asm	/^ffff80000010a1d1:	e9 5c f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1d6	kernel.asm	/^ffff80000010a1d6 <vector144>:$/;"	l
ffff80000010a1d6	kernel.asm	/^ffff80000010a1d6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1d8	kernel.asm	/^ffff80000010a1d8:	68 90 00 00 00       	pushq  $0x90$/;"	l
ffff80000010a1dd	kernel.asm	/^ffff80000010a1dd:	e9 50 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1e2	kernel.asm	/^ffff80000010a1e2 <vector145>:$/;"	l
ffff80000010a1e2	kernel.asm	/^ffff80000010a1e2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1e4	kernel.asm	/^ffff80000010a1e4:	68 91 00 00 00       	pushq  $0x91$/;"	l
ffff80000010a1e9	kernel.asm	/^ffff80000010a1e9:	e9 44 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1ee	kernel.asm	/^ffff80000010a1ee <vector146>:$/;"	l
ffff80000010a1ee	kernel.asm	/^ffff80000010a1ee:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1f0	kernel.asm	/^ffff80000010a1f0:	68 92 00 00 00       	pushq  $0x92$/;"	l
ffff80000010a1f5	kernel.asm	/^ffff80000010a1f5:	e9 38 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a1fa	kernel.asm	/^ffff80000010a1fa <vector147>:$/;"	l
ffff80000010a1fa	kernel.asm	/^ffff80000010a1fa:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1fc	kernel.asm	/^ffff80000010a1fc:	68 93 00 00 00       	pushq  $0x93$/;"	l
ffff80000010a201	kernel.asm	/^ffff80000010a201:	e9 2c f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a206	kernel.asm	/^ffff80000010a206 <vector148>:$/;"	l
ffff80000010a206	kernel.asm	/^ffff80000010a206:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a208	kernel.asm	/^ffff80000010a208:	68 94 00 00 00       	pushq  $0x94$/;"	l
ffff80000010a20d	kernel.asm	/^ffff80000010a20d:	e9 20 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a212	kernel.asm	/^ffff80000010a212 <vector149>:$/;"	l
ffff80000010a212	kernel.asm	/^ffff80000010a212:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a214	kernel.asm	/^ffff80000010a214:	68 95 00 00 00       	pushq  $0x95$/;"	l
ffff80000010a219	kernel.asm	/^ffff80000010a219:	e9 14 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a21e	kernel.asm	/^ffff80000010a21e <vector150>:$/;"	l
ffff80000010a21e	kernel.asm	/^ffff80000010a21e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a220	kernel.asm	/^ffff80000010a220:	68 96 00 00 00       	pushq  $0x96$/;"	l
ffff80000010a225	kernel.asm	/^ffff80000010a225:	e9 08 f1 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a22a	kernel.asm	/^ffff80000010a22a <vector151>:$/;"	l
ffff80000010a22a	kernel.asm	/^ffff80000010a22a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a22c	kernel.asm	/^ffff80000010a22c:	68 97 00 00 00       	pushq  $0x97$/;"	l
ffff80000010a231	kernel.asm	/^ffff80000010a231:	e9 fc f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a236	kernel.asm	/^ffff80000010a236 <vector152>:$/;"	l
ffff80000010a236	kernel.asm	/^ffff80000010a236:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a238	kernel.asm	/^ffff80000010a238:	68 98 00 00 00       	pushq  $0x98$/;"	l
ffff80000010a23d	kernel.asm	/^ffff80000010a23d:	e9 f0 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a242	kernel.asm	/^ffff80000010a242 <vector153>:$/;"	l
ffff80000010a242	kernel.asm	/^ffff80000010a242:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a244	kernel.asm	/^ffff80000010a244:	68 99 00 00 00       	pushq  $0x99$/;"	l
ffff80000010a249	kernel.asm	/^ffff80000010a249:	e9 e4 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a24e	kernel.asm	/^ffff80000010a24e <vector154>:$/;"	l
ffff80000010a24e	kernel.asm	/^ffff80000010a24e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a250	kernel.asm	/^ffff80000010a250:	68 9a 00 00 00       	pushq  $0x9a$/;"	l
ffff80000010a255	kernel.asm	/^ffff80000010a255:	e9 d8 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a25a	kernel.asm	/^ffff80000010a25a <vector155>:$/;"	l
ffff80000010a25a	kernel.asm	/^ffff80000010a25a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a25c	kernel.asm	/^ffff80000010a25c:	68 9b 00 00 00       	pushq  $0x9b$/;"	l
ffff80000010a261	kernel.asm	/^ffff80000010a261:	e9 cc f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a266	kernel.asm	/^ffff80000010a266 <vector156>:$/;"	l
ffff80000010a266	kernel.asm	/^ffff80000010a266:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a268	kernel.asm	/^ffff80000010a268:	68 9c 00 00 00       	pushq  $0x9c$/;"	l
ffff80000010a26d	kernel.asm	/^ffff80000010a26d:	e9 c0 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a272	kernel.asm	/^ffff80000010a272 <vector157>:$/;"	l
ffff80000010a272	kernel.asm	/^ffff80000010a272:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a274	kernel.asm	/^ffff80000010a274:	68 9d 00 00 00       	pushq  $0x9d$/;"	l
ffff80000010a279	kernel.asm	/^ffff80000010a279:	e9 b4 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a27e	kernel.asm	/^ffff80000010a27e <vector158>:$/;"	l
ffff80000010a27e	kernel.asm	/^ffff80000010a27e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a280	kernel.asm	/^ffff80000010a280:	68 9e 00 00 00       	pushq  $0x9e$/;"	l
ffff80000010a285	kernel.asm	/^ffff80000010a285:	e9 a8 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a28a	kernel.asm	/^ffff80000010a28a <vector159>:$/;"	l
ffff80000010a28a	kernel.asm	/^ffff80000010a28a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a28c	kernel.asm	/^ffff80000010a28c:	68 9f 00 00 00       	pushq  $0x9f$/;"	l
ffff80000010a291	kernel.asm	/^ffff80000010a291:	e9 9c f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a296	kernel.asm	/^ffff80000010a296 <vector160>:$/;"	l
ffff80000010a296	kernel.asm	/^ffff80000010a296:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a298	kernel.asm	/^ffff80000010a298:	68 a0 00 00 00       	pushq  $0xa0$/;"	l
ffff80000010a29d	kernel.asm	/^ffff80000010a29d:	e9 90 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2a2	kernel.asm	/^ffff80000010a2a2 <vector161>:$/;"	l
ffff80000010a2a2	kernel.asm	/^ffff80000010a2a2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2a4	kernel.asm	/^ffff80000010a2a4:	68 a1 00 00 00       	pushq  $0xa1$/;"	l
ffff80000010a2a9	kernel.asm	/^ffff80000010a2a9:	e9 84 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2ae	kernel.asm	/^ffff80000010a2ae <vector162>:$/;"	l
ffff80000010a2ae	kernel.asm	/^ffff80000010a2ae:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2b0	kernel.asm	/^ffff80000010a2b0:	68 a2 00 00 00       	pushq  $0xa2$/;"	l
ffff80000010a2b5	kernel.asm	/^ffff80000010a2b5:	e9 78 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2ba	kernel.asm	/^ffff80000010a2ba <vector163>:$/;"	l
ffff80000010a2ba	kernel.asm	/^ffff80000010a2ba:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2bc	kernel.asm	/^ffff80000010a2bc:	68 a3 00 00 00       	pushq  $0xa3$/;"	l
ffff80000010a2c1	kernel.asm	/^ffff80000010a2c1:	e9 6c f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2c6	kernel.asm	/^ffff80000010a2c6 <vector164>:$/;"	l
ffff80000010a2c6	kernel.asm	/^ffff80000010a2c6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2c8	kernel.asm	/^ffff80000010a2c8:	68 a4 00 00 00       	pushq  $0xa4$/;"	l
ffff80000010a2cd	kernel.asm	/^ffff80000010a2cd:	e9 60 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2d2	kernel.asm	/^ffff80000010a2d2 <vector165>:$/;"	l
ffff80000010a2d2	kernel.asm	/^ffff80000010a2d2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2d4	kernel.asm	/^ffff80000010a2d4:	68 a5 00 00 00       	pushq  $0xa5$/;"	l
ffff80000010a2d9	kernel.asm	/^ffff80000010a2d9:	e9 54 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2de	kernel.asm	/^ffff80000010a2de <vector166>:$/;"	l
ffff80000010a2de	kernel.asm	/^ffff80000010a2de:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2e0	kernel.asm	/^ffff80000010a2e0:	68 a6 00 00 00       	pushq  $0xa6$/;"	l
ffff80000010a2e5	kernel.asm	/^ffff80000010a2e5:	e9 48 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2ea	kernel.asm	/^ffff80000010a2ea <vector167>:$/;"	l
ffff80000010a2ea	kernel.asm	/^ffff80000010a2ea:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ec	kernel.asm	/^ffff80000010a2ec:	68 a7 00 00 00       	pushq  $0xa7$/;"	l
ffff80000010a2f1	kernel.asm	/^ffff80000010a2f1:	e9 3c f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a2f6	kernel.asm	/^ffff80000010a2f6 <vector168>:$/;"	l
ffff80000010a2f6	kernel.asm	/^ffff80000010a2f6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2f8	kernel.asm	/^ffff80000010a2f8:	68 a8 00 00 00       	pushq  $0xa8$/;"	l
ffff80000010a2fd	kernel.asm	/^ffff80000010a2fd:	e9 30 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a302	kernel.asm	/^ffff80000010a302 <vector169>:$/;"	l
ffff80000010a302	kernel.asm	/^ffff80000010a302:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a304	kernel.asm	/^ffff80000010a304:	68 a9 00 00 00       	pushq  $0xa9$/;"	l
ffff80000010a309	kernel.asm	/^ffff80000010a309:	e9 24 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a30e	kernel.asm	/^ffff80000010a30e <vector170>:$/;"	l
ffff80000010a30e	kernel.asm	/^ffff80000010a30e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a310	kernel.asm	/^ffff80000010a310:	68 aa 00 00 00       	pushq  $0xaa$/;"	l
ffff80000010a315	kernel.asm	/^ffff80000010a315:	e9 18 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a31a	kernel.asm	/^ffff80000010a31a <vector171>:$/;"	l
ffff80000010a31a	kernel.asm	/^ffff80000010a31a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a31c	kernel.asm	/^ffff80000010a31c:	68 ab 00 00 00       	pushq  $0xab$/;"	l
ffff80000010a321	kernel.asm	/^ffff80000010a321:	e9 0c f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a326	kernel.asm	/^ffff80000010a326 <vector172>:$/;"	l
ffff80000010a326	kernel.asm	/^ffff80000010a326:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a328	kernel.asm	/^ffff80000010a328:	68 ac 00 00 00       	pushq  $0xac$/;"	l
ffff80000010a32d	kernel.asm	/^ffff80000010a32d:	e9 00 f0 ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a332	kernel.asm	/^ffff80000010a332 <vector173>:$/;"	l
ffff80000010a332	kernel.asm	/^ffff80000010a332:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a334	kernel.asm	/^ffff80000010a334:	68 ad 00 00 00       	pushq  $0xad$/;"	l
ffff80000010a339	kernel.asm	/^ffff80000010a339:	e9 f4 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a33e	kernel.asm	/^ffff80000010a33e <vector174>:$/;"	l
ffff80000010a33e	kernel.asm	/^ffff80000010a33e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a340	kernel.asm	/^ffff80000010a340:	68 ae 00 00 00       	pushq  $0xae$/;"	l
ffff80000010a345	kernel.asm	/^ffff80000010a345:	e9 e8 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a34a	kernel.asm	/^ffff80000010a34a <vector175>:$/;"	l
ffff80000010a34a	kernel.asm	/^ffff80000010a34a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a34c	kernel.asm	/^ffff80000010a34c:	68 af 00 00 00       	pushq  $0xaf$/;"	l
ffff80000010a351	kernel.asm	/^ffff80000010a351:	e9 dc ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a356	kernel.asm	/^ffff80000010a356 <vector176>:$/;"	l
ffff80000010a356	kernel.asm	/^ffff80000010a356:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a358	kernel.asm	/^ffff80000010a358:	68 b0 00 00 00       	pushq  $0xb0$/;"	l
ffff80000010a35d	kernel.asm	/^ffff80000010a35d:	e9 d0 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a362	kernel.asm	/^ffff80000010a362 <vector177>:$/;"	l
ffff80000010a362	kernel.asm	/^ffff80000010a362:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a364	kernel.asm	/^ffff80000010a364:	68 b1 00 00 00       	pushq  $0xb1$/;"	l
ffff80000010a369	kernel.asm	/^ffff80000010a369:	e9 c4 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a36e	kernel.asm	/^ffff80000010a36e <vector178>:$/;"	l
ffff80000010a36e	kernel.asm	/^ffff80000010a36e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a370	kernel.asm	/^ffff80000010a370:	68 b2 00 00 00       	pushq  $0xb2$/;"	l
ffff80000010a375	kernel.asm	/^ffff80000010a375:	e9 b8 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a37a	kernel.asm	/^ffff80000010a37a <vector179>:$/;"	l
ffff80000010a37a	kernel.asm	/^ffff80000010a37a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a37c	kernel.asm	/^ffff80000010a37c:	68 b3 00 00 00       	pushq  $0xb3$/;"	l
ffff80000010a381	kernel.asm	/^ffff80000010a381:	e9 ac ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a386	kernel.asm	/^ffff80000010a386 <vector180>:$/;"	l
ffff80000010a386	kernel.asm	/^ffff80000010a386:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a388	kernel.asm	/^ffff80000010a388:	68 b4 00 00 00       	pushq  $0xb4$/;"	l
ffff80000010a38d	kernel.asm	/^ffff80000010a38d:	e9 a0 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a392	kernel.asm	/^ffff80000010a392 <vector181>:$/;"	l
ffff80000010a392	kernel.asm	/^ffff80000010a392:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a394	kernel.asm	/^ffff80000010a394:	68 b5 00 00 00       	pushq  $0xb5$/;"	l
ffff80000010a399	kernel.asm	/^ffff80000010a399:	e9 94 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a39e	kernel.asm	/^ffff80000010a39e <vector182>:$/;"	l
ffff80000010a39e	kernel.asm	/^ffff80000010a39e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3a0	kernel.asm	/^ffff80000010a3a0:	68 b6 00 00 00       	pushq  $0xb6$/;"	l
ffff80000010a3a5	kernel.asm	/^ffff80000010a3a5:	e9 88 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3aa	kernel.asm	/^ffff80000010a3aa <vector183>:$/;"	l
ffff80000010a3aa	kernel.asm	/^ffff80000010a3aa:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3ac	kernel.asm	/^ffff80000010a3ac:	68 b7 00 00 00       	pushq  $0xb7$/;"	l
ffff80000010a3b1	kernel.asm	/^ffff80000010a3b1:	e9 7c ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3b6	kernel.asm	/^ffff80000010a3b6 <vector184>:$/;"	l
ffff80000010a3b6	kernel.asm	/^ffff80000010a3b6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3b8	kernel.asm	/^ffff80000010a3b8:	68 b8 00 00 00       	pushq  $0xb8$/;"	l
ffff80000010a3bd	kernel.asm	/^ffff80000010a3bd:	e9 70 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3c2	kernel.asm	/^ffff80000010a3c2 <vector185>:$/;"	l
ffff80000010a3c2	kernel.asm	/^ffff80000010a3c2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3c4	kernel.asm	/^ffff80000010a3c4:	68 b9 00 00 00       	pushq  $0xb9$/;"	l
ffff80000010a3c9	kernel.asm	/^ffff80000010a3c9:	e9 64 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3ce	kernel.asm	/^ffff80000010a3ce <vector186>:$/;"	l
ffff80000010a3ce	kernel.asm	/^ffff80000010a3ce:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3d0	kernel.asm	/^ffff80000010a3d0:	68 ba 00 00 00       	pushq  $0xba$/;"	l
ffff80000010a3d5	kernel.asm	/^ffff80000010a3d5:	e9 58 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3da	kernel.asm	/^ffff80000010a3da <vector187>:$/;"	l
ffff80000010a3da	kernel.asm	/^ffff80000010a3da:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3dc	kernel.asm	/^ffff80000010a3dc:	68 bb 00 00 00       	pushq  $0xbb$/;"	l
ffff80000010a3e1	kernel.asm	/^ffff80000010a3e1:	e9 4c ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3e6	kernel.asm	/^ffff80000010a3e6 <vector188>:$/;"	l
ffff80000010a3e6	kernel.asm	/^ffff80000010a3e6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3e8	kernel.asm	/^ffff80000010a3e8:	68 bc 00 00 00       	pushq  $0xbc$/;"	l
ffff80000010a3ed	kernel.asm	/^ffff80000010a3ed:	e9 40 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3f2	kernel.asm	/^ffff80000010a3f2 <vector189>:$/;"	l
ffff80000010a3f2	kernel.asm	/^ffff80000010a3f2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3f4	kernel.asm	/^ffff80000010a3f4:	68 bd 00 00 00       	pushq  $0xbd$/;"	l
ffff80000010a3f9	kernel.asm	/^ffff80000010a3f9:	e9 34 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a3fe	kernel.asm	/^ffff80000010a3fe <vector190>:$/;"	l
ffff80000010a3fe	kernel.asm	/^ffff80000010a3fe:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a400	kernel.asm	/^ffff80000010a400:	68 be 00 00 00       	pushq  $0xbe$/;"	l
ffff80000010a405	kernel.asm	/^ffff80000010a405:	e9 28 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a40a	kernel.asm	/^ffff80000010a40a <vector191>:$/;"	l
ffff80000010a40a	kernel.asm	/^ffff80000010a40a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a40c	kernel.asm	/^ffff80000010a40c:	68 bf 00 00 00       	pushq  $0xbf$/;"	l
ffff80000010a411	kernel.asm	/^ffff80000010a411:	e9 1c ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a416	kernel.asm	/^ffff80000010a416 <vector192>:$/;"	l
ffff80000010a416	kernel.asm	/^ffff80000010a416:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a418	kernel.asm	/^ffff80000010a418:	68 c0 00 00 00       	pushq  $0xc0$/;"	l
ffff80000010a41d	kernel.asm	/^ffff80000010a41d:	e9 10 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a422	kernel.asm	/^ffff80000010a422 <vector193>:$/;"	l
ffff80000010a422	kernel.asm	/^ffff80000010a422:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a424	kernel.asm	/^ffff80000010a424:	68 c1 00 00 00       	pushq  $0xc1$/;"	l
ffff80000010a429	kernel.asm	/^ffff80000010a429:	e9 04 ef ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a42e	kernel.asm	/^ffff80000010a42e <vector194>:$/;"	l
ffff80000010a42e	kernel.asm	/^ffff80000010a42e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a430	kernel.asm	/^ffff80000010a430:	68 c2 00 00 00       	pushq  $0xc2$/;"	l
ffff80000010a435	kernel.asm	/^ffff80000010a435:	e9 f8 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a43a	kernel.asm	/^ffff80000010a43a <vector195>:$/;"	l
ffff80000010a43a	kernel.asm	/^ffff80000010a43a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a43c	kernel.asm	/^ffff80000010a43c:	68 c3 00 00 00       	pushq  $0xc3$/;"	l
ffff80000010a441	kernel.asm	/^ffff80000010a441:	e9 ec ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a446	kernel.asm	/^ffff80000010a446 <vector196>:$/;"	l
ffff80000010a446	kernel.asm	/^ffff80000010a446:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a448	kernel.asm	/^ffff80000010a448:	68 c4 00 00 00       	pushq  $0xc4$/;"	l
ffff80000010a44d	kernel.asm	/^ffff80000010a44d:	e9 e0 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a452	kernel.asm	/^ffff80000010a452 <vector197>:$/;"	l
ffff80000010a452	kernel.asm	/^ffff80000010a452:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a454	kernel.asm	/^ffff80000010a454:	68 c5 00 00 00       	pushq  $0xc5$/;"	l
ffff80000010a459	kernel.asm	/^ffff80000010a459:	e9 d4 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a45e	kernel.asm	/^ffff80000010a45e <vector198>:$/;"	l
ffff80000010a45e	kernel.asm	/^ffff80000010a45e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a460	kernel.asm	/^ffff80000010a460:	68 c6 00 00 00       	pushq  $0xc6$/;"	l
ffff80000010a465	kernel.asm	/^ffff80000010a465:	e9 c8 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a46a	kernel.asm	/^ffff80000010a46a <vector199>:$/;"	l
ffff80000010a46a	kernel.asm	/^ffff80000010a46a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a46c	kernel.asm	/^ffff80000010a46c:	68 c7 00 00 00       	pushq  $0xc7$/;"	l
ffff80000010a471	kernel.asm	/^ffff80000010a471:	e9 bc ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a476	kernel.asm	/^ffff80000010a476 <vector200>:$/;"	l
ffff80000010a476	kernel.asm	/^ffff80000010a476:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a478	kernel.asm	/^ffff80000010a478:	68 c8 00 00 00       	pushq  $0xc8$/;"	l
ffff80000010a47d	kernel.asm	/^ffff80000010a47d:	e9 b0 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a482	kernel.asm	/^ffff80000010a482 <vector201>:$/;"	l
ffff80000010a482	kernel.asm	/^ffff80000010a482:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a484	kernel.asm	/^ffff80000010a484:	68 c9 00 00 00       	pushq  $0xc9$/;"	l
ffff80000010a489	kernel.asm	/^ffff80000010a489:	e9 a4 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a48e	kernel.asm	/^ffff80000010a48e <vector202>:$/;"	l
ffff80000010a48e	kernel.asm	/^ffff80000010a48e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a490	kernel.asm	/^ffff80000010a490:	68 ca 00 00 00       	pushq  $0xca$/;"	l
ffff80000010a495	kernel.asm	/^ffff80000010a495:	e9 98 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a49a	kernel.asm	/^ffff80000010a49a <vector203>:$/;"	l
ffff80000010a49a	kernel.asm	/^ffff80000010a49a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a49c	kernel.asm	/^ffff80000010a49c:	68 cb 00 00 00       	pushq  $0xcb$/;"	l
ffff80000010a4a1	kernel.asm	/^ffff80000010a4a1:	e9 8c ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4a6	kernel.asm	/^ffff80000010a4a6 <vector204>:$/;"	l
ffff80000010a4a6	kernel.asm	/^ffff80000010a4a6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4a8	kernel.asm	/^ffff80000010a4a8:	68 cc 00 00 00       	pushq  $0xcc$/;"	l
ffff80000010a4ad	kernel.asm	/^ffff80000010a4ad:	e9 80 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4b2	kernel.asm	/^ffff80000010a4b2 <vector205>:$/;"	l
ffff80000010a4b2	kernel.asm	/^ffff80000010a4b2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4b4	kernel.asm	/^ffff80000010a4b4:	68 cd 00 00 00       	pushq  $0xcd$/;"	l
ffff80000010a4b9	kernel.asm	/^ffff80000010a4b9:	e9 74 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4be	kernel.asm	/^ffff80000010a4be <vector206>:$/;"	l
ffff80000010a4be	kernel.asm	/^ffff80000010a4be:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4c0	kernel.asm	/^ffff80000010a4c0:	68 ce 00 00 00       	pushq  $0xce$/;"	l
ffff80000010a4c5	kernel.asm	/^ffff80000010a4c5:	e9 68 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4ca	kernel.asm	/^ffff80000010a4ca <vector207>:$/;"	l
ffff80000010a4ca	kernel.asm	/^ffff80000010a4ca:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4cc	kernel.asm	/^ffff80000010a4cc:	68 cf 00 00 00       	pushq  $0xcf$/;"	l
ffff80000010a4d1	kernel.asm	/^ffff80000010a4d1:	e9 5c ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4d6	kernel.asm	/^ffff80000010a4d6 <vector208>:$/;"	l
ffff80000010a4d6	kernel.asm	/^ffff80000010a4d6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4d8	kernel.asm	/^ffff80000010a4d8:	68 d0 00 00 00       	pushq  $0xd0$/;"	l
ffff80000010a4dd	kernel.asm	/^ffff80000010a4dd:	e9 50 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4e2	kernel.asm	/^ffff80000010a4e2 <vector209>:$/;"	l
ffff80000010a4e2	kernel.asm	/^ffff80000010a4e2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4e4	kernel.asm	/^ffff80000010a4e4:	68 d1 00 00 00       	pushq  $0xd1$/;"	l
ffff80000010a4e9	kernel.asm	/^ffff80000010a4e9:	e9 44 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4ee	kernel.asm	/^ffff80000010a4ee <vector210>:$/;"	l
ffff80000010a4ee	kernel.asm	/^ffff80000010a4ee:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4f0	kernel.asm	/^ffff80000010a4f0:	68 d2 00 00 00       	pushq  $0xd2$/;"	l
ffff80000010a4f5	kernel.asm	/^ffff80000010a4f5:	e9 38 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a4fa	kernel.asm	/^ffff80000010a4fa <vector211>:$/;"	l
ffff80000010a4fa	kernel.asm	/^ffff80000010a4fa:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4fc	kernel.asm	/^ffff80000010a4fc:	68 d3 00 00 00       	pushq  $0xd3$/;"	l
ffff80000010a501	kernel.asm	/^ffff80000010a501:	e9 2c ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a506	kernel.asm	/^ffff80000010a506 <vector212>:$/;"	l
ffff80000010a506	kernel.asm	/^ffff80000010a506:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a508	kernel.asm	/^ffff80000010a508:	68 d4 00 00 00       	pushq  $0xd4$/;"	l
ffff80000010a50d	kernel.asm	/^ffff80000010a50d:	e9 20 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a512	kernel.asm	/^ffff80000010a512 <vector213>:$/;"	l
ffff80000010a512	kernel.asm	/^ffff80000010a512:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a514	kernel.asm	/^ffff80000010a514:	68 d5 00 00 00       	pushq  $0xd5$/;"	l
ffff80000010a519	kernel.asm	/^ffff80000010a519:	e9 14 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a51e	kernel.asm	/^ffff80000010a51e <vector214>:$/;"	l
ffff80000010a51e	kernel.asm	/^ffff80000010a51e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a520	kernel.asm	/^ffff80000010a520:	68 d6 00 00 00       	pushq  $0xd6$/;"	l
ffff80000010a525	kernel.asm	/^ffff80000010a525:	e9 08 ee ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a52a	kernel.asm	/^ffff80000010a52a <vector215>:$/;"	l
ffff80000010a52a	kernel.asm	/^ffff80000010a52a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a52c	kernel.asm	/^ffff80000010a52c:	68 d7 00 00 00       	pushq  $0xd7$/;"	l
ffff80000010a531	kernel.asm	/^ffff80000010a531:	e9 fc ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a536	kernel.asm	/^ffff80000010a536 <vector216>:$/;"	l
ffff80000010a536	kernel.asm	/^ffff80000010a536:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a538	kernel.asm	/^ffff80000010a538:	68 d8 00 00 00       	pushq  $0xd8$/;"	l
ffff80000010a53d	kernel.asm	/^ffff80000010a53d:	e9 f0 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a542	kernel.asm	/^ffff80000010a542 <vector217>:$/;"	l
ffff80000010a542	kernel.asm	/^ffff80000010a542:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a544	kernel.asm	/^ffff80000010a544:	68 d9 00 00 00       	pushq  $0xd9$/;"	l
ffff80000010a549	kernel.asm	/^ffff80000010a549:	e9 e4 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a54e	kernel.asm	/^ffff80000010a54e <vector218>:$/;"	l
ffff80000010a54e	kernel.asm	/^ffff80000010a54e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a550	kernel.asm	/^ffff80000010a550:	68 da 00 00 00       	pushq  $0xda$/;"	l
ffff80000010a555	kernel.asm	/^ffff80000010a555:	e9 d8 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a55a	kernel.asm	/^ffff80000010a55a <vector219>:$/;"	l
ffff80000010a55a	kernel.asm	/^ffff80000010a55a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a55c	kernel.asm	/^ffff80000010a55c:	68 db 00 00 00       	pushq  $0xdb$/;"	l
ffff80000010a561	kernel.asm	/^ffff80000010a561:	e9 cc ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a566	kernel.asm	/^ffff80000010a566 <vector220>:$/;"	l
ffff80000010a566	kernel.asm	/^ffff80000010a566:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a568	kernel.asm	/^ffff80000010a568:	68 dc 00 00 00       	pushq  $0xdc$/;"	l
ffff80000010a56d	kernel.asm	/^ffff80000010a56d:	e9 c0 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a572	kernel.asm	/^ffff80000010a572 <vector221>:$/;"	l
ffff80000010a572	kernel.asm	/^ffff80000010a572:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a574	kernel.asm	/^ffff80000010a574:	68 dd 00 00 00       	pushq  $0xdd$/;"	l
ffff80000010a579	kernel.asm	/^ffff80000010a579:	e9 b4 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a57e	kernel.asm	/^ffff80000010a57e <vector222>:$/;"	l
ffff80000010a57e	kernel.asm	/^ffff80000010a57e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a580	kernel.asm	/^ffff80000010a580:	68 de 00 00 00       	pushq  $0xde$/;"	l
ffff80000010a585	kernel.asm	/^ffff80000010a585:	e9 a8 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a58a	kernel.asm	/^ffff80000010a58a <vector223>:$/;"	l
ffff80000010a58a	kernel.asm	/^ffff80000010a58a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a58c	kernel.asm	/^ffff80000010a58c:	68 df 00 00 00       	pushq  $0xdf$/;"	l
ffff80000010a591	kernel.asm	/^ffff80000010a591:	e9 9c ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a596	kernel.asm	/^ffff80000010a596 <vector224>:$/;"	l
ffff80000010a596	kernel.asm	/^ffff80000010a596:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a598	kernel.asm	/^ffff80000010a598:	68 e0 00 00 00       	pushq  $0xe0$/;"	l
ffff80000010a59d	kernel.asm	/^ffff80000010a59d:	e9 90 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5a2	kernel.asm	/^ffff80000010a5a2 <vector225>:$/;"	l
ffff80000010a5a2	kernel.asm	/^ffff80000010a5a2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5a4	kernel.asm	/^ffff80000010a5a4:	68 e1 00 00 00       	pushq  $0xe1$/;"	l
ffff80000010a5a9	kernel.asm	/^ffff80000010a5a9:	e9 84 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5ae	kernel.asm	/^ffff80000010a5ae <vector226>:$/;"	l
ffff80000010a5ae	kernel.asm	/^ffff80000010a5ae:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5b0	kernel.asm	/^ffff80000010a5b0:	68 e2 00 00 00       	pushq  $0xe2$/;"	l
ffff80000010a5b5	kernel.asm	/^ffff80000010a5b5:	e9 78 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5ba	kernel.asm	/^ffff80000010a5ba <vector227>:$/;"	l
ffff80000010a5ba	kernel.asm	/^ffff80000010a5ba:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5bc	kernel.asm	/^ffff80000010a5bc:	68 e3 00 00 00       	pushq  $0xe3$/;"	l
ffff80000010a5c1	kernel.asm	/^ffff80000010a5c1:	e9 6c ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5c6	kernel.asm	/^ffff80000010a5c6 <vector228>:$/;"	l
ffff80000010a5c6	kernel.asm	/^ffff80000010a5c6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5c8	kernel.asm	/^ffff80000010a5c8:	68 e4 00 00 00       	pushq  $0xe4$/;"	l
ffff80000010a5cd	kernel.asm	/^ffff80000010a5cd:	e9 60 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5d2	kernel.asm	/^ffff80000010a5d2 <vector229>:$/;"	l
ffff80000010a5d2	kernel.asm	/^ffff80000010a5d2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5d4	kernel.asm	/^ffff80000010a5d4:	68 e5 00 00 00       	pushq  $0xe5$/;"	l
ffff80000010a5d9	kernel.asm	/^ffff80000010a5d9:	e9 54 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5de	kernel.asm	/^ffff80000010a5de <vector230>:$/;"	l
ffff80000010a5de	kernel.asm	/^ffff80000010a5de:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5e0	kernel.asm	/^ffff80000010a5e0:	68 e6 00 00 00       	pushq  $0xe6$/;"	l
ffff80000010a5e5	kernel.asm	/^ffff80000010a5e5:	e9 48 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5ea	kernel.asm	/^ffff80000010a5ea <vector231>:$/;"	l
ffff80000010a5ea	kernel.asm	/^ffff80000010a5ea:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ec	kernel.asm	/^ffff80000010a5ec:	68 e7 00 00 00       	pushq  $0xe7$/;"	l
ffff80000010a5f1	kernel.asm	/^ffff80000010a5f1:	e9 3c ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a5f6	kernel.asm	/^ffff80000010a5f6 <vector232>:$/;"	l
ffff80000010a5f6	kernel.asm	/^ffff80000010a5f6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5f8	kernel.asm	/^ffff80000010a5f8:	68 e8 00 00 00       	pushq  $0xe8$/;"	l
ffff80000010a5fd	kernel.asm	/^ffff80000010a5fd:	e9 30 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a602	kernel.asm	/^ffff80000010a602 <vector233>:$/;"	l
ffff80000010a602	kernel.asm	/^ffff80000010a602:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a604	kernel.asm	/^ffff80000010a604:	68 e9 00 00 00       	pushq  $0xe9$/;"	l
ffff80000010a609	kernel.asm	/^ffff80000010a609:	e9 24 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a60e	kernel.asm	/^ffff80000010a60e <vector234>:$/;"	l
ffff80000010a60e	kernel.asm	/^ffff80000010a60e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a610	kernel.asm	/^ffff80000010a610:	68 ea 00 00 00       	pushq  $0xea$/;"	l
ffff80000010a615	kernel.asm	/^ffff80000010a615:	e9 18 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a61a	kernel.asm	/^ffff80000010a61a <vector235>:$/;"	l
ffff80000010a61a	kernel.asm	/^ffff80000010a61a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a61c	kernel.asm	/^ffff80000010a61c:	68 eb 00 00 00       	pushq  $0xeb$/;"	l
ffff80000010a621	kernel.asm	/^ffff80000010a621:	e9 0c ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a626	kernel.asm	/^ffff80000010a626 <vector236>:$/;"	l
ffff80000010a626	kernel.asm	/^ffff80000010a626:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a628	kernel.asm	/^ffff80000010a628:	68 ec 00 00 00       	pushq  $0xec$/;"	l
ffff80000010a62d	kernel.asm	/^ffff80000010a62d:	e9 00 ed ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a632	kernel.asm	/^ffff80000010a632 <vector237>:$/;"	l
ffff80000010a632	kernel.asm	/^ffff80000010a632:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a634	kernel.asm	/^ffff80000010a634:	68 ed 00 00 00       	pushq  $0xed$/;"	l
ffff80000010a639	kernel.asm	/^ffff80000010a639:	e9 f4 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a63e	kernel.asm	/^ffff80000010a63e <vector238>:$/;"	l
ffff80000010a63e	kernel.asm	/^ffff80000010a63e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a640	kernel.asm	/^ffff80000010a640:	68 ee 00 00 00       	pushq  $0xee$/;"	l
ffff80000010a645	kernel.asm	/^ffff80000010a645:	e9 e8 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a64a	kernel.asm	/^ffff80000010a64a <vector239>:$/;"	l
ffff80000010a64a	kernel.asm	/^ffff80000010a64a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a64c	kernel.asm	/^ffff80000010a64c:	68 ef 00 00 00       	pushq  $0xef$/;"	l
ffff80000010a651	kernel.asm	/^ffff80000010a651:	e9 dc ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a656	kernel.asm	/^ffff80000010a656 <vector240>:$/;"	l
ffff80000010a656	kernel.asm	/^ffff80000010a656:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a658	kernel.asm	/^ffff80000010a658:	68 f0 00 00 00       	pushq  $0xf0$/;"	l
ffff80000010a65d	kernel.asm	/^ffff80000010a65d:	e9 d0 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a662	kernel.asm	/^ffff80000010a662 <vector241>:$/;"	l
ffff80000010a662	kernel.asm	/^ffff80000010a662:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a664	kernel.asm	/^ffff80000010a664:	68 f1 00 00 00       	pushq  $0xf1$/;"	l
ffff80000010a669	kernel.asm	/^ffff80000010a669:	e9 c4 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a66e	kernel.asm	/^ffff80000010a66e <vector242>:$/;"	l
ffff80000010a66e	kernel.asm	/^ffff80000010a66e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a670	kernel.asm	/^ffff80000010a670:	68 f2 00 00 00       	pushq  $0xf2$/;"	l
ffff80000010a675	kernel.asm	/^ffff80000010a675:	e9 b8 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a67a	kernel.asm	/^ffff80000010a67a <vector243>:$/;"	l
ffff80000010a67a	kernel.asm	/^ffff80000010a67a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a67c	kernel.asm	/^ffff80000010a67c:	68 f3 00 00 00       	pushq  $0xf3$/;"	l
ffff80000010a681	kernel.asm	/^ffff80000010a681:	e9 ac ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a686	kernel.asm	/^ffff80000010a686 <vector244>:$/;"	l
ffff80000010a686	kernel.asm	/^ffff80000010a686:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a688	kernel.asm	/^ffff80000010a688:	68 f4 00 00 00       	pushq  $0xf4$/;"	l
ffff80000010a68d	kernel.asm	/^ffff80000010a68d:	e9 a0 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a692	kernel.asm	/^ffff80000010a692 <vector245>:$/;"	l
ffff80000010a692	kernel.asm	/^ffff80000010a692:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a694	kernel.asm	/^ffff80000010a694:	68 f5 00 00 00       	pushq  $0xf5$/;"	l
ffff80000010a699	kernel.asm	/^ffff80000010a699:	e9 94 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a69e	kernel.asm	/^ffff80000010a69e <vector246>:$/;"	l
ffff80000010a69e	kernel.asm	/^ffff80000010a69e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6a0	kernel.asm	/^ffff80000010a6a0:	68 f6 00 00 00       	pushq  $0xf6$/;"	l
ffff80000010a6a5	kernel.asm	/^ffff80000010a6a5:	e9 88 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6aa	kernel.asm	/^ffff80000010a6aa <vector247>:$/;"	l
ffff80000010a6aa	kernel.asm	/^ffff80000010a6aa:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6ac	kernel.asm	/^ffff80000010a6ac:	68 f7 00 00 00       	pushq  $0xf7$/;"	l
ffff80000010a6b1	kernel.asm	/^ffff80000010a6b1:	e9 7c ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6b6	kernel.asm	/^ffff80000010a6b6 <vector248>:$/;"	l
ffff80000010a6b6	kernel.asm	/^ffff80000010a6b6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6b8	kernel.asm	/^ffff80000010a6b8:	68 f8 00 00 00       	pushq  $0xf8$/;"	l
ffff80000010a6bd	kernel.asm	/^ffff80000010a6bd:	e9 70 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6c2	kernel.asm	/^ffff80000010a6c2 <vector249>:$/;"	l
ffff80000010a6c2	kernel.asm	/^ffff80000010a6c2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6c4	kernel.asm	/^ffff80000010a6c4:	68 f9 00 00 00       	pushq  $0xf9$/;"	l
ffff80000010a6c9	kernel.asm	/^ffff80000010a6c9:	e9 64 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6ce	kernel.asm	/^ffff80000010a6ce <vector250>:$/;"	l
ffff80000010a6ce	kernel.asm	/^ffff80000010a6ce:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6d0	kernel.asm	/^ffff80000010a6d0:	68 fa 00 00 00       	pushq  $0xfa$/;"	l
ffff80000010a6d5	kernel.asm	/^ffff80000010a6d5:	e9 58 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6da	kernel.asm	/^ffff80000010a6da <vector251>:$/;"	l
ffff80000010a6da	kernel.asm	/^ffff80000010a6da:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6dc	kernel.asm	/^ffff80000010a6dc:	68 fb 00 00 00       	pushq  $0xfb$/;"	l
ffff80000010a6e1	kernel.asm	/^ffff80000010a6e1:	e9 4c ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6e6	kernel.asm	/^ffff80000010a6e6 <vector252>:$/;"	l
ffff80000010a6e6	kernel.asm	/^ffff80000010a6e6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6e8	kernel.asm	/^ffff80000010a6e8:	68 fc 00 00 00       	pushq  $0xfc$/;"	l
ffff80000010a6ed	kernel.asm	/^ffff80000010a6ed:	e9 40 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6f2	kernel.asm	/^ffff80000010a6f2 <vector253>:$/;"	l
ffff80000010a6f2	kernel.asm	/^ffff80000010a6f2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6f4	kernel.asm	/^ffff80000010a6f4:	68 fd 00 00 00       	pushq  $0xfd$/;"	l
ffff80000010a6f9	kernel.asm	/^ffff80000010a6f9:	e9 34 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a6fe	kernel.asm	/^ffff80000010a6fe <vector254>:$/;"	l
ffff80000010a6fe	kernel.asm	/^ffff80000010a6fe:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a700	kernel.asm	/^ffff80000010a700:	68 fe 00 00 00       	pushq  $0xfe$/;"	l
ffff80000010a705	kernel.asm	/^ffff80000010a705:	e9 28 ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a70a	kernel.asm	/^ffff80000010a70a <vector255>:$/;"	l
ffff80000010a70a	kernel.asm	/^ffff80000010a70a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a70c	kernel.asm	/^ffff80000010a70c:	68 ff 00 00 00       	pushq  $0xff$/;"	l
ffff80000010a711	kernel.asm	/^ffff80000010a711:	e9 1c ec ff ff       	jmpq   ffff800000109332 <alltraps>$/;"	l
ffff80000010a716	kernel.asm	/^ffff80000010a716 <inb>:$/;"	l
ffff80000010a716	kernel.asm	/^ffff80000010a716:	55                   	push   %rbp$/;"	l
ffff80000010a717	kernel.asm	/^ffff80000010a717:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a71a	kernel.asm	/^ffff80000010a71a:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010a71e	kernel.asm	/^ffff80000010a71e:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a720	kernel.asm	/^ffff80000010a720:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff80000010a724	kernel.asm	/^ffff80000010a724:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010a728	kernel.asm	/^ffff80000010a728:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010a72a	kernel.asm	/^ffff80000010a72a:	ec                   	in     (%dx),%al$/;"	l
ffff80000010a72b	kernel.asm	/^ffff80000010a72b:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010a72e	kernel.asm	/^ffff80000010a72e:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010a732	kernel.asm	/^ffff80000010a732:	c9                   	leaveq $/;"	l
ffff80000010a733	kernel.asm	/^ffff80000010a733:	c3                   	retq   $/;"	l
ffff80000010a734	kernel.asm	/^ffff80000010a734 <outb>:$/;"	l
ffff80000010a734	kernel.asm	/^ffff80000010a734:	55                   	push   %rbp$/;"	l
ffff80000010a735	kernel.asm	/^ffff80000010a735:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a738	kernel.asm	/^ffff80000010a738:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a73c	kernel.asm	/^ffff80000010a73c:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a73e	kernel.asm	/^ffff80000010a73e:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a740	kernel.asm	/^ffff80000010a740:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff80000010a744	kernel.asm	/^ffff80000010a744:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a747	kernel.asm	/^ffff80000010a747:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a74b	kernel.asm	/^ffff80000010a74b:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff80000010a74f	kernel.asm	/^ffff80000010a74f:	ee                   	out    %al,(%dx)$/;"	l
ffff80000010a750	kernel.asm	/^ffff80000010a750:	90                   	nop$/;"	l
ffff80000010a751	kernel.asm	/^ffff80000010a751:	c9                   	leaveq $/;"	l
ffff80000010a752	kernel.asm	/^ffff80000010a752:	c3                   	retq   $/;"	l
ffff80000010a753	kernel.asm	/^ffff80000010a753 <write3C0>:$/;"	l
ffff80000010a753	kernel.asm	/^ffff80000010a753:	55                   	push   %rbp$/;"	l
ffff80000010a754	kernel.asm	/^ffff80000010a754:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a757	kernel.asm	/^ffff80000010a757:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a75b	kernel.asm	/^ffff80000010a75b:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a75d	kernel.asm	/^ffff80000010a75d:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a75f	kernel.asm	/^ffff80000010a75f:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a762	kernel.asm	/^ffff80000010a762:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a765	kernel.asm	/^ffff80000010a765:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010a76a	kernel.asm	/^ffff80000010a76a:	48 b8 16 a7 10 00 00 	movabs $0xffff80000010a716,%rax$/;"	l
ffff80000010a771	kernel.asm	/^ffff80000010a771:	80 ff ff $/;"	l
ffff80000010a774	kernel.asm	/^ffff80000010a774:	ff d0                	callq  *%rax$/;"	l
ffff80000010a776	kernel.asm	/^ffff80000010a776:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a77a	kernel.asm	/^ffff80000010a77a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a77c	kernel.asm	/^ffff80000010a77c:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010a781	kernel.asm	/^ffff80000010a781:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a788	kernel.asm	/^ffff80000010a788:	80 ff ff $/;"	l
ffff80000010a78b	kernel.asm	/^ffff80000010a78b:	ff d0                	callq  *%rax$/;"	l
ffff80000010a78d	kernel.asm	/^ffff80000010a78d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a791	kernel.asm	/^ffff80000010a791:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a793	kernel.asm	/^ffff80000010a793:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010a798	kernel.asm	/^ffff80000010a798:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a79f	kernel.asm	/^ffff80000010a79f:	80 ff ff $/;"	l
ffff80000010a7a2	kernel.asm	/^ffff80000010a7a2:	ff d0                	callq  *%rax$/;"	l
ffff80000010a7a4	kernel.asm	/^ffff80000010a7a4:	90                   	nop$/;"	l
ffff80000010a7a5	kernel.asm	/^ffff80000010a7a5:	c9                   	leaveq $/;"	l
ffff80000010a7a6	kernel.asm	/^ffff80000010a7a6:	c3                   	retq   $/;"	l
ffff80000010a7a7	kernel.asm	/^ffff80000010a7a7 <write3C2>:$/;"	l
ffff80000010a7a7	kernel.asm	/^ffff80000010a7a7:	55                   	push   %rbp$/;"	l
ffff80000010a7a8	kernel.asm	/^ffff80000010a7a8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a7ab	kernel.asm	/^ffff80000010a7ab:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a7af	kernel.asm	/^ffff80000010a7af:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a7b1	kernel.asm	/^ffff80000010a7b1:	88 45 fc             	mov    %al,-0x4(%rbp)$/;"	l
ffff80000010a7b4	kernel.asm	/^ffff80000010a7b4:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a7b8	kernel.asm	/^ffff80000010a7b8:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a7ba	kernel.asm	/^ffff80000010a7ba:	bf c2 03 00 00       	mov    $0x3c2,%edi$/;"	l
ffff80000010a7bf	kernel.asm	/^ffff80000010a7bf:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a7c6	kernel.asm	/^ffff80000010a7c6:	80 ff ff $/;"	l
ffff80000010a7c9	kernel.asm	/^ffff80000010a7c9:	ff d0                	callq  *%rax$/;"	l
ffff80000010a7cb	kernel.asm	/^ffff80000010a7cb:	90                   	nop$/;"	l
ffff80000010a7cc	kernel.asm	/^ffff80000010a7cc:	c9                   	leaveq $/;"	l
ffff80000010a7cd	kernel.asm	/^ffff80000010a7cd:	c3                   	retq   $/;"	l
ffff80000010a7ce	kernel.asm	/^ffff80000010a7ce <write3C4>:$/;"	l
ffff80000010a7ce	kernel.asm	/^ffff80000010a7ce:	55                   	push   %rbp$/;"	l
ffff80000010a7cf	kernel.asm	/^ffff80000010a7cf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a7d2	kernel.asm	/^ffff80000010a7d2:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a7d6	kernel.asm	/^ffff80000010a7d6:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a7d8	kernel.asm	/^ffff80000010a7d8:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a7da	kernel.asm	/^ffff80000010a7da:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a7dd	kernel.asm	/^ffff80000010a7dd:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a7e0	kernel.asm	/^ffff80000010a7e0:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a7e4	kernel.asm	/^ffff80000010a7e4:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a7e6	kernel.asm	/^ffff80000010a7e6:	bf c4 03 00 00       	mov    $0x3c4,%edi$/;"	l
ffff80000010a7eb	kernel.asm	/^ffff80000010a7eb:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a7f2	kernel.asm	/^ffff80000010a7f2:	80 ff ff $/;"	l
ffff80000010a7f5	kernel.asm	/^ffff80000010a7f5:	ff d0                	callq  *%rax$/;"	l
ffff80000010a7f7	kernel.asm	/^ffff80000010a7f7:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a7fb	kernel.asm	/^ffff80000010a7fb:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a7fd	kernel.asm	/^ffff80000010a7fd:	bf c5 03 00 00       	mov    $0x3c5,%edi$/;"	l
ffff80000010a802	kernel.asm	/^ffff80000010a802:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a809	kernel.asm	/^ffff80000010a809:	80 ff ff $/;"	l
ffff80000010a80c	kernel.asm	/^ffff80000010a80c:	ff d0                	callq  *%rax$/;"	l
ffff80000010a80e	kernel.asm	/^ffff80000010a80e:	90                   	nop$/;"	l
ffff80000010a80f	kernel.asm	/^ffff80000010a80f:	c9                   	leaveq $/;"	l
ffff80000010a810	kernel.asm	/^ffff80000010a810:	c3                   	retq   $/;"	l
ffff80000010a811	kernel.asm	/^ffff80000010a811 <write3CE>:$/;"	l
ffff80000010a811	kernel.asm	/^ffff80000010a811:	55                   	push   %rbp$/;"	l
ffff80000010a812	kernel.asm	/^ffff80000010a812:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a815	kernel.asm	/^ffff80000010a815:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a819	kernel.asm	/^ffff80000010a819:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a81b	kernel.asm	/^ffff80000010a81b:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a81d	kernel.asm	/^ffff80000010a81d:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a820	kernel.asm	/^ffff80000010a820:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a823	kernel.asm	/^ffff80000010a823:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a827	kernel.asm	/^ffff80000010a827:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a829	kernel.asm	/^ffff80000010a829:	bf ce 03 00 00       	mov    $0x3ce,%edi$/;"	l
ffff80000010a82e	kernel.asm	/^ffff80000010a82e:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a835	kernel.asm	/^ffff80000010a835:	80 ff ff $/;"	l
ffff80000010a838	kernel.asm	/^ffff80000010a838:	ff d0                	callq  *%rax$/;"	l
ffff80000010a83a	kernel.asm	/^ffff80000010a83a:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a83e	kernel.asm	/^ffff80000010a83e:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a840	kernel.asm	/^ffff80000010a840:	bf cf 03 00 00       	mov    $0x3cf,%edi$/;"	l
ffff80000010a845	kernel.asm	/^ffff80000010a845:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a84c	kernel.asm	/^ffff80000010a84c:	80 ff ff $/;"	l
ffff80000010a84f	kernel.asm	/^ffff80000010a84f:	ff d0                	callq  *%rax$/;"	l
ffff80000010a851	kernel.asm	/^ffff80000010a851:	90                   	nop$/;"	l
ffff80000010a852	kernel.asm	/^ffff80000010a852:	c9                   	leaveq $/;"	l
ffff80000010a853	kernel.asm	/^ffff80000010a853:	c3                   	retq   $/;"	l
ffff80000010a854	kernel.asm	/^ffff80000010a854 <write3D4>:$/;"	l
ffff80000010a854	kernel.asm	/^ffff80000010a854:	55                   	push   %rbp$/;"	l
ffff80000010a855	kernel.asm	/^ffff80000010a855:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a858	kernel.asm	/^ffff80000010a858:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a85c	kernel.asm	/^ffff80000010a85c:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a85e	kernel.asm	/^ffff80000010a85e:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a860	kernel.asm	/^ffff80000010a860:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a863	kernel.asm	/^ffff80000010a863:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a866	kernel.asm	/^ffff80000010a866:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a86a	kernel.asm	/^ffff80000010a86a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a86c	kernel.asm	/^ffff80000010a86c:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff80000010a871	kernel.asm	/^ffff80000010a871:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a878	kernel.asm	/^ffff80000010a878:	80 ff ff $/;"	l
ffff80000010a87b	kernel.asm	/^ffff80000010a87b:	ff d0                	callq  *%rax$/;"	l
ffff80000010a87d	kernel.asm	/^ffff80000010a87d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a881	kernel.asm	/^ffff80000010a881:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a883	kernel.asm	/^ffff80000010a883:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff80000010a888	kernel.asm	/^ffff80000010a888:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a88f	kernel.asm	/^ffff80000010a88f:	80 ff ff $/;"	l
ffff80000010a892	kernel.asm	/^ffff80000010a892:	ff d0                	callq  *%rax$/;"	l
ffff80000010a894	kernel.asm	/^ffff80000010a894:	90                   	nop$/;"	l
ffff80000010a895	kernel.asm	/^ffff80000010a895:	c9                   	leaveq $/;"	l
ffff80000010a896	kernel.asm	/^ffff80000010a896:	c3                   	retq   $/;"	l
ffff80000010a897	kernel.asm	/^ffff80000010a897 <write3C6>:$/;"	l
ffff80000010a897	kernel.asm	/^ffff80000010a897:	55                   	push   %rbp$/;"	l
ffff80000010a898	kernel.asm	/^ffff80000010a898:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a89b	kernel.asm	/^ffff80000010a89b:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a89f	kernel.asm	/^ffff80000010a89f:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a8a1	kernel.asm	/^ffff80000010a8a1:	88 45 fc             	mov    %al,-0x4(%rbp)$/;"	l
ffff80000010a8a4	kernel.asm	/^ffff80000010a8a4:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a8a8	kernel.asm	/^ffff80000010a8a8:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a8aa	kernel.asm	/^ffff80000010a8aa:	bf c6 03 00 00       	mov    $0x3c6,%edi$/;"	l
ffff80000010a8af	kernel.asm	/^ffff80000010a8af:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a8b6	kernel.asm	/^ffff80000010a8b6:	80 ff ff $/;"	l
ffff80000010a8b9	kernel.asm	/^ffff80000010a8b9:	ff d0                	callq  *%rax$/;"	l
ffff80000010a8bb	kernel.asm	/^ffff80000010a8bb:	90                   	nop$/;"	l
ffff80000010a8bc	kernel.asm	/^ffff80000010a8bc:	c9                   	leaveq $/;"	l
ffff80000010a8bd	kernel.asm	/^ffff80000010a8bd:	c3                   	retq   $/;"	l
ffff80000010a8be	kernel.asm	/^ffff80000010a8be <vgaSetPalette>:$/;"	l
ffff80000010a8be	kernel.asm	/^ffff80000010a8be:	55                   	push   %rbp$/;"	l
ffff80000010a8bf	kernel.asm	/^ffff80000010a8bf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a8c2	kernel.asm	/^ffff80000010a8c2:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010a8c6	kernel.asm	/^ffff80000010a8c6:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff80000010a8c9	kernel.asm	/^ffff80000010a8c9:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff80000010a8cc	kernel.asm	/^ffff80000010a8cc:	89 55 f4             	mov    %edx,-0xc(%rbp)$/;"	l
ffff80000010a8cf	kernel.asm	/^ffff80000010a8cf:	89 4d f0             	mov    %ecx,-0x10(%rbp)$/;"	l
ffff80000010a8d2	kernel.asm	/^ffff80000010a8d2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010a8d5	kernel.asm	/^ffff80000010a8d5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010a8d8	kernel.asm	/^ffff80000010a8d8:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a8da	kernel.asm	/^ffff80000010a8da:	bf c8 03 00 00       	mov    $0x3c8,%edi$/;"	l
ffff80000010a8df	kernel.asm	/^ffff80000010a8df:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a8e6	kernel.asm	/^ffff80000010a8e6:	80 ff ff $/;"	l
ffff80000010a8e9	kernel.asm	/^ffff80000010a8e9:	ff d0                	callq  *%rax$/;"	l
ffff80000010a8eb	kernel.asm	/^ffff80000010a8eb:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010a8ee	kernel.asm	/^ffff80000010a8ee:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010a8f1	kernel.asm	/^ffff80000010a8f1:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a8f3	kernel.asm	/^ffff80000010a8f3:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010a8f8	kernel.asm	/^ffff80000010a8f8:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a8ff	kernel.asm	/^ffff80000010a8ff:	80 ff ff $/;"	l
ffff80000010a902	kernel.asm	/^ffff80000010a902:	ff d0                	callq  *%rax$/;"	l
ffff80000010a904	kernel.asm	/^ffff80000010a904:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010a907	kernel.asm	/^ffff80000010a907:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010a90a	kernel.asm	/^ffff80000010a90a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a90c	kernel.asm	/^ffff80000010a90c:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010a911	kernel.asm	/^ffff80000010a911:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a918	kernel.asm	/^ffff80000010a918:	80 ff ff $/;"	l
ffff80000010a91b	kernel.asm	/^ffff80000010a91b:	ff d0                	callq  *%rax$/;"	l
ffff80000010a91d	kernel.asm	/^ffff80000010a91d:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010a920	kernel.asm	/^ffff80000010a920:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010a923	kernel.asm	/^ffff80000010a923:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a925	kernel.asm	/^ffff80000010a925:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010a92a	kernel.asm	/^ffff80000010a92a:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010a931	kernel.asm	/^ffff80000010a931:	80 ff ff $/;"	l
ffff80000010a934	kernel.asm	/^ffff80000010a934:	ff d0                	callq  *%rax$/;"	l
ffff80000010a936	kernel.asm	/^ffff80000010a936:	90                   	nop$/;"	l
ffff80000010a937	kernel.asm	/^ffff80000010a937:	c9                   	leaveq $/;"	l
ffff80000010a938	kernel.asm	/^ffff80000010a938:	c3                   	retq   $/;"	l
ffff80000010a939	kernel.asm	/^ffff80000010a939 <setdefaultVGApalette>:$/;"	l
ffff80000010a939	kernel.asm	/^ffff80000010a939:	55                   	push   %rbp$/;"	l
ffff80000010a93a	kernel.asm	/^ffff80000010a93a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a93d	kernel.asm	/^ffff80000010a93d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010a941	kernel.asm	/^ffff80000010a941:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010a948	kernel.asm	/^ffff80000010a948:	eb 4c                	jmp    ffff80000010a996 <setdefaultVGApalette+0x5d>$/;"	l
ffff80000010a94a	kernel.asm	/^ffff80000010a94a:	48 b8 60 ee 10 00 00 	movabs $0xffff80000010ee60,%rax$/;"	l
ffff80000010a951	kernel.asm	/^ffff80000010a951:	80 ff ff $/;"	l
ffff80000010a954	kernel.asm	/^ffff80000010a954:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010a957	kernel.asm	/^ffff80000010a957:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010a95a	kernel.asm	/^ffff80000010a95a:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff80000010a95d	kernel.asm	/^ffff80000010a95d:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010a960	kernel.asm	/^ffff80000010a960:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010a963	kernel.asm	/^ffff80000010a963:	c1 f8 02             	sar    $0x2,%eax$/;"	l
ffff80000010a966	kernel.asm	/^ffff80000010a966:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010a969	kernel.asm	/^ffff80000010a969:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010a96b	kernel.asm	/^ffff80000010a96b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010a96e	kernel.asm	/^ffff80000010a96e:	c1 f8 0a             	sar    $0xa,%eax$/;"	l
ffff80000010a971	kernel.asm	/^ffff80000010a971:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010a974	kernel.asm	/^ffff80000010a974:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010a976	kernel.asm	/^ffff80000010a976:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010a979	kernel.asm	/^ffff80000010a979:	c1 f8 12             	sar    $0x12,%eax$/;"	l
ffff80000010a97c	kernel.asm	/^ffff80000010a97c:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010a97f	kernel.asm	/^ffff80000010a97f:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a981	kernel.asm	/^ffff80000010a981:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010a984	kernel.asm	/^ffff80000010a984:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010a986	kernel.asm	/^ffff80000010a986:	48 b8 be a8 10 00 00 	movabs $0xffff80000010a8be,%rax$/;"	l
ffff80000010a98d	kernel.asm	/^ffff80000010a98d:	80 ff ff $/;"	l
ffff80000010a990	kernel.asm	/^ffff80000010a990:	ff d0                	callq  *%rax$/;"	l
ffff80000010a992	kernel.asm	/^ffff80000010a992:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010a996	kernel.asm	/^ffff80000010a996:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010a99d	kernel.asm	/^ffff80000010a99d:	7e ab                	jle    ffff80000010a94a <setdefaultVGApalette+0x11>$/;"	l
ffff80000010a99f	kernel.asm	/^ffff80000010a99f:	90                   	nop$/;"	l
ffff80000010a9a0	kernel.asm	/^ffff80000010a9a0:	c9                   	leaveq $/;"	l
ffff80000010a9a1	kernel.asm	/^ffff80000010a9a1:	c3                   	retq   $/;"	l
ffff80000010a9a2	kernel.asm	/^ffff80000010a9a2 <vgaMode13>:$/;"	l
ffff80000010a9a2	kernel.asm	/^ffff80000010a9a2:	55                   	push   %rbp$/;"	l
ffff80000010a9a3	kernel.asm	/^ffff80000010a9a3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a9a6	kernel.asm	/^ffff80000010a9a6:	bf 63 00 00 00       	mov    $0x63,%edi$/;"	l
ffff80000010a9ab	kernel.asm	/^ffff80000010a9ab:	48 b8 a7 a7 10 00 00 	movabs $0xffff80000010a7a7,%rax$/;"	l
ffff80000010a9b2	kernel.asm	/^ffff80000010a9b2:	80 ff ff $/;"	l
ffff80000010a9b5	kernel.asm	/^ffff80000010a9b5:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9b7	kernel.asm	/^ffff80000010a9b7:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010a9bc	kernel.asm	/^ffff80000010a9bc:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010a9c1	kernel.asm	/^ffff80000010a9c1:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010a9c8	kernel.asm	/^ffff80000010a9c8:	80 ff ff $/;"	l
ffff80000010a9cb	kernel.asm	/^ffff80000010a9cb:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9cd	kernel.asm	/^ffff80000010a9cd:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010a9d2	kernel.asm	/^ffff80000010a9d2:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010a9d7	kernel.asm	/^ffff80000010a9d7:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010a9de	kernel.asm	/^ffff80000010a9de:	80 ff ff $/;"	l
ffff80000010a9e1	kernel.asm	/^ffff80000010a9e1:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9e3	kernel.asm	/^ffff80000010a9e3:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010a9e8	kernel.asm	/^ffff80000010a9e8:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010a9ed	kernel.asm	/^ffff80000010a9ed:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010a9f4	kernel.asm	/^ffff80000010a9f4:	80 ff ff $/;"	l
ffff80000010a9f7	kernel.asm	/^ffff80000010a9f7:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9f9	kernel.asm	/^ffff80000010a9f9:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010a9fe	kernel.asm	/^ffff80000010a9fe:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010aa03	kernel.asm	/^ffff80000010aa03:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010aa0a	kernel.asm	/^ffff80000010aa0a:	80 ff ff $/;"	l
ffff80000010aa0d	kernel.asm	/^ffff80000010aa0d:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa0f	kernel.asm	/^ffff80000010aa0f:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010aa14	kernel.asm	/^ffff80000010aa14:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010aa19	kernel.asm	/^ffff80000010aa19:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010aa20	kernel.asm	/^ffff80000010aa20:	80 ff ff $/;"	l
ffff80000010aa23	kernel.asm	/^ffff80000010aa23:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa25	kernel.asm	/^ffff80000010aa25:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010aa2a	kernel.asm	/^ffff80000010aa2a:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010aa2f	kernel.asm	/^ffff80000010aa2f:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aa36	kernel.asm	/^ffff80000010aa36:	80 ff ff $/;"	l
ffff80000010aa39	kernel.asm	/^ffff80000010aa39:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa3b	kernel.asm	/^ffff80000010aa3b:	be 5f 00 00 00       	mov    $0x5f,%esi$/;"	l
ffff80000010aa40	kernel.asm	/^ffff80000010aa40:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010aa45	kernel.asm	/^ffff80000010aa45:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aa4c	kernel.asm	/^ffff80000010aa4c:	80 ff ff $/;"	l
ffff80000010aa4f	kernel.asm	/^ffff80000010aa4f:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa51	kernel.asm	/^ffff80000010aa51:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010aa56	kernel.asm	/^ffff80000010aa56:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010aa5b	kernel.asm	/^ffff80000010aa5b:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aa62	kernel.asm	/^ffff80000010aa62:	80 ff ff $/;"	l
ffff80000010aa65	kernel.asm	/^ffff80000010aa65:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa67	kernel.asm	/^ffff80000010aa67:	be 50 00 00 00       	mov    $0x50,%esi$/;"	l
ffff80000010aa6c	kernel.asm	/^ffff80000010aa6c:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010aa71	kernel.asm	/^ffff80000010aa71:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aa78	kernel.asm	/^ffff80000010aa78:	80 ff ff $/;"	l
ffff80000010aa7b	kernel.asm	/^ffff80000010aa7b:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa7d	kernel.asm	/^ffff80000010aa7d:	be 82 00 00 00       	mov    $0x82,%esi$/;"	l
ffff80000010aa82	kernel.asm	/^ffff80000010aa82:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010aa87	kernel.asm	/^ffff80000010aa87:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aa8e	kernel.asm	/^ffff80000010aa8e:	80 ff ff $/;"	l
ffff80000010aa91	kernel.asm	/^ffff80000010aa91:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa93	kernel.asm	/^ffff80000010aa93:	be 54 00 00 00       	mov    $0x54,%esi$/;"	l
ffff80000010aa98	kernel.asm	/^ffff80000010aa98:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010aa9d	kernel.asm	/^ffff80000010aa9d:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aaa4	kernel.asm	/^ffff80000010aaa4:	80 ff ff $/;"	l
ffff80000010aaa7	kernel.asm	/^ffff80000010aaa7:	ff d0                	callq  *%rax$/;"	l
ffff80000010aaa9	kernel.asm	/^ffff80000010aaa9:	be 80 00 00 00       	mov    $0x80,%esi$/;"	l
ffff80000010aaae	kernel.asm	/^ffff80000010aaae:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010aab3	kernel.asm	/^ffff80000010aab3:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aaba	kernel.asm	/^ffff80000010aaba:	80 ff ff $/;"	l
ffff80000010aabd	kernel.asm	/^ffff80000010aabd:	ff d0                	callq  *%rax$/;"	l
ffff80000010aabf	kernel.asm	/^ffff80000010aabf:	be bf 00 00 00       	mov    $0xbf,%esi$/;"	l
ffff80000010aac4	kernel.asm	/^ffff80000010aac4:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010aac9	kernel.asm	/^ffff80000010aac9:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aad0	kernel.asm	/^ffff80000010aad0:	80 ff ff $/;"	l
ffff80000010aad3	kernel.asm	/^ffff80000010aad3:	ff d0                	callq  *%rax$/;"	l
ffff80000010aad5	kernel.asm	/^ffff80000010aad5:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010aada	kernel.asm	/^ffff80000010aada:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010aadf	kernel.asm	/^ffff80000010aadf:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aae6	kernel.asm	/^ffff80000010aae6:	80 ff ff $/;"	l
ffff80000010aae9	kernel.asm	/^ffff80000010aae9:	ff d0                	callq  *%rax$/;"	l
ffff80000010aaeb	kernel.asm	/^ffff80000010aaeb:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010aaf0	kernel.asm	/^ffff80000010aaf0:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010aaf5	kernel.asm	/^ffff80000010aaf5:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aafc	kernel.asm	/^ffff80000010aafc:	80 ff ff $/;"	l
ffff80000010aaff	kernel.asm	/^ffff80000010aaff:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab01	kernel.asm	/^ffff80000010ab01:	be 41 00 00 00       	mov    $0x41,%esi$/;"	l
ffff80000010ab06	kernel.asm	/^ffff80000010ab06:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010ab0b	kernel.asm	/^ffff80000010ab0b:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab12	kernel.asm	/^ffff80000010ab12:	80 ff ff $/;"	l
ffff80000010ab15	kernel.asm	/^ffff80000010ab15:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab17	kernel.asm	/^ffff80000010ab17:	be 9c 00 00 00       	mov    $0x9c,%esi$/;"	l
ffff80000010ab1c	kernel.asm	/^ffff80000010ab1c:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010ab21	kernel.asm	/^ffff80000010ab21:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab28	kernel.asm	/^ffff80000010ab28:	80 ff ff $/;"	l
ffff80000010ab2b	kernel.asm	/^ffff80000010ab2b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab2d	kernel.asm	/^ffff80000010ab2d:	be 8f 00 00 00       	mov    $0x8f,%esi$/;"	l
ffff80000010ab32	kernel.asm	/^ffff80000010ab32:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010ab37	kernel.asm	/^ffff80000010ab37:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab3e	kernel.asm	/^ffff80000010ab3e:	80 ff ff $/;"	l
ffff80000010ab41	kernel.asm	/^ffff80000010ab41:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab43	kernel.asm	/^ffff80000010ab43:	be 28 00 00 00       	mov    $0x28,%esi$/;"	l
ffff80000010ab48	kernel.asm	/^ffff80000010ab48:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010ab4d	kernel.asm	/^ffff80000010ab4d:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab54	kernel.asm	/^ffff80000010ab54:	80 ff ff $/;"	l
ffff80000010ab57	kernel.asm	/^ffff80000010ab57:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab59	kernel.asm	/^ffff80000010ab59:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010ab5e	kernel.asm	/^ffff80000010ab5e:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010ab63	kernel.asm	/^ffff80000010ab63:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab6a	kernel.asm	/^ffff80000010ab6a:	80 ff ff $/;"	l
ffff80000010ab6d	kernel.asm	/^ffff80000010ab6d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab6f	kernel.asm	/^ffff80000010ab6f:	be 96 00 00 00       	mov    $0x96,%esi$/;"	l
ffff80000010ab74	kernel.asm	/^ffff80000010ab74:	bf 15 00 00 00       	mov    $0x15,%edi$/;"	l
ffff80000010ab79	kernel.asm	/^ffff80000010ab79:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab80	kernel.asm	/^ffff80000010ab80:	80 ff ff $/;"	l
ffff80000010ab83	kernel.asm	/^ffff80000010ab83:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab85	kernel.asm	/^ffff80000010ab85:	be b9 00 00 00       	mov    $0xb9,%esi$/;"	l
ffff80000010ab8a	kernel.asm	/^ffff80000010ab8a:	bf 16 00 00 00       	mov    $0x16,%edi$/;"	l
ffff80000010ab8f	kernel.asm	/^ffff80000010ab8f:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010ab96	kernel.asm	/^ffff80000010ab96:	80 ff ff $/;"	l
ffff80000010ab99	kernel.asm	/^ffff80000010ab99:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab9b	kernel.asm	/^ffff80000010ab9b:	be a3 00 00 00       	mov    $0xa3,%esi$/;"	l
ffff80000010aba0	kernel.asm	/^ffff80000010aba0:	bf 17 00 00 00       	mov    $0x17,%edi$/;"	l
ffff80000010aba5	kernel.asm	/^ffff80000010aba5:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010abac	kernel.asm	/^ffff80000010abac:	80 ff ff $/;"	l
ffff80000010abaf	kernel.asm	/^ffff80000010abaf:	ff d0                	callq  *%rax$/;"	l
ffff80000010abb1	kernel.asm	/^ffff80000010abb1:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010abb6	kernel.asm	/^ffff80000010abb6:	bf 18 00 00 00       	mov    $0x18,%edi$/;"	l
ffff80000010abbb	kernel.asm	/^ffff80000010abbb:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010abc2	kernel.asm	/^ffff80000010abc2:	80 ff ff $/;"	l
ffff80000010abc5	kernel.asm	/^ffff80000010abc5:	ff d0                	callq  *%rax$/;"	l
ffff80000010abc7	kernel.asm	/^ffff80000010abc7:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010abcc	kernel.asm	/^ffff80000010abcc:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010abd1	kernel.asm	/^ffff80000010abd1:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010abd8	kernel.asm	/^ffff80000010abd8:	80 ff ff $/;"	l
ffff80000010abdb	kernel.asm	/^ffff80000010abdb:	ff d0                	callq  *%rax$/;"	l
ffff80000010abdd	kernel.asm	/^ffff80000010abdd:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010abe2	kernel.asm	/^ffff80000010abe2:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010abe7	kernel.asm	/^ffff80000010abe7:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010abee	kernel.asm	/^ffff80000010abee:	80 ff ff $/;"	l
ffff80000010abf1	kernel.asm	/^ffff80000010abf1:	ff d0                	callq  *%rax$/;"	l
ffff80000010abf3	kernel.asm	/^ffff80000010abf3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010abf8	kernel.asm	/^ffff80000010abf8:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010abfd	kernel.asm	/^ffff80000010abfd:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac04	kernel.asm	/^ffff80000010ac04:	80 ff ff $/;"	l
ffff80000010ac07	kernel.asm	/^ffff80000010ac07:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac09	kernel.asm	/^ffff80000010ac09:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ac0e	kernel.asm	/^ffff80000010ac0e:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010ac13	kernel.asm	/^ffff80000010ac13:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac1a	kernel.asm	/^ffff80000010ac1a:	80 ff ff $/;"	l
ffff80000010ac1d	kernel.asm	/^ffff80000010ac1d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac1f	kernel.asm	/^ffff80000010ac1f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ac24	kernel.asm	/^ffff80000010ac24:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010ac29	kernel.asm	/^ffff80000010ac29:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac30	kernel.asm	/^ffff80000010ac30:	80 ff ff $/;"	l
ffff80000010ac33	kernel.asm	/^ffff80000010ac33:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac35	kernel.asm	/^ffff80000010ac35:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010ac3a	kernel.asm	/^ffff80000010ac3a:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010ac3f	kernel.asm	/^ffff80000010ac3f:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac46	kernel.asm	/^ffff80000010ac46:	80 ff ff $/;"	l
ffff80000010ac49	kernel.asm	/^ffff80000010ac49:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac4b	kernel.asm	/^ffff80000010ac4b:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010ac50	kernel.asm	/^ffff80000010ac50:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010ac55	kernel.asm	/^ffff80000010ac55:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac5c	kernel.asm	/^ffff80000010ac5c:	80 ff ff $/;"	l
ffff80000010ac5f	kernel.asm	/^ffff80000010ac5f:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac61	kernel.asm	/^ffff80000010ac61:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010ac66	kernel.asm	/^ffff80000010ac66:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010ac6b	kernel.asm	/^ffff80000010ac6b:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac72	kernel.asm	/^ffff80000010ac72:	80 ff ff $/;"	l
ffff80000010ac75	kernel.asm	/^ffff80000010ac75:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac77	kernel.asm	/^ffff80000010ac77:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010ac7c	kernel.asm	/^ffff80000010ac7c:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010ac81	kernel.asm	/^ffff80000010ac81:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010ac88	kernel.asm	/^ffff80000010ac88:	80 ff ff $/;"	l
ffff80000010ac8b	kernel.asm	/^ffff80000010ac8b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac8d	kernel.asm	/^ffff80000010ac8d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ac92	kernel.asm	/^ffff80000010ac92:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010ac97	kernel.asm	/^ffff80000010ac97:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ac9e	kernel.asm	/^ffff80000010ac9e:	80 ff ff $/;"	l
ffff80000010aca1	kernel.asm	/^ffff80000010aca1:	ff d0                	callq  *%rax$/;"	l
ffff80000010aca3	kernel.asm	/^ffff80000010aca3:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010aca8	kernel.asm	/^ffff80000010aca8:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010acad	kernel.asm	/^ffff80000010acad:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010acb4	kernel.asm	/^ffff80000010acb4:	80 ff ff $/;"	l
ffff80000010acb7	kernel.asm	/^ffff80000010acb7:	ff d0                	callq  *%rax$/;"	l
ffff80000010acb9	kernel.asm	/^ffff80000010acb9:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010acbe	kernel.asm	/^ffff80000010acbe:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010acc3	kernel.asm	/^ffff80000010acc3:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010acca	kernel.asm	/^ffff80000010acca:	80 ff ff $/;"	l
ffff80000010accd	kernel.asm	/^ffff80000010accd:	ff d0                	callq  *%rax$/;"	l
ffff80000010accf	kernel.asm	/^ffff80000010accf:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010acd4	kernel.asm	/^ffff80000010acd4:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010acd9	kernel.asm	/^ffff80000010acd9:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ace0	kernel.asm	/^ffff80000010ace0:	80 ff ff $/;"	l
ffff80000010ace3	kernel.asm	/^ffff80000010ace3:	ff d0                	callq  *%rax$/;"	l
ffff80000010ace5	kernel.asm	/^ffff80000010ace5:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010acea	kernel.asm	/^ffff80000010acea:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010acef	kernel.asm	/^ffff80000010acef:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010acf6	kernel.asm	/^ffff80000010acf6:	80 ff ff $/;"	l
ffff80000010acf9	kernel.asm	/^ffff80000010acf9:	ff d0                	callq  *%rax$/;"	l
ffff80000010acfb	kernel.asm	/^ffff80000010acfb:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010ad00	kernel.asm	/^ffff80000010ad00:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010ad05	kernel.asm	/^ffff80000010ad05:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad0c	kernel.asm	/^ffff80000010ad0c:	80 ff ff $/;"	l
ffff80000010ad0f	kernel.asm	/^ffff80000010ad0f:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad11	kernel.asm	/^ffff80000010ad11:	be 06 00 00 00       	mov    $0x6,%esi$/;"	l
ffff80000010ad16	kernel.asm	/^ffff80000010ad16:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010ad1b	kernel.asm	/^ffff80000010ad1b:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad22	kernel.asm	/^ffff80000010ad22:	80 ff ff $/;"	l
ffff80000010ad25	kernel.asm	/^ffff80000010ad25:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad27	kernel.asm	/^ffff80000010ad27:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010ad2c	kernel.asm	/^ffff80000010ad2c:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010ad31	kernel.asm	/^ffff80000010ad31:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad38	kernel.asm	/^ffff80000010ad38:	80 ff ff $/;"	l
ffff80000010ad3b	kernel.asm	/^ffff80000010ad3b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad3d	kernel.asm	/^ffff80000010ad3d:	be 08 00 00 00       	mov    $0x8,%esi$/;"	l
ffff80000010ad42	kernel.asm	/^ffff80000010ad42:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010ad47	kernel.asm	/^ffff80000010ad47:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad4e	kernel.asm	/^ffff80000010ad4e:	80 ff ff $/;"	l
ffff80000010ad51	kernel.asm	/^ffff80000010ad51:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad53	kernel.asm	/^ffff80000010ad53:	be 09 00 00 00       	mov    $0x9,%esi$/;"	l
ffff80000010ad58	kernel.asm	/^ffff80000010ad58:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010ad5d	kernel.asm	/^ffff80000010ad5d:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad64	kernel.asm	/^ffff80000010ad64:	80 ff ff $/;"	l
ffff80000010ad67	kernel.asm	/^ffff80000010ad67:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad69	kernel.asm	/^ffff80000010ad69:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff80000010ad6e	kernel.asm	/^ffff80000010ad6e:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010ad73	kernel.asm	/^ffff80000010ad73:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad7a	kernel.asm	/^ffff80000010ad7a:	80 ff ff $/;"	l
ffff80000010ad7d	kernel.asm	/^ffff80000010ad7d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad7f	kernel.asm	/^ffff80000010ad7f:	be 0b 00 00 00       	mov    $0xb,%esi$/;"	l
ffff80000010ad84	kernel.asm	/^ffff80000010ad84:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010ad89	kernel.asm	/^ffff80000010ad89:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ad90	kernel.asm	/^ffff80000010ad90:	80 ff ff $/;"	l
ffff80000010ad93	kernel.asm	/^ffff80000010ad93:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad95	kernel.asm	/^ffff80000010ad95:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff80000010ad9a	kernel.asm	/^ffff80000010ad9a:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010ad9f	kernel.asm	/^ffff80000010ad9f:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ada6	kernel.asm	/^ffff80000010ada6:	80 ff ff $/;"	l
ffff80000010ada9	kernel.asm	/^ffff80000010ada9:	ff d0                	callq  *%rax$/;"	l
ffff80000010adab	kernel.asm	/^ffff80000010adab:	be 0d 00 00 00       	mov    $0xd,%esi$/;"	l
ffff80000010adb0	kernel.asm	/^ffff80000010adb0:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010adb5	kernel.asm	/^ffff80000010adb5:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010adbc	kernel.asm	/^ffff80000010adbc:	80 ff ff $/;"	l
ffff80000010adbf	kernel.asm	/^ffff80000010adbf:	ff d0                	callq  *%rax$/;"	l
ffff80000010adc1	kernel.asm	/^ffff80000010adc1:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010adc6	kernel.asm	/^ffff80000010adc6:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010adcb	kernel.asm	/^ffff80000010adcb:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010add2	kernel.asm	/^ffff80000010add2:	80 ff ff $/;"	l
ffff80000010add5	kernel.asm	/^ffff80000010add5:	ff d0                	callq  *%rax$/;"	l
ffff80000010add7	kernel.asm	/^ffff80000010add7:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010addc	kernel.asm	/^ffff80000010addc:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010ade1	kernel.asm	/^ffff80000010ade1:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ade8	kernel.asm	/^ffff80000010ade8:	80 ff ff $/;"	l
ffff80000010adeb	kernel.asm	/^ffff80000010adeb:	ff d0                	callq  *%rax$/;"	l
ffff80000010aded	kernel.asm	/^ffff80000010aded:	be 41 00 00 00       	mov    $0x41,%esi$/;"	l
ffff80000010adf2	kernel.asm	/^ffff80000010adf2:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010adf7	kernel.asm	/^ffff80000010adf7:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010adfe	kernel.asm	/^ffff80000010adfe:	80 ff ff $/;"	l
ffff80000010ae01	kernel.asm	/^ffff80000010ae01:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae03	kernel.asm	/^ffff80000010ae03:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ae08	kernel.asm	/^ffff80000010ae08:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010ae0d	kernel.asm	/^ffff80000010ae0d:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ae14	kernel.asm	/^ffff80000010ae14:	80 ff ff $/;"	l
ffff80000010ae17	kernel.asm	/^ffff80000010ae17:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae19	kernel.asm	/^ffff80000010ae19:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010ae1e	kernel.asm	/^ffff80000010ae1e:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010ae23	kernel.asm	/^ffff80000010ae23:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ae2a	kernel.asm	/^ffff80000010ae2a:	80 ff ff $/;"	l
ffff80000010ae2d	kernel.asm	/^ffff80000010ae2d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae2f	kernel.asm	/^ffff80000010ae2f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ae34	kernel.asm	/^ffff80000010ae34:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010ae39	kernel.asm	/^ffff80000010ae39:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ae40	kernel.asm	/^ffff80000010ae40:	80 ff ff $/;"	l
ffff80000010ae43	kernel.asm	/^ffff80000010ae43:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae45	kernel.asm	/^ffff80000010ae45:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ae4a	kernel.asm	/^ffff80000010ae4a:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010ae4f	kernel.asm	/^ffff80000010ae4f:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010ae56	kernel.asm	/^ffff80000010ae56:	80 ff ff $/;"	l
ffff80000010ae59	kernel.asm	/^ffff80000010ae59:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae5b	kernel.asm	/^ffff80000010ae5b:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010ae60	kernel.asm	/^ffff80000010ae60:	48 b8 16 a7 10 00 00 	movabs $0xffff80000010a716,%rax$/;"	l
ffff80000010ae67	kernel.asm	/^ffff80000010ae67:	80 ff ff $/;"	l
ffff80000010ae6a	kernel.asm	/^ffff80000010ae6a:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae6c	kernel.asm	/^ffff80000010ae6c:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010ae71	kernel.asm	/^ffff80000010ae71:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010ae76	kernel.asm	/^ffff80000010ae76:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010ae7d	kernel.asm	/^ffff80000010ae7d:	80 ff ff $/;"	l
ffff80000010ae80	kernel.asm	/^ffff80000010ae80:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae82	kernel.asm	/^ffff80000010ae82:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010ae87	kernel.asm	/^ffff80000010ae87:	48 ba 39 a9 10 00 00 	movabs $0xffff80000010a939,%rdx$/;"	l
ffff80000010ae8e	kernel.asm	/^ffff80000010ae8e:	80 ff ff $/;"	l
ffff80000010ae91	kernel.asm	/^ffff80000010ae91:	ff d2                	callq  *%rdx$/;"	l
ffff80000010ae93	kernel.asm	/^ffff80000010ae93:	90                   	nop$/;"	l
ffff80000010ae94	kernel.asm	/^ffff80000010ae94:	5d                   	pop    %rbp$/;"	l
ffff80000010ae95	kernel.asm	/^ffff80000010ae95:	c3                   	retq   $/;"	l
ffff80000010ae96	kernel.asm	/^ffff80000010ae96 <vgaMode3>:$/;"	l
ffff80000010ae96	kernel.asm	/^ffff80000010ae96:	55                   	push   %rbp$/;"	l
ffff80000010ae97	kernel.asm	/^ffff80000010ae97:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ae9a	kernel.asm	/^ffff80000010ae9a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010ae9e	kernel.asm	/^ffff80000010ae9e:	bf 67 00 00 00       	mov    $0x67,%edi$/;"	l
ffff80000010aea3	kernel.asm	/^ffff80000010aea3:	48 b8 a7 a7 10 00 00 	movabs $0xffff80000010a7a7,%rax$/;"	l
ffff80000010aeaa	kernel.asm	/^ffff80000010aeaa:	80 ff ff $/;"	l
ffff80000010aead	kernel.asm	/^ffff80000010aead:	ff d0                	callq  *%rax$/;"	l
ffff80000010aeaf	kernel.asm	/^ffff80000010aeaf:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010aeb4	kernel.asm	/^ffff80000010aeb4:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010aeb9	kernel.asm	/^ffff80000010aeb9:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010aec0	kernel.asm	/^ffff80000010aec0:	80 ff ff $/;"	l
ffff80000010aec3	kernel.asm	/^ffff80000010aec3:	ff d0                	callq  *%rax$/;"	l
ffff80000010aec5	kernel.asm	/^ffff80000010aec5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010aeca	kernel.asm	/^ffff80000010aeca:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010aecf	kernel.asm	/^ffff80000010aecf:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010aed6	kernel.asm	/^ffff80000010aed6:	80 ff ff $/;"	l
ffff80000010aed9	kernel.asm	/^ffff80000010aed9:	ff d0                	callq  *%rax$/;"	l
ffff80000010aedb	kernel.asm	/^ffff80000010aedb:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010aee0	kernel.asm	/^ffff80000010aee0:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010aee5	kernel.asm	/^ffff80000010aee5:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010aeec	kernel.asm	/^ffff80000010aeec:	80 ff ff $/;"	l
ffff80000010aeef	kernel.asm	/^ffff80000010aeef:	ff d0                	callq  *%rax$/;"	l
ffff80000010aef1	kernel.asm	/^ffff80000010aef1:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010aef6	kernel.asm	/^ffff80000010aef6:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010aefb	kernel.asm	/^ffff80000010aefb:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010af02	kernel.asm	/^ffff80000010af02:	80 ff ff $/;"	l
ffff80000010af05	kernel.asm	/^ffff80000010af05:	ff d0                	callq  *%rax$/;"	l
ffff80000010af07	kernel.asm	/^ffff80000010af07:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010af0c	kernel.asm	/^ffff80000010af0c:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010af11	kernel.asm	/^ffff80000010af11:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010af18	kernel.asm	/^ffff80000010af18:	80 ff ff $/;"	l
ffff80000010af1b	kernel.asm	/^ffff80000010af1b:	ff d0                	callq  *%rax$/;"	l
ffff80000010af1d	kernel.asm	/^ffff80000010af1d:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010af22	kernel.asm	/^ffff80000010af22:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010af27	kernel.asm	/^ffff80000010af27:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af2e	kernel.asm	/^ffff80000010af2e:	80 ff ff $/;"	l
ffff80000010af31	kernel.asm	/^ffff80000010af31:	ff d0                	callq  *%rax$/;"	l
ffff80000010af33	kernel.asm	/^ffff80000010af33:	be 5f 00 00 00       	mov    $0x5f,%esi$/;"	l
ffff80000010af38	kernel.asm	/^ffff80000010af38:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010af3d	kernel.asm	/^ffff80000010af3d:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af44	kernel.asm	/^ffff80000010af44:	80 ff ff $/;"	l
ffff80000010af47	kernel.asm	/^ffff80000010af47:	ff d0                	callq  *%rax$/;"	l
ffff80000010af49	kernel.asm	/^ffff80000010af49:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010af4e	kernel.asm	/^ffff80000010af4e:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010af53	kernel.asm	/^ffff80000010af53:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af5a	kernel.asm	/^ffff80000010af5a:	80 ff ff $/;"	l
ffff80000010af5d	kernel.asm	/^ffff80000010af5d:	ff d0                	callq  *%rax$/;"	l
ffff80000010af5f	kernel.asm	/^ffff80000010af5f:	be 50 00 00 00       	mov    $0x50,%esi$/;"	l
ffff80000010af64	kernel.asm	/^ffff80000010af64:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010af69	kernel.asm	/^ffff80000010af69:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af70	kernel.asm	/^ffff80000010af70:	80 ff ff $/;"	l
ffff80000010af73	kernel.asm	/^ffff80000010af73:	ff d0                	callq  *%rax$/;"	l
ffff80000010af75	kernel.asm	/^ffff80000010af75:	be 82 00 00 00       	mov    $0x82,%esi$/;"	l
ffff80000010af7a	kernel.asm	/^ffff80000010af7a:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010af7f	kernel.asm	/^ffff80000010af7f:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af86	kernel.asm	/^ffff80000010af86:	80 ff ff $/;"	l
ffff80000010af89	kernel.asm	/^ffff80000010af89:	ff d0                	callq  *%rax$/;"	l
ffff80000010af8b	kernel.asm	/^ffff80000010af8b:	be 55 00 00 00       	mov    $0x55,%esi$/;"	l
ffff80000010af90	kernel.asm	/^ffff80000010af90:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010af95	kernel.asm	/^ffff80000010af95:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010af9c	kernel.asm	/^ffff80000010af9c:	80 ff ff $/;"	l
ffff80000010af9f	kernel.asm	/^ffff80000010af9f:	ff d0                	callq  *%rax$/;"	l
ffff80000010afa1	kernel.asm	/^ffff80000010afa1:	be 81 00 00 00       	mov    $0x81,%esi$/;"	l
ffff80000010afa6	kernel.asm	/^ffff80000010afa6:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010afab	kernel.asm	/^ffff80000010afab:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010afb2	kernel.asm	/^ffff80000010afb2:	80 ff ff $/;"	l
ffff80000010afb5	kernel.asm	/^ffff80000010afb5:	ff d0                	callq  *%rax$/;"	l
ffff80000010afb7	kernel.asm	/^ffff80000010afb7:	be bf 00 00 00       	mov    $0xbf,%esi$/;"	l
ffff80000010afbc	kernel.asm	/^ffff80000010afbc:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010afc1	kernel.asm	/^ffff80000010afc1:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010afc8	kernel.asm	/^ffff80000010afc8:	80 ff ff $/;"	l
ffff80000010afcb	kernel.asm	/^ffff80000010afcb:	ff d0                	callq  *%rax$/;"	l
ffff80000010afcd	kernel.asm	/^ffff80000010afcd:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010afd2	kernel.asm	/^ffff80000010afd2:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010afd7	kernel.asm	/^ffff80000010afd7:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010afde	kernel.asm	/^ffff80000010afde:	80 ff ff $/;"	l
ffff80000010afe1	kernel.asm	/^ffff80000010afe1:	ff d0                	callq  *%rax$/;"	l
ffff80000010afe3	kernel.asm	/^ffff80000010afe3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010afe8	kernel.asm	/^ffff80000010afe8:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010afed	kernel.asm	/^ffff80000010afed:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010aff4	kernel.asm	/^ffff80000010aff4:	80 ff ff $/;"	l
ffff80000010aff7	kernel.asm	/^ffff80000010aff7:	ff d0                	callq  *%rax$/;"	l
ffff80000010aff9	kernel.asm	/^ffff80000010aff9:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010affe	kernel.asm	/^ffff80000010affe:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010b003	kernel.asm	/^ffff80000010b003:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b00a	kernel.asm	/^ffff80000010b00a:	80 ff ff $/;"	l
ffff80000010b00d	kernel.asm	/^ffff80000010b00d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b00f	kernel.asm	/^ffff80000010b00f:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010b014	kernel.asm	/^ffff80000010b014:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010b019	kernel.asm	/^ffff80000010b019:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b020	kernel.asm	/^ffff80000010b020:	80 ff ff $/;"	l
ffff80000010b023	kernel.asm	/^ffff80000010b023:	ff d0                	callq  *%rax$/;"	l
ffff80000010b025	kernel.asm	/^ffff80000010b025:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b02a	kernel.asm	/^ffff80000010b02a:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010b02f	kernel.asm	/^ffff80000010b02f:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b036	kernel.asm	/^ffff80000010b036:	80 ff ff $/;"	l
ffff80000010b039	kernel.asm	/^ffff80000010b039:	ff d0                	callq  *%rax$/;"	l
ffff80000010b03b	kernel.asm	/^ffff80000010b03b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b040	kernel.asm	/^ffff80000010b040:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010b045	kernel.asm	/^ffff80000010b045:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b04c	kernel.asm	/^ffff80000010b04c:	80 ff ff $/;"	l
ffff80000010b04f	kernel.asm	/^ffff80000010b04f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b051	kernel.asm	/^ffff80000010b051:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b056	kernel.asm	/^ffff80000010b056:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010b05b	kernel.asm	/^ffff80000010b05b:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b062	kernel.asm	/^ffff80000010b062:	80 ff ff $/;"	l
ffff80000010b065	kernel.asm	/^ffff80000010b065:	ff d0                	callq  *%rax$/;"	l
ffff80000010b067	kernel.asm	/^ffff80000010b067:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b06c	kernel.asm	/^ffff80000010b06c:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010b071	kernel.asm	/^ffff80000010b071:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b078	kernel.asm	/^ffff80000010b078:	80 ff ff $/;"	l
ffff80000010b07b	kernel.asm	/^ffff80000010b07b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b07d	kernel.asm	/^ffff80000010b07d:	be e0 00 00 00       	mov    $0xe0,%esi$/;"	l
ffff80000010b082	kernel.asm	/^ffff80000010b082:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010b087	kernel.asm	/^ffff80000010b087:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b08e	kernel.asm	/^ffff80000010b08e:	80 ff ff $/;"	l
ffff80000010b091	kernel.asm	/^ffff80000010b091:	ff d0                	callq  *%rax$/;"	l
ffff80000010b093	kernel.asm	/^ffff80000010b093:	be 9c 00 00 00       	mov    $0x9c,%esi$/;"	l
ffff80000010b098	kernel.asm	/^ffff80000010b098:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010b09d	kernel.asm	/^ffff80000010b09d:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b0a4	kernel.asm	/^ffff80000010b0a4:	80 ff ff $/;"	l
ffff80000010b0a7	kernel.asm	/^ffff80000010b0a7:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0a9	kernel.asm	/^ffff80000010b0a9:	be 8e 00 00 00       	mov    $0x8e,%esi$/;"	l
ffff80000010b0ae	kernel.asm	/^ffff80000010b0ae:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010b0b3	kernel.asm	/^ffff80000010b0b3:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b0ba	kernel.asm	/^ffff80000010b0ba:	80 ff ff $/;"	l
ffff80000010b0bd	kernel.asm	/^ffff80000010b0bd:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0bf	kernel.asm	/^ffff80000010b0bf:	be 8f 00 00 00       	mov    $0x8f,%esi$/;"	l
ffff80000010b0c4	kernel.asm	/^ffff80000010b0c4:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010b0c9	kernel.asm	/^ffff80000010b0c9:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b0d0	kernel.asm	/^ffff80000010b0d0:	80 ff ff $/;"	l
ffff80000010b0d3	kernel.asm	/^ffff80000010b0d3:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0d5	kernel.asm	/^ffff80000010b0d5:	be 28 00 00 00       	mov    $0x28,%esi$/;"	l
ffff80000010b0da	kernel.asm	/^ffff80000010b0da:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010b0df	kernel.asm	/^ffff80000010b0df:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b0e6	kernel.asm	/^ffff80000010b0e6:	80 ff ff $/;"	l
ffff80000010b0e9	kernel.asm	/^ffff80000010b0e9:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0eb	kernel.asm	/^ffff80000010b0eb:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010b0f0	kernel.asm	/^ffff80000010b0f0:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010b0f5	kernel.asm	/^ffff80000010b0f5:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b0fc	kernel.asm	/^ffff80000010b0fc:	80 ff ff $/;"	l
ffff80000010b0ff	kernel.asm	/^ffff80000010b0ff:	ff d0                	callq  *%rax$/;"	l
ffff80000010b101	kernel.asm	/^ffff80000010b101:	be 96 00 00 00       	mov    $0x96,%esi$/;"	l
ffff80000010b106	kernel.asm	/^ffff80000010b106:	bf 15 00 00 00       	mov    $0x15,%edi$/;"	l
ffff80000010b10b	kernel.asm	/^ffff80000010b10b:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b112	kernel.asm	/^ffff80000010b112:	80 ff ff $/;"	l
ffff80000010b115	kernel.asm	/^ffff80000010b115:	ff d0                	callq  *%rax$/;"	l
ffff80000010b117	kernel.asm	/^ffff80000010b117:	be b9 00 00 00       	mov    $0xb9,%esi$/;"	l
ffff80000010b11c	kernel.asm	/^ffff80000010b11c:	bf 16 00 00 00       	mov    $0x16,%edi$/;"	l
ffff80000010b121	kernel.asm	/^ffff80000010b121:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b128	kernel.asm	/^ffff80000010b128:	80 ff ff $/;"	l
ffff80000010b12b	kernel.asm	/^ffff80000010b12b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b12d	kernel.asm	/^ffff80000010b12d:	be a3 00 00 00       	mov    $0xa3,%esi$/;"	l
ffff80000010b132	kernel.asm	/^ffff80000010b132:	bf 17 00 00 00       	mov    $0x17,%edi$/;"	l
ffff80000010b137	kernel.asm	/^ffff80000010b137:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b13e	kernel.asm	/^ffff80000010b13e:	80 ff ff $/;"	l
ffff80000010b141	kernel.asm	/^ffff80000010b141:	ff d0                	callq  *%rax$/;"	l
ffff80000010b143	kernel.asm	/^ffff80000010b143:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010b148	kernel.asm	/^ffff80000010b148:	bf 18 00 00 00       	mov    $0x18,%edi$/;"	l
ffff80000010b14d	kernel.asm	/^ffff80000010b14d:	48 b8 54 a8 10 00 00 	movabs $0xffff80000010a854,%rax$/;"	l
ffff80000010b154	kernel.asm	/^ffff80000010b154:	80 ff ff $/;"	l
ffff80000010b157	kernel.asm	/^ffff80000010b157:	ff d0                	callq  *%rax$/;"	l
ffff80000010b159	kernel.asm	/^ffff80000010b159:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b15e	kernel.asm	/^ffff80000010b15e:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b163	kernel.asm	/^ffff80000010b163:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b16a	kernel.asm	/^ffff80000010b16a:	80 ff ff $/;"	l
ffff80000010b16d	kernel.asm	/^ffff80000010b16d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b16f	kernel.asm	/^ffff80000010b16f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b174	kernel.asm	/^ffff80000010b174:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b179	kernel.asm	/^ffff80000010b179:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b180	kernel.asm	/^ffff80000010b180:	80 ff ff $/;"	l
ffff80000010b183	kernel.asm	/^ffff80000010b183:	ff d0                	callq  *%rax$/;"	l
ffff80000010b185	kernel.asm	/^ffff80000010b185:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b18a	kernel.asm	/^ffff80000010b18a:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b18f	kernel.asm	/^ffff80000010b18f:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b196	kernel.asm	/^ffff80000010b196:	80 ff ff $/;"	l
ffff80000010b199	kernel.asm	/^ffff80000010b199:	ff d0                	callq  *%rax$/;"	l
ffff80000010b19b	kernel.asm	/^ffff80000010b19b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b1a0	kernel.asm	/^ffff80000010b1a0:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b1a5	kernel.asm	/^ffff80000010b1a5:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b1ac	kernel.asm	/^ffff80000010b1ac:	80 ff ff $/;"	l
ffff80000010b1af	kernel.asm	/^ffff80000010b1af:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1b1	kernel.asm	/^ffff80000010b1b1:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b1b6	kernel.asm	/^ffff80000010b1b6:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b1bb	kernel.asm	/^ffff80000010b1bb:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b1c2	kernel.asm	/^ffff80000010b1c2:	80 ff ff $/;"	l
ffff80000010b1c5	kernel.asm	/^ffff80000010b1c5:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1c7	kernel.asm	/^ffff80000010b1c7:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff80000010b1cc	kernel.asm	/^ffff80000010b1cc:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b1d1	kernel.asm	/^ffff80000010b1d1:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b1d8	kernel.asm	/^ffff80000010b1d8:	80 ff ff $/;"	l
ffff80000010b1db	kernel.asm	/^ffff80000010b1db:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1dd	kernel.asm	/^ffff80000010b1dd:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b1e2	kernel.asm	/^ffff80000010b1e2:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b1e7	kernel.asm	/^ffff80000010b1e7:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b1ee	kernel.asm	/^ffff80000010b1ee:	80 ff ff $/;"	l
ffff80000010b1f1	kernel.asm	/^ffff80000010b1f1:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1f3	kernel.asm	/^ffff80000010b1f3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b1f8	kernel.asm	/^ffff80000010b1f8:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010b1fd	kernel.asm	/^ffff80000010b1fd:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b204	kernel.asm	/^ffff80000010b204:	80 ff ff $/;"	l
ffff80000010b207	kernel.asm	/^ffff80000010b207:	ff d0                	callq  *%rax$/;"	l
ffff80000010b209	kernel.asm	/^ffff80000010b209:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010b20e	kernel.asm	/^ffff80000010b20e:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010b213	kernel.asm	/^ffff80000010b213:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b21a	kernel.asm	/^ffff80000010b21a:	80 ff ff $/;"	l
ffff80000010b21d	kernel.asm	/^ffff80000010b21d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b21f	kernel.asm	/^ffff80000010b21f:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010b224	kernel.asm	/^ffff80000010b224:	48 b8 16 a7 10 00 00 	movabs $0xffff80000010a716,%rax$/;"	l
ffff80000010b22b	kernel.asm	/^ffff80000010b22b:	80 ff ff $/;"	l
ffff80000010b22e	kernel.asm	/^ffff80000010b22e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b230	kernel.asm	/^ffff80000010b230:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b235	kernel.asm	/^ffff80000010b235:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b23a	kernel.asm	/^ffff80000010b23a:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b241	kernel.asm	/^ffff80000010b241:	80 ff ff $/;"	l
ffff80000010b244	kernel.asm	/^ffff80000010b244:	ff d0                	callq  *%rax$/;"	l
ffff80000010b246	kernel.asm	/^ffff80000010b246:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b24b	kernel.asm	/^ffff80000010b24b:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b250	kernel.asm	/^ffff80000010b250:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b257	kernel.asm	/^ffff80000010b257:	80 ff ff $/;"	l
ffff80000010b25a	kernel.asm	/^ffff80000010b25a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b25c	kernel.asm	/^ffff80000010b25c:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b261	kernel.asm	/^ffff80000010b261:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b266	kernel.asm	/^ffff80000010b266:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b26d	kernel.asm	/^ffff80000010b26d:	80 ff ff $/;"	l
ffff80000010b270	kernel.asm	/^ffff80000010b270:	ff d0                	callq  *%rax$/;"	l
ffff80000010b272	kernel.asm	/^ffff80000010b272:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b277	kernel.asm	/^ffff80000010b277:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b27c	kernel.asm	/^ffff80000010b27c:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b283	kernel.asm	/^ffff80000010b283:	80 ff ff $/;"	l
ffff80000010b286	kernel.asm	/^ffff80000010b286:	ff d0                	callq  *%rax$/;"	l
ffff80000010b288	kernel.asm	/^ffff80000010b288:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010b28d	kernel.asm	/^ffff80000010b28d:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b292	kernel.asm	/^ffff80000010b292:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b299	kernel.asm	/^ffff80000010b299:	80 ff ff $/;"	l
ffff80000010b29c	kernel.asm	/^ffff80000010b29c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b29e	kernel.asm	/^ffff80000010b29e:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010b2a3	kernel.asm	/^ffff80000010b2a3:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b2a8	kernel.asm	/^ffff80000010b2a8:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b2af	kernel.asm	/^ffff80000010b2af:	80 ff ff $/;"	l
ffff80000010b2b2	kernel.asm	/^ffff80000010b2b2:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2b4	kernel.asm	/^ffff80000010b2b4:	be 14 00 00 00       	mov    $0x14,%esi$/;"	l
ffff80000010b2b9	kernel.asm	/^ffff80000010b2b9:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b2be	kernel.asm	/^ffff80000010b2be:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b2c5	kernel.asm	/^ffff80000010b2c5:	80 ff ff $/;"	l
ffff80000010b2c8	kernel.asm	/^ffff80000010b2c8:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2ca	kernel.asm	/^ffff80000010b2ca:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010b2cf	kernel.asm	/^ffff80000010b2cf:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010b2d4	kernel.asm	/^ffff80000010b2d4:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b2db	kernel.asm	/^ffff80000010b2db:	80 ff ff $/;"	l
ffff80000010b2de	kernel.asm	/^ffff80000010b2de:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2e0	kernel.asm	/^ffff80000010b2e0:	be 38 00 00 00       	mov    $0x38,%esi$/;"	l
ffff80000010b2e5	kernel.asm	/^ffff80000010b2e5:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010b2ea	kernel.asm	/^ffff80000010b2ea:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b2f1	kernel.asm	/^ffff80000010b2f1:	80 ff ff $/;"	l
ffff80000010b2f4	kernel.asm	/^ffff80000010b2f4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2f6	kernel.asm	/^ffff80000010b2f6:	be 39 00 00 00       	mov    $0x39,%esi$/;"	l
ffff80000010b2fb	kernel.asm	/^ffff80000010b2fb:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010b300	kernel.asm	/^ffff80000010b300:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b307	kernel.asm	/^ffff80000010b307:	80 ff ff $/;"	l
ffff80000010b30a	kernel.asm	/^ffff80000010b30a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b30c	kernel.asm	/^ffff80000010b30c:	be 3a 00 00 00       	mov    $0x3a,%esi$/;"	l
ffff80000010b311	kernel.asm	/^ffff80000010b311:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010b316	kernel.asm	/^ffff80000010b316:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b31d	kernel.asm	/^ffff80000010b31d:	80 ff ff $/;"	l
ffff80000010b320	kernel.asm	/^ffff80000010b320:	ff d0                	callq  *%rax$/;"	l
ffff80000010b322	kernel.asm	/^ffff80000010b322:	be 3b 00 00 00       	mov    $0x3b,%esi$/;"	l
ffff80000010b327	kernel.asm	/^ffff80000010b327:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010b32c	kernel.asm	/^ffff80000010b32c:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b333	kernel.asm	/^ffff80000010b333:	80 ff ff $/;"	l
ffff80000010b336	kernel.asm	/^ffff80000010b336:	ff d0                	callq  *%rax$/;"	l
ffff80000010b338	kernel.asm	/^ffff80000010b338:	be 3c 00 00 00       	mov    $0x3c,%esi$/;"	l
ffff80000010b33d	kernel.asm	/^ffff80000010b33d:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010b342	kernel.asm	/^ffff80000010b342:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b349	kernel.asm	/^ffff80000010b349:	80 ff ff $/;"	l
ffff80000010b34c	kernel.asm	/^ffff80000010b34c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b34e	kernel.asm	/^ffff80000010b34e:	be 3d 00 00 00       	mov    $0x3d,%esi$/;"	l
ffff80000010b353	kernel.asm	/^ffff80000010b353:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010b358	kernel.asm	/^ffff80000010b358:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b35f	kernel.asm	/^ffff80000010b35f:	80 ff ff $/;"	l
ffff80000010b362	kernel.asm	/^ffff80000010b362:	ff d0                	callq  *%rax$/;"	l
ffff80000010b364	kernel.asm	/^ffff80000010b364:	be 3e 00 00 00       	mov    $0x3e,%esi$/;"	l
ffff80000010b369	kernel.asm	/^ffff80000010b369:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010b36e	kernel.asm	/^ffff80000010b36e:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b375	kernel.asm	/^ffff80000010b375:	80 ff ff $/;"	l
ffff80000010b378	kernel.asm	/^ffff80000010b378:	ff d0                	callq  *%rax$/;"	l
ffff80000010b37a	kernel.asm	/^ffff80000010b37a:	be 3f 00 00 00       	mov    $0x3f,%esi$/;"	l
ffff80000010b37f	kernel.asm	/^ffff80000010b37f:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010b384	kernel.asm	/^ffff80000010b384:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b38b	kernel.asm	/^ffff80000010b38b:	80 ff ff $/;"	l
ffff80000010b38e	kernel.asm	/^ffff80000010b38e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b390	kernel.asm	/^ffff80000010b390:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff80000010b395	kernel.asm	/^ffff80000010b395:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010b39a	kernel.asm	/^ffff80000010b39a:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b3a1	kernel.asm	/^ffff80000010b3a1:	80 ff ff $/;"	l
ffff80000010b3a4	kernel.asm	/^ffff80000010b3a4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3a6	kernel.asm	/^ffff80000010b3a6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b3ab	kernel.asm	/^ffff80000010b3ab:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010b3b0	kernel.asm	/^ffff80000010b3b0:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b3b7	kernel.asm	/^ffff80000010b3b7:	80 ff ff $/;"	l
ffff80000010b3ba	kernel.asm	/^ffff80000010b3ba:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3bc	kernel.asm	/^ffff80000010b3bc:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010b3c1	kernel.asm	/^ffff80000010b3c1:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010b3c6	kernel.asm	/^ffff80000010b3c6:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b3cd	kernel.asm	/^ffff80000010b3cd:	80 ff ff $/;"	l
ffff80000010b3d0	kernel.asm	/^ffff80000010b3d0:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3d2	kernel.asm	/^ffff80000010b3d2:	be 08 00 00 00       	mov    $0x8,%esi$/;"	l
ffff80000010b3d7	kernel.asm	/^ffff80000010b3d7:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010b3dc	kernel.asm	/^ffff80000010b3dc:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b3e3	kernel.asm	/^ffff80000010b3e3:	80 ff ff $/;"	l
ffff80000010b3e6	kernel.asm	/^ffff80000010b3e6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3e8	kernel.asm	/^ffff80000010b3e8:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b3ed	kernel.asm	/^ffff80000010b3ed:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010b3f2	kernel.asm	/^ffff80000010b3f2:	48 b8 53 a7 10 00 00 	movabs $0xffff80000010a753,%rax$/;"	l
ffff80000010b3f9	kernel.asm	/^ffff80000010b3f9:	80 ff ff $/;"	l
ffff80000010b3fc	kernel.asm	/^ffff80000010b3fc:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3fe	kernel.asm	/^ffff80000010b3fe:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b403	kernel.asm	/^ffff80000010b403:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b408	kernel.asm	/^ffff80000010b408:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b40f	kernel.asm	/^ffff80000010b40f:	80 ff ff $/;"	l
ffff80000010b412	kernel.asm	/^ffff80000010b412:	ff d0                	callq  *%rax$/;"	l
ffff80000010b414	kernel.asm	/^ffff80000010b414:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010b419	kernel.asm	/^ffff80000010b419:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b41e	kernel.asm	/^ffff80000010b41e:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b425	kernel.asm	/^ffff80000010b425:	80 ff ff $/;"	l
ffff80000010b428	kernel.asm	/^ffff80000010b428:	ff d0                	callq  *%rax$/;"	l
ffff80000010b42a	kernel.asm	/^ffff80000010b42a:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010b42f	kernel.asm	/^ffff80000010b42f:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b434	kernel.asm	/^ffff80000010b434:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b43b	kernel.asm	/^ffff80000010b43b:	80 ff ff $/;"	l
ffff80000010b43e	kernel.asm	/^ffff80000010b43e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b440	kernel.asm	/^ffff80000010b440:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b445	kernel.asm	/^ffff80000010b445:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b44a	kernel.asm	/^ffff80000010b44a:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b451	kernel.asm	/^ffff80000010b451:	80 ff ff $/;"	l
ffff80000010b454	kernel.asm	/^ffff80000010b454:	ff d0                	callq  *%rax$/;"	l
ffff80000010b456	kernel.asm	/^ffff80000010b456:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b45b	kernel.asm	/^ffff80000010b45b:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b460	kernel.asm	/^ffff80000010b460:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b467	kernel.asm	/^ffff80000010b467:	80 ff ff $/;"	l
ffff80000010b46a	kernel.asm	/^ffff80000010b46a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b46c	kernel.asm	/^ffff80000010b46c:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b471	kernel.asm	/^ffff80000010b471:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b476	kernel.asm	/^ffff80000010b476:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b47d	kernel.asm	/^ffff80000010b47d:	80 ff ff $/;"	l
ffff80000010b480	kernel.asm	/^ffff80000010b480:	ff d0                	callq  *%rax$/;"	l
ffff80000010b482	kernel.asm	/^ffff80000010b482:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b487	kernel.asm	/^ffff80000010b487:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b48c	kernel.asm	/^ffff80000010b48c:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b493	kernel.asm	/^ffff80000010b493:	80 ff ff $/;"	l
ffff80000010b496	kernel.asm	/^ffff80000010b496:	ff d0                	callq  *%rax$/;"	l
ffff80000010b498	kernel.asm	/^ffff80000010b498:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010b49f	kernel.asm	/^ffff80000010b49f:	eb 4d                	jmp    ffff80000010b4ee <vgaMode3+0x658>$/;"	l
ffff80000010b4a1	kernel.asm	/^ffff80000010b4a1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010b4a8	kernel.asm	/^ffff80000010b4a8:	eb 3a                	jmp    ffff80000010b4e4 <vgaMode3+0x64e>$/;"	l
ffff80000010b4aa	kernel.asm	/^ffff80000010b4aa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b4ad	kernel.asm	/^ffff80000010b4ad:	8d 14 00             	lea    (%rax,%rax,1),%edx$/;"	l
ffff80000010b4b0	kernel.asm	/^ffff80000010b4b0:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b4b3	kernel.asm	/^ffff80000010b4b3:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010b4b5	kernel.asm	/^ffff80000010b4b5:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff80000010b4b8	kernel.asm	/^ffff80000010b4b8:	48 b8 00 00 0a 00 00 	movabs $0xffff8000000a0000,%rax$/;"	l
ffff80000010b4bf	kernel.asm	/^ffff80000010b4bf:	80 ff ff $/;"	l
ffff80000010b4c2	kernel.asm	/^ffff80000010b4c2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010b4c6	kernel.asm	/^ffff80000010b4c6:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010b4c9	kernel.asm	/^ffff80000010b4c9:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b4cc	kernel.asm	/^ffff80000010b4cc:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010b4ce	kernel.asm	/^ffff80000010b4ce:	48 ba 60 f2 10 00 00 	movabs $0xffff80000010f260,%rdx$/;"	l
ffff80000010b4d5	kernel.asm	/^ffff80000010b4d5:	80 ff ff $/;"	l
ffff80000010b4d8	kernel.asm	/^ffff80000010b4d8:	48 98                	cltq   $/;"	l
ffff80000010b4da	kernel.asm	/^ffff80000010b4da:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff80000010b4de	kernel.asm	/^ffff80000010b4de:	88 01                	mov    %al,(%rcx)$/;"	l
ffff80000010b4e0	kernel.asm	/^ffff80000010b4e0:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff80000010b4e4	kernel.asm	/^ffff80000010b4e4:	83 7d f8 0f          	cmpl   $0xf,-0x8(%rbp)$/;"	l
ffff80000010b4e8	kernel.asm	/^ffff80000010b4e8:	7e c0                	jle    ffff80000010b4aa <vgaMode3+0x614>$/;"	l
ffff80000010b4ea	kernel.asm	/^ffff80000010b4ea:	83 45 fc 10          	addl   $0x10,-0x4(%rbp)$/;"	l
ffff80000010b4ee	kernel.asm	/^ffff80000010b4ee:	81 7d fc ff 0f 00 00 	cmpl   $0xfff,-0x4(%rbp)$/;"	l
ffff80000010b4f5	kernel.asm	/^ffff80000010b4f5:	7e aa                	jle    ffff80000010b4a1 <vgaMode3+0x60b>$/;"	l
ffff80000010b4f7	kernel.asm	/^ffff80000010b4f7:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b4fc	kernel.asm	/^ffff80000010b4fc:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b501	kernel.asm	/^ffff80000010b501:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b508	kernel.asm	/^ffff80000010b508:	80 ff ff $/;"	l
ffff80000010b50b	kernel.asm	/^ffff80000010b50b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b50d	kernel.asm	/^ffff80000010b50d:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b512	kernel.asm	/^ffff80000010b512:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b517	kernel.asm	/^ffff80000010b517:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b51e	kernel.asm	/^ffff80000010b51e:	80 ff ff $/;"	l
ffff80000010b521	kernel.asm	/^ffff80000010b521:	ff d0                	callq  *%rax$/;"	l
ffff80000010b523	kernel.asm	/^ffff80000010b523:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b528	kernel.asm	/^ffff80000010b528:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b52d	kernel.asm	/^ffff80000010b52d:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b534	kernel.asm	/^ffff80000010b534:	80 ff ff $/;"	l
ffff80000010b537	kernel.asm	/^ffff80000010b537:	ff d0                	callq  *%rax$/;"	l
ffff80000010b539	kernel.asm	/^ffff80000010b539:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b53e	kernel.asm	/^ffff80000010b53e:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b543	kernel.asm	/^ffff80000010b543:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b54a	kernel.asm	/^ffff80000010b54a:	80 ff ff $/;"	l
ffff80000010b54d	kernel.asm	/^ffff80000010b54d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b54f	kernel.asm	/^ffff80000010b54f:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b554	kernel.asm	/^ffff80000010b554:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b559	kernel.asm	/^ffff80000010b559:	48 b8 ce a7 10 00 00 	movabs $0xffff80000010a7ce,%rax$/;"	l
ffff80000010b560	kernel.asm	/^ffff80000010b560:	80 ff ff $/;"	l
ffff80000010b563	kernel.asm	/^ffff80000010b563:	ff d0                	callq  *%rax$/;"	l
ffff80000010b565	kernel.asm	/^ffff80000010b565:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b56a	kernel.asm	/^ffff80000010b56a:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b56f	kernel.asm	/^ffff80000010b56f:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b576	kernel.asm	/^ffff80000010b576:	80 ff ff $/;"	l
ffff80000010b579	kernel.asm	/^ffff80000010b579:	ff d0                	callq  *%rax$/;"	l
ffff80000010b57b	kernel.asm	/^ffff80000010b57b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b580	kernel.asm	/^ffff80000010b580:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b585	kernel.asm	/^ffff80000010b585:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b58c	kernel.asm	/^ffff80000010b58c:	80 ff ff $/;"	l
ffff80000010b58f	kernel.asm	/^ffff80000010b58f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b591	kernel.asm	/^ffff80000010b591:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b596	kernel.asm	/^ffff80000010b596:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b59b	kernel.asm	/^ffff80000010b59b:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b5a2	kernel.asm	/^ffff80000010b5a2:	80 ff ff $/;"	l
ffff80000010b5a5	kernel.asm	/^ffff80000010b5a5:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5a7	kernel.asm	/^ffff80000010b5a7:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff80000010b5ac	kernel.asm	/^ffff80000010b5ac:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b5b1	kernel.asm	/^ffff80000010b5b1:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b5b8	kernel.asm	/^ffff80000010b5b8:	80 ff ff $/;"	l
ffff80000010b5bb	kernel.asm	/^ffff80000010b5bb:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5bd	kernel.asm	/^ffff80000010b5bd:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b5c2	kernel.asm	/^ffff80000010b5c2:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b5c7	kernel.asm	/^ffff80000010b5c7:	48 b8 11 a8 10 00 00 	movabs $0xffff80000010a811,%rax$/;"	l
ffff80000010b5ce	kernel.asm	/^ffff80000010b5ce:	80 ff ff $/;"	l
ffff80000010b5d1	kernel.asm	/^ffff80000010b5d1:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5d3	kernel.asm	/^ffff80000010b5d3:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010b5d8	kernel.asm	/^ffff80000010b5d8:	48 b8 16 a7 10 00 00 	movabs $0xffff80000010a716,%rax$/;"	l
ffff80000010b5df	kernel.asm	/^ffff80000010b5df:	80 ff ff $/;"	l
ffff80000010b5e2	kernel.asm	/^ffff80000010b5e2:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5e4	kernel.asm	/^ffff80000010b5e4:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010b5e9	kernel.asm	/^ffff80000010b5e9:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010b5ee	kernel.asm	/^ffff80000010b5ee:	48 b8 34 a7 10 00 00 	movabs $0xffff80000010a734,%rax$/;"	l
ffff80000010b5f5	kernel.asm	/^ffff80000010b5f5:	80 ff ff $/;"	l
ffff80000010b5f8	kernel.asm	/^ffff80000010b5f8:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5fa	kernel.asm	/^ffff80000010b5fa:	90                   	nop$/;"	l
ffff80000010b5fb	kernel.asm	/^ffff80000010b5fb:	c9                   	leaveq $/;"	l
ffff80000010b5fc	kernel.asm	/^ffff80000010b5fc:	c3                   	retq   $/;"	l
ffff80000010b5fd	kernel.asm	/^ffff80000010b5fd <lgdt>:$/;"	l
ffff80000010b5fd	kernel.asm	/^ffff80000010b5fd:	55                   	push   %rbp$/;"	l
ffff80000010b5fe	kernel.asm	/^ffff80000010b5fe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b601	kernel.asm	/^ffff80000010b601:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010b605	kernel.asm	/^ffff80000010b605:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010b609	kernel.asm	/^ffff80000010b609:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010b60c	kernel.asm	/^ffff80000010b60c:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010b60f	kernel.asm	/^ffff80000010b60f:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010b612	kernel.asm	/^ffff80000010b612:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff80000010b616	kernel.asm	/^ffff80000010b616:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b61a	kernel.asm	/^ffff80000010b61a:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff80000010b61e	kernel.asm	/^ffff80000010b61e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b622	kernel.asm	/^ffff80000010b622:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff80000010b626	kernel.asm	/^ffff80000010b626:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010b62a	kernel.asm	/^ffff80000010b62a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b62e	kernel.asm	/^ffff80000010b62e:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff80000010b632	kernel.asm	/^ffff80000010b632:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff80000010b636	kernel.asm	/^ffff80000010b636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b63a	kernel.asm	/^ffff80000010b63a:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff80000010b63e	kernel.asm	/^ffff80000010b63e:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff80000010b642	kernel.asm	/^ffff80000010b642:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff80000010b646	kernel.asm	/^ffff80000010b646:	0f 01 10             	lgdt   (%rax)$/;"	l
ffff80000010b649	kernel.asm	/^ffff80000010b649:	90                   	nop$/;"	l
ffff80000010b64a	kernel.asm	/^ffff80000010b64a:	c9                   	leaveq $/;"	l
ffff80000010b64b	kernel.asm	/^ffff80000010b64b:	c3                   	retq   $/;"	l
ffff80000010b64c	kernel.asm	/^ffff80000010b64c <ltr>:$/;"	l
ffff80000010b64c	kernel.asm	/^ffff80000010b64c:	55                   	push   %rbp$/;"	l
ffff80000010b64d	kernel.asm	/^ffff80000010b64d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b650	kernel.asm	/^ffff80000010b650:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b654	kernel.asm	/^ffff80000010b654:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010b656	kernel.asm	/^ffff80000010b656:	66 89 45 fc          	mov    %ax,-0x4(%rbp)$/;"	l
ffff80000010b65a	kernel.asm	/^ffff80000010b65a:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax$/;"	l
ffff80000010b65e	kernel.asm	/^ffff80000010b65e:	0f 00 d8             	ltr    %ax$/;"	l
ffff80000010b661	kernel.asm	/^ffff80000010b661:	90                   	nop$/;"	l
ffff80000010b662	kernel.asm	/^ffff80000010b662:	c9                   	leaveq $/;"	l
ffff80000010b663	kernel.asm	/^ffff80000010b663:	c3                   	retq   $/;"	l
ffff80000010b664	kernel.asm	/^ffff80000010b664 <lcr3>:$/;"	l
ffff80000010b664	kernel.asm	/^ffff80000010b664:	55                   	push   %rbp$/;"	l
ffff80000010b665	kernel.asm	/^ffff80000010b665:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b668	kernel.asm	/^ffff80000010b668:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b66c	kernel.asm	/^ffff80000010b66c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b670	kernel.asm	/^ffff80000010b670:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b674	kernel.asm	/^ffff80000010b674:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff80000010b677	kernel.asm	/^ffff80000010b677:	90                   	nop$/;"	l
ffff80000010b678	kernel.asm	/^ffff80000010b678:	c9                   	leaveq $/;"	l
ffff80000010b679	kernel.asm	/^ffff80000010b679:	c3                   	retq   $/;"	l
ffff80000010b67a	kernel.asm	/^ffff80000010b67a <v2p>:$/;"	l
ffff80000010b67a	kernel.asm	/^ffff80000010b67a:	55                   	push   %rbp$/;"	l
ffff80000010b67b	kernel.asm	/^ffff80000010b67b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b67e	kernel.asm	/^ffff80000010b67e:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b682	kernel.asm	/^ffff80000010b682:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b686	kernel.asm	/^ffff80000010b686:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010b68a	kernel.asm	/^ffff80000010b68a:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b691	kernel.asm	/^ffff80000010b691:	80 00 00 $/;"	l
ffff80000010b694	kernel.asm	/^ffff80000010b694:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b697	kernel.asm	/^ffff80000010b697:	c9                   	leaveq $/;"	l
ffff80000010b698	kernel.asm	/^ffff80000010b698:	c3                   	retq   $/;"	l
ffff80000010b699	kernel.asm	/^ffff80000010b699 <tss_set_rsp>:$/;"	l
ffff80000010b699	kernel.asm	/^ffff80000010b699:	55                   	push   %rbp$/;"	l
ffff80000010b69a	kernel.asm	/^ffff80000010b69a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b69d	kernel.asm	/^ffff80000010b69d:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010b6a1	kernel.asm	/^ffff80000010b6a1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b6a5	kernel.asm	/^ffff80000010b6a5:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010b6a8	kernel.asm	/^ffff80000010b6a8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff80000010b6ac	kernel.asm	/^ffff80000010b6ac:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b6af	kernel.asm	/^ffff80000010b6af:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010b6b1	kernel.asm	/^ffff80000010b6b1:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010b6b4	kernel.asm	/^ffff80000010b6b4:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010b6b6	kernel.asm	/^ffff80000010b6b6:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010b6bd	kernel.asm	/^ffff80000010b6bd:	00 $/;"	l
ffff80000010b6be	kernel.asm	/^ffff80000010b6be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b6c2	kernel.asm	/^ffff80000010b6c2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b6c5	kernel.asm	/^ffff80000010b6c5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010b6c9	kernel.asm	/^ffff80000010b6c9:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010b6cb	kernel.asm	/^ffff80000010b6cb:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b6ce	kernel.asm	/^ffff80000010b6ce:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010b6d1	kernel.asm	/^ffff80000010b6d1:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010b6d3	kernel.asm	/^ffff80000010b6d3:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010b6d5	kernel.asm	/^ffff80000010b6d5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010b6dc	kernel.asm	/^ffff80000010b6dc:	00 $/;"	l
ffff80000010b6dd	kernel.asm	/^ffff80000010b6dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b6e1	kernel.asm	/^ffff80000010b6e1:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b6e4	kernel.asm	/^ffff80000010b6e4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010b6e8	kernel.asm	/^ffff80000010b6e8:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010b6ec	kernel.asm	/^ffff80000010b6ec:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010b6ee	kernel.asm	/^ffff80000010b6ee:	90                   	nop$/;"	l
ffff80000010b6ef	kernel.asm	/^ffff80000010b6ef:	c9                   	leaveq $/;"	l
ffff80000010b6f0	kernel.asm	/^ffff80000010b6f0:	c3                   	retq   $/;"	l
ffff80000010b6f1	kernel.asm	/^ffff80000010b6f1 <syscallinit>:$/;"	l
ffff80000010b6f1	kernel.asm	/^ffff80000010b6f1:	55                   	push   %rbp$/;"	l
ffff80000010b6f2	kernel.asm	/^ffff80000010b6f2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b6f5	kernel.asm	/^ffff80000010b6f5:	48 be 00 00 00 00 08 	movabs $0x23000800000000,%rsi$/;"	l
ffff80000010b6fc	kernel.asm	/^ffff80000010b6fc:	00 23 00 $/;"	l
ffff80000010b6ff	kernel.asm	/^ffff80000010b6ff:	bf 81 00 00 c0       	mov    $0xc0000081,%edi$/;"	l
ffff80000010b704	kernel.asm	/^ffff80000010b704:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b70b	kernel.asm	/^ffff80000010b70b:	80 ff ff $/;"	l
ffff80000010b70e	kernel.asm	/^ffff80000010b70e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b710	kernel.asm	/^ffff80000010b710:	48 b8 1a 01 10 00 00 	movabs $0xffff80000010011a,%rax$/;"	l
ffff80000010b717	kernel.asm	/^ffff80000010b717:	80 ff ff $/;"	l
ffff80000010b71a	kernel.asm	/^ffff80000010b71a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b71d	kernel.asm	/^ffff80000010b71d:	bf 82 00 00 c0       	mov    $0xc0000082,%edi$/;"	l
ffff80000010b722	kernel.asm	/^ffff80000010b722:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b729	kernel.asm	/^ffff80000010b729:	80 ff ff $/;"	l
ffff80000010b72c	kernel.asm	/^ffff80000010b72c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b72e	kernel.asm	/^ffff80000010b72e:	48 b8 11 01 10 00 00 	movabs $0xffff800000100111,%rax$/;"	l
ffff80000010b735	kernel.asm	/^ffff80000010b735:	80 ff ff $/;"	l
ffff80000010b738	kernel.asm	/^ffff80000010b738:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b73b	kernel.asm	/^ffff80000010b73b:	bf 83 00 00 c0       	mov    $0xc0000083,%edi$/;"	l
ffff80000010b740	kernel.asm	/^ffff80000010b740:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b747	kernel.asm	/^ffff80000010b747:	80 ff ff $/;"	l
ffff80000010b74a	kernel.asm	/^ffff80000010b74a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b74c	kernel.asm	/^ffff80000010b74c:	be 00 77 04 00       	mov    $0x47700,%esi$/;"	l
ffff80000010b751	kernel.asm	/^ffff80000010b751:	bf 84 00 00 c0       	mov    $0xc0000084,%edi$/;"	l
ffff80000010b756	kernel.asm	/^ffff80000010b756:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b75d	kernel.asm	/^ffff80000010b75d:	80 ff ff $/;"	l
ffff80000010b760	kernel.asm	/^ffff80000010b760:	ff d0                	callq  *%rax$/;"	l
ffff80000010b762	kernel.asm	/^ffff80000010b762:	90                   	nop$/;"	l
ffff80000010b763	kernel.asm	/^ffff80000010b763:	5d                   	pop    %rbp$/;"	l
ffff80000010b764	kernel.asm	/^ffff80000010b764:	c3                   	retq   $/;"	l
ffff80000010b765	kernel.asm	/^ffff80000010b765 <seginit>:$/;"	l
ffff80000010b765	kernel.asm	/^ffff80000010b765:	55                   	push   %rbp$/;"	l
ffff80000010b766	kernel.asm	/^ffff80000010b766:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b769	kernel.asm	/^ffff80000010b769:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010b76d	kernel.asm	/^ffff80000010b76d:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010b774	kernel.asm	/^ffff80000010b774:	80 ff ff $/;"	l
ffff80000010b777	kernel.asm	/^ffff80000010b777:	ff d0                	callq  *%rax$/;"	l
ffff80000010b779	kernel.asm	/^ffff80000010b779:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b77d	kernel.asm	/^ffff80000010b77d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b781	kernel.asm	/^ffff80000010b781:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b786	kernel.asm	/^ffff80000010b786:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b78b	kernel.asm	/^ffff80000010b78b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b78e	kernel.asm	/^ffff80000010b78e:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010b795	kernel.asm	/^ffff80000010b795:	80 ff ff $/;"	l
ffff80000010b798	kernel.asm	/^ffff80000010b798:	ff d0                	callq  *%rax$/;"	l
ffff80000010b79a	kernel.asm	/^ffff80000010b79a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b79e	kernel.asm	/^ffff80000010b79e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b7a2	kernel.asm	/^ffff80000010b7a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b7a6	kernel.asm	/^ffff80000010b7a6:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010b7ac	kernel.asm	/^ffff80000010b7ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b7b0	kernel.asm	/^ffff80000010b7b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b7b4	kernel.asm	/^ffff80000010b7b4:	48 83 c0 40          	add    $0x40,%rax$/;"	l
ffff80000010b7b8	kernel.asm	/^ffff80000010b7b8:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)$/;"	l
ffff80000010b7be	kernel.asm	/^ffff80000010b7be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b7c2	kernel.asm	/^ffff80000010b7c2:	48 05 00 08 00 00    	add    $0x800,%rax$/;"	l
ffff80000010b7c8	kernel.asm	/^ffff80000010b7c8:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b7cb	kernel.asm	/^ffff80000010b7cb:	bf 00 01 00 c0       	mov    $0xc0000100,%edi$/;"	l
ffff80000010b7d0	kernel.asm	/^ffff80000010b7d0:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b7d7	kernel.asm	/^ffff80000010b7d7:	80 ff ff $/;"	l
ffff80000010b7da	kernel.asm	/^ffff80000010b7da:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7dc	kernel.asm	/^ffff80000010b7dc:	48 b8 2e 46 10 00 00 	movabs $0xffff80000010462e,%rax$/;"	l
ffff80000010b7e3	kernel.asm	/^ffff80000010b7e3:	80 ff ff $/;"	l
ffff80000010b7e6	kernel.asm	/^ffff80000010b7e6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7e8	kernel.asm	/^ffff80000010b7e8:	48 98                	cltq   $/;"	l
ffff80000010b7ea	kernel.asm	/^ffff80000010b7ea:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b7ed	kernel.asm	/^ffff80000010b7ed:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010b7f0	kernel.asm	/^ffff80000010b7f0:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010b7f4	kernel.asm	/^ffff80000010b7f4:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b7f7	kernel.asm	/^ffff80000010b7f7:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010b7fa	kernel.asm	/^ffff80000010b7fa:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010b7fe	kernel.asm	/^ffff80000010b7fe:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff80000010b801	kernel.asm	/^ffff80000010b801:	48 ba e0 a2 11 00 00 	movabs $0xffff80000011a2e0,%rdx$/;"	l
ffff80000010b808	kernel.asm	/^ffff80000010b808:	80 ff ff $/;"	l
ffff80000010b80b	kernel.asm	/^ffff80000010b80b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b80e	kernel.asm	/^ffff80000010b80e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010b812	kernel.asm	/^ffff80000010b812:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b816	kernel.asm	/^ffff80000010b816:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010b81a	kernel.asm	/^ffff80000010b81a:	48 89 90 e8 00 00 00 	mov    %rdx,0xe8(%rax)$/;"	l
ffff80000010b821	kernel.asm	/^ffff80000010b821:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b825	kernel.asm	/^ffff80000010b825:	64 48 89 04 25 f0 ff 	mov    %rax,%fs:0xfffffffffffffff0$/;"	l
ffff80000010b82c	kernel.asm	/^ffff80000010b82c:	ff ff $/;"	l
ffff80000010b82e	kernel.asm	/^ffff80000010b82e:	64 48 c7 04 25 f8 ff 	movq   $0x0,%fs:0xfffffffffffffff8$/;"	l
ffff80000010b835	kernel.asm	/^ffff80000010b835:	ff ff 00 00 00 00 $/;"	l
ffff80000010b83b	kernel.asm	/^ffff80000010b83b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b83f	kernel.asm	/^ffff80000010b83f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010b843	kernel.asm	/^ffff80000010b843:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b847	kernel.asm	/^ffff80000010b847:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010b84e	kernel.asm	/^ffff80000010b84e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b852	kernel.asm	/^ffff80000010b852:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010b856	kernel.asm	/^ffff80000010b856:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010b85b	kernel.asm	/^ffff80000010b85b:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010b861	kernel.asm	/^ffff80000010b861:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010b865	kernel.asm	/^ffff80000010b865:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b869	kernel.asm	/^ffff80000010b869:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b86c	kernel.asm	/^ffff80000010b86c:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010b86f	kernel.asm	/^ffff80000010b86f:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b872	kernel.asm	/^ffff80000010b872:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b876	kernel.asm	/^ffff80000010b876:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010b879	kernel.asm	/^ffff80000010b879:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b87c	kernel.asm	/^ffff80000010b87c:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b880	kernel.asm	/^ffff80000010b880:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010b883	kernel.asm	/^ffff80000010b883:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b886	kernel.asm	/^ffff80000010b886:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b88a	kernel.asm	/^ffff80000010b88a:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b88d	kernel.asm	/^ffff80000010b88d:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b890	kernel.asm	/^ffff80000010b890:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b894	kernel.asm	/^ffff80000010b894:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b897	kernel.asm	/^ffff80000010b897:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b89a	kernel.asm	/^ffff80000010b89a:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b89e	kernel.asm	/^ffff80000010b89e:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010b8a1	kernel.asm	/^ffff80000010b8a1:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b8a4	kernel.asm	/^ffff80000010b8a4:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b8a8	kernel.asm	/^ffff80000010b8a8:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010b8ab	kernel.asm	/^ffff80000010b8ab:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b8ae	kernel.asm	/^ffff80000010b8ae:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b8b2	kernel.asm	/^ffff80000010b8b2:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010b8b5	kernel.asm	/^ffff80000010b8b5:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b8b8	kernel.asm	/^ffff80000010b8b8:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b8bc	kernel.asm	/^ffff80000010b8bc:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b8bf	kernel.asm	/^ffff80000010b8bf:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b8c2	kernel.asm	/^ffff80000010b8c2:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010b8c6	kernel.asm	/^ffff80000010b8c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b8ca	kernel.asm	/^ffff80000010b8ca:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010b8ce	kernel.asm	/^ffff80000010b8ce:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010b8d3	kernel.asm	/^ffff80000010b8d3:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010b8d9	kernel.asm	/^ffff80000010b8d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010b8dd	kernel.asm	/^ffff80000010b8dd:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b8e1	kernel.asm	/^ffff80000010b8e1:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b8e4	kernel.asm	/^ffff80000010b8e4:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010b8e7	kernel.asm	/^ffff80000010b8e7:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b8ea	kernel.asm	/^ffff80000010b8ea:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b8ee	kernel.asm	/^ffff80000010b8ee:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010b8f1	kernel.asm	/^ffff80000010b8f1:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b8f4	kernel.asm	/^ffff80000010b8f4:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b8f8	kernel.asm	/^ffff80000010b8f8:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010b8fb	kernel.asm	/^ffff80000010b8fb:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b8fe	kernel.asm	/^ffff80000010b8fe:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b902	kernel.asm	/^ffff80000010b902:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b905	kernel.asm	/^ffff80000010b905:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b908	kernel.asm	/^ffff80000010b908:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b90c	kernel.asm	/^ffff80000010b90c:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b90f	kernel.asm	/^ffff80000010b90f:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b912	kernel.asm	/^ffff80000010b912:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b916	kernel.asm	/^ffff80000010b916:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010b919	kernel.asm	/^ffff80000010b919:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b91c	kernel.asm	/^ffff80000010b91c:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b920	kernel.asm	/^ffff80000010b920:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010b923	kernel.asm	/^ffff80000010b923:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b926	kernel.asm	/^ffff80000010b926:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b92a	kernel.asm	/^ffff80000010b92a:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010b92d	kernel.asm	/^ffff80000010b92d:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b930	kernel.asm	/^ffff80000010b930:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b934	kernel.asm	/^ffff80000010b934:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b937	kernel.asm	/^ffff80000010b937:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b93a	kernel.asm	/^ffff80000010b93a:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010b93e	kernel.asm	/^ffff80000010b93e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b942	kernel.asm	/^ffff80000010b942:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010b946	kernel.asm	/^ffff80000010b946:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010b94b	kernel.asm	/^ffff80000010b94b:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010b951	kernel.asm	/^ffff80000010b951:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010b955	kernel.asm	/^ffff80000010b955:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b959	kernel.asm	/^ffff80000010b959:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b95c	kernel.asm	/^ffff80000010b95c:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010b95f	kernel.asm	/^ffff80000010b95f:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b962	kernel.asm	/^ffff80000010b962:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b966	kernel.asm	/^ffff80000010b966:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010b969	kernel.asm	/^ffff80000010b969:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b96c	kernel.asm	/^ffff80000010b96c:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b970	kernel.asm	/^ffff80000010b970:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010b973	kernel.asm	/^ffff80000010b973:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b976	kernel.asm	/^ffff80000010b976:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b97a	kernel.asm	/^ffff80000010b97a:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b97d	kernel.asm	/^ffff80000010b97d:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b980	kernel.asm	/^ffff80000010b980:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b984	kernel.asm	/^ffff80000010b984:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b987	kernel.asm	/^ffff80000010b987:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b98a	kernel.asm	/^ffff80000010b98a:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b98e	kernel.asm	/^ffff80000010b98e:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010b991	kernel.asm	/^ffff80000010b991:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b994	kernel.asm	/^ffff80000010b994:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b998	kernel.asm	/^ffff80000010b998:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010b99b	kernel.asm	/^ffff80000010b99b:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b99e	kernel.asm	/^ffff80000010b99e:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b9a2	kernel.asm	/^ffff80000010b9a2:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010b9a5	kernel.asm	/^ffff80000010b9a5:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b9a8	kernel.asm	/^ffff80000010b9a8:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010b9ac	kernel.asm	/^ffff80000010b9ac:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010b9af	kernel.asm	/^ffff80000010b9af:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010b9b2	kernel.asm	/^ffff80000010b9b2:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010b9b6	kernel.asm	/^ffff80000010b9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b9ba	kernel.asm	/^ffff80000010b9ba:	48 83 c0 18          	add    $0x18,%rax$/;"	l
ffff80000010b9be	kernel.asm	/^ffff80000010b9be:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010b9c5	kernel.asm	/^ffff80000010b9c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010b9c9	kernel.asm	/^ffff80000010b9c9:	48 83 c0 28          	add    $0x28,%rax$/;"	l
ffff80000010b9cd	kernel.asm	/^ffff80000010b9cd:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010b9d2	kernel.asm	/^ffff80000010b9d2:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010b9d8	kernel.asm	/^ffff80000010b9d8:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010b9dc	kernel.asm	/^ffff80000010b9dc:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b9e0	kernel.asm	/^ffff80000010b9e0:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010b9e3	kernel.asm	/^ffff80000010b9e3:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010b9e6	kernel.asm	/^ffff80000010b9e6:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b9e9	kernel.asm	/^ffff80000010b9e9:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b9ed	kernel.asm	/^ffff80000010b9ed:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010b9f0	kernel.asm	/^ffff80000010b9f0:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b9f3	kernel.asm	/^ffff80000010b9f3:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010b9f7	kernel.asm	/^ffff80000010b9f7:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010b9fa	kernel.asm	/^ffff80000010b9fa:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010b9fd	kernel.asm	/^ffff80000010b9fd:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba01	kernel.asm	/^ffff80000010ba01:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ba04	kernel.asm	/^ffff80000010ba04:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba07	kernel.asm	/^ffff80000010ba07:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba0b	kernel.asm	/^ffff80000010ba0b:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ba0e	kernel.asm	/^ffff80000010ba0e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba11	kernel.asm	/^ffff80000010ba11:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba15	kernel.asm	/^ffff80000010ba15:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ba18	kernel.asm	/^ffff80000010ba18:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba1b	kernel.asm	/^ffff80000010ba1b:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba1f	kernel.asm	/^ffff80000010ba1f:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010ba22	kernel.asm	/^ffff80000010ba22:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba25	kernel.asm	/^ffff80000010ba25:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba29	kernel.asm	/^ffff80000010ba29:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010ba2c	kernel.asm	/^ffff80000010ba2c:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba2f	kernel.asm	/^ffff80000010ba2f:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba33	kernel.asm	/^ffff80000010ba33:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ba36	kernel.asm	/^ffff80000010ba36:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba39	kernel.asm	/^ffff80000010ba39:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010ba3d	kernel.asm	/^ffff80000010ba3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba41	kernel.asm	/^ffff80000010ba41:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff80000010ba45	kernel.asm	/^ffff80000010ba45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ba49	kernel.asm	/^ffff80000010ba49:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010ba4b	kernel.asm	/^ffff80000010ba4b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ba4f	kernel.asm	/^ffff80000010ba4f:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010ba53	kernel.asm	/^ffff80000010ba53:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010ba55	kernel.asm	/^ffff80000010ba55:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010ba59	kernel.asm	/^ffff80000010ba59:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010ba5d	kernel.asm	/^ffff80000010ba5d:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010ba5f	kernel.asm	/^ffff80000010ba5f:	66 c7 00 0b 00       	movw   $0xb,(%rax)$/;"	l
ffff80000010ba64	kernel.asm	/^ffff80000010ba64:	66 89 78 02          	mov    %di,0x2(%rax)$/;"	l
ffff80000010ba68	kernel.asm	/^ffff80000010ba68:	40 88 70 04          	mov    %sil,0x4(%rax)$/;"	l
ffff80000010ba6c	kernel.asm	/^ffff80000010ba6c:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba70	kernel.asm	/^ffff80000010ba70:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ba73	kernel.asm	/^ffff80000010ba73:	83 ca 09             	or     $0x9,%edx$/;"	l
ffff80000010ba76	kernel.asm	/^ffff80000010ba76:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba79	kernel.asm	/^ffff80000010ba79:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba7d	kernel.asm	/^ffff80000010ba7d:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ba80	kernel.asm	/^ffff80000010ba80:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba83	kernel.asm	/^ffff80000010ba83:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba87	kernel.asm	/^ffff80000010ba87:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010ba8a	kernel.asm	/^ffff80000010ba8a:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba8d	kernel.asm	/^ffff80000010ba8d:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba91	kernel.asm	/^ffff80000010ba91:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ba94	kernel.asm	/^ffff80000010ba94:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba97	kernel.asm	/^ffff80000010ba97:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba9b	kernel.asm	/^ffff80000010ba9b:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ba9e	kernel.asm	/^ffff80000010ba9e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010baa1	kernel.asm	/^ffff80000010baa1:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010baa5	kernel.asm	/^ffff80000010baa5:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010baa8	kernel.asm	/^ffff80000010baa8:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010baab	kernel.asm	/^ffff80000010baab:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010baaf	kernel.asm	/^ffff80000010baaf:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bab2	kernel.asm	/^ffff80000010bab2:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bab5	kernel.asm	/^ffff80000010bab5:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bab9	kernel.asm	/^ffff80000010bab9:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010babc	kernel.asm	/^ffff80000010babc:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010babf	kernel.asm	/^ffff80000010babf:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bac3	kernel.asm	/^ffff80000010bac3:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bac6	kernel.asm	/^ffff80000010bac6:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bac9	kernel.asm	/^ffff80000010bac9:	88 48 07             	mov    %cl,0x7(%rax)$/;"	l
ffff80000010bacc	kernel.asm	/^ffff80000010bacc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bad0	kernel.asm	/^ffff80000010bad0:	48 83 c0 38          	add    $0x38,%rax$/;"	l
ffff80000010bad4	kernel.asm	/^ffff80000010bad4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bad8	kernel.asm	/^ffff80000010bad8:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010badc	kernel.asm	/^ffff80000010badc:	41 89 d1             	mov    %edx,%r9d$/;"	l
ffff80000010badf	kernel.asm	/^ffff80000010badf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bae3	kernel.asm	/^ffff80000010bae3:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010bae7	kernel.asm	/^ffff80000010bae7:	41 89 d0             	mov    %edx,%r8d$/;"	l
ffff80000010baea	kernel.asm	/^ffff80000010baea:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010baee	kernel.asm	/^ffff80000010baee:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010baf2	kernel.asm	/^ffff80000010baf2:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010baf6	kernel.asm	/^ffff80000010baf6:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010baf8	kernel.asm	/^ffff80000010baf8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bafc	kernel.asm	/^ffff80000010bafc:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010bb00	kernel.asm	/^ffff80000010bb00:	48 c1 ea 3c          	shr    $0x3c,%rdx$/;"	l
ffff80000010bb04	kernel.asm	/^ffff80000010bb04:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010bb06	kernel.asm	/^ffff80000010bb06:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010bb09	kernel.asm	/^ffff80000010bb09:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bb0d	kernel.asm	/^ffff80000010bb0d:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010bb11	kernel.asm	/^ffff80000010bb11:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010bb15	kernel.asm	/^ffff80000010bb15:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010bb17	kernel.asm	/^ffff80000010bb17:	66 44 89 08          	mov    %r9w,(%rax)$/;"	l
ffff80000010bb1b	kernel.asm	/^ffff80000010bb1b:	66 44 89 40 02       	mov    %r8w,0x2(%rax)$/;"	l
ffff80000010bb20	kernel.asm	/^ffff80000010bb20:	40 88 78 04          	mov    %dil,0x4(%rax)$/;"	l
ffff80000010bb24	kernel.asm	/^ffff80000010bb24:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb28	kernel.asm	/^ffff80000010bb28:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bb2b	kernel.asm	/^ffff80000010bb2b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb2e	kernel.asm	/^ffff80000010bb2e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb32	kernel.asm	/^ffff80000010bb32:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bb35	kernel.asm	/^ffff80000010bb35:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb38	kernel.asm	/^ffff80000010bb38:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb3c	kernel.asm	/^ffff80000010bb3c:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010bb3f	kernel.asm	/^ffff80000010bb3f:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb42	kernel.asm	/^ffff80000010bb42:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb46	kernel.asm	/^ffff80000010bb46:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bb49	kernel.asm	/^ffff80000010bb49:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb4c	kernel.asm	/^ffff80000010bb4c:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010bb4f	kernel.asm	/^ffff80000010bb4f:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb53	kernel.asm	/^ffff80000010bb53:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bb56	kernel.asm	/^ffff80000010bb56:	09 ca                	or     %ecx,%edx$/;"	l
ffff80000010bb58	kernel.asm	/^ffff80000010bb58:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb5b	kernel.asm	/^ffff80000010bb5b:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb5f	kernel.asm	/^ffff80000010bb5f:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bb62	kernel.asm	/^ffff80000010bb62:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb65	kernel.asm	/^ffff80000010bb65:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb69	kernel.asm	/^ffff80000010bb69:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bb6c	kernel.asm	/^ffff80000010bb6c:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb6f	kernel.asm	/^ffff80000010bb6f:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb73	kernel.asm	/^ffff80000010bb73:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010bb76	kernel.asm	/^ffff80000010bb76:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb79	kernel.asm	/^ffff80000010bb79:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb7d	kernel.asm	/^ffff80000010bb7d:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bb80	kernel.asm	/^ffff80000010bb80:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb83	kernel.asm	/^ffff80000010bb83:	40 88 70 07          	mov    %sil,0x7(%rax)$/;"	l
ffff80000010bb87	kernel.asm	/^ffff80000010bb87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb8b	kernel.asm	/^ffff80000010bb8b:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010bb90	kernel.asm	/^ffff80000010bb90:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bb93	kernel.asm	/^ffff80000010bb93:	48 b8 fd b5 10 00 00 	movabs $0xffff80000010b5fd,%rax$/;"	l
ffff80000010bb9a	kernel.asm	/^ffff80000010bb9a:	80 ff ff $/;"	l
ffff80000010bb9d	kernel.asm	/^ffff80000010bb9d:	ff d0                	callq  *%rax$/;"	l
ffff80000010bb9f	kernel.asm	/^ffff80000010bb9f:	bf 30 00 00 00       	mov    $0x30,%edi$/;"	l
ffff80000010bba4	kernel.asm	/^ffff80000010bba4:	48 b8 4c b6 10 00 00 	movabs $0xffff80000010b64c,%rax$/;"	l
ffff80000010bbab	kernel.asm	/^ffff80000010bbab:	80 ff ff $/;"	l
ffff80000010bbae	kernel.asm	/^ffff80000010bbae:	ff d0                	callq  *%rax$/;"	l
ffff80000010bbb0	kernel.asm	/^ffff80000010bbb0:	90                   	nop$/;"	l
ffff80000010bbb1	kernel.asm	/^ffff80000010bbb1:	c9                   	leaveq $/;"	l
ffff80000010bbb2	kernel.asm	/^ffff80000010bbb2:	c3                   	retq   $/;"	l
ffff80000010bbb3	kernel.asm	/^ffff80000010bbb3 <setupkvm>:$/;"	l
ffff80000010bbb3	kernel.asm	/^ffff80000010bbb3:	55                   	push   %rbp$/;"	l
ffff80000010bbb4	kernel.asm	/^ffff80000010bbb4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bbb7	kernel.asm	/^ffff80000010bbb7:	53                   	push   %rbx$/;"	l
ffff80000010bbb8	kernel.asm	/^ffff80000010bbb8:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010bbbc	kernel.asm	/^ffff80000010bbbc:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010bbc3	kernel.asm	/^ffff80000010bbc3:	80 ff ff $/;"	l
ffff80000010bbc6	kernel.asm	/^ffff80000010bbc6:	ff d0                	callq  *%rax$/;"	l
ffff80000010bbc8	kernel.asm	/^ffff80000010bbc8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010bbcc	kernel.asm	/^ffff80000010bbcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bbd0	kernel.asm	/^ffff80000010bbd0:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bbd5	kernel.asm	/^ffff80000010bbd5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bbda	kernel.asm	/^ffff80000010bbda:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bbdd	kernel.asm	/^ffff80000010bbdd:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010bbe4	kernel.asm	/^ffff80000010bbe4:	80 ff ff $/;"	l
ffff80000010bbe7	kernel.asm	/^ffff80000010bbe7:	ff d0                	callq  *%rax$/;"	l
ffff80000010bbe9	kernel.asm	/^ffff80000010bbe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bbed	kernel.asm	/^ffff80000010bbed:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010bbf4	kernel.asm	/^ffff80000010bbf4:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bbfb	kernel.asm	/^ffff80000010bbfb:	80 ff ff $/;"	l
ffff80000010bbfe	kernel.asm	/^ffff80000010bbfe:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bc01	kernel.asm	/^ffff80000010bc01:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bc04	kernel.asm	/^ffff80000010bc04:	48 b8 7a b6 10 00 00 	movabs $0xffff80000010b67a,%rax$/;"	l
ffff80000010bc0b	kernel.asm	/^ffff80000010bc0b:	80 ff ff $/;"	l
ffff80000010bc0e	kernel.asm	/^ffff80000010bc0e:	ff d0                	callq  *%rax$/;"	l
ffff80000010bc10	kernel.asm	/^ffff80000010bc10:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010bc14	kernel.asm	/^ffff80000010bc14:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010bc17	kernel.asm	/^ffff80000010bc17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bc1b	kernel.asm	/^ffff80000010bc1b:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff80000010bc1f	kernel.asm	/^ffff80000010bc1f:	5b                   	pop    %rbx$/;"	l
ffff80000010bc20	kernel.asm	/^ffff80000010bc20:	5d                   	pop    %rbp$/;"	l
ffff80000010bc21	kernel.asm	/^ffff80000010bc21:	c3                   	retq   $/;"	l
ffff80000010bc22	kernel.asm	/^ffff80000010bc22 <kvmalloc>:$/;"	l
ffff80000010bc22	kernel.asm	/^ffff80000010bc22:	55                   	push   %rbp$/;"	l
ffff80000010bc23	kernel.asm	/^ffff80000010bc23:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bc26	kernel.asm	/^ffff80000010bc26:	53                   	push   %rbx$/;"	l
ffff80000010bc27	kernel.asm	/^ffff80000010bc27:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010bc2b	kernel.asm	/^ffff80000010bc2b:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010bc32	kernel.asm	/^ffff80000010bc32:	80 ff ff $/;"	l
ffff80000010bc35	kernel.asm	/^ffff80000010bc35:	ff d0                	callq  *%rax$/;"	l
ffff80000010bc37	kernel.asm	/^ffff80000010bc37:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bc3a	kernel.asm	/^ffff80000010bc3a:	48 b8 98 e3 11 00 00 	movabs $0xffff80000011e398,%rax$/;"	l
ffff80000010bc41	kernel.asm	/^ffff80000010bc41:	80 ff ff $/;"	l
ffff80000010bc44	kernel.asm	/^ffff80000010bc44:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010bc47	kernel.asm	/^ffff80000010bc47:	48 b8 98 e3 11 00 00 	movabs $0xffff80000011e398,%rax$/;"	l
ffff80000010bc4e	kernel.asm	/^ffff80000010bc4e:	80 ff ff $/;"	l
ffff80000010bc51	kernel.asm	/^ffff80000010bc51:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bc54	kernel.asm	/^ffff80000010bc54:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bc59	kernel.asm	/^ffff80000010bc59:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bc5e	kernel.asm	/^ffff80000010bc5e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bc61	kernel.asm	/^ffff80000010bc61:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010bc68	kernel.asm	/^ffff80000010bc68:	80 ff ff $/;"	l
ffff80000010bc6b	kernel.asm	/^ffff80000010bc6b:	ff d0                	callq  *%rax$/;"	l
ffff80000010bc6d	kernel.asm	/^ffff80000010bc6d:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010bc74	kernel.asm	/^ffff80000010bc74:	80 ff ff $/;"	l
ffff80000010bc77	kernel.asm	/^ffff80000010bc77:	ff d0                	callq  *%rax$/;"	l
ffff80000010bc79	kernel.asm	/^ffff80000010bc79:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bc7c	kernel.asm	/^ffff80000010bc7c:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bc83	kernel.asm	/^ffff80000010bc83:	80 ff ff $/;"	l
ffff80000010bc86	kernel.asm	/^ffff80000010bc86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010bc89	kernel.asm	/^ffff80000010bc89:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bc90	kernel.asm	/^ffff80000010bc90:	80 ff ff $/;"	l
ffff80000010bc93	kernel.asm	/^ffff80000010bc93:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bc96	kernel.asm	/^ffff80000010bc96:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bc9b	kernel.asm	/^ffff80000010bc9b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bca0	kernel.asm	/^ffff80000010bca0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bca3	kernel.asm	/^ffff80000010bca3:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010bcaa	kernel.asm	/^ffff80000010bcaa:	80 ff ff $/;"	l
ffff80000010bcad	kernel.asm	/^ffff80000010bcad:	ff d0                	callq  *%rax$/;"	l
ffff80000010bcaf	kernel.asm	/^ffff80000010bcaf:	48 b8 98 e3 11 00 00 	movabs $0xffff80000011e398,%rax$/;"	l
ffff80000010bcb6	kernel.asm	/^ffff80000010bcb6:	80 ff ff $/;"	l
ffff80000010bcb9	kernel.asm	/^ffff80000010bcb9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bcbc	kernel.asm	/^ffff80000010bcbc:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010bcc3	kernel.asm	/^ffff80000010bcc3:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bcca	kernel.asm	/^ffff80000010bcca:	80 ff ff $/;"	l
ffff80000010bccd	kernel.asm	/^ffff80000010bccd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bcd0	kernel.asm	/^ffff80000010bcd0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bcd3	kernel.asm	/^ffff80000010bcd3:	48 b8 7a b6 10 00 00 	movabs $0xffff80000010b67a,%rax$/;"	l
ffff80000010bcda	kernel.asm	/^ffff80000010bcda:	80 ff ff $/;"	l
ffff80000010bcdd	kernel.asm	/^ffff80000010bcdd:	ff d0                	callq  *%rax$/;"	l
ffff80000010bcdf	kernel.asm	/^ffff80000010bcdf:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010bce3	kernel.asm	/^ffff80000010bce3:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010bce6	kernel.asm	/^ffff80000010bce6:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bced	kernel.asm	/^ffff80000010bced:	80 ff ff $/;"	l
ffff80000010bcf0	kernel.asm	/^ffff80000010bcf0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bcf3	kernel.asm	/^ffff80000010bcf3:	48 c7 00 83 00 00 00 	movq   $0x83,(%rax)$/;"	l
ffff80000010bcfa	kernel.asm	/^ffff80000010bcfa:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010bd01	kernel.asm	/^ffff80000010bd01:	80 ff ff $/;"	l
ffff80000010bd04	kernel.asm	/^ffff80000010bd04:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bd07	kernel.asm	/^ffff80000010bd07:	48 83 c0 18          	add    $0x18,%rax$/;"	l
ffff80000010bd0b	kernel.asm	/^ffff80000010bd0b:	b9 9b 00 00 c0       	mov    $0xc000009b,%ecx$/;"	l
ffff80000010bd10	kernel.asm	/^ffff80000010bd10:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff80000010bd13	kernel.asm	/^ffff80000010bd13:	48 b8 27 bd 10 00 00 	movabs $0xffff80000010bd27,%rax$/;"	l
ffff80000010bd1a	kernel.asm	/^ffff80000010bd1a:	80 ff ff $/;"	l
ffff80000010bd1d	kernel.asm	/^ffff80000010bd1d:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd1f	kernel.asm	/^ffff80000010bd1f:	90                   	nop$/;"	l
ffff80000010bd20	kernel.asm	/^ffff80000010bd20:	48 83 c4 08          	add    $0x8,%rsp$/;"	l
ffff80000010bd24	kernel.asm	/^ffff80000010bd24:	5b                   	pop    %rbx$/;"	l
ffff80000010bd25	kernel.asm	/^ffff80000010bd25:	5d                   	pop    %rbp$/;"	l
ffff80000010bd26	kernel.asm	/^ffff80000010bd26:	c3                   	retq   $/;"	l
ffff80000010bd27	kernel.asm	/^ffff80000010bd27 <switchkvm>:$/;"	l
ffff80000010bd27	kernel.asm	/^ffff80000010bd27:	55                   	push   %rbp$/;"	l
ffff80000010bd28	kernel.asm	/^ffff80000010bd28:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bd2b	kernel.asm	/^ffff80000010bd2b:	48 b8 98 e3 11 00 00 	movabs $0xffff80000011e398,%rax$/;"	l
ffff80000010bd32	kernel.asm	/^ffff80000010bd32:	80 ff ff $/;"	l
ffff80000010bd35	kernel.asm	/^ffff80000010bd35:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bd38	kernel.asm	/^ffff80000010bd38:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bd3b	kernel.asm	/^ffff80000010bd3b:	48 b8 7a b6 10 00 00 	movabs $0xffff80000010b67a,%rax$/;"	l
ffff80000010bd42	kernel.asm	/^ffff80000010bd42:	80 ff ff $/;"	l
ffff80000010bd45	kernel.asm	/^ffff80000010bd45:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd47	kernel.asm	/^ffff80000010bd47:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bd4a	kernel.asm	/^ffff80000010bd4a:	48 b8 64 b6 10 00 00 	movabs $0xffff80000010b664,%rax$/;"	l
ffff80000010bd51	kernel.asm	/^ffff80000010bd51:	80 ff ff $/;"	l
ffff80000010bd54	kernel.asm	/^ffff80000010bd54:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd56	kernel.asm	/^ffff80000010bd56:	90                   	nop$/;"	l
ffff80000010bd57	kernel.asm	/^ffff80000010bd57:	5d                   	pop    %rbp$/;"	l
ffff80000010bd58	kernel.asm	/^ffff80000010bd58:	c3                   	retq   $/;"	l
ffff80000010bd59	kernel.asm	/^ffff80000010bd59 <switchuvm>:$/;"	l
ffff80000010bd59	kernel.asm	/^ffff80000010bd59:	55                   	push   %rbp$/;"	l
ffff80000010bd5a	kernel.asm	/^ffff80000010bd5a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bd5d	kernel.asm	/^ffff80000010bd5d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010bd61	kernel.asm	/^ffff80000010bd61:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010bd65	kernel.asm	/^ffff80000010bd65:	48 b8 0d 75 10 00 00 	movabs $0xffff80000010750d,%rax$/;"	l
ffff80000010bd6c	kernel.asm	/^ffff80000010bd6c:	80 ff ff $/;"	l
ffff80000010bd6f	kernel.asm	/^ffff80000010bd6f:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd71	kernel.asm	/^ffff80000010bd71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bd75	kernel.asm	/^ffff80000010bd75:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010bd79	kernel.asm	/^ffff80000010bd79:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010bd7c	kernel.asm	/^ffff80000010bd7c:	75 16                	jne    ffff80000010bd94 <switchuvm+0x3b>$/;"	l
ffff80000010bd7e	kernel.asm	/^ffff80000010bd7e:	48 bf b8 d1 10 00 00 	movabs $0xffff80000010d1b8,%rdi$/;"	l
ffff80000010bd85	kernel.asm	/^ffff80000010bd85:	80 ff ff $/;"	l
ffff80000010bd88	kernel.asm	/^ffff80000010bd88:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010bd8f	kernel.asm	/^ffff80000010bd8f:	80 ff ff $/;"	l
ffff80000010bd92	kernel.asm	/^ffff80000010bd92:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd94	kernel.asm	/^ffff80000010bd94:	64 48 8b 04 25 f0 ff 	mov    %fs:0xfffffffffffffff0,%rax$/;"	l
ffff80000010bd9b	kernel.asm	/^ffff80000010bd9b:	ff ff $/;"	l
ffff80000010bd9d	kernel.asm	/^ffff80000010bd9d:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax$/;"	l
ffff80000010bda4	kernel.asm	/^ffff80000010bda4:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010bdaa	kernel.asm	/^ffff80000010bdaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010bdae	kernel.asm	/^ffff80000010bdae:	64 48 8b 04 25 f8 ff 	mov    %fs:0xfffffffffffffff8,%rax$/;"	l
ffff80000010bdb5	kernel.asm	/^ffff80000010bdb5:	ff ff $/;"	l
ffff80000010bdb7	kernel.asm	/^ffff80000010bdb7:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010bdbb	kernel.asm	/^ffff80000010bdbb:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx$/;"	l
ffff80000010bdc2	kernel.asm	/^ffff80000010bdc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010bdc6	kernel.asm	/^ffff80000010bdc6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bdcb	kernel.asm	/^ffff80000010bdcb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bdce	kernel.asm	/^ffff80000010bdce:	48 b8 99 b6 10 00 00 	movabs $0xffff80000010b699,%rax$/;"	l
ffff80000010bdd5	kernel.asm	/^ffff80000010bdd5:	80 ff ff $/;"	l
ffff80000010bdd8	kernel.asm	/^ffff80000010bdd8:	ff d0                	callq  *%rax$/;"	l
ffff80000010bdda	kernel.asm	/^ffff80000010bdda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bdde	kernel.asm	/^ffff80000010bdde:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010bde2	kernel.asm	/^ffff80000010bde2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bde5	kernel.asm	/^ffff80000010bde5:	48 b8 7a b6 10 00 00 	movabs $0xffff80000010b67a,%rax$/;"	l
ffff80000010bdec	kernel.asm	/^ffff80000010bdec:	80 ff ff $/;"	l
ffff80000010bdef	kernel.asm	/^ffff80000010bdef:	ff d0                	callq  *%rax$/;"	l
ffff80000010bdf1	kernel.asm	/^ffff80000010bdf1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bdf4	kernel.asm	/^ffff80000010bdf4:	48 b8 64 b6 10 00 00 	movabs $0xffff80000010b664,%rax$/;"	l
ffff80000010bdfb	kernel.asm	/^ffff80000010bdfb:	80 ff ff $/;"	l
ffff80000010bdfe	kernel.asm	/^ffff80000010bdfe:	ff d0                	callq  *%rax$/;"	l
ffff80000010be00	kernel.asm	/^ffff80000010be00:	48 b8 87 75 10 00 00 	movabs $0xffff800000107587,%rax$/;"	l
ffff80000010be07	kernel.asm	/^ffff80000010be07:	80 ff ff $/;"	l
ffff80000010be0a	kernel.asm	/^ffff80000010be0a:	ff d0                	callq  *%rax$/;"	l
ffff80000010be0c	kernel.asm	/^ffff80000010be0c:	90                   	nop$/;"	l
ffff80000010be0d	kernel.asm	/^ffff80000010be0d:	c9                   	leaveq $/;"	l
ffff80000010be0e	kernel.asm	/^ffff80000010be0e:	c3                   	retq   $/;"	l
ffff80000010be0f	kernel.asm	/^ffff80000010be0f <walkpgdir>:$/;"	l
ffff80000010be0f	kernel.asm	/^ffff80000010be0f:	55                   	push   %rbp$/;"	l
ffff80000010be10	kernel.asm	/^ffff80000010be10:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010be13	kernel.asm	/^ffff80000010be13:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010be17	kernel.asm	/^ffff80000010be17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010be1b	kernel.asm	/^ffff80000010be1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ffff80000010be1f	kernel.asm	/^ffff80000010be1f:	89 55 bc             	mov    %edx,-0x44(%rbp)$/;"	l
ffff80000010be22	kernel.asm	/^ffff80000010be22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010be26	kernel.asm	/^ffff80000010be26:	48 c1 e8 27          	shr    $0x27,%rax$/;"	l
ffff80000010be2a	kernel.asm	/^ffff80000010be2a:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010be2f	kernel.asm	/^ffff80000010be2f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010be36	kernel.asm	/^ffff80000010be36:	00 $/;"	l
ffff80000010be37	kernel.asm	/^ffff80000010be37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010be3b	kernel.asm	/^ffff80000010be3b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010be3e	kernel.asm	/^ffff80000010be3e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010be42	kernel.asm	/^ffff80000010be42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010be46	kernel.asm	/^ffff80000010be46:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010be49	kernel.asm	/^ffff80000010be49:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010be4c	kernel.asm	/^ffff80000010be4c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010be4f	kernel.asm	/^ffff80000010be4f:	74 23                	je     ffff80000010be74 <walkpgdir+0x65>$/;"	l
ffff80000010be51	kernel.asm	/^ffff80000010be51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010be55	kernel.asm	/^ffff80000010be55:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010be58	kernel.asm	/^ffff80000010be58:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010be5e	kernel.asm	/^ffff80000010be5e:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010be61	kernel.asm	/^ffff80000010be61:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010be68	kernel.asm	/^ffff80000010be68:	80 ff ff $/;"	l
ffff80000010be6b	kernel.asm	/^ffff80000010be6b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010be6e	kernel.asm	/^ffff80000010be6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010be72	kernel.asm	/^ffff80000010be72:	eb 63                	jmp    ffff80000010bed7 <walkpgdir+0xc8>$/;"	l
ffff80000010be74	kernel.asm	/^ffff80000010be74:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010be78	kernel.asm	/^ffff80000010be78:	74 17                	je     ffff80000010be91 <walkpgdir+0x82>$/;"	l
ffff80000010be7a	kernel.asm	/^ffff80000010be7a:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010be81	kernel.asm	/^ffff80000010be81:	80 ff ff $/;"	l
ffff80000010be84	kernel.asm	/^ffff80000010be84:	ff d0                	callq  *%rax$/;"	l
ffff80000010be86	kernel.asm	/^ffff80000010be86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010be8a	kernel.asm	/^ffff80000010be8a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010be8f	kernel.asm	/^ffff80000010be8f:	75 0a                	jne    ffff80000010be9b <walkpgdir+0x8c>$/;"	l
ffff80000010be91	kernel.asm	/^ffff80000010be91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010be96	kernel.asm	/^ffff80000010be96:	e9 bf 01 00 00       	jmpq   ffff80000010c05a <walkpgdir+0x24b>$/;"	l
ffff80000010be9b	kernel.asm	/^ffff80000010be9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010be9f	kernel.asm	/^ffff80000010be9f:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bea4	kernel.asm	/^ffff80000010bea4:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bea9	kernel.asm	/^ffff80000010bea9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010beac	kernel.asm	/^ffff80000010beac:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010beb3	kernel.asm	/^ffff80000010beb3:	80 ff ff $/;"	l
ffff80000010beb6	kernel.asm	/^ffff80000010beb6:	ff d0                	callq  *%rax$/;"	l
ffff80000010beb8	kernel.asm	/^ffff80000010beb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010bebc	kernel.asm	/^ffff80000010bebc:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010bec3	kernel.asm	/^ffff80000010bec3:	80 00 00 $/;"	l
ffff80000010bec6	kernel.asm	/^ffff80000010bec6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bec9	kernel.asm	/^ffff80000010bec9:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010becd	kernel.asm	/^ffff80000010becd:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bed0	kernel.asm	/^ffff80000010bed0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010bed4	kernel.asm	/^ffff80000010bed4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010bed7	kernel.asm	/^ffff80000010bed7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010bedb	kernel.asm	/^ffff80000010bedb:	48 c1 e8 1e          	shr    $0x1e,%rax$/;"	l
ffff80000010bedf	kernel.asm	/^ffff80000010bedf:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010bee4	kernel.asm	/^ffff80000010bee4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010beeb	kernel.asm	/^ffff80000010beeb:	00 $/;"	l
ffff80000010beec	kernel.asm	/^ffff80000010beec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010bef0	kernel.asm	/^ffff80000010bef0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bef3	kernel.asm	/^ffff80000010bef3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010bef7	kernel.asm	/^ffff80000010bef7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010befb	kernel.asm	/^ffff80000010befb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010befe	kernel.asm	/^ffff80000010befe:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010bf01	kernel.asm	/^ffff80000010bf01:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010bf04	kernel.asm	/^ffff80000010bf04:	74 23                	je     ffff80000010bf29 <walkpgdir+0x11a>$/;"	l
ffff80000010bf06	kernel.asm	/^ffff80000010bf06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010bf0a	kernel.asm	/^ffff80000010bf0a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bf0d	kernel.asm	/^ffff80000010bf0d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010bf13	kernel.asm	/^ffff80000010bf13:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bf16	kernel.asm	/^ffff80000010bf16:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010bf1d	kernel.asm	/^ffff80000010bf1d:	80 ff ff $/;"	l
ffff80000010bf20	kernel.asm	/^ffff80000010bf20:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bf23	kernel.asm	/^ffff80000010bf23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010bf27	kernel.asm	/^ffff80000010bf27:	eb 63                	jmp    ffff80000010bf8c <walkpgdir+0x17d>$/;"	l
ffff80000010bf29	kernel.asm	/^ffff80000010bf29:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010bf2d	kernel.asm	/^ffff80000010bf2d:	74 17                	je     ffff80000010bf46 <walkpgdir+0x137>$/;"	l
ffff80000010bf2f	kernel.asm	/^ffff80000010bf2f:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010bf36	kernel.asm	/^ffff80000010bf36:	80 ff ff $/;"	l
ffff80000010bf39	kernel.asm	/^ffff80000010bf39:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf3b	kernel.asm	/^ffff80000010bf3b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010bf3f	kernel.asm	/^ffff80000010bf3f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010bf44	kernel.asm	/^ffff80000010bf44:	75 0a                	jne    ffff80000010bf50 <walkpgdir+0x141>$/;"	l
ffff80000010bf46	kernel.asm	/^ffff80000010bf46:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010bf4b	kernel.asm	/^ffff80000010bf4b:	e9 0a 01 00 00       	jmpq   ffff80000010c05a <walkpgdir+0x24b>$/;"	l
ffff80000010bf50	kernel.asm	/^ffff80000010bf50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bf54	kernel.asm	/^ffff80000010bf54:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bf59	kernel.asm	/^ffff80000010bf59:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bf5e	kernel.asm	/^ffff80000010bf5e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bf61	kernel.asm	/^ffff80000010bf61:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010bf68	kernel.asm	/^ffff80000010bf68:	80 ff ff $/;"	l
ffff80000010bf6b	kernel.asm	/^ffff80000010bf6b:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf6d	kernel.asm	/^ffff80000010bf6d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010bf71	kernel.asm	/^ffff80000010bf71:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010bf78	kernel.asm	/^ffff80000010bf78:	80 00 00 $/;"	l
ffff80000010bf7b	kernel.asm	/^ffff80000010bf7b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bf7e	kernel.asm	/^ffff80000010bf7e:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010bf82	kernel.asm	/^ffff80000010bf82:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bf85	kernel.asm	/^ffff80000010bf85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010bf89	kernel.asm	/^ffff80000010bf89:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010bf8c	kernel.asm	/^ffff80000010bf8c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010bf90	kernel.asm	/^ffff80000010bf90:	48 c1 e8 15          	shr    $0x15,%rax$/;"	l
ffff80000010bf94	kernel.asm	/^ffff80000010bf94:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010bf99	kernel.asm	/^ffff80000010bf99:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010bfa0	kernel.asm	/^ffff80000010bfa0:	00 $/;"	l
ffff80000010bfa1	kernel.asm	/^ffff80000010bfa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bfa5	kernel.asm	/^ffff80000010bfa5:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bfa8	kernel.asm	/^ffff80000010bfa8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010bfac	kernel.asm	/^ffff80000010bfac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010bfb0	kernel.asm	/^ffff80000010bfb0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bfb3	kernel.asm	/^ffff80000010bfb3:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010bfb6	kernel.asm	/^ffff80000010bfb6:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010bfb9	kernel.asm	/^ffff80000010bfb9:	74 23                	je     ffff80000010bfde <walkpgdir+0x1cf>$/;"	l
ffff80000010bfbb	kernel.asm	/^ffff80000010bfbb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010bfbf	kernel.asm	/^ffff80000010bfbf:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bfc2	kernel.asm	/^ffff80000010bfc2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010bfc8	kernel.asm	/^ffff80000010bfc8:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010bfcb	kernel.asm	/^ffff80000010bfcb:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010bfd2	kernel.asm	/^ffff80000010bfd2:	80 ff ff $/;"	l
ffff80000010bfd5	kernel.asm	/^ffff80000010bfd5:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010bfd8	kernel.asm	/^ffff80000010bfd8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010bfdc	kernel.asm	/^ffff80000010bfdc:	eb 60                	jmp    ffff80000010c03e <walkpgdir+0x22f>$/;"	l
ffff80000010bfde	kernel.asm	/^ffff80000010bfde:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010bfe2	kernel.asm	/^ffff80000010bfe2:	74 17                	je     ffff80000010bffb <walkpgdir+0x1ec>$/;"	l
ffff80000010bfe4	kernel.asm	/^ffff80000010bfe4:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010bfeb	kernel.asm	/^ffff80000010bfeb:	80 ff ff $/;"	l
ffff80000010bfee	kernel.asm	/^ffff80000010bfee:	ff d0                	callq  *%rax$/;"	l
ffff80000010bff0	kernel.asm	/^ffff80000010bff0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010bff4	kernel.asm	/^ffff80000010bff4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010bff9	kernel.asm	/^ffff80000010bff9:	75 07                	jne    ffff80000010c002 <walkpgdir+0x1f3>$/;"	l
ffff80000010bffb	kernel.asm	/^ffff80000010bffb:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c000	kernel.asm	/^ffff80000010c000:	eb 58                	jmp    ffff80000010c05a <walkpgdir+0x24b>$/;"	l
ffff80000010c002	kernel.asm	/^ffff80000010c002:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c006	kernel.asm	/^ffff80000010c006:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c00b	kernel.asm	/^ffff80000010c00b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c010	kernel.asm	/^ffff80000010c010:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c013	kernel.asm	/^ffff80000010c013:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010c01a	kernel.asm	/^ffff80000010c01a:	80 ff ff $/;"	l
ffff80000010c01d	kernel.asm	/^ffff80000010c01d:	ff d0                	callq  *%rax$/;"	l
ffff80000010c01f	kernel.asm	/^ffff80000010c01f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010c023	kernel.asm	/^ffff80000010c023:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c02a	kernel.asm	/^ffff80000010c02a:	80 00 00 $/;"	l
ffff80000010c02d	kernel.asm	/^ffff80000010c02d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c030	kernel.asm	/^ffff80000010c030:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010c034	kernel.asm	/^ffff80000010c034:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c037	kernel.asm	/^ffff80000010c037:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c03b	kernel.asm	/^ffff80000010c03b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c03e	kernel.asm	/^ffff80000010c03e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010c042	kernel.asm	/^ffff80000010c042:	48 c1 e8 0c          	shr    $0xc,%rax$/;"	l
ffff80000010c046	kernel.asm	/^ffff80000010c046:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010c04b	kernel.asm	/^ffff80000010c04b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c052	kernel.asm	/^ffff80000010c052:	00 $/;"	l
ffff80000010c053	kernel.asm	/^ffff80000010c053:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c057	kernel.asm	/^ffff80000010c057:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c05a	kernel.asm	/^ffff80000010c05a:	c9                   	leaveq $/;"	l
ffff80000010c05b	kernel.asm	/^ffff80000010c05b:	c3                   	retq   $/;"	l
ffff80000010c05c	kernel.asm	/^ffff80000010c05c <mappages>:$/;"	l
ffff80000010c05c	kernel.asm	/^ffff80000010c05c:	55                   	push   %rbp$/;"	l
ffff80000010c05d	kernel.asm	/^ffff80000010c05d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c060	kernel.asm	/^ffff80000010c060:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010c064	kernel.asm	/^ffff80000010c064:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c068	kernel.asm	/^ffff80000010c068:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c06c	kernel.asm	/^ffff80000010c06c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c070	kernel.asm	/^ffff80000010c070:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)$/;"	l
ffff80000010c074	kernel.asm	/^ffff80000010c074:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)$/;"	l
ffff80000010c078	kernel.asm	/^ffff80000010c078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c07c	kernel.asm	/^ffff80000010c07c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c082	kernel.asm	/^ffff80000010c082:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c086	kernel.asm	/^ffff80000010c086:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010c08a	kernel.asm	/^ffff80000010c08a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c08e	kernel.asm	/^ffff80000010c08e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c091	kernel.asm	/^ffff80000010c091:	48 83 e8 01          	sub    $0x1,%rax$/;"	l
ffff80000010c095	kernel.asm	/^ffff80000010c095:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c09b	kernel.asm	/^ffff80000010c09b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c09f	kernel.asm	/^ffff80000010c09f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c0a3	kernel.asm	/^ffff80000010c0a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c0a7	kernel.asm	/^ffff80000010c0a7:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010c0ac	kernel.asm	/^ffff80000010c0ac:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c0af	kernel.asm	/^ffff80000010c0af:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c0b2	kernel.asm	/^ffff80000010c0b2:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c0b9	kernel.asm	/^ffff80000010c0b9:	80 ff ff $/;"	l
ffff80000010c0bc	kernel.asm	/^ffff80000010c0bc:	ff d0                	callq  *%rax$/;"	l
ffff80000010c0be	kernel.asm	/^ffff80000010c0be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c0c2	kernel.asm	/^ffff80000010c0c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c0c7	kernel.asm	/^ffff80000010c0c7:	75 07                	jne    ffff80000010c0d0 <mappages+0x74>$/;"	l
ffff80000010c0c9	kernel.asm	/^ffff80000010c0c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010c0ce	kernel.asm	/^ffff80000010c0ce:	eb 61                	jmp    ffff80000010c131 <mappages+0xd5>$/;"	l
ffff80000010c0d0	kernel.asm	/^ffff80000010c0d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c0d4	kernel.asm	/^ffff80000010c0d4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c0d7	kernel.asm	/^ffff80000010c0d7:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c0da	kernel.asm	/^ffff80000010c0da:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c0dd	kernel.asm	/^ffff80000010c0dd:	74 16                	je     ffff80000010c0f5 <mappages+0x99>$/;"	l
ffff80000010c0df	kernel.asm	/^ffff80000010c0df:	48 bf cc d1 10 00 00 	movabs $0xffff80000010d1cc,%rdi$/;"	l
ffff80000010c0e6	kernel.asm	/^ffff80000010c0e6:	80 ff ff $/;"	l
ffff80000010c0e9	kernel.asm	/^ffff80000010c0e9:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c0f0	kernel.asm	/^ffff80000010c0f0:	80 ff ff $/;"	l
ffff80000010c0f3	kernel.asm	/^ffff80000010c0f3:	ff d0                	callq  *%rax$/;"	l
ffff80000010c0f5	kernel.asm	/^ffff80000010c0f5:	8b 45 bc             	mov    -0x44(%rbp),%eax$/;"	l
ffff80000010c0f8	kernel.asm	/^ffff80000010c0f8:	48 98                	cltq   $/;"	l
ffff80000010c0fa	kernel.asm	/^ffff80000010c0fa:	48 0b 45 c0          	or     -0x40(%rbp),%rax$/;"	l
ffff80000010c0fe	kernel.asm	/^ffff80000010c0fe:	48 83 c8 01          	or     $0x1,%rax$/;"	l
ffff80000010c102	kernel.asm	/^ffff80000010c102:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c105	kernel.asm	/^ffff80000010c105:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c109	kernel.asm	/^ffff80000010c109:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c10c	kernel.asm	/^ffff80000010c10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c110	kernel.asm	/^ffff80000010c110:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010c114	kernel.asm	/^ffff80000010c114:	74 15                	je     ffff80000010c12b <mappages+0xcf>$/;"	l
ffff80000010c116	kernel.asm	/^ffff80000010c116:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c11d	kernel.asm	/^ffff80000010c11d:	00 $/;"	l
ffff80000010c11e	kernel.asm	/^ffff80000010c11e:	48 81 45 c0 00 10 00 	addq   $0x1000,-0x40(%rbp)$/;"	l
ffff80000010c125	kernel.asm	/^ffff80000010c125:	00 $/;"	l
ffff80000010c126	kernel.asm	/^ffff80000010c126:	e9 74 ff ff ff       	jmpq   ffff80000010c09f <mappages+0x43>$/;"	l
ffff80000010c12b	kernel.asm	/^ffff80000010c12b:	90                   	nop$/;"	l
ffff80000010c12c	kernel.asm	/^ffff80000010c12c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c131	kernel.asm	/^ffff80000010c131:	c9                   	leaveq $/;"	l
ffff80000010c132	kernel.asm	/^ffff80000010c132:	c3                   	retq   $/;"	l
ffff80000010c133	kernel.asm	/^ffff80000010c133 <inituvm>:$/;"	l
ffff80000010c133	kernel.asm	/^ffff80000010c133:	55                   	push   %rbp$/;"	l
ffff80000010c134	kernel.asm	/^ffff80000010c134:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c137	kernel.asm	/^ffff80000010c137:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010c13b	kernel.asm	/^ffff80000010c13b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c13f	kernel.asm	/^ffff80000010c13f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010c143	kernel.asm	/^ffff80000010c143:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010c146	kernel.asm	/^ffff80000010c146:	81 7d dc ff 0f 00 00 	cmpl   $0xfff,-0x24(%rbp)$/;"	l
ffff80000010c14d	kernel.asm	/^ffff80000010c14d:	76 16                	jbe    ffff80000010c165 <inituvm+0x32>$/;"	l
ffff80000010c14f	kernel.asm	/^ffff80000010c14f:	48 bf d2 d1 10 00 00 	movabs $0xffff80000010d1d2,%rdi$/;"	l
ffff80000010c156	kernel.asm	/^ffff80000010c156:	80 ff ff $/;"	l
ffff80000010c159	kernel.asm	/^ffff80000010c159:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c160	kernel.asm	/^ffff80000010c160:	80 ff ff $/;"	l
ffff80000010c163	kernel.asm	/^ffff80000010c163:	ff d0                	callq  *%rax$/;"	l
ffff80000010c165	kernel.asm	/^ffff80000010c165:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010c16c	kernel.asm	/^ffff80000010c16c:	80 ff ff $/;"	l
ffff80000010c16f	kernel.asm	/^ffff80000010c16f:	ff d0                	callq  *%rax$/;"	l
ffff80000010c171	kernel.asm	/^ffff80000010c171:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c175	kernel.asm	/^ffff80000010c175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c179	kernel.asm	/^ffff80000010c179:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c17e	kernel.asm	/^ffff80000010c17e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c183	kernel.asm	/^ffff80000010c183:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c186	kernel.asm	/^ffff80000010c186:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010c18d	kernel.asm	/^ffff80000010c18d:	80 ff ff $/;"	l
ffff80000010c190	kernel.asm	/^ffff80000010c190:	ff d0                	callq  *%rax$/;"	l
ffff80000010c192	kernel.asm	/^ffff80000010c192:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010c196	kernel.asm	/^ffff80000010c196:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c19d	kernel.asm	/^ffff80000010c19d:	80 00 00 $/;"	l
ffff80000010c1a0	kernel.asm	/^ffff80000010c1a0:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010c1a3	kernel.asm	/^ffff80000010c1a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c1a7	kernel.asm	/^ffff80000010c1a7:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010c1ad	kernel.asm	/^ffff80000010c1ad:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010c1b0	kernel.asm	/^ffff80000010c1b0:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c1b5	kernel.asm	/^ffff80000010c1b5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c1ba	kernel.asm	/^ffff80000010c1ba:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c1bd	kernel.asm	/^ffff80000010c1bd:	48 b8 5c c0 10 00 00 	movabs $0xffff80000010c05c,%rax$/;"	l
ffff80000010c1c4	kernel.asm	/^ffff80000010c1c4:	80 ff ff $/;"	l
ffff80000010c1c7	kernel.asm	/^ffff80000010c1c7:	ff d0                	callq  *%rax$/;"	l
ffff80000010c1c9	kernel.asm	/^ffff80000010c1c9:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff80000010c1cc	kernel.asm	/^ffff80000010c1cc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010c1d0	kernel.asm	/^ffff80000010c1d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c1d4	kernel.asm	/^ffff80000010c1d4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c1d7	kernel.asm	/^ffff80000010c1d7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c1da	kernel.asm	/^ffff80000010c1da:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010c1e1	kernel.asm	/^ffff80000010c1e1:	80 ff ff $/;"	l
ffff80000010c1e4	kernel.asm	/^ffff80000010c1e4:	ff d0                	callq  *%rax$/;"	l
ffff80000010c1e6	kernel.asm	/^ffff80000010c1e6:	90                   	nop$/;"	l
ffff80000010c1e7	kernel.asm	/^ffff80000010c1e7:	c9                   	leaveq $/;"	l
ffff80000010c1e8	kernel.asm	/^ffff80000010c1e8:	c3                   	retq   $/;"	l
ffff80000010c1e9	kernel.asm	/^ffff80000010c1e9 <loaduvm>:$/;"	l
ffff80000010c1e9	kernel.asm	/^ffff80000010c1e9:	55                   	push   %rbp$/;"	l
ffff80000010c1ea	kernel.asm	/^ffff80000010c1ea:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c1ed	kernel.asm	/^ffff80000010c1ed:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c1f1	kernel.asm	/^ffff80000010c1f1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c1f5	kernel.asm	/^ffff80000010c1f5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c1f9	kernel.asm	/^ffff80000010c1f9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c1fd	kernel.asm	/^ffff80000010c1fd:	89 4d c4             	mov    %ecx,-0x3c(%rbp)$/;"	l
ffff80000010c200	kernel.asm	/^ffff80000010c200:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)$/;"	l
ffff80000010c204	kernel.asm	/^ffff80000010c204:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c208	kernel.asm	/^ffff80000010c208:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010c20d	kernel.asm	/^ffff80000010c20d:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c210	kernel.asm	/^ffff80000010c210:	74 16                	je     ffff80000010c228 <loaduvm+0x3f>$/;"	l
ffff80000010c212	kernel.asm	/^ffff80000010c212:	48 bf f0 d1 10 00 00 	movabs $0xffff80000010d1f0,%rdi$/;"	l
ffff80000010c219	kernel.asm	/^ffff80000010c219:	80 ff ff $/;"	l
ffff80000010c21c	kernel.asm	/^ffff80000010c21c:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c223	kernel.asm	/^ffff80000010c223:	80 ff ff $/;"	l
ffff80000010c226	kernel.asm	/^ffff80000010c226:	ff d0                	callq  *%rax$/;"	l
ffff80000010c228	kernel.asm	/^ffff80000010c228:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010c22f	kernel.asm	/^ffff80000010c22f:	e9 c4 00 00 00       	jmpq   ffff80000010c2f8 <loaduvm+0x10f>$/;"	l
ffff80000010c234	kernel.asm	/^ffff80000010c234:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010c237	kernel.asm	/^ffff80000010c237:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c23b	kernel.asm	/^ffff80000010c23b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010c23f	kernel.asm	/^ffff80000010c23f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c243	kernel.asm	/^ffff80000010c243:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c248	kernel.asm	/^ffff80000010c248:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c24b	kernel.asm	/^ffff80000010c24b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c24e	kernel.asm	/^ffff80000010c24e:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c255	kernel.asm	/^ffff80000010c255:	80 ff ff $/;"	l
ffff80000010c258	kernel.asm	/^ffff80000010c258:	ff d0                	callq  *%rax$/;"	l
ffff80000010c25a	kernel.asm	/^ffff80000010c25a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c25e	kernel.asm	/^ffff80000010c25e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c263	kernel.asm	/^ffff80000010c263:	75 16                	jne    ffff80000010c27b <loaduvm+0x92>$/;"	l
ffff80000010c265	kernel.asm	/^ffff80000010c265:	48 bf 13 d2 10 00 00 	movabs $0xffff80000010d213,%rdi$/;"	l
ffff80000010c26c	kernel.asm	/^ffff80000010c26c:	80 ff ff $/;"	l
ffff80000010c26f	kernel.asm	/^ffff80000010c26f:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c276	kernel.asm	/^ffff80000010c276:	80 ff ff $/;"	l
ffff80000010c279	kernel.asm	/^ffff80000010c279:	ff d0                	callq  *%rax$/;"	l
ffff80000010c27b	kernel.asm	/^ffff80000010c27b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c27f	kernel.asm	/^ffff80000010c27f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c282	kernel.asm	/^ffff80000010c282:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c288	kernel.asm	/^ffff80000010c288:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c28c	kernel.asm	/^ffff80000010c28c:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010c28f	kernel.asm	/^ffff80000010c28f:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010c292	kernel.asm	/^ffff80000010c292:	3d ff 0f 00 00       	cmp    $0xfff,%eax$/;"	l
ffff80000010c297	kernel.asm	/^ffff80000010c297:	77 0b                	ja     ffff80000010c2a4 <loaduvm+0xbb>$/;"	l
ffff80000010c299	kernel.asm	/^ffff80000010c299:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010c29c	kernel.asm	/^ffff80000010c29c:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010c29f	kernel.asm	/^ffff80000010c29f:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010c2a2	kernel.asm	/^ffff80000010c2a2:	eb 07                	jmp    ffff80000010c2ab <loaduvm+0xc2>$/;"	l
ffff80000010c2a4	kernel.asm	/^ffff80000010c2a4:	c7 45 f8 00 10 00 00 	movl   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c2ab	kernel.asm	/^ffff80000010c2ab:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff80000010c2ae	kernel.asm	/^ffff80000010c2ae:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c2b1	kernel.asm	/^ffff80000010c2b1:	8d 34 02             	lea    (%rdx,%rax,1),%esi$/;"	l
ffff80000010c2b4	kernel.asm	/^ffff80000010c2b4:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010c2bb	kernel.asm	/^ffff80000010c2bb:	80 ff ff $/;"	l
ffff80000010c2be	kernel.asm	/^ffff80000010c2be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c2c2	kernel.asm	/^ffff80000010c2c2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c2c5	kernel.asm	/^ffff80000010c2c5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c2c8	kernel.asm	/^ffff80000010c2c8:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010c2cb	kernel.asm	/^ffff80000010c2cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c2cf	kernel.asm	/^ffff80000010c2cf:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010c2d1	kernel.asm	/^ffff80000010c2d1:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010c2d3	kernel.asm	/^ffff80000010c2d3:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010c2d6	kernel.asm	/^ffff80000010c2d6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c2d9	kernel.asm	/^ffff80000010c2d9:	48 b8 31 30 10 00 00 	movabs $0xffff800000103031,%rax$/;"	l
ffff80000010c2e0	kernel.asm	/^ffff80000010c2e0:	80 ff ff $/;"	l
ffff80000010c2e3	kernel.asm	/^ffff80000010c2e3:	ff d0                	callq  *%rax$/;"	l
ffff80000010c2e5	kernel.asm	/^ffff80000010c2e5:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff80000010c2e8	kernel.asm	/^ffff80000010c2e8:	74 07                	je     ffff80000010c2f1 <loaduvm+0x108>$/;"	l
ffff80000010c2ea	kernel.asm	/^ffff80000010c2ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010c2ef	kernel.asm	/^ffff80000010c2ef:	eb 18                	jmp    ffff80000010c309 <loaduvm+0x120>$/;"	l
ffff80000010c2f1	kernel.asm	/^ffff80000010c2f1:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff80000010c2f8	kernel.asm	/^ffff80000010c2f8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c2fb	kernel.asm	/^ffff80000010c2fb:	3b 45 c0             	cmp    -0x40(%rbp),%eax$/;"	l
ffff80000010c2fe	kernel.asm	/^ffff80000010c2fe:	0f 82 30 ff ff ff    	jb     ffff80000010c234 <loaduvm+0x4b>$/;"	l
ffff80000010c304	kernel.asm	/^ffff80000010c304:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c309	kernel.asm	/^ffff80000010c309:	c9                   	leaveq $/;"	l
ffff80000010c30a	kernel.asm	/^ffff80000010c30a:	c3                   	retq   $/;"	l
ffff80000010c30b	kernel.asm	/^ffff80000010c30b <allocuvm>:$/;"	l
ffff80000010c30b	kernel.asm	/^ffff80000010c30b:	55                   	push   %rbp$/;"	l
ffff80000010c30c	kernel.asm	/^ffff80000010c30c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c30f	kernel.asm	/^ffff80000010c30f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010c313	kernel.asm	/^ffff80000010c313:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c317	kernel.asm	/^ffff80000010c317:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010c31a	kernel.asm	/^ffff80000010c31a:	89 55 e0             	mov    %edx,-0x20(%rbp)$/;"	l
ffff80000010c31d	kernel.asm	/^ffff80000010c31d:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c320	kernel.asm	/^ffff80000010c320:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff80000010c323	kernel.asm	/^ffff80000010c323:	73 08                	jae    ffff80000010c32d <allocuvm+0x22>$/;"	l
ffff80000010c325	kernel.asm	/^ffff80000010c325:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010c328	kernel.asm	/^ffff80000010c328:	e9 30 01 00 00       	jmpq   ffff80000010c45d <allocuvm+0x152>$/;"	l
ffff80000010c32d	kernel.asm	/^ffff80000010c32d:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010c330	kernel.asm	/^ffff80000010c330:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010c336	kernel.asm	/^ffff80000010c336:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c33c	kernel.asm	/^ffff80000010c33c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c340	kernel.asm	/^ffff80000010c340:	e9 08 01 00 00       	jmpq   ffff80000010c44d <allocuvm+0x142>$/;"	l
ffff80000010c345	kernel.asm	/^ffff80000010c345:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010c34c	kernel.asm	/^ffff80000010c34c:	80 ff ff $/;"	l
ffff80000010c34f	kernel.asm	/^ffff80000010c34f:	ff d0                	callq  *%rax$/;"	l
ffff80000010c351	kernel.asm	/^ffff80000010c351:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c355	kernel.asm	/^ffff80000010c355:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c35a	kernel.asm	/^ffff80000010c35a:	75 41                	jne    ffff80000010c39d <allocuvm+0x92>$/;"	l
ffff80000010c35c	kernel.asm	/^ffff80000010c35c:	48 bf 31 d2 10 00 00 	movabs $0xffff80000010d231,%rdi$/;"	l
ffff80000010c363	kernel.asm	/^ffff80000010c363:	80 ff ff $/;"	l
ffff80000010c366	kernel.asm	/^ffff80000010c366:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c36b	kernel.asm	/^ffff80000010c36b:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010c372	kernel.asm	/^ffff80000010c372:	80 ff ff $/;"	l
ffff80000010c375	kernel.asm	/^ffff80000010c375:	ff d2                	callq  *%rdx$/;"	l
ffff80000010c377	kernel.asm	/^ffff80000010c377:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010c37a	kernel.asm	/^ffff80000010c37a:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010c37d	kernel.asm	/^ffff80000010c37d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c381	kernel.asm	/^ffff80000010c381:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c384	kernel.asm	/^ffff80000010c384:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c387	kernel.asm	/^ffff80000010c387:	48 b8 5f c4 10 00 00 	movabs $0xffff80000010c45f,%rax$/;"	l
ffff80000010c38e	kernel.asm	/^ffff80000010c38e:	80 ff ff $/;"	l
ffff80000010c391	kernel.asm	/^ffff80000010c391:	ff d0                	callq  *%rax$/;"	l
ffff80000010c393	kernel.asm	/^ffff80000010c393:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c398	kernel.asm	/^ffff80000010c398:	e9 c0 00 00 00       	jmpq   ffff80000010c45d <allocuvm+0x152>$/;"	l
ffff80000010c39d	kernel.asm	/^ffff80000010c39d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c3a1	kernel.asm	/^ffff80000010c3a1:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c3a6	kernel.asm	/^ffff80000010c3a6:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c3ab	kernel.asm	/^ffff80000010c3ab:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c3ae	kernel.asm	/^ffff80000010c3ae:	48 b8 96 76 10 00 00 	movabs $0xffff800000107696,%rax$/;"	l
ffff80000010c3b5	kernel.asm	/^ffff80000010c3b5:	80 ff ff $/;"	l
ffff80000010c3b8	kernel.asm	/^ffff80000010c3b8:	ff d0                	callq  *%rax$/;"	l
ffff80000010c3ba	kernel.asm	/^ffff80000010c3ba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010c3be	kernel.asm	/^ffff80000010c3be:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c3c5	kernel.asm	/^ffff80000010c3c5:	80 00 00 $/;"	l
ffff80000010c3c8	kernel.asm	/^ffff80000010c3c8:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010c3cb	kernel.asm	/^ffff80000010c3cb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010c3cf	kernel.asm	/^ffff80000010c3cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c3d3	kernel.asm	/^ffff80000010c3d3:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010c3d9	kernel.asm	/^ffff80000010c3d9:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010c3dc	kernel.asm	/^ffff80000010c3dc:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c3e1	kernel.asm	/^ffff80000010c3e1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c3e4	kernel.asm	/^ffff80000010c3e4:	48 b8 5c c0 10 00 00 	movabs $0xffff80000010c05c,%rax$/;"	l
ffff80000010c3eb	kernel.asm	/^ffff80000010c3eb:	80 ff ff $/;"	l
ffff80000010c3ee	kernel.asm	/^ffff80000010c3ee:	ff d0                	callq  *%rax$/;"	l
ffff80000010c3f0	kernel.asm	/^ffff80000010c3f0:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010c3f2	kernel.asm	/^ffff80000010c3f2:	79 51                	jns    ffff80000010c445 <allocuvm+0x13a>$/;"	l
ffff80000010c3f4	kernel.asm	/^ffff80000010c3f4:	48 bf 49 d2 10 00 00 	movabs $0xffff80000010d249,%rdi$/;"	l
ffff80000010c3fb	kernel.asm	/^ffff80000010c3fb:	80 ff ff $/;"	l
ffff80000010c3fe	kernel.asm	/^ffff80000010c3fe:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c403	kernel.asm	/^ffff80000010c403:	48 ba ac 07 10 00 00 	movabs $0xffff8000001007ac,%rdx$/;"	l
ffff80000010c40a	kernel.asm	/^ffff80000010c40a:	80 ff ff $/;"	l
ffff80000010c40d	kernel.asm	/^ffff80000010c40d:	ff d2                	callq  *%rdx$/;"	l
ffff80000010c40f	kernel.asm	/^ffff80000010c40f:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010c412	kernel.asm	/^ffff80000010c412:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010c415	kernel.asm	/^ffff80000010c415:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c419	kernel.asm	/^ffff80000010c419:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c41c	kernel.asm	/^ffff80000010c41c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c41f	kernel.asm	/^ffff80000010c41f:	48 b8 5f c4 10 00 00 	movabs $0xffff80000010c45f,%rax$/;"	l
ffff80000010c426	kernel.asm	/^ffff80000010c426:	80 ff ff $/;"	l
ffff80000010c429	kernel.asm	/^ffff80000010c429:	ff d0                	callq  *%rax$/;"	l
ffff80000010c42b	kernel.asm	/^ffff80000010c42b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c42f	kernel.asm	/^ffff80000010c42f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c432	kernel.asm	/^ffff80000010c432:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c439	kernel.asm	/^ffff80000010c439:	80 ff ff $/;"	l
ffff80000010c43c	kernel.asm	/^ffff80000010c43c:	ff d0                	callq  *%rax$/;"	l
ffff80000010c43e	kernel.asm	/^ffff80000010c43e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c443	kernel.asm	/^ffff80000010c443:	eb 18                	jmp    ffff80000010c45d <allocuvm+0x152>$/;"	l
ffff80000010c445	kernel.asm	/^ffff80000010c445:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c44c	kernel.asm	/^ffff80000010c44c:	00 $/;"	l
ffff80000010c44d	kernel.asm	/^ffff80000010c44d:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c450	kernel.asm	/^ffff80000010c450:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010c454	kernel.asm	/^ffff80000010c454:	0f 87 eb fe ff ff    	ja     ffff80000010c345 <allocuvm+0x3a>$/;"	l
ffff80000010c45a	kernel.asm	/^ffff80000010c45a:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c45d	kernel.asm	/^ffff80000010c45d:	c9                   	leaveq $/;"	l
ffff80000010c45e	kernel.asm	/^ffff80000010c45e:	c3                   	retq   $/;"	l
ffff80000010c45f	kernel.asm	/^ffff80000010c45f <deallocuvm>:$/;"	l
ffff80000010c45f	kernel.asm	/^ffff80000010c45f:	55                   	push   %rbp$/;"	l
ffff80000010c460	kernel.asm	/^ffff80000010c460:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c463	kernel.asm	/^ffff80000010c463:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c467	kernel.asm	/^ffff80000010c467:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c46b	kernel.asm	/^ffff80000010c46b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c46f	kernel.asm	/^ffff80000010c46f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c473	kernel.asm	/^ffff80000010c473:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c477	kernel.asm	/^ffff80000010c477:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010c47b	kernel.asm	/^ffff80000010c47b:	72 09                	jb     ffff80000010c486 <deallocuvm+0x27>$/;"	l
ffff80000010c47d	kernel.asm	/^ffff80000010c47d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c481	kernel.asm	/^ffff80000010c481:	e9 cd 00 00 00       	jmpq   ffff80000010c553 <deallocuvm+0xf4>$/;"	l
ffff80000010c486	kernel.asm	/^ffff80000010c486:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c48a	kernel.asm	/^ffff80000010c48a:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010c490	kernel.asm	/^ffff80000010c490:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c496	kernel.asm	/^ffff80000010c496:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c49a	kernel.asm	/^ffff80000010c49a:	e9 a2 00 00 00       	jmpq   ffff80000010c541 <deallocuvm+0xe2>$/;"	l
ffff80000010c49f	kernel.asm	/^ffff80000010c49f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c4a3	kernel.asm	/^ffff80000010c4a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c4a7	kernel.asm	/^ffff80000010c4a7:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c4ac	kernel.asm	/^ffff80000010c4ac:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c4af	kernel.asm	/^ffff80000010c4af:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c4b2	kernel.asm	/^ffff80000010c4b2:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c4b9	kernel.asm	/^ffff80000010c4b9:	80 ff ff $/;"	l
ffff80000010c4bc	kernel.asm	/^ffff80000010c4bc:	ff d0                	callq  *%rax$/;"	l
ffff80000010c4be	kernel.asm	/^ffff80000010c4be:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c4c2	kernel.asm	/^ffff80000010c4c2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c4c7	kernel.asm	/^ffff80000010c4c7:	74 70                	je     ffff80000010c539 <deallocuvm+0xda>$/;"	l
ffff80000010c4c9	kernel.asm	/^ffff80000010c4c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c4cd	kernel.asm	/^ffff80000010c4cd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c4d0	kernel.asm	/^ffff80000010c4d0:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c4d3	kernel.asm	/^ffff80000010c4d3:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c4d6	kernel.asm	/^ffff80000010c4d6:	74 61                	je     ffff80000010c539 <deallocuvm+0xda>$/;"	l
ffff80000010c4d8	kernel.asm	/^ffff80000010c4d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c4dc	kernel.asm	/^ffff80000010c4dc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c4df	kernel.asm	/^ffff80000010c4df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c4e5	kernel.asm	/^ffff80000010c4e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c4e9	kernel.asm	/^ffff80000010c4e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c4ee	kernel.asm	/^ffff80000010c4ee:	75 16                	jne    ffff80000010c506 <deallocuvm+0xa7>$/;"	l
ffff80000010c4f0	kernel.asm	/^ffff80000010c4f0:	48 bf 65 d2 10 00 00 	movabs $0xffff80000010d265,%rdi$/;"	l
ffff80000010c4f7	kernel.asm	/^ffff80000010c4f7:	80 ff ff $/;"	l
ffff80000010c4fa	kernel.asm	/^ffff80000010c4fa:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c501	kernel.asm	/^ffff80000010c501:	80 ff ff $/;"	l
ffff80000010c504	kernel.asm	/^ffff80000010c504:	ff d0                	callq  *%rax$/;"	l
ffff80000010c506	kernel.asm	/^ffff80000010c506:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010c50d	kernel.asm	/^ffff80000010c50d:	80 ff ff $/;"	l
ffff80000010c510	kernel.asm	/^ffff80000010c510:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c514	kernel.asm	/^ffff80000010c514:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c517	kernel.asm	/^ffff80000010c517:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c51b	kernel.asm	/^ffff80000010c51b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c51f	kernel.asm	/^ffff80000010c51f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c522	kernel.asm	/^ffff80000010c522:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c529	kernel.asm	/^ffff80000010c529:	80 ff ff $/;"	l
ffff80000010c52c	kernel.asm	/^ffff80000010c52c:	ff d0                	callq  *%rax$/;"	l
ffff80000010c52e	kernel.asm	/^ffff80000010c52e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c532	kernel.asm	/^ffff80000010c532:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010c539	kernel.asm	/^ffff80000010c539:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c540	kernel.asm	/^ffff80000010c540:	00 $/;"	l
ffff80000010c541	kernel.asm	/^ffff80000010c541:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c545	kernel.asm	/^ffff80000010c545:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010c549	kernel.asm	/^ffff80000010c549:	0f 82 50 ff ff ff    	jb     ffff80000010c49f <deallocuvm+0x40>$/;"	l
ffff80000010c54f	kernel.asm	/^ffff80000010c54f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c553	kernel.asm	/^ffff80000010c553:	c9                   	leaveq $/;"	l
ffff80000010c554	kernel.asm	/^ffff80000010c554:	c3                   	retq   $/;"	l
ffff80000010c555	kernel.asm	/^ffff80000010c555 <freevm>:$/;"	l
ffff80000010c555	kernel.asm	/^ffff80000010c555:	55                   	push   %rbp$/;"	l
ffff80000010c556	kernel.asm	/^ffff80000010c556:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c559	kernel.asm	/^ffff80000010c559:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c55d	kernel.asm	/^ffff80000010c55d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010c561	kernel.asm	/^ffff80000010c561:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff80000010c566	kernel.asm	/^ffff80000010c566:	75 16                	jne    ffff80000010c57e <freevm+0x29>$/;"	l
ffff80000010c568	kernel.asm	/^ffff80000010c568:	48 bf 6b d2 10 00 00 	movabs $0xffff80000010d26b,%rdi$/;"	l
ffff80000010c56f	kernel.asm	/^ffff80000010c56f:	80 ff ff $/;"	l
ffff80000010c572	kernel.asm	/^ffff80000010c572:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c579	kernel.asm	/^ffff80000010c579:	80 ff ff $/;"	l
ffff80000010c57c	kernel.asm	/^ffff80000010c57c:	ff d0                	callq  *%rax$/;"	l
ffff80000010c57e	kernel.asm	/^ffff80000010c57e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c582	kernel.asm	/^ffff80000010c582:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c587	kernel.asm	/^ffff80000010c587:	be 00 00 a0 3f       	mov    $0x3fa00000,%esi$/;"	l
ffff80000010c58c	kernel.asm	/^ffff80000010c58c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c58f	kernel.asm	/^ffff80000010c58f:	48 b8 5f c4 10 00 00 	movabs $0xffff80000010c45f,%rax$/;"	l
ffff80000010c596	kernel.asm	/^ffff80000010c596:	80 ff ff $/;"	l
ffff80000010c599	kernel.asm	/^ffff80000010c599:	ff d0                	callq  *%rax$/;"	l
ffff80000010c59b	kernel.asm	/^ffff80000010c59b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010c5a2	kernel.asm	/^ffff80000010c5a2:	e9 5c 01 00 00       	jmpq   ffff80000010c703 <freevm+0x1ae>$/;"	l
ffff80000010c5a7	kernel.asm	/^ffff80000010c5a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c5aa	kernel.asm	/^ffff80000010c5aa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c5b1	kernel.asm	/^ffff80000010c5b1:	00 $/;"	l
ffff80000010c5b2	kernel.asm	/^ffff80000010c5b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c5b6	kernel.asm	/^ffff80000010c5b6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c5b9	kernel.asm	/^ffff80000010c5b9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c5bc	kernel.asm	/^ffff80000010c5bc:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c5bf	kernel.asm	/^ffff80000010c5bf:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c5c2	kernel.asm	/^ffff80000010c5c2:	0f 84 37 01 00 00    	je     ffff80000010c6ff <freevm+0x1aa>$/;"	l
ffff80000010c5c8	kernel.asm	/^ffff80000010c5c8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c5cb	kernel.asm	/^ffff80000010c5cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c5d2	kernel.asm	/^ffff80000010c5d2:	00 $/;"	l
ffff80000010c5d3	kernel.asm	/^ffff80000010c5d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c5d7	kernel.asm	/^ffff80000010c5d7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c5da	kernel.asm	/^ffff80000010c5da:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c5dd	kernel.asm	/^ffff80000010c5dd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c5e3	kernel.asm	/^ffff80000010c5e3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c5e6	kernel.asm	/^ffff80000010c5e6:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c5ed	kernel.asm	/^ffff80000010c5ed:	80 ff ff $/;"	l
ffff80000010c5f0	kernel.asm	/^ffff80000010c5f0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c5f3	kernel.asm	/^ffff80000010c5f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c5f7	kernel.asm	/^ffff80000010c5f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c5fe	kernel.asm	/^ffff80000010c5fe:	e9 dc 00 00 00       	jmpq   ffff80000010c6df <freevm+0x18a>$/;"	l
ffff80000010c603	kernel.asm	/^ffff80000010c603:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010c606	kernel.asm	/^ffff80000010c606:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c60d	kernel.asm	/^ffff80000010c60d:	00 $/;"	l
ffff80000010c60e	kernel.asm	/^ffff80000010c60e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c612	kernel.asm	/^ffff80000010c612:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c615	kernel.asm	/^ffff80000010c615:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c618	kernel.asm	/^ffff80000010c618:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c61b	kernel.asm	/^ffff80000010c61b:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c61e	kernel.asm	/^ffff80000010c61e:	0f 84 b7 00 00 00    	je     ffff80000010c6db <freevm+0x186>$/;"	l
ffff80000010c624	kernel.asm	/^ffff80000010c624:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010c627	kernel.asm	/^ffff80000010c627:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c62e	kernel.asm	/^ffff80000010c62e:	00 $/;"	l
ffff80000010c62f	kernel.asm	/^ffff80000010c62f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c633	kernel.asm	/^ffff80000010c633:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c636	kernel.asm	/^ffff80000010c636:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c639	kernel.asm	/^ffff80000010c639:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c63f	kernel.asm	/^ffff80000010c63f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c642	kernel.asm	/^ffff80000010c642:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c649	kernel.asm	/^ffff80000010c649:	80 ff ff $/;"	l
ffff80000010c64c	kernel.asm	/^ffff80000010c64c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c64f	kernel.asm	/^ffff80000010c64f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c653	kernel.asm	/^ffff80000010c653:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff80000010c65a	kernel.asm	/^ffff80000010c65a:	eb 63                	jmp    ffff80000010c6bf <freevm+0x16a>$/;"	l
ffff80000010c65c	kernel.asm	/^ffff80000010c65c:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010c65f	kernel.asm	/^ffff80000010c65f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c666	kernel.asm	/^ffff80000010c666:	00 $/;"	l
ffff80000010c667	kernel.asm	/^ffff80000010c667:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c66b	kernel.asm	/^ffff80000010c66b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c66e	kernel.asm	/^ffff80000010c66e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c671	kernel.asm	/^ffff80000010c671:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c674	kernel.asm	/^ffff80000010c674:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c677	kernel.asm	/^ffff80000010c677:	74 42                	je     ffff80000010c6bb <freevm+0x166>$/;"	l
ffff80000010c679	kernel.asm	/^ffff80000010c679:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010c67c	kernel.asm	/^ffff80000010c67c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c683	kernel.asm	/^ffff80000010c683:	00 $/;"	l
ffff80000010c684	kernel.asm	/^ffff80000010c684:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c688	kernel.asm	/^ffff80000010c688:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c68b	kernel.asm	/^ffff80000010c68b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c68e	kernel.asm	/^ffff80000010c68e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c694	kernel.asm	/^ffff80000010c694:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c697	kernel.asm	/^ffff80000010c697:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c69e	kernel.asm	/^ffff80000010c69e:	80 ff ff $/;"	l
ffff80000010c6a1	kernel.asm	/^ffff80000010c6a1:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c6a4	kernel.asm	/^ffff80000010c6a4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010c6a8	kernel.asm	/^ffff80000010c6a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c6ac	kernel.asm	/^ffff80000010c6ac:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c6af	kernel.asm	/^ffff80000010c6af:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c6b6	kernel.asm	/^ffff80000010c6b6:	80 ff ff $/;"	l
ffff80000010c6b9	kernel.asm	/^ffff80000010c6b9:	ff d0                	callq  *%rax$/;"	l
ffff80000010c6bb	kernel.asm	/^ffff80000010c6bb:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff80000010c6bf	kernel.asm	/^ffff80000010c6bf:	81 7d f4 ff 01 00 00 	cmpl   $0x1ff,-0xc(%rbp)$/;"	l
ffff80000010c6c6	kernel.asm	/^ffff80000010c6c6:	76 94                	jbe    ffff80000010c65c <freevm+0x107>$/;"	l
ffff80000010c6c8	kernel.asm	/^ffff80000010c6c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c6cc	kernel.asm	/^ffff80000010c6cc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c6cf	kernel.asm	/^ffff80000010c6cf:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c6d6	kernel.asm	/^ffff80000010c6d6:	80 ff ff $/;"	l
ffff80000010c6d9	kernel.asm	/^ffff80000010c6d9:	ff d0                	callq  *%rax$/;"	l
ffff80000010c6db	kernel.asm	/^ffff80000010c6db:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff80000010c6df	kernel.asm	/^ffff80000010c6df:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%rbp)$/;"	l
ffff80000010c6e6	kernel.asm	/^ffff80000010c6e6:	0f 86 17 ff ff ff    	jbe    ffff80000010c603 <freevm+0xae>$/;"	l
ffff80000010c6ec	kernel.asm	/^ffff80000010c6ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c6f0	kernel.asm	/^ffff80000010c6f0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c6f3	kernel.asm	/^ffff80000010c6f3:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c6fa	kernel.asm	/^ffff80000010c6fa:	80 ff ff $/;"	l
ffff80000010c6fd	kernel.asm	/^ffff80000010c6fd:	ff d0                	callq  *%rax$/;"	l
ffff80000010c6ff	kernel.asm	/^ffff80000010c6ff:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010c703	kernel.asm	/^ffff80000010c703:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010c70a	kernel.asm	/^ffff80000010c70a:	0f 86 97 fe ff ff    	jbe    ffff80000010c5a7 <freevm+0x52>$/;"	l
ffff80000010c710	kernel.asm	/^ffff80000010c710:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c714	kernel.asm	/^ffff80000010c714:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c717	kernel.asm	/^ffff80000010c717:	48 b8 6c 40 10 00 00 	movabs $0xffff80000010406c,%rax$/;"	l
ffff80000010c71e	kernel.asm	/^ffff80000010c71e:	80 ff ff $/;"	l
ffff80000010c721	kernel.asm	/^ffff80000010c721:	ff d0                	callq  *%rax$/;"	l
ffff80000010c723	kernel.asm	/^ffff80000010c723:	90                   	nop$/;"	l
ffff80000010c724	kernel.asm	/^ffff80000010c724:	c9                   	leaveq $/;"	l
ffff80000010c725	kernel.asm	/^ffff80000010c725:	c3                   	retq   $/;"	l
ffff80000010c726	kernel.asm	/^ffff80000010c726 <clearpteu>:$/;"	l
ffff80000010c726	kernel.asm	/^ffff80000010c726:	55                   	push   %rbp$/;"	l
ffff80000010c727	kernel.asm	/^ffff80000010c727:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c72a	kernel.asm	/^ffff80000010c72a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010c72e	kernel.asm	/^ffff80000010c72e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c732	kernel.asm	/^ffff80000010c732:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010c736	kernel.asm	/^ffff80000010c736:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010c73a	kernel.asm	/^ffff80000010c73a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c73e	kernel.asm	/^ffff80000010c73e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c743	kernel.asm	/^ffff80000010c743:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c746	kernel.asm	/^ffff80000010c746:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c749	kernel.asm	/^ffff80000010c749:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c750	kernel.asm	/^ffff80000010c750:	80 ff ff $/;"	l
ffff80000010c753	kernel.asm	/^ffff80000010c753:	ff d0                	callq  *%rax$/;"	l
ffff80000010c755	kernel.asm	/^ffff80000010c755:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c759	kernel.asm	/^ffff80000010c759:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c75e	kernel.asm	/^ffff80000010c75e:	75 16                	jne    ffff80000010c776 <clearpteu+0x50>$/;"	l
ffff80000010c760	kernel.asm	/^ffff80000010c760:	48 bf 7c d2 10 00 00 	movabs $0xffff80000010d27c,%rdi$/;"	l
ffff80000010c767	kernel.asm	/^ffff80000010c767:	80 ff ff $/;"	l
ffff80000010c76a	kernel.asm	/^ffff80000010c76a:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c771	kernel.asm	/^ffff80000010c771:	80 ff ff $/;"	l
ffff80000010c774	kernel.asm	/^ffff80000010c774:	ff d0                	callq  *%rax$/;"	l
ffff80000010c776	kernel.asm	/^ffff80000010c776:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c77a	kernel.asm	/^ffff80000010c77a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c77d	kernel.asm	/^ffff80000010c77d:	48 83 e0 fb          	and    $0xfffffffffffffffb,%rax$/;"	l
ffff80000010c781	kernel.asm	/^ffff80000010c781:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c784	kernel.asm	/^ffff80000010c784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c788	kernel.asm	/^ffff80000010c788:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c78b	kernel.asm	/^ffff80000010c78b:	90                   	nop$/;"	l
ffff80000010c78c	kernel.asm	/^ffff80000010c78c:	c9                   	leaveq $/;"	l
ffff80000010c78d	kernel.asm	/^ffff80000010c78d:	c3                   	retq   $/;"	l
ffff80000010c78e	kernel.asm	/^ffff80000010c78e <copyuvm>:$/;"	l
ffff80000010c78e	kernel.asm	/^ffff80000010c78e:	55                   	push   %rbp$/;"	l
ffff80000010c78f	kernel.asm	/^ffff80000010c78f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c792	kernel.asm	/^ffff80000010c792:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c796	kernel.asm	/^ffff80000010c796:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010c79a	kernel.asm	/^ffff80000010c79a:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff80000010c79d	kernel.asm	/^ffff80000010c79d:	48 b8 b3 bb 10 00 00 	movabs $0xffff80000010bbb3,%rax$/;"	l
ffff80000010c7a4	kernel.asm	/^ffff80000010c7a4:	80 ff ff $/;"	l
ffff80000010c7a7	kernel.asm	/^ffff80000010c7a7:	ff d0                	callq  *%rax$/;"	l
ffff80000010c7a9	kernel.asm	/^ffff80000010c7a9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c7ad	kernel.asm	/^ffff80000010c7ad:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c7b2	kernel.asm	/^ffff80000010c7b2:	75 0a                	jne    ffff80000010c7be <copyuvm+0x30>$/;"	l
ffff80000010c7b4	kernel.asm	/^ffff80000010c7b4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c7b9	kernel.asm	/^ffff80000010c7b9:	e9 51 01 00 00       	jmpq   ffff80000010c90f <copyuvm+0x181>$/;"	l
ffff80000010c7be	kernel.asm	/^ffff80000010c7be:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c7c5	kernel.asm	/^ffff80000010c7c5:	00 $/;"	l
ffff80000010c7c6	kernel.asm	/^ffff80000010c7c6:	e9 15 01 00 00       	jmpq   ffff80000010c8e0 <copyuvm+0x152>$/;"	l
ffff80000010c7cb	kernel.asm	/^ffff80000010c7cb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c7cf	kernel.asm	/^ffff80000010c7cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c7d3	kernel.asm	/^ffff80000010c7d3:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c7d8	kernel.asm	/^ffff80000010c7d8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c7db	kernel.asm	/^ffff80000010c7db:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c7de	kernel.asm	/^ffff80000010c7de:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c7e5	kernel.asm	/^ffff80000010c7e5:	80 ff ff $/;"	l
ffff80000010c7e8	kernel.asm	/^ffff80000010c7e8:	ff d0                	callq  *%rax$/;"	l
ffff80000010c7ea	kernel.asm	/^ffff80000010c7ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c7ee	kernel.asm	/^ffff80000010c7ee:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c7f3	kernel.asm	/^ffff80000010c7f3:	75 16                	jne    ffff80000010c80b <copyuvm+0x7d>$/;"	l
ffff80000010c7f5	kernel.asm	/^ffff80000010c7f5:	48 bf 86 d2 10 00 00 	movabs $0xffff80000010d286,%rdi$/;"	l
ffff80000010c7fc	kernel.asm	/^ffff80000010c7fc:	80 ff ff $/;"	l
ffff80000010c7ff	kernel.asm	/^ffff80000010c7ff:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c806	kernel.asm	/^ffff80000010c806:	80 ff ff $/;"	l
ffff80000010c809	kernel.asm	/^ffff80000010c809:	ff d0                	callq  *%rax$/;"	l
ffff80000010c80b	kernel.asm	/^ffff80000010c80b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c80f	kernel.asm	/^ffff80000010c80f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c812	kernel.asm	/^ffff80000010c812:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c815	kernel.asm	/^ffff80000010c815:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c818	kernel.asm	/^ffff80000010c818:	75 16                	jne    ffff80000010c830 <copyuvm+0xa2>$/;"	l
ffff80000010c81a	kernel.asm	/^ffff80000010c81a:	48 bf a0 d2 10 00 00 	movabs $0xffff80000010d2a0,%rdi$/;"	l
ffff80000010c821	kernel.asm	/^ffff80000010c821:	80 ff ff $/;"	l
ffff80000010c824	kernel.asm	/^ffff80000010c824:	48 b8 6c 0b 10 00 00 	movabs $0xffff800000100b6c,%rax$/;"	l
ffff80000010c82b	kernel.asm	/^ffff80000010c82b:	80 ff ff $/;"	l
ffff80000010c82e	kernel.asm	/^ffff80000010c82e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c830	kernel.asm	/^ffff80000010c830:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c834	kernel.asm	/^ffff80000010c834:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c837	kernel.asm	/^ffff80000010c837:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c83d	kernel.asm	/^ffff80000010c83d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c841	kernel.asm	/^ffff80000010c841:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c845	kernel.asm	/^ffff80000010c845:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c848	kernel.asm	/^ffff80000010c848:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010c84d	kernel.asm	/^ffff80000010c84d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010c851	kernel.asm	/^ffff80000010c851:	48 b8 62 41 10 00 00 	movabs $0xffff800000104162,%rax$/;"	l
ffff80000010c858	kernel.asm	/^ffff80000010c858:	80 ff ff $/;"	l
ffff80000010c85b	kernel.asm	/^ffff80000010c85b:	ff d0                	callq  *%rax$/;"	l
ffff80000010c85d	kernel.asm	/^ffff80000010c85d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010c861	kernel.asm	/^ffff80000010c861:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)$/;"	l
ffff80000010c866	kernel.asm	/^ffff80000010c866:	0f 84 87 00 00 00    	je     ffff80000010c8f3 <copyuvm+0x165>$/;"	l
ffff80000010c86c	kernel.asm	/^ffff80000010c86c:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010c873	kernel.asm	/^ffff80000010c873:	80 ff ff $/;"	l
ffff80000010c876	kernel.asm	/^ffff80000010c876:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c87a	kernel.asm	/^ffff80000010c87a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c87d	kernel.asm	/^ffff80000010c87d:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff80000010c880	kernel.asm	/^ffff80000010c880:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c884	kernel.asm	/^ffff80000010c884:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c889	kernel.asm	/^ffff80000010c889:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c88c	kernel.asm	/^ffff80000010c88c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c88f	kernel.asm	/^ffff80000010c88f:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010c896	kernel.asm	/^ffff80000010c896:	80 ff ff $/;"	l
ffff80000010c899	kernel.asm	/^ffff80000010c899:	ff d0                	callq  *%rax$/;"	l
ffff80000010c89b	kernel.asm	/^ffff80000010c89b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c89f	kernel.asm	/^ffff80000010c89f:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010c8a1	kernel.asm	/^ffff80000010c8a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010c8a5	kernel.asm	/^ffff80000010c8a5:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c8ac	kernel.asm	/^ffff80000010c8ac:	80 00 00 $/;"	l
ffff80000010c8af	kernel.asm	/^ffff80000010c8af:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010c8b2	kernel.asm	/^ffff80000010c8b2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010c8b6	kernel.asm	/^ffff80000010c8b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c8ba	kernel.asm	/^ffff80000010c8ba:	41 89 c8             	mov    %ecx,%r8d$/;"	l
ffff80000010c8bd	kernel.asm	/^ffff80000010c8bd:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010c8c0	kernel.asm	/^ffff80000010c8c0:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c8c5	kernel.asm	/^ffff80000010c8c5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c8c8	kernel.asm	/^ffff80000010c8c8:	48 b8 5c c0 10 00 00 	movabs $0xffff80000010c05c,%rax$/;"	l
ffff80000010c8cf	kernel.asm	/^ffff80000010c8cf:	80 ff ff $/;"	l
ffff80000010c8d2	kernel.asm	/^ffff80000010c8d2:	ff d0                	callq  *%rax$/;"	l
ffff80000010c8d4	kernel.asm	/^ffff80000010c8d4:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010c8d6	kernel.asm	/^ffff80000010c8d6:	78 1e                	js     ffff80000010c8f6 <copyuvm+0x168>$/;"	l
ffff80000010c8d8	kernel.asm	/^ffff80000010c8d8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c8df	kernel.asm	/^ffff80000010c8df:	00 $/;"	l
ffff80000010c8e0	kernel.asm	/^ffff80000010c8e0:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff80000010c8e3	kernel.asm	/^ffff80000010c8e3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010c8e7	kernel.asm	/^ffff80000010c8e7:	0f 87 de fe ff ff    	ja     ffff80000010c7cb <copyuvm+0x3d>$/;"	l
ffff80000010c8ed	kernel.asm	/^ffff80000010c8ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c8f1	kernel.asm	/^ffff80000010c8f1:	eb 1c                	jmp    ffff80000010c90f <copyuvm+0x181>$/;"	l
ffff80000010c8f3	kernel.asm	/^ffff80000010c8f3:	90                   	nop$/;"	l
ffff80000010c8f4	kernel.asm	/^ffff80000010c8f4:	eb 01                	jmp    ffff80000010c8f7 <copyuvm+0x169>$/;"	l
ffff80000010c8f6	kernel.asm	/^ffff80000010c8f6:	90                   	nop$/;"	l
ffff80000010c8f7	kernel.asm	/^ffff80000010c8f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c8fb	kernel.asm	/^ffff80000010c8fb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c8fe	kernel.asm	/^ffff80000010c8fe:	48 b8 55 c5 10 00 00 	movabs $0xffff80000010c555,%rax$/;"	l
ffff80000010c905	kernel.asm	/^ffff80000010c905:	80 ff ff $/;"	l
ffff80000010c908	kernel.asm	/^ffff80000010c908:	ff d0                	callq  *%rax$/;"	l
ffff80000010c90a	kernel.asm	/^ffff80000010c90a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c90f	kernel.asm	/^ffff80000010c90f:	c9                   	leaveq $/;"	l
ffff80000010c910	kernel.asm	/^ffff80000010c910:	c3                   	retq   $/;"	l
ffff80000010c911	kernel.asm	/^ffff80000010c911 <uva2ka>:$/;"	l
ffff80000010c911	kernel.asm	/^ffff80000010c911:	55                   	push   %rbp$/;"	l
ffff80000010c912	kernel.asm	/^ffff80000010c912:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c915	kernel.asm	/^ffff80000010c915:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010c919	kernel.asm	/^ffff80000010c919:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c91d	kernel.asm	/^ffff80000010c91d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010c921	kernel.asm	/^ffff80000010c921:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010c925	kernel.asm	/^ffff80000010c925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c929	kernel.asm	/^ffff80000010c929:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c92e	kernel.asm	/^ffff80000010c92e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c931	kernel.asm	/^ffff80000010c931:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c934	kernel.asm	/^ffff80000010c934:	48 b8 0f be 10 00 00 	movabs $0xffff80000010be0f,%rax$/;"	l
ffff80000010c93b	kernel.asm	/^ffff80000010c93b:	80 ff ff $/;"	l
ffff80000010c93e	kernel.asm	/^ffff80000010c93e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c940	kernel.asm	/^ffff80000010c940:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c944	kernel.asm	/^ffff80000010c944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c948	kernel.asm	/^ffff80000010c948:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c94b	kernel.asm	/^ffff80000010c94b:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c94e	kernel.asm	/^ffff80000010c94e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c951	kernel.asm	/^ffff80000010c951:	75 07                	jne    ffff80000010c95a <uva2ka+0x49>$/;"	l
ffff80000010c953	kernel.asm	/^ffff80000010c953:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c958	kernel.asm	/^ffff80000010c958:	eb 33                	jmp    ffff80000010c98d <uva2ka+0x7c>$/;"	l
ffff80000010c95a	kernel.asm	/^ffff80000010c95a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c95e	kernel.asm	/^ffff80000010c95e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c961	kernel.asm	/^ffff80000010c961:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010c964	kernel.asm	/^ffff80000010c964:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c967	kernel.asm	/^ffff80000010c967:	75 07                	jne    ffff80000010c970 <uva2ka+0x5f>$/;"	l
ffff80000010c969	kernel.asm	/^ffff80000010c969:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c96e	kernel.asm	/^ffff80000010c96e:	eb 1d                	jmp    ffff80000010c98d <uva2ka+0x7c>$/;"	l
ffff80000010c970	kernel.asm	/^ffff80000010c970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c974	kernel.asm	/^ffff80000010c974:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c977	kernel.asm	/^ffff80000010c977:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c97d	kernel.asm	/^ffff80000010c97d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c980	kernel.asm	/^ffff80000010c980:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c987	kernel.asm	/^ffff80000010c987:	80 ff ff $/;"	l
ffff80000010c98a	kernel.asm	/^ffff80000010c98a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c98d	kernel.asm	/^ffff80000010c98d:	c9                   	leaveq $/;"	l
ffff80000010c98e	kernel.asm	/^ffff80000010c98e:	c3                   	retq   $/;"	l
ffff80000010c98f	kernel.asm	/^ffff80000010c98f <copyout>:$/;"	l
ffff80000010c98f	kernel.asm	/^ffff80000010c98f:	55                   	push   %rbp$/;"	l
ffff80000010c990	kernel.asm	/^ffff80000010c990:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c993	kernel.asm	/^ffff80000010c993:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c997	kernel.asm	/^ffff80000010c997:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c99b	kernel.asm	/^ffff80000010c99b:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff80000010c99e	kernel.asm	/^ffff80000010c99e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c9a2	kernel.asm	/^ffff80000010c9a2:	89 4d d0             	mov    %ecx,-0x30(%rbp)$/;"	l
ffff80000010c9a5	kernel.asm	/^ffff80000010c9a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c9a9	kernel.asm	/^ffff80000010c9a9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c9ad	kernel.asm	/^ffff80000010c9ad:	e9 ad 00 00 00       	jmpq   ffff80000010ca5f <copyout+0xd0>$/;"	l
ffff80000010c9b2	kernel.asm	/^ffff80000010c9b2:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010c9b5	kernel.asm	/^ffff80000010c9b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax$/;"	l
ffff80000010c9ba	kernel.asm	/^ffff80000010c9ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c9be	kernel.asm	/^ffff80000010c9be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010c9c2	kernel.asm	/^ffff80000010c9c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c9c6	kernel.asm	/^ffff80000010c9c6:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010c9c9	kernel.asm	/^ffff80000010c9c9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c9cc	kernel.asm	/^ffff80000010c9cc:	48 b8 11 c9 10 00 00 	movabs $0xffff80000010c911,%rax$/;"	l
ffff80000010c9d3	kernel.asm	/^ffff80000010c9d3:	80 ff ff $/;"	l
ffff80000010c9d6	kernel.asm	/^ffff80000010c9d6:	ff d0                	callq  *%rax$/;"	l
ffff80000010c9d8	kernel.asm	/^ffff80000010c9d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c9dc	kernel.asm	/^ffff80000010c9dc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff80000010c9e1	kernel.asm	/^ffff80000010c9e1:	75 0a                	jne    ffff80000010c9ed <copyout+0x5e>$/;"	l
ffff80000010c9e3	kernel.asm	/^ffff80000010c9e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010c9e8	kernel.asm	/^ffff80000010c9e8:	e9 81 00 00 00       	jmpq   ffff80000010ca6e <copyout+0xdf>$/;"	l
ffff80000010c9ed	kernel.asm	/^ffff80000010c9ed:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010c9f0	kernel.asm	/^ffff80000010c9f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010c9f4	kernel.asm	/^ffff80000010c9f4:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010c9f7	kernel.asm	/^ffff80000010c9f7:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010c9fa	kernel.asm	/^ffff80000010c9fa:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff80000010ca00	kernel.asm	/^ffff80000010ca00:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010ca04	kernel.asm	/^ffff80000010ca04:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010ca07	kernel.asm	/^ffff80000010ca07:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010ca0b	kernel.asm	/^ffff80000010ca0b:	73 07                	jae    ffff80000010ca14 <copyout+0x85>$/;"	l
ffff80000010ca0d	kernel.asm	/^ffff80000010ca0d:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010ca10	kernel.asm	/^ffff80000010ca10:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010ca14	kernel.asm	/^ffff80000010ca14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ca18	kernel.asm	/^ffff80000010ca18:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010ca1a	kernel.asm	/^ffff80000010ca1a:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010ca1d	kernel.asm	/^ffff80000010ca1d:	48 2b 45 e8          	sub    -0x18(%rbp),%rax$/;"	l
ffff80000010ca21	kernel.asm	/^ffff80000010ca21:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010ca24	kernel.asm	/^ffff80000010ca24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010ca28	kernel.asm	/^ffff80000010ca28:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010ca2c	kernel.asm	/^ffff80000010ca2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010ca30	kernel.asm	/^ffff80000010ca30:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010ca32	kernel.asm	/^ffff80000010ca32:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010ca35	kernel.asm	/^ffff80000010ca35:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff80000010ca38	kernel.asm	/^ffff80000010ca38:	48 b8 93 77 10 00 00 	movabs $0xffff800000107793,%rax$/;"	l
ffff80000010ca3f	kernel.asm	/^ffff80000010ca3f:	80 ff ff $/;"	l
ffff80000010ca42	kernel.asm	/^ffff80000010ca42:	ff d0                	callq  *%rax$/;"	l
ffff80000010ca44	kernel.asm	/^ffff80000010ca44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ca48	kernel.asm	/^ffff80000010ca48:	29 45 d0             	sub    %eax,-0x30(%rbp)$/;"	l
ffff80000010ca4b	kernel.asm	/^ffff80000010ca4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ca4f	kernel.asm	/^ffff80000010ca4f:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff80000010ca53	kernel.asm	/^ffff80000010ca53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ca57	kernel.asm	/^ffff80000010ca57:	05 00 10 00 00       	add    $0x1000,%eax$/;"	l
ffff80000010ca5c	kernel.asm	/^ffff80000010ca5c:	89 45 d4             	mov    %eax,-0x2c(%rbp)$/;"	l
ffff80000010ca5f	kernel.asm	/^ffff80000010ca5f:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)$/;"	l
ffff80000010ca63	kernel.asm	/^ffff80000010ca63:	0f 85 49 ff ff ff    	jne    ffff80000010c9b2 <copyout+0x23>$/;"	l
ffff80000010ca69	kernel.asm	/^ffff80000010ca69:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010ca6e	kernel.asm	/^ffff80000010ca6e:	c9                   	leaveq $/;"	l
ffff80000010ca6f	kernel.asm	/^ffff80000010ca6f:	c3                   	retq   $/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon6	typeref:struct:__anon6::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileioctl	file.c	/^fileioctl(struct file *f, int param, int value) {  $/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint64 filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	bootmain.c	/^  uint64 flags;$/;"	m	struct:mbheader	file:
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint32 flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	imshow.asm	/^      freep = prevp;$/;"	d
freep	imshow.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	prettyprint.asm	/^      freep = prevp;$/;"	d
freep	prettyprint.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pml4)$/;"	f
fs	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon6
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
g_8x16_font	vga.c	/^static unsigned char g_8x16_font[4096] =$/;"	v	file:
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	kernel.asm	/^  gdt = (struct segdesc*) local;$/;"	d
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt64_begin	entry.S	/^gdt64_begin:$/;"	l
gdt64_end	entry.S	/^gdt64_end:$/;"	l
gdt64_end	kernel.asm	/^gdt64_end:$/;"	l
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
gdtr64	entry.S	/^gdtr64:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, addr_t pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
getstackpcs	spinlock.c	/^getstackpcs(addr_t *ebp, addr_t pcs[])$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
header_addr	bootmain.c	/^  uint64 header_addr;$/;"	m	struct:mbheader	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
hlt	x86.h	/^hlt(void)$/;"	f
hoarequote	prettyprint.c	/^char *hoarequote = "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.\\n\\n- C.A.R. Hoare (British computer scientist, winner of the 1980 Turing Award)\\n\\n";$/;"	v
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	imshow.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	prettyprint.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	imshow.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	prettyprint.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon2
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	kernel.asm	/^  idt = (uint*) kalloc();$/;"	d
idt	trap.c	/^uint *idt;$/;"	v
idtinit	trap.c	/^void idtinit(void) {$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
ignore_sysret	entry.S	/^ignore_sysret:$/;"	l
ignore_sysret	kernel.asm	/^ignore_sysret:$/;"	l
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon9
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	divide.asm	/^int main(int argc, char *argv[]){$/;"	l
int	divide.asm	/^int str2int(char str_x[]){$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	imshow.asm	/^int main(int argc, char** argv) {$/;"	l
int	imshow.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	prettyprint.asm	/^int main(int argc, char** argv) {$/;"	l
int	prettyprint.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = P2V((volatile struct ioapic*)IOAPIC);$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf64-x86-64$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
kpdpt	kernel.asm	/^  kpdpt = (pde_t*) kalloc();$/;"	d
kpdpt	vm.c	/^static pde_t *kpdpt;$/;"	v	file:
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kpml4	kernel.asm	/^  kpml4 = (pde_t*) kalloc();$/;"	d
kpml4	vm.c	/^static pde_t *kpml4;$/;"	v	file:
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = P2V((addr_t)conf->lapicaddr_p);$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr_p	mp.h	/^  uint32 lapicaddr_p;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((addr_t)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(addr_t val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
load_addr	bootmain.c	/^  uint64 load_addr;$/;"	m	struct:mbheader	file:
load_end_addr	bootmain.c	/^  uint64 load_end_addr;$/;"	m	struct:mbheader	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
local	kernel.asm	/^  local = kalloc();$/;"	d
local	proc.h	/^  void *local;$/;"	m	struct:cpu
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	file.h	/^  struct sleeplock lock;$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon8	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	bootmain.c	/^  uint64 magic;$/;"	m	struct:mbheader	file:
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	imshow.c	/^int main(int argc, char** argv) {$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	prettyprint.c	/^int main(int argc, char** argv) {$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, addr_t size, addr_t pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mbheader	bootmain.c	/^struct mbheader {$/;"	s	file:
mboot_entry	entry.S	/^mboot_entry:$/;"	l
mboot_entry	kernel.asm	/^mboot_entry:$/;"	l
mboot_flags	entry.S	/^#define mboot_flags 0x00010000$/;"	d
mboot_header	entry.S	/^mboot_header:$/;"	l
mboot_magic	entry.S	/^#define mboot_magic 0x1badb002$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint64 memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mkgate	trap.c	/^mkgate(uint *idt, uint n, void *kva, uint pl, uint trap) {$/;"	f	file:
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(addr_t a, int len)$/;"	f	file:
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	imshow.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	imshow.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	prettyprint.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prettyprint.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	imshow.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	prettyprint.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	imshow.asm	/^    neg = 1;$/;"	d
neg	imshow.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	prettyprint.asm	/^    neg = 1;$/;"	d
neg	prettyprint.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
nega	divide.asm	/^		nega = 1;$/;"	d
nega	divide.asm	/^	nega = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	imshow.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	prettyprint.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->rax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	imshow.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prettyprint.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable_p	mp.h	/^  uint32 oemtable_p;               \/\/ OEM table pointer$/;"	m	struct:mpconf
off	elf.h	/^  uint64 off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
off_63_32	mmu.h	/^  uint32 off_63_32;$/;"	m	struct:gatedesc
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	imshow.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	prettyprint.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	imshow.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((addr_t)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	prettyprint.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	memlayout.h	/^static inline void *p2v(addr_t a) {$/;"	f
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint64 paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  addr_t pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pd	kernel.asm	/^          pd = (pde_t*)P2V(PTE_ADDR(pdp[j]));$/;"	d
pd	kernel.asm	/^    pd = (pde_t*)P2V(PTE_ADDR(*pdpe));$/;"	d
pde	kernel.asm	/^  pde = &pd[PDX(va)]; $/;"	d
pde_t	types.h	/^typedef addr_t pde_t;$/;"	t
pdp	kernel.asm	/^      pdp = (pdpe_t*)P2V(PTE_ADDR(pml4[i])); $/;"	d
pdp	kernel.asm	/^    pdp = (pdpe_t*)P2V(PTE_ADDR(*pml4e));  $/;"	d
pdpe	kernel.asm	/^  pdpe = &pdp[PDPX(va)];  $/;"	d
pdpe_t	types.h	/^typedef addr_t pdpe_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  addr_t phoff;$/;"	m	struct:elfhdr
physaddr	mp.h	/^  uint32 physaddr;               \/\/ 32-bit phys addr of MP config table$/;"	m	struct:mp
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pml4e	kernel.asm	/^  pml4e = &pml4[PMX(va)];$/;"	d
pml4e_t	types.h	/^typedef addr_t pml4e_t;$/;"	t
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printptr	console.c	/^printptr(addr_t x) {$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon1	typeref:struct:__anon1::proc	file:
proc	proc.h	/^struct proc {$/;"	s
proc	vm.c	/^__thread struct proc *proc;$/;"	v	typeref:struct:proc
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon1
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef addr_t pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon10	typeref:union:header::__anon10::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon9	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	imshow.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	prettyprint.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
r10	x86.h	/^   uint64 r10;$/;"	m	struct:trapframe
r11	proc.h	/^  addr_t r11;$/;"	m	struct:context
r11	x86.h	/^   uint64 r11;$/;"	m	struct:trapframe
r12	proc.h	/^  addr_t r12;$/;"	m	struct:context
r12	x86.h	/^   uint64 r12;$/;"	m	struct:trapframe
r13	proc.h	/^  addr_t r13;$/;"	m	struct:context
r13	x86.h	/^   uint64 r13;$/;"	m	struct:trapframe
r14	proc.h	/^  addr_t r14;$/;"	m	struct:context
r14	x86.h	/^   uint64 r14;$/;"	m	struct:trapframe
r15	proc.h	/^  addr_t r15;$/;"	m	struct:context
r15	x86.h	/^   uint64 r15;$/;"	m	struct:trapframe
r8	x86.h	/^   uint64 r8;$/;"	m	struct:trapframe
r9	x86.h	/^   uint64 r9;$/;"	m	struct:trapframe
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rax	x86.h	/^   uint64 rax;      $/;"	m	struct:trapframe
rbp	x86.h	/^   uint64 rbp;$/;"	m	struct:trapframe
rbx	proc.h	/^  addr_t rbx;$/;"	m	struct:context
rbx	x86.h	/^   uint64 rbx;$/;"	m	struct:trapframe
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
rcx	x86.h	/^   uint64 rcx;$/;"	m	struct:trapframe
rdi	x86.h	/^   uint64 rdi;$/;"	m	struct:trapframe
rdx	x86.h	/^   uint64 rdx;$/;"	m	struct:trapframe
re1	divide.asm	/^	re1 = x\/y;$/;"	d
re2	divide.asm	/^    re2 = (10*x\/y)%10;$/;"	d
re3	divide.asm	/^    re3 = (100*x\/y)%10;$/;"	d
read	file.h	/^  int (*read)(struct file*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
regs16_t	int32.h	/^} regs16_t;$/;"	t	typeref:struct:__anon5
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
rflags	x86.h	/^   uint64 rflags;  $/;"	m	struct:trapframe
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rip	x86.h	/^   uint64 rip;     $/;"	m	struct:trapframe
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsi	x86.h	/^   uint64 rsi;$/;"	m	struct:trapframe
rsp	x86.h	/^   uint64 rsp;     $/;"	m	struct:trapframe
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ 64-bit segment$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rsv2	mmu.h	/^  uint32 rsv2;$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = va_arg(ap, char*);$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = va_arg(ap, char*);$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = va_arg(ap, char*);$/;"	d
s	imshow.asm	/^          s = "(null)";$/;"	d
s	imshow.asm	/^        s = va_arg(ap, char*);$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = va_arg(ap, char*);$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	prettyprint.asm	/^          s = "(null)";$/;"	d
s	prettyprint.asm	/^        s = va_arg(ap, char*);$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = va_arg(ap, char*);$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon10	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = va_arg(ap, char*);$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = va_arg(ap, char*);$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = va_arg(ap, char*);$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setdefaultVGApalette	vga.c	/^void setdefaultVGApalette() {$/;"	f
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  addr_t shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
si	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon10	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~(sizeof(addr_t)-1);$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	imshow.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	prettyprint.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^   uint64 ss;      $/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	imshow.asm	/^        state = '%';$/;"	d
state	imshow.asm	/^      state = 0;$/;"	d
state	imshow.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	prettyprint.asm	/^        state = '%';$/;"	d
state	prettyprint.asm	/^      state = 0;$/;"	d
state	prettyprint.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	imshow.asm	/^static Header *freep;$/;"	l
static	imshow.asm	/^static Header base;$/;"	l
static	imshow.asm	/^static Header*$/;"	l
static	imshow.asm	/^static inline void$/;"	l
static	imshow.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static addr_t$/;"	l
static	kernel.asm	/^static char digits[] = "0123456789abcdef";$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline addr_t v2p(void *a) {$/;"	l
static	kernel.asm	/^static inline addr_t$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pde_t *kpdpt;$/;"	l
static	kernel.asm	/^static pde_t *kpml4;$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	prettyprint.asm	/^static Header *freep;$/;"	l
static	prettyprint.asm	/^static Header base;$/;"	l
static	prettyprint.asm	/^static Header*$/;"	l
static	prettyprint.asm	/^static inline void$/;"	l
static	prettyprint.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^    struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_ioctl	sysfile.c	/^sys_ioctl(void) $/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscall_entry	entry.S	/^syscall_entry:$/;"	l
syscall_trap	kernel.asm	/^syscall_trap:$/;"	l
syscall_trap	trapasm.S	/^syscall_trap:$/;"	l
syscall_trapret	kernel.asm	/^syscall_trapret:$/;"	l
syscall_trapret	trapasm.S	/^syscall_trapret:$/;"	l
syscallinit	vm.c	/^syscallinit(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  addr_t sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^   uint64 trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tss	kernel.asm	/^  tss = (uint*) (((char*) cpu->local) + 1024);$/;"	d
tss	kernel.asm	/^  tss = (uint*) (((char*) local) + 1024);$/;"	d
tss_set_rsp	vm.c	/^tss_set_rsp(uint *tss, uint n, uint64 rsp) {$/;"	f	file:
tvinit	trap.c	/^void tvinit(void) {$/;"	f
type	elf.h	/^  uint32 type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon3
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartearlyinit	uart.c	/^uartearlyinit(void)$/;"	f
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	imshow.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	prettyprint.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uint32	types.h	/^typedef unsigned int  uint32;$/;"	t
uint64	types.h	/^typedef unsigned long uint64;$/;"	t
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon7	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
v2p	memlayout.h	/^static inline addr_t v2p(void *a) {$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint64 vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	vectors.S	/^vector0:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
vga256_24bit	vga.c	/^int vga256_24bit[256] = { 0x000000, 0x0000a8, 0x00a800, 0x00a8a8, 0xa80000, 0xa800a8, 0xa85400, 0xa8a8a8, 0x545454, 0x5454fc, 0x54fc54, 0x54fcfc, 0xfc5454, 0xfc54fc, 0xfcfc54, 0xfcfcfc, 0x000000, 0x141414, 0x202020, 0x2c2c2c, 0x383838, 0x444444, 0x505050, 0x606060, 0x707070, 0x808080, 0x909090, 0xa0a0a0, 0xb4b4b4, 0xc8c8c8, 0xe0e0e0, 0xfcfcfc, 0x0000fc, 0x4000fc, 0x7c00fc, 0xbc00fc, 0xfc00fc, 0xfc00bc, 0xfc007c, 0xfc0040, 0xfc0000, 0xfc4000, 0xfc7c00, 0xfcbc00, 0xfcfc00, 0xbcfc00, 0x7cfc00, 0x40fc00, 0x00fc00, 0x00fc40, 0x00fc7c, 0x00fcbc, 0x00fcfc, 0x00bcfc, 0x007cfc, 0x0040fc, 0x7c7cfc, 0x9c7cfc, 0xbc7cfc, 0xdc7cfc, 0xfc7cfc, 0xfc7cdc, 0xfc7cbc, 0xfc7c9c, 0xfc7c7c, 0xfc9c7c, 0xfcbc7c, 0xfcdc7c, 0xfcfc7c, 0xdcfc7c, 0xbcfc7c, 0x9cfc7c, 0x7cfc7c, 0x7cfc9c, 0x7cfcbc, 0x7cfcdc, 0x7cfcfc, 0x7cdcfc, 0x7cbcfc, 0x7c9cfc, 0xb4b4fc, 0xc4b4fc, 0xd8b4fc, 0xe8b4fc, 0xfcb4fc, 0xfcb4e8, 0xfcb4d8, 0xfcb4c4, 0xfcb4b4, 0xfcc4b4, 0xfcd8b4, 0xfce8b4, 0xfcfcb4, 0xe8fcb4, 0xd8fcb4, 0xc4fcb4, 0xb4fcb4, 0xb4fcc4, 0xb4fcd8, 0xb4fce8, 0xb4fcfc, 0xb4e8fc, 0xb4d8fc, 0xb4c4fc, 0x000070, 0x1c0070, 0x380070, 0x540070, 0x700070, 0x700054, 0x700038, 0x70001c, 0x700000, 0x701c00, 0x703800, 0x705400, 0x707000, 0x547000, 0x387000, 0x1c7000, 0x007000, 0x00701c, 0x007038, 0x007054, 0x007070, 0x005470, 0x003870, 0x001c70, 0x383870, 0x443870, 0x543870, 0x603870, 0x703870, 0x703860, 0x703854, 0x703844, 0x703838, 0x704438, 0x705438, 0x706038, 0x707038, 0x607038, 0x547038, 0x447038, 0x387038, 0x387044, 0x387054, 0x387060, 0x387070, 0x386070, 0x385470, 0x384470, 0x505070, 0x585070, 0x605070, 0x685070, 0x705070, 0x705068, 0x705060, 0x705058, 0x705050, 0x705850, 0x706050, 0x706850, 0x707050, 0x687050, 0x607050, 0x587050, 0x507050, 0x507058, 0x507060, 0x507068, 0x507070, 0x506870, 0x506070, 0x505870, 0x000040, 0x100040, 0x200040, 0x300040, 0x400040, 0x400030, 0x400020, 0x400010, 0x400000, 0x401000, 0x402000, 0x403000, 0x404000, 0x304000, 0x204000, 0x104000, 0x004000, 0x004010, 0x004020, 0x004030, 0x004040, 0x003040, 0x002040, 0x001040, 0x202040, 0x282040, 0x302040, 0x382040, 0x402040, 0x402038, 0x402030, 0x402028, 0x402020, 0x402820, 0x403020, 0x403820, 0x404020, 0x384020, 0x304020, 0x284020, 0x204020, 0x204028, 0x204030, 0x204038, 0x204040, 0x203840, 0x203040, 0x202840, 0x2c2c40, 0x302c40, 0x342c40, 0x3c2c40, 0x402c40, 0x402c3c, 0x402c34, 0x402c30, 0x402c2c, 0x40302c, 0x40342c, 0x403c2c, 0x40402c, 0x3c402c, 0x34402c, 0x30402c, 0x2c402c, 0x2c4030, 0x2c4034, 0x2c403c, 0x2c4040, 0x2c3c40, 0x2c3440, 0x2c3040, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 };$/;"	v
vgaMode13	vga.c	/^void vgaMode13() {$/;"	f
vgaMode3	vga.c	/^void vgaMode3() {$/;"	f
vgaSetPalette	vga.c	/^void vgaSetPalette(int index, int r, int g, int b) {$/;"	f
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	imshow.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void entry32mp(void);$/;"	l
void	kernel.asm	/^void idtinit(void) {$/;"	l
void	kernel.asm	/^void setdefaultVGApalette() {$/;"	l
void	kernel.asm	/^void tvinit(void) {$/;"	l
void	kernel.asm	/^void vgaMode13() {$/;"	l
void	kernel.asm	/^void vgaMode3() {$/;"	l
void	kernel.asm	/^void vgaSetPalette(int index, int r, int g, int b) {$/;"	l
void	kernel.asm	/^void write3C0(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C2(unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C4(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C6(unsigned char value) {$/;"	l
void	kernel.asm	/^void write3CE(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3D4(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	prettyprint.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon9	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pml4, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct file*, char*, int);$/;"	m	struct:devsw
write3C0	vga.c	/^void write3C0(unsigned char index, unsigned char value) {$/;"	f
write3C2	vga.c	/^void write3C2(unsigned char value) {$/;"	f
write3C4	vga.c	/^void write3C4(unsigned char index, unsigned char value) {$/;"	f
write3C6	vga.c	/^void write3C6(unsigned char value) {$/;"	f
write3CE	vga.c	/^void write3CE(unsigned char index, unsigned char value) {$/;"	f
write3D4	vga.c	/^void write3D4(unsigned char index, unsigned char value) {$/;"	f
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrmsr	entry.S	/^wrmsr:$/;"	l
wrmsr	kernel.asm	/^wrmsr:$/;"	l
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	divide.asm	/^		x = - atoi(&(str_x[1]));$/;"	d
x	divide.asm	/^		x = atoi(str_x);$/;"	d
x	divide.asm	/^	x = x<0? -x:x;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	imshow.asm	/^    x = -xx;$/;"	d
x	imshow.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	prettyprint.asm	/^    x = -xx;$/;"	d
x	prettyprint.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, addr_t newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
y	divide.asm	/^	y = y<0? -y:y;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
