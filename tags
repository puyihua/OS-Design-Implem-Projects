!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
APP_SEG	mmu.h	101;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -gdwarf-2 -Wa,-divide -Iinclude $(XFLAGS)$/;"	m
ASSERT	lapic.c	26;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	141;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	29;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	30;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	201;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CALL_GATE	mmu.h	67;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Wall -MD -ggdb -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	146;"	d	file:
CMOS_RETURN	lapic.c	147;"	d	file:
CMOS_STATA	lapic.c	186;"	d	file:
CMOS_STATB	lapic.c	187;"	d	file:
CMOS_UIP	lapic.c	188;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	39;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	237;"	d	file:
CONV	lapic.c	244;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_OSXFSR	mmu.h	42;"	d
CR4_OSXMMEXCPT	mmu.h	43;"	d
CR4_PAE	mmu.h	41;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	142;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	193;"	d	file:
DEASSERT	lapic.c	27;"	d	file:
DEBUG	Makefile	/^DEBUG=TRUE$/;"	m
DELIVS	lapic.c	25;"	d	file:
DIRSIZ	fs.h	51;"	d
DISPLAY	file.h	40;"	d
DPL_USER	mmu.h	100;"	d
Disassembly	bad_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	divide.asm	/^Disassembly of section .text:$/;"	l
Disassembly	eager_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	imshow.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	lazy_mmap.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prettyprint.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	20;"	d	file:
EOI	lapic.c	18;"	d	file:
ERROR	lapic.c	39;"	d	file:
ESR	lapic.c	21;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon3
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	31;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	192;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	32;"	d	file:
ICRLO	lapic.c	22;"	d	file:
ID	lapic.c	15;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	23;"	d	file:
INPUT_BUF	console.c	192;"	d	file:
INT_ACTIVELOW	ioapic.c	23;"	d	file:
INT_DISABLED	ioapic.c	21;"	d	file:
INT_LEVEL	ioapic.c	22;"	d	file:
INT_LOGICAL	ioapic.c	24;"	d	file:
IOAPIC	ioapic.c	10;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
I_VALID	file.h	28;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	kernel.asm	/^#define KERNBASE 0xFFFF800000000000 \/\/ First kernel virtual address$/;"	d
KERNBASE	memlayout.h	7;"	d
KERNEL_CS	mmu.h	54;"	d
KERNLINK	kernel.asm	/^#define KERNLINK (KERNBASE+EXTMEM)  \/\/ Address where kernel is linked$/;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -m elf_x86_64 -nodefaultlibs$/;"	m
LEVEL	lapic.c	28;"	d	file:
LINT0	lapic.c	37;"	d	file:
LINT1	lapic.c	38;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	40;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	191;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	194;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
MSR_CSTAR	mmu.h	49;"	d
MSR_EFER	mmu.h	46;"	d
MSR_LSTAR	mmu.h	48;"	d
MSR_SFMASK	mmu.h	50;"	d
MSR_STAR	mmu.h	47;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	196;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	143;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	144;"	d
NSEGS	mmu.h	66;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
OPT	Makefile	/^OPT ?= -O0$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	21;"	d
P2V_WO	memlayout.h	24;"	d
PCINT	lapic.c	36;"	d	file:
PDPX	mmu.h	136;"	d
PDPXSHIFT	mmu.h	149;"	d
PDX	mmu.h	138;"	d
PDXSHIFT	mmu.h	148;"	d
PERIODIC	lapic.c	35;"	d	file:
PGROUNDDOWN	mmu.h	154;"	d
PGROUNDUP	mmu.h	153;"	d
PGSHIFT	mmu.h	146;"	d
PGSIZE	mmu.h	145;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PML4XSHIFT	mmu.h	150;"	d
PMX	mmu.h	134;"	d
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	162;"	d
PTE_ADDR	mmu.h	168;"	d
PTE_D	mmu.h	163;"	d
PTE_FLAGS	mmu.h	169;"	d
PTE_MBZ	mmu.h	165;"	d
PTE_P	mmu.h	157;"	d
PTE_PCD	mmu.h	161;"	d
PTE_PS	mmu.h	164;"	d
PTE_PWT	mmu.h	160;"	d
PTE_U	mmu.h	159;"	d
PTE_W	mmu.h	158;"	d
PTX	mmu.h	140;"	d
PTXSHIFT	mmu.h	147;"	d
PXMASK	mmu.h	151;"	d
QEMU	Makefile	/^ QEMU = qemu-system-x86_64$/;"	m
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -net none -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	12;"	d	file:
REG_TABLE	ioapic.c	14;"	d	file:
REG_VER	ioapic.c	13;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	190;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	12;"	d	file:
SEG	mmu.h	89;"	d
SEG16	mmu.h	94;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	58;"	d
SEG_KCPU	mmu.h	60;"	d
SEG_KDATA	mmu.h	59;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	63;"	d
SEG_UCODE	mmu.h	61;"	d
SEG_UDATA	mmu.h	62;"	d
SETCALLGATE	mmu.h	243;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	24;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	109;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	106;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	105;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	108;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	107;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	104;"	d
STS_CG16	mmu.h	115;"	d
STS_CG64	mmu.h	121;"	d
STS_IG16	mmu.h	117;"	d
STS_IG64	mmu.h	122;"	d
STS_LDT	mmu.h	113;"	d
STS_T16A	mmu.h	112;"	d
STS_T16B	mmu.h	114;"	d
STS_T64A	mmu.h	119;"	d
STS_T64B	mmu.h	120;"	d
STS_TG	mmu.h	116;"	d
STS_TG16	mmu.h	118;"	d
STS_TG64	mmu.h	123;"	d
SVR	lapic.c	19;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_ioctl	syscall.h	23;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	42;"	d	file:
TDCR	lapic.c	43;"	d	file:
TICR	lapic.c	41;"	d	file:
TIMER	lapic.c	33;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	17;"	d	file:
TRAP_GATE	mmu.h	171;"	d
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
USER_CS	mmu.h	53;"	d
USER_DS	mmu.h	55;"	d
V2P	memlayout.h	20;"	d
V2P_WO	memlayout.h	23;"	d
VER	lapic.c	16;"	d	file:
VGA	kernel.asm	/^#define VGA 0x3C0$/;"	d
VGA	vga.c	281;"	d	file:
X1	lapic.c	34;"	d	file:
XFLAGS	Makefile	/^XFLAGS = -m64 -DX64 -mcmodel=large -mtls-direct-seg-refs -mno-red-zone$/;"	m
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	195;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
__deadloop	entry.S	/^__deadloop:$/;"	l
__deadloop	kernel.asm	/^__deadloop:$/;"	l
_bad_mmap	bad_mmap.asm	/^_bad_mmap:     file format elf64-x86-64$/;"	l
_cat	cat.asm	/^_cat:     file format elf64-x86-64$/;"	l
_divide	divide.asm	/^_divide:     file format elf64-x86-64$/;"	l
_eager_mmap	eager_mmap.asm	/^_eager_mmap:     file format elf64-x86-64$/;"	l
_echo	echo.asm	/^_echo:     file format elf64-x86-64$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf64-x86-64$/;"	l
_grep	grep.asm	/^_grep:     file format elf64-x86-64$/;"	l
_imshow	imshow.asm	/^_imshow:     file format elf64-x86-64$/;"	l
_init	init.asm	/^_init:     file format elf64-x86-64$/;"	l
_kill	kill.asm	/^_kill:     file format elf64-x86-64$/;"	l
_lazy_mmap	lazy_mmap.asm	/^_lazy_mmap:     file format elf64-x86-64$/;"	l
_ln	ln.asm	/^_ln:     file format elf64-x86-64$/;"	l
_ls	ls.asm	/^_ls:     file format elf64-x86-64$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf64-x86-64$/;"	l
_prettyprint	prettyprint.asm	/^_prettyprint:     file format elf64-x86-64$/;"	l
_rm	rm.asm	/^_rm:     file format elf64-x86-64$/;"	l
_sh	sh.asm	/^_sh:     file format elf64-x86-64$/;"	l
_start	entry.S	/^_start:$/;"	l
_start	kernel.asm	/^_start:$/;"	l
_stressfs	stressfs.asm	/^_stressfs:     file format elf64-x86-64$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf64-x86-64$/;"	l
_wc	wc.asm	/^_wc:     file format elf64-x86-64$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf64-x86-64$/;"	l
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((addr_t)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a0	forktest.asm	/^  a0:	00 00 00 $/;"	l
a0	usertests.asm	/^      a0:	8b 00                	mov    (%rax),%eax$/;"	l
a0	zombie.asm	/^  a0:	84 c0                	test   %al,%al$/;"	l
a00	cat.asm	/^ a00:	48 b8 9c 05 00 00 00 	movabs $0x59c,%rax$/;"	l
a01	bad_mmap.asm	/^ a01:	00 00 00 $/;"	l
a01	init.asm	/^ a01:	eb 38                	jmp    a3b <printf+0x373>$/;"	l
a01	kill.asm	/^ a01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a01	ln.asm	/^ a01:	eb 0e                	jmp    a11 <free+0xcf>$/;"	l
a01	sh.asm	/^     a01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a01	usertests.asm	/^     a01:	00 00 00 $/;"	l
a01	zombie.asm	/^ a01:	77 07                	ja     a0a <morecore+0x1b>$/;"	l
a02	eager_mmap.asm	/^ a02:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a02	lazy_mmap.asm	/^ a02:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a02	ls.asm	/^     a02:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a02	mkdir.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a02	rm.asm	/^ a02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	echo.asm	/^ a03:	75 27                	jne    a2c <free+0x113>$/;"	l
a03	init.asm	/^ a03:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a03	ln.asm	/^ a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a03	zombie.asm	/^ a03:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a04	bad_mmap.asm	/^ a04:	ff d0                	callq  *%rax$/;"	l
a04	usertests.asm	/^     a04:	89 c7                	mov    %eax,%edi$/;"	l
a04	wc.asm	/^ a04:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a05	divide.asm	/^ a05:	89 d2                	mov    %edx,%edx$/;"	l
a05	echo.asm	/^ a05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a05	imshow.asm	/^ a05:	8b 30                	mov    (%rax),%esi$/;"	l
a05	kill.asm	/^ a05:	48 01 d0             	add    %rdx,%rax$/;"	l
a05	sh.asm	/^     a05:	48 89 c7             	mov    %rax,%rdi$/;"	l
a05	stressfs.asm	/^ a05:	89 d6                	mov    %edx,%esi$/;"	l
a06	bad_mmap.asm	/^ a06:	eb 38                	jmp    a40 <printf+0x373>$/;"	l
a06	grep.asm	/^ a06:	48 01 d0             	add    %rdx,%rax$/;"	l
a06	mkdir.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	prettyprint.asm	/^     a06:	00 00 00 $/;"	l
a06	rm.asm	/^ a06:	48 8b 00             	mov    (%rax),%rax$/;"	l
a06	usertests.asm	/^     a06:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a07	cat.asm	/^ a07:	00 00 00 $/;"	l
a07	divide.asm	/^ a07:	48 01 d0             	add    %rdx,%rax$/;"	l
a07	imshow.asm	/^ a07:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a07	ln.asm	/^ a07:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a07	stressfs.asm	/^ a07:	89 c7                	mov    %eax,%edi$/;"	l
a07	wc.asm	/^ a07:	73 23                	jae    a2c <printf+0x2e2>$/;"	l
a08	bad_mmap.asm	/^ a08:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a08	kill.asm	/^ a08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a08	sh.asm	/^     a08:	48 b8 b2 12 00 00 00 	movabs $0x12b2,%rax$/;"	l
a09	eager_mmap.asm	/^ a09:	8b 00                	mov    (%rax),%eax$/;"	l
a09	echo.asm	/^ a09:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a09	grep.asm	/^ a09:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a09	init.asm	/^ a09:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a09	lazy_mmap.asm	/^ a09:	8b 00                	mov    (%rax),%eax$/;"	l
a09	ls.asm	/^     a09:	00 00 00 $/;"	l
a09	mkdir.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	prettyprint.asm	/^     a09:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
a09	rm.asm	/^ a09:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a09	stressfs.asm	/^ a09:	48 b8 a5 05 00 00 00 	movabs $0x5a5,%rax$/;"	l
a09	wc.asm	/^ a09:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a0a	cat.asm	/^ a0a:	ff d0                	callq  *%rax$/;"	l
a0a	divide.asm	/^ a0a:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a0a	ln.asm	/^ a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0a	zombie.asm	/^ a0a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a0b	eager_mmap.asm	/^ a0b:	0f be d0             	movsbl %al,%edx$/;"	l
a0b	lazy_mmap.asm	/^ a0b:	0f be d0             	movsbl %al,%edx$/;"	l
a0b	usertests.asm	/^     a0b:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
a0c	cat.asm	/^ a0c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a0c	echo.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	grep.asm	/^ a0c:	0f be c0             	movsbl %al,%eax$/;"	l
a0c	kill.asm	/^ a0c:	75 27                	jne    a35 <free+0x113>$/;"	l
a0c	ls.asm	/^     a0c:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a0c	mkdir.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0c	rm.asm	/^ a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a0d	imshow.asm	/^ a0d:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
a0d	zombie.asm	/^ a0d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a0e	bad_mmap.asm	/^ a0e:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a0e	eager_mmap.asm	/^ a0e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a0e	init.asm	/^ a0e:	89 c7                	mov    %eax,%edi$/;"	l
a0e	kill.asm	/^ a0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a0e	lazy_mmap.asm	/^ a0e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a0e	ln.asm	/^ a0e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a0f	grep.asm	/^ a0f:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a0f	sh.asm	/^     a0f:	00 00 00 $/;"	l
a1	bad_mmap.asm	/^  a1:	ff d1                	callq  *%rcx$/;"	l
a1	cat.asm	/^  a1:	48 ba 99 06 00 00 00 	movabs $0x699,%rdx$/;"	l
a1	imshow.asm	/^  a1:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a1	ls.asm	/^      a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a1	prettyprint.asm	/^      a1:	ff d0                	callq  *%rax$/;"	l
a1	stressfs.asm	/^  a1:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a10	divide.asm	/^ a10:	83 c2 08             	add    $0x8,%edx$/;"	l
a10	echo.asm	/^ a10:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a10	init.asm	/^ a10:	48 b8 cb 05 00 00 00 	movabs $0x5cb,%rax$/;"	l
a10	mkdir.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	prettyprint.asm	/^     a10:	00 00 00 $/;"	l
a10	rm.asm	/^ a10:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a10	stressfs.asm	/^ a10:	00 00 00 $/;"	l
a10	wc.asm	/^ a10:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a10	zombie.asm	/^ a10:	89 c7                	mov    %eax,%edi$/;"	l
a11	ln.asm	/^ a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a12	imshow.asm	/^ a12:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
a12	kill.asm	/^ a12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a12	sh.asm	/^     a12:	ff d0                	callq  *%rax$/;"	l
a12	usertests.asm	/^     a12:	00 00 00 $/;"	l
a12	zombie.asm	/^ a12:	48 b8 f3 03 00 00 00 	movabs $0x3f3,%rax$/;"	l
a13	bad_mmap.asm	/^ a13:	89 c7                	mov    %eax,%edi$/;"	l
a13	cat.asm	/^ a13:	00 00 00 $/;"	l
a13	divide.asm	/^ a13:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a13	echo.asm	/^ a13:	01 c2                	add    %eax,%edx$/;"	l
a13	ls.asm	/^     a13:	00 00 00 $/;"	l
a13	mkdir.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	prettyprint.asm	/^     a13:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
a13	rm.asm	/^ a13:	eb 0e                	jmp    a23 <free+0xcf>$/;"	l
a13	stressfs.asm	/^ a13:	ff d0                	callq  *%rax$/;"	l
a14	eager_mmap.asm	/^ a14:	89 d6                	mov    %edx,%esi$/;"	l
a14	grep.asm	/^ a14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a14	lazy_mmap.asm	/^ a14:	89 d6                	mov    %edx,%esi$/;"	l
a14	sh.asm	/^     a14:	89 c0                	mov    %eax,%eax$/;"	l
a15	bad_mmap.asm	/^ a15:	48 b8 d0 05 00 00 00 	movabs $0x5d0,%rax$/;"	l
a15	echo.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	kill.asm	/^ a15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a15	ln.asm	/^ a15:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a15	mkdir.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	rm.asm	/^ a15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a15	stressfs.asm	/^ a15:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a15	usertests.asm	/^     a15:	ff d2                	callq  *%rdx$/;"	l
a16	cat.asm	/^ a16:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a16	eager_mmap.asm	/^ a16:	89 c7                	mov    %eax,%edi$/;"	l
a16	lazy_mmap.asm	/^ a16:	89 c7                	mov    %eax,%edi$/;"	l
a16	ls.asm	/^     a16:	e9 e6 02 00 00       	jmpq   d01 <printf+0x384>$/;"	l
a16	sh.asm	/^     a16:	48 01 d8             	add    %rbx,%rax$/;"	l
a16	wc.asm	/^ a16:	89 d2                	mov    %edx,%edx$/;"	l
a17	imshow.asm	/^ a17:	89 c7                	mov    %eax,%edi$/;"	l
a17	init.asm	/^ a17:	00 00 00 $/;"	l
a17	prettyprint.asm	/^     a17:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
a17	usertests.asm	/^     a17:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a18	eager_mmap.asm	/^ a18:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a18	lazy_mmap.asm	/^ a18:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a18	ln.asm	/^ a18:	89 c0                	mov    %eax,%eax$/;"	l
a18	wc.asm	/^ a18:	48 01 d0             	add    %rdx,%rax$/;"	l
a19	divide.asm	/^ a19:	eb 12                	jmp    a2d <printf+0x246>$/;"	l
a19	echo.asm	/^ a19:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a19	imshow.asm	/^ a19:	48 b8 64 07 00 00 00 	movabs $0x764,%rax$/;"	l
a19	kill.asm	/^ a19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a19	mkdir.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	rm.asm	/^ a19:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a19	sh.asm	/^     a19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
a19	zombie.asm	/^ a19:	00 00 00 $/;"	l
a1a	grep.asm	/^ a1a:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a1a	init.asm	/^ a1a:	ff d0                	callq  *%rax$/;"	l
a1a	ln.asm	/^ a1a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a1b	divide.asm	/^ a1b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a1b	ls.asm	/^     a1b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1b	wc.asm	/^ a1b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a1c	bad_mmap.asm	/^ a1c:	00 00 00 $/;"	l
a1c	echo.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	init.asm	/^ a1c:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a1c	kill.asm	/^ a1c:	01 c2                	add    %eax,%edx$/;"	l
a1c	mkdir.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	rm.asm	/^ a1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a1c	stressfs.asm	/^ a1c:	00 00 00 $/;"	l
a1c	zombie.asm	/^ a1c:	ff d0                	callq  *%rax$/;"	l
a1d	cat.asm	/^ a1d:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a1d	sh.asm	/^     a1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
a1e	kill.asm	/^ a1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a1e	ln.asm	/^ a1e:	48 89 c2             	mov    %rax,%rdx$/;"	l
a1e	prettyprint.asm	/^     a1e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
a1e	usertests.asm	/^     a1e:	00 00 00 $/;"	l
a1e	zombie.asm	/^ a1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a1f	bad_mmap.asm	/^ a1f:	ff d0                	callq  *%rax$/;"	l
a1f	eager_mmap.asm	/^ a1f:	00 00 00 $/;"	l
a1f	lazy_mmap.asm	/^ a1f:	00 00 00 $/;"	l
a1f	stressfs.asm	/^ a1f:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a2	kill.asm	/^  a2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
a2	mkdir.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	rm.asm	/^  a2:	48 b9 af 05 00 00 00 	movabs $0x5af,%rcx$/;"	l
a2	usertests.asm	/^      a2:	48 be a7 68 00 00 00 	movabs $0x68a7,%rsi$/;"	l
a2	zombie.asm	/^  a2:	75 dc                	jne    80 <strcpy+0x19>$/;"	l
a20	echo.asm	/^ a20:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a20	imshow.asm	/^ a20:	00 00 00 $/;"	l
a20	mkdir.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a20	rm.asm	/^ a20:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a21	bad_mmap.asm	/^ a21:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a21	grep.asm	/^ a21:	75 3c                	jne    a5f <printf+0x107>$/;"	l
a21	ln.asm	/^ a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a21	ls.asm	/^     a21:	48 63 d0             	movslq %eax,%rdx$/;"	l
a21	sh.asm	/^     a21:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a21	usertests.asm	/^     a21:	ff d0                	callq  *%rax$/;"	l
a21	wc.asm	/^ a21:	83 c2 08             	add    $0x8,%edx$/;"	l
a22	divide.asm	/^ a22:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a22	eager_mmap.asm	/^ a22:	ff d0                	callq  *%rax$/;"	l
a22	init.asm	/^ a22:	0f be d0             	movsbl %al,%edx$/;"	l
a22	kill.asm	/^ a22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a22	lazy_mmap.asm	/^ a22:	ff d0                	callq  *%rax$/;"	l
a22	zombie.asm	/^ a22:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a23	cat.asm	/^ a23:	48 63 d0             	movslq %eax,%rdx$/;"	l
a23	echo.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	grep.asm	/^ a23:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a23	imshow.asm	/^ a23:	ff d0                	callq  *%rax$/;"	l
a23	mkdir.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	rm.asm	/^ a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a23	usertests.asm	/^     a23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
a24	eager_mmap.asm	/^ a24:	eb 62                	jmp    a88 <printf+0x373>$/;"	l
a24	lazy_mmap.asm	/^ a24:	eb 62                	jmp    a88 <printf+0x373>$/;"	l
a24	ls.asm	/^     a24:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a24	wc.asm	/^ a24:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a25	imshow.asm	/^ a25:	e9 7a 01 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
a25	init.asm	/^ a25:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a25	kill.asm	/^ a25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a25	ln.asm	/^ a25:	48 01 d0             	add    %rdx,%rax$/;"	l
a25	prettyprint.asm	/^     a25:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
a25	sh.asm	/^     a25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
a26	cat.asm	/^ a26:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a26	divide.asm	/^ a26:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a26	eager_mmap.asm	/^ a26:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a26	lazy_mmap.asm	/^ a26:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a26	stressfs.asm	/^ a26:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a27	bad_mmap.asm	/^ a27:	0f be d0             	movsbl %al,%edx$/;"	l
a27	echo.asm	/^ a27:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a27	mkdir.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	rm.asm	/^ a27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a27	zombie.asm	/^ a27:	75 07                	jne    a30 <morecore+0x41>$/;"	l
a28	ln.asm	/^ a28:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a28	sh.asm	/^     a28:	48 89 c7             	mov    %rax,%rdi$/;"	l
a29	kill.asm	/^ a29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a29	zombie.asm	/^ a29:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a2a	bad_mmap.asm	/^ a2a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a2a	echo.asm	/^ a2a:	eb 0b                	jmp    a37 <free+0x11e>$/;"	l
a2a	grep.asm	/^ a2a:	75 0f                	jne    a3b <printf+0xe3>$/;"	l
a2a	imshow.asm	/^ a2a:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
a2a	mkdir.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	rm.asm	/^ a2a:	89 c0                	mov    %eax,%eax$/;"	l
a2a	usertests.asm	/^     a2a:	eb 72                	jmp    a9e <writetest1+0x105>$/;"	l
a2a	wc.asm	/^ a2a:	eb 12                	jmp    a3e <printf+0x2f4>$/;"	l
a2b	init.asm	/^ a2b:	89 d6                	mov    %edx,%esi$/;"	l
a2b	ls.asm	/^     a2b:	48 01 d0             	add    %rdx,%rax$/;"	l
a2b	sh.asm	/^     a2b:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
a2c	echo.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	grep.asm	/^ a2c:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a2c	kill.asm	/^ a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2c	ln.asm	/^ a2c:	75 27                	jne    a55 <free+0x113>$/;"	l
a2c	mkdir.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	prettyprint.asm	/^     a2c:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a2c	rm.asm	/^ a2c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
a2c	stressfs.asm	/^ a2c:	48 63 d0             	movslq %eax,%rdx$/;"	l
a2c	usertests.asm	/^     a2c:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
a2c	wc.asm	/^ a2c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a2d	cat.asm	/^ a2d:	48 01 d0             	add    %rdx,%rax$/;"	l
a2d	divide.asm	/^ a2d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a2d	eager_mmap.asm	/^ a2d:	75 21                	jne    a50 <printf+0x33b>$/;"	l
a2d	init.asm	/^ a2d:	89 c7                	mov    %eax,%edi$/;"	l
a2d	lazy_mmap.asm	/^ a2d:	75 21                	jne    a50 <printf+0x33b>$/;"	l
a2e	ln.asm	/^ a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a2e	ls.asm	/^     a2e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a2e	zombie.asm	/^ a2e:	eb 36                	jmp    a66 <morecore+0x77>$/;"	l
a2f	eager_mmap.asm	/^ a2f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a2f	init.asm	/^ a2f:	48 b8 cb 05 00 00 00 	movabs $0x5cb,%rax$/;"	l
a2f	lazy_mmap.asm	/^ a2f:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a2f	stressfs.asm	/^ a2f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a3	bad_mmap.asm	/^  a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a3	echo.asm	/^  a3:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
a3	forktest.asm	/^  a3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
a3	grep.asm	/^  a3:	48 83 c0 01          	add    $0x1,%rax$/;"	l
a3	prettyprint.asm	/^      a3:	48 be f8 11 00 00 00 	movabs $0x11f8,%rsi$/;"	l
a3	sh.asm	/^      a3:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
a3	wc.asm	/^  a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a30	bad_mmap.asm	/^ a30:	89 d6                	mov    %edx,%esi$/;"	l
a30	cat.asm	/^ a30:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a30	divide.asm	/^ a30:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a30	echo.asm	/^ a30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a30	kill.asm	/^ a30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a30	mkdir.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	rm.asm	/^ a30:	48 89 c2             	mov    %rax,%rdx$/;"	l
a30	zombie.asm	/^ a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a31	imshow.asm	/^ a31:	0f 85 a5 00 00 00    	jne    adc <printf+0x2ab>$/;"	l
a31	ls.asm	/^     a31:	0f be c0             	movsbl %al,%eax$/;"	l
a32	bad_mmap.asm	/^ a32:	89 c7                	mov    %eax,%edi$/;"	l
a32	ln.asm	/^ a32:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a32	sh.asm	/^     a32:	00 00 00 $/;"	l
a33	cat.asm	/^ a33:	84 c0                	test   %al,%al$/;"	l
a33	grep.asm	/^ a33:	00 00 00 $/;"	l
a33	kill.asm	/^ a33:	eb 0b                	jmp    a40 <free+0x11e>$/;"	l
a33	mkdir.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	prettyprint.asm	/^     a33:	00 00 00 $/;"	l
a33	rm.asm	/^ a33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a33	usertests.asm	/^     a33:	00 00 00 $/;"	l
a33	wc.asm	/^ a33:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a34	bad_mmap.asm	/^ a34:	48 b8 d0 05 00 00 00 	movabs $0x5d0,%rax$/;"	l
a34	echo.asm	/^ a34:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a34	ls.asm	/^     a34:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a34	zombie.asm	/^ a34:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a35	cat.asm	/^ a35:	0f 85 fc fc ff ff    	jne    737 <printf+0x9e>$/;"	l
a35	eager_mmap.asm	/^ a35:	0f be d0             	movsbl %al,%edx$/;"	l
a35	kill.asm	/^ a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a35	lazy_mmap.asm	/^ a35:	0f be d0             	movsbl %al,%edx$/;"	l
a35	ln.asm	/^ a35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a35	sh.asm	/^     a35:	ff d0                	callq  *%rax$/;"	l
a36	grep.asm	/^ a36:	e9 9a 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a36	init.asm	/^ a36:	00 00 00 $/;"	l
a36	prettyprint.asm	/^     a36:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)$/;"	l
a36	stressfs.asm	/^ a36:	48 01 d0             	add    %rdx,%rax$/;"	l
a36	usertests.asm	/^     a36:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a37	divide.asm	/^ a37:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a37	echo.asm	/^ a37:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
a37	imshow.asm	/^ a37:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a37	mkdir.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	rm.asm	/^ a37:	48 01 d0             	add    %rdx,%rax$/;"	l
a37	sh.asm	/^     a37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
a37	wc.asm	/^ a37:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a38	eager_mmap.asm	/^ a38:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a38	lazy_mmap.asm	/^ a38:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a38	zombie.asm	/^ a38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a39	init.asm	/^ a39:	ff d0                	callq  *%rax$/;"	l
a39	kill.asm	/^ a39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a39	ln.asm	/^ a39:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a39	ls.asm	/^     a39:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a39	stressfs.asm	/^ a39:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a39	usertests.asm	/^     a39:	89 10                	mov    %edx,(%rax)$/;"	l
a3a	mkdir.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3a	rm.asm	/^ a3a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a3b	bad_mmap.asm	/^ a3b:	00 00 00 $/;"	l
a3b	cat.asm	/^ a3b:	90                   	nop$/;"	l
a3b	grep.asm	/^ a3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a3b	init.asm	/^ a3b:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a3b	sh.asm	/^     a3b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
a3b	usertests.asm	/^     a3b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a3c	cat.asm	/^ a3c:	c9                   	leaveq $/;"	l
a3c	ln.asm	/^ a3c:	01 c2                	add    %eax,%edx$/;"	l
a3c	stressfs.asm	/^ a3c:	84 c0                	test   %al,%al$/;"	l
a3c	zombie.asm	/^ a3c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a3d	cat.asm	/^ a3d:	c3                   	retq   $/;"	l
a3d	imshow.asm	/^ a3d:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a3d	kill.asm	/^ a3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a3d	prettyprint.asm	/^     a3d:	00 00 00 $/;"	l
a3e	bad_mmap.asm	/^ a3e:	ff d0                	callq  *%rax$/;"	l
a3e	cat.asm	/^ a3e:	55                   	push   %rbp$/;"	l
a3e	divide.asm	/^ a3e:	00 $/;"	l
a3e	eager_mmap.asm	/^ a3e:	89 d6                	mov    %edx,%esi$/;"	l
a3e	echo.asm	/^ a3e:	00 00 00 $/;"	l
a3e	lazy_mmap.asm	/^ a3e:	89 d6                	mov    %edx,%esi$/;"	l
a3e	ln.asm	/^ a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a3e	mkdir.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	rm.asm	/^ a3e:	75 27                	jne    a67 <free+0x113>$/;"	l
a3e	stressfs.asm	/^ a3e:	0f 85 fc fc ff ff    	jne    740 <printf+0x9e>$/;"	l
a3e	usertests.asm	/^     a3e:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
a3e	wc.asm	/^ a3e:	8b 00                	mov    (%rax),%eax$/;"	l
a3f	cat.asm	/^ a3f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a3f	divide.asm	/^ a3f:	75 3e                	jne    a7f <printf+0x298>$/;"	l
a3f	ls.asm	/^     a3f:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a3f	sh.asm	/^     a3f:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
a3f	zombie.asm	/^ a3f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a4	eager_mmap.asm	/^  a4:	00 00 00 $/;"	l
a4	init.asm	/^  a4:	00 00 00 $/;"	l
a4	lazy_mmap.asm	/^  a4:	00 00 00 $/;"	l
a4	ln.asm	/^  a4:	00 00 00 $/;"	l
a4	zombie.asm	/^  a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	bad_mmap.asm	/^ a40:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a40	eager_mmap.asm	/^ a40:	89 c7                	mov    %eax,%edi$/;"	l
a40	imshow.asm	/^ a40:	73 23                	jae    a65 <printf+0x234>$/;"	l
a40	kill.asm	/^ a40:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
a40	lazy_mmap.asm	/^ a40:	89 c7                	mov    %eax,%edi$/;"	l
a40	mkdir.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	prettyprint.asm	/^     a40:	e9 e6 02 00 00       	jmpq   d2b <printf+0x384>$/;"	l
a40	rm.asm	/^ a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a40	wc.asm	/^ a40:	0f be d0             	movsbl %al,%edx$/;"	l
a41	divide.asm	/^ a41:	48 b8 2d 0f 00 00 00 	movabs $0xf2d,%rax$/;"	l
a41	echo.asm	/^ a41:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a41	grep.asm	/^ a41:	0f be d0             	movsbl %al,%edx$/;"	l
a42	cat.asm	/^ a42:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a42	eager_mmap.asm	/^ a42:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a42	imshow.asm	/^ a42:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a42	init.asm	/^ a42:	00 00 00 $/;"	l
a42	lazy_mmap.asm	/^ a42:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a42	ln.asm	/^ a42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a42	zombie.asm	/^ a42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a43	sh.asm	/^     a43:	48 ba ea 1d 00 00 00 	movabs $0x1dea,%rdx$/;"	l
a43	usertests.asm	/^     a43:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
a43	wc.asm	/^ a43:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	grep.asm	/^ a44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a44	mkdir.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	rm.asm	/^ a44:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
a44	stressfs.asm	/^ a44:	90                   	nop$/;"	l
a45	echo.asm	/^ a45:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a45	init.asm	/^ a45:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a45	ln.asm	/^ a45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a45	prettyprint.asm	/^     a45:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a45	stressfs.asm	/^ a45:	c9                   	leaveq $/;"	l
a46	cat.asm	/^ a46:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a46	ls.asm	/^     a46:	75 3c                	jne    a84 <printf+0x107>$/;"	l
a46	stressfs.asm	/^ a46:	c3                   	retq   $/;"	l
a46	zombie.asm	/^ a46:	48 83 c0 10          	add    $0x10,%rax$/;"	l
a47	bad_mmap.asm	/^ a47:	00 00 00 $/;"	l
a47	kill.asm	/^ a47:	00 00 00 $/;"	l
a47	mkdir.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	rm.asm	/^ a47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a47	stressfs.asm	/^ a47:	55                   	push   %rbp$/;"	l
a48	divide.asm	/^ a48:	00 00 00 $/;"	l
a48	echo.asm	/^ a48:	90                   	nop$/;"	l
a48	ls.asm	/^     a48:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a48	stressfs.asm	/^ a48:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a49	eager_mmap.asm	/^ a49:	00 00 00 $/;"	l
a49	echo.asm	/^ a49:	c9                   	leaveq $/;"	l
a49	imshow.asm	/^ a49:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a49	lazy_mmap.asm	/^ a49:	00 00 00 $/;"	l
a49	ln.asm	/^ a49:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a49	wc.asm	/^ a49:	89 d6                	mov    %edx,%esi$/;"	l
a4a	bad_mmap.asm	/^ a4a:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a4a	cat.asm	/^ a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a4a	echo.asm	/^ a4a:	c3                   	retq   $/;"	l
a4a	grep.asm	/^ a4a:	89 d6                	mov    %edx,%esi$/;"	l
a4a	kill.asm	/^ a4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a4a	sh.asm	/^     a4a:	00 00 00 $/;"	l
a4a	usertests.asm	/^     a4a:	00 00 00 $/;"	l
a4a	zombie.asm	/^ a4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
a4b	divide.asm	/^ a4b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a4b	echo.asm	/^ a4b:	55                   	push   %rbp$/;"	l
a4b	mkdir.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	prettyprint.asm	/^     a4b:	48 63 d0             	movslq %eax,%rdx$/;"	l
a4b	rm.asm	/^ a4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
a4b	stressfs.asm	/^ a4b:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a4b	wc.asm	/^ a4b:	89 c7                	mov    %eax,%edi$/;"	l
a4c	eager_mmap.asm	/^ a4c:	ff d0                	callq  *%rax$/;"	l
a4c	echo.asm	/^ a4c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a4c	grep.asm	/^ a4c:	89 c7                	mov    %eax,%edi$/;"	l
a4c	init.asm	/^ a4c:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a4c	lazy_mmap.asm	/^ a4c:	ff d0                	callq  *%rax$/;"	l
a4c	ln.asm	/^ a4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a4d	sh.asm	/^     a4d:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a4d	usertests.asm	/^     a4d:	89 c7                	mov    %eax,%edi$/;"	l
a4d	wc.asm	/^ a4d:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a4d	zombie.asm	/^ a4d:	48 b8 bd 08 00 00 00 	movabs $0x8bd,%rax$/;"	l
a4e	cat.asm	/^ a4e:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a4e	eager_mmap.asm	/^ a4e:	eb 38                	jmp    a88 <printf+0x373>$/;"	l
a4e	grep.asm	/^ a4e:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
a4e	kill.asm	/^ a4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a4e	lazy_mmap.asm	/^ a4e:	eb 38                	jmp    a88 <printf+0x373>$/;"	l
a4e	mkdir.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4e	prettyprint.asm	/^     a4e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a4e	rm.asm	/^ a4e:	01 c2                	add    %eax,%edx$/;"	l
a4f	echo.asm	/^ a4f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a4f	imshow.asm	/^ a4f:	89 d2                	mov    %edx,%edx$/;"	l
a4f	ls.asm	/^     a4f:	75 0f                	jne    a60 <printf+0xe3>$/;"	l
a4f	stressfs.asm	/^ a4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a4f	usertests.asm	/^     a4f:	48 b8 2a 60 00 00 00 	movabs $0x602a,%rax$/;"	l
a5	kill.asm	/^  a5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
a5	ls.asm	/^      a5:	48 89 c7             	mov    %rax,%rdi$/;"	l
a50	eager_mmap.asm	/^ a50:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a50	lazy_mmap.asm	/^ a50:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a50	ln.asm	/^ a50:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a50	mkdir.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	rm.asm	/^ a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a50	sh.asm	/^     a50:	48 89 c7             	mov    %rax,%rdi$/;"	l
a51	bad_mmap.asm	/^ a51:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a51	imshow.asm	/^ a51:	48 01 d0             	add    %rdx,%rax$/;"	l
a51	kill.asm	/^ a51:	90                   	nop$/;"	l
a51	ls.asm	/^     a51:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a52	cat.asm	/^ a52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a52	divide.asm	/^ a52:	eb 2b                	jmp    a7f <printf+0x298>$/;"	l
a52	init.asm	/^ a52:	48 63 d0             	movslq %eax,%rdx$/;"	l
a52	kill.asm	/^ a52:	c9                   	leaveq $/;"	l
a53	echo.asm	/^ a53:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a53	kill.asm	/^ a53:	c3                   	retq   $/;"	l
a53	ln.asm	/^ a53:	eb 0b                	jmp    a60 <free+0x11e>$/;"	l
a53	sh.asm	/^     a53:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
a53	stressfs.asm	/^ a53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a54	divide.asm	/^ a54:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a54	imshow.asm	/^ a54:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a54	kill.asm	/^ a54:	55                   	push   %rbp$/;"	l
a54	mkdir.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	rm.asm	/^ a54:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a54	wc.asm	/^ a54:	00 00 00 $/;"	l
a54	zombie.asm	/^ a54:	00 00 00 $/;"	l
a55	grep.asm	/^ a55:	00 00 00 $/;"	l
a55	init.asm	/^ a55:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a55	kill.asm	/^ a55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a55	ln.asm	/^ a55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a55	prettyprint.asm	/^     a55:	48 01 d0             	add    %rdx,%rax$/;"	l
a56	cat.asm	/^ a56:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
a56	eager_mmap.asm	/^ a56:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a56	echo.asm	/^ a56:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a56	lazy_mmap.asm	/^ a56:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a56	usertests.asm	/^     a56:	00 00 00 $/;"	l
a57	bad_mmap.asm	/^ a57:	48 63 d0             	movslq %eax,%rdx$/;"	l
a57	mkdir.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	rm.asm	/^ a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a57	stressfs.asm	/^ a57:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a57	wc.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a57	zombie.asm	/^ a57:	ff d0                	callq  *%rax$/;"	l
a58	grep.asm	/^ a58:	ff d0                	callq  *%rax$/;"	l
a58	kill.asm	/^ a58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a58	ls.asm	/^     a58:	00 00 00 $/;"	l
a58	prettyprint.asm	/^     a58:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a59	ln.asm	/^ a59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a59	usertests.asm	/^     a59:	ff d0                	callq  *%rax$/;"	l
a59	wc.asm	/^ a59:	eb 62                	jmp    abd <printf+0x373>$/;"	l
a59	zombie.asm	/^ a59:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a5a	bad_mmap.asm	/^ a5a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
a5a	grep.asm	/^ a5a:	e9 76 02 00 00       	jmpq   cd5 <printf+0x37d>$/;"	l
a5a	imshow.asm	/^ a5a:	83 c2 08             	add    $0x8,%edx$/;"	l
a5a	sh.asm	/^     a5a:	00 00 00 $/;"	l
a5b	divide.asm	/^ a5b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a5b	eager_mmap.asm	/^ a5b:	89 c7                	mov    %eax,%edi$/;"	l
a5b	lazy_mmap.asm	/^ a5b:	89 c7                	mov    %eax,%edi$/;"	l
a5b	ls.asm	/^     a5b:	e9 9a 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a5b	mkdir.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	prettyprint.asm	/^     a5b:	0f be c0             	movsbl %al,%eax$/;"	l
a5b	rm.asm	/^ a5b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
a5b	stressfs.asm	/^ a5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a5b	usertests.asm	/^     a5b:	3d 00 02 00 00       	cmp    $0x200,%eax$/;"	l
a5b	wc.asm	/^ a5b:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a5c	init.asm	/^ a5c:	48 01 d0             	add    %rdx,%rax$/;"	l
a5c	kill.asm	/^ a5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a5d	cat.asm	/^ a5d:	00 00 00 $/;"	l
a5d	eager_mmap.asm	/^ a5d:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a5d	echo.asm	/^ a5d:	77 07                	ja     a66 <morecore+0x1b>$/;"	l
a5d	imshow.asm	/^ a5d:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a5d	lazy_mmap.asm	/^ a5d:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a5d	ln.asm	/^ a5d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a5d	sh.asm	/^     a5d:	ff d0                	callq  *%rax$/;"	l
a5e	divide.asm	/^ a5e:	0f be d0             	movsbl %al,%edx$/;"	l
a5e	mkdir.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5e	prettyprint.asm	/^     a5e:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
a5e	rm.asm	/^ a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a5f	echo.asm	/^ a5f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a5f	grep.asm	/^ a5f:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a5f	init.asm	/^ a5f:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a5f	kill.asm	/^ a5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a5f	sh.asm	/^     a5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a5f	stressfs.asm	/^ a5f:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
a6	divide.asm	/^  a6:	00 00 00 $/;"	l
a6	echo.asm	/^  a6:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
a6	imshow.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a6	stressfs.asm	/^  a6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a60	cat.asm	/^ a60:	48 8b 00             	mov    (%rax),%rax$/;"	l
a60	ln.asm	/^ a60:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
a60	ls.asm	/^     a60:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a60	usertests.asm	/^     a60:	74 38                	je     a9a <writetest1+0x101>$/;"	l
a60	zombie.asm	/^ a60:	00 00 00 $/;"	l
a61	bad_mmap.asm	/^ a61:	48 01 d0             	add    %rdx,%rax$/;"	l
a61	divide.asm	/^ a61:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a62	init.asm	/^ a62:	84 c0                	test   %al,%al$/;"	l
a62	mkdir.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	rm.asm	/^ a62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a62	usertests.asm	/^     a62:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
a62	wc.asm	/^ a62:	75 21                	jne    a85 <printf+0x33b>$/;"	l
a63	cat.asm	/^ a63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a63	imshow.asm	/^ a63:	eb 12                	jmp    a77 <printf+0x246>$/;"	l
a63	prettyprint.asm	/^     a63:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
a63	sh.asm	/^     a63:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
a63	zombie.asm	/^ a63:	48 8b 00             	mov    (%rax),%rax$/;"	l
a64	bad_mmap.asm	/^ a64:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a64	eager_mmap.asm	/^ a64:	00 00 00 $/;"	l
a64	init.asm	/^ a64:	0f 85 fc fc ff ff    	jne    766 <printf+0x9e>$/;"	l
a64	lazy_mmap.asm	/^ a64:	00 00 00 $/;"	l
a64	wc.asm	/^ a64:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a65	imshow.asm	/^ a65:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
a65	mkdir.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a65	rm.asm	/^ a65:	eb 0b                	jmp    a72 <free+0x11e>$/;"	l
a66	echo.asm	/^ a66:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a66	grep.asm	/^ a66:	0f 85 69 02 00 00    	jne    cd5 <printf+0x37d>$/;"	l
a66	kill.asm	/^ a66:	77 07                	ja     a6f <morecore+0x1b>$/;"	l
a66	ls.asm	/^     a66:	0f be d0             	movsbl %al,%edx$/;"	l
a66	stressfs.asm	/^ a66:	00 00 00 $/;"	l
a66	zombie.asm	/^ a66:	c9                   	leaveq $/;"	l
a67	bad_mmap.asm	/^ a67:	84 c0                	test   %al,%al$/;"	l
a67	cat.asm	/^ a67:	eb 2f                	jmp    a98 <free+0x5a>$/;"	l
a67	divide.asm	/^ a67:	89 d6                	mov    %edx,%esi$/;"	l
a67	eager_mmap.asm	/^ a67:	ff d0                	callq  *%rax$/;"	l
a67	lazy_mmap.asm	/^ a67:	ff d0                	callq  *%rax$/;"	l
a67	ln.asm	/^ a67:	00 00 00 $/;"	l
a67	mkdir.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	rm.asm	/^ a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a67	sh.asm	/^     a67:	74 3d                	je     aa6 <parsecmd+0xb6>$/;"	l
a67	zombie.asm	/^ a67:	c3                   	retq   $/;"	l
a68	kill.asm	/^ a68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a68	zombie.asm	/^ a68:	55                   	push   %rbp$/;"	l
a69	bad_mmap.asm	/^ a69:	0f 85 fc fc ff ff    	jne    76b <printf+0x9e>$/;"	l
a69	cat.asm	/^ a69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a69	divide.asm	/^ a69:	89 c7                	mov    %eax,%edi$/;"	l
a69	eager_mmap.asm	/^ a69:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a69	echo.asm	/^ a69:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a69	lazy_mmap.asm	/^ a69:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a69	ls.asm	/^     a69:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a69	prettyprint.asm	/^     a69:	83 bd 40 ff ff ff 00 	cmpl   $0x0,-0xc0(%rbp)$/;"	l
a69	sh.asm	/^     a69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
a69	stressfs.asm	/^ a69:	48 8b 00             	mov    (%rax),%rax$/;"	l
a69	usertests.asm	/^     a69:	00 00 00 $/;"	l
a69	zombie.asm	/^ a69:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a6a	init.asm	/^ a6a:	90                   	nop$/;"	l
a6a	ln.asm	/^ a6a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a6a	wc.asm	/^ a6a:	0f be d0             	movsbl %al,%edx$/;"	l
a6b	divide.asm	/^ a6b:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
a6b	init.asm	/^ a6b:	c9                   	leaveq $/;"	l
a6b	mkdir.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6b	rm.asm	/^ a6b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
a6c	echo.asm	/^ a6c:	89 c7                	mov    %eax,%edi$/;"	l
a6c	grep.asm	/^ a6c:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a6c	imshow.asm	/^ a6c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
a6c	init.asm	/^ a6c:	c3                   	retq   $/;"	l
a6c	stressfs.asm	/^ a6c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a6c	usertests.asm	/^     a6c:	8b 00                	mov    (%rax),%eax$/;"	l
a6c	zombie.asm	/^ a6c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
a6d	cat.asm	/^ a6d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a6d	init.asm	/^ a6d:	55                   	push   %rbp$/;"	l
a6d	sh.asm	/^     a6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
a6d	wc.asm	/^ a6d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a6e	echo.asm	/^ a6e:	48 b8 4f 04 00 00 00 	movabs $0x44f,%rax$/;"	l
a6e	init.asm	/^ a6e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a6e	ln.asm	/^ a6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6e	usertests.asm	/^     a6e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
a6f	bad_mmap.asm	/^ a6f:	90                   	nop$/;"	l
a6f	eager_mmap.asm	/^ a6f:	0f be d0             	movsbl %al,%edx$/;"	l
a6f	kill.asm	/^ a6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a6f	lazy_mmap.asm	/^ a6f:	0f be d0             	movsbl %al,%edx$/;"	l
a6f	ls.asm	/^     a6f:	89 d6                	mov    %edx,%esi$/;"	l
a6f	mkdir.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a6f	rm.asm	/^ a6f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a7	bad_mmap.asm	/^  a7:	48 89 c2             	mov    %rax,%rdx$/;"	l
a7	eager_mmap.asm	/^  a7:	ff d1                	callq  *%rcx$/;"	l
a7	grep.asm	/^  a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a7	init.asm	/^  a7:	ff d0                	callq  *%rax$/;"	l
a7	lazy_mmap.asm	/^  a7:	ff d1                	callq  *%rcx$/;"	l
a7	ln.asm	/^  a7:	41 ff d0             	callq  *%r8$/;"	l
a7	sh.asm	/^      a7:	48 89 c2             	mov    %rax,%rdx$/;"	l
a7	wc.asm	/^  a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a70	bad_mmap.asm	/^ a70:	c9                   	leaveq $/;"	l
a70	cat.asm	/^ a70:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a70	imshow.asm	/^ a70:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
a70	prettyprint.asm	/^     a70:	75 3c                	jne    aae <printf+0x107>$/;"	l
a70	sh.asm	/^     a70:	48 be eb 1d 00 00 00 	movabs $0x1deb,%rsi$/;"	l
a70	stressfs.asm	/^ a70:	eb 2f                	jmp    aa1 <free+0x5a>$/;"	l
a70	zombie.asm	/^ a70:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
a71	bad_mmap.asm	/^ a71:	c3                   	retq   $/;"	l
a71	init.asm	/^ a71:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a71	ln.asm	/^ a71:	90                   	nop$/;"	l
a71	ls.asm	/^     a71:	89 c7                	mov    %eax,%edi$/;"	l
a71	usertests.asm	/^     a71:	48 be 72 6b 00 00 00 	movabs $0x6b72,%rsi$/;"	l
a72	bad_mmap.asm	/^ a72:	55                   	push   %rbp$/;"	l
a72	divide.asm	/^ a72:	00 00 00 $/;"	l
a72	eager_mmap.asm	/^ a72:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a72	kill.asm	/^ a72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a72	lazy_mmap.asm	/^ a72:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a72	ln.asm	/^ a72:	c9                   	leaveq $/;"	l
a72	mkdir.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	prettyprint.asm	/^     a72:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
a72	rm.asm	/^ a72:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
a72	stressfs.asm	/^ a72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a73	bad_mmap.asm	/^ a73:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a73	grep.asm	/^ a73:	75 65                	jne    ada <printf+0x182>$/;"	l
a73	ln.asm	/^ a73:	c3                   	retq   $/;"	l
a73	ls.asm	/^     a73:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
a73	wc.asm	/^ a73:	89 d6                	mov    %edx,%esi$/;"	l
a73	zombie.asm	/^ a73:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
a74	cat.asm	/^ a74:	77 17                	ja     a8d <free+0x4f>$/;"	l
a74	ln.asm	/^ a74:	55                   	push   %rbp$/;"	l
a75	divide.asm	/^ a75:	ff d0                	callq  *%rax$/;"	l
a75	echo.asm	/^ a75:	00 00 00 $/;"	l
a75	grep.asm	/^ a75:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a75	init.asm	/^ a75:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a75	kill.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a75	ln.asm	/^ a75:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a75	wc.asm	/^ a75:	89 c7                	mov    %eax,%edi$/;"	l
a76	bad_mmap.asm	/^ a76:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
a76	cat.asm	/^ a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a76	stressfs.asm	/^ a76:	48 8b 00             	mov    (%rax),%rax$/;"	l
a76	zombie.asm	/^ a76:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
a77	divide.asm	/^ a77:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
a77	imshow.asm	/^ a77:	48 8b 00             	mov    (%rax),%rax$/;"	l
a77	kill.asm	/^ a77:	48 b8 58 04 00 00 00 	movabs $0x458,%rax$/;"	l
a77	sh.asm	/^     a77:	00 00 00 $/;"	l
a77	wc.asm	/^ a77:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a78	eager_mmap.asm	/^ a78:	89 d6                	mov    %edx,%esi$/;"	l
a78	echo.asm	/^ a78:	ff d0                	callq  *%rax$/;"	l
a78	lazy_mmap.asm	/^ a78:	89 d6                	mov    %edx,%esi$/;"	l
a78	ln.asm	/^ a78:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a78	usertests.asm	/^     a78:	00 00 00 $/;"	l
a79	init.asm	/^ a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a79	mkdir.asm	/^ a79:	00 00 00 $/;"	l
a79	prettyprint.asm	/^     a79:	75 0f                	jne    a8a <printf+0xe3>$/;"	l
a79	rm.asm	/^ a79:	00 00 00 $/;"	l
a79	stressfs.asm	/^ a79:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	bad_mmap.asm	/^ a7a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
a7a	cat.asm	/^ a7a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a7a	eager_mmap.asm	/^ a7a:	89 c7                	mov    %eax,%edi$/;"	l
a7a	echo.asm	/^ a7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a7a	imshow.asm	/^ a7a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a7a	lazy_mmap.asm	/^ a7a:	89 c7                	mov    %eax,%edi$/;"	l
a7a	ls.asm	/^     a7a:	00 00 00 $/;"	l
a7a	sh.asm	/^     a7a:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
a7a	zombie.asm	/^ a7a:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
a7b	grep.asm	/^ a7b:	83 f8 30             	cmp    $0x30,%eax$/;"	l
a7b	prettyprint.asm	/^     a7b:	c7 85 40 ff ff ff 25 	movl   $0x25,-0xc0(%rbp)$/;"	l
a7b	usertests.asm	/^     a7b:	89 c7                	mov    %eax,%edi$/;"	l
a7c	eager_mmap.asm	/^ a7c:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a7c	lazy_mmap.asm	/^ a7c:	48 b8 18 06 00 00 00 	movabs $0x618,%rax$/;"	l
a7c	ln.asm	/^ a7c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a7c	mkdir.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7c	rm.asm	/^ a7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
a7d	init.asm	/^ a7d:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a7d	ls.asm	/^     a7d:	ff d0                	callq  *%rax$/;"	l
a7d	stressfs.asm	/^ a7d:	77 17                	ja     a96 <free+0x4f>$/;"	l
a7d	usertests.asm	/^     a7d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7e	bad_mmap.asm	/^ a7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
a7e	cat.asm	/^ a7e:	77 2f                	ja     aaf <free+0x71>$/;"	l
a7e	divide.asm	/^ a7e:	01 $/;"	l
a7e	echo.asm	/^ a7e:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a7e	grep.asm	/^ a7e:	73 23                	jae    aa3 <printf+0x14b>$/;"	l
a7e	kill.asm	/^ a7e:	00 00 00 $/;"	l
a7e	wc.asm	/^ a7e:	00 00 00 $/;"	l
a7e	zombie.asm	/^ a7e:	83 c0 01             	add    $0x1,%eax$/;"	l
a7f	divide.asm	/^ a7f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a7f	ln.asm	/^ a7f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a7f	ls.asm	/^     a7f:	e9 76 02 00 00       	jmpq   cfa <printf+0x37d>$/;"	l
a7f	sh.asm	/^     a7f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a7f	stressfs.asm	/^ a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a8	cat.asm	/^  a8:	00 00 00 $/;"	l
a8	forktest.asm	/^  a8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8	kill.asm	/^  a8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
a8	ls.asm	/^      a8:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
a8	zombie.asm	/^  a8:	c9                   	leaveq $/;"	l
a80	cat.asm	/^ a80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a80	grep.asm	/^ a80:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
a80	mkdir.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a80	rm.asm	/^ a80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
a81	imshow.asm	/^ a81:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
a81	init.asm	/^ a81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a81	kill.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	wc.asm	/^ a81:	ff d0                	callq  *%rax$/;"	l
a81	zombie.asm	/^ a81:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
a82	bad_mmap.asm	/^ a82:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
a82	prettyprint.asm	/^     a82:	00 00 00 $/;"	l
a82	usertests.asm	/^     a82:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
a83	eager_mmap.asm	/^ a83:	00 00 00 $/;"	l
a83	echo.asm	/^ a83:	75 07                	jne    a8c <morecore+0x41>$/;"	l
a83	kill.asm	/^ a83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a83	lazy_mmap.asm	/^ a83:	00 00 00 $/;"	l
a83	mkdir.asm	/^ a83:	90                   	nop$/;"	l
a83	rm.asm	/^ a83:	90                   	nop$/;"	l
a83	stressfs.asm	/^ a83:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a83	wc.asm	/^ a83:	eb 38                	jmp    abd <printf+0x373>$/;"	l
a84	cat.asm	/^ a84:	48 8b 00             	mov    (%rax),%rax$/;"	l
a84	ls.asm	/^     a84:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
a84	mkdir.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	rm.asm	/^ a84:	c9                   	leaveq $/;"	l
a84	sh.asm	/^     a84:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
a84	zombie.asm	/^ a84:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
a85	echo.asm	/^ a85:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a85	init.asm	/^ a85:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
a85	mkdir.asm	/^ a85:	c3                   	retq   $/;"	l
a85	prettyprint.asm	/^     a85:	e9 9a 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
a85	rm.asm	/^ a85:	c3                   	retq   $/;"	l
a85	wc.asm	/^ a85:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a86	bad_mmap.asm	/^ a86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a86	divide.asm	/^ a86:	0f b6 00             	movzbl (%rax),%eax$/;"	l
a86	eager_mmap.asm	/^ a86:	ff d0                	callq  *%rax$/;"	l
a86	lazy_mmap.asm	/^ a86:	ff d0                	callq  *%rax$/;"	l
a86	ln.asm	/^ a86:	77 07                	ja     a8f <morecore+0x1b>$/;"	l
a86	mkdir.asm	/^ a86:	55                   	push   %rbp$/;"	l
a86	rm.asm	/^ a86:	55                   	push   %rbp$/;"	l
a87	cat.asm	/^ a87:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a87	grep.asm	/^ a87:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a87	kill.asm	/^ a87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
a87	mkdir.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	rm.asm	/^ a87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
a87	stressfs.asm	/^ a87:	77 2f                	ja     ab8 <free+0x71>$/;"	l
a88	eager_mmap.asm	/^ a88:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a88	imshow.asm	/^ a88:	00 $/;"	l
a88	lazy_mmap.asm	/^ a88:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
a88	ln.asm	/^ a88:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a89	divide.asm	/^ a89:	84 c0                	test   %al,%al$/;"	l
a89	imshow.asm	/^ a89:	75 3e                	jne    ac9 <printf+0x298>$/;"	l
a89	stressfs.asm	/^ a89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a89	usertests.asm	/^     a89:	00 00 00 $/;"	l
a8a	bad_mmap.asm	/^ a8a:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
a8a	echo.asm	/^ a8a:	eb 36                	jmp    ac2 <morecore+0x77>$/;"	l
a8a	mkdir.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8a	prettyprint.asm	/^     a8a:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a8a	rm.asm	/^ a8a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
a8b	cat.asm	/^ a8b:	77 22                	ja     aaf <free+0x71>$/;"	l
a8b	divide.asm	/^ a8b:	75 c7                	jne    a54 <printf+0x26d>$/;"	l
a8b	imshow.asm	/^ a8b:	48 b8 b8 0f 00 00 00 	movabs $0xfb8,%rax$/;"	l
a8b	ls.asm	/^     a8b:	0f 85 69 02 00 00    	jne    cfa <printf+0x37d>$/;"	l
a8b	sh.asm	/^     a8b:	00 00 00 $/;"	l
a8b	wc.asm	/^ a8b:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
a8b	zombie.asm	/^ a8b:	00 00 00 $/;"	l
a8c	echo.asm	/^ a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8c	init.asm	/^ a8c:	00 00 00 $/;"	l
a8c	kill.asm	/^ a8c:	75 07                	jne    a95 <morecore+0x41>$/;"	l
a8c	usertests.asm	/^     a8c:	ff d1                	callq  *%rcx$/;"	l
a8d	cat.asm	/^ a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a8d	divide.asm	/^ a8d:	e9 c8 00 00 00       	jmpq   b5a <printf+0x373>$/;"	l
a8d	grep.asm	/^ a8d:	89 d2                	mov    %edx,%edx$/;"	l
a8d	stressfs.asm	/^ a8d:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8e	kill.asm	/^ a8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a8e	mkdir.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	rm.asm	/^ a8e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
a8e	sh.asm	/^     a8e:	ff d1                	callq  *%rcx$/;"	l
a8e	usertests.asm	/^     a8e:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
a8e	zombie.asm	/^ a8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8f	eager_mmap.asm	/^ a8f:	00 00 00 $/;"	l
a8f	grep.asm	/^ a8f:	48 01 d0             	add    %rdx,%rax$/;"	l
a8f	init.asm	/^ a8f:	48 8b 00             	mov    (%rax),%rax$/;"	l
a8f	lazy_mmap.asm	/^ a8f:	00 00 00 $/;"	l
a8f	ln.asm	/^ a8f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
a9	divide.asm	/^  a9:	ff d0                	callq  *%rax$/;"	l
a9	eager_mmap.asm	/^  a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9	echo.asm	/^  a9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
a9	init.asm	/^  a9:	85 c0                	test   %eax,%eax$/;"	l
a9	lazy_mmap.asm	/^  a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9	mkdir.asm	/^  a9:	00 00 00 $/;"	l
a9	rm.asm	/^  a9:	00 00 00 $/;"	l
a9	usertests.asm	/^      a9:	00 00 00 $/;"	l
a9	zombie.asm	/^  a9:	c3                   	retq   $/;"	l
a90	echo.asm	/^ a90:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a90	prettyprint.asm	/^     a90:	0f be d0             	movsbl %al,%edx$/;"	l
a90	sh.asm	/^     a90:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
a90	stressfs.asm	/^ a90:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
a90	wc.asm	/^ a90:	89 c7                	mov    %eax,%edi$/;"	l
a91	bad_mmap.asm	/^ a91:	00 00 00 $/;"	l
a91	cat.asm	/^ a91:	48 8b 00             	mov    (%rax),%rax$/;"	l
a91	ls.asm	/^     a91:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
a91	mkdir.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	rm.asm	/^ a91:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
a91	zombie.asm	/^ a91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a92	divide.asm	/^ a92:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
a92	eager_mmap.asm	/^ a92:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a92	grep.asm	/^ a92:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
a92	imshow.asm	/^ a92:	00 00 00 $/;"	l
a92	init.asm	/^ a92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a92	lazy_mmap.asm	/^ a92:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
a92	ln.asm	/^ a92:	c1 e0 04             	shl    $0x4,%eax$/;"	l
a92	wc.asm	/^ a92:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
a93	kill.asm	/^ a93:	eb 36                	jmp    acb <morecore+0x77>$/;"	l
a93	prettyprint.asm	/^     a93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
a94	bad_mmap.asm	/^ a94:	48 8b 00             	mov    (%rax),%rax$/;"	l
a94	cat.asm	/^ a94:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a94	echo.asm	/^ a94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a94	stressfs.asm	/^ a94:	77 22                	ja     ab8 <free+0x71>$/;"	l
a95	imshow.asm	/^ a95:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
a95	kill.asm	/^ a95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a95	ln.asm	/^ a95:	89 c7                	mov    %eax,%edi$/;"	l
a95	usertests.asm	/^     a95:	00 00 00 $/;"	l
a95	zombie.asm	/^ a95:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
a96	init.asm	/^ a96:	eb 2f                	jmp    ac7 <free+0x5a>$/;"	l
a96	stressfs.asm	/^ a96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a97	bad_mmap.asm	/^ a97:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a97	ln.asm	/^ a97:	48 b8 78 04 00 00 00 	movabs $0x478,%rax$/;"	l
a97	sh.asm	/^     a97:	00 00 00 $/;"	l
a98	cat.asm	/^ a98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a98	echo.asm	/^ a98:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
a98	grep.asm	/^ a98:	83 c2 08             	add    $0x8,%edx$/;"	l
a98	init.asm	/^ a98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a98	ls.asm	/^     a98:	75 65                	jne    aff <printf+0x182>$/;"	l
a98	mkdir.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	rm.asm	/^ a98:	77 07                	ja     aa1 <morecore+0x1b>$/;"	l
a98	usertests.asm	/^     a98:	ff d0                	callq  *%rax$/;"	l
a99	divide.asm	/^ a99:	75 5d                	jne    af8 <printf+0x311>$/;"	l
a99	eager_mmap.asm	/^ a99:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a99	kill.asm	/^ a99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
a99	lazy_mmap.asm	/^ a99:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
a99	prettyprint.asm	/^     a99:	89 d6                	mov    %edx,%esi$/;"	l
a99	wc.asm	/^ a99:	00 00 00 $/;"	l
a9a	ls.asm	/^     a9a:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9a	mkdir.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	rm.asm	/^ a9a:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
a9a	sh.asm	/^     a9a:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
a9a	stressfs.asm	/^ a9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
a9a	usertests.asm	/^     a9a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
a9a	zombie.asm	/^ a9a:	75 4a                	jne    ae6 <malloc+0x7e>$/;"	l
a9b	bad_mmap.asm	/^ a9b:	eb 2f                	jmp    acc <free+0x5a>$/;"	l
a9b	divide.asm	/^ a9b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
a9b	echo.asm	/^ a9b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
a9b	grep.asm	/^ a9b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
a9b	prettyprint.asm	/^     a9b:	89 c7                	mov    %eax,%edi$/;"	l
a9c	cat.asm	/^ a9c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a9c	imshow.asm	/^ a9c:	eb 2b                	jmp    ac9 <printf+0x298>$/;"	l
a9c	init.asm	/^ a9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
a9c	wc.asm	/^ a9c:	ff d0                	callq  *%rax$/;"	l
a9c	zombie.asm	/^ a9c:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
a9d	bad_mmap.asm	/^ a9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
a9d	kill.asm	/^ a9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9d	prettyprint.asm	/^     a9d:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
a9d	stressfs.asm	/^ a9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
a9e	echo.asm	/^ a9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
a9e	imshow.asm	/^ a9e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
a9e	ln.asm	/^ a9e:	00 00 00 $/;"	l
a9e	usertests.asm	/^     a9e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
a9e	wc.asm	/^ a9e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
a9f	eager_mmap.asm	/^ a9f:	48 63 d0             	movslq %eax,%rdx$/;"	l
a9f	init.asm	/^ a9f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
a9f	lazy_mmap.asm	/^ a9f:	48 63 d0             	movslq %eax,%rdx$/;"	l
aa	bad_mmap.asm	/^  aa:	48 be fb 0d 00 00 00 	movabs $0xdfb,%rsi$/;"	l
aa	ln.asm	/^  aa:	48 b8 ce 03 00 00 00 	movabs $0x3ce,%rax$/;"	l
aa	prettyprint.asm	/^      aa:	00 00 00 $/;"	l
aa	sh.asm	/^      aa:	48 be 6f 1d 00 00 00 	movabs $0x1d6f,%rsi$/;"	l
aa	wc.asm	/^  aa:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
aa	zombie.asm	/^  aa:	55                   	push   %rbp$/;"	l
aa0	cat.asm	/^ aa0:	76 c7                	jbe    a69 <free+0x2b>$/;"	l
aa0	ls.asm	/^     aa0:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	bad_mmap.asm	/^ aa1:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa1	divide.asm	/^ aa1:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aa1	grep.asm	/^ aa1:	eb 12                	jmp    ab5 <printf+0x15d>$/;"	l
aa1	kill.asm	/^ aa1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
aa1	ln.asm	/^ aa1:	ff d0                	callq  *%rax$/;"	l
aa1	mkdir.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	rm.asm	/^ aa1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
aa1	sh.asm	/^     aa1:	00 00 00 $/;"	l
aa1	stressfs.asm	/^ aa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa1	usertests.asm	/^     aa1:	3d 8b 00 00 00       	cmp    $0x8b,%eax$/;"	l
aa2	cat.asm	/^ aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aa2	eager_mmap.asm	/^ aa2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
aa2	echo.asm	/^ aa2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aa2	lazy_mmap.asm	/^ aa2:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
aa3	grep.asm	/^ aa3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
aa3	init.asm	/^ aa3:	77 17                	ja     abc <free+0x4f>$/;"	l
aa3	ln.asm	/^ aa3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aa3	ls.asm	/^     aa3:	73 23                	jae    ac8 <printf+0x14b>$/;"	l
aa3	zombie.asm	/^ aa3:	00 00 00 $/;"	l
aa4	bad_mmap.asm	/^ aa4:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa4	divide.asm	/^ aa4:	73 23                	jae    ac9 <printf+0x2e2>$/;"	l
aa4	kill.asm	/^ aa4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
aa4	mkdir.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	prettyprint.asm	/^     aa4:	00 00 00 $/;"	l
aa4	rm.asm	/^ aa4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
aa4	sh.asm	/^     aa4:	ff d0                	callq  *%rax$/;"	l
aa4	wc.asm	/^ aa4:	0f be d0             	movsbl %al,%edx$/;"	l
aa5	imshow.asm	/^ aa5:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aa5	init.asm	/^ aa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa5	ls.asm	/^     aa5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa5	stressfs.asm	/^ aa5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa6	cat.asm	/^ aa6:	48 8b 00             	mov    (%rax),%rax$/;"	l
aa6	divide.asm	/^ aa6:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
aa6	echo.asm	/^ aa6:	48 89 c7             	mov    %rax,%rdi$/;"	l
aa6	sh.asm	/^     aa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
aa6	usertests.asm	/^     aa6:	76 84                	jbe    a2c <writetest1+0x93>$/;"	l
aa6	zombie.asm	/^ aa6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aa7	kill.asm	/^ aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aa7	ln.asm	/^ aa7:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
aa7	mkdir.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	prettyprint.asm	/^     aa7:	ff d0                	callq  *%rax$/;"	l
aa7	rm.asm	/^ aa7:	89 c7                	mov    %eax,%edi$/;"	l
aa7	wc.asm	/^ aa7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aa8	bad_mmap.asm	/^ aa8:	77 17                	ja     ac1 <free+0x4f>$/;"	l
aa8	imshow.asm	/^ aa8:	0f be d0             	movsbl %al,%edx$/;"	l
aa8	usertests.asm	/^     aa8:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
aa9	cat.asm	/^ aa9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
aa9	eager_mmap.asm	/^ aa9:	48 01 d0             	add    %rdx,%rax$/;"	l
aa9	echo.asm	/^ aa9:	48 b8 19 09 00 00 00 	movabs $0x919,%rax$/;"	l
aa9	init.asm	/^ aa9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aa9	lazy_mmap.asm	/^ aa9:	48 01 d0             	add    %rdx,%rax$/;"	l
aa9	mkdir.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	prettyprint.asm	/^     aa9:	e9 76 02 00 00       	jmpq   d24 <printf+0x37d>$/;"	l
aa9	rm.asm	/^ aa9:	48 b8 8a 04 00 00 00 	movabs $0x48a,%rax$/;"	l
aa9	stressfs.asm	/^ aa9:	76 c7                	jbe    a72 <free+0x2b>$/;"	l
aaa	bad_mmap.asm	/^ aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aaa	grep.asm	/^ aaa:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
aaa	sh.asm	/^     aaa:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaa	zombie.asm	/^ aaa:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
aab	imshow.asm	/^ aab:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
aab	kill.asm	/^ aab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
aab	stressfs.asm	/^ aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aab	usertests.asm	/^     aab:	89 c7                	mov    %eax,%edi$/;"	l
aac	eager_mmap.asm	/^ aac:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aac	lazy_mmap.asm	/^ aac:	0f b6 00             	movzbl (%rax),%eax$/;"	l
aac	ln.asm	/^ aac:	75 07                	jne    ab5 <morecore+0x41>$/;"	l
aac	ls.asm	/^     aac:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	cat.asm	/^ aad:	76 ba                	jbe    a69 <free+0x2b>$/;"	l
aad	divide.asm	/^ aad:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
aad	init.asm	/^ aad:	77 2f                	ja     ade <free+0x71>$/;"	l
aad	sh.asm	/^     aad:	48 b8 95 10 00 00 00 	movabs $0x1095,%rax$/;"	l
aad	usertests.asm	/^     aad:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
aad	wc.asm	/^ aad:	89 d6                	mov    %edx,%esi$/;"	l
aae	bad_mmap.asm	/^ aae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aae	grep.asm	/^ aae:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
aae	ln.asm	/^ aae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
aae	prettyprint.asm	/^     aae:	83 bd 40 ff ff ff 25 	cmpl   $0x25,-0xc0(%rbp)$/;"	l
aaf	cat.asm	/^ aaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aaf	eager_mmap.asm	/^ aaf:	84 c0                	test   %al,%al$/;"	l
aaf	init.asm	/^ aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aaf	kill.asm	/^ aaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
aaf	lazy_mmap.asm	/^ aaf:	84 c0                	test   %al,%al$/;"	l
aaf	stressfs.asm	/^ aaf:	48 8b 00             	mov    (%rax),%rax$/;"	l
aaf	wc.asm	/^ aaf:	89 c7                	mov    %eax,%edi$/;"	l
ab	cat.asm	/^  ab:	ff d2                	callq  *%rdx$/;"	l
ab	divide.asm	/^  ab:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ab	grep.asm	/^  ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab	imshow.asm	/^  ab:	48 ba 31 08 00 00 00 	movabs $0x831,%rdx$/;"	l
ab	init.asm	/^  ab:	79 3b                	jns    e8 <main+0xe8>$/;"	l
ab	stressfs.asm	/^  ab:	48 b9 a2 06 00 00 00 	movabs $0x6a2,%rcx$/;"	l
ab	zombie.asm	/^  ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ab0	echo.asm	/^ ab0:	00 00 00 $/;"	l
ab0	mkdir.asm	/^ ab0:	00 00 00 $/;"	l
ab0	rm.asm	/^ ab0:	00 00 00 $/;"	l
ab1	eager_mmap.asm	/^ ab1:	0f 85 fc fc ff ff    	jne    7b3 <printf+0x9e>$/;"	l
ab1	imshow.asm	/^ ab1:	89 d6                	mov    %edx,%esi$/;"	l
ab1	lazy_mmap.asm	/^ ab1:	0f 85 fc fc ff ff    	jne    7b3 <printf+0x9e>$/;"	l
ab1	wc.asm	/^ ab1:	48 b8 4d 06 00 00 00 	movabs $0x64d,%rax$/;"	l
ab1	zombie.asm	/^ ab1:	00 00 00 $/;"	l
ab2	bad_mmap.asm	/^ ab2:	77 2f                	ja     ae3 <free+0x71>$/;"	l
ab2	kill.asm	/^ ab2:	48 b8 22 09 00 00 00 	movabs $0x922,%rax$/;"	l
ab2	ls.asm	/^     ab2:	89 d2                	mov    %edx,%edx$/;"	l
ab2	stressfs.asm	/^ ab2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ab3	cat.asm	/^ ab3:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ab3	divide.asm	/^ ab3:	89 d2                	mov    %edx,%edx$/;"	l
ab3	echo.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	imshow.asm	/^ ab3:	89 c7                	mov    %eax,%edi$/;"	l
ab3	init.asm	/^ ab3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ab3	ln.asm	/^ ab3:	eb 36                	jmp    aeb <morecore+0x77>$/;"	l
ab3	mkdir.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab3	rm.asm	/^ ab3:	ff d0                	callq  *%rax$/;"	l
ab4	bad_mmap.asm	/^ ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab4	ls.asm	/^     ab4:	48 01 d0             	add    %rdx,%rax$/;"	l
ab4	sh.asm	/^     ab4:	00 00 00 $/;"	l
ab4	usertests.asm	/^     ab4:	00 00 00 $/;"	l
ab4	zombie.asm	/^ ab4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ab5	divide.asm	/^ ab5:	48 01 d0             	add    %rdx,%rax$/;"	l
ab5	echo.asm	/^ ab5:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ab5	grep.asm	/^ ab5:	8b 30                	mov    (%rax),%esi$/;"	l
ab5	imshow.asm	/^ ab5:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
ab5	ln.asm	/^ ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ab5	mkdir.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab5	prettyprint.asm	/^     ab5:	0f 85 69 02 00 00    	jne    d24 <printf+0x37d>$/;"	l
ab5	rm.asm	/^ ab5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ab6	cat.asm	/^ ab6:	89 c0                	mov    %eax,%eax$/;"	l
ab6	init.asm	/^ ab6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ab6	stressfs.asm	/^ ab6:	76 ba                	jbe    a72 <free+0x2b>$/;"	l
ab7	eager_mmap.asm	/^ ab7:	90                   	nop$/;"	l
ab7	grep.asm	/^ ab7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ab7	lazy_mmap.asm	/^ ab7:	90                   	nop$/;"	l
ab7	ls.asm	/^     ab7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab7	sh.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab7	usertests.asm	/^     ab7:	ff d0                	callq  *%rax$/;"	l
ab8	bad_mmap.asm	/^ ab8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ab8	cat.asm	/^ ab8:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ab8	divide.asm	/^ ab8:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ab8	eager_mmap.asm	/^ ab8:	c9                   	leaveq $/;"	l
ab8	lazy_mmap.asm	/^ ab8:	c9                   	leaveq $/;"	l
ab8	stressfs.asm	/^ ab8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ab8	wc.asm	/^ ab8:	00 00 00 $/;"	l
ab8	zombie.asm	/^ ab8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ab9	eager_mmap.asm	/^ ab9:	c3                   	retq   $/;"	l
ab9	kill.asm	/^ ab9:	00 00 00 $/;"	l
ab9	lazy_mmap.asm	/^ ab9:	c3                   	retq   $/;"	l
ab9	ln.asm	/^ ab9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ab9	mkdir.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	rm.asm	/^ ab9:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ab9	sh.asm	/^     ab9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ab9	usertests.asm	/^     ab9:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
aba	eager_mmap.asm	/^ aba:	55                   	push   %rbp$/;"	l
aba	init.asm	/^ aba:	77 22                	ja     ade <free+0x71>$/;"	l
aba	lazy_mmap.asm	/^ aba:	55                   	push   %rbp$/;"	l
abb	bad_mmap.asm	/^ abb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
abb	eager_mmap.asm	/^ abb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
abb	lazy_mmap.asm	/^ abb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
abb	prettyprint.asm	/^     abb:	83 bd 3c ff ff ff 64 	cmpl   $0x64,-0xc4(%rbp)$/;"	l
abb	wc.asm	/^ abb:	ff d0                	callq  *%rax$/;"	l
abb	zombie.asm	/^ abb:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
abc	cat.asm	/^ abc:	48 89 c2             	mov    %rax,%rdx$/;"	l
abc	echo.asm	/^ abc:	00 00 00 $/;"	l
abc	imshow.asm	/^ abc:	00 00 00 $/;"	l
abc	init.asm	/^ abc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
abc	kill.asm	/^ abc:	ff d0                	callq  *%rax$/;"	l
abc	stressfs.asm	/^ abc:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
abd	grep.asm	/^ abd:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
abd	ln.asm	/^ abd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abd	ls.asm	/^     abd:	83 c2 08             	add    $0x8,%edx$/;"	l
abd	sh.asm	/^     abd:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
abd	wc.asm	/^ abd:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
abe	divide.asm	/^ abe:	83 c2 08             	add    $0x8,%edx$/;"	l
abe	eager_mmap.asm	/^ abe:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
abe	kill.asm	/^ abe:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
abe	lazy_mmap.asm	/^ abe:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
abe	mkdir.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	rm.asm	/^ abe:	75 07                	jne    ac7 <morecore+0x41>$/;"	l
abe	usertests.asm	/^     abe:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
abf	bad_mmap.asm	/^ abf:	77 22                	ja     ae3 <free+0x71>$/;"	l
abf	cat.asm	/^ abf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
abf	echo.asm	/^ abf:	48 8b 00             	mov    (%rax),%rax$/;"	l
abf	imshow.asm	/^ abf:	ff d0                	callq  *%rax$/;"	l
abf	stressfs.asm	/^ abf:	89 c0                	mov    %eax,%eax$/;"	l
ac	echo.asm	/^  ac:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ac	kill.asm	/^  ac:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ac	mkdir.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	rm.asm	/^  ac:	ff d1                	callq  *%rcx$/;"	l
ac	usertests.asm	/^      ac:	89 c7                	mov    %eax,%edi$/;"	l
ac0	init.asm	/^ ac0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac0	ls.asm	/^     ac0:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac0	mkdir.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac0	rm.asm	/^ ac0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ac1	bad_mmap.asm	/^ ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac1	divide.asm	/^ ac1:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ac1	imshow.asm	/^ ac1:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
ac1	ln.asm	/^ ac1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ac1	sh.asm	/^     ac1:	5b                   	pop    %rbx$/;"	l
ac1	stressfs.asm	/^ ac1:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ac2	eager_mmap.asm	/^ ac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ac2	echo.asm	/^ ac2:	c9                   	leaveq $/;"	l
ac2	grep.asm	/^ ac2:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ac2	lazy_mmap.asm	/^ ac2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ac2	prettyprint.asm	/^     ac2:	75 65                	jne    b29 <printf+0x182>$/;"	l
ac2	sh.asm	/^     ac2:	5d                   	pop    %rbp$/;"	l
ac2	zombie.asm	/^ ac2:	00 00 00 $/;"	l
ac3	cat.asm	/^ ac3:	48 01 c2             	add    %rax,%rdx$/;"	l
ac3	echo.asm	/^ ac3:	c3                   	retq   $/;"	l
ac3	init.asm	/^ ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ac3	sh.asm	/^     ac3:	c3                   	retq   $/;"	l
ac4	echo.asm	/^ ac4:	55                   	push   %rbp$/;"	l
ac4	ln.asm	/^ ac4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ac4	prettyprint.asm	/^     ac4:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ac4	sh.asm	/^     ac4:	55                   	push   %rbp$/;"	l
ac4	wc.asm	/^ ac4:	00 00 00 $/;"	l
ac5	bad_mmap.asm	/^ ac5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac5	echo.asm	/^ ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	kill.asm	/^ ac5:	00 00 00 $/;"	l
ac5	mkdir.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	rm.asm	/^ ac5:	eb 36                	jmp    afd <morecore+0x77>$/;"	l
ac5	sh.asm	/^     ac5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ac5	stressfs.asm	/^ ac5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ac5	usertests.asm	/^     ac5:	00 00 00 $/;"	l
ac5	zombie.asm	/^ ac5:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ac6	cat.asm	/^ ac6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac6	eager_mmap.asm	/^ ac6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ac6	lazy_mmap.asm	/^ ac6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ac6	ls.asm	/^     ac6:	eb 12                	jmp    ada <printf+0x15d>$/;"	l
ac7	divide.asm	/^ ac7:	eb 12                	jmp    adb <printf+0x2f4>$/;"	l
ac7	grep.asm	/^ ac7:	89 c7                	mov    %eax,%edi$/;"	l
ac7	init.asm	/^ ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac7	ln.asm	/^ ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac7	mkdir.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	rm.asm	/^ ac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ac7	wc.asm	/^ ac7:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
ac8	bad_mmap.asm	/^ ac8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ac8	echo.asm	/^ ac8:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ac8	imshow.asm	/^ ac8:	01 $/;"	l
ac8	kill.asm	/^ ac8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ac8	ls.asm	/^     ac8:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac8	sh.asm	/^     ac8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ac8	stressfs.asm	/^ ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ac8	usertests.asm	/^     ac8:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
ac8	zombie.asm	/^ ac8:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ac9	divide.asm	/^ ac9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ac9	grep.asm	/^ ac9:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
ac9	imshow.asm	/^ ac9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
aca	cat.asm	/^ aca:	48 8b 00             	mov    (%rax),%rax$/;"	l
aca	eager_mmap.asm	/^ aca:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
aca	lazy_mmap.asm	/^ aca:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
aca	prettyprint.asm	/^     aca:	83 f8 30             	cmp    $0x30,%eax$/;"	l
acb	init.asm	/^ acb:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
acb	kill.asm	/^ acb:	c9                   	leaveq $/;"	l
acb	ln.asm	/^ acb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
acb	mkdir.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acb	rm.asm	/^ acb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
acc	bad_mmap.asm	/^ acc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acc	echo.asm	/^ acc:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
acc	kill.asm	/^ acc:	c3                   	retq   $/;"	l
acc	sh.asm	/^     acc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
acc	stressfs.asm	/^ acc:	48 01 c2             	add    %rax,%rdx$/;"	l
acd	cat.asm	/^ acd:	48 39 c2             	cmp    %rax,%rdx$/;"	l
acd	kill.asm	/^ acd:	55                   	push   %rbp$/;"	l
acd	prettyprint.asm	/^     acd:	73 23                	jae    af2 <printf+0x14b>$/;"	l
ace	eager_mmap.asm	/^ ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ace	kill.asm	/^ ace:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ace	lazy_mmap.asm	/^ ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ace	wc.asm	/^ ace:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
acf	echo.asm	/^ acf:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
acf	init.asm	/^ acf:	76 c7                	jbe    a98 <free+0x2b>$/;"	l
acf	ln.asm	/^ acf:	48 89 c7             	mov    %rax,%rdi$/;"	l
acf	ls.asm	/^     acf:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
acf	mkdir.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	prettyprint.asm	/^     acf:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
acf	rm.asm	/^ acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
acf	stressfs.asm	/^ acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
acf	usertests.asm	/^     acf:	00 00 00 $/;"	l
acf	zombie.asm	/^ acf:	00 00 00 $/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	cat.asm	/^  ad:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
ad	eager_mmap.asm	/^  ad:	48 89 c2             	mov    %rax,%rdx$/;"	l
ad	forktest.asm	/^  ad:	48 ba 00 00 00 00 00 	movabs $0x0,%rdx$/;"	l
ad	init.asm	/^  ad:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ad	lazy_mmap.asm	/^  ad:	48 89 c2             	mov    %rax,%rdx$/;"	l
ad	prettyprint.asm	/^      ad:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ad	wc.asm	/^  ad:	7c 88                	jl     37 <wc+0x37>$/;"	l
ad0	bad_mmap.asm	/^ ad0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ad0	cat.asm	/^ ad0:	75 2d                	jne    aff <free+0xc1>$/;"	l
ad0	divide.asm	/^ ad0:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ad0	grep.asm	/^ ad0:	00 00 00 $/;"	l
ad0	imshow.asm	/^ ad0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ad0	sh.asm	/^     ad0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ad1	init.asm	/^ ad1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad1	kill.asm	/^ ad1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ad2	cat.asm	/^ ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad2	eager_mmap.asm	/^ ad2:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ad2	echo.asm	/^ ad2:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ad2	lazy_mmap.asm	/^ ad2:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ad2	ln.asm	/^ ad2:	48 b8 42 09 00 00 00 	movabs $0x942,%rax$/;"	l
ad2	usertests.asm	/^     ad2:	ff d0                	callq  *%rax$/;"	l
ad2	zombie.asm	/^ ad2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ad3	grep.asm	/^ ad3:	ff d0                	callq  *%rax$/;"	l
ad3	imshow.asm	/^ ad3:	84 c0                	test   %al,%al$/;"	l
ad3	ls.asm	/^     ad3:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad3	mkdir.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	rm.asm	/^ ad3:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ad3	stressfs.asm	/^ ad3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ad4	bad_mmap.asm	/^ ad4:	76 c7                	jbe    a9d <free+0x2b>$/;"	l
ad4	divide.asm	/^ ad4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ad4	sh.asm	/^     ad4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ad4	usertests.asm	/^     ad4:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ad4	wc.asm	/^ ad4:	48 63 d0             	movslq %eax,%rdx$/;"	l
ad5	grep.asm	/^ ad5:	e9 f1 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
ad5	imshow.asm	/^ ad5:	75 c7                	jne    a9e <printf+0x26d>$/;"	l
ad5	init.asm	/^ ad5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ad5	kill.asm	/^ ad5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ad5	zombie.asm	/^ ad5:	48 b8 20 0e 00 00 00 	movabs $0xe20,%rax$/;"	l
ad6	bad_mmap.asm	/^ ad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad6	cat.asm	/^ ad6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ad6	echo.asm	/^ ad6:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ad6	mkdir.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	prettyprint.asm	/^     ad6:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ad6	rm.asm	/^ ad6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ad6	stressfs.asm	/^ ad6:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ad7	imshow.asm	/^ ad7:	e9 c8 00 00 00       	jmpq   ba4 <printf+0x373>$/;"	l
ad7	usertests.asm	/^     ad7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ad7	wc.asm	/^ ad7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ad8	init.asm	/^ ad8:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ad8	kill.asm	/^ ad8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ad8	sh.asm	/^     ad8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ad9	cat.asm	/^ ad9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ad9	eager_mmap.asm	/^ ad9:	00 00 00 $/;"	l
ad9	lazy_mmap.asm	/^ ad9:	00 00 00 $/;"	l
ad9	ln.asm	/^ ad9:	00 00 00 $/;"	l
ad9	mkdir.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	rm.asm	/^ ad9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ad9	stressfs.asm	/^ ad9:	75 2d                	jne    b08 <free+0xc1>$/;"	l
ada	bad_mmap.asm	/^ ada:	48 8b 00             	mov    (%rax),%rax$/;"	l
ada	echo.asm	/^ ada:	83 c0 01             	add    $0x1,%eax$/;"	l
ada	grep.asm	/^ ada:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
ada	ls.asm	/^     ada:	8b 30                	mov    (%rax),%esi$/;"	l
adb	divide.asm	/^ adb:	8b 00                	mov    (%rax),%eax$/;"	l
adb	kill.asm	/^ adb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
adb	stressfs.asm	/^ adb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
adb	usertests.asm	/^     adb:	79 35                	jns    b12 <writetest1+0x179>$/;"	l
adc	eager_mmap.asm	/^ adc:	48 8b 00             	mov    (%rax),%rax$/;"	l
adc	imshow.asm	/^ adc:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
adc	init.asm	/^ adc:	76 ba                	jbe    a98 <free+0x2b>$/;"	l
adc	lazy_mmap.asm	/^ adc:	48 8b 00             	mov    (%rax),%rax$/;"	l
adc	ln.asm	/^ adc:	ff d0                	callq  *%rax$/;"	l
adc	ls.asm	/^     adc:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
adc	prettyprint.asm	/^     adc:	89 d2                	mov    %edx,%edx$/;"	l
adc	sh.asm	/^     adc:	48 89 d6             	mov    %rdx,%rsi$/;"	l
adc	zombie.asm	/^ adc:	00 00 00 $/;"	l
add	bad_mmap.asm	/^ add:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
add	cat.asm	/^ add:	48 8b 00             	mov    (%rax),%rax$/;"	l
add	divide.asm	/^ add:	0f be d0             	movsbl %al,%edx$/;"	l
add	echo.asm	/^ add:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
add	mkdir.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	rm.asm	/^ add:	48 83 c0 10          	add    $0x10,%rax$/;"	l
add	usertests.asm	/^     add:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
addr	kernel.asm	/^  addr = (uint64) tss;$/;"	d
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = proc->sz;$/;"	d
addr_p	mp.h	/^  uint32 addr_p;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addr_t	types.h	/^typedef unsigned long addr_t;$/;"	t
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	init.asm	/^ ade:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ade	ln.asm	/^ ade:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
ade	prettyprint.asm	/^     ade:	48 01 d0             	add    %rdx,%rax$/;"	l
ade	wc.asm	/^ ade:	48 01 d0             	add    %rdx,%rax$/;"	l
adf	eager_mmap.asm	/^ adf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
adf	kill.asm	/^ adf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
adf	lazy_mmap.asm	/^ adf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
adf	sh.asm	/^     adf:	48 89 c7             	mov    %rax,%rdi$/;"	l
adf	stressfs.asm	/^ adf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
adf	zombie.asm	/^ adf:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
ae	divide.asm	/^  ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ae	mkdir.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	rm.asm	/^  ae:	eb 0c                	jmp    bc <main+0xbc>$/;"	l
ae	usertests.asm	/^      ae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ae	zombie.asm	/^  ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ae0	cat.asm	/^ ae0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae0	divide.asm	/^ ae0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ae0	echo.asm	/^ ae0:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ae1	bad_mmap.asm	/^ ae1:	76 ba                	jbe    a9d <free+0x2b>$/;"	l
ae1	grep.asm	/^ ae1:	74 09                	je     aec <printf+0x194>$/;"	l
ae1	mkdir.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	prettyprint.asm	/^     ae1:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ae1	rm.asm	/^ ae1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ae1	wc.asm	/^ ae1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ae2	init.asm	/^ ae2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae2	ls.asm	/^     ae2:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
ae2	sh.asm	/^     ae2:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
ae2	stressfs.asm	/^ ae2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae3	bad_mmap.asm	/^ ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae3	cat.asm	/^ ae3:	01 c2                	add    %eax,%edx$/;"	l
ae3	eager_mmap.asm	/^ ae3:	eb 2f                	jmp    b14 <free+0x5a>$/;"	l
ae3	grep.asm	/^ ae3:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
ae3	imshow.asm	/^ ae3:	75 5d                	jne    b42 <printf+0x311>$/;"	l
ae3	kill.asm	/^ ae3:	83 c0 01             	add    $0x1,%eax$/;"	l
ae3	lazy_mmap.asm	/^ ae3:	eb 2f                	jmp    b14 <free+0x5a>$/;"	l
ae4	mkdir.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	rm.asm	/^ ae4:	48 b8 54 09 00 00 00 	movabs $0x954,%rax$/;"	l
ae4	usertests.asm	/^     ae4:	00 00 00 $/;"	l
ae4	wc.asm	/^ ae4:	84 c0                	test   %al,%al$/;"	l
ae5	cat.asm	/^ ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae5	eager_mmap.asm	/^ ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae5	imshow.asm	/^ ae5:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ae5	init.asm	/^ ae5:	89 c0                	mov    %eax,%eax$/;"	l
ae5	lazy_mmap.asm	/^ ae5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ae5	ln.asm	/^ ae5:	00 00 00 $/;"	l
ae6	divide.asm	/^ ae6:	89 d6                	mov    %edx,%esi$/;"	l
ae6	kill.asm	/^ ae6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ae6	stressfs.asm	/^ ae6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae6	wc.asm	/^ ae6:	0f 85 fc fc ff ff    	jne    7e8 <printf+0x9e>$/;"	l
ae6	zombie.asm	/^ ae6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ae7	bad_mmap.asm	/^ ae7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae7	echo.asm	/^ ae7:	00 00 00 $/;"	l
ae7	init.asm	/^ ae7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ae7	ls.asm	/^     ae7:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
ae7	prettyprint.asm	/^     ae7:	83 c2 08             	add    $0x8,%edx$/;"	l
ae7	usertests.asm	/^     ae7:	8b 00                	mov    (%rax),%eax$/;"	l
ae8	divide.asm	/^ ae8:	89 c7                	mov    %eax,%edi$/;"	l
ae8	ln.asm	/^ ae8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	cat.asm	/^ ae9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ae9	eager_mmap.asm	/^ ae9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	kill.asm	/^ ae9:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
ae9	lazy_mmap.asm	/^ ae9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ae9	sh.asm	/^     ae9:	00 00 00 $/;"	l
ae9	stressfs.asm	/^ ae9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ae9	usertests.asm	/^     ae9:	48 be 90 6b 00 00 00 	movabs $0x6b90,%rsi$/;"	l
aea	bad_mmap.asm	/^ aea:	89 c0                	mov    %eax,%eax$/;"	l
aea	divide.asm	/^ aea:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
aea	echo.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aea	grep.asm	/^ aea:	75 65                	jne    b51 <printf+0x1f9>$/;"	l
aea	prettyprint.asm	/^     aea:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
aea	zombie.asm	/^ aea:	48 8b 00             	mov    (%rax),%rax$/;"	l
aeb	imshow.asm	/^ aeb:	83 f8 30             	cmp    $0x30,%eax$/;"	l
aeb	init.asm	/^ aeb:	48 89 c2             	mov    %rax,%rdx$/;"	l
aeb	ln.asm	/^ aeb:	c9                   	leaveq $/;"	l
aeb	mkdir.asm	/^ aeb:	00 00 00 $/;"	l
aeb	rm.asm	/^ aeb:	00 00 00 $/;"	l
aec	bad_mmap.asm	/^ aec:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
aec	cat.asm	/^ aec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aec	eager_mmap.asm	/^ aec:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aec	grep.asm	/^ aec:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
aec	lazy_mmap.asm	/^ aec:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
aec	ln.asm	/^ aec:	c3                   	retq   $/;"	l
aec	ls.asm	/^     aec:	89 c7                	mov    %eax,%edi$/;"	l
aec	sh.asm	/^     aec:	ff d0                	callq  *%rax$/;"	l
aec	stressfs.asm	/^ aec:	01 c2                	add    %eax,%edx$/;"	l
aec	wc.asm	/^ aec:	90                   	nop$/;"	l
aed	echo.asm	/^ aed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
aed	ln.asm	/^ aed:	55                   	push   %rbp$/;"	l
aed	wc.asm	/^ aed:	c9                   	leaveq $/;"	l
aed	zombie.asm	/^ aed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	imshow.asm	/^ aee:	73 23                	jae    b13 <printf+0x2e2>$/;"	l
aee	init.asm	/^ aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aee	ln.asm	/^ aee:	48 89 e5             	mov    %rsp,%rbp$/;"	l
aee	ls.asm	/^     aee:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
aee	mkdir.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	rm.asm	/^ aee:	ff d0                	callq  *%rax$/;"	l
aee	sh.asm	/^     aee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
aee	stressfs.asm	/^ aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aee	wc.asm	/^ aee:	c3                   	retq   $/;"	l
aef	wc.asm	/^ aef:	55                   	push   %rbp$/;"	l
af	echo.asm	/^  af:	89 d1                	mov    %edx,%ecx$/;"	l
af	grep.asm	/^  af:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
af	kill.asm	/^  af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
af	ls.asm	/^      af:	00 00 00 $/;"	l
af	wc.asm	/^  af:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af0	bad_mmap.asm	/^ af0:	48 89 c2             	mov    %rax,%rdx$/;"	l
af0	cat.asm	/^ af0:	48 8b 00             	mov    (%rax),%rax$/;"	l
af0	eager_mmap.asm	/^ af0:	77 17                	ja     b09 <free+0x4f>$/;"	l
af0	imshow.asm	/^ af0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af0	kill.asm	/^ af0:	00 00 00 $/;"	l
af0	lazy_mmap.asm	/^ af0:	77 17                	ja     b09 <free+0x4f>$/;"	l
af0	mkdir.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	prettyprint.asm	/^     af0:	eb 12                	jmp    b04 <printf+0x15d>$/;"	l
af0	rm.asm	/^ af0:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
af0	usertests.asm	/^     af0:	00 00 00 $/;"	l
af0	wc.asm	/^ af0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
af1	divide.asm	/^ af1:	00 00 00 $/;"	l
af1	echo.asm	/^ af1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
af1	ln.asm	/^ af1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
af1	zombie.asm	/^ af1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af2	eager_mmap.asm	/^ af2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af2	grep.asm	/^ af2:	83 f8 30             	cmp    $0x30,%eax$/;"	l
af2	init.asm	/^ af2:	48 01 c2             	add    %rax,%rdx$/;"	l
af2	lazy_mmap.asm	/^ af2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af2	prettyprint.asm	/^     af2:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
af2	sh.asm	/^     af2:	eb 38                	jmp    b2c <parseline+0x68>$/;"	l
af2	stressfs.asm	/^ af2:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
af3	bad_mmap.asm	/^ af3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af3	cat.asm	/^ af3:	48 8b 10             	mov    (%rax),%rdx$/;"	l
af3	kill.asm	/^ af3:	48 8b 00             	mov    (%rax),%rax$/;"	l
af3	usertests.asm	/^     af3:	89 c7                	mov    %eax,%edi$/;"	l
af3	wc.asm	/^ af3:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
af4	divide.asm	/^ af4:	ff d0                	callq  *%rax$/;"	l
af4	sh.asm	/^     af4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
af5	grep.asm	/^ af5:	73 23                	jae    b1a <printf+0x1c2>$/;"	l
af5	init.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	ln.asm	/^ af5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
af5	ls.asm	/^     af5:	00 00 00 $/;"	l
af5	stressfs.asm	/^ af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
af5	usertests.asm	/^     af5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
af5	zombie.asm	/^ af5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
af6	cat.asm	/^ af6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
af6	divide.asm	/^ af6:	eb 62                	jmp    b5a <printf+0x373>$/;"	l
af6	eager_mmap.asm	/^ af6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
af6	echo.asm	/^ af6:	75 4a                	jne    b42 <malloc+0x7e>$/;"	l
af6	kill.asm	/^ af6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
af6	lazy_mmap.asm	/^ af6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
af7	bad_mmap.asm	/^ af7:	48 01 c2             	add    %rax,%rdx$/;"	l
af7	grep.asm	/^ af7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
af7	imshow.asm	/^ af7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
af7	mkdir.asm	/^ af7:	00 00 00 $/;"	l
af7	rm.asm	/^ af7:	00 00 00 $/;"	l
af7	wc.asm	/^ af7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
af8	divide.asm	/^ af8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
af8	echo.asm	/^ af8:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
af8	ln.asm	/^ af8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
af8	ls.asm	/^     af8:	ff d0                	callq  *%rax$/;"	l
af8	sh.asm	/^     af8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
af8	zombie.asm	/^ af8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
af9	init.asm	/^ af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
af9	prettyprint.asm	/^     af9:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
af9	stressfs.asm	/^ af9:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	bad_mmap.asm	/^ afa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afa	cat.asm	/^ afa:	48 89 10             	mov    %rdx,(%rax)$/;"	l
afa	eager_mmap.asm	/^ afa:	77 2f                	ja     b2b <free+0x71>$/;"	l
afa	kill.asm	/^ afa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
afa	lazy_mmap.asm	/^ afa:	77 2f                	ja     b2b <free+0x71>$/;"	l
afa	ls.asm	/^     afa:	e9 f1 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
afa	mkdir.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	rm.asm	/^ afa:	48 8b 00             	mov    (%rax),%rax$/;"	l
afa	usertests.asm	/^     afa:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
afb	ln.asm	/^ afb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
afb	wc.asm	/^ afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
afb	zombie.asm	/^ afb:	72 65                	jb     b62 <malloc+0xfa>$/;"	l
afc	eager_mmap.asm	/^ afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afc	init.asm	/^ afc:	48 39 c2             	cmp    %rax,%rdx$/;"	l
afc	lazy_mmap.asm	/^ afc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afc	sh.asm	/^     afc:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
afc	stressfs.asm	/^ afc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
afd	cat.asm	/^ afd:	eb 0e                	jmp    b0d <free+0xcf>$/;"	l
afd	imshow.asm	/^ afd:	89 d2                	mov    %edx,%edx$/;"	l
afd	mkdir.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	prettyprint.asm	/^     afd:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
afd	rm.asm	/^ afd:	c9                   	leaveq $/;"	l
afd	zombie.asm	/^ afd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
afe	bad_mmap.asm	/^ afe:	48 8b 00             	mov    (%rax),%rax$/;"	l
afe	grep.asm	/^ afe:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
afe	mkdir.asm	/^ afe:	c3                   	retq   $/;"	l
afe	rm.asm	/^ afe:	c3                   	retq   $/;"	l
aff	cat.asm	/^ aff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
aff	divide.asm	/^ aff:	75 21                	jne    b22 <printf+0x33b>$/;"	l
aff	echo.asm	/^ aff:	00 00 00 $/;"	l
aff	imshow.asm	/^ aff:	48 01 d0             	add    %rdx,%rax$/;"	l
aff	init.asm	/^ aff:	75 2d                	jne    b2e <free+0xc1>$/;"	l
aff	kill.asm	/^ aff:	75 4a                	jne    b4b <malloc+0x7e>$/;"	l
aff	ln.asm	/^ aff:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
aff	ls.asm	/^     aff:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
aff	mkdir.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	rm.asm	/^ aff:	55                   	push   %rbp$/;"	l
aff	stressfs.asm	/^ aff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
aff	wc.asm	/^ aff:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
align	elf.h	/^  uint64 align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (addr_t)a;$/;"	d
apicid	kernel.asm	/^  apicid = lapic[ID] >> 24;$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argaddr	syscall.c	/^argaddr(int n, addr_t *ip)$/;"	f
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argptest	usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
ax	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
b	bad_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	cat.asm	/^   b:	eb 51                	jmp    5e <cat+0x5e>$/;"	l
b	eager_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	echo.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	forktest.asm	/^   b:	89 bd 4c ff ff ff    	mov    %edi,-0xb4(%rbp)$/;"	l
b	imshow.asm	/^   b:	89 bd ec fb ff ff    	mov    %edi,-0x414(%rbp)$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	lazy_mmap.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	ln.asm	/^   b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b	mkdir.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	prettyprint.asm	/^       b:	89 bd 7c ff ff ff    	mov    %edi,-0x84(%rbp)$/;"	l
b	rm.asm	/^   b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
b	stressfs.asm	/^   b:	89 bd dc fd ff ff    	mov    %edi,-0x224(%rbp)$/;"	l
b	usertests.asm	/^       b:	00 00 00 $/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
b	zombie.asm	/^   b:	00 00 00 $/;"	l
b0	eager_mmap.asm	/^  b0:	48 be 3e 0e 00 00 00 	movabs $0xe3e,%rsi$/;"	l
b0	lazy_mmap.asm	/^  b0:	48 be 3e 0e 00 00 00 	movabs $0xe3e,%rsi$/;"	l
b0	mkdir.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b0	rm.asm	/^  b0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
b00	eager_mmap.asm	/^ b00:	48 8b 00             	mov    (%rax),%rax$/;"	l
b00	lazy_mmap.asm	/^ b00:	48 8b 00             	mov    (%rax),%rax$/;"	l
b00	mkdir.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b00	rm.asm	/^ b00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b01	bad_mmap.asm	/^ b01:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b01	divide.asm	/^ b01:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b01	init.asm	/^ b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b01	kill.asm	/^ b01:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b01	sh.asm	/^     b01:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b01	usertests.asm	/^     b01:	00 00 00 $/;"	l
b01	zombie.asm	/^ b01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b02	echo.asm	/^ b02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b02	imshow.asm	/^ b02:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b03	cat.asm	/^ b03:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b03	eager_mmap.asm	/^ b03:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b03	lazy_mmap.asm	/^ b03:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b03	ln.asm	/^ b03:	83 c0 01             	add    $0x1,%eax$/;"	l
b03	mkdir.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	rm.asm	/^ b03:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
b03	stressfs.asm	/^ b03:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b03	wc.asm	/^ b03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b04	bad_mmap.asm	/^ b04:	75 2d                	jne    b33 <free+0xc1>$/;"	l
b04	grep.asm	/^ b04:	89 d2                	mov    %edx,%edx$/;"	l
b04	prettyprint.asm	/^     b04:	8b 30                	mov    (%rax),%esi$/;"	l
b04	usertests.asm	/^     b04:	ff d2                	callq  *%rdx$/;"	l
b04	zombie.asm	/^ b04:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b05	init.asm	/^ b05:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b06	bad_mmap.asm	/^ b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b06	cat.asm	/^ b06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b06	echo.asm	/^ b06:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b06	grep.asm	/^ b06:	48 01 d0             	add    %rdx,%rax$/;"	l
b06	ln.asm	/^ b06:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b06	ls.asm	/^     b06:	74 09                	je     b11 <printf+0x194>$/;"	l
b06	prettyprint.asm	/^     b06:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b06	sh.asm	/^     b06:	48 89 c7             	mov    %rax,%rdi$/;"	l
b06	stressfs.asm	/^ b06:	eb 0e                	jmp    b16 <free+0xcf>$/;"	l
b06	usertests.asm	/^     b06:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b07	divide.asm	/^ b07:	0f be d0             	movsbl %al,%edx$/;"	l
b07	eager_mmap.asm	/^ b07:	77 22                	ja     b2b <free+0x71>$/;"	l
b07	lazy_mmap.asm	/^ b07:	77 22                	ja     b2b <free+0x71>$/;"	l
b07	mkdir.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	rm.asm	/^ b07:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
b07	wc.asm	/^ b07:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
b07	zombie.asm	/^ b07:	75 10                	jne    b19 <malloc+0xb1>$/;"	l
b08	imshow.asm	/^ b08:	83 c2 08             	add    $0x8,%edx$/;"	l
b08	init.asm	/^ b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b08	kill.asm	/^ b08:	00 00 00 $/;"	l
b08	ls.asm	/^     b08:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b08	stressfs.asm	/^ b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	eager_mmap.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	grep.asm	/^ b09:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b09	lazy_mmap.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b09	ln.asm	/^ b09:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b09	sh.asm	/^     b09:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b09	zombie.asm	/^ b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0a	bad_mmap.asm	/^ b0a:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b0a	cat.asm	/^ b0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b0a	divide.asm	/^ b0a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b0a	mkdir.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0a	rm.asm	/^ b0a:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
b0b	imshow.asm	/^ b0b:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b0b	kill.asm	/^ b0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b0c	init.asm	/^ b0c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0c	prettyprint.asm	/^     b0c:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b0c	stressfs.asm	/^ b0c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0d	bad_mmap.asm	/^ b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0d	cat.asm	/^ b0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b0d	eager_mmap.asm	/^ b0d:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0d	echo.asm	/^ b0d:	00 00 00 $/;"	l
b0d	lazy_mmap.asm	/^ b0d:	48 8b 00             	mov    (%rax),%rax$/;"	l
b0d	mkdir.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	rm.asm	/^ b0d:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
b0d	usertests.asm	/^     b0d:	00 00 00 $/;"	l
b0d	zombie.asm	/^ b0d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b0e	wc.asm	/^ b0e:	00 00 00 $/;"	l
b0f	grep.asm	/^ b0f:	83 c2 08             	add    $0x8,%edx$/;"	l
b0f	init.asm	/^ b0f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b0f	kill.asm	/^ b0f:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b0f	ls.asm	/^     b0f:	75 65                	jne    b76 <printf+0x1f9>$/;"	l
b0f	stressfs.asm	/^ b0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b1	bad_mmap.asm	/^  b1:	00 00 00 $/;"	l
b1	echo.asm	/^  b1:	fc                   	cld    $/;"	l
b1	ln.asm	/^  b1:	00 00 00 $/;"	l
b1	sh.asm	/^      b1:	00 00 00 $/;"	l
b10	divide.asm	/^ b10:	89 d6                	mov    %edx,%esi$/;"	l
b10	eager_mmap.asm	/^ b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b10	echo.asm	/^ b10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b10	lazy_mmap.asm	/^ b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b10	ln.asm	/^ b10:	00 00 00 $/;"	l
b10	sh.asm	/^     b10:	00 00 00 $/;"	l
b10	usertests.asm	/^     b10:	ff d0                	callq  *%rax$/;"	l
b10	zombie.asm	/^ b10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b11	bad_mmap.asm	/^ b11:	48 8b 00             	mov    (%rax),%rax$/;"	l
b11	cat.asm	/^ b11:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b11	imshow.asm	/^ b11:	eb 12                	jmp    b25 <printf+0x2f4>$/;"	l
b11	ls.asm	/^     b11:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b11	mkdir.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	prettyprint.asm	/^     b11:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b11	rm.asm	/^ b11:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
b11	wc.asm	/^ b11:	48 8b 00             	mov    (%rax),%rax$/;"	l
b12	divide.asm	/^ b12:	89 c7                	mov    %eax,%edi$/;"	l
b12	grep.asm	/^ b12:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b12	init.asm	/^ b12:	01 c2                	add    %eax,%edx$/;"	l
b12	usertests.asm	/^     b12:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
b13	imshow.asm	/^ b13:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b13	ln.asm	/^ b13:	48 8b 00             	mov    (%rax),%rax$/;"	l
b13	sh.asm	/^     b13:	ff d0                	callq  *%rax$/;"	l
b13	stressfs.asm	/^ b13:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	bad_mmap.asm	/^ b14:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b14	cat.asm	/^ b14:	89 c0                	mov    %eax,%eax$/;"	l
b14	divide.asm	/^ b14:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b14	eager_mmap.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	echo.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b14	init.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	lazy_mmap.asm	/^ b14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b14	wc.asm	/^ b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b14	zombie.asm	/^ b14:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b15	mkdir.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	rm.asm	/^ b15:	83 c0 01             	add    $0x1,%eax$/;"	l
b15	sh.asm	/^     b15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b16	cat.asm	/^ b16:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b16	kill.asm	/^ b16:	00 00 00 $/;"	l
b16	ln.asm	/^ b16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b16	prettyprint.asm	/^     b16:	89 c7                	mov    %eax,%edi$/;"	l
b16	stressfs.asm	/^ b16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b17	bad_mmap.asm	/^ b17:	01 c2                	add    %eax,%edx$/;"	l
b17	echo.asm	/^ b17:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b17	ls.asm	/^     b17:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b17	zombie.asm	/^ b17:	eb 2e                	jmp    b47 <malloc+0xdf>$/;"	l
b18	eager_mmap.asm	/^ b18:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b18	grep.asm	/^ b18:	eb 12                	jmp    b2c <printf+0x1d4>$/;"	l
b18	init.asm	/^ b18:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b18	lazy_mmap.asm	/^ b18:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b18	mkdir.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	prettyprint.asm	/^     b18:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b18	rm.asm	/^ b18:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
b18	wc.asm	/^ b18:	eb 2f                	jmp    b49 <free+0x5a>$/;"	l
b19	bad_mmap.asm	/^ b19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b19	kill.asm	/^ b19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b19	sh.asm	/^     b19:	48 89 c7             	mov    %rax,%rdi$/;"	l
b19	usertests.asm	/^     b19:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
b19	zombie.asm	/^ b19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1a	cat.asm	/^ b1a:	48 89 c2             	mov    %rax,%rdx$/;"	l
b1a	grep.asm	/^ b1a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b1a	imshow.asm	/^ b1a:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b1a	ln.asm	/^ b1a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b1a	ls.asm	/^     b1a:	73 23                	jae    b3f <printf+0x1c2>$/;"	l
b1a	stressfs.asm	/^ b1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1a	wc.asm	/^ b1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1b	divide.asm	/^ b1b:	00 00 00 $/;"	l
b1b	init.asm	/^ b1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1b	mkdir.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1b	rm.asm	/^ b1b:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b1c	eager_mmap.asm	/^ b1c:	76 c7                	jbe    ae5 <free+0x2b>$/;"	l
b1c	lazy_mmap.asm	/^ b1c:	76 c7                	jbe    ae5 <free+0x2b>$/;"	l
b1c	ls.asm	/^     b1c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b1c	sh.asm	/^     b1c:	48 b8 50 07 00 00 00 	movabs $0x750,%rax$/;"	l
b1c	usertests.asm	/^     b1c:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b1d	bad_mmap.asm	/^ b1d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b1d	cat.asm	/^ b1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1d	kill.asm	/^ b1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b1d	stressfs.asm	/^ b1d:	89 c0                	mov    %eax,%eax$/;"	l
b1d	zombie.asm	/^ b1d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b1e	divide.asm	/^ b1e:	ff d0                	callq  *%rax$/;"	l
b1e	eager_mmap.asm	/^ b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1e	echo.asm	/^ b1e:	00 00 00 $/;"	l
b1e	imshow.asm	/^ b1e:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b1e	lazy_mmap.asm	/^ b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b1e	wc.asm	/^ b1e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b1f	init.asm	/^ b1f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b1f	ln.asm	/^ b1f:	75 4a                	jne    b6b <malloc+0x7e>$/;"	l
b1f	prettyprint.asm	/^     b1f:	00 00 00 $/;"	l
b1f	stressfs.asm	/^ b1f:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b2	divide.asm	/^  b2:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b2	echo.asm	/^  b2:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
b2	imshow.asm	/^  b2:	00 00 00 $/;"	l
b2	init.asm	/^  b2:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
b2	kill.asm	/^  b2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b2	ls.asm	/^      b2:	ff d0                	callq  *%rax$/;"	l
b2	prettyprint.asm	/^      b2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b2	stressfs.asm	/^  b2:	00 00 00 $/;"	l
b2	wc.asm	/^  b2:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
b2	zombie.asm	/^  b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
b20	bad_mmap.asm	/^ b20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b20	divide.asm	/^ b20:	eb 38                	jmp    b5a <printf+0x373>$/;"	l
b20	kill.asm	/^ b20:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
b20	zombie.asm	/^ b20:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b21	cat.asm	/^ b21:	48 01 d0             	add    %rdx,%rax$/;"	l
b21	echo.asm	/^ b21:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b21	grep.asm	/^ b21:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b21	ln.asm	/^ b21:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b21	usertests.asm	/^     b21:	48 be 40 88 00 00 00 	movabs $0x8840,%rsi$/;"	l
b21	wc.asm	/^ b21:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b22	divide.asm	/^ b22:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b22	eager_mmap.asm	/^ b22:	48 8b 00             	mov    (%rax),%rax$/;"	l
b22	init.asm	/^ b22:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b22	lazy_mmap.asm	/^ b22:	48 8b 00             	mov    (%rax),%rax$/;"	l
b22	mkdir.asm	/^ b22:	00 00 00 $/;"	l
b22	prettyprint.asm	/^     b22:	ff d0                	callq  *%rax$/;"	l
b22	rm.asm	/^ b22:	00 00 00 $/;"	l
b23	ls.asm	/^     b23:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b23	sh.asm	/^     b23:	00 00 00 $/;"	l
b23	stressfs.asm	/^ b23:	48 89 c2             	mov    %rax,%rdx$/;"	l
b23	zombie.asm	/^ b23:	89 c2                	mov    %eax,%edx$/;"	l
b24	bad_mmap.asm	/^ b24:	48 8b 00             	mov    (%rax),%rax$/;"	l
b24	cat.asm	/^ b24:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b24	echo.asm	/^ b24:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b24	prettyprint.asm	/^     b24:	e9 f1 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b25	eager_mmap.asm	/^ b25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b25	grep.asm	/^ b25:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b25	imshow.asm	/^ b25:	8b 00                	mov    (%rax),%eax$/;"	l
b25	init.asm	/^ b25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b25	lazy_mmap.asm	/^ b25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b25	mkdir.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	rm.asm	/^ b25:	48 8b 00             	mov    (%rax),%rax$/;"	l
b25	wc.asm	/^ b25:	77 17                	ja     b3e <free+0x4f>$/;"	l
b25	zombie.asm	/^ b25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b26	sh.asm	/^     b26:	ff d0                	callq  *%rax$/;"	l
b26	stressfs.asm	/^ b26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b27	bad_mmap.asm	/^ b27:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b27	imshow.asm	/^ b27:	0f be d0             	movsbl %al,%edx$/;"	l
b27	kill.asm	/^ b27:	00 00 00 $/;"	l
b27	wc.asm	/^ b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b28	cat.asm	/^ b28:	75 27                	jne    b51 <free+0x113>$/;"	l
b28	divide.asm	/^ b28:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b28	ln.asm	/^ b28:	00 00 00 $/;"	l
b28	mkdir.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	rm.asm	/^ b28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b28	sh.asm	/^     b28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b28	usertests.asm	/^     b28:	00 00 00 $/;"	l
b29	eager_mmap.asm	/^ b29:	76 ba                	jbe    ae5 <free+0x2b>$/;"	l
b29	init.asm	/^ b29:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b29	lazy_mmap.asm	/^ b29:	76 ba                	jbe    ae5 <free+0x2b>$/;"	l
b29	ls.asm	/^     b29:	89 d2                	mov    %edx,%edx$/;"	l
b29	prettyprint.asm	/^     b29:	83 bd 3c ff ff ff 78 	cmpl   $0x78,-0xc4(%rbp)$/;"	l
b29	zombie.asm	/^ b29:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b2a	bad_mmap.asm	/^ b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2a	cat.asm	/^ b2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2a	imshow.asm	/^ b2a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2a	kill.asm	/^ b2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b2a	stressfs.asm	/^ b2a:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	eager_mmap.asm	/^ b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2b	echo.asm	/^ b2b:	00 00 00 $/;"	l
b2b	lazy_mmap.asm	/^ b2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b2b	ln.asm	/^ b2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b2b	ls.asm	/^     b2b:	48 01 d0             	add    %rdx,%rax$/;"	l
b2b	usertests.asm	/^     b2b:	89 c7                	mov    %eax,%edi$/;"	l
b2b	wc.asm	/^ b2b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b2c	grep.asm	/^ b2c:	8b 30                	mov    (%rax),%esi$/;"	l
b2c	init.asm	/^ b2c:	eb 0e                	jmp    b3c <free+0xcf>$/;"	l
b2c	mkdir.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	rm.asm	/^ b2c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
b2c	sh.asm	/^     b2c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b2c	zombie.asm	/^ b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2d	divide.asm	/^ b2d:	89 c7                	mov    %eax,%edi$/;"	l
b2d	kill.asm	/^ b2d:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b2d	stressfs.asm	/^ b2d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b2d	usertests.asm	/^     b2d:	48 b8 20 60 00 00 00 	movabs $0x6020,%rax$/;"	l
b2e	bad_mmap.asm	/^ b2e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b2e	cat.asm	/^ b2e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b2e	echo.asm	/^ b2e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b2e	grep.asm	/^ b2e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b2e	init.asm	/^ b2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b2e	ls.asm	/^     b2e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b2f	divide.asm	/^ b2f:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b2f	eager_mmap.asm	/^ b2f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b2f	lazy_mmap.asm	/^ b2f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b2f	ln.asm	/^ b2f:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b2f	wc.asm	/^ b2f:	77 2f                	ja     b60 <free+0x71>$/;"	l
b3	usertests.asm	/^      b3:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
b30	imshow.asm	/^ b30:	89 d6                	mov    %edx,%esi$/;"	l
b30	prettyprint.asm	/^     b30:	74 09                	je     b3b <printf+0x194>$/;"	l
b30	sh.asm	/^     b30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b30	zombie.asm	/^ b30:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b31	bad_mmap.asm	/^ b31:	eb 0e                	jmp    b41 <free+0xcf>$/;"	l
b31	cat.asm	/^ b31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b31	echo.asm	/^ b31:	48 b8 80 0e 00 00 00 	movabs $0xe80,%rax$/;"	l
b31	mkdir.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	rm.asm	/^ b31:	75 4a                	jne    b7d <malloc+0x7e>$/;"	l
b31	stressfs.asm	/^ b31:	75 27                	jne    b5a <free+0x113>$/;"	l
b31	wc.asm	/^ b31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b32	eager_mmap.asm	/^ b32:	89 c0                	mov    %eax,%eax$/;"	l
b32	imshow.asm	/^ b32:	89 c7                	mov    %eax,%edi$/;"	l
b32	init.asm	/^ b32:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b32	lazy_mmap.asm	/^ b32:	89 c0                	mov    %eax,%eax$/;"	l
b32	prettyprint.asm	/^     b32:	83 bd 3c ff ff ff 70 	cmpl   $0x70,-0xc4(%rbp)$/;"	l
b33	bad_mmap.asm	/^ b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b33	mkdir.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	rm.asm	/^ b33:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b33	stressfs.asm	/^ b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b33	zombie.asm	/^ b33:	89 c0                	mov    %eax,%eax$/;"	l
b34	eager_mmap.asm	/^ b34:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b34	grep.asm	/^ b34:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b34	imshow.asm	/^ b34:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b34	kill.asm	/^ b34:	00 00 00 $/;"	l
b34	lazy_mmap.asm	/^ b34:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b34	ls.asm	/^     b34:	83 c2 08             	add    $0x8,%edx$/;"	l
b34	sh.asm	/^     b34:	48 ba 01 1e 00 00 00 	movabs $0x1e01,%rdx$/;"	l
b34	usertests.asm	/^     b34:	00 00 00 $/;"	l
b35	cat.asm	/^ b35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b35	init.asm	/^ b35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b35	wc.asm	/^ b35:	48 8b 00             	mov    (%rax),%rax$/;"	l
b35	zombie.asm	/^ b35:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b36	divide.asm	/^ b36:	00 00 00 $/;"	l
b36	ln.asm	/^ b36:	00 00 00 $/;"	l
b37	bad_mmap.asm	/^ b37:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b37	kill.asm	/^ b37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b37	ls.asm	/^     b37:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b37	stressfs.asm	/^ b37:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b37	usertests.asm	/^     b37:	ff d0                	callq  *%rax$/;"	l
b38	cat.asm	/^ b38:	01 c2                	add    %eax,%edx$/;"	l
b38	eager_mmap.asm	/^ b38:	48 89 c2             	mov    %rax,%rdx$/;"	l
b38	echo.asm	/^ b38:	00 00 00 $/;"	l
b38	lazy_mmap.asm	/^ b38:	48 89 c2             	mov    %rax,%rdx$/;"	l
b38	wc.asm	/^ b38:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b39	divide.asm	/^ b39:	ff d0                	callq  *%rax$/;"	l
b39	grep.asm	/^ b39:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b39	init.asm	/^ b39:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b39	ln.asm	/^ b39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b39	prettyprint.asm	/^     b39:	75 65                	jne    ba0 <printf+0x1f9>$/;"	l
b39	usertests.asm	/^     b39:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
b39	zombie.asm	/^ b39:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b3a	bad_mmap.asm	/^ b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3a	cat.asm	/^ b3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3a	kill.asm	/^ b3a:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
b3a	mkdir.asm	/^ b3a:	00 00 00 $/;"	l
b3a	rm.asm	/^ b3a:	00 00 00 $/;"	l
b3a	stressfs.asm	/^ b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	divide.asm	/^ b3b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b3b	eager_mmap.asm	/^ b3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	echo.asm	/^ b3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b3b	imshow.asm	/^ b3b:	00 00 00 $/;"	l
b3b	lazy_mmap.asm	/^ b3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b3b	prettyprint.asm	/^     b3b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b3b	sh.asm	/^     b3b:	00 00 00 $/;"	l
b3c	init.asm	/^ b3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3c	usertests.asm	/^     b3c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
b3c	wc.asm	/^ b3c:	77 22                	ja     b60 <free+0x71>$/;"	l
b3d	ln.asm	/^ b3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b3d	ls.asm	/^     b3d:	eb 12                	jmp    b51 <printf+0x1d4>$/;"	l
b3d	mkdir.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	rm.asm	/^ b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b3d	zombie.asm	/^ b3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3e	bad_mmap.asm	/^ b3e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b3e	cat.asm	/^ b3e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b3e	grep.asm	/^ b3e:	89 c7                	mov    %eax,%edi$/;"	l
b3e	imshow.asm	/^ b3e:	ff d0                	callq  *%rax$/;"	l
b3e	sh.asm	/^     b3e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b3e	stressfs.asm	/^ b3e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b3e	wc.asm	/^ b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b3f	eager_mmap.asm	/^ b3f:	48 01 c2             	add    %rax,%rdx$/;"	l
b3f	lazy_mmap.asm	/^ b3f:	48 01 c2             	add    %rax,%rdx$/;"	l
b3f	ls.asm	/^     b3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b4	bad_mmap.asm	/^  b4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
b4	cat.asm	/^  b4:	00 00 00 $/;"	l
b4	echo.asm	/^  b4:	89 ca                	mov    %ecx,%edx$/;"	l
b4	forktest.asm	/^  b4:	00 00 00 $/;"	l
b4	grep.asm	/^  b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
b4	ln.asm	/^  b4:	ff d0                	callq  *%rax$/;"	l
b4	ls.asm	/^      b4:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
b4	mkdir.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	rm.asm	/^  b4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
b4	sh.asm	/^      b4:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
b40	grep.asm	/^ b40:	48 b8 8b 08 00 00 00 	movabs $0x88b,%rax$/;"	l
b40	imshow.asm	/^ b40:	eb 62                	jmp    ba4 <printf+0x373>$/;"	l
b40	init.asm	/^ b40:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b40	ln.asm	/^ b40:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
b40	usertests.asm	/^     b40:	75 45                	jne    b87 <writetest1+0x1ee>$/;"	l
b41	bad_mmap.asm	/^ b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b41	cat.asm	/^ b41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b41	divide.asm	/^ b41:	0f be d0             	movsbl %al,%edx$/;"	l
b41	kill.asm	/^ b41:	00 00 00 $/;"	l
b41	mkdir.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	prettyprint.asm	/^     b41:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b41	rm.asm	/^ b41:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b41	sh.asm	/^     b41:	48 89 c7             	mov    %rax,%rdi$/;"	l
b41	stressfs.asm	/^ b41:	01 c2                	add    %eax,%edx$/;"	l
b41	zombie.asm	/^ b41:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b42	eager_mmap.asm	/^ b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b42	echo.asm	/^ b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b42	imshow.asm	/^ b42:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
b42	lazy_mmap.asm	/^ b42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b42	usertests.asm	/^     b42:	81 7d f8 8b 00 00 00 	cmpl   $0x8b,-0x8(%rbp)$/;"	l
b42	wc.asm	/^ b42:	48 8b 00             	mov    (%rax),%rax$/;"	l
b43	init.asm	/^ b43:	89 c0                	mov    %eax,%eax$/;"	l
b43	stressfs.asm	/^ b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b44	divide.asm	/^ b44:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b44	kill.asm	/^ b44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b44	prettyprint.asm	/^     b44:	73 23                	jae    b69 <printf+0x1c2>$/;"	l
b44	sh.asm	/^     b44:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b44	zombie.asm	/^ b44:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b45	bad_mmap.asm	/^ b45:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b45	cat.asm	/^ b45:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b45	init.asm	/^ b45:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b45	wc.asm	/^ b45:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b46	eager_mmap.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	echo.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	lazy_mmap.asm	/^ b46:	48 8b 00             	mov    (%rax),%rax$/;"	l
b46	ls.asm	/^     b46:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b46	prettyprint.asm	/^     b46:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b47	grep.asm	/^ b47:	00 00 00 $/;"	l
b47	ln.asm	/^ b47:	00 00 00 $/;"	l
b47	stressfs.asm	/^ b47:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b47	zombie.asm	/^ b47:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b48	bad_mmap.asm	/^ b48:	89 c0                	mov    %eax,%eax$/;"	l
b48	cat.asm	/^ b48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b48	mkdir.asm	/^ b48:	00 00 00 $/;"	l
b48	rm.asm	/^ b48:	00 00 00 $/;"	l
b49	eager_mmap.asm	/^ b49:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b49	echo.asm	/^ b49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b49	imshow.asm	/^ b49:	75 21                	jne    b6c <printf+0x33b>$/;"	l
b49	init.asm	/^ b49:	48 89 c2             	mov    %rax,%rdx$/;"	l
b49	lazy_mmap.asm	/^ b49:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b49	usertests.asm	/^     b49:	0f 85 d8 00 00 00    	jne    c27 <writetest1+0x28e>$/;"	l
b49	wc.asm	/^ b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4a	bad_mmap.asm	/^ b4a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b4a	divide.asm	/^ b4a:	89 d6                	mov    %edx,%esi$/;"	l
b4a	grep.asm	/^ b4a:	ff d0                	callq  *%rax$/;"	l
b4a	ln.asm	/^ b4a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4a	ls.asm	/^     b4a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b4a	stressfs.asm	/^ b4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	imshow.asm	/^ b4b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b4b	kill.asm	/^ b4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4b	mkdir.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	rm.asm	/^ b4b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b4b	sh.asm	/^     b4b:	00 00 00 $/;"	l
b4c	cat.asm	/^ b4c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4c	divide.asm	/^ b4c:	89 c7                	mov    %eax,%edi$/;"	l
b4c	eager_mmap.asm	/^ b4c:	75 2d                	jne    b7b <free+0xc1>$/;"	l
b4c	grep.asm	/^ b4c:	e9 7a 01 00 00       	jmpq   ccb <printf+0x373>$/;"	l
b4c	init.asm	/^ b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b4c	lazy_mmap.asm	/^ b4c:	75 2d                	jne    b7b <free+0xc1>$/;"	l
b4d	echo.asm	/^ b4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b4d	ln.asm	/^ b4d:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b4d	prettyprint.asm	/^     b4d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b4d	wc.asm	/^ b4d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
b4e	bad_mmap.asm	/^ b4e:	48 89 c2             	mov    %rax,%rdx$/;"	l
b4e	divide.asm	/^ b4e:	48 b8 ea 06 00 00 00 	movabs $0x6ea,%rax$/;"	l
b4e	eager_mmap.asm	/^ b4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4e	lazy_mmap.asm	/^ b4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b4e	sh.asm	/^     b4e:	ff d0                	callq  *%rax$/;"	l
b4e	stressfs.asm	/^ b4e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b4e	zombie.asm	/^ b4e:	00 00 00 $/;"	l
b4f	cat.asm	/^ b4f:	eb 0b                	jmp    b5c <free+0x11e>$/;"	l
b4f	kill.asm	/^ b4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b4f	mkdir.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	rm.asm	/^ b4f:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b4f	usertests.asm	/^     b4f:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b5	imshow.asm	/^  b5:	ff d2                	callq  *%rdx$/;"	l
b5	kill.asm	/^  b5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
b5	stressfs.asm	/^  b5:	ff d1                	callq  *%rcx$/;"	l
b50	init.asm	/^ b50:	48 01 d0             	add    %rdx,%rax$/;"	l
b50	sh.asm	/^     b50:	85 c0                	test   %eax,%eax$/;"	l
b51	bad_mmap.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	cat.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	echo.asm	/^ b51:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b51	grep.asm	/^ b51:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b51	imshow.asm	/^ b51:	0f be d0             	movsbl %al,%edx$/;"	l
b51	ls.asm	/^     b51:	8b 30                	mov    (%rax),%esi$/;"	l
b51	stressfs.asm	/^ b51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b51	wc.asm	/^ b51:	76 c7                	jbe    b1a <free+0x2b>$/;"	l
b51	zombie.asm	/^ b51:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b52	eager_mmap.asm	/^ b52:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b52	kill.asm	/^ b52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b52	lazy_mmap.asm	/^ b52:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b52	mkdir.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	rm.asm	/^ b52:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
b52	sh.asm	/^     b52:	75 a0                	jne    af4 <parseline+0x30>$/;"	l
b53	init.asm	/^ b53:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b53	ls.asm	/^     b53:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b53	prettyprint.asm	/^     b53:	89 d2                	mov    %edx,%edx$/;"	l
b53	wc.asm	/^ b53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b54	echo.asm	/^ b54:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b54	imshow.asm	/^ b54:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b54	ln.asm	/^ b54:	00 00 00 $/;"	l
b54	sh.asm	/^     b54:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
b55	bad_mmap.asm	/^ b55:	48 01 d0             	add    %rdx,%rax$/;"	l
b55	cat.asm	/^ b55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b55	divide.asm	/^ b55:	00 00 00 $/;"	l
b55	eager_mmap.asm	/^ b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b55	lazy_mmap.asm	/^ b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b55	prettyprint.asm	/^     b55:	48 01 d0             	add    %rdx,%rax$/;"	l
b55	stressfs.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b55	zombie.asm	/^ b55:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b56	kill.asm	/^ b56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b56	usertests.asm	/^     b56:	00 00 00 $/;"	l
b57	echo.asm	/^ b57:	72 65                	jb     bbe <malloc+0xfa>$/;"	l
b57	init.asm	/^ b57:	75 27                	jne    b80 <free+0x113>$/;"	l
b57	ln.asm	/^ b57:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b57	wc.asm	/^ b57:	48 8b 00             	mov    (%rax),%rax$/;"	l
b58	bad_mmap.asm	/^ b58:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b58	divide.asm	/^ b58:	ff d0                	callq  *%rax$/;"	l
b58	grep.asm	/^ b58:	0f 85 a5 00 00 00    	jne    c03 <printf+0x2ab>$/;"	l
b58	prettyprint.asm	/^     b58:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b58	sh.asm	/^     b58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b58	stressfs.asm	/^ b58:	eb 0b                	jmp    b65 <free+0x11e>$/;"	l
b58	zombie.asm	/^ b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	cat.asm	/^ b59:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b59	eager_mmap.asm	/^ b59:	48 8b 00             	mov    (%rax),%rax$/;"	l
b59	echo.asm	/^ b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	init.asm	/^ b59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b59	lazy_mmap.asm	/^ b59:	48 8b 00             	mov    (%rax),%rax$/;"	l
b59	ls.asm	/^     b59:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b59	mkdir.asm	/^ b59:	00 00 00 $/;"	l
b59	rm.asm	/^ b59:	00 00 00 $/;"	l
b59	usertests.asm	/^     b59:	8b 00                	mov    (%rax),%eax$/;"	l
b5a	divide.asm	/^ b5a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
b5a	imshow.asm	/^ b5a:	89 d6                	mov    %edx,%esi$/;"	l
b5a	kill.asm	/^ b5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5a	ln.asm	/^ b5a:	48 b8 c0 0e 00 00 00 	movabs $0xec0,%rax$/;"	l
b5a	stressfs.asm	/^ b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b5a	wc.asm	/^ b5a:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
b5b	usertests.asm	/^     b5b:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
b5c	bad_mmap.asm	/^ b5c:	75 27                	jne    b85 <free+0x113>$/;"	l
b5c	cat.asm	/^ b5c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
b5c	eager_mmap.asm	/^ b5c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5c	imshow.asm	/^ b5c:	89 c7                	mov    %eax,%edi$/;"	l
b5c	lazy_mmap.asm	/^ b5c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5c	mkdir.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	rm.asm	/^ b5c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b5c	sh.asm	/^     b5c:	48 ba 03 1e 00 00 00 	movabs $0x1e03,%rdx$/;"	l
b5c	zombie.asm	/^ b5c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
b5d	echo.asm	/^ b5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b5d	init.asm	/^ b5d:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b5d	kill.asm	/^ b5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b5e	bad_mmap.asm	/^ b5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b5e	grep.asm	/^ b5e:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b5e	imshow.asm	/^ b5e:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b5e	ls.asm	/^     b5e:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b5e	prettyprint.asm	/^     b5e:	83 c2 08             	add    $0x8,%edx$/;"	l
b5e	stressfs.asm	/^ b5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b5e	usertests.asm	/^     b5e:	48 be a9 6b 00 00 00 	movabs $0x6ba9,%rsi$/;"	l
b5e	wc.asm	/^ b5e:	76 ba                	jbe    b1a <free+0x2b>$/;"	l
b5f	eager_mmap.asm	/^ b5f:	01 c2                	add    %eax,%edx$/;"	l
b5f	lazy_mmap.asm	/^ b5f:	01 c2                	add    %eax,%edx$/;"	l
b5f	mkdir.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b5f	rm.asm	/^ b5f:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6	divide.asm	/^  b6:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6	echo.asm	/^  b6:	48 89 fe             	mov    %rdi,%rsi$/;"	l
b6	ln.asm	/^  b6:	55                   	push   %rbp$/;"	l
b6	zombie.asm	/^  b6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
b60	echo.asm	/^ b60:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b60	init.asm	/^ b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b60	kill.asm	/^ b60:	72 65                	jb     bc7 <malloc+0xfa>$/;"	l
b60	wc.asm	/^ b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b60	zombie.asm	/^ b60:	eb 4e                	jmp    bb0 <malloc+0x148>$/;"	l
b61	divide.asm	/^ b61:	00 00 00 $/;"	l
b61	eager_mmap.asm	/^ b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b61	lazy_mmap.asm	/^ b61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b61	ln.asm	/^ b61:	00 00 00 $/;"	l
b61	prettyprint.asm	/^     b61:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b62	bad_mmap.asm	/^ b62:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b62	kill.asm	/^ b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b62	stressfs.asm	/^ b62:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b62	zombie.asm	/^ b62:	48 b8 30 0e 00 00 00 	movabs $0xe30,%rax$/;"	l
b63	cat.asm	/^ b63:	00 00 00 $/;"	l
b63	echo.asm	/^ b63:	75 10                	jne    b75 <malloc+0xb1>$/;"	l
b63	ls.asm	/^     b63:	89 c7                	mov    %eax,%edi$/;"	l
b63	sh.asm	/^     b63:	00 00 00 $/;"	l
b64	divide.asm	/^ b64:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
b64	grep.asm	/^ b64:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b64	init.asm	/^ b64:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b64	ln.asm	/^ b64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b64	wc.asm	/^ b64:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b65	bad_mmap.asm	/^ b65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b65	eager_mmap.asm	/^ b65:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b65	echo.asm	/^ b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b65	imshow.asm	/^ b65:	00 00 00 $/;"	l
b65	lazy_mmap.asm	/^ b65:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b65	ls.asm	/^     b65:	48 b8 b0 08 00 00 00 	movabs $0x8b0,%rax$/;"	l
b65	stressfs.asm	/^ b65:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
b65	usertests.asm	/^     b65:	00 00 00 $/;"	l
b66	cat.asm	/^ b66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b66	kill.asm	/^ b66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b66	mkdir.asm	/^ b66:	00 00 00 $/;"	l
b66	rm.asm	/^ b66:	00 00 00 $/;"	l
b66	sh.asm	/^     b66:	48 89 ce             	mov    %rcx,%rsi$/;"	l
b67	grep.asm	/^ b67:	73 23                	jae    b8c <printf+0x234>$/;"	l
b67	init.asm	/^ b67:	01 c2                	add    %eax,%edx$/;"	l
b67	prettyprint.asm	/^     b67:	eb 12                	jmp    b7b <printf+0x1d4>$/;"	l
b67	wc.asm	/^ b67:	89 c0                	mov    %eax,%eax$/;"	l
b68	eager_mmap.asm	/^ b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b68	imshow.asm	/^ b68:	ff d0                	callq  *%rax$/;"	l
b68	lazy_mmap.asm	/^ b68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b68	usertests.asm	/^     b68:	89 c7                	mov    %eax,%edi$/;"	l
b69	bad_mmap.asm	/^ b69:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b69	echo.asm	/^ b69:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b69	grep.asm	/^ b69:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b69	init.asm	/^ b69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b69	kill.asm	/^ b69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b69	mkdir.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	prettyprint.asm	/^     b69:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b69	rm.asm	/^ b69:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b69	sh.asm	/^     b69:	48 89 c7             	mov    %rax,%rdi$/;"	l
b69	wc.asm	/^ b69:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b69	zombie.asm	/^ b69:	00 00 00 $/;"	l
b6a	cat.asm	/^ b6a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b6a	imshow.asm	/^ b6a:	eb 38                	jmp    ba4 <printf+0x373>$/;"	l
b6a	usertests.asm	/^     b6a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b6b	divide.asm	/^ b6b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
b6b	ln.asm	/^ b6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	bad_mmap.asm	/^ b6c:	01 c2                	add    %eax,%edx$/;"	l
b6c	eager_mmap.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6c	echo.asm	/^ b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b6c	imshow.asm	/^ b6c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b6c	kill.asm	/^ b6c:	75 10                	jne    b7e <malloc+0xb1>$/;"	l
b6c	lazy_mmap.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6c	ls.asm	/^     b6c:	00 00 00 $/;"	l
b6c	mkdir.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	rm.asm	/^ b6c:	48 b8 e0 0e 00 00 00 	movabs $0xee0,%rax$/;"	l
b6c	sh.asm	/^     b6c:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
b6c	stressfs.asm	/^ b6c:	00 00 00 $/;"	l
b6c	zombie.asm	/^ b6c:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6d	cat.asm	/^ b6d:	90                   	nop$/;"	l
b6d	init.asm	/^ b6d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b6d	wc.asm	/^ b6d:	48 89 c2             	mov    %rax,%rdx$/;"	l
b6e	bad_mmap.asm	/^ b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b6e	cat.asm	/^ b6e:	c9                   	leaveq $/;"	l
b6e	kill.asm	/^ b6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b6f	cat.asm	/^ b6f:	c3                   	retq   $/;"	l
b6f	eager_mmap.asm	/^ b6f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b6f	lazy_mmap.asm	/^ b6f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b6f	ln.asm	/^ b6f:	48 8b 00             	mov    (%rax),%rax$/;"	l
b6f	ls.asm	/^     b6f:	ff d0                	callq  *%rax$/;"	l
b6f	stressfs.asm	/^ b6f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b6f	usertests.asm	/^     b6f:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
b6f	zombie.asm	/^ b6f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
b7	cat.asm	/^  b7:	ff d0                	callq  *%rax$/;"	l
b7	eager_mmap.asm	/^  b7:	00 00 00 $/;"	l
b7	forktest.asm	/^  b7:	ff d2                	callq  *%rdx$/;"	l
b7	grep.asm	/^  b7:	48 b8 a2 05 00 00 00 	movabs $0x5a2,%rax$/;"	l
b7	imshow.asm	/^  b7:	48 b8 62 06 00 00 00 	movabs $0x662,%rax$/;"	l
b7	init.asm	/^  b7:	48 bf 6d 0d 00 00 00 	movabs $0xd6d,%rdi$/;"	l
b7	lazy_mmap.asm	/^  b7:	00 00 00 $/;"	l
b7	ln.asm	/^  b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7	mkdir.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	prettyprint.asm	/^      b7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
b7	rm.asm	/^  b7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7	stressfs.asm	/^  b7:	0f b6 45 e8          	movzbl -0x18(%rbp),%eax$/;"	l
b7	wc.asm	/^  b7:	48 be a0 10 00 00 00 	movabs $0x10a0,%rsi$/;"	l
b70	cat.asm	/^ b70:	55                   	push   %rbp$/;"	l
b70	echo.asm	/^ b70:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b70	grep.asm	/^ b70:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b70	init.asm	/^ b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b70	prettyprint.asm	/^     b70:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b70	wc.asm	/^ b70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b71	cat.asm	/^ b71:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b71	divide.asm	/^ b71:	48 63 d0             	movslq %eax,%rdx$/;"	l
b71	ls.asm	/^     b71:	e9 7a 01 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
b72	bad_mmap.asm	/^ b72:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b72	eager_mmap.asm	/^ b72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b72	imshow.asm	/^ b72:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
b72	kill.asm	/^ b72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b72	lazy_mmap.asm	/^ b72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b72	ln.asm	/^ b72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b73	echo.asm	/^ b73:	eb 2e                	jmp    ba3 <malloc+0xdf>$/;"	l
b73	mkdir.asm	/^ b73:	00 00 00 $/;"	l
b73	rm.asm	/^ b73:	00 00 00 $/;"	l
b73	sh.asm	/^     b73:	00 00 00 $/;"	l
b73	stressfs.asm	/^ b73:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b73	zombie.asm	/^ b73:	75 23                	jne    b98 <malloc+0x130>$/;"	l
b74	cat.asm	/^ b74:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b74	divide.asm	/^ b74:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
b74	init.asm	/^ b74:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b74	prettyprint.asm	/^     b74:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b74	wc.asm	/^ b74:	48 01 c2             	add    %rax,%rdx$/;"	l
b75	bad_mmap.asm	/^ b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b75	echo.asm	/^ b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b75	kill.asm	/^ b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b75	zombie.asm	/^ b75:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b76	eager_mmap.asm	/^ b76:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b76	grep.asm	/^ b76:	89 d2                	mov    %edx,%edx$/;"	l
b76	lazy_mmap.asm	/^ b76:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b76	ln.asm	/^ b76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b76	ls.asm	/^     b76:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
b76	mkdir.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	rm.asm	/^ b76:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
b76	sh.asm	/^     b76:	ff d0                	callq  *%rax$/;"	l
b76	stressfs.asm	/^ b76:	90                   	nop$/;"	l
b76	usertests.asm	/^     b76:	00 00 00 $/;"	l
b77	imshow.asm	/^ b77:	89 c7                	mov    %eax,%edi$/;"	l
b77	init.asm	/^ b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b77	stressfs.asm	/^ b77:	c9                   	leaveq $/;"	l
b77	wc.asm	/^ b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b78	cat.asm	/^ b78:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b78	grep.asm	/^ b78:	48 01 d0             	add    %rdx,%rax$/;"	l
b78	sh.asm	/^     b78:	85 c0                	test   %eax,%eax$/;"	l
b78	stressfs.asm	/^ b78:	c3                   	retq   $/;"	l
b78	zombie.asm	/^ b78:	89 c7                	mov    %eax,%edi$/;"	l
b79	bad_mmap.asm	/^ b79:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b79	eager_mmap.asm	/^ b79:	eb 0e                	jmp    b89 <free+0xcf>$/;"	l
b79	echo.asm	/^ b79:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b79	imshow.asm	/^ b79:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b79	kill.asm	/^ b79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b79	lazy_mmap.asm	/^ b79:	eb 0e                	jmp    b89 <free+0xcf>$/;"	l
b79	stressfs.asm	/^ b79:	55                   	push   %rbp$/;"	l
b79	usertests.asm	/^     b79:	ff d1                	callq  *%rcx$/;"	l
b7a	ln.asm	/^ b7a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b7a	sh.asm	/^     b7a:	74 58                	je     bd4 <parseline+0x110>$/;"	l
b7a	stressfs.asm	/^ b7a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b7a	zombie.asm	/^ b7a:	48 b8 ef 09 00 00 00 	movabs $0x9ef,%rax$/;"	l
b7b	cat.asm	/^ b7b:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b7b	divide.asm	/^ b7b:	48 01 d0             	add    %rdx,%rax$/;"	l
b7b	eager_mmap.asm	/^ b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7b	grep.asm	/^ b7b:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b7b	init.asm	/^ b7b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b7b	lazy_mmap.asm	/^ b7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7b	prettyprint.asm	/^     b7b:	8b 30                	mov    (%rax),%esi$/;"	l
b7b	usertests.asm	/^     b7b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
b7b	wc.asm	/^ b7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
b7c	bad_mmap.asm	/^ b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7c	echo.asm	/^ b7c:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b7c	kill.asm	/^ b7c:	eb 2e                	jmp    bac <malloc+0xdf>$/;"	l
b7c	sh.asm	/^     b7c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
b7d	ln.asm	/^ b7d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b7d	ls.asm	/^     b7d:	0f 85 a5 00 00 00    	jne    c28 <printf+0x2ab>$/;"	l
b7d	mkdir.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	prettyprint.asm	/^     b7d:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b7d	rm.asm	/^ b7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b7d	stressfs.asm	/^ b7d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
b7e	divide.asm	/^ b7e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
b7e	init.asm	/^ b7e:	eb 0b                	jmp    b8b <free+0x11e>$/;"	l
b7e	kill.asm	/^ b7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b7e	wc.asm	/^ b7e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
b7f	eager_mmap.asm	/^ b7f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b7f	echo.asm	/^ b7f:	89 c2                	mov    %eax,%edx$/;"	l
b7f	lazy_mmap.asm	/^ b7f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b8	kill.asm	/^  b8:	89 d1                	mov    %edx,%ecx$/;"	l
b80	bad_mmap.asm	/^ b80:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b80	imshow.asm	/^ b80:	00 00 00 $/;"	l
b80	init.asm	/^ b80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b80	ln.asm	/^ b80:	72 65                	jb     be7 <malloc+0xfa>$/;"	l
b80	sh.asm	/^     b80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b81	divide.asm	/^ b81:	84 c0                	test   %al,%al$/;"	l
b81	echo.asm	/^ b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b81	grep.asm	/^ b81:	83 c2 08             	add    $0x8,%edx$/;"	l
b81	mkdir.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	rm.asm	/^ b81:	48 8b 00             	mov    (%rax),%rax$/;"	l
b81	stressfs.asm	/^ b81:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
b81	wc.asm	/^ b81:	75 2d                	jne    bb0 <free+0xc1>$/;"	l
b81	zombie.asm	/^ b81:	00 00 00 $/;"	l
b82	cat.asm	/^ b82:	77 07                	ja     b8b <morecore+0x1b>$/;"	l
b82	eager_mmap.asm	/^ b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b82	kill.asm	/^ b82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b82	lazy_mmap.asm	/^ b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b82	ln.asm	/^ b82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b82	usertests.asm	/^     b82:	00 00 00 $/;"	l
b83	bad_mmap.asm	/^ b83:	eb 0b                	jmp    b90 <free+0x11e>$/;"	l
b83	divide.asm	/^ b83:	0f 85 fc fc ff ff    	jne    885 <printf+0x9e>$/;"	l
b83	imshow.asm	/^ b83:	ff d0                	callq  *%rax$/;"	l
b83	ls.asm	/^     b83:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
b83	prettyprint.asm	/^     b83:	b9 01 00 00 00       	mov    $0x1,%ecx$/;"	l
b83	wc.asm	/^ b83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b84	cat.asm	/^ b84:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b84	grep.asm	/^ b84:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
b84	init.asm	/^ b84:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b84	mkdir.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	rm.asm	/^ b84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b84	sh.asm	/^     b84:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
b84	stressfs.asm	/^ b84:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
b84	zombie.asm	/^ b84:	ff d0                	callq  *%rax$/;"	l
b85	bad_mmap.asm	/^ b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b85	echo.asm	/^ b85:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b85	imshow.asm	/^ b85:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
b85	kill.asm	/^ b85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
b85	usertests.asm	/^     b85:	ff d0                	callq  *%rax$/;"	l
b86	eager_mmap.asm	/^ b86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b86	lazy_mmap.asm	/^ b86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b86	ln.asm	/^ b86:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b86	zombie.asm	/^ b86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b87	usertests.asm	/^     b87:	81 7d fc 00 02 00 00 	cmpl   $0x200,-0x4(%rbp)$/;"	l
b87	wc.asm	/^ b87:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
b88	echo.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	init.asm	/^ b88:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b88	kill.asm	/^ b88:	89 c2                	mov    %eax,%edx$/;"	l
b88	mkdir.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b88	prettyprint.asm	/^     b88:	ba 0a 00 00 00       	mov    $0xa,%edx$/;"	l
b88	rm.asm	/^ b88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	bad_mmap.asm	/^ b89:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
b89	divide.asm	/^ b89:	90                   	nop$/;"	l
b89	eager_mmap.asm	/^ b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	lazy_mmap.asm	/^ b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b89	ln.asm	/^ b89:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b89	ls.asm	/^     b89:	83 f8 30             	cmp    $0x30,%eax$/;"	l
b89	sh.asm	/^     b89:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
b8a	divide.asm	/^ b8a:	c9                   	leaveq $/;"	l
b8a	grep.asm	/^ b8a:	eb 12                	jmp    b9e <printf+0x246>$/;"	l
b8a	kill.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	wc.asm	/^ b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8a	zombie.asm	/^ b8a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
b8b	cat.asm	/^ b8b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b8b	divide.asm	/^ b8b:	c3                   	retq   $/;"	l
b8b	imshow.asm	/^ b8b:	0f be d0             	movsbl %al,%edx$/;"	l
b8b	init.asm	/^ b8b:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
b8b	stressfs.asm	/^ b8b:	77 07                	ja     b94 <morecore+0x1b>$/;"	l
b8c	divide.asm	/^ b8c:	55                   	push   %rbp$/;"	l
b8c	echo.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	grep.asm	/^ b8c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
b8c	ln.asm	/^ b8c:	75 10                	jne    b9e <malloc+0xb1>$/;"	l
b8c	ls.asm	/^     b8c:	73 23                	jae    bb1 <printf+0x234>$/;"	l
b8c	mkdir.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8c	rm.asm	/^ b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	bad_mmap.asm	/^ b8d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b8d	divide.asm	/^ b8d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
b8d	eager_mmap.asm	/^ b8d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	lazy_mmap.asm	/^ b8d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b8d	prettyprint.asm	/^     b8d:	89 c7                	mov    %eax,%edi$/;"	l
b8d	stressfs.asm	/^ b8d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
b8e	cat.asm	/^ b8e:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b8e	imshow.asm	/^ b8e:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
b8e	kill.asm	/^ b8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b8e	ln.asm	/^ b8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b8e	ls.asm	/^     b8e:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
b8e	sh.asm	/^     b8e:	48 89 c7             	mov    %rax,%rdi$/;"	l
b8e	usertests.asm	/^     b8e:	74 38                	je     bc8 <writetest1+0x22f>$/;"	l
b8e	wc.asm	/^ b8e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b8f	echo.asm	/^ b8f:	89 c0                	mov    %eax,%eax$/;"	l
b8f	mkdir.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	prettyprint.asm	/^     b8f:	48 b8 da 08 00 00 00 	movabs $0x8da,%rax$/;"	l
b8f	rm.asm	/^ b8f:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b8f	zombie.asm	/^ b8f:	75 07                	jne    b98 <malloc+0x130>$/;"	l
b9	bad_mmap.asm	/^  b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b9	cat.asm	/^  b9:	90                   	nop$/;"	l
b9	divide.asm	/^  b9:	48 89 c7             	mov    %rax,%rdi$/;"	l
b9	echo.asm	/^  b9:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
b9	forktest.asm	/^  b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
b9	ls.asm	/^      b9:	89 d3                	mov    %edx,%ebx$/;"	l
b9	sh.asm	/^      b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b90	bad_mmap.asm	/^ b90:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
b90	divide.asm	/^ b90:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
b90	eager_mmap.asm	/^ b90:	89 c0                	mov    %eax,%eax$/;"	l
b90	lazy_mmap.asm	/^ b90:	89 c0                	mov    %eax,%eax$/;"	l
b90	usertests.asm	/^     b90:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
b91	cat.asm	/^ b91:	89 c7                	mov    %eax,%edi$/;"	l
b91	echo.asm	/^ b91:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b91	kill.asm	/^ b91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b91	sh.asm	/^     b91:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
b91	wc.asm	/^ b91:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b91	zombie.asm	/^ b91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b92	eager_mmap.asm	/^ b92:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b92	init.asm	/^ b92:	00 00 00 $/;"	l
b92	lazy_mmap.asm	/^ b92:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b92	ln.asm	/^ b92:	48 8b 10             	mov    (%rax),%rdx$/;"	l
b92	mkdir.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b92	rm.asm	/^ b92:	72 65                	jb     bf9 <malloc+0xfa>$/;"	l
b93	cat.asm	/^ b93:	48 b8 74 05 00 00 00 	movabs $0x574,%rax$/;"	l
b93	grep.asm	/^ b93:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
b94	divide.asm	/^ b94:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
b94	imshow.asm	/^ b94:	89 d6                	mov    %edx,%esi$/;"	l
b94	mkdir.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	rm.asm	/^ b94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b94	stressfs.asm	/^ b94:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
b94	wc.asm	/^ b94:	01 c2                	add    %eax,%edx$/;"	l
b95	echo.asm	/^ b95:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b95	init.asm	/^ b95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b95	kill.asm	/^ b95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b95	ln.asm	/^ b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b95	ls.asm	/^     b95:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
b96	eager_mmap.asm	/^ b96:	48 89 c2             	mov    %rax,%rdx$/;"	l
b96	imshow.asm	/^ b96:	89 c7                	mov    %eax,%edi$/;"	l
b96	lazy_mmap.asm	/^ b96:	48 89 c2             	mov    %rax,%rdx$/;"	l
b96	prettyprint.asm	/^     b96:	00 00 00 $/;"	l
b96	wc.asm	/^ b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
b96	zombie.asm	/^ b96:	eb 18                	jmp    bb0 <malloc+0x148>$/;"	l
b97	bad_mmap.asm	/^ b97:	00 00 00 $/;"	l
b97	grep.asm	/^ b97:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
b97	stressfs.asm	/^ b97:	c1 e0 04             	shl    $0x4,%eax$/;"	l
b97	usertests.asm	/^     b97:	00 00 00 $/;"	l
b98	divide.asm	/^ b98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
b98	imshow.asm	/^ b98:	48 b8 34 07 00 00 00 	movabs $0x734,%rax$/;"	l
b98	kill.asm	/^ b98:	89 c0                	mov    %eax,%eax$/;"	l
b98	mkdir.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	rm.asm	/^ b98:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
b98	sh.asm	/^     b98:	00 00 00 $/;"	l
b98	zombie.asm	/^ b98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	eager_mmap.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	echo.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	init.asm	/^ b99:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b99	lazy_mmap.asm	/^ b99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b99	ln.asm	/^ b99:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b99	prettyprint.asm	/^     b99:	ff d0                	callq  *%rax$/;"	l
b9a	bad_mmap.asm	/^ b9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
b9a	cat.asm	/^ b9a:	00 00 00 $/;"	l
b9a	kill.asm	/^ b9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
b9a	stressfs.asm	/^ b9a:	89 c7                	mov    %eax,%edi$/;"	l
b9a	usertests.asm	/^     b9a:	8b 00                	mov    (%rax),%eax$/;"	l
b9a	wc.asm	/^ b9a:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
b9b	ls.asm	/^     b9b:	89 d2                	mov    %edx,%edx$/;"	l
b9b	mkdir.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	prettyprint.asm	/^     b9b:	e9 7a 01 00 00       	jmpq   d1a <printf+0x373>$/;"	l
b9b	rm.asm	/^ b9b:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
b9b	sh.asm	/^     b9b:	ff d0                	callq  *%rax$/;"	l
b9c	divide.asm	/^ b9c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
b9c	init.asm	/^ b9c:	90                   	nop$/;"	l
b9c	ln.asm	/^ b9c:	eb 2e                	jmp    bcc <malloc+0xdf>$/;"	l
b9c	stressfs.asm	/^ b9c:	48 b8 7d 05 00 00 00 	movabs $0x57d,%rax$/;"	l
b9c	usertests.asm	/^     b9c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
b9c	zombie.asm	/^ b9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
b9d	cat.asm	/^ b9d:	ff d0                	callq  *%rax$/;"	l
b9d	eager_mmap.asm	/^ b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	echo.asm	/^ b9d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
b9d	init.asm	/^ b9d:	c9                   	leaveq $/;"	l
b9d	lazy_mmap.asm	/^ b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	ls.asm	/^     b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
b9d	sh.asm	/^     b9d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
b9d	wc.asm	/^ b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	bad_mmap.asm	/^ b9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
b9e	grep.asm	/^ b9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
b9e	init.asm	/^ b9e:	c3                   	retq   $/;"	l
b9e	kill.asm	/^ b9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
b9e	ln.asm	/^ b9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
b9e	mkdir.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9e	rm.asm	/^ b9e:	75 10                	jne    bb0 <malloc+0xb1>$/;"	l
b9f	cat.asm	/^ b9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
b9f	imshow.asm	/^ b9f:	00 00 00 $/;"	l
b9f	init.asm	/^ b9f:	55                   	push   %rbp$/;"	l
b9f	usertests.asm	/^     b9f:	48 be c6 6b 00 00 00 	movabs $0x6bc6,%rsi$/;"	l
ba	cat.asm	/^  ba:	c9                   	leaveq $/;"	l
ba	eager_mmap.asm	/^  ba:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ba	kill.asm	/^  ba:	fc                   	cld    $/;"	l
ba	lazy_mmap.asm	/^  ba:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ba	ln.asm	/^  ba:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ba	mkdir.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	rm.asm	/^  ba:	7c 8e                	jl     4a <main+0x4a>$/;"	l
ba	usertests.asm	/^      ba:	00 00 00 $/;"	l
ba	zombie.asm	/^  ba:	eb 0a                	jmp    c6 <strcmp+0x1c>$/;"	l
ba0	divide.asm	/^ ba0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ba0	eager_mmap.asm	/^ ba0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ba0	echo.asm	/^ ba0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba0	init.asm	/^ ba0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ba0	lazy_mmap.asm	/^ ba0:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ba0	ls.asm	/^     ba0:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ba0	mkdir.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	prettyprint.asm	/^     ba0:	83 bd 3c ff ff ff 73 	cmpl   $0x73,-0xc4(%rbp)$/;"	l
ba0	rm.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba0	zombie.asm	/^ ba0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba1	bad_mmap.asm	/^ ba1:	90                   	nop$/;"	l
ba1	grep.asm	/^ ba1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
ba1	sh.asm	/^     ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ba1	wc.asm	/^ ba1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba2	bad_mmap.asm	/^ ba2:	c9                   	leaveq $/;"	l
ba2	imshow.asm	/^ ba2:	ff d0                	callq  *%rax$/;"	l
ba2	kill.asm	/^ ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba2	ln.asm	/^ ba2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ba3	bad_mmap.asm	/^ ba3:	c3                   	retq   $/;"	l
ba3	cat.asm	/^ ba3:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
ba3	echo.asm	/^ ba3:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
ba3	init.asm	/^ ba3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ba3	stressfs.asm	/^ ba3:	00 00 00 $/;"	l
ba4	bad_mmap.asm	/^ ba4:	55                   	push   %rbp$/;"	l
ba4	divide.asm	/^ ba4:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
ba4	eager_mmap.asm	/^ ba4:	75 27                	jne    bcd <free+0x113>$/;"	l
ba4	imshow.asm	/^ ba4:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ba4	lazy_mmap.asm	/^ ba4:	75 27                	jne    bcd <free+0x113>$/;"	l
ba4	mkdir.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	rm.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	wc.asm	/^ ba4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ba4	zombie.asm	/^ ba4:	48 8b 00             	mov    (%rax),%rax$/;"	l
ba5	bad_mmap.asm	/^ ba5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ba5	ln.asm	/^ ba5:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ba5	sh.asm	/^     ba5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ba6	eager_mmap.asm	/^ ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba6	kill.asm	/^ ba6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ba6	lazy_mmap.asm	/^ ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ba6	ls.asm	/^     ba6:	83 c2 08             	add    $0x8,%edx$/;"	l
ba6	stressfs.asm	/^ ba6:	ff d0                	callq  *%rax$/;"	l
ba6	usertests.asm	/^     ba6:	00 00 00 $/;"	l
ba7	init.asm	/^ ba7:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ba7	mkdir.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	prettyprint.asm	/^     ba7:	0f 85 a5 00 00 00    	jne    c52 <printf+0x2ab>$/;"	l
ba7	rm.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	wc.asm	/^ ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ba7	zombie.asm	/^ ba7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba8	bad_mmap.asm	/^ ba8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ba8	cat.asm	/^ ba8:	75 07                	jne    bb1 <morecore+0x41>$/;"	l
ba8	grep.asm	/^ ba8:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
ba8	ln.asm	/^ ba8:	89 c2                	mov    %eax,%edx$/;"	l
ba8	sh.asm	/^     ba8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ba8	stressfs.asm	/^ ba8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ba9	kill.asm	/^ ba9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ba9	ls.asm	/^     ba9:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ba9	usertests.asm	/^     ba9:	89 c7                	mov    %eax,%edi$/;"	l
baa	cat.asm	/^ baa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
baa	eager_mmap.asm	/^ baa:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
baa	echo.asm	/^ baa:	00 00 00 $/;"	l
baa	init.asm	/^ baa:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
baa	lazy_mmap.asm	/^ baa:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
baa	ln.asm	/^ baa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bab	divide.asm	/^ bab:	00 00 00 $/;"	l
bab	imshow.asm	/^ bab:	00 00 00 $/;"	l
bab	mkdir.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	rm.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	sh.asm	/^     bab:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
bab	usertests.asm	/^     bab:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bab	wc.asm	/^ bab:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bab	zombie.asm	/^ bab:	e9 41 ff ff ff       	jmpq   af1 <malloc+0x89>$/;"	l
bac	bad_mmap.asm	/^ bac:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bac	kill.asm	/^ bac:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bac	stressfs.asm	/^ bac:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	eager_mmap.asm	/^ bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bad	echo.asm	/^ bad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	lazy_mmap.asm	/^ bad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bad	prettyprint.asm	/^     bad:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
bae	divide.asm	/^ bae:	48 8b 00             	mov    (%rax),%rax$/;"	l
bae	imshow.asm	/^ bae:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
bae	ln.asm	/^ bae:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bae	mkdir.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	rm.asm	/^ bae:	eb 2e                	jmp    bde <malloc+0xdf>$/;"	l
bae	wc.asm	/^ bae:	eb 0e                	jmp    bbe <free+0xcf>$/;"	l
baf	bad_mmap.asm	/^ baf:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
baf	cat.asm	/^ baf:	eb 36                	jmp    be7 <morecore+0x77>$/;"	l
baf	grep.asm	/^ baf:	00 $/;"	l
baf	ls.asm	/^     baf:	eb 12                	jmp    bc3 <printf+0x246>$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	cat.asm	/^  bb:	c3                   	retq   $/;"	l
bb	kill.asm	/^  bb:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
bb	ls.asm	/^      bb:	29 c3                	sub    %eax,%ebx$/;"	l
bb	stressfs.asm	/^  bb:	89 c2                	mov    %eax,%edx$/;"	l
bb0	grep.asm	/^ bb0:	75 3e                	jne    bf0 <printf+0x298>$/;"	l
bb0	mkdir.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	rm.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	usertests.asm	/^     bb0:	48 b9 d1 61 00 00 00 	movabs $0x61d1,%rcx$/;"	l
bb0	wc.asm	/^ bb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb0	zombie.asm	/^ bb0:	c9                   	leaveq $/;"	l
bb1	cat.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	divide.asm	/^ bb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bb1	eager_mmap.asm	/^ bb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb1	echo.asm	/^ bb1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bb1	init.asm	/^ bb1:	77 07                	ja     bba <morecore+0x1b>$/;"	l
bb1	lazy_mmap.asm	/^ bb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb1	ln.asm	/^ bb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb1	ls.asm	/^     bb1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bb1	stressfs.asm	/^ bb1:	75 07                	jne    bba <morecore+0x41>$/;"	l
bb1	zombie.asm	/^ bb1:	c3                   	retq   $/;"	l
bb2	grep.asm	/^ bb2:	48 b8 2e 10 00 00 00 	movabs $0x102e,%rax$/;"	l
bb2	sh.asm	/^     bb2:	00 00 00 $/;"	l
bb3	init.asm	/^ bb3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
bb3	kill.asm	/^ bb3:	00 00 00 $/;"	l
bb3	prettyprint.asm	/^     bb3:	83 f8 30             	cmp    $0x30,%eax$/;"	l
bb3	stressfs.asm	/^ bb3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bb4	eager_mmap.asm	/^ bb4:	01 c2                	add    %eax,%edx$/;"	l
bb4	echo.asm	/^ bb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb4	lazy_mmap.asm	/^ bb4:	01 c2                	add    %eax,%edx$/;"	l
bb4	mkdir.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	rm.asm	/^ bb4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb4	wc.asm	/^ bb4:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bb5	cat.asm	/^ bb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bb5	divide.asm	/^ bb5:	eb 2f                	jmp    be6 <free+0x5a>$/;"	l
bb5	imshow.asm	/^ bb5:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
bb5	ln.asm	/^ bb5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bb5	sh.asm	/^     bb5:	ff d0                	callq  *%rax$/;"	l
bb6	bad_mmap.asm	/^ bb6:	77 07                	ja     bbf <morecore+0x1b>$/;"	l
bb6	eager_mmap.asm	/^ bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb6	kill.asm	/^ bb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bb6	lazy_mmap.asm	/^ bb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb6	prettyprint.asm	/^     bb6:	73 23                	jae    bdb <printf+0x234>$/;"	l
bb7	divide.asm	/^ bb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bb7	mkdir.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	rm.asm	/^ bb7:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
bb7	sh.asm	/^     bb7:	48 89 c2             	mov    %rax,%rdx$/;"	l
bb7	usertests.asm	/^     bb7:	00 00 00 $/;"	l
bb7	wc.asm	/^ bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb8	bad_mmap.asm	/^ bb8:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
bb8	echo.asm	/^ bb8:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bb8	ln.asm	/^ bb8:	89 c0                	mov    %eax,%eax$/;"	l
bb8	ls.asm	/^     bb8:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
bb8	prettyprint.asm	/^     bb8:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
bb8	stressfs.asm	/^ bb8:	eb 36                	jmp    bf0 <morecore+0x77>$/;"	l
bb9	cat.asm	/^ bb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bb9	grep.asm	/^ bb9:	00 00 00 $/;"	l
bba	eager_mmap.asm	/^ bba:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bba	init.asm	/^ bba:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bba	kill.asm	/^ bba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bba	lazy_mmap.asm	/^ bba:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bba	ln.asm	/^ bba:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bba	mkdir.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	rm.asm	/^ bba:	89 c2                	mov    %eax,%edx$/;"	l
bba	sh.asm	/^     bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	stressfs.asm	/^ bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bba	usertests.asm	/^     bba:	ff d1                	callq  *%rcx$/;"	l
bbb	divide.asm	/^ bbb:	48 8b 00             	mov    (%rax),%rax$/;"	l
bbb	imshow.asm	/^ bbb:	48 63 d0             	movslq %eax,%rdx$/;"	l
bbb	wc.asm	/^ bbb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bbc	echo.asm	/^ bbc:	eb 4e                	jmp    c0c <malloc+0x148>$/;"	l
bbc	grep.asm	/^ bbc:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bbc	ls.asm	/^     bbc:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
bbc	mkdir.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	rm.asm	/^ bbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbc	usertests.asm	/^     bbc:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bbd	cat.asm	/^ bbd:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bbd	eager_mmap.asm	/^ bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bbd	init.asm	/^ bbd:	c1 e0 04             	shl    $0x4,%eax$/;"	l
bbd	kill.asm	/^ bbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbd	lazy_mmap.asm	/^ bbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bbe	divide.asm	/^ bbe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bbe	echo.asm	/^ bbe:	48 b8 90 0e 00 00 00 	movabs $0xe90,%rax$/;"	l
bbe	imshow.asm	/^ bbe:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
bbe	ln.asm	/^ bbe:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bbe	sh.asm	/^     bbe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bbe	stressfs.asm	/^ bbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bbe	wc.asm	/^ bbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bbf	bad_mmap.asm	/^ bbf:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bbf	prettyprint.asm	/^     bbf:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bc	cat.asm	/^  bc:	55                   	push   %rbp$/;"	l
bc	divide.asm	/^  bc:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
bc	mkdir.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	rm.asm	/^  bc:	48 b8 e0 03 00 00 00 	movabs $0x3e0,%rax$/;"	l
bc	zombie.asm	/^  bc:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
bc0	cat.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	init.asm	/^ bc0:	89 c7                	mov    %eax,%edi$/;"	l
bc0	mkdir.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc0	rm.asm	/^ bc0:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc1	eager_mmap.asm	/^ bc1:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bc1	kill.asm	/^ bc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc1	lazy_mmap.asm	/^ bc1:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bc1	sh.asm	/^     bc1:	48 89 c7             	mov    %rax,%rdi$/;"	l
bc2	bad_mmap.asm	/^ bc2:	c1 e0 04             	shl    $0x4,%eax$/;"	l
bc2	divide.asm	/^ bc2:	77 17                	ja     bdb <free+0x4f>$/;"	l
bc2	init.asm	/^ bc2:	48 b8 a3 05 00 00 00 	movabs $0x5a3,%rax$/;"	l
bc2	ln.asm	/^ bc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc2	stressfs.asm	/^ bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc2	wc.asm	/^ bc2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc3	cat.asm	/^ bc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc3	grep.asm	/^ bc3:	eb 2b                	jmp    bf0 <printf+0x298>$/;"	l
bc3	ls.asm	/^     bc3:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc3	mkdir.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	rm.asm	/^ bc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc3	usertests.asm	/^     bc3:	00 00 00 $/;"	l
bc4	divide.asm	/^ bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bc4	eager_mmap.asm	/^ bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc4	lazy_mmap.asm	/^ bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bc4	sh.asm	/^     bc4:	48 b8 e6 06 00 00 00 	movabs $0x6e6,%rax$/;"	l
bc5	bad_mmap.asm	/^ bc5:	89 c7                	mov    %eax,%edi$/;"	l
bc5	echo.asm	/^ bc5:	00 00 00 $/;"	l
bc5	grep.asm	/^ bc5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bc5	imshow.asm	/^ bc5:	48 01 d0             	add    %rdx,%rax$/;"	l
bc5	kill.asm	/^ bc5:	eb 4e                	jmp    c15 <malloc+0x148>$/;"	l
bc5	prettyprint.asm	/^     bc5:	89 d2                	mov    %edx,%edx$/;"	l
bc5	wc.asm	/^ bc5:	89 c0                	mov    %eax,%eax$/;"	l
bc6	ln.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	ls.asm	/^     bc6:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bc6	stressfs.asm	/^ bc6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bc6	usertests.asm	/^     bc6:	ff d0                	callq  *%rax$/;"	l
bc7	bad_mmap.asm	/^ bc7:	48 b8 a8 05 00 00 00 	movabs $0x5a8,%rax$/;"	l
bc7	cat.asm	/^ bc7:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bc7	kill.asm	/^ bc7:	48 b8 a0 0e 00 00 00 	movabs $0xea0,%rax$/;"	l
bc7	mkdir.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	prettyprint.asm	/^     bc7:	48 01 d0             	add    %rdx,%rax$/;"	l
bc7	rm.asm	/^ bc7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
bc7	wc.asm	/^ bc7:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bc8	divide.asm	/^ bc8:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bc8	eager_mmap.asm	/^ bc8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bc8	echo.asm	/^ bc8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bc8	imshow.asm	/^ bc8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bc8	lazy_mmap.asm	/^ bc8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bc8	usertests.asm	/^     bc8:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bc9	init.asm	/^ bc9:	00 00 00 $/;"	l
bc9	ln.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bc9	stressfs.asm	/^ bc9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bca	mkdir.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bca	prettyprint.asm	/^     bca:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
bca	rm.asm	/^ bca:	89 c0                	mov    %eax,%eax$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon4
bcb	cat.asm	/^ bcb:	48 89 c7             	mov    %rax,%rdi$/;"	l
bcb	eager_mmap.asm	/^ bcb:	eb 0b                	jmp    bd8 <free+0x11e>$/;"	l
bcb	echo.asm	/^ bcb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bcb	imshow.asm	/^ bcb:	84 c0                	test   %al,%al$/;"	l
bcb	lazy_mmap.asm	/^ bcb:	eb 0b                	jmp    bd8 <free+0x11e>$/;"	l
bcb	sh.asm	/^     bcb:	00 00 00 $/;"	l
bcb	wc.asm	/^ bcb:	48 89 c2             	mov    %rax,%rdx$/;"	l
bcc	divide.asm	/^ bcc:	77 2f                	ja     bfd <free+0x71>$/;"	l
bcc	grep.asm	/^ bcc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bcc	init.asm	/^ bcc:	ff d0                	callq  *%rax$/;"	l
bcc	ln.asm	/^ bcc:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
bcc	mkdir.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	rm.asm	/^ bcc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
bcc	stressfs.asm	/^ bcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bcd	eager_mmap.asm	/^ bcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcd	imshow.asm	/^ bcd:	0f 85 fc fc ff ff    	jne    8cf <printf+0x9e>$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	lazy_mmap.asm	/^ bcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcd	ls.asm	/^     bcd:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bce	bad_mmap.asm	/^ bce:	00 00 00 $/;"	l
bce	cat.asm	/^ bce:	48 b8 3e 0a 00 00 00 	movabs $0xa3e,%rax$/;"	l
bce	divide.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bce	init.asm	/^ bce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bce	kill.asm	/^ bce:	00 00 00 $/;"	l
bce	sh.asm	/^     bce:	ff d0                	callq  *%rax$/;"	l
bce	wc.asm	/^ bce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bcf	echo.asm	/^ bcf:	75 23                	jne    bf4 <malloc+0x130>$/;"	l
bcf	grep.asm	/^ bcf:	0f be d0             	movsbl %al,%edx$/;"	l
bcf	usertests.asm	/^     bcf:	00 00 00 $/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	cat.asm	/^  bd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd	echo.asm	/^  bd:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
bd	kill.asm	/^  bd:	89 ca                	mov    %ecx,%edx$/;"	l
bd	ls.asm	/^      bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bd	stressfs.asm	/^  bd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
bd	usertests.asm	/^      bd:	ff d2                	callq  *%rdx$/;"	l
bd0	mkdir.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	prettyprint.asm	/^     bd0:	83 c2 08             	add    $0x8,%edx$/;"	l
bd0	rm.asm	/^ bd0:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
bd0	sh.asm	/^     bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bd0	stressfs.asm	/^ bd0:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bd1	bad_mmap.asm	/^ bd1:	ff d0                	callq  *%rax$/;"	l
bd1	eager_mmap.asm	/^ bd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd1	echo.asm	/^ bd1:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bd1	kill.asm	/^ bd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd1	lazy_mmap.asm	/^ bd1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd2	divide.asm	/^ bd2:	48 8b 00             	mov    (%rax),%rax$/;"	l
bd2	grep.asm	/^ bd2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bd2	init.asm	/^ bd2:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
bd2	usertests.asm	/^     bd2:	8b 00                	mov    (%rax),%eax$/;"	l
bd2	wc.asm	/^ bd2:	48 01 d0             	add    %rdx,%rax$/;"	l
bd3	bad_mmap.asm	/^ bd3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bd3	imshow.asm	/^ bd3:	90                   	nop$/;"	l
bd3	ln.asm	/^ bd3:	00 00 00 $/;"	l
bd3	prettyprint.asm	/^     bd3:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
bd4	echo.asm	/^ bd4:	89 c7                	mov    %eax,%edi$/;"	l
bd4	imshow.asm	/^ bd4:	c9                   	leaveq $/;"	l
bd4	kill.asm	/^ bd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bd4	ls.asm	/^     bd4:	00 $/;"	l
bd4	mkdir.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	rm.asm	/^ bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	sh.asm	/^     bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bd4	stressfs.asm	/^ bd4:	48 89 c7             	mov    %rax,%rdi$/;"	l
bd4	usertests.asm	/^     bd4:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
bd5	cat.asm	/^ bd5:	00 00 00 $/;"	l
bd5	divide.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd5	eager_mmap.asm	/^ bd5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bd5	imshow.asm	/^ bd5:	c3                   	retq   $/;"	l
bd5	lazy_mmap.asm	/^ bd5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bd5	ls.asm	/^     bd5:	75 3e                	jne    c15 <printf+0x298>$/;"	l
bd5	wc.asm	/^ bd5:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bd6	echo.asm	/^ bd6:	48 b8 4b 0a 00 00 00 	movabs $0xa4b,%rax$/;"	l
bd6	imshow.asm	/^ bd6:	55                   	push   %rbp$/;"	l
bd6	ln.asm	/^ bd6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
bd7	bad_mmap.asm	/^ bd7:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
bd7	imshow.asm	/^ bd7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bd7	init.asm	/^ bd7:	75 07                	jne    be0 <morecore+0x41>$/;"	l
bd7	ls.asm	/^     bd7:	48 b8 61 10 00 00 00 	movabs $0x1061,%rax$/;"	l
bd7	stressfs.asm	/^ bd7:	48 b8 47 0a 00 00 00 	movabs $0xa47,%rax$/;"	l
bd7	usertests.asm	/^     bd7:	74 45                	je     c1e <writetest1+0x285>$/;"	l
bd8	cat.asm	/^ bd8:	ff d0                	callq  *%rax$/;"	l
bd8	eager_mmap.asm	/^ bd8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
bd8	grep.asm	/^ bd8:	89 d6                	mov    %edx,%esi$/;"	l
bd8	kill.asm	/^ bd8:	75 23                	jne    bfd <malloc+0x130>$/;"	l
bd8	lazy_mmap.asm	/^ bd8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
bd8	mkdir.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	rm.asm	/^ bd8:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bd8	sh.asm	/^     bd8:	c9                   	leaveq $/;"	l
bd9	divide.asm	/^ bd9:	77 22                	ja     bfd <free+0x71>$/;"	l
bd9	init.asm	/^ bd9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bd9	prettyprint.asm	/^     bd9:	eb 12                	jmp    bed <printf+0x246>$/;"	l
bd9	sh.asm	/^     bd9:	c3                   	retq   $/;"	l
bd9	usertests.asm	/^     bd9:	48 b8 40 88 00 00 00 	movabs $0x8840,%rax$/;"	l
bd9	wc.asm	/^ bd9:	75 27                	jne    c02 <free+0x113>$/;"	l
bda	cat.asm	/^ bda:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
bda	grep.asm	/^ bda:	89 c7                	mov    %eax,%edi$/;"	l
bda	imshow.asm	/^ bda:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	kill.asm	/^ bda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bda	ln.asm	/^ bda:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bda	sh.asm	/^     bda:	55                   	push   %rbp$/;"	l
bdb	divide.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdb	mkdir.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	prettyprint.asm	/^     bdb:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
bdb	rm.asm	/^ bdb:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bdb	sh.asm	/^     bdb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bdb	wc.asm	/^ bdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bdc	bad_mmap.asm	/^ bdc:	75 07                	jne    be5 <morecore+0x41>$/;"	l
bdc	grep.asm	/^ bdc:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
bdd	echo.asm	/^ bdd:	00 00 00 $/;"	l
bdd	kill.asm	/^ bdd:	89 c7                	mov    %eax,%edi$/;"	l
bdd	ln.asm	/^ bdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bde	bad_mmap.asm	/^ bde:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bde	imshow.asm	/^ bde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
bde	init.asm	/^ bde:	eb 36                	jmp    c16 <morecore+0x77>$/;"	l
bde	ls.asm	/^     bde:	00 00 00 $/;"	l
bde	mkdir.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	rm.asm	/^ bde:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bde	sh.asm	/^     bde:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bde	stressfs.asm	/^ bde:	00 00 00 $/;"	l
bdf	divide.asm	/^ bdf:	48 8b 00             	mov    (%rax),%rax$/;"	l
bdf	eager_mmap.asm	/^ bdf:	00 00 00 $/;"	l
bdf	kill.asm	/^ bdf:	48 b8 54 0a 00 00 00 	movabs $0xa54,%rax$/;"	l
bdf	lazy_mmap.asm	/^ bdf:	00 00 00 $/;"	l
bdf	wc.asm	/^ bdf:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
be	bad_mmap.asm	/^  be:	48 b9 cd 06 00 00 00 	movabs $0x6cd,%rcx$/;"	l
be	grep.asm	/^  be:	00 00 00 $/;"	l
be	imshow.asm	/^  be:	00 00 00 $/;"	l
be	init.asm	/^  be:	00 00 00 $/;"	l
be	ln.asm	/^  be:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
be	prettyprint.asm	/^      be:	00 00 00 $/;"	l
be	sh.asm	/^      be:	48 b9 cd 16 00 00 00 	movabs $0x16cd,%rcx$/;"	l
be	wc.asm	/^  be:	00 00 00 $/;"	l
be0	echo.asm	/^ be0:	ff d0                	callq  *%rax$/;"	l
be0	init.asm	/^ be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
be0	usertests.asm	/^     be0:	00 00 00 $/;"	l
be1	cat.asm	/^ be1:	00 00 00 $/;"	l
be1	ln.asm	/^ be1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
be1	ls.asm	/^     be1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
be1	stressfs.asm	/^ be1:	ff d0                	callq  *%rax$/;"	l
be2	divide.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	eager_mmap.asm	/^ be2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
be2	echo.asm	/^ be2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
be2	imshow.asm	/^ be2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
be2	lazy_mmap.asm	/^ be2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
be2	prettyprint.asm	/^     be2:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
be2	sh.asm	/^     be2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
be2	wc.asm	/^ be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be3	bad_mmap.asm	/^ be3:	eb 36                	jmp    c1b <morecore+0x77>$/;"	l
be3	grep.asm	/^ be3:	00 00 00 $/;"	l
be3	stressfs.asm	/^ be3:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
be3	usertests.asm	/^     be3:	8b 08                	mov    (%rax),%ecx$/;"	l
be4	cat.asm	/^ be4:	48 8b 00             	mov    (%rax),%rax$/;"	l
be4	init.asm	/^ be4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
be5	bad_mmap.asm	/^ be5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
be5	ln.asm	/^ be5:	eb 4e                	jmp    c35 <malloc+0x148>$/;"	l
be5	mkdir.asm	/^ be5:	00 00 00 $/;"	l
be5	rm.asm	/^ be5:	00 00 00 $/;"	l
be5	usertests.asm	/^     be5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
be6	divide.asm	/^ be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be6	eager_mmap.asm	/^ be6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
be6	echo.asm	/^ be6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
be6	grep.asm	/^ be6:	ff d0                	callq  *%rax$/;"	l
be6	imshow.asm	/^ be6:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
be6	kill.asm	/^ be6:	00 00 00 $/;"	l
be6	lazy_mmap.asm	/^ be6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
be6	prettyprint.asm	/^     be6:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
be6	sh.asm	/^     be6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
be6	wc.asm	/^ be6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
be7	cat.asm	/^ be7:	c9                   	leaveq $/;"	l
be7	ln.asm	/^ be7:	48 b8 d0 0e 00 00 00 	movabs $0xed0,%rax$/;"	l
be8	cat.asm	/^ be8:	c3                   	retq   $/;"	l
be8	grep.asm	/^ be8:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
be8	init.asm	/^ be8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
be8	ls.asm	/^     be8:	eb 2b                	jmp    c15 <printf+0x298>$/;"	l
be8	mkdir.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be8	rm.asm	/^ be8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
be9	bad_mmap.asm	/^ be9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
be9	cat.asm	/^ be9:	55                   	push   %rbp$/;"	l
be9	eager_mmap.asm	/^ be9:	90                   	nop$/;"	l
be9	kill.asm	/^ be9:	ff d0                	callq  *%rax$/;"	l
be9	lazy_mmap.asm	/^ be9:	90                   	nop$/;"	l
be9	wc.asm	/^ be9:	01 c2                	add    %eax,%edx$/;"	l
bea	cat.asm	/^ bea:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bea	divide.asm	/^ bea:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
bea	eager_mmap.asm	/^ bea:	c9                   	leaveq $/;"	l
bea	imshow.asm	/^ bea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bea	lazy_mmap.asm	/^ bea:	c9                   	leaveq $/;"	l
bea	ls.asm	/^     bea:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bea	sh.asm	/^     bea:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
bea	stressfs.asm	/^ bea:	00 00 00 $/;"	l
beb	eager_mmap.asm	/^ beb:	c3                   	retq   $/;"	l
beb	echo.asm	/^ beb:	75 07                	jne    bf4 <malloc+0x130>$/;"	l
beb	kill.asm	/^ beb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
beb	lazy_mmap.asm	/^ beb:	c3                   	retq   $/;"	l
beb	wc.asm	/^ beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bec	eager_mmap.asm	/^ bec:	55                   	push   %rbp$/;"	l
bec	init.asm	/^ bec:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bec	lazy_mmap.asm	/^ bec:	55                   	push   %rbp$/;"	l
bec	mkdir.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	rm.asm	/^ bec:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bec	usertests.asm	/^     bec:	00 00 00 $/;"	l
bed	bad_mmap.asm	/^ bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bed	cat.asm	/^ bed:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bed	eager_mmap.asm	/^ bed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bed	echo.asm	/^ bed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bed	lazy_mmap.asm	/^ bed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bed	prettyprint.asm	/^     bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bed	stressfs.asm	/^ bed:	48 8b 00             	mov    (%rax),%rax$/;"	l
bee	divide.asm	/^ bee:	76 c7                	jbe    bb7 <free+0x2b>$/;"	l
bee	imshow.asm	/^ bee:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
bee	ln.asm	/^ bee:	00 00 00 $/;"	l
bee	sh.asm	/^     bee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
bef	grep.asm	/^ bef:	01 $/;"	l
bef	init.asm	/^ bef:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bef	kill.asm	/^ bef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
bef	mkdir.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	rm.asm	/^ bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bef	usertests.asm	/^     bef:	8b 00                	mov    (%rax),%eax$/;"	l
bef	wc.asm	/^ bef:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	eager_mmap.asm	/^  bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf	kill.asm	/^  bf:	48 89 fe             	mov    %rdi,%rsi$/;"	l
bf	lazy_mmap.asm	/^  bf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf	usertests.asm	/^      bf:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
bf0	divide.asm	/^ bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf0	eager_mmap.asm	/^ bf0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bf0	grep.asm	/^ bf0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
bf0	lazy_mmap.asm	/^ bf0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
bf0	prettyprint.asm	/^     bf0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
bf0	stressfs.asm	/^ bf0:	c9                   	leaveq $/;"	l
bf1	bad_mmap.asm	/^ bf1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
bf1	cat.asm	/^ bf1:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bf1	ln.asm	/^ bf1:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf1	ls.asm	/^     bf1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf1	stressfs.asm	/^ bf1:	c3                   	retq   $/;"	l
bf1	usertests.asm	/^     bf1:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
bf2	echo.asm	/^ bf2:	eb 18                	jmp    c0c <malloc+0x148>$/;"	l
bf2	init.asm	/^ bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf2	sh.asm	/^     bf2:	48 89 d6             	mov    %rdx,%rsi$/;"	l
bf2	stressfs.asm	/^ bf2:	55                   	push   %rbp$/;"	l
bf2	wc.asm	/^ bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf3	mkdir.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	rm.asm	/^ bf3:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf3	stressfs.asm	/^ bf3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
bf4	bad_mmap.asm	/^ bf4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
bf4	cat.asm	/^ bf4:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bf4	divide.asm	/^ bf4:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf4	eager_mmap.asm	/^ bf4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bf4	echo.asm	/^ bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bf4	kill.asm	/^ bf4:	75 07                	jne    bfd <malloc+0x130>$/;"	l
bf4	lazy_mmap.asm	/^ bf4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
bf4	ln.asm	/^ bf4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
bf4	ls.asm	/^     bf4:	0f be d0             	movsbl %al,%edx$/;"	l
bf4	usertests.asm	/^     bf4:	48 be d8 6b 00 00 00 	movabs $0x6bd8,%rsi$/;"	l
bf5	imshow.asm	/^ bf5:	00 00 00 $/;"	l
bf5	sh.asm	/^     bf5:	48 89 c7             	mov    %rax,%rdi$/;"	l
bf6	init.asm	/^ bf6:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bf6	kill.asm	/^ bf6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
bf6	stressfs.asm	/^ bf6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
bf6	wc.asm	/^ bf6:	48 8b 10             	mov    (%rax),%rdx$/;"	l
bf7	bad_mmap.asm	/^ bf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bf7	cat.asm	/^ bf7:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
bf7	divide.asm	/^ bf7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
bf7	eager_mmap.asm	/^ bf7:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
bf7	grep.asm	/^ bf7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
bf7	lazy_mmap.asm	/^ bf7:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
bf7	ls.asm	/^     bf7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
bf7	mkdir.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf7	prettyprint.asm	/^     bf7:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)$/;"	l
bf7	rm.asm	/^ bf7:	eb 4e                	jmp    c47 <malloc+0x148>$/;"	l
bf8	echo.asm	/^ bf8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
bf8	imshow.asm	/^ bf8:	48 8b 00             	mov    (%rax),%rax$/;"	l
bf8	ln.asm	/^ bf8:	75 23                	jne    c1d <malloc+0x130>$/;"	l
bf8	sh.asm	/^     bf8:	48 b8 e5 0e 00 00 00 	movabs $0xee5,%rax$/;"	l
bf9	mkdir.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	rm.asm	/^ bf9:	48 b8 f0 0e 00 00 00 	movabs $0xef0,%rax$/;"	l
bf9	wc.asm	/^ bf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfa	grep.asm	/^ bfa:	84 c0                	test   %al,%al$/;"	l
bfa	init.asm	/^ bfa:	48 89 c7             	mov    %rax,%rdi$/;"	l
bfa	ln.asm	/^ bfa:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
bfa	stressfs.asm	/^ bfa:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
bfb	bad_mmap.asm	/^ bfb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
bfb	cat.asm	/^ bfb:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
bfb	divide.asm	/^ bfb:	76 ba                	jbe    bb7 <free+0x2b>$/;"	l
bfb	imshow.asm	/^ bfb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
bfb	kill.asm	/^ bfb:	eb 18                	jmp    c15 <malloc+0x148>$/;"	l
bfb	usertests.asm	/^     bfb:	00 00 00 $/;"	l
bfc	echo.asm	/^ bfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfc	grep.asm	/^ bfc:	75 c7                	jne    bc5 <printf+0x26d>$/;"	l
bfd	divide.asm	/^ bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
bfd	init.asm	/^ bfd:	48 b8 6d 0a 00 00 00 	movabs $0xa6d,%rax$/;"	l
bfd	kill.asm	/^ bfd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
bfd	ln.asm	/^ bfd:	89 c7                	mov    %eax,%edi$/;"	l
bfd	ls.asm	/^     bfd:	89 d6                	mov    %edx,%esi$/;"	l
bfd	stressfs.asm	/^ bfd:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
bfd	wc.asm	/^ bfd:	48 89 10             	mov    %rdx,(%rax)$/;"	l
bfe	eager_mmap.asm	/^ bfe:	77 07                	ja     c07 <morecore+0x1b>$/;"	l
bfe	grep.asm	/^ bfe:	e9 c8 00 00 00       	jmpq   ccb <printf+0x373>$/;"	l
bfe	lazy_mmap.asm	/^ bfe:	77 07                	ja     c07 <morecore+0x1b>$/;"	l
bfe	prettyprint.asm	/^     bfe:	00 $/;"	l
bfe	usertests.asm	/^     bfe:	89 c7                	mov    %eax,%edi$/;"	l
bff	bad_mmap.asm	/^ bff:	48 89 c7             	mov    %rax,%rdi$/;"	l
bff	cat.asm	/^ bff:	83 c0 01             	add    $0x1,%eax$/;"	l
bff	imshow.asm	/^ bff:	eb 2f                	jmp    c30 <free+0x5a>$/;"	l
bff	ln.asm	/^ bff:	48 b8 74 0a 00 00 00 	movabs $0xa74,%rax$/;"	l
bff	ls.asm	/^     bff:	89 c7                	mov    %eax,%edi$/;"	l
bff	prettyprint.asm	/^     bff:	75 3e                	jne    c3f <printf+0x298>$/;"	l
bff	sh.asm	/^     bff:	00 00 00 $/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	bad_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	eager_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	imshow.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	lazy_mmap.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prettyprint.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bss_end_addr	bootmain.c	/^  uint64 bss_end_addr;$/;"	m	struct:mbheader	file:
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon9	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	bad_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	divide.asm	/^   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c	eager_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
c	imshow.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpunum()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	lazy_mmap.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prettyprint.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	cat.asm	/^  c0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c0	echo.asm	/^  c0:	90                   	nop$/;"	l
c0	forktest.asm	/^  c0:	eb 2b                	jmp    ed <forktest+0x5c>$/;"	l
c0	stressfs.asm	/^  c0:	01 d0                	add    %edx,%eax$/;"	l
c00	eager_mmap.asm	/^ c00:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c00	echo.asm	/^ c00:	48 8b 00             	mov    (%rax),%rax$/;"	l
c00	lazy_mmap.asm	/^ c00:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c00	mkdir.asm	/^ c00:	00 00 00 $/;"	l
c00	rm.asm	/^ c00:	00 00 00 $/;"	l
c00	stressfs.asm	/^ c00:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c00	usertests.asm	/^     c00:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c00	wc.asm	/^ c00:	eb 0b                	jmp    c0d <free+0x11e>$/;"	l
c01	divide.asm	/^ c01:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c01	imshow.asm	/^ c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c01	kill.asm	/^ c01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c01	ls.asm	/^     c01:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c01	prettyprint.asm	/^     c01:	48 b8 e1 13 00 00 00 	movabs $0x13e1,%rax$/;"	l
c02	bad_mmap.asm	/^ c02:	48 b8 72 0a 00 00 00 	movabs $0xa72,%rax$/;"	l
c02	cat.asm	/^ c02:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c02	sh.asm	/^     c02:	ff d0                	callq  *%rax$/;"	l
c02	wc.asm	/^ c02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c03	echo.asm	/^ c03:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c03	grep.asm	/^ c03:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c03	mkdir.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c03	rm.asm	/^ c03:	48 8b 00             	mov    (%rax),%rax$/;"	l
c04	divide.asm	/^ c04:	89 c0                	mov    %eax,%eax$/;"	l
c04	init.asm	/^ c04:	00 00 00 $/;"	l
c04	sh.asm	/^     c04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c04	stressfs.asm	/^ c04:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c05	cat.asm	/^ c05:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c05	imshow.asm	/^ c05:	48 8b 00             	mov    (%rax),%rax$/;"	l
c05	kill.asm	/^ c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c05	usertests.asm	/^     c05:	49 b8 d1 61 00 00 00 	movabs $0x61d1,%r8$/;"	l
c06	divide.asm	/^ c06:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c06	ln.asm	/^ c06:	00 00 00 $/;"	l
c06	mkdir.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	rm.asm	/^ c06:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
c06	wc.asm	/^ c06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c07	eager_mmap.asm	/^ c07:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c07	echo.asm	/^ c07:	e9 41 ff ff ff       	jmpq   b4d <malloc+0x89>$/;"	l
c07	init.asm	/^ c07:	ff d0                	callq  *%rax$/;"	l
c07	lazy_mmap.asm	/^ c07:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c08	imshow.asm	/^ c08:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c08	ls.asm	/^     c08:	00 00 00 $/;"	l
c08	prettyprint.asm	/^     c08:	00 00 00 $/;"	l
c08	sh.asm	/^     c08:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
c08	stressfs.asm	/^ c08:	83 c0 01             	add    $0x1,%eax$/;"	l
c09	bad_mmap.asm	/^ c09:	00 00 00 $/;"	l
c09	init.asm	/^ c09:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c09	kill.asm	/^ c09:	48 8b 00             	mov    (%rax),%rax$/;"	l
c09	ln.asm	/^ c09:	ff d0                	callq  *%rax$/;"	l
c0a	divide.asm	/^ c0a:	48 89 c2             	mov    %rax,%rdx$/;"	l
c0a	eager_mmap.asm	/^ c0a:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c0a	grep.asm	/^ c0a:	75 5d                	jne    c69 <printf+0x311>$/;"	l
c0a	lazy_mmap.asm	/^ c0a:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c0a	mkdir.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	rm.asm	/^ c0a:	75 23                	jne    c2f <malloc+0x130>$/;"	l
c0a	wc.asm	/^ c0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c0b	ln.asm	/^ c0b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0b	ls.asm	/^     c0b:	ff d0                	callq  *%rax$/;"	l
c0b	prettyprint.asm	/^     c0b:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)$/;"	l
c0b	stressfs.asm	/^ c0b:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c0c	bad_mmap.asm	/^ c0c:	ff d0                	callq  *%rax$/;"	l
c0c	cat.asm	/^ c0c:	00 00 00 $/;"	l
c0c	echo.asm	/^ c0c:	c9                   	leaveq $/;"	l
c0c	grep.asm	/^ c0c:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c0c	imshow.asm	/^ c0c:	77 17                	ja     c25 <free+0x4f>$/;"	l
c0c	kill.asm	/^ c0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c0c	mkdir.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	rm.asm	/^ c0c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c0c	sh.asm	/^     c0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c0c	usertests.asm	/^     c0c:	00 00 00 $/;"	l
c0d	divide.asm	/^ c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0d	eager_mmap.asm	/^ c0d:	89 c7                	mov    %eax,%edi$/;"	l
c0d	echo.asm	/^ c0d:	c3                   	retq   $/;"	l
c0d	lazy_mmap.asm	/^ c0d:	89 c7                	mov    %eax,%edi$/;"	l
c0d	ls.asm	/^     c0d:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c0d	wc.asm	/^ c0d:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c0e	bad_mmap.asm	/^ c0e:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c0e	imshow.asm	/^ c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c0e	stressfs.asm	/^ c0e:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c0f	cat.asm	/^ c0f:	48 8b 00             	mov    (%rax),%rax$/;"	l
c0f	eager_mmap.asm	/^ c0f:	48 b8 f0 05 00 00 00 	movabs $0x5f0,%rax$/;"	l
c0f	lazy_mmap.asm	/^ c0f:	48 b8 f0 05 00 00 00 	movabs $0x5f0,%rax$/;"	l
c0f	ln.asm	/^ c0f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c0f	mkdir.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	rm.asm	/^ c0f:	89 c7                	mov    %eax,%edi$/;"	l
c0f	usertests.asm	/^     c0f:	41 ff d0             	callq  *%r8$/;"	l
c1	echo.asm	/^  c1:	c9                   	leaveq $/;"	l
c1	grep.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	imshow.asm	/^  c1:	ff d0                	callq  *%rax$/;"	l
c1	init.asm	/^  c1:	48 b8 53 05 00 00 00 	movabs $0x553,%rax$/;"	l
c1	ls.asm	/^      c1:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1	prettyprint.asm	/^      c1:	ff d2                	callq  *%rdx$/;"	l
c1	wc.asm	/^  c1:	89 c7                	mov    %eax,%edi$/;"	l
c1	zombie.asm	/^  c1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
c10	init.asm	/^ c10:	00 00 00 $/;"	l
c10	kill.asm	/^ c10:	e9 41 ff ff ff       	jmpq   b56 <malloc+0x89>$/;"	l
c10	sh.asm	/^     c10:	48 ba 05 1e 00 00 00 	movabs $0x1e05,%rdx$/;"	l
c11	divide.asm	/^ c11:	48 01 c2             	add    %rax,%rdx$/;"	l
c11	mkdir.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c11	rm.asm	/^ c11:	48 b8 86 0a 00 00 00 	movabs $0xa86,%rax$/;"	l
c12	cat.asm	/^ c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c12	grep.asm	/^ c12:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c12	imshow.asm	/^ c12:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c12	prettyprint.asm	/^     c12:	eb 2b                	jmp    c3f <printf+0x298>$/;"	l
c12	usertests.asm	/^     c12:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c13	init.asm	/^ c13:	48 8b 00             	mov    (%rax),%rax$/;"	l
c14	divide.asm	/^ c14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c14	ln.asm	/^ c14:	75 07                	jne    c1d <malloc+0x130>$/;"	l
c14	ls.asm	/^     c14:	01 $/;"	l
c14	prettyprint.asm	/^     c14:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c14	wc.asm	/^ c14:	00 00 00 $/;"	l
c15	bad_mmap.asm	/^ c15:	00 00 00 $/;"	l
c15	grep.asm	/^ c15:	73 23                	jae    c3a <printf+0x2e2>$/;"	l
c15	kill.asm	/^ c15:	c9                   	leaveq $/;"	l
c15	ls.asm	/^     c15:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c15	stressfs.asm	/^ c15:	00 00 00 $/;"	l
c16	cat.asm	/^ c16:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c16	eager_mmap.asm	/^ c16:	00 00 00 $/;"	l
c16	imshow.asm	/^ c16:	77 2f                	ja     c47 <free+0x71>$/;"	l
c16	init.asm	/^ c16:	c9                   	leaveq $/;"	l
c16	kill.asm	/^ c16:	c3                   	retq   $/;"	l
c16	lazy_mmap.asm	/^ c16:	00 00 00 $/;"	l
c16	ln.asm	/^ c16:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c17	grep.asm	/^ c17:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c17	init.asm	/^ c17:	c3                   	retq   $/;"	l
c17	sh.asm	/^     c17:	00 00 00 $/;"	l
c17	wc.asm	/^ c17:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
c18	bad_mmap.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c18	divide.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c18	imshow.asm	/^ c18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c18	init.asm	/^ c18:	55                   	push   %rbp$/;"	l
c18	mkdir.asm	/^ c18:	00 00 00 $/;"	l
c18	rm.asm	/^ c18:	00 00 00 $/;"	l
c18	stressfs.asm	/^ c18:	48 8b 00             	mov    (%rax),%rax$/;"	l
c19	eager_mmap.asm	/^ c19:	ff d0                	callq  *%rax$/;"	l
c19	init.asm	/^ c19:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c19	lazy_mmap.asm	/^ c19:	ff d0                	callq  *%rax$/;"	l
c19	usertests.asm	/^     c19:	00 00 00 $/;"	l
c1a	sh.asm	/^     c1a:	48 89 ce             	mov    %rcx,%rsi$/;"	l
c1b	bad_mmap.asm	/^ c1b:	c9                   	leaveq $/;"	l
c1b	cat.asm	/^ c1b:	75 4a                	jne    c67 <malloc+0x7e>$/;"	l
c1b	divide.asm	/^ c1b:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c1b	eager_mmap.asm	/^ c1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1b	lazy_mmap.asm	/^ c1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1b	ln.asm	/^ c1b:	eb 18                	jmp    c35 <malloc+0x148>$/;"	l
c1b	mkdir.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	prettyprint.asm	/^     c1b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1b	rm.asm	/^ c1b:	ff d0                	callq  *%rax$/;"	l
c1b	stressfs.asm	/^ c1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c1b	wc.asm	/^ c1b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c1c	bad_mmap.asm	/^ c1c:	c3                   	retq   $/;"	l
c1c	imshow.asm	/^ c1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
c1c	init.asm	/^ c1c:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c1c	ls.asm	/^     c1c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c1c	usertests.asm	/^     c1c:	ff d0                	callq  *%rax$/;"	l
c1d	bad_mmap.asm	/^ c1d:	55                   	push   %rbp$/;"	l
c1d	cat.asm	/^ c1d:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c1d	ln.asm	/^ c1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c1d	mkdir.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	rm.asm	/^ c1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c1d	sh.asm	/^     c1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
c1e	bad_mmap.asm	/^ c1e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c1e	divide.asm	/^ c1e:	75 2d                	jne    c4d <free+0xc1>$/;"	l
c1e	grep.asm	/^ c1e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c1e	prettyprint.asm	/^     c1e:	0f be d0             	movsbl %al,%edx$/;"	l
c1e	usertests.asm	/^     c1e:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
c1e	wc.asm	/^ c1e:	90                   	nop$/;"	l
c1f	eager_mmap.asm	/^ c1f:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c1f	imshow.asm	/^ c1f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c1f	lazy_mmap.asm	/^ c1f:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c1f	ls.asm	/^     c1f:	84 c0                	test   %al,%al$/;"	l
c1f	stressfs.asm	/^ c1f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c1f	wc.asm	/^ c1f:	c9                   	leaveq $/;"	l
c2	echo.asm	/^  c2:	c3                   	retq   $/;"	l
c2	forktest.asm	/^  c2:	48 b8 03 05 00 00 00 	movabs $0x503,%rax$/;"	l
c2	kill.asm	/^  c2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
c2	ln.asm	/^  c2:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
c2	stressfs.asm	/^  c2:	88 45 e8             	mov    %al,-0x18(%rbp)$/;"	l
c20	divide.asm	/^ c20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c20	init.asm	/^ c20:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c20	sh.asm	/^     c20:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
c20	wc.asm	/^ c20:	c3                   	retq   $/;"	l
c21	bad_mmap.asm	/^ c21:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c21	ln.asm	/^ c21:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c21	ls.asm	/^     c21:	75 c7                	jne    bea <printf+0x26d>$/;"	l
c21	mkdir.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	prettyprint.asm	/^     c21:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c21	rm.asm	/^ c21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
c21	wc.asm	/^ c21:	55                   	push   %rbp$/;"	l
c22	usertests.asm	/^     c22:	e9 f2 fe ff ff       	jmpq   b19 <writetest1+0x180>$/;"	l
c22	wc.asm	/^ c22:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c23	imshow.asm	/^ c23:	77 22                	ja     c47 <free+0x71>$/;"	l
c23	init.asm	/^ c23:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c23	ls.asm	/^     c23:	e9 c8 00 00 00       	jmpq   cf0 <printf+0x373>$/;"	l
c24	cat.asm	/^ c24:	00 00 00 $/;"	l
c24	divide.asm	/^ c24:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c24	eager_mmap.asm	/^ c24:	75 07                	jne    c2d <morecore+0x41>$/;"	l
c24	grep.asm	/^ c24:	89 d2                	mov    %edx,%edx$/;"	l
c24	lazy_mmap.asm	/^ c24:	75 07                	jne    c2d <morecore+0x41>$/;"	l
c24	stressfs.asm	/^ c24:	75 4a                	jne    c70 <malloc+0x7e>$/;"	l
c25	bad_mmap.asm	/^ c25:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c25	imshow.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	ln.asm	/^ c25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c25	wc.asm	/^ c25:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c26	eager_mmap.asm	/^ c26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c26	grep.asm	/^ c26:	48 01 d0             	add    %rdx,%rax$/;"	l
c26	init.asm	/^ c26:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c26	lazy_mmap.asm	/^ c26:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c26	mkdir.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	rm.asm	/^ c26:	75 07                	jne    c2f <malloc+0x130>$/;"	l
c26	stressfs.asm	/^ c26:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c27	cat.asm	/^ c27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c27	divide.asm	/^ c27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c27	prettyprint.asm	/^     c27:	89 d6                	mov    %edx,%esi$/;"	l
c27	sh.asm	/^     c27:	00 00 00 $/;"	l
c27	usertests.asm	/^     c27:	90                   	nop$/;"	l
c28	bad_mmap.asm	/^ c28:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c28	ls.asm	/^     c28:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c28	mkdir.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	rm.asm	/^ c28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c28	usertests.asm	/^     c28:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
c29	grep.asm	/^ c29:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c29	imshow.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	ln.asm	/^ c29:	48 8b 00             	mov    (%rax),%rax$/;"	l
c29	prettyprint.asm	/^     c29:	89 c7                	mov    %eax,%edi$/;"	l
c29	wc.asm	/^ c29:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c2a	init.asm	/^ c2a:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c2a	sh.asm	/^     c2a:	ff d0                	callq  *%rax$/;"	l
c2b	bad_mmap.asm	/^ c2b:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c2b	cat.asm	/^ c2b:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c2b	divide.asm	/^ c2b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c2b	eager_mmap.asm	/^ c2b:	eb 36                	jmp    c63 <morecore+0x77>$/;"	l
c2b	lazy_mmap.asm	/^ c2b:	eb 36                	jmp    c63 <morecore+0x77>$/;"	l
c2b	prettyprint.asm	/^     c2b:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
c2b	usertests.asm	/^     c2b:	89 c7                	mov    %eax,%edi$/;"	l
c2c	imshow.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	ln.asm	/^ c2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c2c	sh.asm	/^     c2c:	85 c0                	test   %eax,%eax$/;"	l
c2c	wc.asm	/^ c2c:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
c2d	eager_mmap.asm	/^ c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2d	lazy_mmap.asm	/^ c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2d	mkdir.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	rm.asm	/^ c2d:	eb 18                	jmp    c47 <malloc+0x148>$/;"	l
c2d	stressfs.asm	/^ c2d:	00 00 00 $/;"	l
c2d	usertests.asm	/^     c2d:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
c2e	divide.asm	/^ c2e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c2e	init.asm	/^ c2e:	83 c0 01             	add    $0x1,%eax$/;"	l
c2e	sh.asm	/^     c2e:	74 58                	je     c88 <parsepipe+0xae>$/;"	l
c2f	bad_mmap.asm	/^ c2f:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c2f	grep.asm	/^ c2f:	83 c2 08             	add    $0x8,%edx$/;"	l
c2f	ls.asm	/^     c2f:	75 5d                	jne    c8e <printf+0x311>$/;"	l
c2f	mkdir.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c2f	rm.asm	/^ c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3	divide.asm	/^  c3:	00 00 00 $/;"	l
c3	echo.asm	/^  c3:	55                   	push   %rbp$/;"	l
c3	grep.asm	/^  c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
c3	imshow.asm	/^  c3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
c3	mkdir.asm	/^  c3:	00 00 00 $/;"	l
c3	prettyprint.asm	/^      c3:	48 be 18 12 00 00 00 	movabs $0x1218,%rsi$/;"	l
c3	rm.asm	/^  c3:	00 00 00 $/;"	l
c3	wc.asm	/^  c3:	48 b8 99 05 00 00 00 	movabs $0x599,%rax$/;"	l
c30	imshow.asm	/^ c30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c30	ln.asm	/^ c30:	e9 41 ff ff ff       	jmpq   b76 <malloc+0x89>$/;"	l
c30	sh.asm	/^     c30:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
c30	stressfs.asm	/^ c30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	divide.asm	/^ c31:	01 c2                	add    %eax,%edx$/;"	l
c31	eager_mmap.asm	/^ c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	init.asm	/^ c31:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c31	lazy_mmap.asm	/^ c31:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c31	ls.asm	/^     c31:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c32	cat.asm	/^ c32:	00 00 00 $/;"	l
c32	grep.asm	/^ c32:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c32	prettyprint.asm	/^     c32:	00 00 00 $/;"	l
c33	bad_mmap.asm	/^ c33:	83 c0 01             	add    $0x1,%eax$/;"	l
c33	divide.asm	/^ c33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c33	mkdir.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	rm.asm	/^ c33:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c33	wc.asm	/^ c33:	77 07                	ja     c3c <morecore+0x1b>$/;"	l
c34	imshow.asm	/^ c34:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
c34	init.asm	/^ c34:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c34	sh.asm	/^     c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c34	stressfs.asm	/^ c34:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c34	usertests.asm	/^     c34:	00 00 00 $/;"	l
c35	cat.asm	/^ c35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c35	eager_mmap.asm	/^ c35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c35	lazy_mmap.asm	/^ c35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c35	ln.asm	/^ c35:	c9                   	leaveq $/;"	l
c35	prettyprint.asm	/^     c35:	ff d0                	callq  *%rax$/;"	l
c35	wc.asm	/^ c35:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
c36	bad_mmap.asm	/^ c36:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c36	ln.asm	/^ c36:	c3                   	retq   $/;"	l
c37	divide.asm	/^ c37:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c37	ls.asm	/^     c37:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c37	mkdir.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	prettyprint.asm	/^     c37:	48 83 85 48 ff ff ff 	addq   $0x1,-0xb8(%rbp)$/;"	l
c37	rm.asm	/^ c37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c37	usertests.asm	/^     c37:	ff d0                	callq  *%rax$/;"	l
c38	grep.asm	/^ c38:	eb 12                	jmp    c4c <printf+0x2f4>$/;"	l
c38	imshow.asm	/^ c38:	76 c7                	jbe    c01 <free+0x2b>$/;"	l
c38	sh.asm	/^     c38:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
c39	bad_mmap.asm	/^ c39:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c39	cat.asm	/^ c39:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c39	eager_mmap.asm	/^ c39:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c39	lazy_mmap.asm	/^ c39:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c39	usertests.asm	/^     c39:	48 bf 54 6b 00 00 00 	movabs $0x6b54,%rdi$/;"	l
c3a	divide.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	grep.asm	/^ c3a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c3a	imshow.asm	/^ c3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c3a	ls.asm	/^     c3a:	73 23                	jae    c5f <printf+0x2e2>$/;"	l
c3b	init.asm	/^ c3b:	00 00 00 $/;"	l
c3b	mkdir.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	rm.asm	/^ c3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3b	stressfs.asm	/^ c3b:	00 00 00 $/;"	l
c3c	cat.asm	/^ c3c:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
c3c	eager_mmap.asm	/^ c3c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c3c	lazy_mmap.asm	/^ c3c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c3c	ls.asm	/^     c3c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c3c	wc.asm	/^ c3c:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
c3d	sh.asm	/^     c3d:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
c3e	divide.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	imshow.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	init.asm	/^ c3e:	48 8b 00             	mov    (%rax),%rax$/;"	l
c3e	mkdir.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	prettyprint.asm	/^     c3e:	01 $/;"	l
c3e	rm.asm	/^ c3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c3e	stressfs.asm	/^ c3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c3f	eager_mmap.asm	/^ c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c3f	lazy_mmap.asm	/^ c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c3f	prettyprint.asm	/^     c3f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax$/;"	l
c3f	wc.asm	/^ c3f:	c1 e0 04             	shl    $0x4,%eax$/;"	l
c4	cat.asm	/^  c4:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
c4	eager_mmap.asm	/^  c4:	48 b9 15 07 00 00 00 	movabs $0x715,%rcx$/;"	l
c4	echo.asm	/^  c4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c4	lazy_mmap.asm	/^  c4:	48 b9 15 07 00 00 00 	movabs $0x715,%rcx$/;"	l
c4	ls.asm	/^      c4:	48 b8 62 05 00 00 00 	movabs $0x562,%rax$/;"	l
c40	bad_mmap.asm	/^ c40:	00 00 00 $/;"	l
c40	usertests.asm	/^     c40:	00 00 00 $/;"	l
c41	divide.asm	/^ c41:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c41	grep.asm	/^ c41:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c41	imshow.asm	/^ c41:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c41	init.asm	/^ c41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c42	mkdir.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	rm.asm	/^ c42:	e9 41 ff ff ff       	jmpq   b88 <malloc+0x89>$/;"	l
c42	sh.asm	/^     c42:	48 89 c7             	mov    %rax,%rdi$/;"	l
c42	stressfs.asm	/^ c42:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c42	wc.asm	/^ c42:	89 c7                	mov    %eax,%edi$/;"	l
c43	bad_mmap.asm	/^ c43:	48 8b 00             	mov    (%rax),%rax$/;"	l
c43	cat.asm	/^ c43:	00 00 00 $/;"	l
c43	eager_mmap.asm	/^ c43:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c43	lazy_mmap.asm	/^ c43:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c43	ls.asm	/^     c43:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c43	usertests.asm	/^     c43:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
c44	divide.asm	/^ c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c44	wc.asm	/^ c44:	48 b8 25 06 00 00 00 	movabs $0x625,%rax$/;"	l
c45	grep.asm	/^ c45:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c45	imshow.asm	/^ c45:	76 ba                	jbe    c01 <free+0x2b>$/;"	l
c45	init.asm	/^ c45:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c45	sh.asm	/^     c45:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
c45	stressfs.asm	/^ c45:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
c46	bad_mmap.asm	/^ c46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c46	cat.asm	/^ c46:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c46	prettyprint.asm	/^     c46:	0f b6 00             	movzbl (%rax),%eax$/;"	l
c47	eager_mmap.asm	/^ c47:	48 89 c7             	mov    %rax,%rdi$/;"	l
c47	imshow.asm	/^ c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c47	lazy_mmap.asm	/^ c47:	48 89 c7             	mov    %rax,%rdi$/;"	l
c47	mkdir.asm	/^ c47:	c9                   	leaveq $/;"	l
c47	rm.asm	/^ c47:	c9                   	leaveq $/;"	l
c48	divide.asm	/^ c48:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c48	mkdir.asm	/^ c48:	c3                   	retq   $/;"	l
c48	rm.asm	/^ c48:	c3                   	retq   $/;"	l
c49	cat.asm	/^ c49:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c49	ls.asm	/^     c49:	89 d2                	mov    %edx,%edx$/;"	l
c49	prettyprint.asm	/^     c49:	84 c0                	test   %al,%al$/;"	l
c4a	bad_mmap.asm	/^ c4a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c4a	eager_mmap.asm	/^ c4a:	48 b8 ba 0a 00 00 00 	movabs $0xaba,%rax$/;"	l
c4a	init.asm	/^ c4a:	75 4a                	jne    c96 <malloc+0x7e>$/;"	l
c4a	lazy_mmap.asm	/^ c4a:	48 b8 ba 0a 00 00 00 	movabs $0xaba,%rax$/;"	l
c4a	usertests.asm	/^     c4a:	00 00 00 $/;"	l
c4b	divide.asm	/^ c4b:	eb 0e                	jmp    c5b <free+0xcf>$/;"	l
c4b	imshow.asm	/^ c4b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c4b	ls.asm	/^     c4b:	48 01 d0             	add    %rdx,%rax$/;"	l
c4b	prettyprint.asm	/^     c4b:	75 c7                	jne    c14 <printf+0x26d>$/;"	l
c4b	wc.asm	/^ c4b:	00 00 00 $/;"	l
c4c	grep.asm	/^ c4c:	8b 00                	mov    (%rax),%eax$/;"	l
c4c	init.asm	/^ c4c:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c4c	sh.asm	/^     c4c:	00 00 00 $/;"	l
c4c	stressfs.asm	/^ c4c:	00 00 00 $/;"	l
c4d	divide.asm	/^ c4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c4d	prettyprint.asm	/^     c4d:	e9 c8 00 00 00       	jmpq   d1a <printf+0x373>$/;"	l
c4d	usertests.asm	/^     c4d:	ff d0                	callq  *%rax$/;"	l
c4e	grep.asm	/^ c4e:	0f be d0             	movsbl %al,%edx$/;"	l
c4e	imshow.asm	/^ c4e:	89 c0                	mov    %eax,%eax$/;"	l
c4e	ls.asm	/^     c4e:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c4e	wc.asm	/^ c4e:	ff d0                	callq  *%rax$/;"	l
c4f	bad_mmap.asm	/^ c4f:	75 4a                	jne    c9b <malloc+0x7e>$/;"	l
c4f	sh.asm	/^     c4f:	ff d0                	callq  *%rax$/;"	l
c4f	stressfs.asm	/^ c4f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c4f	usertests.asm	/^     c4f:	85 c0                	test   %eax,%eax$/;"	l
c5	bad_mmap.asm	/^  c5:	00 00 00 $/;"	l
c5	ln.asm	/^  c5:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c5	sh.asm	/^      c5:	00 00 00 $/;"	l
c5	stressfs.asm	/^  c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
c50	cat.asm	/^ c50:	00 00 00 $/;"	l
c50	imshow.asm	/^ c50:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c50	wc.asm	/^ c50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c51	bad_mmap.asm	/^ c51:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c51	divide.asm	/^ c51:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c51	eager_mmap.asm	/^ c51:	00 00 00 $/;"	l
c51	grep.asm	/^ c51:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c51	lazy_mmap.asm	/^ c51:	00 00 00 $/;"	l
c51	sh.asm	/^     c51:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
c51	usertests.asm	/^     c51:	79 35                	jns    c88 <writetest1+0x2ef>$/;"	l
c52	prettyprint.asm	/^     c52:	83 bd 3c ff ff ff 63 	cmpl   $0x63,-0xc4(%rbp)$/;"	l
c52	stressfs.asm	/^ c52:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c53	cat.asm	/^ c53:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c53	init.asm	/^ c53:	00 00 00 $/;"	l
c53	usertests.asm	/^     c53:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c54	divide.asm	/^ c54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c54	eager_mmap.asm	/^ c54:	ff d0                	callq  *%rax$/;"	l
c54	imshow.asm	/^ c54:	48 89 c2             	mov    %rax,%rdx$/;"	l
c54	lazy_mmap.asm	/^ c54:	ff d0                	callq  *%rax$/;"	l
c54	ls.asm	/^     c54:	83 c2 08             	add    $0x8,%edx$/;"	l
c54	wc.asm	/^ c54:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
c55	sh.asm	/^     c55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
c56	cat.asm	/^ c56:	48 b8 00 12 00 00 00 	movabs $0x1200,%rax$/;"	l
c56	eager_mmap.asm	/^ c56:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c56	init.asm	/^ c56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c56	lazy_mmap.asm	/^ c56:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c57	grep.asm	/^ c57:	89 d6                	mov    %edx,%esi$/;"	l
c57	imshow.asm	/^ c57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c57	ls.asm	/^     c57:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c58	bad_mmap.asm	/^ c58:	00 00 00 $/;"	l
c58	divide.asm	/^ c58:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c59	grep.asm	/^ c59:	89 c7                	mov    %eax,%edi$/;"	l
c59	prettyprint.asm	/^     c59:	75 5d                	jne    cb8 <printf+0x311>$/;"	l
c59	sh.asm	/^     c59:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c59	stressfs.asm	/^ c59:	00 00 00 $/;"	l
c59	wc.asm	/^ c59:	75 07                	jne    c62 <morecore+0x41>$/;"	l
c5a	init.asm	/^ c5a:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c5a	usertests.asm	/^     c5a:	00 00 00 $/;"	l
c5b	bad_mmap.asm	/^ c5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c5b	divide.asm	/^ c5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5b	grep.asm	/^ c5b:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c5b	imshow.asm	/^ c5b:	48 01 c2             	add    %rax,%rdx$/;"	l
c5b	prettyprint.asm	/^     c5b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
c5b	wc.asm	/^ c5b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c5c	sh.asm	/^     c5c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c5c	stressfs.asm	/^ c5c:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c5d	cat.asm	/^ c5d:	00 00 00 $/;"	l
c5d	eager_mmap.asm	/^ c5d:	00 00 00 $/;"	l
c5d	lazy_mmap.asm	/^ c5d:	00 00 00 $/;"	l
c5d	ls.asm	/^     c5d:	eb 12                	jmp    c71 <printf+0x2f4>$/;"	l
c5d	usertests.asm	/^     c5d:	8b 00                	mov    (%rax),%eax$/;"	l
c5e	imshow.asm	/^ c5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c5f	bad_mmap.asm	/^ c5f:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c5f	divide.asm	/^ c5f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c5f	ls.asm	/^     c5f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c5f	sh.asm	/^     c5f:	48 b8 da 0b 00 00 00 	movabs $0xbda,%rax$/;"	l
c5f	stressfs.asm	/^ c5f:	48 b8 c0 0f 00 00 00 	movabs $0xfc0,%rax$/;"	l
c5f	usertests.asm	/^     c5f:	48 be f8 6b 00 00 00 	movabs $0x6bf8,%rsi$/;"	l
c6	divide.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	kill.asm	/^  c6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
c6	mkdir.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	rm.asm	/^  c6:	ff d0                	callq  *%rax$/;"	l
c6	usertests.asm	/^      c6:	00 00 00 $/;"	l
c6	zombie.asm	/^  c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c60	cat.asm	/^ c60:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c60	eager_mmap.asm	/^ c60:	48 8b 00             	mov    (%rax),%rax$/;"	l
c60	lazy_mmap.asm	/^ c60:	48 8b 00             	mov    (%rax),%rax$/;"	l
c60	wc.asm	/^ c60:	eb 36                	jmp    c98 <morecore+0x77>$/;"	l
c61	init.asm	/^ c61:	00 00 00 $/;"	l
c61	prettyprint.asm	/^     c61:	83 f8 30             	cmp    $0x30,%eax$/;"	l
c62	divide.asm	/^ c62:	89 c0                	mov    %eax,%eax$/;"	l
c62	grep.asm	/^ c62:	00 00 00 $/;"	l
c62	imshow.asm	/^ c62:	48 8b 00             	mov    (%rax),%rax$/;"	l
c62	wc.asm	/^ c62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c63	eager_mmap.asm	/^ c63:	c9                   	leaveq $/;"	l
c63	lazy_mmap.asm	/^ c63:	c9                   	leaveq $/;"	l
c64	divide.asm	/^ c64:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
c64	eager_mmap.asm	/^ c64:	c3                   	retq   $/;"	l
c64	init.asm	/^ c64:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c64	lazy_mmap.asm	/^ c64:	c3                   	retq   $/;"	l
c64	prettyprint.asm	/^     c64:	73 23                	jae    c89 <printf+0x2e2>$/;"	l
c65	eager_mmap.asm	/^ c65:	55                   	push   %rbp$/;"	l
c65	grep.asm	/^ c65:	ff d0                	callq  *%rax$/;"	l
c65	imshow.asm	/^ c65:	48 39 c2             	cmp    %rax,%rdx$/;"	l
c65	lazy_mmap.asm	/^ c65:	55                   	push   %rbp$/;"	l
c66	bad_mmap.asm	/^ c66:	00 00 00 $/;"	l
c66	eager_mmap.asm	/^ c66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c66	lazy_mmap.asm	/^ c66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c66	ls.asm	/^     c66:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c66	prettyprint.asm	/^     c66:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
c66	sh.asm	/^     c66:	00 00 00 $/;"	l
c66	stressfs.asm	/^ c66:	00 00 00 $/;"	l
c66	usertests.asm	/^     c66:	00 00 00 $/;"	l
c66	wc.asm	/^ c66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c67	cat.asm	/^ c67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c67	grep.asm	/^ c67:	eb 62                	jmp    ccb <printf+0x373>$/;"	l
c68	divide.asm	/^ c68:	48 89 c2             	mov    %rax,%rdx$/;"	l
c68	imshow.asm	/^ c68:	75 2d                	jne    c97 <free+0xc1>$/;"	l
c68	init.asm	/^ c68:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c69	bad_mmap.asm	/^ c69:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
c69	eager_mmap.asm	/^ c69:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c69	grep.asm	/^ c69:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c69	lazy_mmap.asm	/^ c69:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c69	sh.asm	/^     c69:	ff d0                	callq  *%rax$/;"	l
c69	stressfs.asm	/^ c69:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c69	usertests.asm	/^     c69:	89 c7                	mov    %eax,%edi$/;"	l
c6a	imshow.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6a	ls.asm	/^     c6a:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c6a	wc.asm	/^ c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c6b	cat.asm	/^ c6b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c6b	divide.asm	/^ c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6b	init.asm	/^ c6b:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
c6b	sh.asm	/^     c6b:	48 89 c2             	mov    %rax,%rdx$/;"	l
c6b	usertests.asm	/^     c6b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
c6d	bad_mmap.asm	/^ c6d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c6d	eager_mmap.asm	/^ c6d:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c6d	lazy_mmap.asm	/^ c6d:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
c6d	prettyprint.asm	/^     c6d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c6e	cat.asm	/^ c6e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c6e	imshow.asm	/^ c6e:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c6e	sh.asm	/^     c6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c6e	wc.asm	/^ c6e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
c6f	divide.asm	/^ c6f:	48 01 d0             	add    %rdx,%rax$/;"	l
c7	cat.asm	/^  c7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
c7	echo.asm	/^  c7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
c7	grep.asm	/^  c7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
c70	bad_mmap.asm	/^ c70:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
c70	eager_mmap.asm	/^ c70:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c70	grep.asm	/^ c70:	75 21                	jne    c93 <printf+0x33b>$/;"	l
c70	lazy_mmap.asm	/^ c70:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
c70	stressfs.asm	/^ c70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c70	usertests.asm	/^     c70:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
c71	imshow.asm	/^ c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c71	ls.asm	/^     c71:	8b 00                	mov    (%rax),%eax$/;"	l
c71	wc.asm	/^ c71:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c72	cat.asm	/^ c72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c72	divide.asm	/^ c72:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
c72	grep.asm	/^ c72:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c72	init.asm	/^ c72:	00 00 00 $/;"	l
c72	sh.asm	/^     c72:	48 89 d6             	mov    %rdx,%rsi$/;"	l
c73	eager_mmap.asm	/^ c73:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c73	lazy_mmap.asm	/^ c73:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
c73	ls.asm	/^     c73:	0f be d0             	movsbl %al,%edx$/;"	l
c73	prettyprint.asm	/^     c73:	89 d2                	mov    %edx,%edx$/;"	l
c74	stressfs.asm	/^ c74:	48 8b 00             	mov    (%rax),%rax$/;"	l
c74	wc.asm	/^ c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c75	imshow.asm	/^ c75:	48 8b 00             	mov    (%rax),%rax$/;"	l
c75	init.asm	/^ c75:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c75	prettyprint.asm	/^     c75:	48 01 d0             	add    %rdx,%rax$/;"	l
c75	sh.asm	/^     c75:	48 89 c7             	mov    %rax,%rdi$/;"	l
c76	cat.asm	/^ c76:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c76	divide.asm	/^ c76:	75 27                	jne    c9f <free+0x113>$/;"	l
c76	ls.asm	/^     c76:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c77	bad_mmap.asm	/^ c77:	00 00 00 $/;"	l
c77	eager_mmap.asm	/^ c77:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c77	lazy_mmap.asm	/^ c77:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
c77	stressfs.asm	/^ c77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c77	usertests.asm	/^     c77:	00 00 00 $/;"	l
c78	divide.asm	/^ c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c78	grep.asm	/^ c78:	0f be d0             	movsbl %al,%edx$/;"	l
c78	imshow.asm	/^ c78:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c78	init.asm	/^ c78:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c78	prettyprint.asm	/^     c78:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
c78	sh.asm	/^     c78:	48 b8 7c 06 00 00 00 	movabs $0x67c,%rax$/;"	l
c78	wc.asm	/^ c78:	48 83 c0 10          	add    $0x10,%rax$/;"	l
c79	cat.asm	/^ c79:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c7a	bad_mmap.asm	/^ c7a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c7a	usertests.asm	/^     c7a:	ff d2                	callq  *%rdx$/;"	l
c7b	eager_mmap.asm	/^ c7b:	83 c0 01             	add    $0x1,%eax$/;"	l
c7b	grep.asm	/^ c7b:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c7b	imshow.asm	/^ c7b:	01 c2                	add    %eax,%edx$/;"	l
c7b	lazy_mmap.asm	/^ c7b:	83 c0 01             	add    $0x1,%eax$/;"	l
c7b	stressfs.asm	/^ c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7c	cat.asm	/^ c7c:	72 65                	jb     ce3 <malloc+0xfa>$/;"	l
c7c	divide.asm	/^ c7c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
c7c	ls.asm	/^     c7c:	89 d6                	mov    %edx,%esi$/;"	l
c7c	usertests.asm	/^     c7c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
c7c	wc.asm	/^ c7c:	48 89 c7             	mov    %rax,%rdi$/;"	l
c7d	bad_mmap.asm	/^ c7d:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c7d	imshow.asm	/^ c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7e	cat.asm	/^ c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c7e	eager_mmap.asm	/^ c7e:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c7e	lazy_mmap.asm	/^ c7e:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
c7e	ls.asm	/^     c7e:	89 c7                	mov    %eax,%edi$/;"	l
c7e	prettyprint.asm	/^     c7e:	83 c2 08             	add    $0x8,%edx$/;"	l
c7f	divide.asm	/^ c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c7f	init.asm	/^ c7f:	00 00 00 $/;"	l
c7f	sh.asm	/^     c7f:	00 00 00 $/;"	l
c7f	stressfs.asm	/^ c7f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c7f	wc.asm	/^ c7f:	48 b8 ef 0a 00 00 00 	movabs $0xaef,%rax$/;"	l
c8	bad_mmap.asm	/^  c8:	ff d1                	callq  *%rcx$/;"	l
c8	divide.asm	/^  c8:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
c8	init.asm	/^  c8:	00 00 00 $/;"	l
c8	ln.asm	/^  c8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
c8	mkdir.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	rm.asm	/^  c8:	55                   	push   %rbp$/;"	l
c8	sh.asm	/^      c8:	ff d1                	callq  *%rcx$/;"	l
c80	ls.asm	/^     c80:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
c81	eager_mmap.asm	/^ c81:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c81	grep.asm	/^ c81:	89 d6                	mov    %edx,%esi$/;"	l
c81	imshow.asm	/^ c81:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c81	lazy_mmap.asm	/^ c81:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
c81	prettyprint.asm	/^     c81:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
c82	cat.asm	/^ c82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c82	init.asm	/^ c82:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c82	sh.asm	/^     c82:	ff d0                	callq  *%rax$/;"	l
c82	stressfs.asm	/^ c82:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c83	divide.asm	/^ c83:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c83	grep.asm	/^ c83:	89 c7                	mov    %eax,%edi$/;"	l
c83	usertests.asm	/^     c83:	00 00 00 $/;"	l
c84	bad_mmap.asm	/^ c84:	00 00 00 $/;"	l
c84	imshow.asm	/^ c84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c84	sh.asm	/^     c84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c85	cat.asm	/^ c85:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c85	grep.asm	/^ c85:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
c85	init.asm	/^ c85:	48 b8 30 10 00 00 00 	movabs $0x1030,%rax$/;"	l
c85	stressfs.asm	/^ c85:	72 65                	jb     cec <malloc+0xfa>$/;"	l
c86	divide.asm	/^ c86:	01 c2                	add    %eax,%edx$/;"	l
c86	usertests.asm	/^     c86:	ff d0                	callq  *%rax$/;"	l
c86	wc.asm	/^ c86:	00 00 00 $/;"	l
c87	bad_mmap.asm	/^ c87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c87	ls.asm	/^     c87:	00 00 00 $/;"	l
c87	prettyprint.asm	/^     c87:	eb 12                	jmp    c9b <printf+0x2f4>$/;"	l
c87	stressfs.asm	/^ c87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	cat.asm	/^ c88:	75 10                	jne    c9a <malloc+0xb1>$/;"	l
c88	divide.asm	/^ c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	eager_mmap.asm	/^ c88:	00 00 00 $/;"	l
c88	imshow.asm	/^ c88:	48 8b 00             	mov    (%rax),%rax$/;"	l
c88	lazy_mmap.asm	/^ c88:	00 00 00 $/;"	l
c88	sh.asm	/^     c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c88	usertests.asm	/^     c88:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
c89	prettyprint.asm	/^     c89:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
c89	wc.asm	/^ c89:	ff d0                	callq  *%rax$/;"	l
c8a	bad_mmap.asm	/^ c8a:	48 b8 20 11 00 00 00 	movabs $0x1120,%rax$/;"	l
c8a	cat.asm	/^ c8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c8a	ls.asm	/^     c8a:	ff d0                	callq  *%rax$/;"	l
c8b	eager_mmap.asm	/^ c8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c8b	imshow.asm	/^ c8b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8b	lazy_mmap.asm	/^ c8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
c8b	stressfs.asm	/^ c8b:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c8b	wc.asm	/^ c8b:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
c8c	divide.asm	/^ c8c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
c8c	grep.asm	/^ c8c:	00 00 00 $/;"	l
c8c	init.asm	/^ c8c:	00 00 00 $/;"	l
c8c	ls.asm	/^     c8c:	eb 62                	jmp    cf0 <printf+0x373>$/;"	l
c8c	sh.asm	/^     c8c:	c9                   	leaveq $/;"	l
c8d	sh.asm	/^     c8d:	c3                   	retq   $/;"	l
c8e	cat.asm	/^ c8e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c8e	eager_mmap.asm	/^ c8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c8e	imshow.asm	/^ c8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8e	lazy_mmap.asm	/^ c8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
c8e	ls.asm	/^     c8e:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
c8e	sh.asm	/^     c8e:	55                   	push   %rbp$/;"	l
c8e	stressfs.asm	/^ c8e:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
c8f	divide.asm	/^ c8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c8f	grep.asm	/^ c8f:	ff d0                	callq  *%rax$/;"	l
c8f	init.asm	/^ c8f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c8f	sh.asm	/^     c8f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c8f	usertests.asm	/^     c8f:	00 00 00 $/;"	l
c9	forktest.asm	/^  c9:	00 00 00 $/;"	l
c9	kill.asm	/^  c9:	90                   	nop$/;"	l
c9	mkdir.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	rm.asm	/^  c9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9	stressfs.asm	/^  c9:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
c9	usertests.asm	/^      c9:	ff d0                	callq  *%rax$/;"	l
c90	prettyprint.asm	/^     c90:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
c91	bad_mmap.asm	/^ c91:	00 00 00 $/;"	l
c91	cat.asm	/^ c91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c91	grep.asm	/^ c91:	eb 38                	jmp    ccb <printf+0x373>$/;"	l
c91	stressfs.asm	/^ c91:	75 10                	jne    ca3 <malloc+0xb1>$/;"	l
c92	eager_mmap.asm	/^ c92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c92	imshow.asm	/^ c92:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c92	lazy_mmap.asm	/^ c92:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
c92	sh.asm	/^     c92:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
c92	usertests.asm	/^     c92:	8b 00                	mov    (%rax),%eax$/;"	l
c92	wc.asm	/^ c92:	00 00 00 $/;"	l
c93	divide.asm	/^ c93:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c93	grep.asm	/^ c93:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
c93	stressfs.asm	/^ c93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c94	bad_mmap.asm	/^ c94:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
c94	prettyprint.asm	/^     c94:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
c94	usertests.asm	/^     c94:	48 be 0b 6c 00 00 00 	movabs $0x6c0b,%rsi$/;"	l
c95	cat.asm	/^ c95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c95	imshow.asm	/^ c95:	eb 0e                	jmp    ca5 <free+0xcf>$/;"	l
c95	ls.asm	/^     c95:	75 21                	jne    cb8 <printf+0x33b>$/;"	l
c95	wc.asm	/^ c95:	48 8b 00             	mov    (%rax),%rax$/;"	l
c96	divide.asm	/^ c96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c96	init.asm	/^ c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c96	sh.asm	/^     c96:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
c97	eager_mmap.asm	/^ c97:	75 4a                	jne    ce3 <malloc+0x7e>$/;"	l
c97	imshow.asm	/^ c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c97	lazy_mmap.asm	/^ c97:	75 4a                	jne    ce3 <malloc+0x7e>$/;"	l
c97	ls.asm	/^     c97:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
c97	stressfs.asm	/^ c97:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c98	cat.asm	/^ c98:	eb 2e                	jmp    cc8 <malloc+0xdf>$/;"	l
c98	wc.asm	/^ c98:	c9                   	leaveq $/;"	l
c99	eager_mmap.asm	/^ c99:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
c99	grep.asm	/^ c99:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
c99	lazy_mmap.asm	/^ c99:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
c99	wc.asm	/^ c99:	c3                   	retq   $/;"	l
c9a	cat.asm	/^ c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
c9a	divide.asm	/^ c9a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9a	init.asm	/^ c9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
c9a	sh.asm	/^     c9a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
c9a	stressfs.asm	/^ c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9a	wc.asm	/^ c9a:	55                   	push   %rbp$/;"	l
c9b	bad_mmap.asm	/^ c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9b	imshow.asm	/^ c9b:	48 8b 10             	mov    (%rax),%rdx$/;"	l
c9b	prettyprint.asm	/^     c9b:	8b 00                	mov    (%rax),%eax$/;"	l
c9b	usertests.asm	/^     c9b:	00 00 00 $/;"	l
c9b	wc.asm	/^ c9b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
c9d	divide.asm	/^ c9d:	eb 0b                	jmp    caa <free+0x11e>$/;"	l
c9d	init.asm	/^ c9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
c9d	ls.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9d	prettyprint.asm	/^     c9d:	0f be d0             	movsbl %al,%edx$/;"	l
c9e	cat.asm	/^ c9e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
c9e	grep.asm	/^ c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	imshow.asm	/^ c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
c9e	sh.asm	/^     c9e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
c9e	stressfs.asm	/^ c9e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
c9e	usertests.asm	/^     c9e:	89 c7                	mov    %eax,%edi$/;"	l
c9e	wc.asm	/^ c9e:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
c9f	bad_mmap.asm	/^ c9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
c9f	divide.asm	/^ c9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca	bad_mmap.asm	/^  ca:	48 be ff 0d 00 00 00 	movabs $0xdff,%rsi$/;"	l
ca	imshow.asm	/^  ca:	e9 a6 00 00 00       	jmpq   175 <main+0x175>$/;"	l
ca	kill.asm	/^  ca:	c9                   	leaveq $/;"	l
ca	prettyprint.asm	/^      ca:	00 00 00 $/;"	l
ca	sh.asm	/^      ca:	e9 62 02 00 00       	jmpq   331 <runcmd+0x331>$/;"	l
ca	wc.asm	/^  ca:	00 00 00 $/;"	l
ca	zombie.asm	/^  ca:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ca0	eager_mmap.asm	/^ ca0:	00 00 00 $/;"	l
ca0	grep.asm	/^ ca0:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
ca0	lazy_mmap.asm	/^ ca0:	00 00 00 $/;"	l
ca0	ls.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	prettyprint.asm	/^     ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ca0	usertests.asm	/^     ca0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ca1	cat.asm	/^ ca1:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
ca1	init.asm	/^ ca1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca1	stressfs.asm	/^ ca1:	eb 2e                	jmp    cd1 <malloc+0xdf>$/;"	l
ca2	bad_mmap.asm	/^ ca2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ca2	imshow.asm	/^ ca2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca2	sh.asm	/^     ca2:	e9 f8 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
ca2	wc.asm	/^ ca2:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ca3	divide.asm	/^ ca3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ca3	eager_mmap.asm	/^ ca3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ca3	lazy_mmap.asm	/^ ca3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ca3	stressfs.asm	/^ ca3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca4	cat.asm	/^ ca4:	89 c2                	mov    %eax,%edx$/;"	l
ca5	imshow.asm	/^ ca5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca5	init.asm	/^ ca5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ca5	usertests.asm	/^     ca5:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
ca5	wc.asm	/^ ca5:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ca6	bad_mmap.asm	/^ ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca6	cat.asm	/^ ca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ca6	ls.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca6	prettyprint.asm	/^     ca6:	89 d6                	mov    %edx,%esi$/;"	l
ca7	divide.asm	/^ ca7:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ca7	eager_mmap.asm	/^ ca7:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ca7	grep.asm	/^ ca7:	00 00 00 $/;"	l
ca7	lazy_mmap.asm	/^ ca7:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
ca7	sh.asm	/^     ca7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
ca7	stressfs.asm	/^ ca7:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ca8	init.asm	/^ ca8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ca8	ls.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	prettyprint.asm	/^     ca8:	89 c7                	mov    %eax,%edi$/;"	l
ca8	wc.asm	/^ ca8:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ca9	imshow.asm	/^ ca9:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
caa	bad_mmap.asm	/^ caa:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
caa	cat.asm	/^ caa:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
caa	divide.asm	/^ caa:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
caa	grep.asm	/^ caa:	ff d0                	callq  *%rax$/;"	l
caa	ls.asm	/^     caa:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
caa	prettyprint.asm	/^     caa:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
caa	stressfs.asm	/^ caa:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cab	init.asm	/^ cab:	72 65                	jb     d12 <malloc+0xfa>$/;"	l
cab	sh.asm	/^     cab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cac	grep.asm	/^ cac:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cac	imshow.asm	/^ cac:	89 c0                	mov    %eax,%eax$/;"	l
cac	usertests.asm	/^     cac:	00 00 00 $/;"	l
cac	wc.asm	/^ cac:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
cad	bad_mmap.asm	/^ cad:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cad	cat.asm	/^ cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cad	init.asm	/^ cad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cad	stressfs.asm	/^ cad:	89 c2                	mov    %eax,%edx$/;"	l
cae	eager_mmap.asm	/^ cae:	00 00 00 $/;"	l
cae	imshow.asm	/^ cae:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cae	lazy_mmap.asm	/^ cae:	00 00 00 $/;"	l
caf	sh.asm	/^     caf:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
caf	stressfs.asm	/^ caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
caf	usertests.asm	/^     caf:	ff d2                	callq  *%rdx$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	cat.asm	/^  cb:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
cb	divide.asm	/^  cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
cb	eager_mmap.asm	/^  cb:	00 00 00 $/;"	l
cb	echo.asm	/^  cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
cb	init.asm	/^  cb:	ff d0                	callq  *%rax$/;"	l
cb	kill.asm	/^  cb:	c3                   	retq   $/;"	l
cb	lazy_mmap.asm	/^  cb:	00 00 00 $/;"	l
cb	ls.asm	/^      cb:	00 00 00 $/;"	l
cb	usertests.asm	/^      cb:	48 bf bd 68 00 00 00 	movabs $0x68bd,%rdi$/;"	l
cb0	bad_mmap.asm	/^ cb0:	72 65                	jb     d17 <malloc+0xfa>$/;"	l
cb0	wc.asm	/^ cb0:	83 c0 01             	add    $0x1,%eax$/;"	l
cb1	cat.asm	/^ cb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb1	divide.asm	/^ cb1:	00 00 00 $/;"	l
cb1	eager_mmap.asm	/^ cb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cb1	init.asm	/^ cb1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb1	lazy_mmap.asm	/^ cb1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cb1	ls.asm	/^     cb1:	00 00 00 $/;"	l
cb1	prettyprint.asm	/^     cb1:	00 00 00 $/;"	l
cb1	usertests.asm	/^     cb1:	90                   	nop$/;"	l
cb2	bad_mmap.asm	/^ cb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb2	grep.asm	/^ cb2:	0f be d0             	movsbl %al,%edx$/;"	l
cb2	imshow.asm	/^ cb2:	48 89 c2             	mov    %rax,%rdx$/;"	l
cb2	usertests.asm	/^     cb2:	c9                   	leaveq $/;"	l
cb3	stressfs.asm	/^ cb3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cb3	usertests.asm	/^     cb3:	c3                   	retq   $/;"	l
cb3	wc.asm	/^ cb3:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
cb4	cat.asm	/^ cb4:	89 c0                	mov    %eax,%eax$/;"	l
cb4	divide.asm	/^ cb4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cb4	init.asm	/^ cb4:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cb4	ls.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	prettyprint.asm	/^     cb4:	ff d0                	callq  *%rax$/;"	l
cb4	sh.asm	/^     cb4:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
cb4	usertests.asm	/^     cb4:	55                   	push   %rbp$/;"	l
cb5	eager_mmap.asm	/^ cb5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb5	grep.asm	/^ cb5:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb5	imshow.asm	/^ cb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb5	lazy_mmap.asm	/^ cb5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb5	usertests.asm	/^     cb5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cb6	bad_mmap.asm	/^ cb6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cb6	cat.asm	/^ cb6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cb6	ls.asm	/^     cb6:	eb 38                	jmp    cf0 <printf+0x373>$/;"	l
cb6	prettyprint.asm	/^     cb6:	eb 62                	jmp    d1a <printf+0x373>$/;"	l
cb6	stressfs.asm	/^ cb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb6	wc.asm	/^ cb6:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cb7	init.asm	/^ cb7:	75 10                	jne    cc9 <malloc+0xb1>$/;"	l
cb8	divide.asm	/^ cb8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cb8	eager_mmap.asm	/^ cb8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
cb8	lazy_mmap.asm	/^ cb8:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
cb8	ls.asm	/^     cb8:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cb8	prettyprint.asm	/^     cb8:	83 bd 3c ff ff ff 25 	cmpl   $0x25,-0xc4(%rbp)$/;"	l
cb8	usertests.asm	/^     cb8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cb9	bad_mmap.asm	/^ cb9:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cb9	imshow.asm	/^ cb9:	48 01 d0             	add    %rdx,%rax$/;"	l
cb9	init.asm	/^ cb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cb9	sh.asm	/^     cb9:	48 89 c7             	mov    %rax,%rdi$/;"	l
cba	cat.asm	/^ cba:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cba	stressfs.asm	/^ cba:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cbb	divide.asm	/^ cbb:	90                   	nop$/;"	l
cbb	grep.asm	/^ cbb:	89 d6                	mov    %edx,%esi$/;"	l
cbc	bad_mmap.asm	/^ cbc:	75 10                	jne    cce <malloc+0xb1>$/;"	l
cbc	divide.asm	/^ cbc:	c9                   	leaveq $/;"	l
cbc	imshow.asm	/^ cbc:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
cbc	sh.asm	/^     cbc:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cbc	usertests.asm	/^     cbc:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
cbd	divide.asm	/^ cbd:	c3                   	retq   $/;"	l
cbd	grep.asm	/^ cbd:	89 c7                	mov    %eax,%edi$/;"	l
cbd	init.asm	/^ cbd:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cbd	stressfs.asm	/^ cbd:	89 c0                	mov    %eax,%eax$/;"	l
cbd	wc.asm	/^ cbd:	00 00 00 $/;"	l
cbe	bad_mmap.asm	/^ cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cbe	cat.asm	/^ cbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cbe	divide.asm	/^ cbe:	55                   	push   %rbp$/;"	l
cbe	ls.asm	/^     cbe:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
cbf	divide.asm	/^ cbf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cbf	eager_mmap.asm	/^ cbf:	00 00 00 $/;"	l
cbf	grep.asm	/^ cbf:	48 b8 5b 08 00 00 00 	movabs $0x85b,%rax$/;"	l
cbf	lazy_mmap.asm	/^ cbf:	00 00 00 $/;"	l
cbf	prettyprint.asm	/^     cbf:	75 21                	jne    ce2 <printf+0x33b>$/;"	l
cbf	stressfs.asm	/^ cbf:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cc	bad_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	eager_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	ff d0                	callq  *%rax$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	0f 85 72 ff ff ff    	jne    44 <grep+0x44>$/;"	l
cc	imshow.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	55                   	push   %rbp$/;"	l
cc	lazy_mmap.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	prettyprint.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	imshow.asm	/^ cc0:	75 27                	jne    ce9 <free+0x113>$/;"	l
cc0	init.asm	/^ cc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc0	wc.asm	/^ cc0:	48 8b 00             	mov    (%rax),%rax$/;"	l
cc1	prettyprint.asm	/^     cc1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cc2	bad_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc2	cat.asm	/^ cc2:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cc2	divide.asm	/^ cc2:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
cc2	eager_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc2	imshow.asm	/^ cc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc2	lazy_mmap.asm	/^ cc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cc3	ls.asm	/^     cc3:	89 c7                	mov    %eax,%edi$/;"	l
cc3	sh.asm	/^     cc3:	00 00 00 $/;"	l
cc3	stressfs.asm	/^ cc3:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cc3	usertests.asm	/^     cc3:	00 00 00 $/;"	l
cc3	wc.asm	/^ cc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cc4	init.asm	/^ cc4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cc5	bad_mmap.asm	/^ cc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc5	cat.asm	/^ cc5:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cc5	eager_mmap.asm	/^ cc5:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cc5	lazy_mmap.asm	/^ cc5:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cc5	ls.asm	/^     cc5:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
cc6	divide.asm	/^ cc6:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
cc6	grep.asm	/^ cc6:	00 00 00 $/;"	l
cc6	imshow.asm	/^ cc6:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
cc6	sh.asm	/^     cc6:	ff d0                	callq  *%rax$/;"	l
cc6	usertests.asm	/^     cc6:	8b 00                	mov    (%rax),%eax$/;"	l
cc7	init.asm	/^ cc7:	eb 2e                	jmp    cf7 <malloc+0xdf>$/;"	l
cc7	prettyprint.asm	/^     cc7:	0f be d0             	movsbl %al,%edx$/;"	l
cc7	stressfs.asm	/^ cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cc7	wc.asm	/^ cc7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
cc8	cat.asm	/^ cc8:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
cc8	sh.asm	/^     cc8:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
cc8	usertests.asm	/^     cc8:	48 be 20 6c 00 00 00 	movabs $0x6c20,%rsi$/;"	l
cc9	bad_mmap.asm	/^ cc9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cc9	divide.asm	/^ cc9:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
cc9	grep.asm	/^ cc9:	ff d0                	callq  *%rax$/;"	l
cc9	imshow.asm	/^ cc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cc9	init.asm	/^ cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cca	prettyprint.asm	/^     cca:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ccb	grep.asm	/^ ccb:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
ccb	sh.asm	/^     ccb:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx$/;"	l
ccb	stressfs.asm	/^ ccb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ccc	bad_mmap.asm	/^ ccc:	eb 2e                	jmp    cfc <malloc+0xdf>$/;"	l
ccc	eager_mmap.asm	/^ ccc:	00 00 00 $/;"	l
ccc	lazy_mmap.asm	/^ ccc:	00 00 00 $/;"	l
ccc	ls.asm	/^     ccc:	00 00 00 $/;"	l
ccc	wc.asm	/^ ccc:	75 4a                	jne    d18 <malloc+0x7e>$/;"	l
ccd	imshow.asm	/^ ccd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ccd	init.asm	/^ ccd:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cce	bad_mmap.asm	/^ cce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cce	stressfs.asm	/^ cce:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cce	wc.asm	/^ cce:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
ccf	cat.asm	/^ ccf:	00 00 00 $/;"	l
ccf	eager_mmap.asm	/^ ccf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ccf	lazy_mmap.asm	/^ ccf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ccf	ls.asm	/^     ccf:	ff d0                	callq  *%rax$/;"	l
ccf	sh.asm	/^     ccf:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ccf	usertests.asm	/^     ccf:	00 00 00 $/;"	l
cd	init.asm	/^  cd:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
cd	kill.asm	/^  cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cd	prettyprint.asm	/^      cd:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
cd	wc.asm	/^  cd:	ff d0                	callq  *%rax$/;"	l
cd	zombie.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd0	divide.asm	/^ cd0:	77 07                	ja     cd9 <morecore+0x1b>$/;"	l
cd0	imshow.asm	/^ cd0:	01 c2                	add    %eax,%edx$/;"	l
cd0	init.asm	/^ cd0:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cd0	prettyprint.asm	/^     cd0:	89 d6                	mov    %edx,%esi$/;"	l
cd1	ls.asm	/^     cd1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cd1	stressfs.asm	/^ cd1:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cd2	bad_mmap.asm	/^ cd2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cd2	cat.asm	/^ cd2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cd2	divide.asm	/^ cd2:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
cd2	eager_mmap.asm	/^ cd2:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cd2	grep.asm	/^ cd2:	00 00 00 $/;"	l
cd2	imshow.asm	/^ cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd2	lazy_mmap.asm	/^ cd2:	48 b8 50 11 00 00 00 	movabs $0x1150,%rax$/;"	l
cd2	prettyprint.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd2	usertests.asm	/^     cd2:	89 c7                	mov    %eax,%edi$/;"	l
cd3	init.asm	/^ cd3:	89 c2                	mov    %eax,%edx$/;"	l
cd3	sh.asm	/^     cd3:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi$/;"	l
cd4	prettyprint.asm	/^     cd4:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cd4	usertests.asm	/^     cd4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cd5	bad_mmap.asm	/^ cd5:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
cd5	grep.asm	/^ cd5:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cd5	init.asm	/^ cd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd5	wc.asm	/^ cd5:	00 00 00 $/;"	l
cd6	cat.asm	/^ cd6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cd6	imshow.asm	/^ cd6:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cd7	ls.asm	/^     cd7:	0f be d0             	movsbl %al,%edx$/;"	l
cd7	sh.asm	/^     cd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
cd8	bad_mmap.asm	/^ cd8:	89 c2                	mov    %eax,%edx$/;"	l
cd8	stressfs.asm	/^ cd8:	00 00 00 $/;"	l
cd8	wc.asm	/^ cd8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
cd9	cat.asm	/^ cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cd9	divide.asm	/^ cd9:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cd9	eager_mmap.asm	/^ cd9:	00 00 00 $/;"	l
cd9	imshow.asm	/^ cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
cd9	init.asm	/^ cd9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cd9	lazy_mmap.asm	/^ cd9:	00 00 00 $/;"	l
cd9	usertests.asm	/^     cd9:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
cda	bad_mmap.asm	/^ cda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cda	ls.asm	/^     cda:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
cdb	prettyprint.asm	/^     cdb:	00 00 00 $/;"	l
cdb	sh.asm	/^     cdb:	48 89 c7             	mov    %rax,%rdi$/;"	l
cdb	stressfs.asm	/^ cdb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
cdc	divide.asm	/^ cdc:	c1 e0 04             	shl    $0x4,%eax$/;"	l
cdc	eager_mmap.asm	/^ cdc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
cdc	grep.asm	/^ cdc:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
cdc	init.asm	/^ cdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cdc	lazy_mmap.asm	/^ cdc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
cdc	wc.asm	/^ cdc:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cdd	cat.asm	/^ cdd:	48 83 c0 10          	add    $0x10,%rax$/;"	l
cdd	imshow.asm	/^ cdd:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cde	bad_mmap.asm	/^ cde:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cde	prettyprint.asm	/^     cde:	ff d0                	callq  *%rax$/;"	l
cde	sh.asm	/^     cde:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
cdf	divide.asm	/^ cdf:	89 c7                	mov    %eax,%edi$/;"	l
cdf	stressfs.asm	/^ cdf:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce	eager_mmap.asm	/^  ce:	ff d1                	callq  *%rcx$/;"	l
ce	forktest.asm	/^  ce:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ce	lazy_mmap.asm	/^  ce:	ff d1                	callq  *%rcx$/;"	l
ce	ls.asm	/^      ce:	ff d0                	callq  *%rax$/;"	l
ce	stressfs.asm	/^  ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ce0	imshow.asm	/^ ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce0	init.asm	/^ ce0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ce0	ls.asm	/^     ce0:	89 d6                	mov    %edx,%esi$/;"	l
ce0	prettyprint.asm	/^     ce0:	eb 38                	jmp    d1a <printf+0x373>$/;"	l
ce0	usertests.asm	/^     ce0:	00 00 00 $/;"	l
ce1	bad_mmap.asm	/^ ce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce1	cat.asm	/^ ce1:	eb 4e                	jmp    d31 <malloc+0x148>$/;"	l
ce1	divide.asm	/^ ce1:	48 b8 cc 06 00 00 00 	movabs $0x6cc,%rax$/;"	l
ce2	grep.asm	/^ ce2:	48 63 d0             	movslq %eax,%rdx$/;"	l
ce2	ls.asm	/^     ce2:	89 c7                	mov    %eax,%edi$/;"	l
ce2	prettyprint.asm	/^     ce2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
ce2	stressfs.asm	/^ ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce3	cat.asm	/^ ce3:	48 b8 10 12 00 00 00 	movabs $0x1210,%rax$/;"	l
ce3	eager_mmap.asm	/^ ce3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ce3	init.asm	/^ ce3:	89 c0                	mov    %eax,%eax$/;"	l
ce3	lazy_mmap.asm	/^ ce3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ce3	usertests.asm	/^     ce3:	ff d2                	callq  *%rdx$/;"	l
ce3	wc.asm	/^ ce3:	00 00 00 $/;"	l
ce4	imshow.asm	/^ ce4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ce4	ls.asm	/^     ce4:	48 b8 80 08 00 00 00 	movabs $0x880,%rax$/;"	l
ce5	bad_mmap.asm	/^ ce5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ce5	grep.asm	/^ ce5:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
ce5	init.asm	/^ ce5:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ce5	sh.asm	/^     ce5:	00 00 00 $/;"	l
ce5	usertests.asm	/^     ce5:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
ce6	stressfs.asm	/^ ce6:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ce6	wc.asm	/^ ce6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ce7	eager_mmap.asm	/^ ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ce7	imshow.asm	/^ ce7:	eb 0b                	jmp    cf4 <free+0x11e>$/;"	l
ce7	lazy_mmap.asm	/^ ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ce8	bad_mmap.asm	/^ ce8:	89 c0                	mov    %eax,%eax$/;"	l
ce8	divide.asm	/^ ce8:	00 00 00 $/;"	l
ce8	prettyprint.asm	/^     ce8:	be 25 00 00 00       	mov    $0x25,%esi$/;"	l
ce8	sh.asm	/^     ce8:	ff d0                	callq  *%rax$/;"	l
ce9	imshow.asm	/^ ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ce9	init.asm	/^ ce9:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cea	bad_mmap.asm	/^ cea:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
cea	cat.asm	/^ cea:	00 00 00 $/;"	l
cea	eager_mmap.asm	/^ cea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cea	lazy_mmap.asm	/^ cea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
cea	sh.asm	/^     cea:	83 f8 61             	cmp    $0x61,%eax$/;"	l
cea	stressfs.asm	/^ cea:	eb 4e                	jmp    d3a <malloc+0x148>$/;"	l
cea	wc.asm	/^ cea:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ceb	divide.asm	/^ ceb:	ff d0                	callq  *%rax$/;"	l
ceb	ls.asm	/^     ceb:	00 00 00 $/;"	l
cec	grep.asm	/^ cec:	48 01 d0             	add    %rdx,%rax$/;"	l
cec	stressfs.asm	/^ cec:	48 b8 d0 0f 00 00 00 	movabs $0xfd0,%rax$/;"	l
cec	usertests.asm	/^     cec:	00 00 00 $/;"	l
ced	cat.asm	/^ ced:	48 8b 00             	mov    (%rax),%rax$/;"	l
ced	divide.asm	/^ ced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ced	imshow.asm	/^ ced:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ced	init.asm	/^ ced:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ced	prettyprint.asm	/^     ced:	89 c7                	mov    %eax,%edi$/;"	l
ced	sh.asm	/^     ced:	74 16                	je     d05 <parseredirs+0x77>$/;"	l
ced	wc.asm	/^ ced:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
cee	bad_mmap.asm	/^ cee:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
cee	eager_mmap.asm	/^ cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cee	lazy_mmap.asm	/^ cee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cee	ls.asm	/^     cee:	ff d0                	callq  *%rax$/;"	l
cef	grep.asm	/^ cef:	0f b6 00             	movzbl (%rax),%eax$/;"	l
cef	prettyprint.asm	/^     cef:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
cef	sh.asm	/^     cef:	48 bf 07 1e 00 00 00 	movabs $0x1e07,%rdi$/;"	l
cef	usertests.asm	/^     cef:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
cf	cat.asm	/^  cf:	7f 1d                	jg     ee <main+0x32>$/;"	l
cf	divide.asm	/^  cf:	75 2c                	jne    fd <main+0xad>$/;"	l
cf	echo.asm	/^  cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
cf	imshow.asm	/^  cf:	48 8d 8d f0 fb ff ff 	lea    -0x410(%rbp),%rcx$/;"	l
cf	ln.asm	/^  cf:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
cf	sh.asm	/^      cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
cf	wc.asm	/^  cf:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
cf	zombie.asm	/^  cf:	74 12                	je     e3 <strcmp+0x39>$/;"	l
cf0	cat.asm	/^ cf0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf0	ls.asm	/^     cf0:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
cf1	divide.asm	/^ cf1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
cf1	imshow.asm	/^ cf1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
cf1	init.asm	/^ cf1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cf2	bad_mmap.asm	/^ cf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cf2	eager_mmap.asm	/^ cf2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cf2	grep.asm	/^ cf2:	84 c0                	test   %al,%al$/;"	l
cf2	lazy_mmap.asm	/^ cf2:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cf2	usertests.asm	/^     cf2:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
cf3	stressfs.asm	/^ cf3:	00 00 00 $/;"	l
cf4	cat.asm	/^ cf4:	75 23                	jne    d19 <malloc+0x130>$/;"	l
cf4	grep.asm	/^ cf4:	0f 85 fc fc ff ff    	jne    9f6 <printf+0x9e>$/;"	l
cf4	imshow.asm	/^ cf4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
cf4	init.asm	/^ cf4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cf4	wc.asm	/^ cf4:	00 00 00 $/;"	l
cf5	eager_mmap.asm	/^ cf5:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cf5	lazy_mmap.asm	/^ cf5:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
cf6	bad_mmap.asm	/^ cf6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
cf6	cat.asm	/^ cf6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cf6	divide.asm	/^ cf6:	75 07                	jne    cff <morecore+0x41>$/;"	l
cf6	prettyprint.asm	/^     cf6:	00 00 00 $/;"	l
cf6	sh.asm	/^     cf6:	00 00 00 $/;"	l
cf6	stressfs.asm	/^ cf6:	48 8b 00             	mov    (%rax),%rax$/;"	l
cf7	init.asm	/^ cf7:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
cf7	ls.asm	/^     cf7:	00 00 00 $/;"	l
cf7	wc.asm	/^ cf7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
cf8	divide.asm	/^ cf8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
cf8	eager_mmap.asm	/^ cf8:	72 65                	jb     d5f <malloc+0xfa>$/;"	l
cf8	lazy_mmap.asm	/^ cf8:	72 65                	jb     d5f <malloc+0xfa>$/;"	l
cf9	bad_mmap.asm	/^ cf9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
cf9	cat.asm	/^ cf9:	89 c7                	mov    %eax,%edi$/;"	l
cf9	prettyprint.asm	/^     cf9:	ff d0                	callq  *%rax$/;"	l
cf9	sh.asm	/^     cf9:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
cf9	stressfs.asm	/^ cf9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
cf9	usertests.asm	/^     cf9:	00 00 00 $/;"	l
cfa	eager_mmap.asm	/^ cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cfa	grep.asm	/^ cfa:	90                   	nop$/;"	l
cfa	lazy_mmap.asm	/^ cfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cfa	ls.asm	/^     cfa:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
cfa	wc.asm	/^ cfa:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
cfb	cat.asm	/^ cfb:	48 b8 70 0b 00 00 00 	movabs $0xb70,%rax$/;"	l
cfb	grep.asm	/^ cfb:	c9                   	leaveq $/;"	l
cfb	imshow.asm	/^ cfb:	00 00 00 $/;"	l
cfb	prettyprint.asm	/^     cfb:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax$/;"	l
cfc	bad_mmap.asm	/^ cfc:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
cfc	grep.asm	/^ cfc:	c3                   	retq   $/;"	l
cfc	usertests.asm	/^     cfc:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
cfd	divide.asm	/^ cfd:	eb 36                	jmp    d35 <morecore+0x77>$/;"	l
cfd	grep.asm	/^ cfd:	55                   	push   %rbp$/;"	l
cfd	stressfs.asm	/^ cfd:	75 23                	jne    d22 <malloc+0x130>$/;"	l
cfe	eager_mmap.asm	/^ cfe:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cfe	grep.asm	/^ cfe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
cfe	imshow.asm	/^ cfe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
cfe	init.asm	/^ cfe:	00 00 00 $/;"	l
cfe	lazy_mmap.asm	/^ cfe:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
cff	divide.asm	/^ cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
cff	stressfs.asm	/^ cff:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
cgaputc	console.c	/^cgaputc(int c, int color)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	prettyprint.asm	/^char *hoarequote = "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.\\n\\n- C.A.R. Hoare (British computer scientist, winner of the 1980 Turing Award)\\n\\n";$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	bootmain.c	/^  uint64 checksum;$/;"	m	struct:mbheader	file:
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
color	file.h	/^  int color;$/;"	m	struct:file
color	kernel.asm	/^	  color = 0x7;$/;"	d
color	kernel.asm	/^	  color = f->color;$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((addr_t) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon8	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleioctl	console.c	/^consoleioctl(struct file *f, int param, int color) {$/;"	f
consoleread	console.c	/^consoleread(struct file *f, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct file *f, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c, int color)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	kernel.asm	/^  cpu = c;$/;"	d
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpu	vm.c	/^__thread struct cpu *cpu;$/;"	v	typeref:struct:cpu
cpunum	lapic.c	/^cpunum(void)$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^   uint64 cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
cx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
d	cat.asm	/^   d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d	init.asm	/^   d:	48 bf 65 0d 00 00 00 	movabs $0xd65,%rdi$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	ls.asm	/^       d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d0	eager_mmap.asm	/^  d0:	48 be 42 0e 00 00 00 	movabs $0xe42,%rsi$/;"	l
d0	kill.asm	/^  d0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0	lazy_mmap.asm	/^  d0:	48 be 42 0e 00 00 00 	movabs $0xe42,%rsi$/;"	l
d0	ls.asm	/^      d0:	89 c2                	mov    %eax,%edx$/;"	l
d0	mkdir.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d0	rm.asm	/^  d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
d00	sh.asm	/^     d00:	00 00 00 $/;"	l
d00	usertests.asm	/^     d00:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d01	eager_mmap.asm	/^ d01:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d01	grep.asm	/^ d01:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d01	init.asm	/^ d01:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d01	lazy_mmap.asm	/^ d01:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d01	ls.asm	/^     d01:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d01	prettyprint.asm	/^     d01:	0f be d0             	movsbl %al,%edx$/;"	l
d01	wc.asm	/^ d01:	00 00 00 $/;"	l
d02	cat.asm	/^ d02:	00 00 00 $/;"	l
d02	imshow.asm	/^ d02:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d02	stressfs.asm	/^ d02:	89 c7                	mov    %eax,%edi$/;"	l
d03	bad_mmap.asm	/^ d03:	00 00 00 $/;"	l
d03	divide.asm	/^ d03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d03	sh.asm	/^     d03:	ff d0                	callq  *%rax$/;"	l
d04	eager_mmap.asm	/^ d04:	75 10                	jne    d16 <malloc+0xb1>$/;"	l
d04	lazy_mmap.asm	/^ d04:	75 10                	jne    d16 <malloc+0xb1>$/;"	l
d04	prettyprint.asm	/^     d04:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax$/;"	l
d04	stressfs.asm	/^ d04:	48 b8 79 0b 00 00 00 	movabs $0xb79,%rax$/;"	l
d04	wc.asm	/^ d04:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d05	cat.asm	/^ d05:	ff d0                	callq  *%rax$/;"	l
d05	grep.asm	/^ d05:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d05	imshow.asm	/^ d05:	90                   	nop$/;"	l
d05	init.asm	/^ d05:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d05	sh.asm	/^     d05:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d06	bad_mmap.asm	/^ d06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d06	eager_mmap.asm	/^ d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d06	imshow.asm	/^ d06:	c9                   	leaveq $/;"	l
d06	lazy_mmap.asm	/^ d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d07	cat.asm	/^ d07:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d07	divide.asm	/^ d07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d07	imshow.asm	/^ d07:	c3                   	retq   $/;"	l
d07	ls.asm	/^     d07:	48 63 d0             	movslq %eax,%rdx$/;"	l
d07	usertests.asm	/^     d07:	eb 48                	jmp    d51 <createtest+0x9d>$/;"	l
d07	wc.asm	/^ d07:	48 b8 a0 12 00 00 00 	movabs $0x12a0,%rax$/;"	l
d08	imshow.asm	/^ d08:	55                   	push   %rbp$/;"	l
d08	init.asm	/^ d08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d08	sh.asm	/^     d08:	83 f8 3c             	cmp    $0x3c,%eax$/;"	l
d09	grep.asm	/^ d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d09	imshow.asm	/^ d09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d09	usertests.asm	/^     d09:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d0a	bad_mmap.asm	/^ d0a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d0a	eager_mmap.asm	/^ d0a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d0a	lazy_mmap.asm	/^ d0a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d0a	ls.asm	/^     d0a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d0a	prettyprint.asm	/^     d0a:	89 d6                	mov    %edx,%esi$/;"	l
d0b	cat.asm	/^ d0b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d0b	divide.asm	/^ d0b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d0b	sh.asm	/^     d0b:	74 0f                	je     d1c <parseredirs+0x8e>$/;"	l
d0b	stressfs.asm	/^ d0b:	00 00 00 $/;"	l
d0c	imshow.asm	/^ d0c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
d0c	init.asm	/^ d0c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d0c	prettyprint.asm	/^     d0c:	89 c7                	mov    %eax,%edi$/;"	l
d0c	usertests.asm	/^     d0c:	83 c0 30             	add    $0x30,%eax$/;"	l
d0d	bad_mmap.asm	/^ d0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d0d	eager_mmap.asm	/^ d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d0d	grep.asm	/^ d0d:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d0d	lazy_mmap.asm	/^ d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d0d	sh.asm	/^     d0d:	83 f8 3e             	cmp    $0x3e,%eax$/;"	l
d0e	divide.asm	/^ d0e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d0e	prettyprint.asm	/^     d0e:	48 b8 aa 08 00 00 00 	movabs $0x8aa,%rax$/;"	l
d0e	stressfs.asm	/^ d0e:	ff d0                	callq  *%rax$/;"	l
d0e	wc.asm	/^ d0e:	00 00 00 $/;"	l
d0f	usertests.asm	/^     d0f:	89 c2                	mov    %eax,%edx$/;"	l
d1	bad_mmap.asm	/^  d1:	00 00 00 $/;"	l
d1	cat.asm	/^  d1:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
d1	divide.asm	/^  d1:	48 be a8 0e 00 00 00 	movabs $0xea8,%rsi$/;"	l
d1	forktest.asm	/^  d1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d1	stressfs.asm	/^  d1:	48 b8 23 05 00 00 00 	movabs $0x523,%rax$/;"	l
d1	zombie.asm	/^  d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d10	cat.asm	/^ d10:	75 07                	jne    d19 <malloc+0x130>$/;"	l
d10	imshow.asm	/^ d10:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
d10	init.asm	/^ d10:	eb 4e                	jmp    d60 <malloc+0x148>$/;"	l
d10	sh.asm	/^     d10:	74 36                	je     d48 <parseredirs+0xba>$/;"	l
d10	stressfs.asm	/^ d10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d11	bad_mmap.asm	/^ d11:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d11	divide.asm	/^ d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d11	eager_mmap.asm	/^ d11:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d11	grep.asm	/^ d11:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d11	lazy_mmap.asm	/^ d11:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d11	ls.asm	/^     d11:	48 01 d0             	add    %rdx,%rax$/;"	l
d11	usertests.asm	/^     d11:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d11	wc.asm	/^ d11:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
d12	cat.asm	/^ d12:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d12	init.asm	/^ d12:	48 b8 40 10 00 00 00 	movabs $0x1040,%rax$/;"	l
d12	sh.asm	/^     d12:	83 f8 2b             	cmp    $0x2b,%eax$/;"	l
d13	imshow.asm	/^ d13:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
d14	eager_mmap.asm	/^ d14:	eb 2e                	jmp    d44 <malloc+0xdf>$/;"	l
d14	lazy_mmap.asm	/^ d14:	eb 2e                	jmp    d44 <malloc+0xdf>$/;"	l
d14	ls.asm	/^     d14:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d14	stressfs.asm	/^ d14:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d15	bad_mmap.asm	/^ d15:	eb 4e                	jmp    d65 <malloc+0x148>$/;"	l
d15	divide.asm	/^ d15:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d15	grep.asm	/^ d15:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
d15	prettyprint.asm	/^     d15:	00 00 00 $/;"	l
d15	sh.asm	/^     d15:	74 5d                	je     d74 <parseredirs+0xe6>$/;"	l
d16	eager_mmap.asm	/^ d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d16	lazy_mmap.asm	/^ d16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d17	bad_mmap.asm	/^ d17:	48 b8 30 11 00 00 00 	movabs $0x1130,%rax$/;"	l
d17	cat.asm	/^ d17:	eb 18                	jmp    d31 <malloc+0x148>$/;"	l
d17	ls.asm	/^     d17:	84 c0                	test   %al,%al$/;"	l
d17	sh.asm	/^     d17:	e9 83 00 00 00       	jmpq   d9f <parseredirs+0x111>$/;"	l
d18	prettyprint.asm	/^     d18:	ff d0                	callq  *%rax$/;"	l
d18	usertests.asm	/^     d18:	00 00 00 $/;"	l
d18	wc.asm	/^ d18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d19	cat.asm	/^ d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d19	divide.asm	/^ d19:	48 89 c7             	mov    %rax,%rdi$/;"	l
d19	init.asm	/^ d19:	00 00 00 $/;"	l
d19	ls.asm	/^     d19:	0f 85 fc fc ff ff    	jne    a1b <printf+0x9e>$/;"	l
d19	stressfs.asm	/^ d19:	75 07                	jne    d22 <malloc+0x130>$/;"	l
d1a	eager_mmap.asm	/^ d1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d1a	imshow.asm	/^ d1a:	77 07                	ja     d23 <morecore+0x1b>$/;"	l
d1a	lazy_mmap.asm	/^ d1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d1a	prettyprint.asm	/^     d1a:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%rbp)$/;"	l
d1b	stressfs.asm	/^ d1b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d1b	usertests.asm	/^     d1b:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d1c	divide.asm	/^ d1c:	48 b8 8c 0b 00 00 00 	movabs $0xb8c,%rax$/;"	l
d1c	grep.asm	/^ d1c:	00 00 00 $/;"	l
d1c	imshow.asm	/^ d1c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
d1c	init.asm	/^ d1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1c	sh.asm	/^     d1c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d1c	wc.asm	/^ d1c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1d	cat.asm	/^ d1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d1d	eager_mmap.asm	/^ d1d:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d1d	lazy_mmap.asm	/^ d1d:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d1e	bad_mmap.asm	/^ d1e:	00 00 00 $/;"	l
d1e	usertests.asm	/^     d1e:	be 02 02 00 00       	mov    $0x202,%esi$/;"	l
d1f	grep.asm	/^ d1f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d1f	init.asm	/^ d1f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d1f	ls.asm	/^     d1f:	90                   	nop$/;"	l
d1f	wc.asm	/^ d1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d2	grep.asm	/^  d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	init.asm	/^  d2:	48 bf 6d 0d 00 00 00 	movabs $0xd6d,%rdi$/;"	l
d2	ln.asm	/^  d2:	48 89 ce             	mov    %rcx,%rsi$/;"	l
d2	ls.asm	/^      d2:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
d2	prettyprint.asm	/^      d2:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d2	usertests.asm	/^      d2:	00 00 00 $/;"	l
d2	wc.asm	/^  d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
d20	eager_mmap.asm	/^ d20:	89 c2                	mov    %eax,%edx$/;"	l
d20	lazy_mmap.asm	/^ d20:	89 c2                	mov    %eax,%edx$/;"	l
d20	ls.asm	/^     d20:	c9                   	leaveq $/;"	l
d20	sh.asm	/^     d20:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d20	stressfs.asm	/^ d20:	eb 18                	jmp    d3a <malloc+0x148>$/;"	l
d21	bad_mmap.asm	/^ d21:	48 8b 00             	mov    (%rax),%rax$/;"	l
d21	cat.asm	/^ d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d21	ls.asm	/^     d21:	c3                   	retq   $/;"	l
d21	prettyprint.asm	/^     d21:	00 00 00 $/;"	l
d22	eager_mmap.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d22	grep.asm	/^ d22:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d22	lazy_mmap.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d22	ls.asm	/^     d22:	55                   	push   %rbp$/;"	l
d22	stressfs.asm	/^ d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d23	divide.asm	/^ d23:	00 00 00 $/;"	l
d23	imshow.asm	/^ d23:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d23	init.asm	/^ d23:	75 23                	jne    d48 <malloc+0x130>$/;"	l
d23	ls.asm	/^     d23:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d23	usertests.asm	/^     d23:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d23	wc.asm	/^ d23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d24	bad_mmap.asm	/^ d24:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d24	prettyprint.asm	/^     d24:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)$/;"	l
d24	sh.asm	/^     d24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d25	cat.asm	/^ d25:	48 8b 00             	mov    (%rax),%rax$/;"	l
d25	init.asm	/^ d25:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d26	divide.asm	/^ d26:	ff d0                	callq  *%rax$/;"	l
d26	eager_mmap.asm	/^ d26:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d26	grep.asm	/^ d26:	eb 2f                	jmp    d57 <free+0x5a>$/;"	l
d26	imshow.asm	/^ d26:	c1 e0 04             	shl    $0x4,%eax$/;"	l
d26	lazy_mmap.asm	/^ d26:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d26	ls.asm	/^     d26:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d26	stressfs.asm	/^ d26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d27	wc.asm	/^ d27:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d28	bad_mmap.asm	/^ d28:	75 23                	jne    d4d <malloc+0x130>$/;"	l
d28	cat.asm	/^ d28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d28	divide.asm	/^ d28:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d28	grep.asm	/^ d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d28	init.asm	/^ d28:	89 c7                	mov    %eax,%edi$/;"	l
d28	sh.asm	/^     d28:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
d29	eager_mmap.asm	/^ d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d29	imshow.asm	/^ d29:	89 c7                	mov    %eax,%edi$/;"	l
d29	lazy_mmap.asm	/^ d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d2a	bad_mmap.asm	/^ d2a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d2a	init.asm	/^ d2a:	48 b8 9f 0b 00 00 00 	movabs $0xb9f,%rax$/;"	l
d2a	ls.asm	/^     d2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d2a	stressfs.asm	/^ d2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d2a	usertests.asm	/^     d2a:	00 00 00 $/;"	l
d2a	wc.asm	/^ d2a:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d2b	imshow.asm	/^ d2b:	48 b8 0c 07 00 00 00 	movabs $0x70c,%rax$/;"	l
d2b	prettyprint.asm	/^     d2b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax$/;"	l
d2c	cat.asm	/^ d2c:	e9 41 ff ff ff       	jmpq   c72 <malloc+0x89>$/;"	l
d2c	grep.asm	/^ d2c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2d	bad_mmap.asm	/^ d2d:	89 c7                	mov    %eax,%edi$/;"	l
d2d	eager_mmap.asm	/^ d2d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d2d	lazy_mmap.asm	/^ d2d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d2d	usertests.asm	/^     d2d:	48 b8 52 60 00 00 00 	movabs $0x6052,%rax$/;"	l
d2d	wc.asm	/^ d2d:	72 65                	jb     d94 <malloc+0xfa>$/;"	l
d2e	ls.asm	/^     d2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d2e	sh.asm	/^     d2e:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
d2e	stressfs.asm	/^ d2e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d2f	bad_mmap.asm	/^ d2f:	48 b8 a4 0b 00 00 00 	movabs $0xba4,%rax$/;"	l
d2f	divide.asm	/^ d2f:	00 00 00 $/;"	l
d2f	grep.asm	/^ d2f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d2f	wc.asm	/^ d2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3	echo.asm	/^  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d3	sh.asm	/^      d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d30	eager_mmap.asm	/^ d30:	89 c0                	mov    %eax,%eax$/;"	l
d30	lazy_mmap.asm	/^ d30:	89 c0                	mov    %eax,%eax$/;"	l
d31	cat.asm	/^ d31:	c9                   	leaveq $/;"	l
d31	init.asm	/^ d31:	00 00 00 $/;"	l
d31	prettyprint.asm	/^     d31:	48 63 d0             	movslq %eax,%rdx$/;"	l
d31	stressfs.asm	/^ d31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d32	cat.asm	/^ d32:	c3                   	retq   $/;"	l
d32	divide.asm	/^ d32:	48 8b 00             	mov    (%rax),%rax$/;"	l
d32	eager_mmap.asm	/^ d32:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d32	imshow.asm	/^ d32:	00 00 00 $/;"	l
d32	lazy_mmap.asm	/^ d32:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d32	ls.asm	/^     d32:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d33	grep.asm	/^ d33:	77 17                	ja     d4c <free+0x4f>$/;"	l
d33	sh.asm	/^     d33:	48 89 c7             	mov    %rax,%rdi$/;"	l
d33	wc.asm	/^ d33:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d34	init.asm	/^ d34:	ff d0                	callq  *%rax$/;"	l
d34	prettyprint.asm	/^     d34:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax$/;"	l
d34	usertests.asm	/^     d34:	00 00 00 $/;"	l
d35	divide.asm	/^ d35:	c9                   	leaveq $/;"	l
d35	grep.asm	/^ d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d35	imshow.asm	/^ d35:	ff d0                	callq  *%rax$/;"	l
d35	stressfs.asm	/^ d35:	e9 41 ff ff ff       	jmpq   c7b <malloc+0x89>$/;"	l
d36	bad_mmap.asm	/^ d36:	00 00 00 $/;"	l
d36	divide.asm	/^ d36:	c3                   	retq   $/;"	l
d36	eager_mmap.asm	/^ d36:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d36	init.asm	/^ d36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d36	lazy_mmap.asm	/^ d36:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d36	ls.asm	/^     d36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d36	sh.asm	/^     d36:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d36	wc.asm	/^ d36:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
d37	divide.asm	/^ d37:	55                   	push   %rbp$/;"	l
d37	imshow.asm	/^ d37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d37	usertests.asm	/^     d37:	ff d0                	callq  *%rax$/;"	l
d38	divide.asm	/^ d38:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d39	bad_mmap.asm	/^ d39:	ff d0                	callq  *%rax$/;"	l
d39	grep.asm	/^ d39:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d39	usertests.asm	/^     d39:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
d39	wc.asm	/^ d39:	75 10                	jne    d4b <malloc+0xb1>$/;"	l
d3a	eager_mmap.asm	/^ d3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3a	init.asm	/^ d3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d3a	lazy_mmap.asm	/^ d3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3a	ls.asm	/^     d3a:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
d3a	stressfs.asm	/^ d3a:	c9                   	leaveq $/;"	l
d3b	bad_mmap.asm	/^ d3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d3b	divide.asm	/^ d3b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d3b	imshow.asm	/^ d3b:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
d3b	prettyprint.asm	/^     d3b:	48 01 d0             	add    %rdx,%rax$/;"	l
d3b	stressfs.asm	/^ d3b:	c3                   	retq   $/;"	l
d3b	wc.asm	/^ d3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3c	usertests.asm	/^     d3c:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
d3d	grep.asm	/^ d3d:	77 2f                	ja     d6e <free+0x71>$/;"	l
d3d	sh.asm	/^     d3d:	00 00 00 $/;"	l
d3e	eager_mmap.asm	/^ d3e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d3e	lazy_mmap.asm	/^ d3e:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d3e	prettyprint.asm	/^     d3e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
d3f	bad_mmap.asm	/^ d3f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d3f	divide.asm	/^ d3f:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d3f	grep.asm	/^ d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d3f	init.asm	/^ d3f:	75 07                	jne    d48 <malloc+0x130>$/;"	l
d3f	usertests.asm	/^     d3f:	89 c7                	mov    %eax,%edi$/;"	l
d3f	wc.asm	/^ d3f:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d4	bad_mmap.asm	/^  d4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
d4	kill.asm	/^  d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d4	mkdir.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d4	rm.asm	/^  d4:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
d40	imshow.asm	/^ d40:	75 07                	jne    d49 <morecore+0x41>$/;"	l
d40	sh.asm	/^     d40:	ff d0                	callq  *%rax$/;"	l
d41	eager_mmap.asm	/^ d41:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d41	init.asm	/^ d41:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d41	lazy_mmap.asm	/^ d41:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d41	ls.asm	/^     d41:	00 00 00 $/;"	l
d41	prettyprint.asm	/^     d41:	84 c0                	test   %al,%al$/;"	l
d41	usertests.asm	/^     d41:	48 b8 34 60 00 00 00 	movabs $0x6034,%rax$/;"	l
d42	divide.asm	/^ d42:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d42	imshow.asm	/^ d42:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d42	sh.asm	/^     d42:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d42	wc.asm	/^ d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d43	grep.asm	/^ d43:	48 8b 00             	mov    (%rax),%rax$/;"	l
d43	prettyprint.asm	/^     d43:	0f 85 fc fc ff ff    	jne    a45 <printf+0x9e>$/;"	l
d44	bad_mmap.asm	/^ d44:	75 07                	jne    d4d <malloc+0x130>$/;"	l
d44	eager_mmap.asm	/^ d44:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d44	lazy_mmap.asm	/^ d44:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d44	ls.asm	/^     d44:	48 8b 00             	mov    (%rax),%rax$/;"	l
d45	divide.asm	/^ d45:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d46	bad_mmap.asm	/^ d46:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d46	grep.asm	/^ d46:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d46	init.asm	/^ d46:	eb 18                	jmp    d60 <malloc+0x148>$/;"	l
d46	sh.asm	/^     d46:	eb 57                	jmp    d9f <parseredirs+0x111>$/;"	l
d46	wc.asm	/^ d46:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d47	imshow.asm	/^ d47:	eb 36                	jmp    d7f <morecore+0x77>$/;"	l
d47	ls.asm	/^     d47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d48	init.asm	/^ d48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d48	sh.asm	/^     d48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d48	usertests.asm	/^     d48:	00 00 00 $/;"	l
d49	divide.asm	/^ d49:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d49	imshow.asm	/^ d49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d49	prettyprint.asm	/^     d49:	90                   	nop$/;"	l
d49	wc.asm	/^ d49:	eb 2e                	jmp    d79 <malloc+0xdf>$/;"	l
d4a	grep.asm	/^ d4a:	77 22                	ja     d6e <free+0x71>$/;"	l
d4a	prettyprint.asm	/^     d4a:	c9                   	leaveq $/;"	l
d4b	bad_mmap.asm	/^ d4b:	eb 18                	jmp    d65 <malloc+0x148>$/;"	l
d4b	eager_mmap.asm	/^ d4b:	00 00 00 $/;"	l
d4b	lazy_mmap.asm	/^ d4b:	00 00 00 $/;"	l
d4b	ls.asm	/^     d4b:	eb 2f                	jmp    d7c <free+0x5a>$/;"	l
d4b	prettyprint.asm	/^     d4b:	c3                   	retq   $/;"	l
d4b	usertests.asm	/^     d4b:	ff d0                	callq  *%rax$/;"	l
d4b	wc.asm	/^ d4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	grep.asm	/^ d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4c	init.asm	/^ d4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d4c	prettyprint.asm	/^     d4c:	55                   	push   %rbp$/;"	l
d4c	sh.asm	/^     d4c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d4d	bad_mmap.asm	/^ d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4d	divide.asm	/^ d4d:	83 c0 01             	add    $0x1,%eax$/;"	l
d4d	imshow.asm	/^ d4d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d4d	ls.asm	/^     d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d4d	prettyprint.asm	/^     d4d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d4d	usertests.asm	/^     d4d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
d4e	eager_mmap.asm	/^ d4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d4e	lazy_mmap.asm	/^ d4e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d4f	wc.asm	/^ d4f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d5	forktest.asm	/^  d5:	78 21                	js     f8 <forktest+0x67>$/;"	l
d5	ln.asm	/^  d5:	48 89 f7             	mov    %rsi,%rdi$/;"	l
d5	usertests.asm	/^      d5:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d5	zombie.asm	/^  d5:	0f b6 10             	movzbl (%rax),%edx$/;"	l
d50	divide.asm	/^ d50:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d50	grep.asm	/^ d50:	48 8b 00             	mov    (%rax),%rax$/;"	l
d50	init.asm	/^ d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d50	prettyprint.asm	/^     d50:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
d50	sh.asm	/^     d50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d51	bad_mmap.asm	/^ d51:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d51	imshow.asm	/^ d51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d51	ls.asm	/^     d51:	48 8b 00             	mov    (%rax),%rax$/;"	l
d51	usertests.asm	/^     d51:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
d52	eager_mmap.asm	/^ d52:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d52	lazy_mmap.asm	/^ d52:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d52	wc.asm	/^ d52:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
d53	divide.asm	/^ d53:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d53	grep.asm	/^ d53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d54	init.asm	/^ d54:	48 8b 00             	mov    (%rax),%rax$/;"	l
d54	ls.asm	/^     d54:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d54	prettyprint.asm	/^     d54:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
d54	sh.asm	/^     d54:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d55	bad_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	eager_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	imshow.asm	/^ d55:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d55	lazy_mmap.asm	/^ d55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d55	usertests.asm	/^     d55:	7e b2                	jle    d09 <createtest+0x55>$/;"	l
d55	wc.asm	/^ d55:	89 c2                	mov    %eax,%edx$/;"	l
d57	grep.asm	/^ d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d57	init.asm	/^ d57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d57	usertests.asm	/^     d57:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d57	wc.asm	/^ d57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d58	imshow.asm	/^ d58:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d58	ls.asm	/^     d58:	77 17                	ja     d71 <free+0x4f>$/;"	l
d58	prettyprint.asm	/^     d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
d59	bad_mmap.asm	/^ d59:	48 8b 00             	mov    (%rax),%rax$/;"	l
d59	eager_mmap.asm	/^ d59:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d59	lazy_mmap.asm	/^ d59:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d5a	divide.asm	/^ d5a:	00 00 00 $/;"	l
d5a	ls.asm	/^     d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5a	sh.asm	/^     d5a:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d5b	grep.asm	/^ d5b:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5b	imshow.asm	/^ d5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d5b	init.asm	/^ d5b:	e9 41 ff ff ff       	jmpq   ca1 <malloc+0x89>$/;"	l
d5b	wc.asm	/^ d5b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d5c	bad_mmap.asm	/^ d5c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d5c	prettyprint.asm	/^     d5c:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
d5d	divide.asm	/^ d5d:	48 8b 00             	mov    (%rax),%rax$/;"	l
d5d	eager_mmap.asm	/^ d5d:	eb 4e                	jmp    dad <malloc+0x148>$/;"	l
d5d	lazy_mmap.asm	/^ d5d:	eb 4e                	jmp    dad <malloc+0x148>$/;"	l
d5e	ls.asm	/^     d5e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d5e	usertests.asm	/^     d5e:	00 00 00 $/;"	l
d5e	wc.asm	/^ d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d5f	eager_mmap.asm	/^ d5f:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d5f	grep.asm	/^ d5f:	76 c7                	jbe    d28 <free+0x2b>$/;"	l
d5f	imshow.asm	/^ d5f:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d5f	lazy_mmap.asm	/^ d5f:	48 b8 60 11 00 00 00 	movabs $0x1160,%rax$/;"	l
d5f	sh.asm	/^     d5f:	48 89 c7             	mov    %rax,%rdi$/;"	l
d6	cat.asm	/^  d6:	48 b8 00 00 00 00 00 	movabs $0x0,%rax$/;"	l
d6	imshow.asm	/^  d6:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d6	wc.asm	/^  d6:	0f 8f 52 ff ff ff    	jg     2e <wc+0x2e>$/;"	l
d60	bad_mmap.asm	/^ d60:	e9 41 ff ff ff       	jmpq   ca6 <malloc+0x89>$/;"	l
d60	divide.asm	/^ d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d60	init.asm	/^ d60:	c9                   	leaveq $/;"	l
d60	prettyprint.asm	/^     d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d61	grep.asm	/^ d61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d61	init.asm	/^ d61:	c3                   	retq   $/;"	l
d61	usertests.asm	/^     d61:	c6 00 61             	movb   $0x61,(%rax)$/;"	l
d62	ls.asm	/^     d62:	77 2f                	ja     d93 <free+0x71>$/;"	l
d62	sh.asm	/^     d62:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d62	wc.asm	/^ d62:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d63	imshow.asm	/^ d63:	48 89 c7             	mov    %rax,%rdi$/;"	l
d64	divide.asm	/^ d64:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
d64	ls.asm	/^     d64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d64	prettyprint.asm	/^     d64:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
d64	usertests.asm	/^     d64:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d65	bad_mmap.asm	/^ d65:	c9                   	leaveq $/;"	l
d65	grep.asm	/^ d65:	48 8b 00             	mov    (%rax),%rax$/;"	l
d65	wc.asm	/^ d65:	89 c0                	mov    %eax,%eax$/;"	l
d66	bad_mmap.asm	/^ d66:	c3                   	retq   $/;"	l
d66	eager_mmap.asm	/^ d66:	00 00 00 $/;"	l
d66	imshow.asm	/^ d66:	48 b8 d6 0b 00 00 00 	movabs $0xbd6,%rax$/;"	l
d66	lazy_mmap.asm	/^ d66:	00 00 00 $/;"	l
d67	wc.asm	/^ d67:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d68	grep.asm	/^ d68:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d68	ls.asm	/^     d68:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	divide.asm	/^ d69:	75 4a                	jne    db5 <malloc+0x7e>$/;"	l
d69	eager_mmap.asm	/^ d69:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	lazy_mmap.asm	/^ d69:	48 8b 00             	mov    (%rax),%rax$/;"	l
d69	sh.asm	/^     d69:	00 00 00 $/;"	l
d6b	divide.asm	/^ d6b:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d6b	ls.asm	/^     d6b:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d6b	prettyprint.asm	/^     d6b:	00 00 00 $/;"	l
d6b	usertests.asm	/^     d6b:	00 00 00 $/;"	l
d6b	wc.asm	/^ d6b:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
d6c	eager_mmap.asm	/^ d6c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d6c	grep.asm	/^ d6c:	76 ba                	jbe    d28 <free+0x2b>$/;"	l
d6c	lazy_mmap.asm	/^ d6c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
d6c	sh.asm	/^     d6c:	ff d0                	callq  *%rax$/;"	l
d6d	imshow.asm	/^ d6d:	00 00 00 $/;"	l
d6e	grep.asm	/^ d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d6e	prettyprint.asm	/^     d6e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d6e	sh.asm	/^     d6e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d6e	usertests.asm	/^     d6e:	c6 40 02 00          	movb   $0x0,0x2(%rax)$/;"	l
d6f	ls.asm	/^     d6f:	77 22                	ja     d93 <free+0x71>$/;"	l
d6f	wc.asm	/^ d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d7	eager_mmap.asm	/^  d7:	00 00 00 $/;"	l
d7	echo.asm	/^  d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d7	forktest.asm	/^  d7:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
d7	lazy_mmap.asm	/^  d7:	00 00 00 $/;"	l
d7	mkdir.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	prettyprint.asm	/^      d7:	48 ba a7 09 00 00 00 	movabs $0x9a7,%rdx$/;"	l
d7	rm.asm	/^  d7:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
d7	sh.asm	/^      d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d70	eager_mmap.asm	/^ d70:	75 23                	jne    d95 <malloc+0x130>$/;"	l
d70	imshow.asm	/^ d70:	ff d0                	callq  *%rax$/;"	l
d70	lazy_mmap.asm	/^ d70:	75 23                	jne    d95 <malloc+0x130>$/;"	l
d71	ls.asm	/^     d71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d71	prettyprint.asm	/^     d71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d72	divide.asm	/^ d72:	00 00 00 $/;"	l
d72	eager_mmap.asm	/^ d72:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d72	grep.asm	/^ d72:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d72	imshow.asm	/^ d72:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d72	lazy_mmap.asm	/^ d72:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
d72	sh.asm	/^     d72:	eb 2b                	jmp    d9f <parseredirs+0x111>$/;"	l
d72	usertests.asm	/^     d72:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
d73	wc.asm	/^ d73:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
d74	sh.asm	/^     d74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
d75	divide.asm	/^ d75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d75	eager_mmap.asm	/^ d75:	89 c7                	mov    %eax,%edi$/;"	l
d75	grep.asm	/^ d75:	89 c0                	mov    %eax,%eax$/;"	l
d75	lazy_mmap.asm	/^ d75:	89 c7                	mov    %eax,%edi$/;"	l
d75	ls.asm	/^     d75:	48 8b 00             	mov    (%rax),%rax$/;"	l
d75	prettyprint.asm	/^     d75:	eb 2f                	jmp    da6 <free+0x5a>$/;"	l
d76	wc.asm	/^ d76:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
d77	eager_mmap.asm	/^ d77:	48 b8 ec 0b 00 00 00 	movabs $0xbec,%rax$/;"	l
d77	grep.asm	/^ d77:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d77	lazy_mmap.asm	/^ d77:	48 b8 ec 0b 00 00 00 	movabs $0xbec,%rax$/;"	l
d77	prettyprint.asm	/^     d77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d78	ls.asm	/^     d78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d78	sh.asm	/^     d78:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi$/;"	l
d79	divide.asm	/^ d79:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d79	imshow.asm	/^ d79:	00 00 00 $/;"	l
d79	usertests.asm	/^     d79:	eb 2f                	jmp    daa <createtest+0xf6>$/;"	l
d79	wc.asm	/^ d79:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d7b	grep.asm	/^ d7b:	48 89 c2             	mov    %rax,%rdx$/;"	l
d7b	prettyprint.asm	/^     d7b:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7b	usertests.asm	/^     d7b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
d7c	imshow.asm	/^ d7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d7c	ls.asm	/^     d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7c	sh.asm	/^     d7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
d7e	eager_mmap.asm	/^ d7e:	00 00 00 $/;"	l
d7e	grep.asm	/^ d7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d7e	lazy_mmap.asm	/^ d7e:	00 00 00 $/;"	l
d7e	prettyprint.asm	/^     d7e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d7e	usertests.asm	/^     d7e:	83 c0 30             	add    $0x30,%eax$/;"	l
d7f	imshow.asm	/^ d7f:	c9                   	leaveq $/;"	l
d8	divide.asm	/^  d8:	00 00 00 $/;"	l
d8	kill.asm	/^  d8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
d8	ln.asm	/^  d8:	89 d1                	mov    %edx,%ecx$/;"	l
d8	stressfs.asm	/^  d8:	00 00 00 $/;"	l
d8	zombie.asm	/^  d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d80	divide.asm	/^ d80:	00 00 00 $/;"	l
d80	imshow.asm	/^ d80:	c3                   	retq   $/;"	l
d80	ls.asm	/^     d80:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d80	sh.asm	/^     d80:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
d80	wc.asm	/^ d80:	00 00 00 $/;"	l
d81	eager_mmap.asm	/^ d81:	ff d0                	callq  *%rax$/;"	l
d81	imshow.asm	/^ d81:	55                   	push   %rbp$/;"	l
d81	lazy_mmap.asm	/^ d81:	ff d0                	callq  *%rax$/;"	l
d81	usertests.asm	/^     d81:	89 c2                	mov    %eax,%edx$/;"	l
d82	grep.asm	/^ d82:	48 01 c2             	add    %rax,%rdx$/;"	l
d82	imshow.asm	/^ d82:	48 89 e5             	mov    %rsp,%rbp$/;"	l
d82	prettyprint.asm	/^     d82:	77 17                	ja     d9b <free+0x4f>$/;"	l
d83	divide.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d83	eager_mmap.asm	/^ d83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d83	lazy_mmap.asm	/^ d83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
d83	usertests.asm	/^     d83:	48 b8 40 a8 00 00 00 	movabs $0xa840,%rax$/;"	l
d83	wc.asm	/^ d83:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
d84	ls.asm	/^     d84:	76 c7                	jbe    d4d <free+0x2b>$/;"	l
d84	prettyprint.asm	/^     d84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d85	grep.asm	/^ d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d85	imshow.asm	/^ d85:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
d86	ls.asm	/^     d86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d86	sh.asm	/^     d86:	b9 01 02 00 00       	mov    $0x201,%ecx$/;"	l
d87	divide.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d87	eager_mmap.asm	/^ d87:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d87	lazy_mmap.asm	/^ d87:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
d87	wc.asm	/^ d87:	48 89 10             	mov    %rdx,(%rax)$/;"	l
d88	prettyprint.asm	/^     d88:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
d89	grep.asm	/^ d89:	48 8b 00             	mov    (%rax),%rax$/;"	l
d89	imshow.asm	/^ d89:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
d8a	divide.asm	/^ d8a:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
d8a	ls.asm	/^     d8a:	48 8b 00             	mov    (%rax),%rax$/;"	l
d8a	usertests.asm	/^     d8a:	00 00 00 $/;"	l
d8a	wc.asm	/^ d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8b	sh.asm	/^     d8b:	48 89 c7             	mov    %rax,%rdi$/;"	l
d8c	eager_mmap.asm	/^ d8c:	75 07                	jne    d95 <malloc+0x130>$/;"	l
d8c	grep.asm	/^ d8c:	48 39 c2             	cmp    %rax,%rdx$/;"	l
d8c	imshow.asm	/^ d8c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
d8c	lazy_mmap.asm	/^ d8c:	75 07                	jne    d95 <malloc+0x130>$/;"	l
d8c	prettyprint.asm	/^     d8c:	77 2f                	ja     dbd <free+0x71>$/;"	l
d8d	ls.asm	/^     d8d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d8d	usertests.asm	/^     d8d:	88 50 01             	mov    %dl,0x1(%rax)$/;"	l
d8e	eager_mmap.asm	/^ d8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d8e	lazy_mmap.asm	/^ d8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d8e	prettyprint.asm	/^     d8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d8e	sh.asm	/^     d8e:	48 b8 e7 05 00 00 00 	movabs $0x5e7,%rax$/;"	l
d8e	wc.asm	/^ d8e:	48 83 c0 10          	add    $0x10,%rax$/;"	l
d8f	grep.asm	/^ d8f:	75 2d                	jne    dbe <free+0xc1>$/;"	l
d8f	imshow.asm	/^ d8f:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
d9	bad_mmap.asm	/^  d9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d9	grep.asm	/^  d9:	00 00 00 $/;"	l
d9	imshow.asm	/^  d9:	ba e8 03 00 00       	mov    $0x3e8,%edx$/;"	l
d9	init.asm	/^  d9:	00 00 00 $/;"	l
d9	ls.asm	/^      d9:	00 00 00 $/;"	l
d90	usertests.asm	/^     d90:	48 bf 40 a8 00 00 00 	movabs $0xa840,%rdi$/;"	l
d91	divide.asm	/^ d91:	00 00 00 $/;"	l
d91	grep.asm	/^ d91:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d91	ls.asm	/^     d91:	76 ba                	jbe    d4d <free+0x2b>$/;"	l
d92	prettyprint.asm	/^     d92:	48 8b 00             	mov    (%rax),%rax$/;"	l
d92	wc.asm	/^ d92:	eb 4e                	jmp    de2 <malloc+0x148>$/;"	l
d93	eager_mmap.asm	/^ d93:	eb 18                	jmp    dad <malloc+0x148>$/;"	l
d93	imshow.asm	/^ d93:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
d93	lazy_mmap.asm	/^ d93:	eb 18                	jmp    dad <malloc+0x148>$/;"	l
d93	ls.asm	/^     d93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
d94	divide.asm	/^ d94:	48 8b 10             	mov    (%rax),%rdx$/;"	l
d94	wc.asm	/^ d94:	48 b8 b0 12 00 00 00 	movabs $0x12b0,%rax$/;"	l
d95	eager_mmap.asm	/^ d95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d95	grep.asm	/^ d95:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
d95	lazy_mmap.asm	/^ d95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d95	prettyprint.asm	/^     d95:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
d95	sh.asm	/^     d95:	00 00 00 $/;"	l
d97	divide.asm	/^ d97:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
d97	imshow.asm	/^ d97:	83 c0 01             	add    $0x1,%eax$/;"	l
d97	ls.asm	/^     d97:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d97	usertests.asm	/^     d97:	00 00 00 $/;"	l
d98	grep.asm	/^ d98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d98	sh.asm	/^     d98:	ff d0                	callq  *%rax$/;"	l
d99	eager_mmap.asm	/^ d99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d99	lazy_mmap.asm	/^ d99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
d99	prettyprint.asm	/^     d99:	77 22                	ja     dbd <free+0x71>$/;"	l
d9a	imshow.asm	/^ d9a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
d9a	ls.asm	/^     d9a:	89 c0                	mov    %eax,%eax$/;"	l
d9a	sh.asm	/^     d9a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
d9a	usertests.asm	/^     d9a:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
d9b	prettyprint.asm	/^     d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9b	wc.asm	/^ d9b:	00 00 00 $/;"	l
d9c	grep.asm	/^ d9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9c	ls.asm	/^     d9c:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
d9d	eager_mmap.asm	/^ d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9d	imshow.asm	/^ d9d:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
d9d	lazy_mmap.asm	/^ d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
d9e	divide.asm	/^ d9e:	00 00 00 $/;"	l
d9e	sh.asm	/^     d9e:	90                   	nop$/;"	l
d9e	wc.asm	/^ d9e:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	grep.asm	/^ d9f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
d9f	prettyprint.asm	/^     d9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
d9f	sh.asm	/^     d9f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
da	eager_mmap.asm	/^  da:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
da	lazy_mmap.asm	/^  da:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
da	ln.asm	/^  da:	fc                   	cld    $/;"	l
da	mkdir.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da	rm.asm	/^  da:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
da0	ls.asm	/^     da0:	48 89 c2             	mov    %rax,%rdx$/;"	l
da1	divide.asm	/^ da1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
da1	eager_mmap.asm	/^ da1:	48 8b 00             	mov    (%rax),%rax$/;"	l
da1	lazy_mmap.asm	/^ da1:	48 8b 00             	mov    (%rax),%rax$/;"	l
da1	usertests.asm	/^     da1:	00 00 00 $/;"	l
da1	wc.asm	/^ da1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
da2	grep.asm	/^ da2:	01 c2                	add    %eax,%edx$/;"	l
da2	prettyprint.asm	/^     da2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da3	ls.asm	/^     da3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da3	sh.asm	/^     da3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
da4	divide.asm	/^ da4:	48 b8 b0 11 00 00 00 	movabs $0x11b0,%rax$/;"	l
da4	eager_mmap.asm	/^ da4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da4	grep.asm	/^ da4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da4	imshow.asm	/^ da4:	00 00 00 $/;"	l
da4	lazy_mmap.asm	/^ da4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
da4	usertests.asm	/^     da4:	ff d0                	callq  *%rax$/;"	l
da5	wc.asm	/^ da5:	75 23                	jne    dca <malloc+0x130>$/;"	l
da6	prettyprint.asm	/^     da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
da6	usertests.asm	/^     da6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
da7	imshow.asm	/^ da7:	48 8b 00             	mov    (%rax),%rax$/;"	l
da7	ls.asm	/^     da7:	48 01 c2             	add    %rax,%rdx$/;"	l
da7	sh.asm	/^     da7:	48 ba 24 1e 00 00 00 	movabs $0x1e24,%rdx$/;"	l
da7	wc.asm	/^ da7:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
da8	eager_mmap.asm	/^ da8:	e9 41 ff ff ff       	jmpq   cee <malloc+0x89>$/;"	l
da8	grep.asm	/^ da8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
da8	lazy_mmap.asm	/^ da8:	e9 41 ff ff ff       	jmpq   cee <malloc+0x89>$/;"	l
daa	imshow.asm	/^ daa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
daa	ls.asm	/^     daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
daa	prettyprint.asm	/^     daa:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
daa	usertests.asm	/^     daa:	83 7d fc 33          	cmpl   $0x33,-0x4(%rbp)$/;"	l
daa	wc.asm	/^ daa:	89 c7                	mov    %eax,%edi$/;"	l
dab	divide.asm	/^ dab:	00 00 00 $/;"	l
dab	grep.asm	/^ dab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dac	wc.asm	/^ dac:	48 b8 21 0c 00 00 00 	movabs $0xc21,%rax$/;"	l
dad	eager_mmap.asm	/^ dad:	c9                   	leaveq $/;"	l
dad	lazy_mmap.asm	/^ dad:	c9                   	leaveq $/;"	l
dae	divide.asm	/^ dae:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
dae	eager_mmap.asm	/^ dae:	c3                   	retq   $/;"	l
dae	imshow.asm	/^ dae:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
dae	lazy_mmap.asm	/^ dae:	c3                   	retq   $/;"	l
dae	ls.asm	/^     dae:	48 8b 00             	mov    (%rax),%rax$/;"	l
dae	prettyprint.asm	/^     dae:	76 c7                	jbe    d77 <free+0x2b>$/;"	l
dae	sh.asm	/^     dae:	00 00 00 $/;"	l
dae	usertests.asm	/^     dae:	7e cb                	jle    d7b <createtest+0xc7>$/;"	l
daf	grep.asm	/^ daf:	48 8b 00             	mov    (%rax),%rax$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	divide.asm	/^  db:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
db	echo.asm	/^  db:	90                   	nop$/;"	l
db	forktest.asm	/^  db:	75 0c                	jne    e9 <forktest+0x58>$/;"	l
db	ln.asm	/^  db:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	sh.asm	/^      db:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
db	stressfs.asm	/^  db:	ff d0                	callq  *%rax$/;"	l
db0	prettyprint.asm	/^     db0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
db0	usertests.asm	/^     db0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
db1	ls.asm	/^     db1:	48 39 c2             	cmp    %rax,%rdx$/;"	l
db1	sh.asm	/^     db1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
db2	grep.asm	/^ db2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
db3	imshow.asm	/^ db3:	75 4a                	jne    dff <malloc+0x7e>$/;"	l
db3	wc.asm	/^ db3:	00 00 00 $/;"	l
db4	ls.asm	/^     db4:	75 2d                	jne    de3 <free+0xc1>$/;"	l
db4	prettyprint.asm	/^     db4:	48 8b 00             	mov    (%rax),%rax$/;"	l
db4	sh.asm	/^     db4:	48 89 c7             	mov    %rax,%rdi$/;"	l
db5	divide.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	grep.asm	/^ db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db5	imshow.asm	/^ db5:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
db6	ls.asm	/^     db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
db6	wc.asm	/^ db6:	ff d0                	callq  *%rax$/;"	l
db7	prettyprint.asm	/^     db7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
db7	sh.asm	/^     db7:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
db7	usertests.asm	/^     db7:	00 00 00 $/;"	l
db8	wc.asm	/^ db8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
db9	divide.asm	/^ db9:	48 8b 00             	mov    (%rax),%rax$/;"	l
db9	grep.asm	/^ db9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dba	ls.asm	/^     dba:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dba	usertests.asm	/^     dba:	8b 00                	mov    (%rax),%eax$/;"	l
dbb	prettyprint.asm	/^     dbb:	76 ba                	jbe    d77 <free+0x2b>$/;"	l
dbc	divide.asm	/^ dbc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dbc	grep.asm	/^ dbc:	eb 0e                	jmp    dcc <free+0xcf>$/;"	l
dbc	imshow.asm	/^ dbc:	00 00 00 $/;"	l
dbc	usertests.asm	/^     dbc:	48 be 48 6c 00 00 00 	movabs $0x6c48,%rsi$/;"	l
dbc	wc.asm	/^ dbc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
dbd	ls.asm	/^     dbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbd	prettyprint.asm	/^     dbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dbe	grep.asm	/^ dbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dbe	sh.asm	/^     dbe:	00 00 00 $/;"	l
dbf	imshow.asm	/^ dbf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dc	echo.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	grep.asm	/^  dc:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
dc	init.asm	/^  dc:	48 b8 49 05 00 00 00 	movabs $0x549,%rax$/;"	l
dc	kill.asm	/^  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
dc	ls.asm	/^      dc:	48 01 d0             	add    %rdx,%rax$/;"	l
dc	usertests.asm	/^      dc:	00 00 00 $/;"	l
dc	wc.asm	/^  dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
dc	zombie.asm	/^  dc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
dc0	divide.asm	/^ dc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dc1	ls.asm	/^     dc1:	48 8b 00             	mov    (%rax),%rax$/;"	l
dc1	prettyprint.asm	/^     dc1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc1	sh.asm	/^     dc1:	ff d0                	callq  *%rax$/;"	l
dc1	wc.asm	/^ dc1:	75 07                	jne    dca <malloc+0x130>$/;"	l
dc2	grep.asm	/^ dc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dc3	imshow.asm	/^ dc3:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dc3	sh.asm	/^     dc3:	85 c0                	test   %eax,%eax$/;"	l
dc3	usertests.asm	/^     dc3:	00 00 00 $/;"	l
dc3	wc.asm	/^ dc3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc4	divide.asm	/^ dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	ls.asm	/^     dc4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dc4	prettyprint.asm	/^     dc4:	89 c0                	mov    %eax,%eax$/;"	l
dc5	grep.asm	/^ dc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dc5	sh.asm	/^     dc5:	0f 85 dc fe ff ff    	jne    ca7 <parseredirs+0x19>$/;"	l
dc6	prettyprint.asm	/^     dc6:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dc6	usertests.asm	/^     dc6:	89 c7                	mov    %eax,%edi$/;"	l
dc7	divide.asm	/^ dc7:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dc7	ls.asm	/^     dc7:	01 c2                	add    %eax,%edx$/;"	l
dc8	usertests.asm	/^     dc8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
dc8	wc.asm	/^ dc8:	eb 18                	jmp    de2 <malloc+0x148>$/;"	l
dc9	grep.asm	/^ dc9:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dc9	ls.asm	/^     dc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dca	divide.asm	/^ dca:	72 65                	jb     e31 <malloc+0xfa>$/;"	l
dca	imshow.asm	/^ dca:	00 00 00 $/;"	l
dca	prettyprint.asm	/^     dca:	48 89 c2             	mov    %rax,%rdx$/;"	l
dca	wc.asm	/^ dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcb	sh.asm	/^     dcb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
dcc	divide.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcc	grep.asm	/^ dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dcd	imshow.asm	/^ dcd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
dcd	ls.asm	/^     dcd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dcd	prettyprint.asm	/^     dcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dcd	usertests.asm	/^     dcd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dce	wc.asm	/^ dce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
dcf	sh.asm	/^     dcf:	c9                   	leaveq $/;"	l
dd	cat.asm	/^  dd:	00 00 00 $/;"	l
dd	forktest.asm	/^  dd:	48 b8 0d 05 00 00 00 	movabs $0x50d,%rax$/;"	l
dd	ln.asm	/^  dd:	89 ca                	mov    %ecx,%edx$/;"	l
dd	stressfs.asm	/^  dd:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
dd0	divide.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	grep.asm	/^ dd0:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dd0	ls.asm	/^     dd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd0	sh.asm	/^     dd0:	c3                   	retq   $/;"	l
dd1	imshow.asm	/^ dd1:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dd1	prettyprint.asm	/^     dd1:	48 01 c2             	add    %rax,%rdx$/;"	l
dd1	sh.asm	/^     dd1:	55                   	push   %rbp$/;"	l
dd2	sh.asm	/^     dd2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
dd2	wc.asm	/^ dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd3	divide.asm	/^ dd3:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
dd3	grep.asm	/^ dd3:	89 c0                	mov    %eax,%eax$/;"	l
dd4	imshow.asm	/^ dd4:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
dd4	ls.asm	/^     dd4:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd4	prettyprint.asm	/^     dd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd4	usertests.asm	/^     dd4:	00 00 00 $/;"	l
dd5	grep.asm	/^ dd5:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dd5	sh.asm	/^     dd5:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
dd6	divide.asm	/^ dd6:	75 10                	jne    de8 <malloc+0xb1>$/;"	l
dd6	wc.asm	/^ dd6:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd7	ls.asm	/^     dd7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dd7	usertests.asm	/^     dd7:	ff d2                	callq  *%rdx$/;"	l
dd8	divide.asm	/^ dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dd8	prettyprint.asm	/^     dd8:	48 8b 00             	mov    (%rax),%rax$/;"	l
dd9	grep.asm	/^ dd9:	48 89 c2             	mov    %rax,%rdx$/;"	l
dd9	sh.asm	/^     dd9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
dd9	usertests.asm	/^     dd9:	90                   	nop$/;"	l
dd9	wc.asm	/^ dd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
dda	ls.asm	/^     dda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dda	usertests.asm	/^     dda:	c9                   	leaveq $/;"	l
ddb	imshow.asm	/^ ddb:	00 00 00 $/;"	l
ddb	prettyprint.asm	/^     ddb:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ddb	usertests.asm	/^     ddb:	c3                   	retq   $/;"	l
ddc	divide.asm	/^ ddc:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ddc	grep.asm	/^ ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ddc	usertests.asm	/^     ddc:	55                   	push   %rbp$/;"	l
ddd	sh.asm	/^     ddd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ddd	usertests.asm	/^     ddd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ddd	wc.asm	/^ ddd:	e9 41 ff ff ff       	jmpq   d23 <malloc+0x89>$/;"	l
dde	imshow.asm	/^ dde:	48 8b 10             	mov    (%rax),%rdx$/;"	l
dde	ls.asm	/^     dde:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dde	prettyprint.asm	/^     dde:	75 2d                	jne    e0d <free+0xc1>$/;"	l
ddf	divide.asm	/^ ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de	bad_mmap.asm	/^  de:	48 ba cd 06 00 00 00 	movabs $0x6cd,%rdx$/;"	l
de	imshow.asm	/^  de:	48 89 ce             	mov    %rcx,%rsi$/;"	l
de	mkdir.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	prettyprint.asm	/^      de:	00 00 00 $/;"	l
de	rm.asm	/^  de:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
de	sh.asm	/^      de:	89 c7                	mov    %eax,%edi$/;"	l
de0	grep.asm	/^ de0:	48 01 d0             	add    %rdx,%rax$/;"	l
de0	prettyprint.asm	/^     de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
de0	usertests.asm	/^     de0:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
de1	imshow.asm	/^ de1:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
de1	ls.asm	/^     de1:	eb 0e                	jmp    df1 <free+0xcf>$/;"	l
de1	sh.asm	/^     de1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
de2	wc.asm	/^ de2:	c9                   	leaveq $/;"	l
de3	divide.asm	/^ de3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
de3	grep.asm	/^ de3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
de3	ls.asm	/^     de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de3	wc.asm	/^ de3:	c3                   	retq   $/;"	l
de4	prettyprint.asm	/^     de4:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
de5	sh.asm	/^     de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
de6	divide.asm	/^ de6:	eb 2e                	jmp    e16 <malloc+0xdf>$/;"	l
de7	grep.asm	/^ de7:	75 27                	jne    e10 <free+0x113>$/;"	l
de7	ls.asm	/^     de7:	48 8b 10             	mov    (%rax),%rdx$/;"	l
de7	prettyprint.asm	/^     de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de7	usertests.asm	/^     de7:	00 00 00 $/;"	l
de8	divide.asm	/^ de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de8	imshow.asm	/^ de8:	00 00 00 $/;"	l
de9	grep.asm	/^ de9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
de9	sh.asm	/^     de9:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
dea	ls.asm	/^     dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
dea	usertests.asm	/^     dea:	8b 00                	mov    (%rax),%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint64 oldsz, uint64 newsz)$/;"	f
deb	imshow.asm	/^ deb:	48 89 10             	mov    %rdx,(%rax)$/;"	l
deb	prettyprint.asm	/^     deb:	48 8b 00             	mov    (%rax),%rax$/;"	l
dec	divide.asm	/^ dec:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dec	usertests.asm	/^     dec:	48 be 6e 6c 00 00 00 	movabs $0x6c6e,%rsi$/;"	l
ded	grep.asm	/^ ded:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
dee	imshow.asm	/^ dee:	48 b8 20 12 00 00 00 	movabs $0x1220,%rax$/;"	l
dee	ls.asm	/^     dee:	48 89 10             	mov    %rdx,(%rax)$/;"	l
dee	prettyprint.asm	/^     dee:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
def	divide.asm	/^ def:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	eager_mmap.asm	/^  df:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df	lazy_mmap.asm	/^  df:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df	ln.asm	/^  df:	48 89 fe             	mov    %rdi,%rsi$/;"	l
df	ls.asm	/^      df:	89 da                	mov    %ebx,%edx$/;"	l
df	usertests.asm	/^      df:	ff d0                	callq  *%rax$/;"	l
df	zombie.asm	/^  df:	38 c2                	cmp    %al,%dl$/;"	l
df0	grep.asm	/^ df0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df0	sh.asm	/^     df0:	00 00 00 $/;"	l
df1	ls.asm	/^     df1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df1	prettyprint.asm	/^     df1:	01 c2                	add    %eax,%edx$/;"	l
df2	divide.asm	/^ df2:	89 c2                	mov    %eax,%edx$/;"	l
df3	prettyprint.asm	/^     df3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
df3	sh.asm	/^     df3:	48 89 ce             	mov    %rcx,%rsi$/;"	l
df3	usertests.asm	/^     df3:	00 00 00 $/;"	l
df4	divide.asm	/^ df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df4	grep.asm	/^ df4:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df5	imshow.asm	/^ df5:	00 00 00 $/;"	l
df5	ls.asm	/^     df5:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
df6	sh.asm	/^     df6:	48 89 c7             	mov    %rax,%rdi$/;"	l
df6	usertests.asm	/^     df6:	89 c7                	mov    %eax,%edi$/;"	l
df7	grep.asm	/^ df7:	01 c2                	add    %eax,%edx$/;"	l
df7	prettyprint.asm	/^     df7:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	divide.asm	/^ df8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
df8	imshow.asm	/^ df8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
df8	ls.asm	/^     df8:	89 c0                	mov    %eax,%eax$/;"	l
df8	usertests.asm	/^     df8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
df9	grep.asm	/^ df9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
df9	sh.asm	/^     df9:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
dfa	ls.asm	/^     dfa:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
dfa	prettyprint.asm	/^     dfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfb	divide.asm	/^ dfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
dfd	grep.asm	/^ dfd:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
dfd	usertests.asm	/^     dfd:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
dfe	ls.asm	/^     dfe:	48 89 c2             	mov    %rax,%rdx$/;"	l
dfe	prettyprint.asm	/^     dfe:	48 8b 00             	mov    (%rax),%rax$/;"	l
dff	divide.asm	/^ dff:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
dff	imshow.asm	/^ dff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
di	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
digits	console.c	/^static char digits[] = "0123456789abcdef";$/;"	v	file:
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
disp	display.c	/^} disp;$/;"	v	typeref:struct:__anon11	file:
displayinit	display.c	/^void displayinit(void)$/;"	f
displayioctl	display.c	/^int displayioctl(struct file * f,int param,int value)$/;"	f
displayread	display.c	/^displayread(struct file *f, char *buf, int n)$/;"	f
displaywrite	display.c	/^displaywrite(struct file *f, char *buf, int n)$/;"	f
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
dst	bad_mmap.asm	/^  dst = vdst;$/;"	d
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	eager_mmap.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	imshow.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	lazy_mmap.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	prettyprint.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
dx	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon9	file:
e	initcode.asm	/^   e:	48 c7 c0 07 00 00 00 	mov    $0x7,%rax$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	usertests.asm	/^       e:	8b 00                	mov    (%rax),%eax$/;"	l
e	zombie.asm	/^   e:	ff d0                	callq  *%rax$/;"	l
e0	cat.asm	/^  e0:	ff d0                	callq  *%rax$/;"	l
e0	divide.asm	/^  e0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e0	echo.asm	/^  e0:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e0	grep.asm	/^  e0:	75 07                	jne    e9 <grep+0xe9>$/;"	l
e0	kill.asm	/^  e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e0	sh.asm	/^      e0:	48 b8 30 15 00 00 00 	movabs $0x1530,%rax$/;"	l
e0	stressfs.asm	/^  e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e0	wc.asm	/^  e0:	79 2c                	jns    10e <wc+0x10e>$/;"	l
e00	grep.asm	/^ e00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e00	sh.asm	/^     e00:	00 00 00 $/;"	l
e01	ls.asm	/^     e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e01	prettyprint.asm	/^     e01:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e02	divide.asm	/^ e02:	89 c0                	mov    %eax,%eax$/;"	l
e03	imshow.asm	/^ e03:	48 8b 00             	mov    (%rax),%rax$/;"	l
e03	sh.asm	/^     e03:	ff d0                	callq  *%rax$/;"	l
e04	divide.asm	/^ e04:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e04	grep.asm	/^ e04:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e04	prettyprint.asm	/^     e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e04	usertests.asm	/^     e04:	00 00 00 $/;"	l
e05	ls.asm	/^     e05:	48 01 d0             	add    %rdx,%rax$/;"	l
e05	sh.asm	/^     e05:	85 c0                	test   %eax,%eax$/;"	l
e06	imshow.asm	/^ e06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e07	grep.asm	/^ e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e07	sh.asm	/^     e07:	75 16                	jne    e1f <parseblock+0x4e>$/;"	l
e07	usertests.asm	/^     e07:	ff d2                	callq  *%rdx$/;"	l
e08	divide.asm	/^ e08:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e08	ls.asm	/^     e08:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e08	prettyprint.asm	/^     e08:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e09	sh.asm	/^     e09:	48 bf 29 1e 00 00 00 	movabs $0x1e29,%rdi$/;"	l
e09	usertests.asm	/^     e09:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e0a	imshow.asm	/^ e0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0b	grep.asm	/^ e0b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e0b	prettyprint.asm	/^     e0b:	eb 0e                	jmp    e1b <free+0xcf>$/;"	l
e0c	divide.asm	/^ e0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0c	ls.asm	/^     e0c:	75 27                	jne    e35 <free+0x113>$/;"	l
e0d	prettyprint.asm	/^     e0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e0e	grep.asm	/^ e0e:	eb 0b                	jmp    e1b <free+0x11e>$/;"	l
e0e	imshow.asm	/^ e0e:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e0e	ls.asm	/^     e0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1	imshow.asm	/^  e1:	89 c7                	mov    %eax,%edi$/;"	l
e1	ls.asm	/^      e1:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
e1	mkdir.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	prettyprint.asm	/^      e1:	ff d2                	callq  *%rdx$/;"	l
e1	rm.asm	/^  e1:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
e1	usertests.asm	/^      e1:	85 c0                	test   %eax,%eax$/;"	l
e1	zombie.asm	/^  e1:	74 d9                	je     bc <strcmp+0x12>$/;"	l
e10	divide.asm	/^ e10:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e10	grep.asm	/^ e10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e10	sh.asm	/^     e10:	00 00 00 $/;"	l
e10	usertests.asm	/^     e10:	00 00 00 $/;"	l
e11	imshow.asm	/^ e11:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e11	prettyprint.asm	/^     e11:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e12	ls.asm	/^     e12:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e13	divide.asm	/^ e13:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e13	sh.asm	/^     e13:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e13	usertests.asm	/^     e13:	48 b8 84 60 00 00 00 	movabs $0x6084,%rax$/;"	l
e14	grep.asm	/^ e14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e14	imshow.asm	/^ e14:	72 65                	jb     e7b <malloc+0xfa>$/;"	l
e14	prettyprint.asm	/^     e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e15	ls.asm	/^     e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e16	divide.asm	/^ e16:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e16	imshow.asm	/^ e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e18	grep.asm	/^ e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e18	prettyprint.asm	/^     e18:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e19	ls.asm	/^     e19:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	imshow.asm	/^ e1a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1a	sh.asm	/^     e1a:	00 00 00 $/;"	l
e1a	usertests.asm	/^     e1a:	00 00 00 $/;"	l
e1b	grep.asm	/^ e1b:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e1b	prettyprint.asm	/^     e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1c	ls.asm	/^     e1c:	01 c2                	add    %eax,%edx$/;"	l
e1d	divide.asm	/^ e1d:	00 00 00 $/;"	l
e1d	imshow.asm	/^ e1d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
e1d	sh.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1d	usertests.asm	/^     e1d:	ff d0                	callq  *%rax$/;"	l
e1e	ls.asm	/^     e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e1f	prettyprint.asm	/^     e1f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e1f	sh.asm	/^     e1f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e1f	usertests.asm	/^     e1f:	85 c0                	test   %eax,%eax$/;"	l
e2	cat.asm	/^  e2:	48 b8 ca 04 00 00 00 	movabs $0x4ca,%rax$/;"	l
e2	grep.asm	/^  e2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e2	ln.asm	/^  e2:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
e2	wc.asm	/^  e2:	48 be ea 0d 00 00 00 	movabs $0xdea,%rsi$/;"	l
e20	divide.asm	/^ e20:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e20	imshow.asm	/^ e20:	75 10                	jne    e32 <malloc+0xb1>$/;"	l
e21	usertests.asm	/^     e21:	79 35                	jns    e58 <dirtest+0x7c>$/;"	l
e22	grep.asm	/^ e22:	00 00 00 $/;"	l
e22	imshow.asm	/^ e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e22	ls.asm	/^     e22:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e22	prettyprint.asm	/^     e22:	89 c0                	mov    %eax,%eax$/;"	l
e23	sh.asm	/^     e23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e23	usertests.asm	/^     e23:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e24	divide.asm	/^ e24:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e24	prettyprint.asm	/^     e24:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e25	grep.asm	/^ e25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e25	ls.asm	/^     e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e26	imshow.asm	/^ e26:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e27	divide.asm	/^ e27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e27	sh.asm	/^     e27:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
e28	prettyprint.asm	/^     e28:	48 89 c2             	mov    %rax,%rdx$/;"	l
e29	grep.asm	/^ e29:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e29	imshow.asm	/^ e29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e29	ls.asm	/^     e29:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e2a	usertests.asm	/^     e2a:	00 00 00 $/;"	l
e2b	divide.asm	/^ e2b:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e2b	prettyprint.asm	/^     e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	grep.asm	/^ e2c:	90                   	nop$/;"	l
e2c	ls.asm	/^     e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e2c	sh.asm	/^     e2c:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
e2d	grep.asm	/^ e2d:	c9                   	leaveq $/;"	l
e2d	imshow.asm	/^ e2d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e2d	usertests.asm	/^     e2d:	8b 00                	mov    (%rax),%eax$/;"	l
e2e	grep.asm	/^ e2e:	c3                   	retq   $/;"	l
e2f	divide.asm	/^ e2f:	eb 4e                	jmp    e7f <malloc+0x148>$/;"	l
e2f	grep.asm	/^ e2f:	55                   	push   %rbp$/;"	l
e2f	prettyprint.asm	/^     e2f:	48 01 d0             	add    %rdx,%rax$/;"	l
e2f	usertests.asm	/^     e2f:	48 be 99 68 00 00 00 	movabs $0x6899,%rsi$/;"	l
e3	imshow.asm	/^  e3:	48 b8 80 06 00 00 00 	movabs $0x680,%rax$/;"	l
e3	init.asm	/^  e3:	00 00 00 $/;"	l
e3	prettyprint.asm	/^      e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
e3	usertests.asm	/^      e3:	79 35                	jns    11a <iputtest+0x11a>$/;"	l
e3	zombie.asm	/^  e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e30	grep.asm	/^ e30:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e30	imshow.asm	/^ e30:	eb 2e                	jmp    e60 <malloc+0xdf>$/;"	l
e30	ls.asm	/^     e30:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e31	divide.asm	/^ e31:	48 b8 c0 11 00 00 00 	movabs $0x11c0,%rax$/;"	l
e31	sh.asm	/^     e31:	48 89 c7             	mov    %rax,%rdi$/;"	l
e32	imshow.asm	/^ e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e32	prettyprint.asm	/^     e32:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
e33	grep.asm	/^ e33:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e33	ls.asm	/^     e33:	eb 0b                	jmp    e40 <free+0x11e>$/;"	l
e34	sh.asm	/^     e34:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
e35	ls.asm	/^     e35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e36	imshow.asm	/^ e36:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e36	prettyprint.asm	/^     e36:	75 27                	jne    e5f <free+0x113>$/;"	l
e36	usertests.asm	/^     e36:	00 00 00 $/;"	l
e37	grep.asm	/^ e37:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e38	divide.asm	/^ e38:	00 00 00 $/;"	l
e38	prettyprint.asm	/^     e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e39	imshow.asm	/^ e39:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
e39	ls.asm	/^     e39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e39	usertests.asm	/^     e39:	89 c7                	mov    %eax,%edi$/;"	l
e3a	grep.asm	/^ e3a:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e3b	divide.asm	/^ e3b:	48 8b 00             	mov    (%rax),%rax$/;"	l
e3b	sh.asm	/^     e3b:	00 00 00 $/;"	l
e3b	usertests.asm	/^     e3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e3c	imshow.asm	/^ e3c:	89 c2                	mov    %eax,%edx$/;"	l
e3c	prettyprint.asm	/^     e3c:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
e3d	ls.asm	/^     e3d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e3e	divide.asm	/^ e3e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e3e	imshow.asm	/^ e3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e3e	sh.asm	/^     e3e:	ff d0                	callq  *%rax$/;"	l
e3f	prettyprint.asm	/^     e3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e4	eager_mmap.asm	/^  e4:	48 ba 15 07 00 00 00 	movabs $0x715,%rdx$/;"	l
e4	echo.asm	/^  e4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
e4	forktest.asm	/^  e4:	00 00 00 $/;"	l
e4	kill.asm	/^  e4:	90                   	nop$/;"	l
e4	lazy_mmap.asm	/^  e4:	48 ba 15 07 00 00 00 	movabs $0x715,%rdx$/;"	l
e4	mkdir.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e4	rm.asm	/^  e4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e40	ls.asm	/^     e40:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
e40	sh.asm	/^     e40:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e40	usertests.asm	/^     e40:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e41	grep.asm	/^ e41:	77 07                	ja     e4a <morecore+0x1b>$/;"	l
e42	divide.asm	/^ e42:	75 23                	jne    e67 <malloc+0x130>$/;"	l
e42	imshow.asm	/^ e42:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e43	grep.asm	/^ e43:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e43	prettyprint.asm	/^     e43:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e44	divide.asm	/^ e44:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e44	sh.asm	/^     e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e45	imshow.asm	/^ e45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e46	prettyprint.asm	/^     e46:	01 c2                	add    %eax,%edx$/;"	l
e47	divide.asm	/^ e47:	89 c7                	mov    %eax,%edi$/;"	l
e47	ls.asm	/^     e47:	00 00 00 $/;"	l
e47	usertests.asm	/^     e47:	00 00 00 $/;"	l
e48	prettyprint.asm	/^     e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e48	sh.asm	/^     e48:	48 89 d6             	mov    %rdx,%rsi$/;"	l
e49	divide.asm	/^ e49:	48 b8 be 0c 00 00 00 	movabs $0xcbe,%rax$/;"	l
e49	imshow.asm	/^ e49:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
e4a	grep.asm	/^ e4a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e4a	ls.asm	/^     e4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e4a	usertests.asm	/^     e4a:	ff d2                	callq  *%rdx$/;"	l
e4b	sh.asm	/^     e4b:	48 89 c7             	mov    %rax,%rdi$/;"	l
e4c	imshow.asm	/^ e4c:	89 c0                	mov    %eax,%eax$/;"	l
e4c	prettyprint.asm	/^     e4c:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e4c	usertests.asm	/^     e4c:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e4d	grep.asm	/^ e4d:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e4e	imshow.asm	/^ e4e:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
e4e	ls.asm	/^     e4e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e4e	sh.asm	/^     e4e:	48 b8 c4 0a 00 00 00 	movabs $0xac4,%rax$/;"	l
e4f	prettyprint.asm	/^     e4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e5	bad_mmap.asm	/^  e5:	00 00 00 $/;"	l
e5	divide.asm	/^  e5:	48 ba e7 07 00 00 00 	movabs $0x7e7,%rdx$/;"	l
e5	kill.asm	/^  e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e5	usertests.asm	/^      e5:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e50	divide.asm	/^ e50:	00 00 00 $/;"	l
e50	grep.asm	/^ e50:	89 c7                	mov    %eax,%edi$/;"	l
e51	ls.asm	/^     e51:	90                   	nop$/;"	l
e52	grep.asm	/^ e52:	48 b8 33 08 00 00 00 	movabs $0x833,%rax$/;"	l
e52	imshow.asm	/^ e52:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
e52	ls.asm	/^     e52:	c9                   	leaveq $/;"	l
e53	divide.asm	/^ e53:	ff d0                	callq  *%rax$/;"	l
e53	ls.asm	/^     e53:	c3                   	retq   $/;"	l
e53	prettyprint.asm	/^     e53:	48 8b 10             	mov    (%rax),%rdx$/;"	l
e53	usertests.asm	/^     e53:	00 00 00 $/;"	l
e54	ls.asm	/^     e54:	55                   	push   %rbp$/;"	l
e55	divide.asm	/^ e55:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e55	ls.asm	/^     e55:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e55	sh.asm	/^     e55:	00 00 00 $/;"	l
e56	imshow.asm	/^ e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	prettyprint.asm	/^     e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e56	usertests.asm	/^     e56:	ff d0                	callq  *%rax$/;"	l
e58	ls.asm	/^     e58:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e58	sh.asm	/^     e58:	ff d0                	callq  *%rax$/;"	l
e58	usertests.asm	/^     e58:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
e59	divide.asm	/^ e59:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
e59	grep.asm	/^ e59:	00 00 00 $/;"	l
e5a	imshow.asm	/^ e5a:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e5a	prettyprint.asm	/^     e5a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e5a	sh.asm	/^     e5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5c	grep.asm	/^ e5c:	ff d0                	callq  *%rax$/;"	l
e5c	ls.asm	/^     e5c:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e5d	imshow.asm	/^ e5d:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e5d	prettyprint.asm	/^     e5d:	eb 0b                	jmp    e6a <free+0x11e>$/;"	l
e5e	divide.asm	/^ e5e:	75 07                	jne    e67 <malloc+0x130>$/;"	l
e5e	grep.asm	/^ e5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e5e	sh.asm	/^     e5e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
e5f	ls.asm	/^     e5f:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e5f	prettyprint.asm	/^     e5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e5f	usertests.asm	/^     e5f:	00 00 00 $/;"	l
e6	init.asm	/^  e6:	ff d0                	callq  *%rax$/;"	l
e6	ln.asm	/^  e6:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
e6	ls.asm	/^      e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
e60	divide.asm	/^ e60:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e60	imshow.asm	/^ e60:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e62	grep.asm	/^ e62:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e62	sh.asm	/^     e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
e62	usertests.asm	/^     e62:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
e63	prettyprint.asm	/^     e63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e65	divide.asm	/^ e65:	eb 18                	jmp    e7f <malloc+0x148>$/;"	l
e66	ls.asm	/^     e66:	77 07                	ja     e6f <morecore+0x1b>$/;"	l
e66	sh.asm	/^     e66:	48 ba 34 1e 00 00 00 	movabs $0x1e34,%rdx$/;"	l
e67	divide.asm	/^ e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e67	grep.asm	/^ e67:	75 07                	jne    e70 <morecore+0x41>$/;"	l
e67	imshow.asm	/^ e67:	00 00 00 $/;"	l
e67	prettyprint.asm	/^     e67:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e68	ls.asm	/^     e68:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e69	grep.asm	/^ e69:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e69	usertests.asm	/^     e69:	00 00 00 $/;"	l
e6a	imshow.asm	/^ e6a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
e6a	prettyprint.asm	/^     e6a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
e6b	divide.asm	/^ e6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e6c	usertests.asm	/^     e6c:	ff d0                	callq  *%rax$/;"	l
e6d	sh.asm	/^     e6d:	00 00 00 $/;"	l
e6e	grep.asm	/^ e6e:	eb 36                	jmp    ea6 <morecore+0x77>$/;"	l
e6e	imshow.asm	/^ e6e:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e6e	usertests.asm	/^     e6e:	85 c0                	test   %eax,%eax$/;"	l
e6f	divide.asm	/^ e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e6f	ls.asm	/^     e6f:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e7	forktest.asm	/^  e7:	ff d0                	callq  *%rax$/;"	l
e7	mkdir.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	rm.asm	/^  e7:	48 89 f7             	mov    %rsi,%rdi$/;"	l
e7	sh.asm	/^      e7:	00 00 00 $/;"	l
e7	stressfs.asm	/^  e7:	eb 24                	jmp    10d <main+0x10d>$/;"	l
e7	zombie.asm	/^  e7:	0f b6 00             	movzbl (%rax),%eax$/;"	l
e70	grep.asm	/^ e70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e70	sh.asm	/^     e70:	48 89 ce             	mov    %rcx,%rsi$/;"	l
e70	usertests.asm	/^     e70:	79 35                	jns    ea7 <dirtest+0xcb>$/;"	l
e71	imshow.asm	/^ e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e71	prettyprint.asm	/^     e71:	00 00 00 $/;"	l
e72	ls.asm	/^     e72:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e72	usertests.asm	/^     e72:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
e73	divide.asm	/^ e73:	48 8b 00             	mov    (%rax),%rax$/;"	l
e73	sh.asm	/^     e73:	48 89 c7             	mov    %rax,%rdi$/;"	l
e74	grep.asm	/^ e74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e74	prettyprint.asm	/^     e74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
e75	imshow.asm	/^ e75:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e75	ls.asm	/^     e75:	89 c7                	mov    %eax,%edi$/;"	l
e76	divide.asm	/^ e76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e76	sh.asm	/^     e76:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
e77	ls.asm	/^     e77:	48 b8 58 08 00 00 00 	movabs $0x858,%rax$/;"	l
e78	grep.asm	/^ e78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e78	prettyprint.asm	/^     e78:	48 89 10             	mov    %rdx,(%rax)$/;"	l
e79	imshow.asm	/^ e79:	eb 4e                	jmp    ec9 <malloc+0x148>$/;"	l
e79	usertests.asm	/^     e79:	00 00 00 $/;"	l
e7a	divide.asm	/^ e7a:	e9 41 ff ff ff       	jmpq   dc0 <malloc+0x89>$/;"	l
e7b	imshow.asm	/^ e7b:	48 b8 30 12 00 00 00 	movabs $0x1230,%rax$/;"	l
e7b	prettyprint.asm	/^     e7b:	90                   	nop$/;"	l
e7c	grep.asm	/^ e7c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
e7c	prettyprint.asm	/^     e7c:	c9                   	leaveq $/;"	l
e7c	usertests.asm	/^     e7c:	8b 00                	mov    (%rax),%eax$/;"	l
e7d	prettyprint.asm	/^     e7d:	c3                   	retq   $/;"	l
e7d	sh.asm	/^     e7d:	00 00 00 $/;"	l
e7e	ls.asm	/^     e7e:	00 00 00 $/;"	l
e7e	prettyprint.asm	/^     e7e:	55                   	push   %rbp$/;"	l
e7e	usertests.asm	/^     e7e:	48 be 7f 6c 00 00 00 	movabs $0x6c7f,%rsi$/;"	l
e7f	divide.asm	/^ e7f:	c9                   	leaveq $/;"	l
e7f	grep.asm	/^ e7f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
e7f	prettyprint.asm	/^     e7f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
e8	bad_mmap.asm	/^  e8:	ff d2                	callq  *%rdx$/;"	l
e8	echo.asm	/^  e8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
e8	init.asm	/^  e8:	48 be 75 0d 00 00 00 	movabs $0xd75,%rsi$/;"	l
e80	divide.asm	/^ e80:	c3                   	retq   $/;"	l
e80	sh.asm	/^     e80:	ff d0                	callq  *%rax$/;"	l
e81	ls.asm	/^     e81:	ff d0                	callq  *%rax$/;"	l
e82	grep.asm	/^ e82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e82	imshow.asm	/^ e82:	00 00 00 $/;"	l
e82	prettyprint.asm	/^     e82:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
e82	sh.asm	/^     e82:	85 c0                	test   %eax,%eax$/;"	l
e83	ls.asm	/^     e83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e84	sh.asm	/^     e84:	75 16                	jne    e9c <parseblock+0xcb>$/;"	l
e85	imshow.asm	/^ e85:	48 8b 00             	mov    (%rax),%rax$/;"	l
e85	usertests.asm	/^     e85:	00 00 00 $/;"	l
e86	grep.asm	/^ e86:	48 83 c0 10          	add    $0x10,%rax$/;"	l
e86	prettyprint.asm	/^     e86:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
e86	sh.asm	/^     e86:	48 bf 36 1e 00 00 00 	movabs $0x1e36,%rdi$/;"	l
e87	ls.asm	/^     e87:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
e88	imshow.asm	/^ e88:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
e88	usertests.asm	/^     e88:	89 c7                	mov    %eax,%edi$/;"	l
e89	prettyprint.asm	/^     e89:	81 7d ec ff 0f 00 00 	cmpl   $0xfff,-0x14(%rbp)$/;"	l
e8a	grep.asm	/^ e8a:	48 89 c7             	mov    %rax,%rdi$/;"	l
e8a	usertests.asm	/^     e8a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8c	imshow.asm	/^ e8c:	75 23                	jne    eb1 <malloc+0x130>$/;"	l
e8c	ls.asm	/^     e8c:	75 07                	jne    e95 <morecore+0x41>$/;"	l
e8d	grep.asm	/^ e8d:	48 b8 fd 0c 00 00 00 	movabs $0xcfd,%rax$/;"	l
e8d	sh.asm	/^     e8d:	00 00 00 $/;"	l
e8e	imshow.asm	/^ e8e:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e8e	ls.asm	/^     e8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e8f	usertests.asm	/^     e8f:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
e9	cat.asm	/^  e9:	00 00 00 $/;"	l
e9	forktest.asm	/^  e9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
e9	grep.asm	/^  e9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
e9	kill.asm	/^  e9:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
e9	ln.asm	/^  e9:	90                   	nop$/;"	l
e9	ls.asm	/^      e9:	48 b8 94 05 00 00 00 	movabs $0x594,%rax$/;"	l
e9	stressfs.asm	/^  e9:	48 8d 8d e0 fd ff ff 	lea    -0x220(%rbp),%rcx$/;"	l
e9	wc.asm	/^  e9:	00 00 00 $/;"	l
e90	prettyprint.asm	/^     e90:	77 07                	ja     e99 <morecore+0x1b>$/;"	l
e90	sh.asm	/^     e90:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
e91	imshow.asm	/^ e91:	89 c7                	mov    %eax,%edi$/;"	l
e92	prettyprint.asm	/^     e92:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%rbp)$/;"	l
e93	imshow.asm	/^ e93:	48 b8 08 0d 00 00 00 	movabs $0xd08,%rax$/;"	l
e93	ls.asm	/^     e93:	eb 36                	jmp    ecb <morecore+0x77>$/;"	l
e94	grep.asm	/^ e94:	00 00 00 $/;"	l
e95	ls.asm	/^     e95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
e96	usertests.asm	/^     e96:	00 00 00 $/;"	l
e97	grep.asm	/^ e97:	ff d0                	callq  *%rax$/;"	l
e97	sh.asm	/^     e97:	00 00 00 $/;"	l
e99	grep.asm	/^ e99:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
e99	ls.asm	/^     e99:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
e99	prettyprint.asm	/^     e99:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
e99	usertests.asm	/^     e99:	ff d2                	callq  *%rdx$/;"	l
e9a	imshow.asm	/^ e9a:	00 00 00 $/;"	l
e9a	sh.asm	/^     e9a:	ff d0                	callq  *%rax$/;"	l
e9b	usertests.asm	/^     e9b:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
e9c	prettyprint.asm	/^     e9c:	c1 e0 04             	shl    $0x4,%eax$/;"	l
e9c	sh.asm	/^     e9c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
e9d	imshow.asm	/^ e9d:	ff d0                	callq  *%rax$/;"	l
e9d	ls.asm	/^     e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
e9f	imshow.asm	/^ e9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
e9f	prettyprint.asm	/^     e9f:	89 c7                	mov    %eax,%edi$/;"	l
ea	bad_mmap.asm	/^  ea:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ea	imshow.asm	/^  ea:	00 00 00 $/;"	l
ea	ln.asm	/^  ea:	c9                   	leaveq $/;"	l
ea	mkdir.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	prettyprint.asm	/^      ea:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)$/;"	l
ea	rm.asm	/^  ea:	89 d1                	mov    %edx,%ecx$/;"	l
ea	sh.asm	/^      ea:	ff d0                	callq  *%rax$/;"	l
ea	zombie.asm	/^  ea:	0f b6 d0             	movzbl %al,%edx$/;"	l
ea0	grep.asm	/^ ea0:	00 00 00 $/;"	l
ea0	sh.asm	/^     ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ea1	ls.asm	/^     ea1:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ea1	prettyprint.asm	/^     ea1:	48 b8 82 08 00 00 00 	movabs $0x882,%rax$/;"	l
ea2	usertests.asm	/^     ea2:	00 00 00 $/;"	l
ea3	grep.asm	/^ ea3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ea3	imshow.asm	/^ ea3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ea4	ls.asm	/^     ea4:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ea4	sh.asm	/^     ea4:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ea5	usertests.asm	/^     ea5:	ff d0                	callq  *%rax$/;"	l
ea6	grep.asm	/^ ea6:	c9                   	leaveq $/;"	l
ea7	grep.asm	/^ ea7:	c3                   	retq   $/;"	l
ea7	ls.asm	/^     ea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ea7	usertests.asm	/^     ea7:	48 bf 92 6c 00 00 00 	movabs $0x6c92,%rdi$/;"	l
ea8	grep.asm	/^ ea8:	55                   	push   %rbp$/;"	l
ea8	imshow.asm	/^ ea8:	75 07                	jne    eb1 <malloc+0x130>$/;"	l
ea8	prettyprint.asm	/^     ea8:	00 00 00 $/;"	l
ea9	grep.asm	/^ ea9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ea9	sh.asm	/^     ea9:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
eaa	imshow.asm	/^ eaa:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eab	ls.asm	/^     eab:	48 83 c0 10          	add    $0x10,%rax$/;"	l
eab	prettyprint.asm	/^     eab:	ff d0                	callq  *%rax$/;"	l
eac	grep.asm	/^ eac:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ead	prettyprint.asm	/^     ead:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
eae	sh.asm	/^     eae:	48 89 c7             	mov    %rax,%rdi$/;"	l
eae	usertests.asm	/^     eae:	00 00 00 $/;"	l
eaf	imshow.asm	/^ eaf:	eb 18                	jmp    ec9 <malloc+0x148>$/;"	l
eaf	ls.asm	/^     eaf:	48 89 c7             	mov    %rax,%rdi$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eb	eager_mmap.asm	/^  eb:	00 00 00 $/;"	l
eb	lazy_mmap.asm	/^  eb:	00 00 00 $/;"	l
eb	ln.asm	/^  eb:	c3                   	retq   $/;"	l
eb0	grep.asm	/^ eb0:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
eb1	imshow.asm	/^ eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb1	prettyprint.asm	/^     eb1:	48 83 7d f8 ff       	cmpq   $0xffffffffffffffff,-0x8(%rbp)$/;"	l
eb1	sh.asm	/^     eb1:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
eb1	usertests.asm	/^     eb1:	48 b8 8e 60 00 00 00 	movabs $0x608e,%rax$/;"	l
eb2	ls.asm	/^     eb2:	48 b8 22 0d 00 00 00 	movabs $0xd22,%rax$/;"	l
eb3	grep.asm	/^ eb3:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
eb5	imshow.asm	/^ eb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
eb6	grep.asm	/^ eb6:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
eb6	prettyprint.asm	/^     eb6:	75 07                	jne    ebf <morecore+0x41>$/;"	l
eb8	prettyprint.asm	/^     eb8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eb8	sh.asm	/^     eb8:	00 00 00 $/;"	l
eb8	usertests.asm	/^     eb8:	00 00 00 $/;"	l
eb9	imshow.asm	/^ eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
eb9	ls.asm	/^     eb9:	00 00 00 $/;"	l
eba	grep.asm	/^ eba:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
ebb	sh.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebb	usertests.asm	/^     ebb:	ff d0                	callq  *%rax$/;"	l
ebc	ls.asm	/^     ebc:	ff d0                	callq  *%rax$/;"	l
ebd	imshow.asm	/^ ebd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ebd	prettyprint.asm	/^     ebd:	eb 36                	jmp    ef5 <morecore+0x77>$/;"	l
ebd	sh.asm	/^     ebd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ebd	usertests.asm	/^     ebd:	85 c0                	test   %eax,%eax$/;"	l
ebe	grep.asm	/^ ebe:	83 c0 01             	add    $0x1,%eax$/;"	l
ebe	ls.asm	/^     ebe:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ebf	prettyprint.asm	/^     ebf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ebf	usertests.asm	/^     ebf:	79 35                	jns    ef6 <dirtest+0x11a>$/;"	l
ebp	kernel.asm	/^    ebp = (addr_t*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  addr_t ebp; \/\/rbp$/;"	m	struct:context
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ec	cat.asm	/^  ec:	ff d0                	callq  *%rax$/;"	l
ec	divide.asm	/^  ec:	00 00 00 $/;"	l
ec	echo.asm	/^  ec:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ec	ln.asm	/^  ec:	55                   	push   %rbp$/;"	l
ec	mkdir.asm	/^  ec:	fc                   	cld    $/;"	l
ec	rm.asm	/^  ec:	fc                   	cld    $/;"	l
ec	sh.asm	/^      ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec	usertests.asm	/^      ec:	00 00 00 $/;"	l
ec	wc.asm	/^  ec:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ec0	imshow.asm	/^ ec0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ec1	grep.asm	/^ ec1:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ec1	sh.asm	/^     ec1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ec1	usertests.asm	/^     ec1:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
ec3	prettyprint.asm	/^     ec3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ec4	grep.asm	/^ ec4:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
ec4	imshow.asm	/^ ec4:	e9 41 ff ff ff       	jmpq   e0a <malloc+0x89>$/;"	l
ec5	ls.asm	/^     ec5:	00 00 00 $/;"	l
ec5	sh.asm	/^     ec5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ec7	prettyprint.asm	/^     ec7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ec8	ls.asm	/^     ec8:	48 8b 00             	mov    (%rax),%rax$/;"	l
ec8	usertests.asm	/^     ec8:	00 00 00 $/;"	l
ec9	imshow.asm	/^ ec9:	c9                   	leaveq $/;"	l
ec9	sh.asm	/^     ec9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
eca	imshow.asm	/^ eca:	c3                   	retq   $/;"	l
ecb	grep.asm	/^ ecb:	00 00 00 $/;"	l
ecb	ls.asm	/^     ecb:	c9                   	leaveq $/;"	l
ecb	prettyprint.asm	/^     ecb:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ecb	usertests.asm	/^     ecb:	8b 00                	mov    (%rax),%eax$/;"	l
ecc	ls.asm	/^     ecc:	c3                   	retq   $/;"	l
ecc	sh.asm	/^     ecc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ecd	ls.asm	/^     ecd:	55                   	push   %rbp$/;"	l
ecd	usertests.asm	/^     ecd:	48 be 95 6c 00 00 00 	movabs $0x6c95,%rsi$/;"	l
ece	grep.asm	/^ ece:	48 8b 00             	mov    (%rax),%rax$/;"	l
ece	ls.asm	/^     ece:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ece	prettyprint.asm	/^     ece:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ecf	sh.asm	/^     ecf:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ed	forktest.asm	/^  ed:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ed	grep.asm	/^  ed:	7e 3c                	jle    12b <grep+0x12b>$/;"	l
ed	imshow.asm	/^  ed:	ff d0                	callq  *%rax$/;"	l
ed	kill.asm	/^  ed:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ed	ln.asm	/^  ed:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ed	mkdir.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	rm.asm	/^  ed:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ed	zombie.asm	/^  ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed1	grep.asm	/^ ed1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ed1	ls.asm	/^     ed1:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ed1	prettyprint.asm	/^     ed1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ed4	usertests.asm	/^     ed4:	00 00 00 $/;"	l
ed5	grep.asm	/^ ed5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ed5	ls.asm	/^     ed5:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ed5	prettyprint.asm	/^     ed5:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ed6	sh.asm	/^     ed6:	00 00 00 $/;"	l
ed7	usertests.asm	/^     ed7:	89 c7                	mov    %eax,%edi$/;"	l
ed8	ls.asm	/^     ed8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ed9	prettyprint.asm	/^     ed9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ed9	sh.asm	/^     ed9:	ff d0                	callq  *%rax$/;"	l
ed9	usertests.asm	/^     ed9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
eda	grep.asm	/^ eda:	75 4a                	jne    f26 <malloc+0x7e>$/;"	l
edb	ls.asm	/^     edb:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
edb	sh.asm	/^     edb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
edc	grep.asm	/^ edc:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
edc	prettyprint.asm	/^     edc:	48 b8 4c 0d 00 00 00 	movabs $0xd4c,%rax$/;"	l
ede	usertests.asm	/^     ede:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
edf	ls.asm	/^     edf:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
edf	sh.asm	/^     edf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
ee	cat.asm	/^  ee:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ee	eager_mmap.asm	/^  ee:	ff d2                	callq  *%rdx$/;"	l
ee	lazy_mmap.asm	/^  ee:	ff d2                	callq  *%rdx$/;"	l
ee	prettyprint.asm	/^      ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ee3	grep.asm	/^ ee3:	00 00 00 $/;"	l
ee3	ls.asm	/^     ee3:	83 c0 01             	add    $0x1,%eax$/;"	l
ee3	prettyprint.asm	/^     ee3:	00 00 00 $/;"	l
ee3	sh.asm	/^     ee3:	c9                   	leaveq $/;"	l
ee4	sh.asm	/^     ee4:	c3                   	retq   $/;"	l
ee5	sh.asm	/^     ee5:	55                   	push   %rbp$/;"	l
ee5	usertests.asm	/^     ee5:	00 00 00 $/;"	l
ee6	grep.asm	/^ ee6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ee6	ls.asm	/^     ee6:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ee6	prettyprint.asm	/^     ee6:	ff d0                	callq  *%rax$/;"	l
ee6	sh.asm	/^     ee6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ee8	prettyprint.asm	/^     ee8:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ee8	usertests.asm	/^     ee8:	ff d2                	callq  *%rdx$/;"	l
ee9	ls.asm	/^     ee9:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
ee9	sh.asm	/^     ee9:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
eea	grep.asm	/^ eea:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
eea	usertests.asm	/^     eea:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
eed	sh.asm	/^     eed:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
eef	prettyprint.asm	/^     eef:	00 00 00 $/;"	l
ef	bad_mmap.asm	/^  ef:	48 bf 14 0e 00 00 00 	movabs $0xe14,%rdi$/;"	l
ef	divide.asm	/^  ef:	ff d2                	callq  *%rdx$/;"	l
ef	grep.asm	/^  ef:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ef	imshow.asm	/^  ef:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ef	init.asm	/^  ef:	00 00 00 $/;"	l
ef	mkdir.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	rm.asm	/^  ef:	89 ca                	mov    %ecx,%edx$/;"	l
ef	usertests.asm	/^      ef:	8b 00                	mov    (%rax),%eax$/;"	l
ef0	ls.asm	/^     ef0:	00 00 00 $/;"	l
ef1	grep.asm	/^ ef1:	00 00 00 $/;"	l
ef1	sh.asm	/^     ef1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ef1	usertests.asm	/^     ef1:	00 00 00 $/;"	l
ef2	prettyprint.asm	/^     ef2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef3	ls.asm	/^     ef3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ef4	grep.asm	/^ ef4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ef4	usertests.asm	/^     ef4:	ff d0                	callq  *%rax$/;"	l
ef5	prettyprint.asm	/^     ef5:	c9                   	leaveq $/;"	l
ef5	sh.asm	/^     ef5:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx$/;"	l
ef6	ls.asm	/^     ef6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ef6	prettyprint.asm	/^     ef6:	c3                   	retq   $/;"	l
ef6	usertests.asm	/^     ef6:	48 bf 7a 6c 00 00 00 	movabs $0x6c7a,%rdi$/;"	l
ef7	prettyprint.asm	/^     ef7:	55                   	push   %rbp$/;"	l
ef8	grep.asm	/^ ef8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ef8	prettyprint.asm	/^     ef8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ef9	sh.asm	/^     ef9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
efa	ls.asm	/^     efa:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
efb	grep.asm	/^ efb:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
efb	prettyprint.asm	/^     efb:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
efd	sh.asm	/^     efd:	48 ba 27 1e 00 00 00 	movabs $0x1e27,%rdx$/;"	l
efd	usertests.asm	/^     efd:	00 00 00 $/;"	l
eff	ls.asm	/^     eff:	75 4a                	jne    f4b <malloc+0x7e>$/;"	l
eff	prettyprint.asm	/^     eff:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  addr_t eip; \/\/rip;$/;"	m	struct:context
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	elf.h	/^  addr_t entry;$/;"	m	struct:elfhdr
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entry32mp	entry.S	/^entry32mp:$/;"	l
entry32mp	kernel.asm	/^entry32mp:$/;"	l
entry64high	entry.S	/^entry64high:$/;"	l
entry64high	kernel.asm	/^entry64high:$/;"	l
entry64low	entry.S	/^entry64low:$/;"	l
entry64low	kernel.asm	/^entry64low:$/;"	l
entry64mp	entry.S	/^entry64mp:$/;"	l
entry64mp	kernel.asm	/^entry64mp:$/;"	l
entry_addr	bootmain.c	/^  uint64 entry_addr;$/;"	m	struct:mbheader	file:
ep	kernel.asm	/^  ep = (char*)proc->sz;$/;"	d
err	x86.h	/^   uint64 err;$/;"	m	struct:trapframe
es	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
extern	kernel.asm	/^extern addr_t vectors[];  \/\/ in vectors.S: array of 256 entry pointers$/;"	l
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	bad_mmap.asm	/^   f:	48 be 68 0d 00 00 00 	movabs $0xd68,%rsi$/;"	l
f	eager_mmap.asm	/^   f:	48 be b0 0d 00 00 00 	movabs $0xdb0,%rsi$/;"	l
f	echo.asm	/^   f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
f	grep.asm	/^   f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f	kill.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	lazy_mmap.asm	/^   f:	48 be b0 0d 00 00 00 	movabs $0xdb0,%rsi$/;"	l
f	ln.asm	/^   f:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)$/;"	l
f	mkdir.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	rm.asm	/^   f:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)$/;"	l
f	wc.asm	/^   f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)$/;"	l
f0	eager_mmap.asm	/^  f0:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
f0	echo.asm	/^  f0:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f0	lazy_mmap.asm	/^  f0:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
f0	ln.asm	/^  f0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
f0	ls.asm	/^      f0:	00 00 00 $/;"	l
f0	sh.asm	/^      f0:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
f0	stressfs.asm	/^  f0:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
f00	usertests.asm	/^     f00:	48 b8 66 60 00 00 00 	movabs $0x6066,%rax$/;"	l
f01	ls.asm	/^     f01:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f02	grep.asm	/^ f02:	00 00 00 $/;"	l
f02	prettyprint.asm	/^     f02:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
f04	sh.asm	/^     f04:	00 00 00 $/;"	l
f05	grep.asm	/^ f05:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f05	prettyprint.asm	/^     f05:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
f07	sh.asm	/^     f07:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f07	usertests.asm	/^     f07:	00 00 00 $/;"	l
f08	grep.asm	/^ f08:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f08	ls.asm	/^     f08:	00 00 00 $/;"	l
f09	prettyprint.asm	/^     f09:	48 c1 e8 04          	shr    $0x4,%rax$/;"	l
f0a	sh.asm	/^     f0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f0a	usertests.asm	/^     f0a:	ff d0                	callq  *%rax$/;"	l
f0b	ls.asm	/^     f0b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f0c	usertests.asm	/^     f0c:	85 c0                	test   %eax,%eax$/;"	l
f0d	prettyprint.asm	/^     f0d:	83 c0 01             	add    $0x1,%eax$/;"	l
f0d	sh.asm	/^     f0d:	48 b8 51 09 00 00 00 	movabs $0x951,%rax$/;"	l
f0e	usertests.asm	/^     f0e:	79 35                	jns    f45 <dirtest+0x169>$/;"	l
f0f	grep.asm	/^ f0f:	00 00 00 $/;"	l
f0f	ls.asm	/^     f0f:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f1	divide.asm	/^  f1:	48 b8 22 06 00 00 00 	movabs $0x622,%rax$/;"	l
f1	kill.asm	/^  f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
f1	mkdir.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	rm.asm	/^  f1:	48 89 fe             	mov    %rdi,%rsi$/;"	l
f1	usertests.asm	/^      f1:	48 be c8 68 00 00 00 	movabs $0x68c8,%rsi$/;"	l
f1	wc.asm	/^  f1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f1	zombie.asm	/^  f1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f10	prettyprint.asm	/^     f10:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
f10	usertests.asm	/^     f10:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f12	grep.asm	/^ f12:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f13	prettyprint.asm	/^     f13:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f14	sh.asm	/^     f14:	00 00 00 $/;"	l
f15	grep.asm	/^ f15:	48 b8 20 17 00 00 00 	movabs $0x1720,%rax$/;"	l
f16	ls.asm	/^     f16:	00 00 00 $/;"	l
f17	sh.asm	/^     f17:	ff d0                	callq  *%rax$/;"	l
f17	usertests.asm	/^     f17:	00 00 00 $/;"	l
f19	ls.asm	/^     f19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f19	sh.asm	/^     f19:	85 c0                	test   %eax,%eax$/;"	l
f1a	prettyprint.asm	/^     f1a:	00 00 00 $/;"	l
f1a	usertests.asm	/^     f1a:	8b 00                	mov    (%rax),%eax$/;"	l
f1b	sh.asm	/^     f1b:	74 1f                	je     f3c <parseexec+0x57>$/;"	l
f1c	grep.asm	/^ f1c:	00 00 00 $/;"	l
f1c	usertests.asm	/^     f1c:	48 be a6 6c 00 00 00 	movabs $0x6ca6,%rsi$/;"	l
f1d	ls.asm	/^     f1d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f1d	prettyprint.asm	/^     f1d:	48 8b 00             	mov    (%rax),%rax$/;"	l
f1d	sh.asm	/^     f1d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f1f	grep.asm	/^ f1f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f2	grep.asm	/^  f2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
f2	imshow.asm	/^  f2:	81 7d e8 e8 03 00 00 	cmpl   $0x3e8,-0x18(%rbp)$/;"	l
f2	init.asm	/^  f2:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
f20	ls.asm	/^     f20:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
f20	prettyprint.asm	/^     f20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f21	sh.asm	/^     f21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f23	usertests.asm	/^     f23:	00 00 00 $/;"	l
f24	prettyprint.asm	/^     f24:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
f25	sh.asm	/^     f25:	48 89 d6             	mov    %rdx,%rsi$/;"	l
f26	grep.asm	/^ f26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f26	usertests.asm	/^     f26:	89 c7                	mov    %eax,%edi$/;"	l
f27	ls.asm	/^     f27:	00 00 00 $/;"	l
f28	sh.asm	/^     f28:	48 89 c7             	mov    %rax,%rdi$/;"	l
f28	usertests.asm	/^     f28:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f29	prettyprint.asm	/^     f29:	75 4a                	jne    f75 <malloc+0x7e>$/;"	l
f2a	grep.asm	/^ f2a:	48 8b 00             	mov    (%rax),%rax$/;"	l
f2a	ls.asm	/^     f2a:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f2b	prettyprint.asm	/^     f2b:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f2b	sh.asm	/^     f2b:	48 b8 d1 0d 00 00 00 	movabs $0xdd1,%rax$/;"	l
f2d	grep.asm	/^ f2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f2d	ls.asm	/^     f2d:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f2d	usertests.asm	/^     f2d:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f3	ls.asm	/^      f3:	ff d0                	callq  *%rax$/;"	l
f3	sh.asm	/^      f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f3	stressfs.asm	/^  f3:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
f31	grep.asm	/^ f31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f32	prettyprint.asm	/^     f32:	00 00 00 $/;"	l
f32	sh.asm	/^     f32:	00 00 00 $/;"	l
f34	ls.asm	/^     f34:	00 00 00 $/;"	l
f34	usertests.asm	/^     f34:	00 00 00 $/;"	l
f35	grep.asm	/^ f35:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f35	prettyprint.asm	/^     f35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f35	sh.asm	/^     f35:	ff d0                	callq  *%rax$/;"	l
f37	ls.asm	/^     f37:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f37	sh.asm	/^     f37:	e9 57 01 00 00       	jmpq   1093 <parseexec+0x1ae>$/;"	l
f37	usertests.asm	/^     f37:	ff d2                	callq  *%rdx$/;"	l
f38	grep.asm	/^ f38:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f39	prettyprint.asm	/^     f39:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f39	usertests.asm	/^     f39:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
f3a	ls.asm	/^     f3a:	48 b8 30 13 00 00 00 	movabs $0x1330,%rax$/;"	l
f3b	grep.asm	/^ f3b:	72 65                	jb     fa2 <malloc+0xfa>$/;"	l
f3c	sh.asm	/^     f3c:	48 b8 9d 05 00 00 00 	movabs $0x59d,%rax$/;"	l
f3d	grep.asm	/^ f3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4	echo.asm	/^  f4:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
f4	forktest.asm	/^  f4:	7e cc                	jle    c2 <forktest+0x31>$/;"	l
f4	ln.asm	/^  f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
f4	mkdir.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	rm.asm	/^  f4:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
f4	zombie.asm	/^  f4:	0f b6 c0             	movzbl %al,%eax$/;"	l
f40	prettyprint.asm	/^     f40:	00 00 00 $/;"	l
f40	usertests.asm	/^     f40:	00 00 00 $/;"	l
f41	grep.asm	/^ f41:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f41	ls.asm	/^     f41:	00 00 00 $/;"	l
f43	prettyprint.asm	/^     f43:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f43	sh.asm	/^     f43:	00 00 00 $/;"	l
f43	usertests.asm	/^     f43:	ff d0                	callq  *%rax$/;"	l
f44	grep.asm	/^ f44:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f44	ls.asm	/^     f44:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f45	usertests.asm	/^     f45:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f46	sh.asm	/^     f46:	ff d0                	callq  *%rax$/;"	l
f47	grep.asm	/^ f47:	75 10                	jne    f59 <malloc+0xb1>$/;"	l
f47	prettyprint.asm	/^     f47:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f48	sh.asm	/^     f48:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f49	grep.asm	/^ f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f4a	prettyprint.asm	/^     f4a:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
f4b	ls.asm	/^     f4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	sh.asm	/^     f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f4c	usertests.asm	/^     f4c:	00 00 00 $/;"	l
f4d	grep.asm	/^ f4d:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f4f	ls.asm	/^     f4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
f4f	usertests.asm	/^     f4f:	8b 00                	mov    (%rax),%eax$/;"	l
f5	cat.asm	/^  f5:	e9 a0 00 00 00       	jmpq   19a <main+0xde>$/;"	l
f5	eager_mmap.asm	/^  f5:	48 bf 57 0e 00 00 00 	movabs $0xe57,%rdi$/;"	l
f5	kill.asm	/^  f5:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
f5	lazy_mmap.asm	/^  f5:	48 bf 57 0e 00 00 00 	movabs $0xe57,%rdi$/;"	l
f5	ls.asm	/^      f5:	48 b8 20 13 00 00 00 	movabs $0x1320,%rax$/;"	l
f5	prettyprint.asm	/^      f5:	e9 d0 00 00 00       	jmpq   1ca <main+0x1ca>$/;"	l
f50	grep.asm	/^ f50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f50	sh.asm	/^     f50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
f51	prettyprint.asm	/^     f51:	00 00 00 $/;"	l
f51	usertests.asm	/^     f51:	48 be ba 6c 00 00 00 	movabs $0x6cba,%rsi$/;"	l
f52	ls.asm	/^     f52:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f54	grep.asm	/^ f54:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f54	prettyprint.asm	/^     f54:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f54	sh.asm	/^     f54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
f56	ls.asm	/^     f56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f57	grep.asm	/^ f57:	eb 2e                	jmp    f87 <malloc+0xdf>$/;"	l
f57	prettyprint.asm	/^     f57:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f58	usertests.asm	/^     f58:	00 00 00 $/;"	l
f59	grep.asm	/^ f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f5a	ls.asm	/^     f5a:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5b	sh.asm	/^     f5b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
f5b	usertests.asm	/^     f5b:	89 c7                	mov    %eax,%edi$/;"	l
f5d	grep.asm	/^ f5d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f5d	ls.asm	/^     f5d:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f5d	usertests.asm	/^     f5d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f5e	prettyprint.asm	/^     f5e:	00 00 00 $/;"	l
f5f	sh.asm	/^     f5f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx$/;"	l
f6	bad_mmap.asm	/^  f6:	00 00 00 $/;"	l
f6	forktest.asm	/^  f6:	eb 01                	jmp    f9 <forktest+0x68>$/;"	l
f6	grep.asm	/^  f6:	48 ba 20 13 00 00 00 	movabs $0x1320,%rdx$/;"	l
f6	wc.asm	/^  f6:	48 ba 4a 07 00 00 00 	movabs $0x74a,%rdx$/;"	l
f60	grep.asm	/^ f60:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f60	ls.asm	/^     f60:	72 65                	jb     fc7 <malloc+0xfa>$/;"	l
f61	prettyprint.asm	/^     f61:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f62	ls.asm	/^     f62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f62	usertests.asm	/^     f62:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f63	grep.asm	/^ f63:	89 c2                	mov    %eax,%edx$/;"	l
f63	sh.asm	/^     f63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f64	prettyprint.asm	/^     f64:	48 b8 50 16 00 00 00 	movabs $0x1650,%rax$/;"	l
f65	grep.asm	/^ f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f66	ls.asm	/^     f66:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f67	sh.asm	/^     f67:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f69	grep.asm	/^ f69:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f69	ls.asm	/^     f69:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f69	usertests.asm	/^     f69:	00 00 00 $/;"	l
f6a	sh.asm	/^     f6a:	48 89 c7             	mov    %rax,%rdi$/;"	l
f6b	prettyprint.asm	/^     f6b:	00 00 00 $/;"	l
f6c	grep.asm	/^ f6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6c	ls.asm	/^     f6c:	75 10                	jne    f7e <malloc+0xb1>$/;"	l
f6c	usertests.asm	/^     f6c:	ff d2                	callq  *%rdx$/;"	l
f6d	sh.asm	/^     f6d:	48 b8 8e 0c 00 00 00 	movabs $0xc8e,%rax$/;"	l
f6e	ls.asm	/^     f6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f6e	prettyprint.asm	/^     f6e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)$/;"	l
f6e	usertests.asm	/^     f6e:	90                   	nop$/;"	l
f6f	usertests.asm	/^     f6f:	5d                   	pop    %rbp$/;"	l
f7	echo.asm	/^  f7:	88 10                	mov    %dl,(%rax)$/;"	l
f7	init.asm	/^  f7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f7	sh.asm	/^      f7:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
f7	zombie.asm	/^  f7:	29 c2                	sub    %eax,%edx$/;"	l
f70	grep.asm	/^ f70:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f70	usertests.asm	/^     f70:	c3                   	retq   $/;"	l
f71	usertests.asm	/^     f71:	55                   	push   %rbp$/;"	l
f72	ls.asm	/^     f72:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f72	usertests.asm	/^     f72:	48 89 e5             	mov    %rsp,%rbp$/;"	l
f73	grep.asm	/^ f73:	89 c0                	mov    %eax,%eax$/;"	l
f74	sh.asm	/^     f74:	00 00 00 $/;"	l
f75	grep.asm	/^ f75:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f75	ls.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	prettyprint.asm	/^     f75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f75	usertests.asm	/^     f75:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
f77	sh.asm	/^     f77:	ff d0                	callq  *%rax$/;"	l
f79	grep.asm	/^ f79:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f79	ls.asm	/^     f79:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f79	prettyprint.asm	/^     f79:	48 8b 00             	mov    (%rax),%rax$/;"	l
f79	sh.asm	/^     f79:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
f7c	ls.asm	/^     f7c:	eb 2e                	jmp    fac <malloc+0xdf>$/;"	l
f7c	prettyprint.asm	/^     f7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
f7c	usertests.asm	/^     f7c:	00 00 00 $/;"	l
f7d	grep.asm	/^ f7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7d	sh.asm	/^     f7d:	e9 b4 00 00 00       	jmpq   1036 <parseexec+0x151>$/;"	l
f7e	ls.asm	/^     f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f7f	usertests.asm	/^     f7f:	8b 00                	mov    (%rax),%eax$/;"	l
f8	divide.asm	/^  f8:	00 00 00 $/;"	l
f8	forktest.asm	/^  f8:	90                   	nop$/;"	l
f8	ln.asm	/^  f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
f8	mkdir.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	rm.asm	/^  f8:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
f8	stressfs.asm	/^  f8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
f8	usertests.asm	/^      f8:	00 00 00 $/;"	l
f80	prettyprint.asm	/^     f80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f81	grep.asm	/^ f81:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
f81	usertests.asm	/^     f81:	48 be c9 6c 00 00 00 	movabs $0x6cc9,%rsi$/;"	l
f82	ls.asm	/^     f82:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f82	sh.asm	/^     f82:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
f84	grep.asm	/^ f84:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f84	prettyprint.asm	/^     f84:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f85	ls.asm	/^     f85:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
f86	sh.asm	/^     f86:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx$/;"	l
f87	grep.asm	/^ f87:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
f87	prettyprint.asm	/^     f87:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f88	ls.asm	/^     f88:	89 c2                	mov    %eax,%edx$/;"	l
f88	usertests.asm	/^     f88:	00 00 00 $/;"	l
f8a	ls.asm	/^     f8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8a	prettyprint.asm	/^     f8a:	72 65                	jb     ff1 <malloc+0xfa>$/;"	l
f8a	sh.asm	/^     f8a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi$/;"	l
f8b	usertests.asm	/^     f8b:	89 c7                	mov    %eax,%edi$/;"	l
f8c	prettyprint.asm	/^     f8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f8d	usertests.asm	/^     f8d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
f8e	grep.asm	/^ f8e:	00 00 00 $/;"	l
f8e	ls.asm	/^     f8e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
f8e	sh.asm	/^     f8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
f9	bad_mmap.asm	/^  f9:	48 b8 4e 05 00 00 00 	movabs $0x54e,%rax$/;"	l
f9	echo.asm	/^  f9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
f9	forktest.asm	/^  f9:	81 7d fc e8 03 00 00 	cmpl   $0x3e8,-0x4(%rbp)$/;"	l
f9	imshow.asm	/^  f9:	74 25                	je     120 <main+0x120>$/;"	l
f9	kill.asm	/^  f9:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
f9	zombie.asm	/^  f9:	89 d0                	mov    %edx,%eax$/;"	l
f90	prettyprint.asm	/^     f90:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f91	grep.asm	/^ f91:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
f91	ls.asm	/^     f91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f92	sh.asm	/^     f92:	48 89 c7             	mov    %rax,%rdi$/;"	l
f92	usertests.asm	/^     f92:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
f93	prettyprint.asm	/^     f93:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
f95	grep.asm	/^ f95:	48 89 10             	mov    %rdx,(%rax)$/;"	l
f95	ls.asm	/^     f95:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
f95	sh.asm	/^     f95:	48 b8 aa 07 00 00 00 	movabs $0x7aa,%rax$/;"	l
f96	prettyprint.asm	/^     f96:	75 10                	jne    fa8 <malloc+0xb1>$/;"	l
f98	grep.asm	/^ f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f98	ls.asm	/^     f98:	89 c0                	mov    %eax,%eax$/;"	l
f98	prettyprint.asm	/^     f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
f99	usertests.asm	/^     f99:	00 00 00 $/;"	l
f9a	ls.asm	/^     f9a:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
f9c	grep.asm	/^ f9c:	48 83 c0 10          	add    $0x10,%rax$/;"	l
f9c	prettyprint.asm	/^     f9c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
f9c	sh.asm	/^     f9c:	00 00 00 $/;"	l
f9c	usertests.asm	/^     f9c:	ff d2                	callq  *%rdx$/;"	l
f9e	ls.asm	/^     f9e:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
f9e	usertests.asm	/^     f9e:	48 be e0 87 00 00 00 	movabs $0x87e0,%rsi$/;"	l
f9f	prettyprint.asm	/^     f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
f9f	sh.asm	/^     f9f:	ff d0                	callq  *%rax$/;"	l
fa	cat.asm	/^  fa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
fa	prettyprint.asm	/^      fa:	0f b6 4d fb          	movzbl -0x5(%rbp),%ecx$/;"	l
fa0	grep.asm	/^ fa0:	eb 4e                	jmp    ff0 <malloc+0x148>$/;"	l
fa1	sh.asm	/^     fa1:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
fa2	grep.asm	/^ fa2:	48 b8 30 17 00 00 00 	movabs $0x1730,%rax$/;"	l
fa2	ls.asm	/^     fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa3	prettyprint.asm	/^     fa3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fa4	sh.asm	/^     fa4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
fa5	usertests.asm	/^     fa5:	00 00 00 $/;"	l
fa6	ls.asm	/^     fa6:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fa6	prettyprint.asm	/^     fa6:	eb 2e                	jmp    fd6 <malloc+0xdf>$/;"	l
fa8	prettyprint.asm	/^     fa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fa8	sh.asm	/^     fa8:	0f 84 b6 00 00 00    	je     1064 <parseexec+0x17f>$/;"	l
fa8	usertests.asm	/^     fa8:	48 bf 70 68 00 00 00 	movabs $0x6870,%rdi$/;"	l
fa9	grep.asm	/^ fa9:	00 00 00 $/;"	l
fa9	ls.asm	/^     fa9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fac	grep.asm	/^ fac:	48 8b 00             	mov    (%rax),%rax$/;"	l
fac	ls.asm	/^     fac:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fac	prettyprint.asm	/^     fac:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fae	sh.asm	/^     fae:	83 7d e4 61          	cmpl   $0x61,-0x1c(%rbp)$/;"	l
faf	grep.asm	/^ faf:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
faf	prettyprint.asm	/^     faf:	2b 45 ec             	sub    -0x14(%rbp),%eax$/;"	l
faf	usertests.asm	/^     faf:	00 00 00 $/;"	l
fb	divide.asm	/^  fb:	ff d0                	callq  *%rax$/;"	l
fb	imshow.asm	/^  fb:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
fb	mkdir.asm	/^  fb:	90                   	nop$/;"	l
fb	rm.asm	/^  fb:	90                   	nop$/;"	l
fb	sh.asm	/^      fb:	89 d6                	mov    %edx,%esi$/;"	l
fb	stressfs.asm	/^  fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	usertests.asm	/^      fb:	89 c7                	mov    %eax,%edi$/;"	l
fb	zombie.asm	/^  fb:	c9                   	leaveq $/;"	l
fb2	prettyprint.asm	/^     fb2:	89 c2                	mov    %eax,%edx$/;"	l
fb2	sh.asm	/^     fb2:	74 16                	je     fca <parseexec+0xe5>$/;"	l
fb2	usertests.asm	/^     fb2:	48 b8 48 60 00 00 00 	movabs $0x6048,%rax$/;"	l
fb3	grep.asm	/^ fb3:	75 23                	jne    fd8 <malloc+0x130>$/;"	l
fb3	ls.asm	/^     fb3:	00 00 00 $/;"	l
fb4	prettyprint.asm	/^     fb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fb4	sh.asm	/^     fb4:	48 bf fa 1d 00 00 00 	movabs $0x1dfa,%rdi$/;"	l
fb5	grep.asm	/^ fb5:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fb6	ls.asm	/^     fb6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fb8	grep.asm	/^ fb8:	89 c7                	mov    %eax,%edi$/;"	l
fb8	prettyprint.asm	/^     fb8:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fb9	usertests.asm	/^     fb9:	00 00 00 $/;"	l
fba	grep.asm	/^ fba:	48 b8 2f 0e 00 00 00 	movabs $0xe2f,%rax$/;"	l
fba	ls.asm	/^     fba:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fbb	prettyprint.asm	/^     fbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbb	sh.asm	/^     fbb:	00 00 00 $/;"	l
fbc	usertests.asm	/^     fbc:	ff d0                	callq  *%rax$/;"	l
fbd	ls.asm	/^     fbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fbe	sh.asm	/^     fbe:	48 b8 26 05 00 00 00 	movabs $0x526,%rax$/;"	l
fbe	usertests.asm	/^     fbe:	85 c0                	test   %eax,%eax$/;"	l
fbf	prettyprint.asm	/^     fbf:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
fc	eager_mmap.asm	/^  fc:	00 00 00 $/;"	l
fc	echo.asm	/^  fc:	84 c0                	test   %al,%al$/;"	l
fc	init.asm	/^  fc:	48 ba c8 06 00 00 00 	movabs $0x6c8,%rdx$/;"	l
fc	lazy_mmap.asm	/^  fc:	00 00 00 $/;"	l
fc	ln.asm	/^  fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fc	ls.asm	/^      fc:	00 00 00 $/;"	l
fc	mkdir.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	rm.asm	/^  fc:	c9                   	leaveq $/;"	l
fc	zombie.asm	/^  fc:	c3                   	retq   $/;"	l
fc0	usertests.asm	/^     fc0:	79 35                	jns    ff7 <exectest+0x86>$/;"	l
fc1	grep.asm	/^ fc1:	00 00 00 $/;"	l
fc1	ls.asm	/^     fc1:	48 83 c0 10          	add    $0x10,%rax$/;"	l
fc2	prettyprint.asm	/^     fc2:	89 c0                	mov    %eax,%eax$/;"	l
fc2	usertests.asm	/^     fc2:	48 b8 08 88 00 00 00 	movabs $0x8808,%rax$/;"	l
fc4	grep.asm	/^ fc4:	ff d0                	callq  *%rax$/;"	l
fc4	prettyprint.asm	/^     fc4:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
fc5	ls.asm	/^     fc5:	eb 4e                	jmp    1015 <malloc+0x148>$/;"	l
fc5	sh.asm	/^     fc5:	00 00 00 $/;"	l
fc6	grep.asm	/^ fc6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fc7	ls.asm	/^     fc7:	48 b8 40 13 00 00 00 	movabs $0x1340,%rax$/;"	l
fc8	prettyprint.asm	/^     fc8:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
fc8	sh.asm	/^     fc8:	ff d0                	callq  *%rax$/;"	l
fc9	usertests.asm	/^     fc9:	00 00 00 $/;"	l
fca	grep.asm	/^ fca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fca	sh.asm	/^     fca:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
fcc	prettyprint.asm	/^     fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fcc	usertests.asm	/^     fcc:	8b 00                	mov    (%rax),%eax$/;"	l
fce	ls.asm	/^     fce:	00 00 00 $/;"	l
fce	sh.asm	/^     fce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fce	usertests.asm	/^     fce:	48 be d4 6c 00 00 00 	movabs $0x6cd4,%rsi$/;"	l
fcf	grep.asm	/^ fcf:	75 07                	jne    fd8 <malloc+0x130>$/;"	l
fd	bad_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd:	48 98                	cltq   $/;"	l
fd	divide.asm	/^  fd:	81 7d f8 14 ae 47 01 	cmpl   $0x147ae14,-0x8(%rbp)$/;"	l
fd	eager_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd:	00 00 00 $/;"	l
fd	imshow.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
fd	lazy_mmap.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	c3                   	retq   $/;"	l
fd	prettyprint.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	c3                   	retq   $/;"	l
fd	sh.asm	/^      fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd:	48 b8 fb 04 00 00 00 	movabs $0x4fb,%rax$/;"	l
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^      fd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	00 00 00 $/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	55                   	push   %rbp$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	prettyprint.asm	/^     fd0:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
fd1	grep.asm	/^ fd1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fd1	ls.asm	/^     fd1:	48 8b 00             	mov    (%rax),%rax$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
fd3	prettyprint.asm	/^     fd3:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
fd4	ls.asm	/^     fd4:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
fd5	sh.asm	/^     fd5:	48 63 d2             	movslq %edx,%rdx$/;"	l
fd5	usertests.asm	/^     fd5:	00 00 00 $/;"	l
fd6	grep.asm	/^ fd6:	eb 18                	jmp    ff0 <malloc+0x148>$/;"	l
fd6	prettyprint.asm	/^     fd6:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
fd8	grep.asm	/^ fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fd8	ls.asm	/^     fd8:	75 23                	jne    ffd <malloc+0x130>$/;"	l
fd8	sh.asm	/^     fd8:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
fd8	usertests.asm	/^     fd8:	89 c7                	mov    %eax,%edi$/;"	l
fda	ls.asm	/^     fda:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
fda	usertests.asm	/^     fda:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdc	grep.asm	/^ fdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
fdd	ls.asm	/^     fdd:	89 c7                	mov    %eax,%edi$/;"	l
fdd	prettyprint.asm	/^     fdd:	00 00 00 $/;"	l
fdd	sh.asm	/^     fdd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
fdf	ls.asm	/^     fdf:	48 b8 54 0e 00 00 00 	movabs $0xe54,%rax$/;"	l
fdf	usertests.asm	/^     fdf:	48 ba d1 61 00 00 00 	movabs $0x61d1,%rdx$/;"	l
fe	echo.asm	/^  fe:	75 dc                	jne    dc <strcpy+0x19>$/;"	l
fe	imshow.asm	/^  fe:	89 c2                	mov    %eax,%edx$/;"	l
fe	mkdir.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	prettyprint.asm	/^      fe:	89 c8                	mov    %ecx,%eax$/;"	l
fe	rm.asm	/^  fe:	55                   	push   %rbp$/;"	l
fe	zombie.asm	/^  fe:	48 89 e5             	mov    %rsp,%rbp$/;"	l
fe0	grep.asm	/^ fe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe0	prettyprint.asm	/^     fe0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
fe1	sh.asm	/^     fe1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
fe4	grep.asm	/^ fe4:	48 8b 00             	mov    (%rax),%rax$/;"	l
fe4	prettyprint.asm	/^     fe4:	48 89 10             	mov    %rdx,(%rax)$/;"	l
fe5	sh.asm	/^     fe5:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
fe6	ls.asm	/^     fe6:	00 00 00 $/;"	l
fe6	usertests.asm	/^     fe6:	00 00 00 $/;"	l
fe7	grep.asm	/^ fe7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
fe7	prettyprint.asm	/^     fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
fe8	sh.asm	/^     fe8:	48 63 c9             	movslq %ecx,%rcx$/;"	l
fe9	ls.asm	/^     fe9:	ff d0                	callq  *%rax$/;"	l
fe9	usertests.asm	/^     fe9:	ff d2                	callq  *%rdx$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	grep.asm	/^ feb:	e9 41 ff ff ff       	jmpq   f31 <malloc+0x89>$/;"	l
feb	ls.asm	/^     feb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
feb	prettyprint.asm	/^     feb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
feb	sh.asm	/^     feb:	48 83 c1 0a          	add    $0xa,%rcx$/;"	l
feb	usertests.asm	/^     feb:	48 b8 02 60 00 00 00 	movabs $0x6002,%rax$/;"	l
fef	ls.asm	/^     fef:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
fef	prettyprint.asm	/^     fef:	eb 4e                	jmp    103f <malloc+0x148>$/;"	l
fef	sh.asm	/^     fef:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
fetchaddr	syscall.c	/^fetchaddr(addr_t addr, addr_t *ip)$/;"	f
fetcharg	syscall.c	/^fetcharg(int n)$/;"	f	file:
fetchint	syscall.c	/^fetchint(addr_t addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(addr_t addr, char **pp)$/;"	f
ff	cat.asm	/^  ff:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ff	eager_mmap.asm	/^  ff:	48 b8 96 05 00 00 00 	movabs $0x596,%rax$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	lazy_mmap.asm	/^  ff:	48 b8 96 05 00 00 00 	movabs $0x596,%rax$/;"	l
ff	ls.asm	/^      ff:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ff	mkdir.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff	rm.asm	/^  ff:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ff0	grep.asm	/^ ff0:	c9                   	leaveq $/;"	l
ff1	grep.asm	/^ ff1:	c3                   	retq   $/;"	l
ff1	prettyprint.asm	/^     ff1:	48 b8 60 16 00 00 00 	movabs $0x1660,%rax$/;"	l
ff2	usertests.asm	/^     ff2:	00 00 00 $/;"	l
ff4	ls.asm	/^     ff4:	75 07                	jne    ffd <malloc+0x130>$/;"	l
ff4	sh.asm	/^     ff4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ff5	usertests.asm	/^     ff5:	ff d0                	callq  *%rax$/;"	l
ff6	ls.asm	/^     ff6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ff7	usertests.asm	/^     ff7:	90                   	nop$/;"	l
ff8	prettyprint.asm	/^     ff8:	00 00 00 $/;"	l
ff8	sh.asm	/^     ff8:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ff8	usertests.asm	/^     ff8:	5d                   	pop    %rbp$/;"	l
ff9	usertests.asm	/^     ff9:	c3                   	retq   $/;"	l
ffa	usertests.asm	/^     ffa:	55                   	push   %rbp$/;"	l
ffb	ls.asm	/^     ffb:	eb 18                	jmp    1015 <malloc+0x148>$/;"	l
ffb	prettyprint.asm	/^     ffb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffb	usertests.asm	/^     ffb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffc	sh.asm	/^     ffc:	7e 16                	jle    1014 <parseexec+0x12f>$/;"	l
ffd	ls.asm	/^     ffd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffe	prettyprint.asm	/^     ffe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffe	sh.asm	/^     ffe:	48 bf 49 1e 00 00 00 	movabs $0x1e49,%rdi$/;"	l
ffe	usertests.asm	/^     ffe:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000 <begin>:$/;"	l
ffff800000100000	kernel.asm	/^ffff800000100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh$/;"	l
ffff800000100006	kernel.asm	/^ffff800000100006:	01 00                	add    %eax,(%rax)$/;"	l
ffff800000100008	kernel.asm	/^ffff800000100008:	fe 4f 51             	decb   0x51(%rdi)$/;"	l
ffff80000010000b	kernel.asm	/^ffff80000010000b:	e4 00                	in     $0x0,%al$/;"	l
ffff80000010000d	kernel.asm	/^ffff80000010000d:	00 10                	add    %dl,(%rax)$/;"	l
ffff80000010000f	kernel.asm	/^ffff80000010000f:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100011	kernel.asm	/^ffff800000100011:	00 10                	add    %dl,(%rax)$/;"	l
ffff800000100013	kernel.asm	/^ffff800000100013:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100015	kernel.asm	/^ffff800000100015:	10 11                	adc    %dl,(%rcx)$/;"	l
ffff800000100017	kernel.asm	/^ffff800000100017:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100019	kernel.asm	/^ffff800000100019:	f0 11 00             	lock adc %eax,(%rax)$/;"	l
ffff80000010001c	kernel.asm	/^ffff80000010001c:	20 00                	and    %al,(%rax)$/;"	l
ffff80000010001e	kernel.asm	/^ffff80000010001e:	10 00                	adc    %al,(%rax)$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020 <mboot_entry>:$/;"	l
ffff800000100020	kernel.asm	/^ffff800000100020:	31 c0                	xor    %eax,%eax$/;"	l
ffff800000100022	kernel.asm	/^ffff800000100022:	bf 00 10 00 00       	mov    $0x1000,%edi$/;"	l
ffff800000100027	kernel.asm	/^ffff800000100027:	b9 00 20 00 00       	mov    $0x2000,%ecx$/;"	l
ffff80000010002c	kernel.asm	/^ffff80000010002c:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff80000010002e	kernel.asm	/^ffff80000010002e:	b8 03 20 00 00       	mov    $0x2003,%eax$/;"	l
ffff800000100033	kernel.asm	/^ffff800000100033:	a3 00 10 00 00 a3 00 	movabs %eax,0x1800a300001000$/;"	l
ffff80000010003a	kernel.asm	/^ffff80000010003a:	18 00 $/;"	l
ffff80000010003c	kernel.asm	/^ffff80000010003c:	00 b8 83 00 00 00    	add    %bh,0x83(%rax)$/;"	l
ffff800000100042	kernel.asm	/^ffff800000100042:	a3                   	.byte 0xa3$/;"	l
ffff800000100043	kernel.asm	/^ffff800000100043:	00 20                	add    %ah,(%rax)$/;"	l
ffff800000100045	kernel.asm	/^ffff800000100045:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100047	kernel.asm	/^ffff800000100047:	31 db                	xor    %ebx,%ebx$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049 <entry32mp>:$/;"	l
ffff800000100049	kernel.asm	/^ffff800000100049:	b8 00 10 00 00       	mov    $0x1000,%eax$/;"	l
ffff80000010004e	kernel.asm	/^ffff80000010004e:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff800000100051	kernel.asm	/^ffff800000100051:	0f 01 15 90 00 10 00 	lgdt   0x100090(%rip)        # ffff8000002000e8 <end+0xe10e8>$/;"	l
ffff800000100058	kernel.asm	/^ffff800000100058:	0f 20 e0             	mov    %cr4,%rax$/;"	l
ffff80000010005b	kernel.asm	/^ffff80000010005b:	0f ba e8 05          	bts    $0x5,%eax$/;"	l
ffff80000010005f	kernel.asm	/^ffff80000010005f:	0f 22 e0             	mov    %rax,%cr4$/;"	l
ffff800000100062	kernel.asm	/^ffff800000100062:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx$/;"	l
ffff800000100067	kernel.asm	/^ffff800000100067:	0f 32                	rdmsr  $/;"	l
ffff800000100069	kernel.asm	/^ffff800000100069:	0f ba e8 00          	bts    $0x0,%eax$/;"	l
ffff80000010006d	kernel.asm	/^ffff80000010006d:	0f ba e8 08          	bts    $0x8,%eax$/;"	l
ffff800000100071	kernel.asm	/^ffff800000100071:	0f 30                	wrmsr  $/;"	l
ffff800000100073	kernel.asm	/^ffff800000100073:	0f 20 c0             	mov    %cr0,%rax$/;"	l
ffff800000100076	kernel.asm	/^ffff800000100076:	0d 02 00 01 80       	or     $0x80010002,%eax$/;"	l
ffff80000010007b	kernel.asm	/^ffff80000010007b:	0f 22 c0             	mov    %rax,%cr0$/;"	l
ffff80000010007e	kernel.asm	/^ffff80000010007e:	ea                   	(bad)  $/;"	l
ffff80000010007f	kernel.asm	/^ffff80000010007f:	c0 00 10             	rolb   $0x10,(%rax)$/;"	l
ffff800000100082	kernel.asm	/^ffff800000100082:	00 08                	add    %cl,(%rax)$/;"	l
ffff800000100084	kernel.asm	/^ffff800000100084:	00 90 66 2e 0f 1f    	add    %dl,0x1f0f2e66(%rax)$/;"	l
ffff80000010008a	kernel.asm	/^ffff80000010008a:	84 00                	test   %al,(%rax)$/;"	l
ffff80000010008c	kernel.asm	/^ffff80000010008c:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090 <gdtr64>:$/;"	l
ffff800000100090	kernel.asm	/^ffff800000100090:	17                   	(bad)  $/;"	l
ffff800000100091	kernel.asm	/^ffff800000100091:	00 a0 00 10 00 00    	add    %ah,0x1000(%rax)$/;"	l
ffff800000100097	kernel.asm	/^ffff800000100097:	00 00                	add    %al,(%rax)$/;"	l
ffff800000100099	kernel.asm	/^ffff800000100099:	00 66 0f             	add    %ah,0xf(%rsi)$/;"	l
ffff80000010009c	kernel.asm	/^ffff80000010009c:	1f                   	(bad)  $/;"	l
ffff80000010009d	kernel.asm	/^ffff80000010009d:	44 00 00             	add    %r8b,(%rax)$/;"	l
ffff8000001000a0	kernel.asm	/^ffff8000001000a0 <gdt64_begin>:$/;"	l
ffff8000001000ac	kernel.asm	/^ffff8000001000ac:	00 98 20 00 00 00    	add    %bl,0x20(%rax)$/;"	l
ffff8000001000b2	kernel.asm	/^ffff8000001000b2:	00 00                	add    %al,(%rax)$/;"	l
ffff8000001000b4	kernel.asm	/^ffff8000001000b4:	00                   	.byte 0x0$/;"	l
ffff8000001000b5	kernel.asm	/^ffff8000001000b5:	90                   	nop$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8 <gdt64_end>:$/;"	l
ffff8000001000b8	kernel.asm	/^ffff8000001000b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)$/;"	l
ffff8000001000bf	kernel.asm	/^ffff8000001000bf:	00 $/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0 <entry64low>:$/;"	l
ffff8000001000c0	kernel.asm	/^ffff8000001000c0:	48 b8 cc 00 10 00 00 	movabs $0xffff8000001000cc,%rax$/;"	l
ffff8000001000c7	kernel.asm	/^ffff8000001000c7:	80 ff ff $/;"	l
ffff8000001000ca	kernel.asm	/^ffff8000001000ca:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc <_start>:$/;"	l
ffff8000001000cc	kernel.asm	/^ffff8000001000cc:	48 31 c0             	xor    %rax,%rax$/;"	l
ffff8000001000cf	kernel.asm	/^ffff8000001000cf:	8e d0                	mov    %eax,%ss$/;"	l
ffff8000001000d1	kernel.asm	/^ffff8000001000d1:	8e d8                	mov    %eax,%ds$/;"	l
ffff8000001000d3	kernel.asm	/^ffff8000001000d3:	8e c0                	mov    %eax,%es$/;"	l
ffff8000001000d5	kernel.asm	/^ffff8000001000d5:	8e e0                	mov    %eax,%fs$/;"	l
ffff8000001000d7	kernel.asm	/^ffff8000001000d7:	8e e8                	mov    %eax,%gs$/;"	l
ffff8000001000d9	kernel.asm	/^ffff8000001000d9:	85 db                	test   %ebx,%ebx$/;"	l
ffff8000001000db	kernel.asm	/^ffff8000001000db:	75 14                	jne    ffff8000001000f1 <entry64mp>$/;"	l
ffff8000001000dd	kernel.asm	/^ffff8000001000dd:	48 b8 00 00 01 00 00 	movabs $0xffff800000010000,%rax$/;"	l
ffff8000001000e4	kernel.asm	/^ffff8000001000e4:	80 ff ff $/;"	l
ffff8000001000e7	kernel.asm	/^ffff8000001000e7:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff8000001000ea	kernel.asm	/^ffff8000001000ea:	e9 41 54 00 00       	jmpq   ffff800000105530 <main>$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef <__deadloop>:$/;"	l
ffff8000001000ef	kernel.asm	/^ffff8000001000ef:	eb fe                	jmp    ffff8000001000ef <__deadloop>$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1 <entry64mp>:$/;"	l
ffff8000001000f1	kernel.asm	/^ffff8000001000f1:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax$/;"	l
ffff8000001000f8	kernel.asm	/^ffff8000001000f8:	48 8b 60 f0          	mov    -0x10(%rax),%rsp$/;"	l
ffff8000001000fc	kernel.asm	/^ffff8000001000fc:	e9 68 55 00 00       	jmpq   ffff800000105669 <mpenter>$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101 <wrmsr>:$/;"	l
ffff800000100101	kernel.asm	/^ffff800000100101:	48 89 f9             	mov    %rdi,%rcx$/;"	l
ffff800000100104	kernel.asm	/^ffff800000100104:	48 89 f0             	mov    %rsi,%rax$/;"	l
ffff800000100107	kernel.asm	/^ffff800000100107:	48 c1 ee 20          	shr    $0x20,%rsi$/;"	l
ffff80000010010b	kernel.asm	/^ffff80000010010b:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff80000010010e	kernel.asm	/^ffff80000010010e:	0f 30                	wrmsr  $/;"	l
ffff800000100110	kernel.asm	/^ffff800000100110:	c3                   	retq   $/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111 <ignore_sysret>:$/;"	l
ffff800000100111	kernel.asm	/^ffff800000100111:	48 c7 c0 da ff ff ff 	mov    $0xffffffffffffffda,%rax$/;"	l
ffff800000100118	kernel.asm	/^ffff800000100118:	0f 07                	sysret $/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a <syscall_entry>:$/;"	l
ffff80000010011a	kernel.asm	/^ffff80000010011a:	48 89 44 24 f8       	mov    %rax,-0x8(%rsp)$/;"	l
ffff80000010011f	kernel.asm	/^ffff80000010011f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000100126	kernel.asm	/^ffff800000100126:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010012a	kernel.asm	/^ffff80000010012a:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010012e	kernel.asm	/^ffff80000010012e:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000100134	kernel.asm	/^ffff800000100134:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff800000100138	kernel.asm	/^ffff800000100138:	48 89 20             	mov    %rsp,(%rax)$/;"	l
ffff80000010013b	kernel.asm	/^ffff80000010013b:	48 89 c4             	mov    %rax,%rsp$/;"	l
ffff80000010013e	kernel.asm	/^ffff80000010013e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100141	kernel.asm	/^ffff800000100141:	48 8b 40 f8          	mov    -0x8(%rax),%rax$/;"	l
ffff800000100145	kernel.asm	/^ffff800000100145:	41 53                	push   %r11$/;"	l
ffff800000100147	kernel.asm	/^ffff800000100147:	6a 23                	pushq  $0x23$/;"	l
ffff800000100149	kernel.asm	/^ffff800000100149:	51                   	push   %rcx$/;"	l
ffff80000010014a	kernel.asm	/^ffff80000010014a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010014c	kernel.asm	/^ffff80000010014c:	6a 40                	pushq  $0x40$/;"	l
ffff80000010014e	kernel.asm	/^ffff80000010014e:	e9 ed 93 00 00       	jmpq   ffff800000109540 <syscall_trap>$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153 <binit>:$/;"	l
ffff800000100153	kernel.asm	/^ffff800000100153:	55                   	push   %rbp$/;"	l
ffff800000100154	kernel.asm	/^ffff800000100154:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100157	kernel.asm	/^ffff800000100157:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010015b	kernel.asm	/^ffff80000010015b:	48 be 48 cc 10 00 00 	movabs $0xffff80000010cc48,%rsi$/;"	l
ffff800000100162	kernel.asm	/^ffff800000100162:	80 ff ff $/;"	l
ffff800000100165	kernel.asm	/^ffff800000100165:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff80000010016c	kernel.asm	/^ffff80000010016c:	80 ff ff $/;"	l
ffff80000010016f	kernel.asm	/^ffff80000010016f:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000100176	kernel.asm	/^ffff800000100176:	80 ff ff $/;"	l
ffff800000100179	kernel.asm	/^ffff800000100179:	ff d0                	callq  *%rax$/;"	l
ffff80000010017b	kernel.asm	/^ffff80000010017b:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100182	kernel.asm	/^ffff800000100182:	80 ff ff $/;"	l
ffff800000100185	kernel.asm	/^ffff800000100185:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff80000010018c	kernel.asm	/^ffff80000010018c:	80 ff ff $/;"	l
ffff80000010018f	kernel.asm	/^ffff80000010018f:	48 89 88 a0 51 00 00 	mov    %rcx,0x51a0(%rax)$/;"	l
ffff800000100196	kernel.asm	/^ffff800000100196:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010019d	kernel.asm	/^ffff80000010019d:	80 ff ff $/;"	l
ffff8000001001a0	kernel.asm	/^ffff8000001001a0:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff8000001001a7	kernel.asm	/^ffff8000001001a7:	80 ff ff $/;"	l
ffff8000001001aa	kernel.asm	/^ffff8000001001aa:	48 89 88 a8 51 00 00 	mov    %rcx,0x51a8(%rax)$/;"	l
ffff8000001001b1	kernel.asm	/^ffff8000001001b1:	48 b8 68 10 11 00 00 	movabs $0xffff800000111068,%rax$/;"	l
ffff8000001001b8	kernel.asm	/^ffff8000001001b8:	80 ff ff $/;"	l
ffff8000001001bb	kernel.asm	/^ffff8000001001bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001001bf	kernel.asm	/^ffff8000001001bf:	e9 8b 00 00 00       	jmpq   ffff80000010024f <binit+0xfc>$/;"	l
ffff8000001001c4	kernel.asm	/^ffff8000001001c4:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001001cb	kernel.asm	/^ffff8000001001cb:	80 ff ff $/;"	l
ffff8000001001ce	kernel.asm	/^ffff8000001001ce:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff8000001001d5	kernel.asm	/^ffff8000001001d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001d9	kernel.asm	/^ffff8000001001d9:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff8000001001e0	kernel.asm	/^ffff8000001001e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001e4	kernel.asm	/^ffff8000001001e4:	48 be 08 61 11 00 00 	movabs $0xffff800000116108,%rsi$/;"	l
ffff8000001001eb	kernel.asm	/^ffff8000001001eb:	80 ff ff $/;"	l
ffff8000001001ee	kernel.asm	/^ffff8000001001ee:	48 89 b0 98 00 00 00 	mov    %rsi,0x98(%rax)$/;"	l
ffff8000001001f5	kernel.asm	/^ffff8000001001f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001001f9	kernel.asm	/^ffff8000001001f9:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001001fd	kernel.asm	/^ffff8000001001fd:	48 be 4f cc 10 00 00 	movabs $0xffff80000010cc4f,%rsi$/;"	l
ffff800000100204	kernel.asm	/^ffff800000100204:	80 ff ff $/;"	l
ffff800000100207	kernel.asm	/^ffff800000100207:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010020a	kernel.asm	/^ffff80000010020a:	48 b8 c4 72 10 00 00 	movabs $0xffff8000001072c4,%rax$/;"	l
ffff800000100211	kernel.asm	/^ffff800000100211:	80 ff ff $/;"	l
ffff800000100214	kernel.asm	/^ffff800000100214:	ff d0                	callq  *%rax$/;"	l
ffff800000100216	kernel.asm	/^ffff800000100216:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010021d	kernel.asm	/^ffff80000010021d:	80 ff ff $/;"	l
ffff800000100220	kernel.asm	/^ffff800000100220:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff800000100227	kernel.asm	/^ffff800000100227:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010022b	kernel.asm	/^ffff80000010022b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff800000100232	kernel.asm	/^ffff800000100232:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100239	kernel.asm	/^ffff800000100239:	80 ff ff $/;"	l
ffff80000010023c	kernel.asm	/^ffff80000010023c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100240	kernel.asm	/^ffff800000100240:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff800000100247	kernel.asm	/^ffff800000100247:	48 81 45 f8 b0 02 00 	addq   $0x2b0,-0x8(%rbp)$/;"	l
ffff80000010024e	kernel.asm	/^ffff80000010024e:	00 $/;"	l
ffff80000010024f	kernel.asm	/^ffff80000010024f:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff800000100256	kernel.asm	/^ffff800000100256:	80 ff ff $/;"	l
ffff800000100259	kernel.asm	/^ffff800000100259:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff80000010025d	kernel.asm	/^ffff80000010025d:	0f 82 61 ff ff ff    	jb     ffff8000001001c4 <binit+0x71>$/;"	l
ffff800000100263	kernel.asm	/^ffff800000100263:	90                   	nop$/;"	l
ffff800000100264	kernel.asm	/^ffff800000100264:	c9                   	leaveq $/;"	l
ffff800000100265	kernel.asm	/^ffff800000100265:	c3                   	retq   $/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266 <bget>:$/;"	l
ffff800000100266	kernel.asm	/^ffff800000100266:	55                   	push   %rbp$/;"	l
ffff800000100267	kernel.asm	/^ffff800000100267:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010026a	kernel.asm	/^ffff80000010026a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010026e	kernel.asm	/^ffff80000010026e:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100271	kernel.asm	/^ffff800000100271:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100274	kernel.asm	/^ffff800000100274:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff80000010027b	kernel.asm	/^ffff80000010027b:	80 ff ff $/;"	l
ffff80000010027e	kernel.asm	/^ffff80000010027e:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000100285	kernel.asm	/^ffff800000100285:	80 ff ff $/;"	l
ffff800000100288	kernel.asm	/^ffff800000100288:	ff d0                	callq  *%rax$/;"	l
ffff80000010028a	kernel.asm	/^ffff80000010028a:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100291	kernel.asm	/^ffff800000100291:	80 ff ff $/;"	l
ffff800000100294	kernel.asm	/^ffff800000100294:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff80000010029b	kernel.asm	/^ffff80000010029b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010029f	kernel.asm	/^ffff80000010029f:	eb 74                	jmp    ffff800000100315 <bget+0xaf>$/;"	l
ffff8000001002a1	kernel.asm	/^ffff8000001002a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002a5	kernel.asm	/^ffff8000001002a5:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff8000001002a8	kernel.asm	/^ffff8000001002a8:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff8000001002ab	kernel.asm	/^ffff8000001002ab:	75 59                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002ad	kernel.asm	/^ffff8000001002ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002b1	kernel.asm	/^ffff8000001002b1:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff8000001002b4	kernel.asm	/^ffff8000001002b4:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff8000001002b7	kernel.asm	/^ffff8000001002b7:	75 4d                	jne    ffff800000100306 <bget+0xa0>$/;"	l
ffff8000001002b9	kernel.asm	/^ffff8000001002b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002bd	kernel.asm	/^ffff8000001002bd:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff8000001002c3	kernel.asm	/^ffff8000001002c3:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001002c6	kernel.asm	/^ffff8000001002c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ca	kernel.asm	/^ffff8000001002ca:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff8000001002d0	kernel.asm	/^ffff8000001002d0:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff8000001002d7	kernel.asm	/^ffff8000001002d7:	80 ff ff $/;"	l
ffff8000001002da	kernel.asm	/^ffff8000001002da:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001002e1	kernel.asm	/^ffff8000001002e1:	80 ff ff $/;"	l
ffff8000001002e4	kernel.asm	/^ffff8000001002e4:	ff d0                	callq  *%rax$/;"	l
ffff8000001002e6	kernel.asm	/^ffff8000001002e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001002ea	kernel.asm	/^ffff8000001002ea:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001002ee	kernel.asm	/^ffff8000001002ee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001002f1	kernel.asm	/^ffff8000001002f1:	48 b8 19 73 10 00 00 	movabs $0xffff800000107319,%rax$/;"	l
ffff8000001002f8	kernel.asm	/^ffff8000001002f8:	80 ff ff $/;"	l
ffff8000001002fb	kernel.asm	/^ffff8000001002fb:	ff d0                	callq  *%rax$/;"	l
ffff8000001002fd	kernel.asm	/^ffff8000001002fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100301	kernel.asm	/^ffff800000100301:	e9 f0 00 00 00       	jmpq   ffff8000001003f6 <bget+0x190>$/;"	l
ffff800000100306	kernel.asm	/^ffff800000100306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010030a	kernel.asm	/^ffff80000010030a:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100311	kernel.asm	/^ffff800000100311:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100315	kernel.asm	/^ffff800000100315:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff80000010031c	kernel.asm	/^ffff80000010031c:	80 ff ff $/;"	l
ffff80000010031f	kernel.asm	/^ffff80000010031f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000100323	kernel.asm	/^ffff800000100323:	0f 85 78 ff ff ff    	jne    ffff8000001002a1 <bget+0x3b>$/;"	l
ffff800000100329	kernel.asm	/^ffff800000100329:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff800000100330	kernel.asm	/^ffff800000100330:	80 ff ff $/;"	l
ffff800000100333	kernel.asm	/^ffff800000100333:	48 8b 80 a0 51 00 00 	mov    0x51a0(%rax),%rax$/;"	l
ffff80000010033a	kernel.asm	/^ffff80000010033a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010033e	kernel.asm	/^ffff80000010033e:	e9 89 00 00 00       	jmpq   ffff8000001003cc <bget+0x166>$/;"	l
ffff800000100343	kernel.asm	/^ffff800000100343:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100347	kernel.asm	/^ffff800000100347:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010034d	kernel.asm	/^ffff80000010034d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010034f	kernel.asm	/^ffff80000010034f:	75 6c                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff800000100351	kernel.asm	/^ffff800000100351:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100355	kernel.asm	/^ffff800000100355:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100357	kernel.asm	/^ffff800000100357:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010035a	kernel.asm	/^ffff80000010035a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010035c	kernel.asm	/^ffff80000010035c:	75 5f                	jne    ffff8000001003bd <bget+0x157>$/;"	l
ffff80000010035e	kernel.asm	/^ffff80000010035e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100362	kernel.asm	/^ffff800000100362:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100365	kernel.asm	/^ffff800000100365:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000100368	kernel.asm	/^ffff800000100368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010036c	kernel.asm	/^ffff80000010036c:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff80000010036f	kernel.asm	/^ffff80000010036f:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000100372	kernel.asm	/^ffff800000100372:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100376	kernel.asm	/^ffff800000100376:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff80000010037c	kernel.asm	/^ffff80000010037c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100380	kernel.asm	/^ffff800000100380:	c7 80 90 00 00 00 01 	movl   $0x1,0x90(%rax)$/;"	l
ffff800000100387	kernel.asm	/^ffff800000100387:	00 00 00 $/;"	l
ffff80000010038a	kernel.asm	/^ffff80000010038a:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff800000100391	kernel.asm	/^ffff800000100391:	80 ff ff $/;"	l
ffff800000100394	kernel.asm	/^ffff800000100394:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010039b	kernel.asm	/^ffff80000010039b:	80 ff ff $/;"	l
ffff80000010039e	kernel.asm	/^ffff80000010039e:	ff d0                	callq  *%rax$/;"	l
ffff8000001003a0	kernel.asm	/^ffff8000001003a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003a4	kernel.asm	/^ffff8000001003a4:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001003a8	kernel.asm	/^ffff8000001003a8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001003ab	kernel.asm	/^ffff8000001003ab:	48 b8 19 73 10 00 00 	movabs $0xffff800000107319,%rax$/;"	l
ffff8000001003b2	kernel.asm	/^ffff8000001003b2:	80 ff ff $/;"	l
ffff8000001003b5	kernel.asm	/^ffff8000001003b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001003b7	kernel.asm	/^ffff8000001003b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003bb	kernel.asm	/^ffff8000001003bb:	eb 39                	jmp    ffff8000001003f6 <bget+0x190>$/;"	l
ffff8000001003bd	kernel.asm	/^ffff8000001003bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001003c1	kernel.asm	/^ffff8000001003c1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff8000001003c8	kernel.asm	/^ffff8000001003c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001003cc	kernel.asm	/^ffff8000001003cc:	48 b8 08 61 11 00 00 	movabs $0xffff800000116108,%rax$/;"	l
ffff8000001003d3	kernel.asm	/^ffff8000001003d3:	80 ff ff $/;"	l
ffff8000001003d6	kernel.asm	/^ffff8000001003d6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff8000001003da	kernel.asm	/^ffff8000001003da:	0f 85 63 ff ff ff    	jne    ffff800000100343 <bget+0xdd>$/;"	l
ffff8000001003e0	kernel.asm	/^ffff8000001003e0:	48 bf 56 cc 10 00 00 	movabs $0xffff80000010cc56,%rdi$/;"	l
ffff8000001003e7	kernel.asm	/^ffff8000001003e7:	80 ff ff $/;"	l
ffff8000001003ea	kernel.asm	/^ffff8000001003ea:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001003f1	kernel.asm	/^ffff8000001003f1:	80 ff ff $/;"	l
ffff8000001003f4	kernel.asm	/^ffff8000001003f4:	ff d0                	callq  *%rax$/;"	l
ffff8000001003f6	kernel.asm	/^ffff8000001003f6:	c9                   	leaveq $/;"	l
ffff8000001003f7	kernel.asm	/^ffff8000001003f7:	c3                   	retq   $/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8 <bread>:$/;"	l
ffff8000001003f8	kernel.asm	/^ffff8000001003f8:	55                   	push   %rbp$/;"	l
ffff8000001003f9	kernel.asm	/^ffff8000001003f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001003fc	kernel.asm	/^ffff8000001003fc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100400	kernel.asm	/^ffff800000100400:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100403	kernel.asm	/^ffff800000100403:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100406	kernel.asm	/^ffff800000100406:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000100409	kernel.asm	/^ffff800000100409:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010040c	kernel.asm	/^ffff80000010040c:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010040e	kernel.asm	/^ffff80000010040e:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100410	kernel.asm	/^ffff800000100410:	48 b8 66 02 10 00 00 	movabs $0xffff800000100266,%rax$/;"	l
ffff800000100417	kernel.asm	/^ffff800000100417:	80 ff ff $/;"	l
ffff80000010041a	kernel.asm	/^ffff80000010041a:	ff d0                	callq  *%rax$/;"	l
ffff80000010041c	kernel.asm	/^ffff80000010041c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000100420	kernel.asm	/^ffff800000100420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100424	kernel.asm	/^ffff800000100424:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100426	kernel.asm	/^ffff800000100426:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000100429	kernel.asm	/^ffff800000100429:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010042b	kernel.asm	/^ffff80000010042b:	75 13                	jne    ffff800000100440 <bread+0x48>$/;"	l
ffff80000010042d	kernel.asm	/^ffff80000010042d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100431	kernel.asm	/^ffff800000100431:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100434	kernel.asm	/^ffff800000100434:	48 b8 5d 3e 10 00 00 	movabs $0xffff800000103e5d,%rax$/;"	l
ffff80000010043b	kernel.asm	/^ffff80000010043b:	80 ff ff $/;"	l
ffff80000010043e	kernel.asm	/^ffff80000010043e:	ff d0                	callq  *%rax$/;"	l
ffff800000100440	kernel.asm	/^ffff800000100440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100444	kernel.asm	/^ffff800000100444:	c9                   	leaveq $/;"	l
ffff800000100445	kernel.asm	/^ffff800000100445:	c3                   	retq   $/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446 <bwrite>:$/;"	l
ffff800000100446	kernel.asm	/^ffff800000100446:	55                   	push   %rbp$/;"	l
ffff800000100447	kernel.asm	/^ffff800000100447:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010044a	kernel.asm	/^ffff80000010044a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010044e	kernel.asm	/^ffff80000010044e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000100452	kernel.asm	/^ffff800000100452:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100456	kernel.asm	/^ffff800000100456:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010045a	kernel.asm	/^ffff80000010045a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010045d	kernel.asm	/^ffff80000010045d:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff800000100464	kernel.asm	/^ffff800000100464:	80 ff ff $/;"	l
ffff800000100467	kernel.asm	/^ffff800000100467:	ff d0                	callq  *%rax$/;"	l
ffff800000100469	kernel.asm	/^ffff800000100469:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010046b	kernel.asm	/^ffff80000010046b:	75 16                	jne    ffff800000100483 <bwrite+0x3d>$/;"	l
ffff80000010046d	kernel.asm	/^ffff80000010046d:	48 bf 67 cc 10 00 00 	movabs $0xffff80000010cc67,%rdi$/;"	l
ffff800000100474	kernel.asm	/^ffff800000100474:	80 ff ff $/;"	l
ffff800000100477	kernel.asm	/^ffff800000100477:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010047e	kernel.asm	/^ffff80000010047e:	80 ff ff $/;"	l
ffff800000100481	kernel.asm	/^ffff800000100481:	ff d0                	callq  *%rax$/;"	l
ffff800000100483	kernel.asm	/^ffff800000100483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100487	kernel.asm	/^ffff800000100487:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100489	kernel.asm	/^ffff800000100489:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff80000010048c	kernel.asm	/^ffff80000010048c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010048e	kernel.asm	/^ffff80000010048e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100492	kernel.asm	/^ffff800000100492:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000100494	kernel.asm	/^ffff800000100494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100498	kernel.asm	/^ffff800000100498:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010049b	kernel.asm	/^ffff80000010049b:	48 b8 5d 3e 10 00 00 	movabs $0xffff800000103e5d,%rax$/;"	l
ffff8000001004a2	kernel.asm	/^ffff8000001004a2:	80 ff ff $/;"	l
ffff8000001004a5	kernel.asm	/^ffff8000001004a5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004a7	kernel.asm	/^ffff8000001004a7:	90                   	nop$/;"	l
ffff8000001004a8	kernel.asm	/^ffff8000001004a8:	c9                   	leaveq $/;"	l
ffff8000001004a9	kernel.asm	/^ffff8000001004a9:	c3                   	retq   $/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa <brelse>:$/;"	l
ffff8000001004aa	kernel.asm	/^ffff8000001004aa:	55                   	push   %rbp$/;"	l
ffff8000001004ab	kernel.asm	/^ffff8000001004ab:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001004ae	kernel.asm	/^ffff8000001004ae:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001004b2	kernel.asm	/^ffff8000001004b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001004b6	kernel.asm	/^ffff8000001004b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004ba	kernel.asm	/^ffff8000001004ba:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004be	kernel.asm	/^ffff8000001004be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004c1	kernel.asm	/^ffff8000001004c1:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff8000001004c8	kernel.asm	/^ffff8000001004c8:	80 ff ff $/;"	l
ffff8000001004cb	kernel.asm	/^ffff8000001004cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001004cd	kernel.asm	/^ffff8000001004cd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001004cf	kernel.asm	/^ffff8000001004cf:	75 16                	jne    ffff8000001004e7 <brelse+0x3d>$/;"	l
ffff8000001004d1	kernel.asm	/^ffff8000001004d1:	48 bf 6e cc 10 00 00 	movabs $0xffff80000010cc6e,%rdi$/;"	l
ffff8000001004d8	kernel.asm	/^ffff8000001004d8:	80 ff ff $/;"	l
ffff8000001004db	kernel.asm	/^ffff8000001004db:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001004e2	kernel.asm	/^ffff8000001004e2:	80 ff ff $/;"	l
ffff8000001004e5	kernel.asm	/^ffff8000001004e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001004e7	kernel.asm	/^ffff8000001004e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001004eb	kernel.asm	/^ffff8000001004eb:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff8000001004ef	kernel.asm	/^ffff8000001004ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001004f2	kernel.asm	/^ffff8000001004f2:	48 b8 9f 73 10 00 00 	movabs $0xffff80000010739f,%rax$/;"	l
ffff8000001004f9	kernel.asm	/^ffff8000001004f9:	80 ff ff $/;"	l
ffff8000001004fc	kernel.asm	/^ffff8000001004fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001004fe	kernel.asm	/^ffff8000001004fe:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff800000100505	kernel.asm	/^ffff800000100505:	80 ff ff $/;"	l
ffff800000100508	kernel.asm	/^ffff800000100508:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff80000010050f	kernel.asm	/^ffff80000010050f:	80 ff ff $/;"	l
ffff800000100512	kernel.asm	/^ffff800000100512:	ff d0                	callq  *%rax$/;"	l
ffff800000100514	kernel.asm	/^ffff800000100514:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100518	kernel.asm	/^ffff800000100518:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff80000010051e	kernel.asm	/^ffff80000010051e:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100521	kernel.asm	/^ffff800000100521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100525	kernel.asm	/^ffff800000100525:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff80000010052b	kernel.asm	/^ffff80000010052b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010052f	kernel.asm	/^ffff80000010052f:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000100535	kernel.asm	/^ffff800000100535:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100537	kernel.asm	/^ffff800000100537:	0f 85 9c 00 00 00    	jne    ffff8000001005d9 <brelse+0x12f>$/;"	l
ffff80000010053d	kernel.asm	/^ffff80000010053d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100541	kernel.asm	/^ffff800000100541:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax$/;"	l
ffff800000100548	kernel.asm	/^ffff800000100548:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010054c	kernel.asm	/^ffff80000010054c:	48 8b 92 98 00 00 00 	mov    0x98(%rdx),%rdx$/;"	l
ffff800000100553	kernel.asm	/^ffff800000100553:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff80000010055a	kernel.asm	/^ffff80000010055a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010055e	kernel.asm	/^ffff80000010055e:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax$/;"	l
ffff800000100565	kernel.asm	/^ffff800000100565:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000100569	kernel.asm	/^ffff800000100569:	48 8b 92 a0 00 00 00 	mov    0xa0(%rdx),%rdx$/;"	l
ffff800000100570	kernel.asm	/^ffff800000100570:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100577	kernel.asm	/^ffff800000100577:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff80000010057e	kernel.asm	/^ffff80000010057e:	80 ff ff $/;"	l
ffff800000100581	kernel.asm	/^ffff800000100581:	48 8b 90 a8 51 00 00 	mov    0x51a8(%rax),%rdx$/;"	l
ffff800000100588	kernel.asm	/^ffff800000100588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010058c	kernel.asm	/^ffff80000010058c:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000100593	kernel.asm	/^ffff800000100593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000100597	kernel.asm	/^ffff800000100597:	48 b9 08 61 11 00 00 	movabs $0xffff800000116108,%rcx$/;"	l
ffff80000010059e	kernel.asm	/^ffff80000010059e:	80 ff ff $/;"	l
ffff8000001005a1	kernel.asm	/^ffff8000001005a1:	48 89 88 98 00 00 00 	mov    %rcx,0x98(%rax)$/;"	l
ffff8000001005a8	kernel.asm	/^ffff8000001005a8:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001005af	kernel.asm	/^ffff8000001005af:	80 ff ff $/;"	l
ffff8000001005b2	kernel.asm	/^ffff8000001005b2:	48 8b 80 a8 51 00 00 	mov    0x51a8(%rax),%rax$/;"	l
ffff8000001005b9	kernel.asm	/^ffff8000001005b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005bd	kernel.asm	/^ffff8000001005bd:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)$/;"	l
ffff8000001005c4	kernel.asm	/^ffff8000001005c4:	48 b8 00 10 11 00 00 	movabs $0xffff800000111000,%rax$/;"	l
ffff8000001005cb	kernel.asm	/^ffff8000001005cb:	80 ff ff $/;"	l
ffff8000001005ce	kernel.asm	/^ffff8000001005ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001005d2	kernel.asm	/^ffff8000001005d2:	48 89 90 a8 51 00 00 	mov    %rdx,0x51a8(%rax)$/;"	l
ffff8000001005d9	kernel.asm	/^ffff8000001005d9:	48 bf 00 10 11 00 00 	movabs $0xffff800000111000,%rdi$/;"	l
ffff8000001005e0	kernel.asm	/^ffff8000001005e0:	80 ff ff $/;"	l
ffff8000001005e3	kernel.asm	/^ffff8000001005e3:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001005ea	kernel.asm	/^ffff8000001005ea:	80 ff ff $/;"	l
ffff8000001005ed	kernel.asm	/^ffff8000001005ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001005ef	kernel.asm	/^ffff8000001005ef:	90                   	nop$/;"	l
ffff8000001005f0	kernel.asm	/^ffff8000001005f0:	c9                   	leaveq $/;"	l
ffff8000001005f1	kernel.asm	/^ffff8000001005f1:	c3                   	retq   $/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2 <inb>:$/;"	l
ffff8000001005f2	kernel.asm	/^ffff8000001005f2:	55                   	push   %rbp$/;"	l
ffff8000001005f3	kernel.asm	/^ffff8000001005f3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001005f6	kernel.asm	/^ffff8000001005f6:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001005fa	kernel.asm	/^ffff8000001005fa:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001005fc	kernel.asm	/^ffff8000001005fc:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000100600	kernel.asm	/^ffff800000100600:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000100604	kernel.asm	/^ffff800000100604:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100606	kernel.asm	/^ffff800000100606:	ec                   	in     (%dx),%al$/;"	l
ffff800000100607	kernel.asm	/^ffff800000100607:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010060a	kernel.asm	/^ffff80000010060a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010060e	kernel.asm	/^ffff80000010060e:	c9                   	leaveq $/;"	l
ffff80000010060f	kernel.asm	/^ffff80000010060f:	c3                   	retq   $/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610 <outb>:$/;"	l
ffff800000100610	kernel.asm	/^ffff800000100610:	55                   	push   %rbp$/;"	l
ffff800000100611	kernel.asm	/^ffff800000100611:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100614	kernel.asm	/^ffff800000100614:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000100618	kernel.asm	/^ffff800000100618:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010061a	kernel.asm	/^ffff80000010061a:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010061c	kernel.asm	/^ffff80000010061c:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000100620	kernel.asm	/^ffff800000100620:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000100623	kernel.asm	/^ffff800000100623:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000100627	kernel.asm	/^ffff800000100627:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff80000010062b	kernel.asm	/^ffff80000010062b:	ee                   	out    %al,(%dx)$/;"	l
ffff80000010062c	kernel.asm	/^ffff80000010062c:	90                   	nop$/;"	l
ffff80000010062d	kernel.asm	/^ffff80000010062d:	c9                   	leaveq $/;"	l
ffff80000010062e	kernel.asm	/^ffff80000010062e:	c3                   	retq   $/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f <lidt>:$/;"	l
ffff80000010062f	kernel.asm	/^ffff80000010062f:	55                   	push   %rbp$/;"	l
ffff800000100630	kernel.asm	/^ffff800000100630:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100633	kernel.asm	/^ffff800000100633:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100637	kernel.asm	/^ffff800000100637:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010063b	kernel.asm	/^ffff80000010063b:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010063e	kernel.asm	/^ffff80000010063e:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000100641	kernel.asm	/^ffff800000100641:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100644	kernel.asm	/^ffff800000100644:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff800000100648	kernel.asm	/^ffff800000100648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010064c	kernel.asm	/^ffff80000010064c:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff800000100650	kernel.asm	/^ffff800000100650:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100654	kernel.asm	/^ffff800000100654:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff800000100658	kernel.asm	/^ffff800000100658:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010065c	kernel.asm	/^ffff80000010065c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000100660	kernel.asm	/^ffff800000100660:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff800000100664	kernel.asm	/^ffff800000100664:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff800000100668	kernel.asm	/^ffff800000100668:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010066c	kernel.asm	/^ffff80000010066c:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff800000100670	kernel.asm	/^ffff800000100670:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff800000100674	kernel.asm	/^ffff800000100674:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000100678	kernel.asm	/^ffff800000100678:	0f 01 18             	lidt   (%rax)$/;"	l
ffff80000010067b	kernel.asm	/^ffff80000010067b:	90                   	nop$/;"	l
ffff80000010067c	kernel.asm	/^ffff80000010067c:	c9                   	leaveq $/;"	l
ffff80000010067d	kernel.asm	/^ffff80000010067d:	c3                   	retq   $/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e <cli>:$/;"	l
ffff80000010067e	kernel.asm	/^ffff80000010067e:	55                   	push   %rbp$/;"	l
ffff80000010067f	kernel.asm	/^ffff80000010067f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100682	kernel.asm	/^ffff800000100682:	fa                   	cli    $/;"	l
ffff800000100683	kernel.asm	/^ffff800000100683:	90                   	nop$/;"	l
ffff800000100684	kernel.asm	/^ffff800000100684:	5d                   	pop    %rbp$/;"	l
ffff800000100685	kernel.asm	/^ffff800000100685:	c3                   	retq   $/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686 <printptr>:$/;"	l
ffff800000100686	kernel.asm	/^ffff800000100686:	55                   	push   %rbp$/;"	l
ffff800000100687	kernel.asm	/^ffff800000100687:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010068a	kernel.asm	/^ffff80000010068a:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010068e	kernel.asm	/^ffff80000010068e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100692	kernel.asm	/^ffff800000100692:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100699	kernel.asm	/^ffff800000100699:	eb 38                	jmp    ffff8000001006d3 <printptr+0x4d>$/;"	l
ffff80000010069b	kernel.asm	/^ffff80000010069b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010069f	kernel.asm	/^ffff80000010069f:	48 c1 e8 3c          	shr    $0x3c,%rax$/;"	l
ffff8000001006a3	kernel.asm	/^ffff8000001006a3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001006a6	kernel.asm	/^ffff8000001006a6:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff8000001006ad	kernel.asm	/^ffff8000001006ad:	80 ff ff $/;"	l
ffff8000001006b0	kernel.asm	/^ffff8000001006b0:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax$/;"	l
ffff8000001006b4	kernel.asm	/^ffff8000001006b4:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001006b7	kernel.asm	/^ffff8000001006b7:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff8000001006bc	kernel.asm	/^ffff8000001006bc:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001006be	kernel.asm	/^ffff8000001006be:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff8000001006c5	kernel.asm	/^ffff8000001006c5:	80 ff ff $/;"	l
ffff8000001006c8	kernel.asm	/^ffff8000001006c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001006ca	kernel.asm	/^ffff8000001006ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001006ce	kernel.asm	/^ffff8000001006ce:	48 c1 65 e8 04       	shlq   $0x4,-0x18(%rbp)$/;"	l
ffff8000001006d3	kernel.asm	/^ffff8000001006d3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001006d6	kernel.asm	/^ffff8000001006d6:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff8000001006d9	kernel.asm	/^ffff8000001006d9:	76 c0                	jbe    ffff80000010069b <printptr+0x15>$/;"	l
ffff8000001006db	kernel.asm	/^ffff8000001006db:	90                   	nop$/;"	l
ffff8000001006dc	kernel.asm	/^ffff8000001006dc:	c9                   	leaveq $/;"	l
ffff8000001006dd	kernel.asm	/^ffff8000001006dd:	c3                   	retq   $/;"	l
ffff8000001006de	kernel.asm	/^ffff8000001006de <printint>:$/;"	l
ffff8000001006de	kernel.asm	/^ffff8000001006de:	55                   	push   %rbp$/;"	l
ffff8000001006df	kernel.asm	/^ffff8000001006df:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001006e2	kernel.asm	/^ffff8000001006e2:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001006e6	kernel.asm	/^ffff8000001006e6:	89 7d cc             	mov    %edi,-0x34(%rbp)$/;"	l
ffff8000001006e9	kernel.asm	/^ffff8000001006e9:	89 75 c8             	mov    %esi,-0x38(%rbp)$/;"	l
ffff8000001006ec	kernel.asm	/^ffff8000001006ec:	89 55 c4             	mov    %edx,-0x3c(%rbp)$/;"	l
ffff8000001006ef	kernel.asm	/^ffff8000001006ef:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff8000001006f3	kernel.asm	/^ffff8000001006f3:	74 1f                	je     ffff800000100714 <printint+0x36>$/;"	l
ffff8000001006f5	kernel.asm	/^ffff8000001006f5:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001006f8	kernel.asm	/^ffff8000001006f8:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
ffff8000001006fb	kernel.asm	/^ffff8000001006fb:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001006fe	kernel.asm	/^ffff8000001006fe:	89 45 c4             	mov    %eax,-0x3c(%rbp)$/;"	l
ffff800000100701	kernel.asm	/^ffff800000100701:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100705	kernel.asm	/^ffff800000100705:	74 0d                	je     ffff800000100714 <printint+0x36>$/;"	l
ffff800000100707	kernel.asm	/^ffff800000100707:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff80000010070a	kernel.asm	/^ffff80000010070a:	f7 d8                	neg    %eax$/;"	l
ffff80000010070c	kernel.asm	/^ffff80000010070c:	48 98                	cltq   $/;"	l
ffff80000010070e	kernel.asm	/^ffff80000010070e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000100712	kernel.asm	/^ffff800000100712:	eb 09                	jmp    ffff80000010071d <printint+0x3f>$/;"	l
ffff800000100714	kernel.asm	/^ffff800000100714:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000100717	kernel.asm	/^ffff800000100717:	48 98                	cltq   $/;"	l
ffff800000100719	kernel.asm	/^ffff800000100719:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010071d	kernel.asm	/^ffff80000010071d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100724	kernel.asm	/^ffff800000100724:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100727	kernel.asm	/^ffff800000100727:	8d 41 01             	lea    0x1(%rcx),%eax$/;"	l
ffff80000010072a	kernel.asm	/^ffff80000010072a:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010072d	kernel.asm	/^ffff80000010072d:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000100730	kernel.asm	/^ffff800000100730:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff800000100733	kernel.asm	/^ffff800000100733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000100737	kernel.asm	/^ffff800000100737:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010073c	kernel.asm	/^ffff80000010073c:	48 f7 f6             	div    %rsi$/;"	l
ffff80000010073f	kernel.asm	/^ffff80000010073f:	48 b8 00 e0 10 00 00 	movabs $0xffff80000010e000,%rax$/;"	l
ffff800000100746	kernel.asm	/^ffff800000100746:	80 ff ff $/;"	l
ffff800000100749	kernel.asm	/^ffff800000100749:	0f b6 14 10          	movzbl (%rax,%rdx,1),%edx$/;"	l
ffff80000010074d	kernel.asm	/^ffff80000010074d:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000100750	kernel.asm	/^ffff800000100750:	88 54 05 d0          	mov    %dl,-0x30(%rbp,%rax,1)$/;"	l
ffff800000100754	kernel.asm	/^ffff800000100754:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000100757	kernel.asm	/^ffff800000100757:	48 63 f8             	movslq %eax,%rdi$/;"	l
ffff80000010075a	kernel.asm	/^ffff80000010075a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010075e	kernel.asm	/^ffff80000010075e:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000100763	kernel.asm	/^ffff800000100763:	48 f7 f7             	div    %rdi$/;"	l
ffff800000100766	kernel.asm	/^ffff800000100766:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010076a	kernel.asm	/^ffff80000010076a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010076f	kernel.asm	/^ffff80000010076f:	75 b3                	jne    ffff800000100724 <printint+0x46>$/;"	l
ffff800000100771	kernel.asm	/^ffff800000100771:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)$/;"	l
ffff800000100775	kernel.asm	/^ffff800000100775:	74 32                	je     ffff8000001007a9 <printint+0xcb>$/;"	l
ffff800000100777	kernel.asm	/^ffff800000100777:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010077a	kernel.asm	/^ffff80000010077a:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff80000010077d	kernel.asm	/^ffff80000010077d:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff800000100780	kernel.asm	/^ffff800000100780:	48 98                	cltq   $/;"	l
ffff800000100782	kernel.asm	/^ffff800000100782:	c6 44 05 d0 2d       	movb   $0x2d,-0x30(%rbp,%rax,1)$/;"	l
ffff800000100787	kernel.asm	/^ffff800000100787:	eb 20                	jmp    ffff8000001007a9 <printint+0xcb>$/;"	l
ffff800000100789	kernel.asm	/^ffff800000100789:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010078c	kernel.asm	/^ffff80000010078c:	48 98                	cltq   $/;"	l
ffff80000010078e	kernel.asm	/^ffff80000010078e:	0f b6 44 05 d0       	movzbl -0x30(%rbp,%rax,1),%eax$/;"	l
ffff800000100793	kernel.asm	/^ffff800000100793:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100796	kernel.asm	/^ffff800000100796:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010079b	kernel.asm	/^ffff80000010079b:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010079d	kernel.asm	/^ffff80000010079d:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff8000001007a4	kernel.asm	/^ffff8000001007a4:	80 ff ff $/;"	l
ffff8000001007a7	kernel.asm	/^ffff8000001007a7:	ff d0                	callq  *%rax$/;"	l
ffff8000001007a9	kernel.asm	/^ffff8000001007a9:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001007ad	kernel.asm	/^ffff8000001007ad:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001007b1	kernel.asm	/^ffff8000001007b1:	79 d6                	jns    ffff800000100789 <printint+0xab>$/;"	l
ffff8000001007b3	kernel.asm	/^ffff8000001007b3:	90                   	nop$/;"	l
ffff8000001007b4	kernel.asm	/^ffff8000001007b4:	c9                   	leaveq $/;"	l
ffff8000001007b5	kernel.asm	/^ffff8000001007b5:	c3                   	retq   $/;"	l
ffff8000001007b6	kernel.asm	/^ffff8000001007b6 <cprintf>:$/;"	l
ffff8000001007b6	kernel.asm	/^ffff8000001007b6:	55                   	push   %rbp$/;"	l
ffff8000001007b7	kernel.asm	/^ffff8000001007b7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001007ba	kernel.asm	/^ffff8000001007ba:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp$/;"	l
ffff8000001007c1	kernel.asm	/^ffff8000001007c1:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)$/;"	l
ffff8000001007c8	kernel.asm	/^ffff8000001007c8:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)$/;"	l
ffff8000001007cf	kernel.asm	/^ffff8000001007cf:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)$/;"	l
ffff8000001007d6	kernel.asm	/^ffff8000001007d6:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)$/;"	l
ffff8000001007dd	kernel.asm	/^ffff8000001007dd:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)$/;"	l
ffff8000001007e4	kernel.asm	/^ffff8000001007e4:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)$/;"	l
ffff8000001007eb	kernel.asm	/^ffff8000001007eb:	84 c0                	test   %al,%al$/;"	l
ffff8000001007ed	kernel.asm	/^ffff8000001007ed:	74 20                	je     ffff80000010080f <cprintf+0x59>$/;"	l
ffff8000001007ef	kernel.asm	/^ffff8000001007ef:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)$/;"	l
ffff8000001007f3	kernel.asm	/^ffff8000001007f3:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)$/;"	l
ffff8000001007f7	kernel.asm	/^ffff8000001007f7:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)$/;"	l
ffff8000001007fb	kernel.asm	/^ffff8000001007fb:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)$/;"	l
ffff8000001007ff	kernel.asm	/^ffff8000001007ff:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)$/;"	l
ffff800000100803	kernel.asm	/^ffff800000100803:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)$/;"	l
ffff800000100807	kernel.asm	/^ffff800000100807:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)$/;"	l
ffff80000010080b	kernel.asm	/^ffff80000010080b:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)$/;"	l
ffff80000010080f	kernel.asm	/^ffff80000010080f:	c7 85 20 ff ff ff 08 	movl   $0x8,-0xe0(%rbp)$/;"	l
ffff800000100816	kernel.asm	/^ffff800000100816:	00 00 00 $/;"	l
ffff800000100819	kernel.asm	/^ffff800000100819:	c7 85 24 ff ff ff 30 	movl   $0x30,-0xdc(%rbp)$/;"	l
ffff800000100820	kernel.asm	/^ffff800000100820:	00 00 00 $/;"	l
ffff800000100823	kernel.asm	/^ffff800000100823:	48 8d 45 10          	lea    0x10(%rbp),%rax$/;"	l
ffff800000100827	kernel.asm	/^ffff800000100827:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)$/;"	l
ffff80000010082e	kernel.asm	/^ffff80000010082e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax$/;"	l
ffff800000100835	kernel.asm	/^ffff800000100835:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)$/;"	l
ffff80000010083c	kernel.asm	/^ffff80000010083c:	48 b8 e0 64 11 00 00 	movabs $0xffff8000001164e0,%rax$/;"	l
ffff800000100843	kernel.asm	/^ffff800000100843:	80 ff ff $/;"	l
ffff800000100846	kernel.asm	/^ffff800000100846:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000100849	kernel.asm	/^ffff800000100849:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)$/;"	l
ffff80000010084f	kernel.asm	/^ffff80000010084f:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff800000100856	kernel.asm	/^ffff800000100856:	74 16                	je     ffff80000010086e <cprintf+0xb8>$/;"	l
ffff800000100858	kernel.asm	/^ffff800000100858:	48 bf e0 64 11 00 00 	movabs $0xffff8000001164e0,%rdi$/;"	l
ffff80000010085f	kernel.asm	/^ffff80000010085f:	80 ff ff $/;"	l
ffff800000100862	kernel.asm	/^ffff800000100862:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000100869	kernel.asm	/^ffff800000100869:	80 ff ff $/;"	l
ffff80000010086c	kernel.asm	/^ffff80000010086c:	ff d0                	callq  *%rax$/;"	l
ffff80000010086e	kernel.asm	/^ffff80000010086e:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)$/;"	l
ffff800000100875	kernel.asm	/^ffff800000100875:	00 $/;"	l
ffff800000100876	kernel.asm	/^ffff800000100876:	75 16                	jne    ffff80000010088e <cprintf+0xd8>$/;"	l
ffff800000100878	kernel.asm	/^ffff800000100878:	48 bf 75 cc 10 00 00 	movabs $0xffff80000010cc75,%rdi$/;"	l
ffff80000010087f	kernel.asm	/^ffff80000010087f:	80 ff ff $/;"	l
ffff800000100882	kernel.asm	/^ffff800000100882:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000100889	kernel.asm	/^ffff800000100889:	80 ff ff $/;"	l
ffff80000010088c	kernel.asm	/^ffff80000010088c:	ff d0                	callq  *%rax$/;"	l
ffff80000010088e	kernel.asm	/^ffff80000010088e:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)$/;"	l
ffff800000100895	kernel.asm	/^ffff800000100895:	00 00 00 $/;"	l
ffff800000100898	kernel.asm	/^ffff800000100898:	e9 9c 02 00 00       	jmpq   ffff800000100b39 <cprintf+0x383>$/;"	l
ffff80000010089d	kernel.asm	/^ffff80000010089d:	83 bd 38 ff ff ff 25 	cmpl   $0x25,-0xc8(%rbp)$/;"	l
ffff8000001008a4	kernel.asm	/^ffff8000001008a4:	74 1e                	je     ffff8000001008c4 <cprintf+0x10e>$/;"	l
ffff8000001008a6	kernel.asm	/^ffff8000001008a6:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff8000001008ac	kernel.asm	/^ffff8000001008ac:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff8000001008b1	kernel.asm	/^ffff8000001008b1:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001008b3	kernel.asm	/^ffff8000001008b3:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff8000001008ba	kernel.asm	/^ffff8000001008ba:	80 ff ff $/;"	l
ffff8000001008bd	kernel.asm	/^ffff8000001008bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001008bf	kernel.asm	/^ffff8000001008bf:	e9 6e 02 00 00       	jmpq   ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff8000001008c4	kernel.asm	/^ffff8000001008c4:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff8000001008cb	kernel.asm	/^ffff8000001008cb:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff8000001008d1	kernel.asm	/^ffff8000001008d1:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001008d4	kernel.asm	/^ffff8000001008d4:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff8000001008db	kernel.asm	/^ffff8000001008db:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001008de	kernel.asm	/^ffff8000001008de:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001008e1	kernel.asm	/^ffff8000001008e1:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001008e4	kernel.asm	/^ffff8000001008e4:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff8000001008e9	kernel.asm	/^ffff8000001008e9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff8000001008ef	kernel.asm	/^ffff8000001008ef:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff8000001008f6	kernel.asm	/^ffff8000001008f6:	0f 84 70 02 00 00    	je     ffff800000100b6c <cprintf+0x3b6>$/;"	l
ffff8000001008fc	kernel.asm	/^ffff8000001008fc:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff800000100902	kernel.asm	/^ffff800000100902:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff800000100905	kernel.asm	/^ffff800000100905:	0f 84 e9 00 00 00    	je     ffff8000001009f4 <cprintf+0x23e>$/;"	l
ffff80000010090b	kernel.asm	/^ffff80000010090b:	83 f8 70             	cmp    $0x70,%eax$/;"	l
ffff80000010090e	kernel.asm	/^ffff80000010090e:	7f 13                	jg     ffff800000100923 <cprintf+0x16d>$/;"	l
ffff800000100910	kernel.asm	/^ffff800000100910:	83 f8 25             	cmp    $0x25,%eax$/;"	l
ffff800000100913	kernel.asm	/^ffff800000100913:	0f 84 d1 01 00 00    	je     ffff800000100aea <cprintf+0x334>$/;"	l
ffff800000100919	kernel.asm	/^ffff800000100919:	83 f8 64             	cmp    $0x64,%eax$/;"	l
ffff80000010091c	kernel.asm	/^ffff80000010091c:	74 18                	je     ffff800000100936 <cprintf+0x180>$/;"	l
ffff80000010091e	kernel.asm	/^ffff80000010091e:	e9 df 01 00 00       	jmpq   ffff800000100b02 <cprintf+0x34c>$/;"	l
ffff800000100923	kernel.asm	/^ffff800000100923:	83 f8 73             	cmp    $0x73,%eax$/;"	l
ffff800000100926	kernel.asm	/^ffff800000100926:	0f 84 1f 01 00 00    	je     ffff800000100a4b <cprintf+0x295>$/;"	l
ffff80000010092c	kernel.asm	/^ffff80000010092c:	83 f8 78             	cmp    $0x78,%eax$/;"	l
ffff80000010092f	kernel.asm	/^ffff80000010092f:	74 64                	je     ffff800000100995 <cprintf+0x1df>$/;"	l
ffff800000100931	kernel.asm	/^ffff800000100931:	e9 cc 01 00 00       	jmpq   ffff800000100b02 <cprintf+0x34c>$/;"	l
ffff800000100936	kernel.asm	/^ffff800000100936:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010093c	kernel.asm	/^ffff80000010093c:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff80000010093f	kernel.asm	/^ffff80000010093f:	73 23                	jae    ffff800000100964 <cprintf+0x1ae>$/;"	l
ffff800000100941	kernel.asm	/^ffff800000100941:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100948	kernel.asm	/^ffff800000100948:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff80000010094e	kernel.asm	/^ffff80000010094e:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100950	kernel.asm	/^ffff800000100950:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100953	kernel.asm	/^ffff800000100953:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100959	kernel.asm	/^ffff800000100959:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff80000010095c	kernel.asm	/^ffff80000010095c:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100962	kernel.asm	/^ffff800000100962:	eb 12                	jmp    ffff800000100976 <cprintf+0x1c0>$/;"	l
ffff800000100964	kernel.asm	/^ffff800000100964:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff80000010096b	kernel.asm	/^ffff80000010096b:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff80000010096f	kernel.asm	/^ffff80000010096f:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100976	kernel.asm	/^ffff800000100976:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100978	kernel.asm	/^ffff800000100978:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010097d	kernel.asm	/^ffff80000010097d:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff800000100982	kernel.asm	/^ffff800000100982:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100984	kernel.asm	/^ffff800000100984:	48 b8 de 06 10 00 00 	movabs $0xffff8000001006de,%rax$/;"	l
ffff80000010098b	kernel.asm	/^ffff80000010098b:	80 ff ff $/;"	l
ffff80000010098e	kernel.asm	/^ffff80000010098e:	ff d0                	callq  *%rax$/;"	l
ffff800000100990	kernel.asm	/^ffff800000100990:	e9 9d 01 00 00       	jmpq   ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff800000100995	kernel.asm	/^ffff800000100995:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff80000010099b	kernel.asm	/^ffff80000010099b:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff80000010099e	kernel.asm	/^ffff80000010099e:	73 23                	jae    ffff8000001009c3 <cprintf+0x20d>$/;"	l
ffff8000001009a0	kernel.asm	/^ffff8000001009a0:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff8000001009a7	kernel.asm	/^ffff8000001009a7:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009ad	kernel.asm	/^ffff8000001009ad:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001009af	kernel.asm	/^ffff8000001009af:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001009b2	kernel.asm	/^ffff8000001009b2:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff8000001009b8	kernel.asm	/^ffff8000001009b8:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff8000001009bb	kernel.asm	/^ffff8000001009bb:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff8000001009c1	kernel.asm	/^ffff8000001009c1:	eb 12                	jmp    ffff8000001009d5 <cprintf+0x21f>$/;"	l
ffff8000001009c3	kernel.asm	/^ffff8000001009c3:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff8000001009ca	kernel.asm	/^ffff8000001009ca:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff8000001009ce	kernel.asm	/^ffff8000001009ce:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff8000001009d5	kernel.asm	/^ffff8000001009d5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001009d7	kernel.asm	/^ffff8000001009d7:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001009dc	kernel.asm	/^ffff8000001009dc:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff8000001009e1	kernel.asm	/^ffff8000001009e1:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001009e3	kernel.asm	/^ffff8000001009e3:	48 b8 de 06 10 00 00 	movabs $0xffff8000001006de,%rax$/;"	l
ffff8000001009ea	kernel.asm	/^ffff8000001009ea:	80 ff ff $/;"	l
ffff8000001009ed	kernel.asm	/^ffff8000001009ed:	ff d0                	callq  *%rax$/;"	l
ffff8000001009ef	kernel.asm	/^ffff8000001009ef:	e9 3e 01 00 00       	jmpq   ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff8000001009f4	kernel.asm	/^ffff8000001009f4:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff8000001009fa	kernel.asm	/^ffff8000001009fa:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff8000001009fd	kernel.asm	/^ffff8000001009fd:	73 23                	jae    ffff800000100a22 <cprintf+0x26c>$/;"	l
ffff8000001009ff	kernel.asm	/^ffff8000001009ff:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100a06	kernel.asm	/^ffff800000100a06:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a0c	kernel.asm	/^ffff800000100a0c:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100a0e	kernel.asm	/^ffff800000100a0e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a11	kernel.asm	/^ffff800000100a11:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a17	kernel.asm	/^ffff800000100a17:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a1a	kernel.asm	/^ffff800000100a1a:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a20	kernel.asm	/^ffff800000100a20:	eb 12                	jmp    ffff800000100a34 <cprintf+0x27e>$/;"	l
ffff800000100a22	kernel.asm	/^ffff800000100a22:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a29	kernel.asm	/^ffff800000100a29:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a2d	kernel.asm	/^ffff800000100a2d:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a34	kernel.asm	/^ffff800000100a34:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a37	kernel.asm	/^ffff800000100a37:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100a3a	kernel.asm	/^ffff800000100a3a:	48 b8 86 06 10 00 00 	movabs $0xffff800000100686,%rax$/;"	l
ffff800000100a41	kernel.asm	/^ffff800000100a41:	80 ff ff $/;"	l
ffff800000100a44	kernel.asm	/^ffff800000100a44:	ff d0                	callq  *%rax$/;"	l
ffff800000100a46	kernel.asm	/^ffff800000100a46:	e9 e7 00 00 00       	jmpq   ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff800000100a4b	kernel.asm	/^ffff800000100a4b:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax$/;"	l
ffff800000100a51	kernel.asm	/^ffff800000100a51:	83 f8 30             	cmp    $0x30,%eax$/;"	l
ffff800000100a54	kernel.asm	/^ffff800000100a54:	73 23                	jae    ffff800000100a79 <cprintf+0x2c3>$/;"	l
ffff800000100a56	kernel.asm	/^ffff800000100a56:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax$/;"	l
ffff800000100a5d	kernel.asm	/^ffff800000100a5d:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a63	kernel.asm	/^ffff800000100a63:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000100a65	kernel.asm	/^ffff800000100a65:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100a68	kernel.asm	/^ffff800000100a68:	8b 95 20 ff ff ff    	mov    -0xe0(%rbp),%edx$/;"	l
ffff800000100a6e	kernel.asm	/^ffff800000100a6e:	83 c2 08             	add    $0x8,%edx$/;"	l
ffff800000100a71	kernel.asm	/^ffff800000100a71:	89 95 20 ff ff ff    	mov    %edx,-0xe0(%rbp)$/;"	l
ffff800000100a77	kernel.asm	/^ffff800000100a77:	eb 12                	jmp    ffff800000100a8b <cprintf+0x2d5>$/;"	l
ffff800000100a79	kernel.asm	/^ffff800000100a79:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax$/;"	l
ffff800000100a80	kernel.asm	/^ffff800000100a80:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000100a84	kernel.asm	/^ffff800000100a84:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)$/;"	l
ffff800000100a8b	kernel.asm	/^ffff800000100a8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100a8e	kernel.asm	/^ffff800000100a8e:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100a95	kernel.asm	/^ffff800000100a95:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)$/;"	l
ffff800000100a9c	kernel.asm	/^ffff800000100a9c:	00 $/;"	l
ffff800000100a9d	kernel.asm	/^ffff800000100a9d:	75 3b                	jne    ffff800000100ada <cprintf+0x324>$/;"	l
ffff800000100a9f	kernel.asm	/^ffff800000100a9f:	48 b8 7e cc 10 00 00 	movabs $0xffff80000010cc7e,%rax$/;"	l
ffff800000100aa6	kernel.asm	/^ffff800000100aa6:	80 ff ff $/;"	l
ffff800000100aa9	kernel.asm	/^ffff800000100aa9:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)$/;"	l
ffff800000100ab0	kernel.asm	/^ffff800000100ab0:	eb 28                	jmp    ffff800000100ada <cprintf+0x324>$/;"	l
ffff800000100ab2	kernel.asm	/^ffff800000100ab2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100ab9	kernel.asm	/^ffff800000100ab9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100abc	kernel.asm	/^ffff800000100abc:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100abf	kernel.asm	/^ffff800000100abf:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000100ac4	kernel.asm	/^ffff800000100ac4:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ac6	kernel.asm	/^ffff800000100ac6:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000100acd	kernel.asm	/^ffff800000100acd:	80 ff ff $/;"	l
ffff800000100ad0	kernel.asm	/^ffff800000100ad0:	ff d0                	callq  *%rax$/;"	l
ffff800000100ad2	kernel.asm	/^ffff800000100ad2:	48 83 85 40 ff ff ff 	addq   $0x1,-0xc0(%rbp)$/;"	l
ffff800000100ad9	kernel.asm	/^ffff800000100ad9:	01 $/;"	l
ffff800000100ada	kernel.asm	/^ffff800000100ada:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax$/;"	l
ffff800000100ae1	kernel.asm	/^ffff800000100ae1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100ae4	kernel.asm	/^ffff800000100ae4:	84 c0                	test   %al,%al$/;"	l
ffff800000100ae6	kernel.asm	/^ffff800000100ae6:	75 ca                	jne    ffff800000100ab2 <cprintf+0x2fc>$/;"	l
ffff800000100ae8	kernel.asm	/^ffff800000100ae8:	eb 48                	jmp    ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff800000100aea	kernel.asm	/^ffff800000100aea:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000100aef	kernel.asm	/^ffff800000100aef:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100af4	kernel.asm	/^ffff800000100af4:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000100afb	kernel.asm	/^ffff800000100afb:	80 ff ff $/;"	l
ffff800000100afe	kernel.asm	/^ffff800000100afe:	ff d0                	callq  *%rax$/;"	l
ffff800000100b00	kernel.asm	/^ffff800000100b00:	eb 30                	jmp    ffff800000100b32 <cprintf+0x37c>$/;"	l
ffff800000100b02	kernel.asm	/^ffff800000100b02:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000100b07	kernel.asm	/^ffff800000100b07:	bf 25 00 00 00       	mov    $0x25,%edi$/;"	l
ffff800000100b0c	kernel.asm	/^ffff800000100b0c:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000100b13	kernel.asm	/^ffff800000100b13:	80 ff ff $/;"	l
ffff800000100b16	kernel.asm	/^ffff800000100b16:	ff d0                	callq  *%rax$/;"	l
ffff800000100b18	kernel.asm	/^ffff800000100b18:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax$/;"	l
ffff800000100b1e	kernel.asm	/^ffff800000100b1e:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000100b23	kernel.asm	/^ffff800000100b23:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100b25	kernel.asm	/^ffff800000100b25:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000100b2c	kernel.asm	/^ffff800000100b2c:	80 ff ff $/;"	l
ffff800000100b2f	kernel.asm	/^ffff800000100b2f:	ff d0                	callq  *%rax$/;"	l
ffff800000100b31	kernel.asm	/^ffff800000100b31:	90                   	nop$/;"	l
ffff800000100b32	kernel.asm	/^ffff800000100b32:	83 85 4c ff ff ff 01 	addl   $0x1,-0xb4(%rbp)$/;"	l
ffff800000100b39	kernel.asm	/^ffff800000100b39:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax$/;"	l
ffff800000100b3f	kernel.asm	/^ffff800000100b3f:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000100b42	kernel.asm	/^ffff800000100b42:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax$/;"	l
ffff800000100b49	kernel.asm	/^ffff800000100b49:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100b4c	kernel.asm	/^ffff800000100b4c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100b4f	kernel.asm	/^ffff800000100b4f:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000100b52	kernel.asm	/^ffff800000100b52:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000100b57	kernel.asm	/^ffff800000100b57:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)$/;"	l
ffff800000100b5d	kernel.asm	/^ffff800000100b5d:	83 bd 38 ff ff ff 00 	cmpl   $0x0,-0xc8(%rbp)$/;"	l
ffff800000100b64	kernel.asm	/^ffff800000100b64:	0f 85 33 fd ff ff    	jne    ffff80000010089d <cprintf+0xe7>$/;"	l
ffff800000100b6a	kernel.asm	/^ffff800000100b6a:	eb 01                	jmp    ffff800000100b6d <cprintf+0x3b7>$/;"	l
ffff800000100b6c	kernel.asm	/^ffff800000100b6c:	90                   	nop$/;"	l
ffff800000100b6d	kernel.asm	/^ffff800000100b6d:	83 bd 3c ff ff ff 00 	cmpl   $0x0,-0xc4(%rbp)$/;"	l
ffff800000100b74	kernel.asm	/^ffff800000100b74:	74 16                	je     ffff800000100b8c <cprintf+0x3d6>$/;"	l
ffff800000100b76	kernel.asm	/^ffff800000100b76:	48 bf e0 64 11 00 00 	movabs $0xffff8000001164e0,%rdi$/;"	l
ffff800000100b7d	kernel.asm	/^ffff800000100b7d:	80 ff ff $/;"	l
ffff800000100b80	kernel.asm	/^ffff800000100b80:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000100b87	kernel.asm	/^ffff800000100b87:	80 ff ff $/;"	l
ffff800000100b8a	kernel.asm	/^ffff800000100b8a:	ff d0                	callq  *%rax$/;"	l
ffff800000100b8c	kernel.asm	/^ffff800000100b8c:	90                   	nop$/;"	l
ffff800000100b8d	kernel.asm	/^ffff800000100b8d:	c9                   	leaveq $/;"	l
ffff800000100b8e	kernel.asm	/^ffff800000100b8e:	c3                   	retq   $/;"	l
ffff800000100b8f	kernel.asm	/^ffff800000100b8f <panic>:$/;"	l
ffff800000100b8f	kernel.asm	/^ffff800000100b8f:	55                   	push   %rbp$/;"	l
ffff800000100b90	kernel.asm	/^ffff800000100b90:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100b93	kernel.asm	/^ffff800000100b93:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff800000100b97	kernel.asm	/^ffff800000100b97:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)$/;"	l
ffff800000100b9b	kernel.asm	/^ffff800000100b9b:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100ba2	kernel.asm	/^ffff800000100ba2:	80 ff ff $/;"	l
ffff800000100ba5	kernel.asm	/^ffff800000100ba5:	ff d0                	callq  *%rax$/;"	l
ffff800000100ba7	kernel.asm	/^ffff800000100ba7:	48 b8 e0 64 11 00 00 	movabs $0xffff8000001164e0,%rax$/;"	l
ffff800000100bae	kernel.asm	/^ffff800000100bae:	80 ff ff $/;"	l
ffff800000100bb1	kernel.asm	/^ffff800000100bb1:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff800000100bb8	kernel.asm	/^ffff800000100bb8:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000100bbf	kernel.asm	/^ffff800000100bbf:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000100bc3	kernel.asm	/^ffff800000100bc3:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000100bc6	kernel.asm	/^ffff800000100bc6:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100bc9	kernel.asm	/^ffff800000100bc9:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100bcb	kernel.asm	/^ffff800000100bcb:	48 bf 85 cc 10 00 00 	movabs $0xffff80000010cc85,%rdi$/;"	l
ffff800000100bd2	kernel.asm	/^ffff800000100bd2:	80 ff ff $/;"	l
ffff800000100bd5	kernel.asm	/^ffff800000100bd5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bda	kernel.asm	/^ffff800000100bda:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000100be1	kernel.asm	/^ffff800000100be1:	80 ff ff $/;"	l
ffff800000100be4	kernel.asm	/^ffff800000100be4:	ff d2                	callq  *%rdx$/;"	l
ffff800000100be6	kernel.asm	/^ffff800000100be6:	48 8b 45 98          	mov    -0x68(%rbp),%rax$/;"	l
ffff800000100bea	kernel.asm	/^ffff800000100bea:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100bed	kernel.asm	/^ffff800000100bed:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100bf2	kernel.asm	/^ffff800000100bf2:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000100bf9	kernel.asm	/^ffff800000100bf9:	80 ff ff $/;"	l
ffff800000100bfc	kernel.asm	/^ffff800000100bfc:	ff d2                	callq  *%rdx$/;"	l
ffff800000100bfe	kernel.asm	/^ffff800000100bfe:	48 bf 94 cc 10 00 00 	movabs $0xffff80000010cc94,%rdi$/;"	l
ffff800000100c05	kernel.asm	/^ffff800000100c05:	80 ff ff $/;"	l
ffff800000100c08	kernel.asm	/^ffff800000100c08:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100c0d	kernel.asm	/^ffff800000100c0d:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000100c14	kernel.asm	/^ffff800000100c14:	80 ff ff $/;"	l
ffff800000100c17	kernel.asm	/^ffff800000100c17:	ff d2                	callq  *%rdx$/;"	l
ffff800000100c19	kernel.asm	/^ffff800000100c19:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx$/;"	l
ffff800000100c1d	kernel.asm	/^ffff800000100c1d:	48 8d 45 98          	lea    -0x68(%rbp),%rax$/;"	l
ffff800000100c21	kernel.asm	/^ffff800000100c21:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000100c24	kernel.asm	/^ffff800000100c24:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100c27	kernel.asm	/^ffff800000100c27:	48 b8 d6 75 10 00 00 	movabs $0xffff8000001075d6,%rax$/;"	l
ffff800000100c2e	kernel.asm	/^ffff800000100c2e:	80 ff ff $/;"	l
ffff800000100c31	kernel.asm	/^ffff800000100c31:	ff d0                	callq  *%rax$/;"	l
ffff800000100c33	kernel.asm	/^ffff800000100c33:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100c3a	kernel.asm	/^ffff800000100c3a:	eb 2c                	jmp    ffff800000100c68 <panic+0xd9>$/;"	l
ffff800000100c3c	kernel.asm	/^ffff800000100c3c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100c3f	kernel.asm	/^ffff800000100c3f:	48 98                	cltq   $/;"	l
ffff800000100c41	kernel.asm	/^ffff800000100c41:	48 8b 44 c5 a0       	mov    -0x60(%rbp,%rax,8),%rax$/;"	l
ffff800000100c46	kernel.asm	/^ffff800000100c46:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000100c49	kernel.asm	/^ffff800000100c49:	48 bf 96 cc 10 00 00 	movabs $0xffff80000010cc96,%rdi$/;"	l
ffff800000100c50	kernel.asm	/^ffff800000100c50:	80 ff ff $/;"	l
ffff800000100c53	kernel.asm	/^ffff800000100c53:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000100c58	kernel.asm	/^ffff800000100c58:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000100c5f	kernel.asm	/^ffff800000100c5f:	80 ff ff $/;"	l
ffff800000100c62	kernel.asm	/^ffff800000100c62:	ff d2                	callq  *%rdx$/;"	l
ffff800000100c64	kernel.asm	/^ffff800000100c64:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100c68	kernel.asm	/^ffff800000100c68:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000100c6c	kernel.asm	/^ffff800000100c6c:	7e ce                	jle    ffff800000100c3c <panic+0xad>$/;"	l
ffff800000100c6e	kernel.asm	/^ffff800000100c6e:	48 b8 d8 64 11 00 00 	movabs $0xffff8000001164d8,%rax$/;"	l
ffff800000100c75	kernel.asm	/^ffff800000100c75:	80 ff ff $/;"	l
ffff800000100c78	kernel.asm	/^ffff800000100c78:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000100c7e	kernel.asm	/^ffff800000100c7e:	eb fe                	jmp    ffff800000100c7e <panic+0xef>$/;"	l
ffff800000100c80	kernel.asm	/^ffff800000100c80 <cgaputc>:$/;"	l
ffff800000100c80	kernel.asm	/^ffff800000100c80:	55                   	push   %rbp$/;"	l
ffff800000100c81	kernel.asm	/^ffff800000100c81:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100c84	kernel.asm	/^ffff800000100c84:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100c88	kernel.asm	/^ffff800000100c88:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000100c8b	kernel.asm	/^ffff800000100c8b:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000100c8e	kernel.asm	/^ffff800000100c8e:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100c93	kernel.asm	/^ffff800000100c93:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100c98	kernel.asm	/^ffff800000100c98:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100c9f	kernel.asm	/^ffff800000100c9f:	80 ff ff $/;"	l
ffff800000100ca2	kernel.asm	/^ffff800000100ca2:	ff d0                	callq  *%rax$/;"	l
ffff800000100ca4	kernel.asm	/^ffff800000100ca4:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100ca9	kernel.asm	/^ffff800000100ca9:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100cb0	kernel.asm	/^ffff800000100cb0:	80 ff ff $/;"	l
ffff800000100cb3	kernel.asm	/^ffff800000100cb3:	ff d0                	callq  *%rax$/;"	l
ffff800000100cb5	kernel.asm	/^ffff800000100cb5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100cb8	kernel.asm	/^ffff800000100cb8:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000100cbb	kernel.asm	/^ffff800000100cbb:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000100cbe	kernel.asm	/^ffff800000100cbe:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100cc3	kernel.asm	/^ffff800000100cc3:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100cc8	kernel.asm	/^ffff800000100cc8:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100ccf	kernel.asm	/^ffff800000100ccf:	80 ff ff $/;"	l
ffff800000100cd2	kernel.asm	/^ffff800000100cd2:	ff d0                	callq  *%rax$/;"	l
ffff800000100cd4	kernel.asm	/^ffff800000100cd4:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100cd9	kernel.asm	/^ffff800000100cd9:	48 b8 f2 05 10 00 00 	movabs $0xffff8000001005f2,%rax$/;"	l
ffff800000100ce0	kernel.asm	/^ffff800000100ce0:	80 ff ff $/;"	l
ffff800000100ce3	kernel.asm	/^ffff800000100ce3:	ff d0                	callq  *%rax$/;"	l
ffff800000100ce5	kernel.asm	/^ffff800000100ce5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100ce8	kernel.asm	/^ffff800000100ce8:	09 45 fc             	or     %eax,-0x4(%rbp)$/;"	l
ffff800000100ceb	kernel.asm	/^ffff800000100ceb:	83 7d ec 0a          	cmpl   $0xa,-0x14(%rbp)$/;"	l
ffff800000100cef	kernel.asm	/^ffff800000100cef:	75 30                	jne    ffff800000100d21 <cgaputc+0xa1>$/;"	l
ffff800000100cf1	kernel.asm	/^ffff800000100cf1:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100cf4	kernel.asm	/^ffff800000100cf4:	ba 67 66 66 66       	mov    $0x66666667,%edx$/;"	l
ffff800000100cf9	kernel.asm	/^ffff800000100cf9:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100cfb	kernel.asm	/^ffff800000100cfb:	f7 ea                	imul   %edx$/;"	l
ffff800000100cfd	kernel.asm	/^ffff800000100cfd:	c1 fa 05             	sar    $0x5,%edx$/;"	l
ffff800000100d00	kernel.asm	/^ffff800000100d00:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000100d02	kernel.asm	/^ffff800000100d02:	c1 f8 1f             	sar    $0x1f,%eax$/;"	l
ffff800000100d05	kernel.asm	/^ffff800000100d05:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000100d07	kernel.asm	/^ffff800000100d07:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000100d09	kernel.asm	/^ffff800000100d09:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000100d0c	kernel.asm	/^ffff800000100d0c:	01 d0                	add    %edx,%eax$/;"	l
ffff800000100d0e	kernel.asm	/^ffff800000100d0e:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000100d11	kernel.asm	/^ffff800000100d11:	29 c1                	sub    %eax,%ecx$/;"	l
ffff800000100d13	kernel.asm	/^ffff800000100d13:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000100d15	kernel.asm	/^ffff800000100d15:	b8 50 00 00 00       	mov    $0x50,%eax$/;"	l
ffff800000100d1a	kernel.asm	/^ffff800000100d1a:	29 d0                	sub    %edx,%eax$/;"	l
ffff800000100d1c	kernel.asm	/^ffff800000100d1c:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000100d1f	kernel.asm	/^ffff800000100d1f:	eb 44                	jmp    ffff800000100d65 <cgaputc+0xe5>$/;"	l
ffff800000100d21	kernel.asm	/^ffff800000100d21:	81 7d ec 00 01 00 00 	cmpl   $0x100,-0x14(%rbp)$/;"	l
ffff800000100d28	kernel.asm	/^ffff800000100d28:	75 0c                	jne    ffff800000100d36 <cgaputc+0xb6>$/;"	l
ffff800000100d2a	kernel.asm	/^ffff800000100d2a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000100d2e	kernel.asm	/^ffff800000100d2e:	7e 35                	jle    ffff800000100d65 <cgaputc+0xe5>$/;"	l
ffff800000100d30	kernel.asm	/^ffff800000100d30:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)$/;"	l
ffff800000100d34	kernel.asm	/^ffff800000100d34:	eb 2f                	jmp    ffff800000100d65 <cgaputc+0xe5>$/;"	l
ffff800000100d36	kernel.asm	/^ffff800000100d36:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d3d	kernel.asm	/^ffff800000100d3d:	80 ff ff $/;"	l
ffff800000100d40	kernel.asm	/^ffff800000100d40:	48 8b 08             	mov    (%rax),%rcx$/;"	l
ffff800000100d43	kernel.asm	/^ffff800000100d43:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100d46	kernel.asm	/^ffff800000100d46:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000100d49	kernel.asm	/^ffff800000100d49:	89 55 fc             	mov    %edx,-0x4(%rbp)$/;"	l
ffff800000100d4c	kernel.asm	/^ffff800000100d4c:	48 98                	cltq   $/;"	l
ffff800000100d4e	kernel.asm	/^ffff800000100d4e:	48 01 c0             	add    %rax,%rax$/;"	l
ffff800000100d51	kernel.asm	/^ffff800000100d51:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100d54	kernel.asm	/^ffff800000100d54:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000100d57	kernel.asm	/^ffff800000100d57:	0f b6 d2             	movzbl %dl,%edx$/;"	l
ffff800000100d5a	kernel.asm	/^ffff800000100d5a:	8b 4d e8             	mov    -0x18(%rbp),%ecx$/;"	l
ffff800000100d5d	kernel.asm	/^ffff800000100d5d:	c1 e1 08             	shl    $0x8,%ecx$/;"	l
ffff800000100d60	kernel.asm	/^ffff800000100d60:	09 ca                	or     %ecx,%edx$/;"	l
ffff800000100d62	kernel.asm	/^ffff800000100d62:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000100d65	kernel.asm	/^ffff800000100d65:	81 7d fc 7f 07 00 00 	cmpl   $0x77f,-0x4(%rbp)$/;"	l
ffff800000100d6c	kernel.asm	/^ffff800000100d6c:	7e 76                	jle    ffff800000100de4 <cgaputc+0x164>$/;"	l
ffff800000100d6e	kernel.asm	/^ffff800000100d6e:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d75	kernel.asm	/^ffff800000100d75:	80 ff ff $/;"	l
ffff800000100d78	kernel.asm	/^ffff800000100d78:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d7b	kernel.asm	/^ffff800000100d7b:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff800000100d82	kernel.asm	/^ffff800000100d82:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100d89	kernel.asm	/^ffff800000100d89:	80 ff ff $/;"	l
ffff800000100d8c	kernel.asm	/^ffff800000100d8c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100d8f	kernel.asm	/^ffff800000100d8f:	ba 60 0e 00 00       	mov    $0xe60,%edx$/;"	l
ffff800000100d94	kernel.asm	/^ffff800000100d94:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000100d97	kernel.asm	/^ffff800000100d97:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100d9a	kernel.asm	/^ffff800000100d9a:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000100da1	kernel.asm	/^ffff800000100da1:	80 ff ff $/;"	l
ffff800000100da4	kernel.asm	/^ffff800000100da4:	ff d0                	callq  *%rax$/;"	l
ffff800000100da6	kernel.asm	/^ffff800000100da6:	83 6d fc 50          	subl   $0x50,-0x4(%rbp)$/;"	l
ffff800000100daa	kernel.asm	/^ffff800000100daa:	b8 80 07 00 00       	mov    $0x780,%eax$/;"	l
ffff800000100daf	kernel.asm	/^ffff800000100daf:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000100db2	kernel.asm	/^ffff800000100db2:	48 98                	cltq   $/;"	l
ffff800000100db4	kernel.asm	/^ffff800000100db4:	8d 14 00             	lea    (%rax,%rax,1),%edx$/;"	l
ffff800000100db7	kernel.asm	/^ffff800000100db7:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100dbe	kernel.asm	/^ffff800000100dbe:	80 ff ff $/;"	l
ffff800000100dc1	kernel.asm	/^ffff800000100dc1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100dc4	kernel.asm	/^ffff800000100dc4:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000100dc7	kernel.asm	/^ffff800000100dc7:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000100dca	kernel.asm	/^ffff800000100dca:	48 01 c9             	add    %rcx,%rcx$/;"	l
ffff800000100dcd	kernel.asm	/^ffff800000100dcd:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff800000100dd0	kernel.asm	/^ffff800000100dd0:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100dd5	kernel.asm	/^ffff800000100dd5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000100dd8	kernel.asm	/^ffff800000100dd8:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff800000100ddf	kernel.asm	/^ffff800000100ddf:	80 ff ff $/;"	l
ffff800000100de2	kernel.asm	/^ffff800000100de2:	ff d0                	callq  *%rax$/;"	l
ffff800000100de4	kernel.asm	/^ffff800000100de4:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff800000100de9	kernel.asm	/^ffff800000100de9:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100dee	kernel.asm	/^ffff800000100dee:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100df5	kernel.asm	/^ffff800000100df5:	80 ff ff $/;"	l
ffff800000100df8	kernel.asm	/^ffff800000100df8:	ff d0                	callq  *%rax$/;"	l
ffff800000100dfa	kernel.asm	/^ffff800000100dfa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100dfd	kernel.asm	/^ffff800000100dfd:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff800000100e00	kernel.asm	/^ffff800000100e00:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100e03	kernel.asm	/^ffff800000100e03:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100e05	kernel.asm	/^ffff800000100e05:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100e0a	kernel.asm	/^ffff800000100e0a:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100e11	kernel.asm	/^ffff800000100e11:	80 ff ff $/;"	l
ffff800000100e14	kernel.asm	/^ffff800000100e14:	ff d0                	callq  *%rax$/;"	l
ffff800000100e16	kernel.asm	/^ffff800000100e16:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000100e1b	kernel.asm	/^ffff800000100e1b:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff800000100e20	kernel.asm	/^ffff800000100e20:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100e27	kernel.asm	/^ffff800000100e27:	80 ff ff $/;"	l
ffff800000100e2a	kernel.asm	/^ffff800000100e2a:	ff d0                	callq  *%rax$/;"	l
ffff800000100e2c	kernel.asm	/^ffff800000100e2c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100e2f	kernel.asm	/^ffff800000100e2f:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000100e32	kernel.asm	/^ffff800000100e32:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000100e34	kernel.asm	/^ffff800000100e34:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff800000100e39	kernel.asm	/^ffff800000100e39:	48 b8 10 06 10 00 00 	movabs $0xffff800000100610,%rax$/;"	l
ffff800000100e40	kernel.asm	/^ffff800000100e40:	80 ff ff $/;"	l
ffff800000100e43	kernel.asm	/^ffff800000100e43:	ff d0                	callq  *%rax$/;"	l
ffff800000100e45	kernel.asm	/^ffff800000100e45:	48 b8 18 e0 10 00 00 	movabs $0xffff80000010e018,%rax$/;"	l
ffff800000100e4c	kernel.asm	/^ffff800000100e4c:	80 ff ff $/;"	l
ffff800000100e4f	kernel.asm	/^ffff800000100e4f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000100e52	kernel.asm	/^ffff800000100e52:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000100e55	kernel.asm	/^ffff800000100e55:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000100e58	kernel.asm	/^ffff800000100e58:	48 01 d2             	add    %rdx,%rdx$/;"	l
ffff800000100e5b	kernel.asm	/^ffff800000100e5b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000100e5e	kernel.asm	/^ffff800000100e5e:	66 c7 00 20 07       	movw   $0x720,(%rax)$/;"	l
ffff800000100e63	kernel.asm	/^ffff800000100e63:	90                   	nop$/;"	l
ffff800000100e64	kernel.asm	/^ffff800000100e64:	c9                   	leaveq $/;"	l
ffff800000100e65	kernel.asm	/^ffff800000100e65:	c3                   	retq   $/;"	l
ffff800000100e66	kernel.asm	/^ffff800000100e66 <consputc>:$/;"	l
ffff800000100e66	kernel.asm	/^ffff800000100e66:	55                   	push   %rbp$/;"	l
ffff800000100e67	kernel.asm	/^ffff800000100e67:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100e6a	kernel.asm	/^ffff800000100e6a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000100e6e	kernel.asm	/^ffff800000100e6e:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000100e71	kernel.asm	/^ffff800000100e71:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000100e74	kernel.asm	/^ffff800000100e74:	48 b8 d8 64 11 00 00 	movabs $0xffff8000001164d8,%rax$/;"	l
ffff800000100e7b	kernel.asm	/^ffff800000100e7b:	80 ff ff $/;"	l
ffff800000100e7e	kernel.asm	/^ffff800000100e7e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000100e80	kernel.asm	/^ffff800000100e80:	85 c0                	test   %eax,%eax$/;"	l
ffff800000100e82	kernel.asm	/^ffff800000100e82:	74 0e                	je     ffff800000100e92 <consputc+0x2c>$/;"	l
ffff800000100e84	kernel.asm	/^ffff800000100e84:	48 b8 7e 06 10 00 00 	movabs $0xffff80000010067e,%rax$/;"	l
ffff800000100e8b	kernel.asm	/^ffff800000100e8b:	80 ff ff $/;"	l
ffff800000100e8e	kernel.asm	/^ffff800000100e8e:	ff d0                	callq  *%rax$/;"	l
ffff800000100e90	kernel.asm	/^ffff800000100e90:	eb fe                	jmp    ffff800000100e90 <consputc+0x2a>$/;"	l
ffff800000100e92	kernel.asm	/^ffff800000100e92:	81 7d fc 00 01 00 00 	cmpl   $0x100,-0x4(%rbp)$/;"	l
ffff800000100e99	kernel.asm	/^ffff800000100e99:	75 35                	jne    ffff800000100ed0 <consputc+0x6a>$/;"	l
ffff800000100e9b	kernel.asm	/^ffff800000100e9b:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100ea0	kernel.asm	/^ffff800000100ea0:	48 b8 8e 9d 10 00 00 	movabs $0xffff800000109d8e,%rax$/;"	l
ffff800000100ea7	kernel.asm	/^ffff800000100ea7:	80 ff ff $/;"	l
ffff800000100eaa	kernel.asm	/^ffff800000100eaa:	ff d0                	callq  *%rax$/;"	l
ffff800000100eac	kernel.asm	/^ffff800000100eac:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff800000100eb1	kernel.asm	/^ffff800000100eb1:	48 b8 8e 9d 10 00 00 	movabs $0xffff800000109d8e,%rax$/;"	l
ffff800000100eb8	kernel.asm	/^ffff800000100eb8:	80 ff ff $/;"	l
ffff800000100ebb	kernel.asm	/^ffff800000100ebb:	ff d0                	callq  *%rax$/;"	l
ffff800000100ebd	kernel.asm	/^ffff800000100ebd:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000100ec2	kernel.asm	/^ffff800000100ec2:	48 b8 8e 9d 10 00 00 	movabs $0xffff800000109d8e,%rax$/;"	l
ffff800000100ec9	kernel.asm	/^ffff800000100ec9:	80 ff ff $/;"	l
ffff800000100ecc	kernel.asm	/^ffff800000100ecc:	ff d0                	callq  *%rax$/;"	l
ffff800000100ece	kernel.asm	/^ffff800000100ece:	eb 11                	jmp    ffff800000100ee1 <consputc+0x7b>$/;"	l
ffff800000100ed0	kernel.asm	/^ffff800000100ed0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ed3	kernel.asm	/^ffff800000100ed3:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100ed5	kernel.asm	/^ffff800000100ed5:	48 b8 8e 9d 10 00 00 	movabs $0xffff800000109d8e,%rax$/;"	l
ffff800000100edc	kernel.asm	/^ffff800000100edc:	80 ff ff $/;"	l
ffff800000100edf	kernel.asm	/^ffff800000100edf:	ff d0                	callq  *%rax$/;"	l
ffff800000100ee1	kernel.asm	/^ffff800000100ee1:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000100ee4	kernel.asm	/^ffff800000100ee4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100ee7	kernel.asm	/^ffff800000100ee7:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000100ee9	kernel.asm	/^ffff800000100ee9:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000100eeb	kernel.asm	/^ffff800000100eeb:	48 b8 80 0c 10 00 00 	movabs $0xffff800000100c80,%rax$/;"	l
ffff800000100ef2	kernel.asm	/^ffff800000100ef2:	80 ff ff $/;"	l
ffff800000100ef5	kernel.asm	/^ffff800000100ef5:	ff d0                	callq  *%rax$/;"	l
ffff800000100ef7	kernel.asm	/^ffff800000100ef7:	90                   	nop$/;"	l
ffff800000100ef8	kernel.asm	/^ffff800000100ef8:	c9                   	leaveq $/;"	l
ffff800000100ef9	kernel.asm	/^ffff800000100ef9:	c3                   	retq   $/;"	l
ffff800000100efa	kernel.asm	/^ffff800000100efa <consoleintr>:$/;"	l
ffff800000100efa	kernel.asm	/^ffff800000100efa:	55                   	push   %rbp$/;"	l
ffff800000100efb	kernel.asm	/^ffff800000100efb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000100efe	kernel.asm	/^ffff800000100efe:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000100f02	kernel.asm	/^ffff800000100f02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000100f06	kernel.asm	/^ffff800000100f06:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff800000100f0d	kernel.asm	/^ffff800000100f0d:	80 ff ff $/;"	l
ffff800000100f10	kernel.asm	/^ffff800000100f10:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000100f17	kernel.asm	/^ffff800000100f17:	80 ff ff $/;"	l
ffff800000100f1a	kernel.asm	/^ffff800000100f1a:	ff d0                	callq  *%rax$/;"	l
ffff800000100f1c	kernel.asm	/^ffff800000100f1c:	e9 98 02 00 00       	jmpq   ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000100f21	kernel.asm	/^ffff800000100f21:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000100f24	kernel.asm	/^ffff800000100f24:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100f27	kernel.asm	/^ffff800000100f27:	0f 84 90 00 00 00    	je     ffff800000100fbd <consoleintr+0xc3>$/;"	l
ffff800000100f2d	kernel.asm	/^ffff800000100f2d:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ffff800000100f30	kernel.asm	/^ffff800000100f30:	7f 13                	jg     ffff800000100f45 <consoleintr+0x4b>$/;"	l
ffff800000100f32	kernel.asm	/^ffff800000100f32:	83 f8 08             	cmp    $0x8,%eax$/;"	l
ffff800000100f35	kernel.asm	/^ffff800000100f35:	0f 84 e0 00 00 00    	je     ffff80000010101b <consoleintr+0x121>$/;"	l
ffff800000100f3b	kernel.asm	/^ffff800000100f3b:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000100f3e	kernel.asm	/^ffff800000100f3e:	74 33                	je     ffff800000100f73 <consoleintr+0x79>$/;"	l
ffff800000100f40	kernel.asm	/^ffff800000100f40:	e9 3c 01 00 00       	jmpq   ffff800000101081 <consoleintr+0x187>$/;"	l
ffff800000100f45	kernel.asm	/^ffff800000100f45:	83 f8 1a             	cmp    $0x1a,%eax$/;"	l
ffff800000100f48	kernel.asm	/^ffff800000100f48:	74 0e                	je     ffff800000100f58 <consoleintr+0x5e>$/;"	l
ffff800000100f4a	kernel.asm	/^ffff800000100f4a:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000100f4d	kernel.asm	/^ffff800000100f4d:	0f 84 c8 00 00 00    	je     ffff80000010101b <consoleintr+0x121>$/;"	l
ffff800000100f53	kernel.asm	/^ffff800000100f53:	e9 29 01 00 00       	jmpq   ffff800000101081 <consoleintr+0x187>$/;"	l
ffff800000100f58	kernel.asm	/^ffff800000100f58:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000100f5d	kernel.asm	/^ffff800000100f5d:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000100f62	kernel.asm	/^ffff800000100f62:	48 b8 2f 06 10 00 00 	movabs $0xffff80000010062f,%rax$/;"	l
ffff800000100f69	kernel.asm	/^ffff800000100f69:	80 ff ff $/;"	l
ffff800000100f6c	kernel.asm	/^ffff800000100f6c:	ff d0                	callq  *%rax$/;"	l
ffff800000100f6e	kernel.asm	/^ffff800000100f6e:	e9 46 02 00 00       	jmpq   ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000100f73	kernel.asm	/^ffff800000100f73:	48 b8 57 71 10 00 00 	movabs $0xffff800000107157,%rax$/;"	l
ffff800000100f7a	kernel.asm	/^ffff800000100f7a:	80 ff ff $/;"	l
ffff800000100f7d	kernel.asm	/^ffff800000100f7d:	ff d0                	callq  *%rax$/;"	l
ffff800000100f7f	kernel.asm	/^ffff800000100f7f:	e9 35 02 00 00       	jmpq   ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000100f84	kernel.asm	/^ffff800000100f84:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000100f8b	kernel.asm	/^ffff800000100f8b:	80 ff ff $/;"	l
ffff800000100f8e	kernel.asm	/^ffff800000100f8e:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100f94	kernel.asm	/^ffff800000100f94:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000100f97	kernel.asm	/^ffff800000100f97:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000100f9e	kernel.asm	/^ffff800000100f9e:	80 ff ff $/;"	l
ffff800000100fa1	kernel.asm	/^ffff800000100fa1:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff800000100fa7	kernel.asm	/^ffff800000100fa7:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000100fac	kernel.asm	/^ffff800000100fac:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000100fb1	kernel.asm	/^ffff800000100fb1:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000100fb8	kernel.asm	/^ffff800000100fb8:	80 ff ff $/;"	l
ffff800000100fbb	kernel.asm	/^ffff800000100fbb:	ff d0                	callq  *%rax$/;"	l
ffff800000100fbd	kernel.asm	/^ffff800000100fbd:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000100fc4	kernel.asm	/^ffff800000100fc4:	80 ff ff $/;"	l
ffff800000100fc7	kernel.asm	/^ffff800000100fc7:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000100fcd	kernel.asm	/^ffff800000100fcd:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000100fd4	kernel.asm	/^ffff800000100fd4:	80 ff ff $/;"	l
ffff800000100fd7	kernel.asm	/^ffff800000100fd7:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff800000100fdd	kernel.asm	/^ffff800000100fdd:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000100fdf	kernel.asm	/^ffff800000100fdf:	0f 84 d4 01 00 00    	je     ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000100fe5	kernel.asm	/^ffff800000100fe5:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000100fec	kernel.asm	/^ffff800000100fec:	80 ff ff $/;"	l
ffff800000100fef	kernel.asm	/^ffff800000100fef:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000100ff5	kernel.asm	/^ffff800000100ff5:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000100ff8	kernel.asm	/^ffff800000100ff8:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff800000100ffb	kernel.asm	/^ffff800000100ffb:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000100ffd	kernel.asm	/^ffff800000100ffd:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101004	kernel.asm	/^ffff800000101004:	80 ff ff $/;"	l
ffff800000101007	kernel.asm	/^ffff800000101007:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000101009	kernel.asm	/^ffff800000101009:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff80000010100e	kernel.asm	/^ffff80000010100e:	3c 0a                	cmp    $0xa,%al$/;"	l
ffff800000101010	kernel.asm	/^ffff800000101010:	0f 85 6e ff ff ff    	jne    ffff800000100f84 <consoleintr+0x8a>$/;"	l
ffff800000101016	kernel.asm	/^ffff800000101016:	e9 9e 01 00 00       	jmpq   ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff80000010101b	kernel.asm	/^ffff80000010101b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101022	kernel.asm	/^ffff800000101022:	80 ff ff $/;"	l
ffff800000101025	kernel.asm	/^ffff800000101025:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010102b	kernel.asm	/^ffff80000010102b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101032	kernel.asm	/^ffff800000101032:	80 ff ff $/;"	l
ffff800000101035	kernel.asm	/^ffff800000101035:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff80000010103b	kernel.asm	/^ffff80000010103b:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010103d	kernel.asm	/^ffff80000010103d:	0f 84 76 01 00 00    	je     ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000101043	kernel.asm	/^ffff800000101043:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff80000010104a	kernel.asm	/^ffff80000010104a:	80 ff ff $/;"	l
ffff80000010104d	kernel.asm	/^ffff80000010104d:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff800000101053	kernel.asm	/^ffff800000101053:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000101056	kernel.asm	/^ffff800000101056:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff80000010105d	kernel.asm	/^ffff80000010105d:	80 ff ff $/;"	l
ffff800000101060	kernel.asm	/^ffff800000101060:	89 90 f0 00 00 00    	mov    %edx,0xf0(%rax)$/;"	l
ffff800000101066	kernel.asm	/^ffff800000101066:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010106b	kernel.asm	/^ffff80000010106b:	bf 00 01 00 00       	mov    $0x100,%edi$/;"	l
ffff800000101070	kernel.asm	/^ffff800000101070:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000101077	kernel.asm	/^ffff800000101077:	80 ff ff $/;"	l
ffff80000010107a	kernel.asm	/^ffff80000010107a:	ff d0                	callq  *%rax$/;"	l
ffff80000010107c	kernel.asm	/^ffff80000010107c:	e9 38 01 00 00       	jmpq   ffff8000001011b9 <consoleintr+0x2bf>$/;"	l
ffff800000101081	kernel.asm	/^ffff800000101081:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101085	kernel.asm	/^ffff800000101085:	0f 84 2d 01 00 00    	je     ffff8000001011b8 <consoleintr+0x2be>$/;"	l
ffff80000010108b	kernel.asm	/^ffff80000010108b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101092	kernel.asm	/^ffff800000101092:	80 ff ff $/;"	l
ffff800000101095	kernel.asm	/^ffff800000101095:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010109b	kernel.asm	/^ffff80000010109b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001010a2	kernel.asm	/^ffff8000001010a2:	80 ff ff $/;"	l
ffff8000001010a5	kernel.asm	/^ffff8000001010a5:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff8000001010ab	kernel.asm	/^ffff8000001010ab:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001010ad	kernel.asm	/^ffff8000001010ad:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001010af	kernel.asm	/^ffff8000001010af:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff8000001010b2	kernel.asm	/^ffff8000001010b2:	0f 87 00 01 00 00    	ja     ffff8000001011b8 <consoleintr+0x2be>$/;"	l
ffff8000001010b8	kernel.asm	/^ffff8000001010b8:	83 7d fc 0d          	cmpl   $0xd,-0x4(%rbp)$/;"	l
ffff8000001010bc	kernel.asm	/^ffff8000001010bc:	74 05                	je     ffff8000001010c3 <consoleintr+0x1c9>$/;"	l
ffff8000001010be	kernel.asm	/^ffff8000001010be:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010c1	kernel.asm	/^ffff8000001010c1:	eb 05                	jmp    ffff8000001010c8 <consoleintr+0x1ce>$/;"	l
ffff8000001010c3	kernel.asm	/^ffff8000001010c3:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
ffff8000001010c8	kernel.asm	/^ffff8000001010c8:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001010cb	kernel.asm	/^ffff8000001010cb:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001010d2	kernel.asm	/^ffff8000001010d2:	80 ff ff $/;"	l
ffff8000001010d5	kernel.asm	/^ffff8000001010d5:	8b 80 f0 00 00 00    	mov    0xf0(%rax),%eax$/;"	l
ffff8000001010db	kernel.asm	/^ffff8000001010db:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001010de	kernel.asm	/^ffff8000001010de:	48 ba e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdx$/;"	l
ffff8000001010e5	kernel.asm	/^ffff8000001010e5:	80 ff ff $/;"	l
ffff8000001010e8	kernel.asm	/^ffff8000001010e8:	89 8a f0 00 00 00    	mov    %ecx,0xf0(%rdx)$/;"	l
ffff8000001010ee	kernel.asm	/^ffff8000001010ee:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff8000001010f1	kernel.asm	/^ffff8000001010f1:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001010f3	kernel.asm	/^ffff8000001010f3:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001010f6	kernel.asm	/^ffff8000001010f6:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001010f8	kernel.asm	/^ffff8000001010f8:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001010ff	kernel.asm	/^ffff8000001010ff:	80 ff ff $/;"	l
ffff800000101102	kernel.asm	/^ffff800000101102:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000101104	kernel.asm	/^ffff800000101104:	88 4c 10 68          	mov    %cl,0x68(%rax,%rdx,1)$/;"	l
ffff800000101108	kernel.asm	/^ffff800000101108:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff80000010110f	kernel.asm	/^ffff80000010110f:	80 ff ff $/;"	l
ffff800000101112	kernel.asm	/^ffff800000101112:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101114	kernel.asm	/^ffff800000101114:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101116	kernel.asm	/^ffff800000101116:	74 21                	je     ffff800000101139 <consoleintr+0x23f>$/;"	l
ffff800000101118	kernel.asm	/^ffff800000101118:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff80000010111f	kernel.asm	/^ffff80000010111f:	80 ff ff $/;"	l
ffff800000101122	kernel.asm	/^ffff800000101122:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000101124	kernel.asm	/^ffff800000101124:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101127	kernel.asm	/^ffff800000101127:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000101129	kernel.asm	/^ffff800000101129:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010112b	kernel.asm	/^ffff80000010112b:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000101132	kernel.asm	/^ffff800000101132:	80 ff ff $/;"	l
ffff800000101135	kernel.asm	/^ffff800000101135:	ff d0                	callq  *%rax$/;"	l
ffff800000101137	kernel.asm	/^ffff800000101137:	eb 16                	jmp    ffff80000010114f <consoleintr+0x255>$/;"	l
ffff800000101139	kernel.asm	/^ffff800000101139:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010113c	kernel.asm	/^ffff80000010113c:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff800000101141	kernel.asm	/^ffff800000101141:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101143	kernel.asm	/^ffff800000101143:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff80000010114a	kernel.asm	/^ffff80000010114a:	80 ff ff $/;"	l
ffff80000010114d	kernel.asm	/^ffff80000010114d:	ff d0                	callq  *%rax$/;"	l
ffff80000010114f	kernel.asm	/^ffff80000010114f:	83 7d fc 0a          	cmpl   $0xa,-0x4(%rbp)$/;"	l
ffff800000101153	kernel.asm	/^ffff800000101153:	74 2d                	je     ffff800000101182 <consoleintr+0x288>$/;"	l
ffff800000101155	kernel.asm	/^ffff800000101155:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)$/;"	l
ffff800000101159	kernel.asm	/^ffff800000101159:	74 27                	je     ffff800000101182 <consoleintr+0x288>$/;"	l
ffff80000010115b	kernel.asm	/^ffff80000010115b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101162	kernel.asm	/^ffff800000101162:	80 ff ff $/;"	l
ffff800000101165	kernel.asm	/^ffff800000101165:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff80000010116b	kernel.asm	/^ffff80000010116b:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101172	kernel.asm	/^ffff800000101172:	80 ff ff $/;"	l
ffff800000101175	kernel.asm	/^ffff800000101175:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff80000010117b	kernel.asm	/^ffff80000010117b:	83 e8 80             	sub    $0xffffff80,%eax$/;"	l
ffff80000010117e	kernel.asm	/^ffff80000010117e:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000101180	kernel.asm	/^ffff800000101180:	75 36                	jne    ffff8000001011b8 <consoleintr+0x2be>$/;"	l
ffff800000101182	kernel.asm	/^ffff800000101182:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101189	kernel.asm	/^ffff800000101189:	80 ff ff $/;"	l
ffff80000010118c	kernel.asm	/^ffff80000010118c:	8b 90 f0 00 00 00    	mov    0xf0(%rax),%edx$/;"	l
ffff800000101192	kernel.asm	/^ffff800000101192:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101199	kernel.asm	/^ffff800000101199:	80 ff ff $/;"	l
ffff80000010119c	kernel.asm	/^ffff80000010119c:	89 90 ec 00 00 00    	mov    %edx,0xec(%rax)$/;"	l
ffff8000001011a2	kernel.asm	/^ffff8000001011a2:	48 bf c8 64 11 00 00 	movabs $0xffff8000001164c8,%rdi$/;"	l
ffff8000001011a9	kernel.asm	/^ffff8000001011a9:	80 ff ff $/;"	l
ffff8000001011ac	kernel.asm	/^ffff8000001011ac:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff8000001011b3	kernel.asm	/^ffff8000001011b3:	80 ff ff $/;"	l
ffff8000001011b6	kernel.asm	/^ffff8000001011b6:	ff d0                	callq  *%rax$/;"	l
ffff8000001011b8	kernel.asm	/^ffff8000001011b8:	90                   	nop$/;"	l
ffff8000001011b9	kernel.asm	/^ffff8000001011b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001011bd	kernel.asm	/^ffff8000001011bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001011bf	kernel.asm	/^ffff8000001011bf:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001011c2	kernel.asm	/^ffff8000001011c2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001011c6	kernel.asm	/^ffff8000001011c6:	0f 89 55 fd ff ff    	jns    ffff800000100f21 <consoleintr+0x27>$/;"	l
ffff8000001011cc	kernel.asm	/^ffff8000001011cc:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff8000001011d3	kernel.asm	/^ffff8000001011d3:	80 ff ff $/;"	l
ffff8000001011d6	kernel.asm	/^ffff8000001011d6:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001011dd	kernel.asm	/^ffff8000001011dd:	80 ff ff $/;"	l
ffff8000001011e0	kernel.asm	/^ffff8000001011e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001011e2	kernel.asm	/^ffff8000001011e2:	90                   	nop$/;"	l
ffff8000001011e3	kernel.asm	/^ffff8000001011e3:	c9                   	leaveq $/;"	l
ffff8000001011e4	kernel.asm	/^ffff8000001011e4:	c3                   	retq   $/;"	l
ffff8000001011e5	kernel.asm	/^ffff8000001011e5 <consoleread>:$/;"	l
ffff8000001011e5	kernel.asm	/^ffff8000001011e5:	55                   	push   %rbp$/;"	l
ffff8000001011e6	kernel.asm	/^ffff8000001011e6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001011e9	kernel.asm	/^ffff8000001011e9:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001011ed	kernel.asm	/^ffff8000001011ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001011f1	kernel.asm	/^ffff8000001011f1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001011f5	kernel.asm	/^ffff8000001011f5:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001011f8	kernel.asm	/^ffff8000001011f8:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001011fb	kernel.asm	/^ffff8000001011fb:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001011fe	kernel.asm	/^ffff8000001011fe:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff800000101205	kernel.asm	/^ffff800000101205:	80 ff ff $/;"	l
ffff800000101208	kernel.asm	/^ffff800000101208:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff80000010120f	kernel.asm	/^ffff80000010120f:	80 ff ff $/;"	l
ffff800000101212	kernel.asm	/^ffff800000101212:	ff d0                	callq  *%rax$/;"	l
ffff800000101214	kernel.asm	/^ffff800000101214:	e9 1e 01 00 00       	jmpq   ffff800000101337 <consoleread+0x152>$/;"	l
ffff800000101219	kernel.asm	/^ffff800000101219:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101220	kernel.asm	/^ffff800000101220:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101224	kernel.asm	/^ffff800000101224:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000101227	kernel.asm	/^ffff800000101227:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101229	kernel.asm	/^ffff800000101229:	74 37                	je     ffff800000101262 <consoleread+0x7d>$/;"	l
ffff80000010122b	kernel.asm	/^ffff80000010122b:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff800000101232	kernel.asm	/^ffff800000101232:	80 ff ff $/;"	l
ffff800000101235	kernel.asm	/^ffff800000101235:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010123c	kernel.asm	/^ffff80000010123c:	80 ff ff $/;"	l
ffff80000010123f	kernel.asm	/^ffff80000010123f:	ff d0                	callq  *%rax$/;"	l
ffff800000101241	kernel.asm	/^ffff800000101241:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101245	kernel.asm	/^ffff800000101245:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101249	kernel.asm	/^ffff800000101249:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010124c	kernel.asm	/^ffff80000010124c:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000101253	kernel.asm	/^ffff800000101253:	80 ff ff $/;"	l
ffff800000101256	kernel.asm	/^ffff800000101256:	ff d0                	callq  *%rax$/;"	l
ffff800000101258	kernel.asm	/^ffff800000101258:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010125d	kernel.asm	/^ffff80000010125d:	e9 05 01 00 00       	jmpq   ffff800000101367 <consoleread+0x182>$/;"	l
ffff800000101262	kernel.asm	/^ffff800000101262:	48 be e0 63 11 00 00 	movabs $0xffff8000001163e0,%rsi$/;"	l
ffff800000101269	kernel.asm	/^ffff800000101269:	80 ff ff $/;"	l
ffff80000010126c	kernel.asm	/^ffff80000010126c:	48 bf c8 64 11 00 00 	movabs $0xffff8000001164c8,%rdi$/;"	l
ffff800000101273	kernel.asm	/^ffff800000101273:	80 ff ff $/;"	l
ffff800000101276	kernel.asm	/^ffff800000101276:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff80000010127d	kernel.asm	/^ffff80000010127d:	80 ff ff $/;"	l
ffff800000101280	kernel.asm	/^ffff800000101280:	ff d0                	callq  *%rax$/;"	l
ffff800000101282	kernel.asm	/^ffff800000101282:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101289	kernel.asm	/^ffff800000101289:	80 ff ff $/;"	l
ffff80000010128c	kernel.asm	/^ffff80000010128c:	8b 90 e8 00 00 00    	mov    0xe8(%rax),%edx$/;"	l
ffff800000101292	kernel.asm	/^ffff800000101292:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101299	kernel.asm	/^ffff800000101299:	80 ff ff $/;"	l
ffff80000010129c	kernel.asm	/^ffff80000010129c:	8b 80 ec 00 00 00    	mov    0xec(%rax),%eax$/;"	l
ffff8000001012a2	kernel.asm	/^ffff8000001012a2:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001012a4	kernel.asm	/^ffff8000001012a4:	0f 84 6f ff ff ff    	je     ffff800000101219 <consoleread+0x34>$/;"	l
ffff8000001012aa	kernel.asm	/^ffff8000001012aa:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001012b1	kernel.asm	/^ffff8000001012b1:	80 ff ff $/;"	l
ffff8000001012b4	kernel.asm	/^ffff8000001012b4:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff8000001012ba	kernel.asm	/^ffff8000001012ba:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001012bd	kernel.asm	/^ffff8000001012bd:	48 ba e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdx$/;"	l
ffff8000001012c4	kernel.asm	/^ffff8000001012c4:	80 ff ff $/;"	l
ffff8000001012c7	kernel.asm	/^ffff8000001012c7:	89 8a e8 00 00 00    	mov    %ecx,0xe8(%rdx)$/;"	l
ffff8000001012cd	kernel.asm	/^ffff8000001012cd:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff8000001012d0	kernel.asm	/^ffff8000001012d0:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001012d2	kernel.asm	/^ffff8000001012d2:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001012d9	kernel.asm	/^ffff8000001012d9:	80 ff ff $/;"	l
ffff8000001012dc	kernel.asm	/^ffff8000001012dc:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001012de	kernel.asm	/^ffff8000001012de:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff8000001012e3	kernel.asm	/^ffff8000001012e3:	0f be c0             	movsbl %al,%eax$/;"	l
ffff8000001012e6	kernel.asm	/^ffff8000001012e6:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001012e9	kernel.asm	/^ffff8000001012e9:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)$/;"	l
ffff8000001012ed	kernel.asm	/^ffff8000001012ed:	75 2d                	jne    ffff80000010131c <consoleread+0x137>$/;"	l
ffff8000001012ef	kernel.asm	/^ffff8000001012ef:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001012f2	kernel.asm	/^ffff8000001012f2:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001012f5	kernel.asm	/^ffff8000001012f5:	73 4c                	jae    ffff800000101343 <consoleread+0x15e>$/;"	l
ffff8000001012f7	kernel.asm	/^ffff8000001012f7:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff8000001012fe	kernel.asm	/^ffff8000001012fe:	80 ff ff $/;"	l
ffff800000101301	kernel.asm	/^ffff800000101301:	8b 80 e8 00 00 00    	mov    0xe8(%rax),%eax$/;"	l
ffff800000101307	kernel.asm	/^ffff800000101307:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff80000010130a	kernel.asm	/^ffff80000010130a:	48 b8 e0 63 11 00 00 	movabs $0xffff8000001163e0,%rax$/;"	l
ffff800000101311	kernel.asm	/^ffff800000101311:	80 ff ff $/;"	l
ffff800000101314	kernel.asm	/^ffff800000101314:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)$/;"	l
ffff80000010131a	kernel.asm	/^ffff80000010131a:	eb 27                	jmp    ffff800000101343 <consoleread+0x15e>$/;"	l
ffff80000010131c	kernel.asm	/^ffff80000010131c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101320	kernel.asm	/^ffff800000101320:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000101324	kernel.asm	/^ffff800000101324:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff800000101328	kernel.asm	/^ffff800000101328:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010132b	kernel.asm	/^ffff80000010132b:	88 10                	mov    %dl,(%rax)$/;"	l
ffff80000010132d	kernel.asm	/^ffff80000010132d:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff800000101331	kernel.asm	/^ffff800000101331:	83 7d f8 0a          	cmpl   $0xa,-0x8(%rbp)$/;"	l
ffff800000101335	kernel.asm	/^ffff800000101335:	74 0f                	je     ffff800000101346 <consoleread+0x161>$/;"	l
ffff800000101337	kernel.asm	/^ffff800000101337:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff80000010133b	kernel.asm	/^ffff80000010133b:	0f 8f 41 ff ff ff    	jg     ffff800000101282 <consoleread+0x9d>$/;"	l
ffff800000101341	kernel.asm	/^ffff800000101341:	eb 04                	jmp    ffff800000101347 <consoleread+0x162>$/;"	l
ffff800000101343	kernel.asm	/^ffff800000101343:	90                   	nop$/;"	l
ffff800000101344	kernel.asm	/^ffff800000101344:	eb 01                	jmp    ffff800000101347 <consoleread+0x162>$/;"	l
ffff800000101346	kernel.asm	/^ffff800000101346:	90                   	nop$/;"	l
ffff800000101347	kernel.asm	/^ffff800000101347:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff80000010134e	kernel.asm	/^ffff80000010134e:	80 ff ff $/;"	l
ffff800000101351	kernel.asm	/^ffff800000101351:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101358	kernel.asm	/^ffff800000101358:	80 ff ff $/;"	l
ffff80000010135b	kernel.asm	/^ffff80000010135b:	ff d0                	callq  *%rax$/;"	l
ffff80000010135d	kernel.asm	/^ffff80000010135d:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101360	kernel.asm	/^ffff800000101360:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000101363	kernel.asm	/^ffff800000101363:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000101365	kernel.asm	/^ffff800000101365:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000101367	kernel.asm	/^ffff800000101367:	c9                   	leaveq $/;"	l
ffff800000101368	kernel.asm	/^ffff800000101368:	c3                   	retq   $/;"	l
ffff800000101369	kernel.asm	/^ffff800000101369 <consoleioctl>:$/;"	l
ffff800000101369	kernel.asm	/^ffff800000101369:	55                   	push   %rbp$/;"	l
ffff80000010136a	kernel.asm	/^ffff80000010136a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010136d	kernel.asm	/^ffff80000010136d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101371	kernel.asm	/^ffff800000101371:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101375	kernel.asm	/^ffff800000101375:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000101378	kernel.asm	/^ffff800000101378:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010137b	kernel.asm	/^ffff80000010137b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff80000010137f	kernel.asm	/^ffff80000010137f:	74 11                	je     ffff800000101392 <consoleioctl+0x29>$/;"	l
ffff800000101381	kernel.asm	/^ffff800000101381:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101388	kernel.asm	/^ffff800000101388:	80 ff ff $/;"	l
ffff80000010138b	kernel.asm	/^ffff80000010138b:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff80000010138e	kernel.asm	/^ffff80000010138e:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000101390	kernel.asm	/^ffff800000101390:	eb 10                	jmp    ffff8000001013a2 <consoleioctl+0x39>$/;"	l
ffff800000101392	kernel.asm	/^ffff800000101392:	48 b8 c0 63 11 00 00 	movabs $0xffff8000001163c0,%rax$/;"	l
ffff800000101399	kernel.asm	/^ffff800000101399:	80 ff ff $/;"	l
ffff80000010139c	kernel.asm	/^ffff80000010139c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001013a2	kernel.asm	/^ffff8000001013a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001013a6	kernel.asm	/^ffff8000001013a6:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff8000001013a9	kernel.asm	/^ffff8000001013a9:	89 50 24             	mov    %edx,0x24(%rax)$/;"	l
ffff8000001013ac	kernel.asm	/^ffff8000001013ac:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001013b1	kernel.asm	/^ffff8000001013b1:	c9                   	leaveq $/;"	l
ffff8000001013b2	kernel.asm	/^ffff8000001013b2:	c3                   	retq   $/;"	l
ffff8000001013b3	kernel.asm	/^ffff8000001013b3 <consolewrite>:$/;"	l
ffff8000001013b3	kernel.asm	/^ffff8000001013b3:	55                   	push   %rbp$/;"	l
ffff8000001013b4	kernel.asm	/^ffff8000001013b4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001013b7	kernel.asm	/^ffff8000001013b7:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001013bb	kernel.asm	/^ffff8000001013bb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001013bf	kernel.asm	/^ffff8000001013bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001013c3	kernel.asm	/^ffff8000001013c3:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001013c6	kernel.asm	/^ffff8000001013c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001013ca	kernel.asm	/^ffff8000001013ca:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
ffff8000001013cd	kernel.asm	/^ffff8000001013cd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001013cf	kernel.asm	/^ffff8000001013cf:	75 09                	jne    ffff8000001013da <consolewrite+0x27>$/;"	l
ffff8000001013d1	kernel.asm	/^ffff8000001013d1:	c7 45 f8 07 00 00 00 	movl   $0x7,-0x8(%rbp)$/;"	l
ffff8000001013d8	kernel.asm	/^ffff8000001013d8:	eb 0a                	jmp    ffff8000001013e4 <consolewrite+0x31>$/;"	l
ffff8000001013da	kernel.asm	/^ffff8000001013da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001013de	kernel.asm	/^ffff8000001013de:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
ffff8000001013e1	kernel.asm	/^ffff8000001013e1:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001013e4	kernel.asm	/^ffff8000001013e4:	48 bf e0 64 11 00 00 	movabs $0xffff8000001164e0,%rdi$/;"	l
ffff8000001013eb	kernel.asm	/^ffff8000001013eb:	80 ff ff $/;"	l
ffff8000001013ee	kernel.asm	/^ffff8000001013ee:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001013f5	kernel.asm	/^ffff8000001013f5:	80 ff ff $/;"	l
ffff8000001013f8	kernel.asm	/^ffff8000001013f8:	ff d0                	callq  *%rax$/;"	l
ffff8000001013fa	kernel.asm	/^ffff8000001013fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101401	kernel.asm	/^ffff800000101401:	eb 2d                	jmp    ffff800000101430 <consolewrite+0x7d>$/;"	l
ffff800000101403	kernel.asm	/^ffff800000101403:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101406	kernel.asm	/^ffff800000101406:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000101409	kernel.asm	/^ffff800000101409:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010140d	kernel.asm	/^ffff80000010140d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101410	kernel.asm	/^ffff800000101410:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101413	kernel.asm	/^ffff800000101413:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000101416	kernel.asm	/^ffff800000101416:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000101419	kernel.asm	/^ffff800000101419:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010141c	kernel.asm	/^ffff80000010141c:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010141e	kernel.asm	/^ffff80000010141e:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000101420	kernel.asm	/^ffff800000101420:	48 b8 66 0e 10 00 00 	movabs $0xffff800000100e66,%rax$/;"	l
ffff800000101427	kernel.asm	/^ffff800000101427:	80 ff ff $/;"	l
ffff80000010142a	kernel.asm	/^ffff80000010142a:	ff d0                	callq  *%rax$/;"	l
ffff80000010142c	kernel.asm	/^ffff80000010142c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000101430	kernel.asm	/^ffff800000101430:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000101433	kernel.asm	/^ffff800000101433:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000101436	kernel.asm	/^ffff800000101436:	7c cb                	jl     ffff800000101403 <consolewrite+0x50>$/;"	l
ffff800000101438	kernel.asm	/^ffff800000101438:	48 bf e0 64 11 00 00 	movabs $0xffff8000001164e0,%rdi$/;"	l
ffff80000010143f	kernel.asm	/^ffff80000010143f:	80 ff ff $/;"	l
ffff800000101442	kernel.asm	/^ffff800000101442:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101449	kernel.asm	/^ffff800000101449:	80 ff ff $/;"	l
ffff80000010144c	kernel.asm	/^ffff80000010144c:	ff d0                	callq  *%rax$/;"	l
ffff80000010144e	kernel.asm	/^ffff80000010144e:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101451	kernel.asm	/^ffff800000101451:	c9                   	leaveq $/;"	l
ffff800000101452	kernel.asm	/^ffff800000101452:	c3                   	retq   $/;"	l
ffff800000101453	kernel.asm	/^ffff800000101453 <consoleinit>:$/;"	l
ffff800000101453	kernel.asm	/^ffff800000101453:	55                   	push   %rbp$/;"	l
ffff800000101454	kernel.asm	/^ffff800000101454:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101457	kernel.asm	/^ffff800000101457:	48 be 9a cc 10 00 00 	movabs $0xffff80000010cc9a,%rsi$/;"	l
ffff80000010145e	kernel.asm	/^ffff80000010145e:	80 ff ff $/;"	l
ffff800000101461	kernel.asm	/^ffff800000101461:	48 bf e0 64 11 00 00 	movabs $0xffff8000001164e0,%rdi$/;"	l
ffff800000101468	kernel.asm	/^ffff800000101468:	80 ff ff $/;"	l
ffff80000010146b	kernel.asm	/^ffff80000010146b:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000101472	kernel.asm	/^ffff800000101472:	80 ff ff $/;"	l
ffff800000101475	kernel.asm	/^ffff800000101475:	ff d0                	callq  *%rax$/;"	l
ffff800000101477	kernel.asm	/^ffff800000101477:	48 be a2 cc 10 00 00 	movabs $0xffff80000010cca2,%rsi$/;"	l
ffff80000010147e	kernel.asm	/^ffff80000010147e:	80 ff ff $/;"	l
ffff800000101481	kernel.asm	/^ffff800000101481:	48 bf e0 63 11 00 00 	movabs $0xffff8000001163e0,%rdi$/;"	l
ffff800000101488	kernel.asm	/^ffff800000101488:	80 ff ff $/;"	l
ffff80000010148b	kernel.asm	/^ffff80000010148b:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000101492	kernel.asm	/^ffff800000101492:	80 ff ff $/;"	l
ffff800000101495	kernel.asm	/^ffff800000101495:	ff d0                	callq  *%rax$/;"	l
ffff800000101497	kernel.asm	/^ffff800000101497:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff80000010149e	kernel.asm	/^ffff80000010149e:	80 ff ff $/;"	l
ffff8000001014a1	kernel.asm	/^ffff8000001014a1:	48 ba b3 13 10 00 00 	movabs $0xffff8000001013b3,%rdx$/;"	l
ffff8000001014a8	kernel.asm	/^ffff8000001014a8:	80 ff ff $/;"	l
ffff8000001014ab	kernel.asm	/^ffff8000001014ab:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff8000001014af	kernel.asm	/^ffff8000001014af:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff8000001014b6	kernel.asm	/^ffff8000001014b6:	80 ff ff $/;"	l
ffff8000001014b9	kernel.asm	/^ffff8000001014b9:	48 b9 e5 11 10 00 00 	movabs $0xffff8000001011e5,%rcx$/;"	l
ffff8000001014c0	kernel.asm	/^ffff8000001014c0:	80 ff ff $/;"	l
ffff8000001014c3	kernel.asm	/^ffff8000001014c3:	48 89 48 10          	mov    %rcx,0x10(%rax)$/;"	l
ffff8000001014c7	kernel.asm	/^ffff8000001014c7:	48 b8 e0 64 11 00 00 	movabs $0xffff8000001164e0,%rax$/;"	l
ffff8000001014ce	kernel.asm	/^ffff8000001014ce:	80 ff ff $/;"	l
ffff8000001014d1	kernel.asm	/^ffff8000001014d1:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff8000001014d8	kernel.asm	/^ffff8000001014d8:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001014dd	kernel.asm	/^ffff8000001014dd:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001014e2	kernel.asm	/^ffff8000001014e2:	48 b8 fa 40 10 00 00 	movabs $0xffff8000001040fa,%rax$/;"	l
ffff8000001014e9	kernel.asm	/^ffff8000001014e9:	80 ff ff $/;"	l
ffff8000001014ec	kernel.asm	/^ffff8000001014ec:	ff d0                	callq  *%rax$/;"	l
ffff8000001014ee	kernel.asm	/^ffff8000001014ee:	90                   	nop$/;"	l
ffff8000001014ef	kernel.asm	/^ffff8000001014ef:	5d                   	pop    %rbp$/;"	l
ffff8000001014f0	kernel.asm	/^ffff8000001014f0:	c3                   	retq   $/;"	l
ffff8000001014f1	kernel.asm	/^ffff8000001014f1 <displayread>:$/;"	l
ffff8000001014f1	kernel.asm	/^ffff8000001014f1:	55                   	push   %rbp$/;"	l
ffff8000001014f2	kernel.asm	/^ffff8000001014f2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001014f5	kernel.asm	/^ffff8000001014f5:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001014f9	kernel.asm	/^ffff8000001014f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001014fd	kernel.asm	/^ffff8000001014fd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000101501	kernel.asm	/^ffff800000101501:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff800000101504	kernel.asm	/^ffff800000101504:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff800000101509	kernel.asm	/^ffff800000101509:	c9                   	leaveq $/;"	l
ffff80000010150a	kernel.asm	/^ffff80000010150a:	c3                   	retq   $/;"	l
ffff80000010150b	kernel.asm	/^ffff80000010150b <displaywrite>:$/;"	l
ffff80000010150b	kernel.asm	/^ffff80000010150b:	55                   	push   %rbp$/;"	l
ffff80000010150c	kernel.asm	/^ffff80000010150c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010150f	kernel.asm	/^ffff80000010150f:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff800000101513	kernel.asm	/^ffff800000101513:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101517	kernel.asm	/^ffff800000101517:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010151b	kernel.asm	/^ffff80000010151b:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010151e	kernel.asm	/^ffff80000010151e:	48 b8 00 00 0a 00 00 	movabs $0xffff8000000a0000,%rax$/;"	l
ffff800000101525	kernel.asm	/^ffff800000101525:	80 ff ff $/;"	l
ffff800000101528	kernel.asm	/^ffff800000101528:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010152c	kernel.asm	/^ffff80000010152c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000101533	kernel.asm	/^ffff800000101533:	eb 04                	jmp    ffff800000101539 <displaywrite+0x2e>$/;"	l
ffff800000101535	kernel.asm	/^ffff800000101535:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000101539	kernel.asm	/^ffff800000101539:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010153c	kernel.asm	/^ffff80000010153c:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff80000010153f	kernel.asm	/^ffff80000010153f:	7c f4                	jl     ffff800000101535 <displaywrite+0x2a>$/;"	l
ffff800000101541	kernel.asm	/^ffff800000101541:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000101544	kernel.asm	/^ffff800000101544:	c9                   	leaveq $/;"	l
ffff800000101545	kernel.asm	/^ffff800000101545:	c3                   	retq   $/;"	l
ffff800000101546	kernel.asm	/^ffff800000101546 <displayinit>:$/;"	l
ffff800000101546	kernel.asm	/^ffff800000101546:	55                   	push   %rbp$/;"	l
ffff800000101547	kernel.asm	/^ffff800000101547:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010154a	kernel.asm	/^ffff80000010154a:	48 be a8 cc 10 00 00 	movabs $0xffff80000010cca8,%rsi$/;"	l
ffff800000101551	kernel.asm	/^ffff800000101551:	80 ff ff $/;"	l
ffff800000101554	kernel.asm	/^ffff800000101554:	48 bf 60 65 11 00 00 	movabs $0xffff800000116560,%rdi$/;"	l
ffff80000010155b	kernel.asm	/^ffff80000010155b:	80 ff ff $/;"	l
ffff80000010155e	kernel.asm	/^ffff80000010155e:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000101565	kernel.asm	/^ffff800000101565:	80 ff ff $/;"	l
ffff800000101568	kernel.asm	/^ffff800000101568:	ff d0                	callq  *%rax$/;"	l
ffff80000010156a	kernel.asm	/^ffff80000010156a:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff800000101571	kernel.asm	/^ffff800000101571:	80 ff ff $/;"	l
ffff800000101574	kernel.asm	/^ffff800000101574:	48 ba 0b 15 10 00 00 	movabs $0xffff80000010150b,%rdx$/;"	l
ffff80000010157b	kernel.asm	/^ffff80000010157b:	80 ff ff $/;"	l
ffff80000010157e	kernel.asm	/^ffff80000010157e:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff800000101582	kernel.asm	/^ffff800000101582:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff800000101589	kernel.asm	/^ffff800000101589:	80 ff ff $/;"	l
ffff80000010158c	kernel.asm	/^ffff80000010158c:	48 b9 f1 14 10 00 00 	movabs $0xffff8000001014f1,%rcx$/;"	l
ffff800000101593	kernel.asm	/^ffff800000101593:	80 ff ff $/;"	l
ffff800000101596	kernel.asm	/^ffff800000101596:	48 89 48 20          	mov    %rcx,0x20(%rax)$/;"	l
ffff80000010159a	kernel.asm	/^ffff80000010159a:	48 b8 60 65 11 00 00 	movabs $0xffff800000116560,%rax$/;"	l
ffff8000001015a1	kernel.asm	/^ffff8000001015a1:	80 ff ff $/;"	l
ffff8000001015a4	kernel.asm	/^ffff8000001015a4:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff8000001015ab	kernel.asm	/^ffff8000001015ab:	90                   	nop$/;"	l
ffff8000001015ac	kernel.asm	/^ffff8000001015ac:	5d                   	pop    %rbp$/;"	l
ffff8000001015ad	kernel.asm	/^ffff8000001015ad:	c3                   	retq   $/;"	l
ffff8000001015ae	kernel.asm	/^ffff8000001015ae <displayioctl>:$/;"	l
ffff8000001015ae	kernel.asm	/^ffff8000001015ae:	55                   	push   %rbp$/;"	l
ffff8000001015af	kernel.asm	/^ffff8000001015af:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001015b2	kernel.asm	/^ffff8000001015b2:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001015b6	kernel.asm	/^ffff8000001015b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001015ba	kernel.asm	/^ffff8000001015ba:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff8000001015bd	kernel.asm	/^ffff8000001015bd:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff8000001015c0	kernel.asm	/^ffff8000001015c0:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)$/;"	l
ffff8000001015c4	kernel.asm	/^ffff8000001015c4:	75 2e                	jne    ffff8000001015f4 <displayioctl+0x46>$/;"	l
ffff8000001015c6	kernel.asm	/^ffff8000001015c6:	83 7d f0 03          	cmpl   $0x3,-0x10(%rbp)$/;"	l
ffff8000001015ca	kernel.asm	/^ffff8000001015ca:	75 11                	jne    ffff8000001015dd <displayioctl+0x2f>$/;"	l
ffff8000001015cc	kernel.asm	/^ffff8000001015cc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001015d1	kernel.asm	/^ffff8000001015d1:	48 ba 68 b0 10 00 00 	movabs $0xffff80000010b068,%rdx$/;"	l
ffff8000001015d8	kernel.asm	/^ffff8000001015d8:	80 ff ff $/;"	l
ffff8000001015db	kernel.asm	/^ffff8000001015db:	ff d2                	callq  *%rdx$/;"	l
ffff8000001015dd	kernel.asm	/^ffff8000001015dd:	83 7d f0 13          	cmpl   $0x13,-0x10(%rbp)$/;"	l
ffff8000001015e1	kernel.asm	/^ffff8000001015e1:	75 11                	jne    ffff8000001015f4 <displayioctl+0x46>$/;"	l
ffff8000001015e3	kernel.asm	/^ffff8000001015e3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001015e8	kernel.asm	/^ffff8000001015e8:	48 ba 74 ab 10 00 00 	movabs $0xffff80000010ab74,%rdx$/;"	l
ffff8000001015ef	kernel.asm	/^ffff8000001015ef:	80 ff ff $/;"	l
ffff8000001015f2	kernel.asm	/^ffff8000001015f2:	ff d2                	callq  *%rdx$/;"	l
ffff8000001015f4	kernel.asm	/^ffff8000001015f4:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001015f9	kernel.asm	/^ffff8000001015f9:	c9                   	leaveq $/;"	l
ffff8000001015fa	kernel.asm	/^ffff8000001015fa:	c3                   	retq   $/;"	l
ffff8000001015fb	kernel.asm	/^ffff8000001015fb <exec>:$/;"	l
ffff8000001015fb	kernel.asm	/^ffff8000001015fb:	55                   	push   %rbp$/;"	l
ffff8000001015fc	kernel.asm	/^ffff8000001015fc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001015ff	kernel.asm	/^ffff8000001015ff:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp$/;"	l
ffff800000101606	kernel.asm	/^ffff800000101606:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)$/;"	l
ffff80000010160d	kernel.asm	/^ffff80000010160d:	48 89 b5 00 fe ff ff 	mov    %rsi,-0x200(%rbp)$/;"	l
ffff800000101614	kernel.asm	/^ffff800000101614:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010161b	kernel.asm	/^ffff80000010161b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010161f	kernel.asm	/^ffff80000010161f:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000101623	kernel.asm	/^ffff800000101623:	48 89 45 b8          	mov    %rax,-0x48(%rbp)$/;"	l
ffff800000101627	kernel.asm	/^ffff800000101627:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010162c	kernel.asm	/^ffff80000010162c:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000101633	kernel.asm	/^ffff800000101633:	80 ff ff $/;"	l
ffff800000101636	kernel.asm	/^ffff800000101636:	ff d2                	callq  *%rdx$/;"	l
ffff800000101638	kernel.asm	/^ffff800000101638:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff80000010163f	kernel.asm	/^ffff80000010163f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101642	kernel.asm	/^ffff800000101642:	48 b8 4f 39 10 00 00 	movabs $0xffff80000010394f,%rax$/;"	l
ffff800000101649	kernel.asm	/^ffff800000101649:	80 ff ff $/;"	l
ffff80000010164c	kernel.asm	/^ffff80000010164c:	ff d0                	callq  *%rax$/;"	l
ffff80000010164e	kernel.asm	/^ffff80000010164e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)$/;"	l
ffff800000101652	kernel.asm	/^ffff800000101652:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff800000101657	kernel.asm	/^ffff800000101657:	75 1b                	jne    ffff800000101674 <exec+0x79>$/;"	l
ffff800000101659	kernel.asm	/^ffff800000101659:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010165e	kernel.asm	/^ffff80000010165e:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000101665	kernel.asm	/^ffff800000101665:	80 ff ff $/;"	l
ffff800000101668	kernel.asm	/^ffff800000101668:	ff d2                	callq  *%rdx$/;"	l
ffff80000010166a	kernel.asm	/^ffff80000010166a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010166f	kernel.asm	/^ffff80000010166f:	e9 a5 05 00 00       	jmpq   ffff800000101c19 <exec+0x61e>$/;"	l
ffff800000101674	kernel.asm	/^ffff800000101674:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101678	kernel.asm	/^ffff800000101678:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010167b	kernel.asm	/^ffff80000010167b:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000101682	kernel.asm	/^ffff800000101682:	80 ff ff $/;"	l
ffff800000101685	kernel.asm	/^ffff800000101685:	ff d0                	callq  *%rax$/;"	l
ffff800000101687	kernel.asm	/^ffff800000101687:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)$/;"	l
ffff80000010168e	kernel.asm	/^ffff80000010168e:	00 $/;"	l
ffff80000010168f	kernel.asm	/^ffff80000010168f:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi$/;"	l
ffff800000101696	kernel.asm	/^ffff800000101696:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010169a	kernel.asm	/^ffff80000010169a:	b9 40 00 00 00       	mov    $0x40,%ecx$/;"	l
ffff80000010169f	kernel.asm	/^ffff80000010169f:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001016a4	kernel.asm	/^ffff8000001016a4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001016a7	kernel.asm	/^ffff8000001016a7:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff8000001016ae	kernel.asm	/^ffff8000001016ae:	80 ff ff $/;"	l
ffff8000001016b1	kernel.asm	/^ffff8000001016b1:	ff d0                	callq  *%rax$/;"	l
ffff8000001016b3	kernel.asm	/^ffff8000001016b3:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff8000001016b6	kernel.asm	/^ffff8000001016b6:	0f 85 ee 04 00 00    	jne    ffff800000101baa <exec+0x5af>$/;"	l
ffff8000001016bc	kernel.asm	/^ffff8000001016bc:	8b 85 50 fe ff ff    	mov    -0x1b0(%rbp),%eax$/;"	l
ffff8000001016c2	kernel.asm	/^ffff8000001016c2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax$/;"	l
ffff8000001016c7	kernel.asm	/^ffff8000001016c7:	0f 85 e0 04 00 00    	jne    ffff800000101bad <exec+0x5b2>$/;"	l
ffff8000001016cd	kernel.asm	/^ffff8000001016cd:	48 b8 85 bd 10 00 00 	movabs $0xffff80000010bd85,%rax$/;"	l
ffff8000001016d4	kernel.asm	/^ffff8000001016d4:	80 ff ff $/;"	l
ffff8000001016d7	kernel.asm	/^ffff8000001016d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001016d9	kernel.asm	/^ffff8000001016d9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)$/;"	l
ffff8000001016dd	kernel.asm	/^ffff8000001016dd:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff8000001016e2	kernel.asm	/^ffff8000001016e2:	0f 84 c8 04 00 00    	je     ffff800000101bb0 <exec+0x5b5>$/;"	l
ffff8000001016e8	kernel.asm	/^ffff8000001016e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)$/;"	l
ffff8000001016ef	kernel.asm	/^ffff8000001016ef:	00 $/;"	l
ffff8000001016f0	kernel.asm	/^ffff8000001016f0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001016f7	kernel.asm	/^ffff8000001016f7:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax$/;"	l
ffff8000001016fe	kernel.asm	/^ffff8000001016fe:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000101701	kernel.asm	/^ffff800000101701:	e9 13 01 00 00       	jmpq   ffff800000101819 <exec+0x21e>$/;"	l
ffff800000101706	kernel.asm	/^ffff800000101706:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000101709	kernel.asm	/^ffff800000101709:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi$/;"	l
ffff800000101710	kernel.asm	/^ffff800000101710:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101714	kernel.asm	/^ffff800000101714:	b9 38 00 00 00       	mov    $0x38,%ecx$/;"	l
ffff800000101719	kernel.asm	/^ffff800000101719:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010171c	kernel.asm	/^ffff80000010171c:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff800000101723	kernel.asm	/^ffff800000101723:	80 ff ff $/;"	l
ffff800000101726	kernel.asm	/^ffff800000101726:	ff d0                	callq  *%rax$/;"	l
ffff800000101728	kernel.asm	/^ffff800000101728:	83 f8 38             	cmp    $0x38,%eax$/;"	l
ffff80000010172b	kernel.asm	/^ffff80000010172b:	0f 85 82 04 00 00    	jne    ffff800000101bb3 <exec+0x5b8>$/;"	l
ffff800000101731	kernel.asm	/^ffff800000101731:	8b 85 10 fe ff ff    	mov    -0x1f0(%rbp),%eax$/;"	l
ffff800000101737	kernel.asm	/^ffff800000101737:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff80000010173a	kernel.asm	/^ffff80000010173a:	0f 85 cb 00 00 00    	jne    ffff80000010180b <exec+0x210>$/;"	l
ffff800000101740	kernel.asm	/^ffff800000101740:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx$/;"	l
ffff800000101747	kernel.asm	/^ffff800000101747:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff80000010174e	kernel.asm	/^ffff80000010174e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000101751	kernel.asm	/^ffff800000101751:	0f 82 5f 04 00 00    	jb     ffff800000101bb6 <exec+0x5bb>$/;"	l
ffff800000101757	kernel.asm	/^ffff800000101757:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx$/;"	l
ffff80000010175e	kernel.asm	/^ffff80000010175e:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff800000101765	kernel.asm	/^ffff800000101765:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000101768	kernel.asm	/^ffff800000101768:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff80000010176f	kernel.asm	/^ffff80000010176f:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000101772	kernel.asm	/^ffff800000101772:	0f 82 41 04 00 00    	jb     ffff800000101bb9 <exec+0x5be>$/;"	l
ffff800000101778	kernel.asm	/^ffff800000101778:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff80000010177f	kernel.asm	/^ffff80000010177f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000101781	kernel.asm	/^ffff800000101781:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax$/;"	l
ffff800000101788	kernel.asm	/^ffff800000101788:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010178a	kernel.asm	/^ffff80000010178a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010178e	kernel.asm	/^ffff80000010178e:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000101790	kernel.asm	/^ffff800000101790:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101794	kernel.asm	/^ffff800000101794:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000101796	kernel.asm	/^ffff800000101796:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101799	kernel.asm	/^ffff800000101799:	48 b8 dd c4 10 00 00 	movabs $0xffff80000010c4dd,%rax$/;"	l
ffff8000001017a0	kernel.asm	/^ffff8000001017a0:	80 ff ff $/;"	l
ffff8000001017a3	kernel.asm	/^ffff8000001017a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001017a5	kernel.asm	/^ffff8000001017a5:	48 98                	cltq   $/;"	l
ffff8000001017a7	kernel.asm	/^ffff8000001017a7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001017ab	kernel.asm	/^ffff8000001017ab:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff8000001017b0	kernel.asm	/^ffff8000001017b0:	0f 84 06 04 00 00    	je     ffff800000101bbc <exec+0x5c1>$/;"	l
ffff8000001017b6	kernel.asm	/^ffff8000001017b6:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001017bd	kernel.asm	/^ffff8000001017bd:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff8000001017c2	kernel.asm	/^ffff8000001017c2:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001017c5	kernel.asm	/^ffff8000001017c5:	0f 85 f4 03 00 00    	jne    ffff800000101bbf <exec+0x5c4>$/;"	l
ffff8000001017cb	kernel.asm	/^ffff8000001017cb:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax$/;"	l
ffff8000001017d2	kernel.asm	/^ffff8000001017d2:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001017d4	kernel.asm	/^ffff8000001017d4:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax$/;"	l
ffff8000001017db	kernel.asm	/^ffff8000001017db:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001017dd	kernel.asm	/^ffff8000001017dd:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax$/;"	l
ffff8000001017e4	kernel.asm	/^ffff8000001017e4:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001017e7	kernel.asm	/^ffff8000001017e7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx$/;"	l
ffff8000001017eb	kernel.asm	/^ffff8000001017eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001017ef	kernel.asm	/^ffff8000001017ef:	41 89 f8             	mov    %edi,%r8d$/;"	l
ffff8000001017f2	kernel.asm	/^ffff8000001017f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001017f5	kernel.asm	/^ffff8000001017f5:	48 b8 bb c3 10 00 00 	movabs $0xffff80000010c3bb,%rax$/;"	l
ffff8000001017fc	kernel.asm	/^ffff8000001017fc:	80 ff ff $/;"	l
ffff8000001017ff	kernel.asm	/^ffff8000001017ff:	ff d0                	callq  *%rax$/;"	l
ffff800000101801	kernel.asm	/^ffff800000101801:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101803	kernel.asm	/^ffff800000101803:	0f 88 b9 03 00 00    	js     ffff800000101bc2 <exec+0x5c7>$/;"	l
ffff800000101809	kernel.asm	/^ffff800000101809:	eb 01                	jmp    ffff80000010180c <exec+0x211>$/;"	l
ffff80000010180b	kernel.asm	/^ffff80000010180b:	90                   	nop$/;"	l
ffff80000010180c	kernel.asm	/^ffff80000010180c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)$/;"	l
ffff800000101810	kernel.asm	/^ffff800000101810:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000101813	kernel.asm	/^ffff800000101813:	83 c0 38             	add    $0x38,%eax$/;"	l
ffff800000101816	kernel.asm	/^ffff800000101816:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000101819	kernel.asm	/^ffff800000101819:	0f b7 85 88 fe ff ff 	movzwl -0x178(%rbp),%eax$/;"	l
ffff800000101820	kernel.asm	/^ffff800000101820:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff800000101823	kernel.asm	/^ffff800000101823:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000101826	kernel.asm	/^ffff800000101826:	0f 8f da fe ff ff    	jg     ffff800000101706 <exec+0x10b>$/;"	l
ffff80000010182c	kernel.asm	/^ffff80000010182c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101830	kernel.asm	/^ffff800000101830:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101833	kernel.asm	/^ffff800000101833:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff80000010183a	kernel.asm	/^ffff80000010183a:	80 ff ff $/;"	l
ffff80000010183d	kernel.asm	/^ffff80000010183d:	ff d0                	callq  *%rax$/;"	l
ffff80000010183f	kernel.asm	/^ffff80000010183f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101844	kernel.asm	/^ffff800000101844:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff80000010184b	kernel.asm	/^ffff80000010184b:	80 ff ff $/;"	l
ffff80000010184e	kernel.asm	/^ffff80000010184e:	ff d2                	callq  *%rdx$/;"	l
ffff800000101850	kernel.asm	/^ffff800000101850:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)$/;"	l
ffff800000101857	kernel.asm	/^ffff800000101857:	00 $/;"	l
ffff800000101858	kernel.asm	/^ffff800000101858:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010185c	kernel.asm	/^ffff80000010185c:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff800000101862	kernel.asm	/^ffff800000101862:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff800000101868	kernel.asm	/^ffff800000101868:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010186c	kernel.asm	/^ffff80000010186c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000101870	kernel.asm	/^ffff800000101870:	8d 90 00 20 00 00    	lea    0x2000(%rax),%edx$/;"	l
ffff800000101876	kernel.asm	/^ffff800000101876:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010187a	kernel.asm	/^ffff80000010187a:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010187c	kernel.asm	/^ffff80000010187c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101880	kernel.asm	/^ffff800000101880:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000101882	kernel.asm	/^ffff800000101882:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101885	kernel.asm	/^ffff800000101885:	48 b8 dd c4 10 00 00 	movabs $0xffff80000010c4dd,%rax$/;"	l
ffff80000010188c	kernel.asm	/^ffff80000010188c:	80 ff ff $/;"	l
ffff80000010188f	kernel.asm	/^ffff80000010188f:	ff d0                	callq  *%rax$/;"	l
ffff800000101891	kernel.asm	/^ffff800000101891:	48 98                	cltq   $/;"	l
ffff800000101893	kernel.asm	/^ffff800000101893:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000101897	kernel.asm	/^ffff800000101897:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff80000010189c	kernel.asm	/^ffff80000010189c:	0f 84 23 03 00 00    	je     ffff800000101bc5 <exec+0x5ca>$/;"	l
ffff8000001018a2	kernel.asm	/^ffff8000001018a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001018a6	kernel.asm	/^ffff8000001018a6:	48 2d 00 20 00 00    	sub    $0x2000,%rax$/;"	l
ffff8000001018ac	kernel.asm	/^ffff8000001018ac:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001018af	kernel.asm	/^ffff8000001018af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff8000001018b3	kernel.asm	/^ffff8000001018b3:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001018b6	kernel.asm	/^ffff8000001018b6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001018b9	kernel.asm	/^ffff8000001018b9:	48 b8 f8 c8 10 00 00 	movabs $0xffff80000010c8f8,%rax$/;"	l
ffff8000001018c0	kernel.asm	/^ffff8000001018c0:	80 ff ff $/;"	l
ffff8000001018c3	kernel.asm	/^ffff8000001018c3:	ff d0                	callq  *%rax$/;"	l
ffff8000001018c5	kernel.asm	/^ffff8000001018c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001018c9	kernel.asm	/^ffff8000001018c9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff8000001018cd	kernel.asm	/^ffff8000001018cd:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)$/;"	l
ffff8000001018d4	kernel.asm	/^ffff8000001018d4:	00 $/;"	l
ffff8000001018d5	kernel.asm	/^ffff8000001018d5:	e9 ca 00 00 00       	jmpq   ffff8000001019a4 <exec+0x3a9>$/;"	l
ffff8000001018da	kernel.asm	/^ffff8000001018da:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)$/;"	l
ffff8000001018df	kernel.asm	/^ffff8000001018df:	0f 87 e3 02 00 00    	ja     ffff800000101bc8 <exec+0x5cd>$/;"	l
ffff8000001018e5	kernel.asm	/^ffff8000001018e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001018e9	kernel.asm	/^ffff8000001018e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001018f0	kernel.asm	/^ffff8000001018f0:	00 $/;"	l
ffff8000001018f1	kernel.asm	/^ffff8000001018f1:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff8000001018f8	kernel.asm	/^ffff8000001018f8:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001018fb	kernel.asm	/^ffff8000001018fb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001018fe	kernel.asm	/^ffff8000001018fe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101901	kernel.asm	/^ffff800000101901:	48 b8 7a 7b 10 00 00 	movabs $0xffff800000107b7a,%rax$/;"	l
ffff800000101908	kernel.asm	/^ffff800000101908:	80 ff ff $/;"	l
ffff80000010190b	kernel.asm	/^ffff80000010190b:	ff d0                	callq  *%rax$/;"	l
ffff80000010190d	kernel.asm	/^ffff80000010190d:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000101910	kernel.asm	/^ffff800000101910:	48 98                	cltq   $/;"	l
ffff800000101912	kernel.asm	/^ffff800000101912:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff800000101916	kernel.asm	/^ffff800000101916:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000101919	kernel.asm	/^ffff800000101919:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010191c	kernel.asm	/^ffff80000010191c:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101920	kernel.asm	/^ffff800000101920:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff800000101924	kernel.asm	/^ffff800000101924:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101928	kernel.asm	/^ffff800000101928:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010192f	kernel.asm	/^ffff80000010192f:	00 $/;"	l
ffff800000101930	kernel.asm	/^ffff800000101930:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101937	kernel.asm	/^ffff800000101937:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010193a	kernel.asm	/^ffff80000010193a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010193d	kernel.asm	/^ffff80000010193d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101940	kernel.asm	/^ffff800000101940:	48 b8 7a 7b 10 00 00 	movabs $0xffff800000107b7a,%rax$/;"	l
ffff800000101947	kernel.asm	/^ffff800000101947:	80 ff ff $/;"	l
ffff80000010194a	kernel.asm	/^ffff80000010194a:	ff d0                	callq  *%rax$/;"	l
ffff80000010194c	kernel.asm	/^ffff80000010194c:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010194f	kernel.asm	/^ffff80000010194f:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000101951	kernel.asm	/^ffff800000101951:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101955	kernel.asm	/^ffff800000101955:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010195c	kernel.asm	/^ffff80000010195c:	00 $/;"	l
ffff80000010195d	kernel.asm	/^ffff80000010195d:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff800000101964	kernel.asm	/^ffff800000101964:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000101967	kernel.asm	/^ffff800000101967:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff80000010196a	kernel.asm	/^ffff80000010196a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010196e	kernel.asm	/^ffff80000010196e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000101970	kernel.asm	/^ffff800000101970:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101974	kernel.asm	/^ffff800000101974:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101977	kernel.asm	/^ffff800000101977:	48 b8 61 cb 10 00 00 	movabs $0xffff80000010cb61,%rax$/;"	l
ffff80000010197e	kernel.asm	/^ffff80000010197e:	80 ff ff $/;"	l
ffff800000101981	kernel.asm	/^ffff800000101981:	ff d0                	callq  *%rax$/;"	l
ffff800000101983	kernel.asm	/^ffff800000101983:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101985	kernel.asm	/^ffff800000101985:	0f 88 40 02 00 00    	js     ffff800000101bcb <exec+0x5d0>$/;"	l
ffff80000010198b	kernel.asm	/^ffff80000010198b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010198f	kernel.asm	/^ffff80000010198f:	48 8d 50 03          	lea    0x3(%rax),%rdx$/;"	l
ffff800000101993	kernel.asm	/^ffff800000101993:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000101997	kernel.asm	/^ffff800000101997:	48 89 84 d5 90 fe ff 	mov    %rax,-0x170(%rbp,%rdx,8)$/;"	l
ffff80000010199e	kernel.asm	/^ffff80000010199e:	ff $/;"	l
ffff80000010199f	kernel.asm	/^ffff80000010199f:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)$/;"	l
ffff8000001019a4	kernel.asm	/^ffff8000001019a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001019a8	kernel.asm	/^ffff8000001019a8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff8000001019af	kernel.asm	/^ffff8000001019af:	00 $/;"	l
ffff8000001019b0	kernel.asm	/^ffff8000001019b0:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax$/;"	l
ffff8000001019b7	kernel.asm	/^ffff8000001019b7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001019ba	kernel.asm	/^ffff8000001019ba:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001019bd	kernel.asm	/^ffff8000001019bd:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001019c0	kernel.asm	/^ffff8000001019c0:	0f 85 14 ff ff ff    	jne    ffff8000001018da <exec+0x2df>$/;"	l
ffff8000001019c6	kernel.asm	/^ffff8000001019c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001019ca	kernel.asm	/^ffff8000001019ca:	48 83 c0 03          	add    $0x3,%rax$/;"	l
ffff8000001019ce	kernel.asm	/^ffff8000001019ce:	48 c7 84 c5 90 fe ff 	movq   $0x0,-0x170(%rbp,%rax,8)$/;"	l
ffff8000001019d5	kernel.asm	/^ffff8000001019d5:	ff 00 00 00 00 $/;"	l
ffff8000001019da	kernel.asm	/^ffff8000001019da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001019df	kernel.asm	/^ffff8000001019df:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)$/;"	l
ffff8000001019e6	kernel.asm	/^ffff8000001019e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001019ea	kernel.asm	/^ffff8000001019ea:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)$/;"	l
ffff8000001019f1	kernel.asm	/^ffff8000001019f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001019f5	kernel.asm	/^ffff8000001019f5:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff8000001019f9	kernel.asm	/^ffff8000001019f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000101a00	kernel.asm	/^ffff800000101a00:	00 $/;"	l
ffff800000101a01	kernel.asm	/^ffff800000101a01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000101a05	kernel.asm	/^ffff800000101a05:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff800000101a08	kernel.asm	/^ffff800000101a08:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)$/;"	l
ffff800000101a0f	kernel.asm	/^ffff800000101a0f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101a16	kernel.asm	/^ffff800000101a16:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101a1a	kernel.asm	/^ffff800000101a1a:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101a1e	kernel.asm	/^ffff800000101a1e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000101a22	kernel.asm	/^ffff800000101a22:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff800000101a26	kernel.asm	/^ffff800000101a26:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101a2d	kernel.asm	/^ffff800000101a2d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101a31	kernel.asm	/^ffff800000101a31:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101a35	kernel.asm	/^ffff800000101a35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000101a39	kernel.asm	/^ffff800000101a39:	48 83 c2 01          	add    $0x1,%rdx$/;"	l
ffff800000101a3d	kernel.asm	/^ffff800000101a3d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx$/;"	l
ffff800000101a44	kernel.asm	/^ffff800000101a44:	00 $/;"	l
ffff800000101a45	kernel.asm	/^ffff800000101a45:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff800000101a49	kernel.asm	/^ffff800000101a49:	48 29 ca             	sub    %rcx,%rdx$/;"	l
ffff800000101a4c	kernel.asm	/^ffff800000101a4c:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff800000101a50	kernel.asm	/^ffff800000101a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101a54	kernel.asm	/^ffff800000101a54:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff800000101a58	kernel.asm	/^ffff800000101a58:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff800000101a5c	kernel.asm	/^ffff800000101a5c:	48 29 45 d0          	sub    %rax,-0x30(%rbp)$/;"	l
ffff800000101a60	kernel.asm	/^ffff800000101a60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101a64	kernel.asm	/^ffff800000101a64:	48 83 c0 04          	add    $0x4,%rax$/;"	l
ffff800000101a68	kernel.asm	/^ffff800000101a68:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx$/;"	l
ffff800000101a6f	kernel.asm	/^ffff800000101a6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000101a73	kernel.asm	/^ffff800000101a73:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000101a75	kernel.asm	/^ffff800000101a75:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx$/;"	l
ffff800000101a7c	kernel.asm	/^ffff800000101a7c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101a80	kernel.asm	/^ffff800000101a80:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101a83	kernel.asm	/^ffff800000101a83:	48 b8 61 cb 10 00 00 	movabs $0xffff80000010cb61,%rax$/;"	l
ffff800000101a8a	kernel.asm	/^ffff800000101a8a:	80 ff ff $/;"	l
ffff800000101a8d	kernel.asm	/^ffff800000101a8d:	ff d0                	callq  *%rax$/;"	l
ffff800000101a8f	kernel.asm	/^ffff800000101a8f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101a91	kernel.asm	/^ffff800000101a91:	0f 88 37 01 00 00    	js     ffff800000101bce <exec+0x5d3>$/;"	l
ffff800000101a97	kernel.asm	/^ffff800000101a97:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax$/;"	l
ffff800000101a9e	kernel.asm	/^ffff800000101a9e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101aa2	kernel.asm	/^ffff800000101aa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101aa6	kernel.asm	/^ffff800000101aa6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101aaa	kernel.asm	/^ffff800000101aaa:	eb 1c                	jmp    ffff800000101ac8 <exec+0x4cd>$/;"	l
ffff800000101aac	kernel.asm	/^ffff800000101aac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ab0	kernel.asm	/^ffff800000101ab0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101ab3	kernel.asm	/^ffff800000101ab3:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000101ab5	kernel.asm	/^ffff800000101ab5:	75 0c                	jne    ffff800000101ac3 <exec+0x4c8>$/;"	l
ffff800000101ab7	kernel.asm	/^ffff800000101ab7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101abb	kernel.asm	/^ffff800000101abb:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000101abf	kernel.asm	/^ffff800000101abf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101ac3	kernel.asm	/^ffff800000101ac3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000101ac8	kernel.asm	/^ffff800000101ac8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101acc	kernel.asm	/^ffff800000101acc:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000101acf	kernel.asm	/^ffff800000101acf:	84 c0                	test   %al,%al$/;"	l
ffff800000101ad1	kernel.asm	/^ffff800000101ad1:	75 d9                	jne    ffff800000101aac <exec+0x4b1>$/;"	l
ffff800000101ad3	kernel.asm	/^ffff800000101ad3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101ada	kernel.asm	/^ffff800000101ada:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101ade	kernel.asm	/^ffff800000101ade:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000101ae5	kernel.asm	/^ffff800000101ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000101ae9	kernel.asm	/^ffff800000101ae9:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff800000101aee	kernel.asm	/^ffff800000101aee:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000101af1	kernel.asm	/^ffff800000101af1:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000101af4	kernel.asm	/^ffff800000101af4:	48 b8 18 7b 10 00 00 	movabs $0xffff800000107b18,%rax$/;"	l
ffff800000101afb	kernel.asm	/^ffff800000101afb:	80 ff ff $/;"	l
ffff800000101afe	kernel.asm	/^ffff800000101afe:	ff d0                	callq  *%rax$/;"	l
ffff800000101b00	kernel.asm	/^ffff800000101b00:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b07	kernel.asm	/^ffff800000101b07:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b0b	kernel.asm	/^ffff800000101b0b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx$/;"	l
ffff800000101b0f	kernel.asm	/^ffff800000101b0f:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000101b13	kernel.asm	/^ffff800000101b13:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b1a	kernel.asm	/^ffff800000101b1a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b1e	kernel.asm	/^ffff800000101b1e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000101b22	kernel.asm	/^ffff800000101b22:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000101b25	kernel.asm	/^ffff800000101b25:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b2c	kernel.asm	/^ffff800000101b2c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b30	kernel.asm	/^ffff800000101b30:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101b34	kernel.asm	/^ffff800000101b34:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff800000101b3b	kernel.asm	/^ffff800000101b3b:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)$/;"	l
ffff800000101b42	kernel.asm	/^ffff800000101b42:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b49	kernel.asm	/^ffff800000101b49:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b4d	kernel.asm	/^ffff800000101b4d:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101b51	kernel.asm	/^ffff800000101b51:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx$/;"	l
ffff800000101b58	kernel.asm	/^ffff800000101b58:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000101b5c	kernel.asm	/^ffff800000101b5c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b63	kernel.asm	/^ffff800000101b63:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b67	kernel.asm	/^ffff800000101b67:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000101b6b	kernel.asm	/^ffff800000101b6b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff800000101b6f	kernel.asm	/^ffff800000101b6f:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)$/;"	l
ffff800000101b76	kernel.asm	/^ffff800000101b76:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000101b7d	kernel.asm	/^ffff800000101b7d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000101b81	kernel.asm	/^ffff800000101b81:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101b84	kernel.asm	/^ffff800000101b84:	48 b8 2b bf 10 00 00 	movabs $0xffff80000010bf2b,%rax$/;"	l
ffff800000101b8b	kernel.asm	/^ffff800000101b8b:	80 ff ff $/;"	l
ffff800000101b8e	kernel.asm	/^ffff800000101b8e:	ff d0                	callq  *%rax$/;"	l
ffff800000101b90	kernel.asm	/^ffff800000101b90:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000101b94	kernel.asm	/^ffff800000101b94:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101b97	kernel.asm	/^ffff800000101b97:	48 b8 27 c7 10 00 00 	movabs $0xffff80000010c727,%rax$/;"	l
ffff800000101b9e	kernel.asm	/^ffff800000101b9e:	80 ff ff $/;"	l
ffff800000101ba1	kernel.asm	/^ffff800000101ba1:	ff d0                	callq  *%rax$/;"	l
ffff800000101ba3	kernel.asm	/^ffff800000101ba3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101ba8	kernel.asm	/^ffff800000101ba8:	eb 6f                	jmp    ffff800000101c19 <exec+0x61e>$/;"	l
ffff800000101baa	kernel.asm	/^ffff800000101baa:	90                   	nop$/;"	l
ffff800000101bab	kernel.asm	/^ffff800000101bab:	eb 22                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bad	kernel.asm	/^ffff800000101bad:	90                   	nop$/;"	l
ffff800000101bae	kernel.asm	/^ffff800000101bae:	eb 1f                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bb0	kernel.asm	/^ffff800000101bb0:	90                   	nop$/;"	l
ffff800000101bb1	kernel.asm	/^ffff800000101bb1:	eb 1c                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bb3	kernel.asm	/^ffff800000101bb3:	90                   	nop$/;"	l
ffff800000101bb4	kernel.asm	/^ffff800000101bb4:	eb 19                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bb6	kernel.asm	/^ffff800000101bb6:	90                   	nop$/;"	l
ffff800000101bb7	kernel.asm	/^ffff800000101bb7:	eb 16                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bb9	kernel.asm	/^ffff800000101bb9:	90                   	nop$/;"	l
ffff800000101bba	kernel.asm	/^ffff800000101bba:	eb 13                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bbc	kernel.asm	/^ffff800000101bbc:	90                   	nop$/;"	l
ffff800000101bbd	kernel.asm	/^ffff800000101bbd:	eb 10                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bbf	kernel.asm	/^ffff800000101bbf:	90                   	nop$/;"	l
ffff800000101bc0	kernel.asm	/^ffff800000101bc0:	eb 0d                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bc2	kernel.asm	/^ffff800000101bc2:	90                   	nop$/;"	l
ffff800000101bc3	kernel.asm	/^ffff800000101bc3:	eb 0a                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bc5	kernel.asm	/^ffff800000101bc5:	90                   	nop$/;"	l
ffff800000101bc6	kernel.asm	/^ffff800000101bc6:	eb 07                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bc8	kernel.asm	/^ffff800000101bc8:	90                   	nop$/;"	l
ffff800000101bc9	kernel.asm	/^ffff800000101bc9:	eb 04                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bcb	kernel.asm	/^ffff800000101bcb:	90                   	nop$/;"	l
ffff800000101bcc	kernel.asm	/^ffff800000101bcc:	eb 01                	jmp    ffff800000101bcf <exec+0x5d4>$/;"	l
ffff800000101bce	kernel.asm	/^ffff800000101bce:	90                   	nop$/;"	l
ffff800000101bcf	kernel.asm	/^ffff800000101bcf:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)$/;"	l
ffff800000101bd4	kernel.asm	/^ffff800000101bd4:	74 13                	je     ffff800000101be9 <exec+0x5ee>$/;"	l
ffff800000101bd6	kernel.asm	/^ffff800000101bd6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff800000101bda	kernel.asm	/^ffff800000101bda:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101bdd	kernel.asm	/^ffff800000101bdd:	48 b8 27 c7 10 00 00 	movabs $0xffff80000010c727,%rax$/;"	l
ffff800000101be4	kernel.asm	/^ffff800000101be4:	80 ff ff $/;"	l
ffff800000101be7	kernel.asm	/^ffff800000101be7:	ff d0                	callq  *%rax$/;"	l
ffff800000101be9	kernel.asm	/^ffff800000101be9:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff800000101bee	kernel.asm	/^ffff800000101bee:	74 24                	je     ffff800000101c14 <exec+0x619>$/;"	l
ffff800000101bf0	kernel.asm	/^ffff800000101bf0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101bf4	kernel.asm	/^ffff800000101bf4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101bf7	kernel.asm	/^ffff800000101bf7:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000101bfe	kernel.asm	/^ffff800000101bfe:	80 ff ff $/;"	l
ffff800000101c01	kernel.asm	/^ffff800000101c01:	ff d0                	callq  *%rax$/;"	l
ffff800000101c03	kernel.asm	/^ffff800000101c03:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101c08	kernel.asm	/^ffff800000101c08:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000101c0f	kernel.asm	/^ffff800000101c0f:	80 ff ff $/;"	l
ffff800000101c12	kernel.asm	/^ffff800000101c12:	ff d2                	callq  *%rdx$/;"	l
ffff800000101c14	kernel.asm	/^ffff800000101c14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101c19	kernel.asm	/^ffff800000101c19:	c9                   	leaveq $/;"	l
ffff800000101c1a	kernel.asm	/^ffff800000101c1a:	c3                   	retq   $/;"	l
ffff800000101c1b	kernel.asm	/^ffff800000101c1b <fileinit>:$/;"	l
ffff800000101c1b	kernel.asm	/^ffff800000101c1b:	55                   	push   %rbp$/;"	l
ffff800000101c1c	kernel.asm	/^ffff800000101c1c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101c1f	kernel.asm	/^ffff800000101c1f:	48 be b0 cc 10 00 00 	movabs $0xffff80000010ccb0,%rsi$/;"	l
ffff800000101c26	kernel.asm	/^ffff800000101c26:	80 ff ff $/;"	l
ffff800000101c29	kernel.asm	/^ffff800000101c29:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101c30	kernel.asm	/^ffff800000101c30:	80 ff ff $/;"	l
ffff800000101c33	kernel.asm	/^ffff800000101c33:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000101c3a	kernel.asm	/^ffff800000101c3a:	80 ff ff $/;"	l
ffff800000101c3d	kernel.asm	/^ffff800000101c3d:	ff d0                	callq  *%rax$/;"	l
ffff800000101c3f	kernel.asm	/^ffff800000101c3f:	90                   	nop$/;"	l
ffff800000101c40	kernel.asm	/^ffff800000101c40:	5d                   	pop    %rbp$/;"	l
ffff800000101c41	kernel.asm	/^ffff800000101c41:	c3                   	retq   $/;"	l
ffff800000101c42	kernel.asm	/^ffff800000101c42 <filealloc>:$/;"	l
ffff800000101c42	kernel.asm	/^ffff800000101c42:	55                   	push   %rbp$/;"	l
ffff800000101c43	kernel.asm	/^ffff800000101c43:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101c46	kernel.asm	/^ffff800000101c46:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101c4a	kernel.asm	/^ffff800000101c4a:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101c51	kernel.asm	/^ffff800000101c51:	80 ff ff $/;"	l
ffff800000101c54	kernel.asm	/^ffff800000101c54:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000101c5b	kernel.asm	/^ffff800000101c5b:	80 ff ff $/;"	l
ffff800000101c5e	kernel.asm	/^ffff800000101c5e:	ff d0                	callq  *%rax$/;"	l
ffff800000101c60	kernel.asm	/^ffff800000101c60:	48 b8 e8 66 11 00 00 	movabs $0xffff8000001166e8,%rax$/;"	l
ffff800000101c67	kernel.asm	/^ffff800000101c67:	80 ff ff $/;"	l
ffff800000101c6a	kernel.asm	/^ffff800000101c6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000101c6e	kernel.asm	/^ffff800000101c6e:	eb 37                	jmp    ffff800000101ca7 <filealloc+0x65>$/;"	l
ffff800000101c70	kernel.asm	/^ffff800000101c70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101c74	kernel.asm	/^ffff800000101c74:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101c77	kernel.asm	/^ffff800000101c77:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101c79	kernel.asm	/^ffff800000101c79:	75 27                	jne    ffff800000101ca2 <filealloc+0x60>$/;"	l
ffff800000101c7b	kernel.asm	/^ffff800000101c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101c7f	kernel.asm	/^ffff800000101c7f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)$/;"	l
ffff800000101c86	kernel.asm	/^ffff800000101c86:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101c8d	kernel.asm	/^ffff800000101c8d:	80 ff ff $/;"	l
ffff800000101c90	kernel.asm	/^ffff800000101c90:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101c97	kernel.asm	/^ffff800000101c97:	80 ff ff $/;"	l
ffff800000101c9a	kernel.asm	/^ffff800000101c9a:	ff d0                	callq  *%rax$/;"	l
ffff800000101c9c	kernel.asm	/^ffff800000101c9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ca0	kernel.asm	/^ffff800000101ca0:	eb 30                	jmp    ffff800000101cd2 <filealloc+0x90>$/;"	l
ffff800000101ca2	kernel.asm	/^ffff800000101ca2:	48 83 45 f8 28       	addq   $0x28,-0x8(%rbp)$/;"	l
ffff800000101ca7	kernel.asm	/^ffff800000101ca7:	48 b8 88 76 11 00 00 	movabs $0xffff800000117688,%rax$/;"	l
ffff800000101cae	kernel.asm	/^ffff800000101cae:	80 ff ff $/;"	l
ffff800000101cb1	kernel.asm	/^ffff800000101cb1:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000101cb5	kernel.asm	/^ffff800000101cb5:	72 b9                	jb     ffff800000101c70 <filealloc+0x2e>$/;"	l
ffff800000101cb7	kernel.asm	/^ffff800000101cb7:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101cbe	kernel.asm	/^ffff800000101cbe:	80 ff ff $/;"	l
ffff800000101cc1	kernel.asm	/^ffff800000101cc1:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101cc8	kernel.asm	/^ffff800000101cc8:	80 ff ff $/;"	l
ffff800000101ccb	kernel.asm	/^ffff800000101ccb:	ff d0                	callq  *%rax$/;"	l
ffff800000101ccd	kernel.asm	/^ffff800000101ccd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101cd2	kernel.asm	/^ffff800000101cd2:	c9                   	leaveq $/;"	l
ffff800000101cd3	kernel.asm	/^ffff800000101cd3:	c3                   	retq   $/;"	l
ffff800000101cd4	kernel.asm	/^ffff800000101cd4 <filedup>:$/;"	l
ffff800000101cd4	kernel.asm	/^ffff800000101cd4:	55                   	push   %rbp$/;"	l
ffff800000101cd5	kernel.asm	/^ffff800000101cd5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101cd8	kernel.asm	/^ffff800000101cd8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101cdc	kernel.asm	/^ffff800000101cdc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101ce0	kernel.asm	/^ffff800000101ce0:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101ce7	kernel.asm	/^ffff800000101ce7:	80 ff ff $/;"	l
ffff800000101cea	kernel.asm	/^ffff800000101cea:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000101cf1	kernel.asm	/^ffff800000101cf1:	80 ff ff $/;"	l
ffff800000101cf4	kernel.asm	/^ffff800000101cf4:	ff d0                	callq  *%rax$/;"	l
ffff800000101cf6	kernel.asm	/^ffff800000101cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101cfa	kernel.asm	/^ffff800000101cfa:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101cfd	kernel.asm	/^ffff800000101cfd:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101cff	kernel.asm	/^ffff800000101cff:	7f 16                	jg     ffff800000101d17 <filedup+0x43>$/;"	l
ffff800000101d01	kernel.asm	/^ffff800000101d01:	48 bf b7 cc 10 00 00 	movabs $0xffff80000010ccb7,%rdi$/;"	l
ffff800000101d08	kernel.asm	/^ffff800000101d08:	80 ff ff $/;"	l
ffff800000101d0b	kernel.asm	/^ffff800000101d0b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000101d12	kernel.asm	/^ffff800000101d12:	80 ff ff $/;"	l
ffff800000101d15	kernel.asm	/^ffff800000101d15:	ff d0                	callq  *%rax$/;"	l
ffff800000101d17	kernel.asm	/^ffff800000101d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d1b	kernel.asm	/^ffff800000101d1b:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101d1e	kernel.asm	/^ffff800000101d1e:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000101d21	kernel.asm	/^ffff800000101d21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d25	kernel.asm	/^ffff800000101d25:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101d28	kernel.asm	/^ffff800000101d28:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101d2f	kernel.asm	/^ffff800000101d2f:	80 ff ff $/;"	l
ffff800000101d32	kernel.asm	/^ffff800000101d32:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101d39	kernel.asm	/^ffff800000101d39:	80 ff ff $/;"	l
ffff800000101d3c	kernel.asm	/^ffff800000101d3c:	ff d0                	callq  *%rax$/;"	l
ffff800000101d3e	kernel.asm	/^ffff800000101d3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101d42	kernel.asm	/^ffff800000101d42:	c9                   	leaveq $/;"	l
ffff800000101d43	kernel.asm	/^ffff800000101d43:	c3                   	retq   $/;"	l
ffff800000101d44	kernel.asm	/^ffff800000101d44 <fileclose>:$/;"	l
ffff800000101d44	kernel.asm	/^ffff800000101d44:	55                   	push   %rbp$/;"	l
ffff800000101d45	kernel.asm	/^ffff800000101d45:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101d48	kernel.asm	/^ffff800000101d48:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000101d4c	kernel.asm	/^ffff800000101d4c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000101d50	kernel.asm	/^ffff800000101d50:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101d57	kernel.asm	/^ffff800000101d57:	80 ff ff $/;"	l
ffff800000101d5a	kernel.asm	/^ffff800000101d5a:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000101d61	kernel.asm	/^ffff800000101d61:	80 ff ff $/;"	l
ffff800000101d64	kernel.asm	/^ffff800000101d64:	ff d0                	callq  *%rax$/;"	l
ffff800000101d66	kernel.asm	/^ffff800000101d66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101d6a	kernel.asm	/^ffff800000101d6a:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101d6d	kernel.asm	/^ffff800000101d6d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101d6f	kernel.asm	/^ffff800000101d6f:	7f 16                	jg     ffff800000101d87 <fileclose+0x43>$/;"	l
ffff800000101d71	kernel.asm	/^ffff800000101d71:	48 bf bf cc 10 00 00 	movabs $0xffff80000010ccbf,%rdi$/;"	l
ffff800000101d78	kernel.asm	/^ffff800000101d78:	80 ff ff $/;"	l
ffff800000101d7b	kernel.asm	/^ffff800000101d7b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000101d82	kernel.asm	/^ffff800000101d82:	80 ff ff $/;"	l
ffff800000101d85	kernel.asm	/^ffff800000101d85:	ff d0                	callq  *%rax$/;"	l
ffff800000101d87	kernel.asm	/^ffff800000101d87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101d8b	kernel.asm	/^ffff800000101d8b:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101d8e	kernel.asm	/^ffff800000101d8e:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000101d91	kernel.asm	/^ffff800000101d91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101d95	kernel.asm	/^ffff800000101d95:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000101d98	kernel.asm	/^ffff800000101d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101d9c	kernel.asm	/^ffff800000101d9c:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000101d9f	kernel.asm	/^ffff800000101d9f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000101da1	kernel.asm	/^ffff800000101da1:	7e 1b                	jle    ffff800000101dbe <fileclose+0x7a>$/;"	l
ffff800000101da3	kernel.asm	/^ffff800000101da3:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101daa	kernel.asm	/^ffff800000101daa:	80 ff ff $/;"	l
ffff800000101dad	kernel.asm	/^ffff800000101dad:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101db4	kernel.asm	/^ffff800000101db4:	80 ff ff $/;"	l
ffff800000101db7	kernel.asm	/^ffff800000101db7:	ff d0                	callq  *%rax$/;"	l
ffff800000101db9	kernel.asm	/^ffff800000101db9:	e9 b9 00 00 00       	jmpq   ffff800000101e77 <fileclose+0x133>$/;"	l
ffff800000101dbe	kernel.asm	/^ffff800000101dbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101dc2	kernel.asm	/^ffff800000101dc2:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000101dc5	kernel.asm	/^ffff800000101dc5:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)$/;"	l
ffff800000101dc9	kernel.asm	/^ffff800000101dc9:	48 8b 50 08          	mov    0x8(%rax),%rdx$/;"	l
ffff800000101dcd	kernel.asm	/^ffff800000101dcd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000101dd1	kernel.asm	/^ffff800000101dd1:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff800000101dd5	kernel.asm	/^ffff800000101dd5:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)$/;"	l
ffff800000101dd9	kernel.asm	/^ffff800000101dd9:	48 8b 50 18          	mov    0x18(%rax),%rdx$/;"	l
ffff800000101ddd	kernel.asm	/^ffff800000101ddd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000101de1	kernel.asm	/^ffff800000101de1:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff800000101de5	kernel.asm	/^ffff800000101de5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000101de9	kernel.asm	/^ffff800000101de9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101ded	kernel.asm	/^ffff800000101ded:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)$/;"	l
ffff800000101df4	kernel.asm	/^ffff800000101df4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000101df8	kernel.asm	/^ffff800000101df8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000101dfe	kernel.asm	/^ffff800000101dfe:	48 bf 80 66 11 00 00 	movabs $0xffff800000116680,%rdi$/;"	l
ffff800000101e05	kernel.asm	/^ffff800000101e05:	80 ff ff $/;"	l
ffff800000101e08	kernel.asm	/^ffff800000101e08:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000101e0f	kernel.asm	/^ffff800000101e0f:	80 ff ff $/;"	l
ffff800000101e12	kernel.asm	/^ffff800000101e12:	ff d0                	callq  *%rax$/;"	l
ffff800000101e14	kernel.asm	/^ffff800000101e14:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101e17	kernel.asm	/^ffff800000101e17:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101e1a	kernel.asm	/^ffff800000101e1a:	75 1e                	jne    ffff800000101e3a <fileclose+0xf6>$/;"	l
ffff800000101e1c	kernel.asm	/^ffff800000101e1c:	0f b6 45 d9          	movzbl -0x27(%rbp),%eax$/;"	l
ffff800000101e20	kernel.asm	/^ffff800000101e20:	0f be d0             	movsbl %al,%edx$/;"	l
ffff800000101e23	kernel.asm	/^ffff800000101e23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000101e27	kernel.asm	/^ffff800000101e27:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000101e29	kernel.asm	/^ffff800000101e29:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101e2c	kernel.asm	/^ffff800000101e2c:	48 b8 00 5f 10 00 00 	movabs $0xffff800000105f00,%rax$/;"	l
ffff800000101e33	kernel.asm	/^ffff800000101e33:	80 ff ff $/;"	l
ffff800000101e36	kernel.asm	/^ffff800000101e36:	ff d0                	callq  *%rax$/;"	l
ffff800000101e38	kernel.asm	/^ffff800000101e38:	eb 3d                	jmp    ffff800000101e77 <fileclose+0x133>$/;"	l
ffff800000101e3a	kernel.asm	/^ffff800000101e3a:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff800000101e3d	kernel.asm	/^ffff800000101e3d:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101e40	kernel.asm	/^ffff800000101e40:	75 35                	jne    ffff800000101e77 <fileclose+0x133>$/;"	l
ffff800000101e42	kernel.asm	/^ffff800000101e42:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101e47	kernel.asm	/^ffff800000101e47:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000101e4e	kernel.asm	/^ffff800000101e4e:	80 ff ff $/;"	l
ffff800000101e51	kernel.asm	/^ffff800000101e51:	ff d2                	callq  *%rdx$/;"	l
ffff800000101e53	kernel.asm	/^ffff800000101e53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101e57	kernel.asm	/^ffff800000101e57:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101e5a	kernel.asm	/^ffff800000101e5a:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff800000101e61	kernel.asm	/^ffff800000101e61:	80 ff ff $/;"	l
ffff800000101e64	kernel.asm	/^ffff800000101e64:	ff d0                	callq  *%rax$/;"	l
ffff800000101e66	kernel.asm	/^ffff800000101e66:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101e6b	kernel.asm	/^ffff800000101e6b:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000101e72	kernel.asm	/^ffff800000101e72:	80 ff ff $/;"	l
ffff800000101e75	kernel.asm	/^ffff800000101e75:	ff d2                	callq  *%rdx$/;"	l
ffff800000101e77	kernel.asm	/^ffff800000101e77:	c9                   	leaveq $/;"	l
ffff800000101e78	kernel.asm	/^ffff800000101e78:	c3                   	retq   $/;"	l
ffff800000101e79	kernel.asm	/^ffff800000101e79 <fileioctl>:$/;"	l
ffff800000101e79	kernel.asm	/^ffff800000101e79:	55                   	push   %rbp$/;"	l
ffff800000101e7a	kernel.asm	/^ffff800000101e7a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101e7d	kernel.asm	/^ffff800000101e7d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101e81	kernel.asm	/^ffff800000101e81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101e85	kernel.asm	/^ffff800000101e85:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000101e88	kernel.asm	/^ffff800000101e88:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000101e8b	kernel.asm	/^ffff800000101e8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101e8f	kernel.asm	/^ffff800000101e8f:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101e93	kernel.asm	/^ffff800000101e93:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101e9a	kernel.asm	/^ffff800000101e9a:	98                   	cwtl   $/;"	l
ffff800000101e9b	kernel.asm	/^ffff800000101e9b:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101e9e	kernel.asm	/^ffff800000101e9e:	74 07                	je     ffff800000101ea7 <fileioctl+0x2e>$/;"	l
ffff800000101ea0	kernel.asm	/^ffff800000101ea0:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101ea3	kernel.asm	/^ffff800000101ea3:	74 1f                	je     ffff800000101ec4 <fileioctl+0x4b>$/;"	l
ffff800000101ea5	kernel.asm	/^ffff800000101ea5:	eb 3a                	jmp    ffff800000101ee1 <fileioctl+0x68>$/;"	l
ffff800000101ea7	kernel.asm	/^ffff800000101ea7:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000101eaa	kernel.asm	/^ffff800000101eaa:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff800000101ead	kernel.asm	/^ffff800000101ead:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101eb1	kernel.asm	/^ffff800000101eb1:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000101eb3	kernel.asm	/^ffff800000101eb3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101eb6	kernel.asm	/^ffff800000101eb6:	48 b8 69 13 10 00 00 	movabs $0xffff800000101369,%rax$/;"	l
ffff800000101ebd	kernel.asm	/^ffff800000101ebd:	80 ff ff $/;"	l
ffff800000101ec0	kernel.asm	/^ffff800000101ec0:	ff d0                	callq  *%rax$/;"	l
ffff800000101ec2	kernel.asm	/^ffff800000101ec2:	eb 7a                	jmp    ffff800000101f3e <fileioctl+0xc5>$/;"	l
ffff800000101ec4	kernel.asm	/^ffff800000101ec4:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000101ec7	kernel.asm	/^ffff800000101ec7:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff800000101eca	kernel.asm	/^ffff800000101eca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ece	kernel.asm	/^ffff800000101ece:	89 ce                	mov    %ecx,%esi$/;"	l
ffff800000101ed0	kernel.asm	/^ffff800000101ed0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101ed3	kernel.asm	/^ffff800000101ed3:	48 b8 ae 15 10 00 00 	movabs $0xffff8000001015ae,%rax$/;"	l
ffff800000101eda	kernel.asm	/^ffff800000101eda:	80 ff ff $/;"	l
ffff800000101edd	kernel.asm	/^ffff800000101edd:	ff d0                	callq  *%rax$/;"	l
ffff800000101edf	kernel.asm	/^ffff800000101edf:	eb 5d                	jmp    ffff800000101f3e <fileioctl+0xc5>$/;"	l
ffff800000101ee1	kernel.asm	/^ffff800000101ee1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ee5	kernel.asm	/^ffff800000101ee5:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101ee9	kernel.asm	/^ffff800000101ee9:	0f b7 80 98 00 00 00 	movzwl 0x98(%rax),%eax$/;"	l
ffff800000101ef0	kernel.asm	/^ffff800000101ef0:	0f bf c8             	movswl %ax,%ecx$/;"	l
ffff800000101ef3	kernel.asm	/^ffff800000101ef3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101ef7	kernel.asm	/^ffff800000101ef7:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101efb	kernel.asm	/^ffff800000101efb:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000101f02	kernel.asm	/^ffff800000101f02:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000101f05	kernel.asm	/^ffff800000101f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101f09	kernel.asm	/^ffff800000101f09:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f0d	kernel.asm	/^ffff800000101f0d:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101f0f	kernel.asm	/^ffff800000101f0f:	8b 7d f0             	mov    -0x10(%rbp),%edi$/;"	l
ffff800000101f12	kernel.asm	/^ffff800000101f12:	8b 75 f4             	mov    -0xc(%rbp),%esi$/;"	l
ffff800000101f15	kernel.asm	/^ffff800000101f15:	41 89 f9             	mov    %edi,%r9d$/;"	l
ffff800000101f18	kernel.asm	/^ffff800000101f18:	41 89 f0             	mov    %esi,%r8d$/;"	l
ffff800000101f1b	kernel.asm	/^ffff800000101f1b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000101f1d	kernel.asm	/^ffff800000101f1d:	48 bf d0 cc 10 00 00 	movabs $0xffff80000010ccd0,%rdi$/;"	l
ffff800000101f24	kernel.asm	/^ffff800000101f24:	80 ff ff $/;"	l
ffff800000101f27	kernel.asm	/^ffff800000101f27:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101f2c	kernel.asm	/^ffff800000101f2c:	49 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%r10$/;"	l
ffff800000101f33	kernel.asm	/^ffff800000101f33:	80 ff ff $/;"	l
ffff800000101f36	kernel.asm	/^ffff800000101f36:	41 ff d2             	callq  *%r10$/;"	l
ffff800000101f39	kernel.asm	/^ffff800000101f39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101f3e	kernel.asm	/^ffff800000101f3e:	c9                   	leaveq $/;"	l
ffff800000101f3f	kernel.asm	/^ffff800000101f3f:	c3                   	retq   $/;"	l
ffff800000101f40	kernel.asm	/^ffff800000101f40 <filestat>:$/;"	l
ffff800000101f40	kernel.asm	/^ffff800000101f40:	55                   	push   %rbp$/;"	l
ffff800000101f41	kernel.asm	/^ffff800000101f41:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101f44	kernel.asm	/^ffff800000101f44:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000101f48	kernel.asm	/^ffff800000101f48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000101f4c	kernel.asm	/^ffff800000101f4c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000101f50	kernel.asm	/^ffff800000101f50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101f54	kernel.asm	/^ffff800000101f54:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101f56	kernel.asm	/^ffff800000101f56:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000101f59	kernel.asm	/^ffff800000101f59:	75 53                	jne    ffff800000101fae <filestat+0x6e>$/;"	l
ffff800000101f5b	kernel.asm	/^ffff800000101f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101f5f	kernel.asm	/^ffff800000101f5f:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f63	kernel.asm	/^ffff800000101f63:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f66	kernel.asm	/^ffff800000101f66:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000101f6d	kernel.asm	/^ffff800000101f6d:	80 ff ff $/;"	l
ffff800000101f70	kernel.asm	/^ffff800000101f70:	ff d0                	callq  *%rax$/;"	l
ffff800000101f72	kernel.asm	/^ffff800000101f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101f76	kernel.asm	/^ffff800000101f76:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f7a	kernel.asm	/^ffff800000101f7a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000101f7e	kernel.asm	/^ffff800000101f7e:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000101f81	kernel.asm	/^ffff800000101f81:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f84	kernel.asm	/^ffff800000101f84:	48 b8 9d 31 10 00 00 	movabs $0xffff80000010319d,%rax$/;"	l
ffff800000101f8b	kernel.asm	/^ffff800000101f8b:	80 ff ff $/;"	l
ffff800000101f8e	kernel.asm	/^ffff800000101f8e:	ff d0                	callq  *%rax$/;"	l
ffff800000101f90	kernel.asm	/^ffff800000101f90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000101f94	kernel.asm	/^ffff800000101f94:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000101f98	kernel.asm	/^ffff800000101f98:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101f9b	kernel.asm	/^ffff800000101f9b:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000101fa2	kernel.asm	/^ffff800000101fa2:	80 ff ff $/;"	l
ffff800000101fa5	kernel.asm	/^ffff800000101fa5:	ff d0                	callq  *%rax$/;"	l
ffff800000101fa7	kernel.asm	/^ffff800000101fa7:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000101fac	kernel.asm	/^ffff800000101fac:	eb 05                	jmp    ffff800000101fb3 <filestat+0x73>$/;"	l
ffff800000101fae	kernel.asm	/^ffff800000101fae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101fb3	kernel.asm	/^ffff800000101fb3:	c9                   	leaveq $/;"	l
ffff800000101fb4	kernel.asm	/^ffff800000101fb4:	c3                   	retq   $/;"	l
ffff800000101fb5	kernel.asm	/^ffff800000101fb5 <fileread>:$/;"	l
ffff800000101fb5	kernel.asm	/^ffff800000101fb5:	55                   	push   %rbp$/;"	l
ffff800000101fb6	kernel.asm	/^ffff800000101fb6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000101fb9	kernel.asm	/^ffff800000101fb9:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000101fbd	kernel.asm	/^ffff800000101fbd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000101fc1	kernel.asm	/^ffff800000101fc1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000101fc5	kernel.asm	/^ffff800000101fc5:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000101fc8	kernel.asm	/^ffff800000101fc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fcc	kernel.asm	/^ffff800000101fcc:	0f b6 40 08          	movzbl 0x8(%rax),%eax$/;"	l
ffff800000101fd0	kernel.asm	/^ffff800000101fd0:	84 c0                	test   %al,%al$/;"	l
ffff800000101fd2	kernel.asm	/^ffff800000101fd2:	75 0a                	jne    ffff800000101fde <fileread+0x29>$/;"	l
ffff800000101fd4	kernel.asm	/^ffff800000101fd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000101fd9	kernel.asm	/^ffff800000101fd9:	e9 82 01 00 00       	jmpq   ffff800000102160 <fileread+0x1ab>$/;"	l
ffff800000101fde	kernel.asm	/^ffff800000101fde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fe2	kernel.asm	/^ffff800000101fe2:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000101fe4	kernel.asm	/^ffff800000101fe4:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000101fe7	kernel.asm	/^ffff800000101fe7:	75 26                	jne    ffff80000010200f <fileread+0x5a>$/;"	l
ffff800000101fe9	kernel.asm	/^ffff800000101fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000101fed	kernel.asm	/^ffff800000101fed:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000101ff1	kernel.asm	/^ffff800000101ff1:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000101ff4	kernel.asm	/^ffff800000101ff4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff800000101ff8	kernel.asm	/^ffff800000101ff8:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000101ffb	kernel.asm	/^ffff800000101ffb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000101ffe	kernel.asm	/^ffff800000101ffe:	48 b8 11 61 10 00 00 	movabs $0xffff800000106111,%rax$/;"	l
ffff800000102005	kernel.asm	/^ffff800000102005:	80 ff ff $/;"	l
ffff800000102008	kernel.asm	/^ffff800000102008:	ff d0                	callq  *%rax$/;"	l
ffff80000010200a	kernel.asm	/^ffff80000010200a:	e9 51 01 00 00       	jmpq   ffff800000102160 <fileread+0x1ab>$/;"	l
ffff80000010200f	kernel.asm	/^ffff80000010200f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102013	kernel.asm	/^ffff800000102013:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102015	kernel.asm	/^ffff800000102015:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000102018	kernel.asm	/^ffff800000102018:	0f 85 2c 01 00 00    	jne    ffff80000010214a <fileread+0x195>$/;"	l
ffff80000010201e	kernel.asm	/^ffff80000010201e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102022	kernel.asm	/^ffff800000102022:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102026	kernel.asm	/^ffff800000102026:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010202d	kernel.asm	/^ffff80000010202d:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff800000102031	kernel.asm	/^ffff800000102031:	0f 85 9f 00 00 00    	jne    ffff8000001020d6 <fileread+0x121>$/;"	l
ffff800000102037	kernel.asm	/^ffff800000102037:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010203b	kernel.asm	/^ffff80000010203b:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010203f	kernel.asm	/^ffff80000010203f:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102046	kernel.asm	/^ffff800000102046:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102049	kernel.asm	/^ffff800000102049:	78 43                	js     ffff80000010208e <fileread+0xd9>$/;"	l
ffff80000010204b	kernel.asm	/^ffff80000010204b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010204f	kernel.asm	/^ffff80000010204f:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102053	kernel.asm	/^ffff800000102053:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff80000010205a	kernel.asm	/^ffff80000010205a:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff80000010205e	kernel.asm	/^ffff80000010205e:	7f 2e                	jg     ffff80000010208e <fileread+0xd9>$/;"	l
ffff800000102060	kernel.asm	/^ffff800000102060:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102064	kernel.asm	/^ffff800000102064:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102068	kernel.asm	/^ffff800000102068:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff80000010206f	kernel.asm	/^ffff80000010206f:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000102072	kernel.asm	/^ffff800000102072:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff800000102079	kernel.asm	/^ffff800000102079:	80 ff ff $/;"	l
ffff80000010207c	kernel.asm	/^ffff80000010207c:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010207f	kernel.asm	/^ffff80000010207f:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000102083	kernel.asm	/^ffff800000102083:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102086	kernel.asm	/^ffff800000102086:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000102089	kernel.asm	/^ffff800000102089:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010208c	kernel.asm	/^ffff80000010208c:	75 0a                	jne    ffff800000102098 <fileread+0xe3>$/;"	l
ffff80000010208e	kernel.asm	/^ffff80000010208e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102093	kernel.asm	/^ffff800000102093:	e9 c8 00 00 00       	jmpq   ffff800000102160 <fileread+0x1ab>$/;"	l
ffff800000102098	kernel.asm	/^ffff800000102098:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010209c	kernel.asm	/^ffff80000010209c:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001020a0	kernel.asm	/^ffff8000001020a0:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff8000001020a7	kernel.asm	/^ffff8000001020a7:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff8000001020aa	kernel.asm	/^ffff8000001020aa:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff8000001020b1	kernel.asm	/^ffff8000001020b1:	80 ff ff $/;"	l
ffff8000001020b4	kernel.asm	/^ffff8000001020b4:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001020b7	kernel.asm	/^ffff8000001020b7:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff8000001020bb	kernel.asm	/^ffff8000001020bb:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001020be	kernel.asm	/^ffff8000001020be:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001020c1	kernel.asm	/^ffff8000001020c1:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff8000001020c4	kernel.asm	/^ffff8000001020c4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff8000001020c8	kernel.asm	/^ffff8000001020c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff8000001020cc	kernel.asm	/^ffff8000001020cc:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff8000001020cf	kernel.asm	/^ffff8000001020cf:	ff d0                	callq  *%rax$/;"	l
ffff8000001020d1	kernel.asm	/^ffff8000001020d1:	e9 8a 00 00 00       	jmpq   ffff800000102160 <fileread+0x1ab>$/;"	l
ffff8000001020d6	kernel.asm	/^ffff8000001020d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001020da	kernel.asm	/^ffff8000001020da:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001020de	kernel.asm	/^ffff8000001020de:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001020e1	kernel.asm	/^ffff8000001020e1:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001020e8	kernel.asm	/^ffff8000001020e8:	80 ff ff $/;"	l
ffff8000001020eb	kernel.asm	/^ffff8000001020eb:	ff d0                	callq  *%rax$/;"	l
ffff8000001020ed	kernel.asm	/^ffff8000001020ed:	8b 4d dc             	mov    -0x24(%rbp),%ecx$/;"	l
ffff8000001020f0	kernel.asm	/^ffff8000001020f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001020f4	kernel.asm	/^ffff8000001020f4:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff8000001020f7	kernel.asm	/^ffff8000001020f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001020fb	kernel.asm	/^ffff8000001020fb:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001020ff	kernel.asm	/^ffff8000001020ff:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff800000102103	kernel.asm	/^ffff800000102103:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102106	kernel.asm	/^ffff800000102106:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff80000010210d	kernel.asm	/^ffff80000010210d:	80 ff ff $/;"	l
ffff800000102110	kernel.asm	/^ffff800000102110:	ff d0                	callq  *%rax$/;"	l
ffff800000102112	kernel.asm	/^ffff800000102112:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000102115	kernel.asm	/^ffff800000102115:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102119	kernel.asm	/^ffff800000102119:	7e 13                	jle    ffff80000010212e <fileread+0x179>$/;"	l
ffff80000010211b	kernel.asm	/^ffff80000010211b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010211f	kernel.asm	/^ffff80000010211f:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff800000102122	kernel.asm	/^ffff800000102122:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102125	kernel.asm	/^ffff800000102125:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102127	kernel.asm	/^ffff800000102127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010212b	kernel.asm	/^ffff80000010212b:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff80000010212e	kernel.asm	/^ffff80000010212e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102132	kernel.asm	/^ffff800000102132:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102136	kernel.asm	/^ffff800000102136:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102139	kernel.asm	/^ffff800000102139:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000102140	kernel.asm	/^ffff800000102140:	80 ff ff $/;"	l
ffff800000102143	kernel.asm	/^ffff800000102143:	ff d0                	callq  *%rax$/;"	l
ffff800000102145	kernel.asm	/^ffff800000102145:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102148	kernel.asm	/^ffff800000102148:	eb 16                	jmp    ffff800000102160 <fileread+0x1ab>$/;"	l
ffff80000010214a	kernel.asm	/^ffff80000010214a:	48 bf 09 cd 10 00 00 	movabs $0xffff80000010cd09,%rdi$/;"	l
ffff800000102151	kernel.asm	/^ffff800000102151:	80 ff ff $/;"	l
ffff800000102154	kernel.asm	/^ffff800000102154:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010215b	kernel.asm	/^ffff80000010215b:	80 ff ff $/;"	l
ffff80000010215e	kernel.asm	/^ffff80000010215e:	ff d0                	callq  *%rax$/;"	l
ffff800000102160	kernel.asm	/^ffff800000102160:	c9                   	leaveq $/;"	l
ffff800000102161	kernel.asm	/^ffff800000102161:	c3                   	retq   $/;"	l
ffff800000102162	kernel.asm	/^ffff800000102162 <filewrite>:$/;"	l
ffff800000102162	kernel.asm	/^ffff800000102162:	55                   	push   %rbp$/;"	l
ffff800000102163	kernel.asm	/^ffff800000102163:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102166	kernel.asm	/^ffff800000102166:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010216a	kernel.asm	/^ffff80000010216a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010216e	kernel.asm	/^ffff80000010216e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000102172	kernel.asm	/^ffff800000102172:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000102175	kernel.asm	/^ffff800000102175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102179	kernel.asm	/^ffff800000102179:	0f b6 40 09          	movzbl 0x9(%rax),%eax$/;"	l
ffff80000010217d	kernel.asm	/^ffff80000010217d:	84 c0                	test   %al,%al$/;"	l
ffff80000010217f	kernel.asm	/^ffff80000010217f:	75 0a                	jne    ffff80000010218b <filewrite+0x29>$/;"	l
ffff800000102181	kernel.asm	/^ffff800000102181:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102186	kernel.asm	/^ffff800000102186:	e9 27 02 00 00       	jmpq   ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff80000010218b	kernel.asm	/^ffff80000010218b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010218f	kernel.asm	/^ffff80000010218f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102191	kernel.asm	/^ffff800000102191:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000102194	kernel.asm	/^ffff800000102194:	75 26                	jne    ffff8000001021bc <filewrite+0x5a>$/;"	l
ffff800000102196	kernel.asm	/^ffff800000102196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010219a	kernel.asm	/^ffff80000010219a:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010219e	kernel.asm	/^ffff80000010219e:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff8000001021a1	kernel.asm	/^ffff8000001021a1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff8000001021a5	kernel.asm	/^ffff8000001021a5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001021a8	kernel.asm	/^ffff8000001021a8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001021ab	kernel.asm	/^ffff8000001021ab:	48 b8 d2 5f 10 00 00 	movabs $0xffff800000105fd2,%rax$/;"	l
ffff8000001021b2	kernel.asm	/^ffff8000001021b2:	80 ff ff $/;"	l
ffff8000001021b5	kernel.asm	/^ffff8000001021b5:	ff d0                	callq  *%rax$/;"	l
ffff8000001021b7	kernel.asm	/^ffff8000001021b7:	e9 f6 01 00 00       	jmpq   ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff8000001021bc	kernel.asm	/^ffff8000001021bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001021c0	kernel.asm	/^ffff8000001021c0:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001021c2	kernel.asm	/^ffff8000001021c2:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff8000001021c5	kernel.asm	/^ffff8000001021c5:	0f 85 d1 01 00 00    	jne    ffff80000010239c <filewrite+0x23a>$/;"	l
ffff8000001021cb	kernel.asm	/^ffff8000001021cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001021cf	kernel.asm	/^ffff8000001021cf:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001021d3	kernel.asm	/^ffff8000001021d3:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001021da	kernel.asm	/^ffff8000001021da:	66 83 f8 03          	cmp    $0x3,%ax$/;"	l
ffff8000001021de	kernel.asm	/^ffff8000001021de:	0f 85 a7 00 00 00    	jne    ffff80000010228b <filewrite+0x129>$/;"	l
ffff8000001021e4	kernel.asm	/^ffff8000001021e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001021e8	kernel.asm	/^ffff8000001021e8:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001021ec	kernel.asm	/^ffff8000001021ec:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff8000001021f3	kernel.asm	/^ffff8000001021f3:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001021f6	kernel.asm	/^ffff8000001021f6:	78 47                	js     ffff80000010223f <filewrite+0xdd>$/;"	l
ffff8000001021f8	kernel.asm	/^ffff8000001021f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001021fc	kernel.asm	/^ffff8000001021fc:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102200	kernel.asm	/^ffff800000102200:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102207	kernel.asm	/^ffff800000102207:	66 83 f8 09          	cmp    $0x9,%ax$/;"	l
ffff80000010220b	kernel.asm	/^ffff80000010220b:	7f 32                	jg     ffff80000010223f <filewrite+0xdd>$/;"	l
ffff80000010220d	kernel.asm	/^ffff80000010220d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102211	kernel.asm	/^ffff800000102211:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102215	kernel.asm	/^ffff800000102215:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff80000010221c	kernel.asm	/^ffff80000010221c:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff80000010221f	kernel.asm	/^ffff80000010221f:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff800000102226	kernel.asm	/^ffff800000102226:	80 ff ff $/;"	l
ffff800000102229	kernel.asm	/^ffff800000102229:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010222c	kernel.asm	/^ffff80000010222c:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000102230	kernel.asm	/^ffff800000102230:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102233	kernel.asm	/^ffff800000102233:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000102237	kernel.asm	/^ffff800000102237:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010223a	kernel.asm	/^ffff80000010223a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010223d	kernel.asm	/^ffff80000010223d:	75 0a                	jne    ffff800000102249 <filewrite+0xe7>$/;"	l
ffff80000010223f	kernel.asm	/^ffff80000010223f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000102244	kernel.asm	/^ffff800000102244:	e9 69 01 00 00       	jmpq   ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff800000102249	kernel.asm	/^ffff800000102249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010224d	kernel.asm	/^ffff80000010224d:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000102251	kernel.asm	/^ffff800000102251:	0f b7 80 96 00 00 00 	movzwl 0x96(%rax),%eax$/;"	l
ffff800000102258	kernel.asm	/^ffff800000102258:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff80000010225b	kernel.asm	/^ffff80000010225b:	48 b8 e0 65 11 00 00 	movabs $0xffff8000001165e0,%rax$/;"	l
ffff800000102262	kernel.asm	/^ffff800000102262:	80 ff ff $/;"	l
ffff800000102265	kernel.asm	/^ffff800000102265:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000102268	kernel.asm	/^ffff800000102268:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff80000010226c	kernel.asm	/^ffff80000010226c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010226f	kernel.asm	/^ffff80000010226f:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000102273	kernel.asm	/^ffff800000102273:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000102276	kernel.asm	/^ffff800000102276:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000102279	kernel.asm	/^ffff800000102279:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi$/;"	l
ffff80000010227d	kernel.asm	/^ffff80000010227d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000102281	kernel.asm	/^ffff800000102281:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000102284	kernel.asm	/^ffff800000102284:	ff d0                	callq  *%rax$/;"	l
ffff800000102286	kernel.asm	/^ffff800000102286:	e9 27 01 00 00       	jmpq   ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff80000010228b	kernel.asm	/^ffff80000010228b:	c7 45 f4 00 1a 00 00 	movl   $0x1a00,-0xc(%rbp)$/;"	l
ffff800000102292	kernel.asm	/^ffff800000102292:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102299	kernel.asm	/^ffff800000102299:	e9 db 00 00 00       	jmpq   ffff800000102379 <filewrite+0x217>$/;"	l
ffff80000010229e	kernel.asm	/^ffff80000010229e:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001022a1	kernel.asm	/^ffff8000001022a1:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001022a4	kernel.asm	/^ffff8000001022a4:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001022a7	kernel.asm	/^ffff8000001022a7:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001022aa	kernel.asm	/^ffff8000001022aa:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff8000001022ad	kernel.asm	/^ffff8000001022ad:	7e 06                	jle    ffff8000001022b5 <filewrite+0x153>$/;"	l
ffff8000001022af	kernel.asm	/^ffff8000001022af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001022b2	kernel.asm	/^ffff8000001022b2:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001022b5	kernel.asm	/^ffff8000001022b5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001022ba	kernel.asm	/^ffff8000001022ba:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff8000001022c1	kernel.asm	/^ffff8000001022c1:	80 ff ff $/;"	l
ffff8000001022c4	kernel.asm	/^ffff8000001022c4:	ff d2                	callq  *%rdx$/;"	l
ffff8000001022c6	kernel.asm	/^ffff8000001022c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001022ca	kernel.asm	/^ffff8000001022ca:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001022ce	kernel.asm	/^ffff8000001022ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001022d1	kernel.asm	/^ffff8000001022d1:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001022d8	kernel.asm	/^ffff8000001022d8:	80 ff ff $/;"	l
ffff8000001022db	kernel.asm	/^ffff8000001022db:	ff d0                	callq  *%rax$/;"	l
ffff8000001022dd	kernel.asm	/^ffff8000001022dd:	8b 4d f8             	mov    -0x8(%rbp),%ecx$/;"	l
ffff8000001022e0	kernel.asm	/^ffff8000001022e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001022e4	kernel.asm	/^ffff8000001022e4:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff8000001022e7	kernel.asm	/^ffff8000001022e7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001022ea	kernel.asm	/^ffff8000001022ea:	48 63 f0             	movslq %eax,%rsi$/;"	l
ffff8000001022ed	kernel.asm	/^ffff8000001022ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001022f1	kernel.asm	/^ffff8000001022f1:	48 01 c6             	add    %rax,%rsi$/;"	l
ffff8000001022f4	kernel.asm	/^ffff8000001022f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001022f8	kernel.asm	/^ffff8000001022f8:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff8000001022fc	kernel.asm	/^ffff8000001022fc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001022ff	kernel.asm	/^ffff8000001022ff:	48 b8 2e 33 10 00 00 	movabs $0xffff80000010332e,%rax$/;"	l
ffff800000102306	kernel.asm	/^ffff800000102306:	80 ff ff $/;"	l
ffff800000102309	kernel.asm	/^ffff800000102309:	ff d0                	callq  *%rax$/;"	l
ffff80000010230b	kernel.asm	/^ffff80000010230b:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff80000010230e	kernel.asm	/^ffff80000010230e:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000102312	kernel.asm	/^ffff800000102312:	7e 13                	jle    ffff800000102327 <filewrite+0x1c5>$/;"	l
ffff800000102314	kernel.asm	/^ffff800000102314:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102318	kernel.asm	/^ffff800000102318:	8b 50 20             	mov    0x20(%rax),%edx$/;"	l
ffff80000010231b	kernel.asm	/^ffff80000010231b:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010231e	kernel.asm	/^ffff80000010231e:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102320	kernel.asm	/^ffff800000102320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102324	kernel.asm	/^ffff800000102324:	89 50 20             	mov    %edx,0x20(%rax)$/;"	l
ffff800000102327	kernel.asm	/^ffff800000102327:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010232b	kernel.asm	/^ffff80000010232b:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff80000010232f	kernel.asm	/^ffff80000010232f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102332	kernel.asm	/^ffff800000102332:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000102339	kernel.asm	/^ffff800000102339:	80 ff ff $/;"	l
ffff80000010233c	kernel.asm	/^ffff80000010233c:	ff d0                	callq  *%rax$/;"	l
ffff80000010233e	kernel.asm	/^ffff80000010233e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000102343	kernel.asm	/^ffff800000102343:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff80000010234a	kernel.asm	/^ffff80000010234a:	80 ff ff $/;"	l
ffff80000010234d	kernel.asm	/^ffff80000010234d:	ff d2                	callq  *%rdx$/;"	l
ffff80000010234f	kernel.asm	/^ffff80000010234f:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)$/;"	l
ffff800000102353	kernel.asm	/^ffff800000102353:	78 32                	js     ffff800000102387 <filewrite+0x225>$/;"	l
ffff800000102355	kernel.asm	/^ffff800000102355:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000102358	kernel.asm	/^ffff800000102358:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff80000010235b	kernel.asm	/^ffff80000010235b:	74 16                	je     ffff800000102373 <filewrite+0x211>$/;"	l
ffff80000010235d	kernel.asm	/^ffff80000010235d:	48 bf 12 cd 10 00 00 	movabs $0xffff80000010cd12,%rdi$/;"	l
ffff800000102364	kernel.asm	/^ffff800000102364:	80 ff ff $/;"	l
ffff800000102367	kernel.asm	/^ffff800000102367:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010236e	kernel.asm	/^ffff80000010236e:	80 ff ff $/;"	l
ffff800000102371	kernel.asm	/^ffff800000102371:	ff d0                	callq  *%rax$/;"	l
ffff800000102373	kernel.asm	/^ffff800000102373:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000102376	kernel.asm	/^ffff800000102376:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000102379	kernel.asm	/^ffff800000102379:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010237c	kernel.asm	/^ffff80000010237c:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff80000010237f	kernel.asm	/^ffff80000010237f:	0f 8c 19 ff ff ff    	jl     ffff80000010229e <filewrite+0x13c>$/;"	l
ffff800000102385	kernel.asm	/^ffff800000102385:	eb 01                	jmp    ffff800000102388 <filewrite+0x226>$/;"	l
ffff800000102387	kernel.asm	/^ffff800000102387:	90                   	nop$/;"	l
ffff800000102388	kernel.asm	/^ffff800000102388:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010238b	kernel.asm	/^ffff80000010238b:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff80000010238e	kernel.asm	/^ffff80000010238e:	75 05                	jne    ffff800000102395 <filewrite+0x233>$/;"	l
ffff800000102390	kernel.asm	/^ffff800000102390:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000102393	kernel.asm	/^ffff800000102393:	eb 1d                	jmp    ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff800000102395	kernel.asm	/^ffff800000102395:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010239a	kernel.asm	/^ffff80000010239a:	eb 16                	jmp    ffff8000001023b2 <filewrite+0x250>$/;"	l
ffff80000010239c	kernel.asm	/^ffff80000010239c:	48 bf 22 cd 10 00 00 	movabs $0xffff80000010cd22,%rdi$/;"	l
ffff8000001023a3	kernel.asm	/^ffff8000001023a3:	80 ff ff $/;"	l
ffff8000001023a6	kernel.asm	/^ffff8000001023a6:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001023ad	kernel.asm	/^ffff8000001023ad:	80 ff ff $/;"	l
ffff8000001023b0	kernel.asm	/^ffff8000001023b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001023b2	kernel.asm	/^ffff8000001023b2:	c9                   	leaveq $/;"	l
ffff8000001023b3	kernel.asm	/^ffff8000001023b3:	c3                   	retq   $/;"	l
ffff8000001023b4	kernel.asm	/^ffff8000001023b4 <readsb>:$/;"	l
ffff8000001023b4	kernel.asm	/^ffff8000001023b4:	55                   	push   %rbp$/;"	l
ffff8000001023b5	kernel.asm	/^ffff8000001023b5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001023b8	kernel.asm	/^ffff8000001023b8:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001023bc	kernel.asm	/^ffff8000001023bc:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001023bf	kernel.asm	/^ffff8000001023bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001023c3	kernel.asm	/^ffff8000001023c3:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001023c6	kernel.asm	/^ffff8000001023c6:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001023cb	kernel.asm	/^ffff8000001023cb:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001023cd	kernel.asm	/^ffff8000001023cd:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001023d4	kernel.asm	/^ffff8000001023d4:	80 ff ff $/;"	l
ffff8000001023d7	kernel.asm	/^ffff8000001023d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001023d9	kernel.asm	/^ffff8000001023d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001023dd	kernel.asm	/^ffff8000001023dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001023e1	kernel.asm	/^ffff8000001023e1:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff8000001023e8	kernel.asm	/^ffff8000001023e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001023ec	kernel.asm	/^ffff8000001023ec:	ba 1c 00 00 00       	mov    $0x1c,%edx$/;"	l
ffff8000001023f1	kernel.asm	/^ffff8000001023f1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001023f4	kernel.asm	/^ffff8000001023f4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001023f7	kernel.asm	/^ffff8000001023f7:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff8000001023fe	kernel.asm	/^ffff8000001023fe:	80 ff ff $/;"	l
ffff800000102401	kernel.asm	/^ffff800000102401:	ff d0                	callq  *%rax$/;"	l
ffff800000102403	kernel.asm	/^ffff800000102403:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102407	kernel.asm	/^ffff800000102407:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010240a	kernel.asm	/^ffff80000010240a:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102411	kernel.asm	/^ffff800000102411:	80 ff ff $/;"	l
ffff800000102414	kernel.asm	/^ffff800000102414:	ff d0                	callq  *%rax$/;"	l
ffff800000102416	kernel.asm	/^ffff800000102416:	90                   	nop$/;"	l
ffff800000102417	kernel.asm	/^ffff800000102417:	c9                   	leaveq $/;"	l
ffff800000102418	kernel.asm	/^ffff800000102418:	c3                   	retq   $/;"	l
ffff800000102419	kernel.asm	/^ffff800000102419 <bzero>:$/;"	l
ffff800000102419	kernel.asm	/^ffff800000102419:	55                   	push   %rbp$/;"	l
ffff80000010241a	kernel.asm	/^ffff80000010241a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010241d	kernel.asm	/^ffff80000010241d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102421	kernel.asm	/^ffff800000102421:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102424	kernel.asm	/^ffff800000102424:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102427	kernel.asm	/^ffff800000102427:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff80000010242a	kernel.asm	/^ffff80000010242a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010242d	kernel.asm	/^ffff80000010242d:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010242f	kernel.asm	/^ffff80000010242f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102431	kernel.asm	/^ffff800000102431:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102438	kernel.asm	/^ffff800000102438:	80 ff ff $/;"	l
ffff80000010243b	kernel.asm	/^ffff80000010243b:	ff d0                	callq  *%rax$/;"	l
ffff80000010243d	kernel.asm	/^ffff80000010243d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102441	kernel.asm	/^ffff800000102441:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102445	kernel.asm	/^ffff800000102445:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff80000010244b	kernel.asm	/^ffff80000010244b:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000102450	kernel.asm	/^ffff800000102450:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000102455	kernel.asm	/^ffff800000102455:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102458	kernel.asm	/^ffff800000102458:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010245f	kernel.asm	/^ffff80000010245f:	80 ff ff $/;"	l
ffff800000102462	kernel.asm	/^ffff800000102462:	ff d0                	callq  *%rax$/;"	l
ffff800000102464	kernel.asm	/^ffff800000102464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102468	kernel.asm	/^ffff800000102468:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010246b	kernel.asm	/^ffff80000010246b:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff800000102472	kernel.asm	/^ffff800000102472:	80 ff ff $/;"	l
ffff800000102475	kernel.asm	/^ffff800000102475:	ff d0                	callq  *%rax$/;"	l
ffff800000102477	kernel.asm	/^ffff800000102477:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010247b	kernel.asm	/^ffff80000010247b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010247e	kernel.asm	/^ffff80000010247e:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102485	kernel.asm	/^ffff800000102485:	80 ff ff $/;"	l
ffff800000102488	kernel.asm	/^ffff800000102488:	ff d0                	callq  *%rax$/;"	l
ffff80000010248a	kernel.asm	/^ffff80000010248a:	90                   	nop$/;"	l
ffff80000010248b	kernel.asm	/^ffff80000010248b:	c9                   	leaveq $/;"	l
ffff80000010248c	kernel.asm	/^ffff80000010248c:	c3                   	retq   $/;"	l
ffff80000010248d	kernel.asm	/^ffff80000010248d <balloc>:$/;"	l
ffff80000010248d	kernel.asm	/^ffff80000010248d:	55                   	push   %rbp$/;"	l
ffff80000010248e	kernel.asm	/^ffff80000010248e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102491	kernel.asm	/^ffff800000102491:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000102495	kernel.asm	/^ffff800000102495:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000102498	kernel.asm	/^ffff800000102498:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010249f	kernel.asm	/^ffff80000010249f:	00 $/;"	l
ffff8000001024a0	kernel.asm	/^ffff8000001024a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001024a7	kernel.asm	/^ffff8000001024a7:	e9 52 01 00 00       	jmpq   ffff8000001025fe <balloc+0x171>$/;"	l
ffff8000001024ac	kernel.asm	/^ffff8000001024ac:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001024af	kernel.asm	/^ffff8000001024af:	8d 90 ff 0f 00 00    	lea    0xfff(%rax),%edx$/;"	l
ffff8000001024b5	kernel.asm	/^ffff8000001024b5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001024b7	kernel.asm	/^ffff8000001024b7:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001024ba	kernel.asm	/^ffff8000001024ba:	c1 f8 0c             	sar    $0xc,%eax$/;"	l
ffff8000001024bd	kernel.asm	/^ffff8000001024bd:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001024bf	kernel.asm	/^ffff8000001024bf:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff8000001024c6	kernel.asm	/^ffff8000001024c6:	80 ff ff $/;"	l
ffff8000001024c9	kernel.asm	/^ffff8000001024c9:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001024cc	kernel.asm	/^ffff8000001024cc:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001024ce	kernel.asm	/^ffff8000001024ce:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001024d1	kernel.asm	/^ffff8000001024d1:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001024d3	kernel.asm	/^ffff8000001024d3:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001024d5	kernel.asm	/^ffff8000001024d5:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001024dc	kernel.asm	/^ffff8000001024dc:	80 ff ff $/;"	l
ffff8000001024df	kernel.asm	/^ffff8000001024df:	ff d0                	callq  *%rax$/;"	l
ffff8000001024e1	kernel.asm	/^ffff8000001024e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001024e5	kernel.asm	/^ffff8000001024e5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001024ec	kernel.asm	/^ffff8000001024ec:	e9 cc 00 00 00       	jmpq   ffff8000001025bd <balloc+0x130>$/;"	l
ffff8000001024f1	kernel.asm	/^ffff8000001024f1:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001024f4	kernel.asm	/^ffff8000001024f4:	99                   	cltd   $/;"	l
ffff8000001024f5	kernel.asm	/^ffff8000001024f5:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff8000001024f8	kernel.asm	/^ffff8000001024f8:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001024fa	kernel.asm	/^ffff8000001024fa:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff8000001024fd	kernel.asm	/^ffff8000001024fd:	29 d0                	sub    %edx,%eax$/;"	l
ffff8000001024ff	kernel.asm	/^ffff8000001024ff:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff800000102504	kernel.asm	/^ffff800000102504:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102506	kernel.asm	/^ffff800000102506:	d3 e2                	shl    %cl,%edx$/;"	d
ffff800000102508	kernel.asm	/^ffff800000102508:	89 d0                	mov    %edx,%eax$/;"	l
ffff80000010250a	kernel.asm	/^ffff80000010250a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff80000010250d	kernel.asm	/^ffff80000010250d:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000102510	kernel.asm	/^ffff800000102510:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff800000102513	kernel.asm	/^ffff800000102513:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102515	kernel.asm	/^ffff800000102515:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102518	kernel.asm	/^ffff800000102518:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff80000010251b	kernel.asm	/^ffff80000010251b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010251f	kernel.asm	/^ffff80000010251f:	48 98                	cltq   $/;"	l
ffff800000102521	kernel.asm	/^ffff800000102521:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102528	kernel.asm	/^ffff800000102528:	00 $/;"	l
ffff800000102529	kernel.asm	/^ffff800000102529:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010252c	kernel.asm	/^ffff80000010252c:	23 45 ec             	and    -0x14(%rbp),%eax$/;"	l
ffff80000010252f	kernel.asm	/^ffff80000010252f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102531	kernel.asm	/^ffff800000102531:	0f 85 82 00 00 00    	jne    ffff8000001025b9 <balloc+0x12c>$/;"	l
ffff800000102537	kernel.asm	/^ffff800000102537:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010253a	kernel.asm	/^ffff80000010253a:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff80000010253d	kernel.asm	/^ffff80000010253d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010253f	kernel.asm	/^ffff80000010253f:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff800000102542	kernel.asm	/^ffff800000102542:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff800000102545	kernel.asm	/^ffff800000102545:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000102547	kernel.asm	/^ffff800000102547:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010254b	kernel.asm	/^ffff80000010254b:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff80000010254e	kernel.asm	/^ffff80000010254e:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102555	kernel.asm	/^ffff800000102555:	00 $/;"	l
ffff800000102556	kernel.asm	/^ffff800000102556:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102558	kernel.asm	/^ffff800000102558:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010255b	kernel.asm	/^ffff80000010255b:	09 d0                	or     %edx,%eax$/;"	l
ffff80000010255d	kernel.asm	/^ffff80000010255d:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010255f	kernel.asm	/^ffff80000010255f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000102563	kernel.asm	/^ffff800000102563:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102566	kernel.asm	/^ffff800000102566:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff80000010256d	kernel.asm	/^ffff80000010256d:	00 $/;"	l
ffff80000010256e	kernel.asm	/^ffff80000010256e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102572	kernel.asm	/^ffff800000102572:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102575	kernel.asm	/^ffff800000102575:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff80000010257c	kernel.asm	/^ffff80000010257c:	80 ff ff $/;"	l
ffff80000010257f	kernel.asm	/^ffff80000010257f:	ff d0                	callq  *%rax$/;"	l
ffff800000102581	kernel.asm	/^ffff800000102581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102585	kernel.asm	/^ffff800000102585:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102588	kernel.asm	/^ffff800000102588:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010258f	kernel.asm	/^ffff80000010258f:	80 ff ff $/;"	l
ffff800000102592	kernel.asm	/^ffff800000102592:	ff d0                	callq  *%rax$/;"	l
ffff800000102594	kernel.asm	/^ffff800000102594:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000102597	kernel.asm	/^ffff800000102597:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010259a	kernel.asm	/^ffff80000010259a:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010259c	kernel.asm	/^ffff80000010259c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010259f	kernel.asm	/^ffff80000010259f:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001025a1	kernel.asm	/^ffff8000001025a1:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001025a3	kernel.asm	/^ffff8000001025a3:	48 b8 19 24 10 00 00 	movabs $0xffff800000102419,%rax$/;"	l
ffff8000001025aa	kernel.asm	/^ffff8000001025aa:	80 ff ff $/;"	l
ffff8000001025ad	kernel.asm	/^ffff8000001025ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001025af	kernel.asm	/^ffff8000001025af:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001025b2	kernel.asm	/^ffff8000001025b2:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001025b5	kernel.asm	/^ffff8000001025b5:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001025b7	kernel.asm	/^ffff8000001025b7:	eb 72                	jmp    ffff80000010262b <balloc+0x19e>$/;"	l
ffff8000001025b9	kernel.asm	/^ffff8000001025b9:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff8000001025bd	kernel.asm	/^ffff8000001025bd:	81 7d f8 ff 0f 00 00 	cmpl   $0xfff,-0x8(%rbp)$/;"	l
ffff8000001025c4	kernel.asm	/^ffff8000001025c4:	7f 1e                	jg     ffff8000001025e4 <balloc+0x157>$/;"	l
ffff8000001025c6	kernel.asm	/^ffff8000001025c6:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001025c9	kernel.asm	/^ffff8000001025c9:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001025cc	kernel.asm	/^ffff8000001025cc:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001025ce	kernel.asm	/^ffff8000001025ce:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001025d0	kernel.asm	/^ffff8000001025d0:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff8000001025d7	kernel.asm	/^ffff8000001025d7:	80 ff ff $/;"	l
ffff8000001025da	kernel.asm	/^ffff8000001025da:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001025dc	kernel.asm	/^ffff8000001025dc:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001025de	kernel.asm	/^ffff8000001025de:	0f 82 0d ff ff ff    	jb     ffff8000001024f1 <balloc+0x64>$/;"	l
ffff8000001025e4	kernel.asm	/^ffff8000001025e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001025e8	kernel.asm	/^ffff8000001025e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001025eb	kernel.asm	/^ffff8000001025eb:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001025f2	kernel.asm	/^ffff8000001025f2:	80 ff ff $/;"	l
ffff8000001025f5	kernel.asm	/^ffff8000001025f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001025f7	kernel.asm	/^ffff8000001025f7:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff8000001025fe	kernel.asm	/^ffff8000001025fe:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff800000102605	kernel.asm	/^ffff800000102605:	80 ff ff $/;"	l
ffff800000102608	kernel.asm	/^ffff800000102608:	8b 10                	mov    (%rax),%edx$/;"	l
ffff80000010260a	kernel.asm	/^ffff80000010260a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010260d	kernel.asm	/^ffff80000010260d:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010260f	kernel.asm	/^ffff80000010260f:	0f 87 97 fe ff ff    	ja     ffff8000001024ac <balloc+0x1f>$/;"	l
ffff800000102615	kernel.asm	/^ffff800000102615:	48 bf 2c cd 10 00 00 	movabs $0xffff80000010cd2c,%rdi$/;"	l
ffff80000010261c	kernel.asm	/^ffff80000010261c:	80 ff ff $/;"	l
ffff80000010261f	kernel.asm	/^ffff80000010261f:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102626	kernel.asm	/^ffff800000102626:	80 ff ff $/;"	l
ffff800000102629	kernel.asm	/^ffff800000102629:	ff d0                	callq  *%rax$/;"	l
ffff80000010262b	kernel.asm	/^ffff80000010262b:	c9                   	leaveq $/;"	l
ffff80000010262c	kernel.asm	/^ffff80000010262c:	c3                   	retq   $/;"	l
ffff80000010262d	kernel.asm	/^ffff80000010262d <bfree>:$/;"	l
ffff80000010262d	kernel.asm	/^ffff80000010262d:	55                   	push   %rbp$/;"	l
ffff80000010262e	kernel.asm	/^ffff80000010262e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102631	kernel.asm	/^ffff800000102631:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102635	kernel.asm	/^ffff800000102635:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102638	kernel.asm	/^ffff800000102638:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff80000010263b	kernel.asm	/^ffff80000010263b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010263e	kernel.asm	/^ffff80000010263e:	48 be a0 76 11 00 00 	movabs $0xffff8000001176a0,%rsi$/;"	l
ffff800000102645	kernel.asm	/^ffff800000102645:	80 ff ff $/;"	l
ffff800000102648	kernel.asm	/^ffff800000102648:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010264a	kernel.asm	/^ffff80000010264a:	48 b8 b4 23 10 00 00 	movabs $0xffff8000001023b4,%rax$/;"	l
ffff800000102651	kernel.asm	/^ffff800000102651:	80 ff ff $/;"	l
ffff800000102654	kernel.asm	/^ffff800000102654:	ff d0                	callq  *%rax$/;"	l
ffff800000102656	kernel.asm	/^ffff800000102656:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000102659	kernel.asm	/^ffff800000102659:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff80000010265c	kernel.asm	/^ffff80000010265c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010265e	kernel.asm	/^ffff80000010265e:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff800000102665	kernel.asm	/^ffff800000102665:	80 ff ff $/;"	l
ffff800000102668	kernel.asm	/^ffff800000102668:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010266b	kernel.asm	/^ffff80000010266b:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010266d	kernel.asm	/^ffff80000010266d:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102670	kernel.asm	/^ffff800000102670:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102672	kernel.asm	/^ffff800000102672:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102674	kernel.asm	/^ffff800000102674:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff80000010267b	kernel.asm	/^ffff80000010267b:	80 ff ff $/;"	l
ffff80000010267e	kernel.asm	/^ffff80000010267e:	ff d0                	callq  *%rax$/;"	l
ffff800000102680	kernel.asm	/^ffff800000102680:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102684	kernel.asm	/^ffff800000102684:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000102687	kernel.asm	/^ffff800000102687:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010268c	kernel.asm	/^ffff80000010268c:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff80000010268f	kernel.asm	/^ffff80000010268f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000102692	kernel.asm	/^ffff800000102692:	99                   	cltd   $/;"	l
ffff800000102693	kernel.asm	/^ffff800000102693:	c1 ea 1d             	shr    $0x1d,%edx$/;"	l
ffff800000102696	kernel.asm	/^ffff800000102696:	01 d0                	add    %edx,%eax$/;"	l
ffff800000102698	kernel.asm	/^ffff800000102698:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff80000010269b	kernel.asm	/^ffff80000010269b:	29 d0                	sub    %edx,%eax$/;"	l
ffff80000010269d	kernel.asm	/^ffff80000010269d:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff8000001026a2	kernel.asm	/^ffff8000001026a2:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001026a4	kernel.asm	/^ffff8000001026a4:	d3 e2                	shl    %cl,%edx$/;"	d
ffff8000001026a6	kernel.asm	/^ffff8000001026a6:	89 d0                	mov    %edx,%eax$/;"	l
ffff8000001026a8	kernel.asm	/^ffff8000001026a8:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff8000001026ab	kernel.asm	/^ffff8000001026ab:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001026ae	kernel.asm	/^ffff8000001026ae:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff8000001026b1	kernel.asm	/^ffff8000001026b1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001026b3	kernel.asm	/^ffff8000001026b3:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001026b6	kernel.asm	/^ffff8000001026b6:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff8000001026b9	kernel.asm	/^ffff8000001026b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001026bd	kernel.asm	/^ffff8000001026bd:	48 98                	cltq   $/;"	l
ffff8000001026bf	kernel.asm	/^ffff8000001026bf:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff8000001026c6	kernel.asm	/^ffff8000001026c6:	00 $/;"	l
ffff8000001026c7	kernel.asm	/^ffff8000001026c7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001026ca	kernel.asm	/^ffff8000001026ca:	23 45 f0             	and    -0x10(%rbp),%eax$/;"	l
ffff8000001026cd	kernel.asm	/^ffff8000001026cd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001026cf	kernel.asm	/^ffff8000001026cf:	75 16                	jne    ffff8000001026e7 <bfree+0xba>$/;"	l
ffff8000001026d1	kernel.asm	/^ffff8000001026d1:	48 bf 42 cd 10 00 00 	movabs $0xffff80000010cd42,%rdi$/;"	l
ffff8000001026d8	kernel.asm	/^ffff8000001026d8:	80 ff ff $/;"	l
ffff8000001026db	kernel.asm	/^ffff8000001026db:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001026e2	kernel.asm	/^ffff8000001026e2:	80 ff ff $/;"	l
ffff8000001026e5	kernel.asm	/^ffff8000001026e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001026e7	kernel.asm	/^ffff8000001026e7:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001026ea	kernel.asm	/^ffff8000001026ea:	8d 50 07             	lea    0x7(%rax),%edx$/;"	l
ffff8000001026ed	kernel.asm	/^ffff8000001026ed:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001026ef	kernel.asm	/^ffff8000001026ef:	0f 48 c2             	cmovs  %edx,%eax$/;"	l
ffff8000001026f2	kernel.asm	/^ffff8000001026f2:	c1 f8 03             	sar    $0x3,%eax$/;"	l
ffff8000001026f5	kernel.asm	/^ffff8000001026f5:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001026f7	kernel.asm	/^ffff8000001026f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001026fb	kernel.asm	/^ffff8000001026fb:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff8000001026fe	kernel.asm	/^ffff8000001026fe:	0f b6 84 02 b0 00 00 	movzbl 0xb0(%rdx,%rax,1),%eax$/;"	l
ffff800000102705	kernel.asm	/^ffff800000102705:	00 $/;"	l
ffff800000102706	kernel.asm	/^ffff800000102706:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102708	kernel.asm	/^ffff800000102708:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010270b	kernel.asm	/^ffff80000010270b:	f7 d0                	not    %eax$/;"	l
ffff80000010270d	kernel.asm	/^ffff80000010270d:	21 d0                	and    %edx,%eax$/;"	l
ffff80000010270f	kernel.asm	/^ffff80000010270f:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000102711	kernel.asm	/^ffff800000102711:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000102715	kernel.asm	/^ffff800000102715:	48 63 c1             	movslq %ecx,%rax$/;"	l
ffff800000102718	kernel.asm	/^ffff800000102718:	40 88 b4 02 b0 00 00 	mov    %sil,0xb0(%rdx,%rax,1)$/;"	l
ffff80000010271f	kernel.asm	/^ffff80000010271f:	00 $/;"	l
ffff800000102720	kernel.asm	/^ffff800000102720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102724	kernel.asm	/^ffff800000102724:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102727	kernel.asm	/^ffff800000102727:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff80000010272e	kernel.asm	/^ffff80000010272e:	80 ff ff $/;"	l
ffff800000102731	kernel.asm	/^ffff800000102731:	ff d0                	callq  *%rax$/;"	l
ffff800000102733	kernel.asm	/^ffff800000102733:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102737	kernel.asm	/^ffff800000102737:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010273a	kernel.asm	/^ffff80000010273a:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102741	kernel.asm	/^ffff800000102741:	80 ff ff $/;"	l
ffff800000102744	kernel.asm	/^ffff800000102744:	ff d0                	callq  *%rax$/;"	l
ffff800000102746	kernel.asm	/^ffff800000102746:	90                   	nop$/;"	l
ffff800000102747	kernel.asm	/^ffff800000102747:	c9                   	leaveq $/;"	l
ffff800000102748	kernel.asm	/^ffff800000102748:	c3                   	retq   $/;"	l
ffff800000102749	kernel.asm	/^ffff800000102749 <iinit>:$/;"	l
ffff800000102749	kernel.asm	/^ffff800000102749:	55                   	push   %rbp$/;"	l
ffff80000010274a	kernel.asm	/^ffff80000010274a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010274d	kernel.asm	/^ffff80000010274d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102751	kernel.asm	/^ffff800000102751:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102754	kernel.asm	/^ffff800000102754:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010275b	kernel.asm	/^ffff80000010275b:	48 be 55 cd 10 00 00 	movabs $0xffff80000010cd55,%rsi$/;"	l
ffff800000102762	kernel.asm	/^ffff800000102762:	80 ff ff $/;"	l
ffff800000102765	kernel.asm	/^ffff800000102765:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff80000010276c	kernel.asm	/^ffff80000010276c:	80 ff ff $/;"	l
ffff80000010276f	kernel.asm	/^ffff80000010276f:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000102776	kernel.asm	/^ffff800000102776:	80 ff ff $/;"	l
ffff800000102779	kernel.asm	/^ffff800000102779:	ff d0                	callq  *%rax$/;"	l
ffff80000010277b	kernel.asm	/^ffff80000010277b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000102782	kernel.asm	/^ffff800000102782:	eb 50                	jmp    ffff8000001027d4 <iinit+0x8b>$/;"	l
ffff800000102784	kernel.asm	/^ffff800000102784:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102787	kernel.asm	/^ffff800000102787:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff80000010278a	kernel.asm	/^ffff80000010278a:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010278d	kernel.asm	/^ffff80000010278d:	48 01 c0             	add    %rax,%rax$/;"	l
ffff800000102790	kernel.asm	/^ffff800000102790:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102793	kernel.asm	/^ffff800000102793:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010279a	kernel.asm	/^ffff80000010279a:	00 $/;"	l
ffff80000010279b	kernel.asm	/^ffff80000010279b:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010279e	kernel.asm	/^ffff80000010279e:	48 c1 e0 03          	shl    $0x3,%rax$/;"	l
ffff8000001027a2	kernel.asm	/^ffff8000001027a2:	48 8d 50 70          	lea    0x70(%rax),%rdx$/;"	l
ffff8000001027a6	kernel.asm	/^ffff8000001027a6:	48 b8 c0 76 11 00 00 	movabs $0xffff8000001176c0,%rax$/;"	l
ffff8000001027ad	kernel.asm	/^ffff8000001027ad:	80 ff ff $/;"	l
ffff8000001027b0	kernel.asm	/^ffff8000001027b0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001027b3	kernel.asm	/^ffff8000001027b3:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001027b7	kernel.asm	/^ffff8000001027b7:	48 be 5c cd 10 00 00 	movabs $0xffff80000010cd5c,%rsi$/;"	l
ffff8000001027be	kernel.asm	/^ffff8000001027be:	80 ff ff $/;"	l
ffff8000001027c1	kernel.asm	/^ffff8000001027c1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001027c4	kernel.asm	/^ffff8000001027c4:	48 b8 c4 72 10 00 00 	movabs $0xffff8000001072c4,%rax$/;"	l
ffff8000001027cb	kernel.asm	/^ffff8000001027cb:	80 ff ff $/;"	l
ffff8000001027ce	kernel.asm	/^ffff8000001027ce:	ff d0                	callq  *%rax$/;"	l
ffff8000001027d0	kernel.asm	/^ffff8000001027d0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001027d4	kernel.asm	/^ffff8000001027d4:	83 7d fc 31          	cmpl   $0x31,-0x4(%rbp)$/;"	l
ffff8000001027d8	kernel.asm	/^ffff8000001027d8:	7e aa                	jle    ffff800000102784 <iinit+0x3b>$/;"	l
ffff8000001027da	kernel.asm	/^ffff8000001027da:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001027dd	kernel.asm	/^ffff8000001027dd:	48 be a0 76 11 00 00 	movabs $0xffff8000001176a0,%rsi$/;"	l
ffff8000001027e4	kernel.asm	/^ffff8000001027e4:	80 ff ff $/;"	l
ffff8000001027e7	kernel.asm	/^ffff8000001027e7:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001027e9	kernel.asm	/^ffff8000001027e9:	48 b8 b4 23 10 00 00 	movabs $0xffff8000001023b4,%rax$/;"	l
ffff8000001027f0	kernel.asm	/^ffff8000001027f0:	80 ff ff $/;"	l
ffff8000001027f3	kernel.asm	/^ffff8000001027f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001027f5	kernel.asm	/^ffff8000001027f5:	90                   	nop$/;"	l
ffff8000001027f6	kernel.asm	/^ffff8000001027f6:	c9                   	leaveq $/;"	l
ffff8000001027f7	kernel.asm	/^ffff8000001027f7:	c3                   	retq   $/;"	l
ffff8000001027f8	kernel.asm	/^ffff8000001027f8 <ialloc>:$/;"	l
ffff8000001027f8	kernel.asm	/^ffff8000001027f8:	55                   	push   %rbp$/;"	l
ffff8000001027f9	kernel.asm	/^ffff8000001027f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001027fc	kernel.asm	/^ffff8000001027fc:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000102800	kernel.asm	/^ffff800000102800:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000102803	kernel.asm	/^ffff800000102803:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000102805	kernel.asm	/^ffff800000102805:	66 89 45 d8          	mov    %ax,-0x28(%rbp)$/;"	l
ffff800000102809	kernel.asm	/^ffff800000102809:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff800000102810	kernel.asm	/^ffff800000102810:	e9 d8 00 00 00       	jmpq   ffff8000001028ed <ialloc+0xf5>$/;"	l
ffff800000102815	kernel.asm	/^ffff800000102815:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102818	kernel.asm	/^ffff800000102818:	48 98                	cltq   $/;"	l
ffff80000010281a	kernel.asm	/^ffff80000010281a:	48 c1 e8 03          	shr    $0x3,%rax$/;"	l
ffff80000010281e	kernel.asm	/^ffff80000010281e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102820	kernel.asm	/^ffff800000102820:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff800000102827	kernel.asm	/^ffff800000102827:	80 ff ff $/;"	l
ffff80000010282a	kernel.asm	/^ffff80000010282a:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff80000010282d	kernel.asm	/^ffff80000010282d:	01 c2                	add    %eax,%edx$/;"	l
ffff80000010282f	kernel.asm	/^ffff80000010282f:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000102832	kernel.asm	/^ffff800000102832:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102834	kernel.asm	/^ffff800000102834:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102836	kernel.asm	/^ffff800000102836:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff80000010283d	kernel.asm	/^ffff80000010283d:	80 ff ff $/;"	l
ffff800000102840	kernel.asm	/^ffff800000102840:	ff d0                	callq  *%rax$/;"	l
ffff800000102842	kernel.asm	/^ffff800000102842:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102846	kernel.asm	/^ffff800000102846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010284a	kernel.asm	/^ffff80000010284a:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102851	kernel.asm	/^ffff800000102851:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000102854	kernel.asm	/^ffff800000102854:	48 98                	cltq   $/;"	l
ffff800000102856	kernel.asm	/^ffff800000102856:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102859	kernel.asm	/^ffff800000102859:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff80000010285d	kernel.asm	/^ffff80000010285d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102860	kernel.asm	/^ffff800000102860:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000102864	kernel.asm	/^ffff800000102864:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102868	kernel.asm	/^ffff800000102868:	0f b7 00             	movzwl (%rax),%eax$/;"	l
ffff80000010286b	kernel.asm	/^ffff80000010286b:	66 85 c0             	test   %ax,%ax$/;"	l
ffff80000010286e	kernel.asm	/^ffff80000010286e:	75 66                	jne    ffff8000001028d6 <ialloc+0xde>$/;"	l
ffff800000102870	kernel.asm	/^ffff800000102870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102874	kernel.asm	/^ffff800000102874:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff800000102879	kernel.asm	/^ffff800000102879:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010287e	kernel.asm	/^ffff80000010287e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102881	kernel.asm	/^ffff800000102881:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff800000102888	kernel.asm	/^ffff800000102888:	80 ff ff $/;"	l
ffff80000010288b	kernel.asm	/^ffff80000010288b:	ff d0                	callq  *%rax$/;"	l
ffff80000010288d	kernel.asm	/^ffff80000010288d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102891	kernel.asm	/^ffff800000102891:	0f b7 55 d8          	movzwl -0x28(%rbp),%edx$/;"	l
ffff800000102895	kernel.asm	/^ffff800000102895:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000102898	kernel.asm	/^ffff800000102898:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010289c	kernel.asm	/^ffff80000010289c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010289f	kernel.asm	/^ffff80000010289f:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff8000001028a6	kernel.asm	/^ffff8000001028a6:	80 ff ff $/;"	l
ffff8000001028a9	kernel.asm	/^ffff8000001028a9:	ff d0                	callq  *%rax$/;"	l
ffff8000001028ab	kernel.asm	/^ffff8000001028ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028af	kernel.asm	/^ffff8000001028af:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001028b2	kernel.asm	/^ffff8000001028b2:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001028b9	kernel.asm	/^ffff8000001028b9:	80 ff ff $/;"	l
ffff8000001028bc	kernel.asm	/^ffff8000001028bc:	ff d0                	callq  *%rax$/;"	l
ffff8000001028be	kernel.asm	/^ffff8000001028be:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001028c1	kernel.asm	/^ffff8000001028c1:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001028c4	kernel.asm	/^ffff8000001028c4:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001028c6	kernel.asm	/^ffff8000001028c6:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001028c8	kernel.asm	/^ffff8000001028c8:	48 b8 2f 2a 10 00 00 	movabs $0xffff800000102a2f,%rax$/;"	l
ffff8000001028cf	kernel.asm	/^ffff8000001028cf:	80 ff ff $/;"	l
ffff8000001028d2	kernel.asm	/^ffff8000001028d2:	ff d0                	callq  *%rax$/;"	l
ffff8000001028d4	kernel.asm	/^ffff8000001028d4:	eb 45                	jmp    ffff80000010291b <ialloc+0x123>$/;"	l
ffff8000001028d6	kernel.asm	/^ffff8000001028d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001028da	kernel.asm	/^ffff8000001028da:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001028dd	kernel.asm	/^ffff8000001028dd:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff8000001028e4	kernel.asm	/^ffff8000001028e4:	80 ff ff $/;"	l
ffff8000001028e7	kernel.asm	/^ffff8000001028e7:	ff d0                	callq  *%rax$/;"	l
ffff8000001028e9	kernel.asm	/^ffff8000001028e9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001028ed	kernel.asm	/^ffff8000001028ed:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff8000001028f4	kernel.asm	/^ffff8000001028f4:	80 ff ff $/;"	l
ffff8000001028f7	kernel.asm	/^ffff8000001028f7:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff8000001028fa	kernel.asm	/^ffff8000001028fa:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001028fd	kernel.asm	/^ffff8000001028fd:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001028ff	kernel.asm	/^ffff8000001028ff:	0f 87 10 ff ff ff    	ja     ffff800000102815 <ialloc+0x1d>$/;"	l
ffff800000102905	kernel.asm	/^ffff800000102905:	48 bf 62 cd 10 00 00 	movabs $0xffff80000010cd62,%rdi$/;"	l
ffff80000010290c	kernel.asm	/^ffff80000010290c:	80 ff ff $/;"	l
ffff80000010290f	kernel.asm	/^ffff80000010290f:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102916	kernel.asm	/^ffff800000102916:	80 ff ff $/;"	l
ffff800000102919	kernel.asm	/^ffff800000102919:	ff d0                	callq  *%rax$/;"	l
ffff80000010291b	kernel.asm	/^ffff80000010291b:	c9                   	leaveq $/;"	l
ffff80000010291c	kernel.asm	/^ffff80000010291c:	c3                   	retq   $/;"	l
ffff80000010291d	kernel.asm	/^ffff80000010291d <iupdate>:$/;"	l
ffff80000010291d	kernel.asm	/^ffff80000010291d:	55                   	push   %rbp$/;"	l
ffff80000010291e	kernel.asm	/^ffff80000010291e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102921	kernel.asm	/^ffff800000102921:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102925	kernel.asm	/^ffff800000102925:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000102929	kernel.asm	/^ffff800000102929:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010292d	kernel.asm	/^ffff80000010292d:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102930	kernel.asm	/^ffff800000102930:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff800000102933	kernel.asm	/^ffff800000102933:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102935	kernel.asm	/^ffff800000102935:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff80000010293c	kernel.asm	/^ffff80000010293c:	80 ff ff $/;"	l
ffff80000010293f	kernel.asm	/^ffff80000010293f:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102942	kernel.asm	/^ffff800000102942:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102944	kernel.asm	/^ffff800000102944:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102948	kernel.asm	/^ffff800000102948:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010294a	kernel.asm	/^ffff80000010294a:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010294c	kernel.asm	/^ffff80000010294c:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010294e	kernel.asm	/^ffff80000010294e:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102955	kernel.asm	/^ffff800000102955:	80 ff ff $/;"	l
ffff800000102958	kernel.asm	/^ffff800000102958:	ff d0                	callq  *%rax$/;"	l
ffff80000010295a	kernel.asm	/^ffff80000010295a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010295e	kernel.asm	/^ffff80000010295e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102962	kernel.asm	/^ffff800000102962:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102969	kernel.asm	/^ffff800000102969:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010296d	kernel.asm	/^ffff80000010296d:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102970	kernel.asm	/^ffff800000102970:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000102972	kernel.asm	/^ffff800000102972:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102975	kernel.asm	/^ffff800000102975:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff800000102979	kernel.asm	/^ffff800000102979:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010297c	kernel.asm	/^ffff80000010297c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102980	kernel.asm	/^ffff800000102980:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102984	kernel.asm	/^ffff800000102984:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff80000010298b	kernel.asm	/^ffff80000010298b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010298f	kernel.asm	/^ffff80000010298f:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff800000102992	kernel.asm	/^ffff800000102992:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102996	kernel.asm	/^ffff800000102996:	0f b7 90 96 00 00 00 	movzwl 0x96(%rax),%edx$/;"	l
ffff80000010299d	kernel.asm	/^ffff80000010299d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001029a1	kernel.asm	/^ffff8000001029a1:	66 89 50 02          	mov    %dx,0x2(%rax)$/;"	l
ffff8000001029a5	kernel.asm	/^ffff8000001029a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001029a9	kernel.asm	/^ffff8000001029a9:	0f b7 90 98 00 00 00 	movzwl 0x98(%rax),%edx$/;"	l
ffff8000001029b0	kernel.asm	/^ffff8000001029b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001029b4	kernel.asm	/^ffff8000001029b4:	66 89 50 04          	mov    %dx,0x4(%rax)$/;"	l
ffff8000001029b8	kernel.asm	/^ffff8000001029b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001029bc	kernel.asm	/^ffff8000001029bc:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff8000001029c3	kernel.asm	/^ffff8000001029c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001029c7	kernel.asm	/^ffff8000001029c7:	66 89 50 06          	mov    %dx,0x6(%rax)$/;"	l
ffff8000001029cb	kernel.asm	/^ffff8000001029cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001029cf	kernel.asm	/^ffff8000001029cf:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001029d5	kernel.asm	/^ffff8000001029d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001029d9	kernel.asm	/^ffff8000001029d9:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001029dc	kernel.asm	/^ffff8000001029dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001029e0	kernel.asm	/^ffff8000001029e0:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx$/;"	l
ffff8000001029e7	kernel.asm	/^ffff8000001029e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001029eb	kernel.asm	/^ffff8000001029eb:	48 83 c0 0c          	add    $0xc,%rax$/;"	l
ffff8000001029ef	kernel.asm	/^ffff8000001029ef:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff8000001029f4	kernel.asm	/^ffff8000001029f4:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001029f7	kernel.asm	/^ffff8000001029f7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001029fa	kernel.asm	/^ffff8000001029fa:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000102a01	kernel.asm	/^ffff800000102a01:	80 ff ff $/;"	l
ffff800000102a04	kernel.asm	/^ffff800000102a04:	ff d0                	callq  *%rax$/;"	l
ffff800000102a06	kernel.asm	/^ffff800000102a06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a0a	kernel.asm	/^ffff800000102a0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102a0d	kernel.asm	/^ffff800000102a0d:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff800000102a14	kernel.asm	/^ffff800000102a14:	80 ff ff $/;"	l
ffff800000102a17	kernel.asm	/^ffff800000102a17:	ff d0                	callq  *%rax$/;"	l
ffff800000102a19	kernel.asm	/^ffff800000102a19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a1d	kernel.asm	/^ffff800000102a1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102a20	kernel.asm	/^ffff800000102a20:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102a27	kernel.asm	/^ffff800000102a27:	80 ff ff $/;"	l
ffff800000102a2a	kernel.asm	/^ffff800000102a2a:	ff d0                	callq  *%rax$/;"	l
ffff800000102a2c	kernel.asm	/^ffff800000102a2c:	90                   	nop$/;"	l
ffff800000102a2d	kernel.asm	/^ffff800000102a2d:	c9                   	leaveq $/;"	l
ffff800000102a2e	kernel.asm	/^ffff800000102a2e:	c3                   	retq   $/;"	l
ffff800000102a2f	kernel.asm	/^ffff800000102a2f <iget>:$/;"	l
ffff800000102a2f	kernel.asm	/^ffff800000102a2f:	55                   	push   %rbp$/;"	l
ffff800000102a30	kernel.asm	/^ffff800000102a30:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102a33	kernel.asm	/^ffff800000102a33:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102a37	kernel.asm	/^ffff800000102a37:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000102a3a	kernel.asm	/^ffff800000102a3a:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000102a3d	kernel.asm	/^ffff800000102a3d:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102a44	kernel.asm	/^ffff800000102a44:	80 ff ff $/;"	l
ffff800000102a47	kernel.asm	/^ffff800000102a47:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000102a4e	kernel.asm	/^ffff800000102a4e:	80 ff ff $/;"	l
ffff800000102a51	kernel.asm	/^ffff800000102a51:	ff d0                	callq  *%rax$/;"	l
ffff800000102a53	kernel.asm	/^ffff800000102a53:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102a5a	kernel.asm	/^ffff800000102a5a:	00 $/;"	l
ffff800000102a5b	kernel.asm	/^ffff800000102a5b:	48 b8 28 77 11 00 00 	movabs $0xffff800000117728,%rax$/;"	l
ffff800000102a62	kernel.asm	/^ffff800000102a62:	80 ff ff $/;"	l
ffff800000102a65	kernel.asm	/^ffff800000102a65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102a69	kernel.asm	/^ffff800000102a69:	eb 74                	jmp    ffff800000102adf <iget+0xb0>$/;"	l
ffff800000102a6b	kernel.asm	/^ffff800000102a6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a6f	kernel.asm	/^ffff800000102a6f:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102a72	kernel.asm	/^ffff800000102a72:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102a74	kernel.asm	/^ffff800000102a74:	7e 47                	jle    ffff800000102abd <iget+0x8e>$/;"	l
ffff800000102a76	kernel.asm	/^ffff800000102a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a7a	kernel.asm	/^ffff800000102a7a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102a7c	kernel.asm	/^ffff800000102a7c:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff800000102a7f	kernel.asm	/^ffff800000102a7f:	75 3c                	jne    ffff800000102abd <iget+0x8e>$/;"	l
ffff800000102a81	kernel.asm	/^ffff800000102a81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a85	kernel.asm	/^ffff800000102a85:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102a88	kernel.asm	/^ffff800000102a88:	3b 45 e8             	cmp    -0x18(%rbp),%eax$/;"	l
ffff800000102a8b	kernel.asm	/^ffff800000102a8b:	75 30                	jne    ffff800000102abd <iget+0x8e>$/;"	l
ffff800000102a8d	kernel.asm	/^ffff800000102a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a91	kernel.asm	/^ffff800000102a91:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102a94	kernel.asm	/^ffff800000102a94:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000102a97	kernel.asm	/^ffff800000102a97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102a9b	kernel.asm	/^ffff800000102a9b:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102a9e	kernel.asm	/^ffff800000102a9e:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102aa5	kernel.asm	/^ffff800000102aa5:	80 ff ff $/;"	l
ffff800000102aa8	kernel.asm	/^ffff800000102aa8:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000102aaf	kernel.asm	/^ffff800000102aaf:	80 ff ff $/;"	l
ffff800000102ab2	kernel.asm	/^ffff800000102ab2:	ff d0                	callq  *%rax$/;"	l
ffff800000102ab4	kernel.asm	/^ffff800000102ab4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ab8	kernel.asm	/^ffff800000102ab8:	e9 a1 00 00 00       	jmpq   ffff800000102b5e <iget+0x12f>$/;"	l
ffff800000102abd	kernel.asm	/^ffff800000102abd:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102ac2	kernel.asm	/^ffff800000102ac2:	75 13                	jne    ffff800000102ad7 <iget+0xa8>$/;"	l
ffff800000102ac4	kernel.asm	/^ffff800000102ac4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ac8	kernel.asm	/^ffff800000102ac8:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102acb	kernel.asm	/^ffff800000102acb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102acd	kernel.asm	/^ffff800000102acd:	75 08                	jne    ffff800000102ad7 <iget+0xa8>$/;"	l
ffff800000102acf	kernel.asm	/^ffff800000102acf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ad3	kernel.asm	/^ffff800000102ad3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102ad7	kernel.asm	/^ffff800000102ad7:	48 81 45 f8 d8 00 00 	addq   $0xd8,-0x8(%rbp)$/;"	l
ffff800000102ade	kernel.asm	/^ffff800000102ade:	00 $/;"	l
ffff800000102adf	kernel.asm	/^ffff800000102adf:	48 b8 58 a1 11 00 00 	movabs $0xffff80000011a158,%rax$/;"	l
ffff800000102ae6	kernel.asm	/^ffff800000102ae6:	80 ff ff $/;"	l
ffff800000102ae9	kernel.asm	/^ffff800000102ae9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000102aed	kernel.asm	/^ffff800000102aed:	0f 82 78 ff ff ff    	jb     ffff800000102a6b <iget+0x3c>$/;"	l
ffff800000102af3	kernel.asm	/^ffff800000102af3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000102af8	kernel.asm	/^ffff800000102af8:	75 16                	jne    ffff800000102b10 <iget+0xe1>$/;"	l
ffff800000102afa	kernel.asm	/^ffff800000102afa:	48 bf 74 cd 10 00 00 	movabs $0xffff80000010cd74,%rdi$/;"	l
ffff800000102b01	kernel.asm	/^ffff800000102b01:	80 ff ff $/;"	l
ffff800000102b04	kernel.asm	/^ffff800000102b04:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102b0b	kernel.asm	/^ffff800000102b0b:	80 ff ff $/;"	l
ffff800000102b0e	kernel.asm	/^ffff800000102b0e:	ff d0                	callq  *%rax$/;"	l
ffff800000102b10	kernel.asm	/^ffff800000102b10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102b14	kernel.asm	/^ffff800000102b14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102b18	kernel.asm	/^ffff800000102b18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b1c	kernel.asm	/^ffff800000102b1c:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102b1f	kernel.asm	/^ffff800000102b1f:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000102b21	kernel.asm	/^ffff800000102b21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b25	kernel.asm	/^ffff800000102b25:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff800000102b28	kernel.asm	/^ffff800000102b28:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000102b2b	kernel.asm	/^ffff800000102b2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b2f	kernel.asm	/^ffff800000102b2f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)$/;"	l
ffff800000102b36	kernel.asm	/^ffff800000102b36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b3a	kernel.asm	/^ffff800000102b3a:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff800000102b41	kernel.asm	/^ffff800000102b41:	00 00 00 $/;"	l
ffff800000102b44	kernel.asm	/^ffff800000102b44:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102b4b	kernel.asm	/^ffff800000102b4b:	80 ff ff $/;"	l
ffff800000102b4e	kernel.asm	/^ffff800000102b4e:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000102b55	kernel.asm	/^ffff800000102b55:	80 ff ff $/;"	l
ffff800000102b58	kernel.asm	/^ffff800000102b58:	ff d0                	callq  *%rax$/;"	l
ffff800000102b5a	kernel.asm	/^ffff800000102b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b5e	kernel.asm	/^ffff800000102b5e:	c9                   	leaveq $/;"	l
ffff800000102b5f	kernel.asm	/^ffff800000102b5f:	c3                   	retq   $/;"	l
ffff800000102b60	kernel.asm	/^ffff800000102b60 <idup>:$/;"	l
ffff800000102b60	kernel.asm	/^ffff800000102b60:	55                   	push   %rbp$/;"	l
ffff800000102b61	kernel.asm	/^ffff800000102b61:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102b64	kernel.asm	/^ffff800000102b64:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102b68	kernel.asm	/^ffff800000102b68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102b6c	kernel.asm	/^ffff800000102b6c:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102b73	kernel.asm	/^ffff800000102b73:	80 ff ff $/;"	l
ffff800000102b76	kernel.asm	/^ffff800000102b76:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000102b7d	kernel.asm	/^ffff800000102b7d:	80 ff ff $/;"	l
ffff800000102b80	kernel.asm	/^ffff800000102b80:	ff d0                	callq  *%rax$/;"	l
ffff800000102b82	kernel.asm	/^ffff800000102b82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b86	kernel.asm	/^ffff800000102b86:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102b89	kernel.asm	/^ffff800000102b89:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000102b8c	kernel.asm	/^ffff800000102b8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102b90	kernel.asm	/^ffff800000102b90:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102b93	kernel.asm	/^ffff800000102b93:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102b9a	kernel.asm	/^ffff800000102b9a:	80 ff ff $/;"	l
ffff800000102b9d	kernel.asm	/^ffff800000102b9d:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000102ba4	kernel.asm	/^ffff800000102ba4:	80 ff ff $/;"	l
ffff800000102ba7	kernel.asm	/^ffff800000102ba7:	ff d0                	callq  *%rax$/;"	l
ffff800000102ba9	kernel.asm	/^ffff800000102ba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102bad	kernel.asm	/^ffff800000102bad:	c9                   	leaveq $/;"	l
ffff800000102bae	kernel.asm	/^ffff800000102bae:	c3                   	retq   $/;"	l
ffff800000102baf	kernel.asm	/^ffff800000102baf <ilock>:$/;"	l
ffff800000102baf	kernel.asm	/^ffff800000102baf:	55                   	push   %rbp$/;"	l
ffff800000102bb0	kernel.asm	/^ffff800000102bb0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102bb3	kernel.asm	/^ffff800000102bb3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000102bb7	kernel.asm	/^ffff800000102bb7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000102bbb	kernel.asm	/^ffff800000102bbb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000102bc0	kernel.asm	/^ffff800000102bc0:	74 0b                	je     ffff800000102bcd <ilock+0x1e>$/;"	l
ffff800000102bc2	kernel.asm	/^ffff800000102bc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102bc6	kernel.asm	/^ffff800000102bc6:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102bc9	kernel.asm	/^ffff800000102bc9:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102bcb	kernel.asm	/^ffff800000102bcb:	7f 16                	jg     ffff800000102be3 <ilock+0x34>$/;"	l
ffff800000102bcd	kernel.asm	/^ffff800000102bcd:	48 bf 84 cd 10 00 00 	movabs $0xffff80000010cd84,%rdi$/;"	l
ffff800000102bd4	kernel.asm	/^ffff800000102bd4:	80 ff ff $/;"	l
ffff800000102bd7	kernel.asm	/^ffff800000102bd7:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102bde	kernel.asm	/^ffff800000102bde:	80 ff ff $/;"	l
ffff800000102be1	kernel.asm	/^ffff800000102be1:	ff d0                	callq  *%rax$/;"	l
ffff800000102be3	kernel.asm	/^ffff800000102be3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102be7	kernel.asm	/^ffff800000102be7:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102beb	kernel.asm	/^ffff800000102beb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102bee	kernel.asm	/^ffff800000102bee:	48 b8 19 73 10 00 00 	movabs $0xffff800000107319,%rax$/;"	l
ffff800000102bf5	kernel.asm	/^ffff800000102bf5:	80 ff ff $/;"	l
ffff800000102bf8	kernel.asm	/^ffff800000102bf8:	ff d0                	callq  *%rax$/;"	l
ffff800000102bfa	kernel.asm	/^ffff800000102bfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102bfe	kernel.asm	/^ffff800000102bfe:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102c04	kernel.asm	/^ffff800000102c04:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102c07	kernel.asm	/^ffff800000102c07:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102c09	kernel.asm	/^ffff800000102c09:	0f 85 2e 01 00 00    	jne    ffff800000102d3d <ilock+0x18e>$/;"	l
ffff800000102c0f	kernel.asm	/^ffff800000102c0f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c13	kernel.asm	/^ffff800000102c13:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102c16	kernel.asm	/^ffff800000102c16:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ffff800000102c19	kernel.asm	/^ffff800000102c19:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102c1b	kernel.asm	/^ffff800000102c1b:	48 b8 a0 76 11 00 00 	movabs $0xffff8000001176a0,%rax$/;"	l
ffff800000102c22	kernel.asm	/^ffff800000102c22:	80 ff ff $/;"	l
ffff800000102c25	kernel.asm	/^ffff800000102c25:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000102c28	kernel.asm	/^ffff800000102c28:	01 c2                	add    %eax,%edx$/;"	l
ffff800000102c2a	kernel.asm	/^ffff800000102c2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c2e	kernel.asm	/^ffff800000102c2e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102c30	kernel.asm	/^ffff800000102c30:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102c32	kernel.asm	/^ffff800000102c32:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102c34	kernel.asm	/^ffff800000102c34:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102c3b	kernel.asm	/^ffff800000102c3b:	80 ff ff $/;"	l
ffff800000102c3e	kernel.asm	/^ffff800000102c3e:	ff d0                	callq  *%rax$/;"	l
ffff800000102c40	kernel.asm	/^ffff800000102c40:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000102c44	kernel.asm	/^ffff800000102c44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102c48	kernel.asm	/^ffff800000102c48:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff800000102c4f	kernel.asm	/^ffff800000102c4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c53	kernel.asm	/^ffff800000102c53:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000102c56	kernel.asm	/^ffff800000102c56:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000102c58	kernel.asm	/^ffff800000102c58:	83 e0 07             	and    $0x7,%eax$/;"	l
ffff800000102c5b	kernel.asm	/^ffff800000102c5b:	48 c1 e0 06          	shl    $0x6,%rax$/;"	l
ffff800000102c5f	kernel.asm	/^ffff800000102c5f:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102c62	kernel.asm	/^ffff800000102c62:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000102c66	kernel.asm	/^ffff800000102c66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102c6a	kernel.asm	/^ffff800000102c6a:	0f b7 10             	movzwl (%rax),%edx$/;"	l
ffff800000102c6d	kernel.asm	/^ffff800000102c6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c71	kernel.asm	/^ffff800000102c71:	66 89 90 94 00 00 00 	mov    %dx,0x94(%rax)$/;"	l
ffff800000102c78	kernel.asm	/^ffff800000102c78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102c7c	kernel.asm	/^ffff800000102c7c:	0f b7 50 02          	movzwl 0x2(%rax),%edx$/;"	l
ffff800000102c80	kernel.asm	/^ffff800000102c80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c84	kernel.asm	/^ffff800000102c84:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff800000102c8b	kernel.asm	/^ffff800000102c8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102c8f	kernel.asm	/^ffff800000102c8f:	0f b7 50 04          	movzwl 0x4(%rax),%edx$/;"	l
ffff800000102c93	kernel.asm	/^ffff800000102c93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102c97	kernel.asm	/^ffff800000102c97:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff800000102c9e	kernel.asm	/^ffff800000102c9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102ca2	kernel.asm	/^ffff800000102ca2:	0f b7 50 06          	movzwl 0x6(%rax),%edx$/;"	l
ffff800000102ca6	kernel.asm	/^ffff800000102ca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102caa	kernel.asm	/^ffff800000102caa:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000102cb1	kernel.asm	/^ffff800000102cb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102cb5	kernel.asm	/^ffff800000102cb5:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000102cb8	kernel.asm	/^ffff800000102cb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102cbc	kernel.asm	/^ffff800000102cbc:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff800000102cc2	kernel.asm	/^ffff800000102cc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000102cc6	kernel.asm	/^ffff800000102cc6:	48 8d 48 0c          	lea    0xc(%rax),%rcx$/;"	l
ffff800000102cca	kernel.asm	/^ffff800000102cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102cce	kernel.asm	/^ffff800000102cce:	48 05 a0 00 00 00    	add    $0xa0,%rax$/;"	l
ffff800000102cd4	kernel.asm	/^ffff800000102cd4:	ba 34 00 00 00       	mov    $0x34,%edx$/;"	l
ffff800000102cd9	kernel.asm	/^ffff800000102cd9:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000102cdc	kernel.asm	/^ffff800000102cdc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102cdf	kernel.asm	/^ffff800000102cdf:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000102ce6	kernel.asm	/^ffff800000102ce6:	80 ff ff $/;"	l
ffff800000102ce9	kernel.asm	/^ffff800000102ce9:	ff d0                	callq  *%rax$/;"	l
ffff800000102ceb	kernel.asm	/^ffff800000102ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102cef	kernel.asm	/^ffff800000102cef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102cf2	kernel.asm	/^ffff800000102cf2:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000102cf9	kernel.asm	/^ffff800000102cf9:	80 ff ff $/;"	l
ffff800000102cfc	kernel.asm	/^ffff800000102cfc:	ff d0                	callq  *%rax$/;"	l
ffff800000102cfe	kernel.asm	/^ffff800000102cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102d02	kernel.asm	/^ffff800000102d02:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102d08	kernel.asm	/^ffff800000102d08:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000102d0b	kernel.asm	/^ffff800000102d0b:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000102d0d	kernel.asm	/^ffff800000102d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102d11	kernel.asm	/^ffff800000102d11:	89 90 90 00 00 00    	mov    %edx,0x90(%rax)$/;"	l
ffff800000102d17	kernel.asm	/^ffff800000102d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000102d1b	kernel.asm	/^ffff800000102d1b:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000102d22	kernel.asm	/^ffff800000102d22:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102d25	kernel.asm	/^ffff800000102d25:	75 16                	jne    ffff800000102d3d <ilock+0x18e>$/;"	l
ffff800000102d27	kernel.asm	/^ffff800000102d27:	48 bf 8a cd 10 00 00 	movabs $0xffff80000010cd8a,%rdi$/;"	l
ffff800000102d2e	kernel.asm	/^ffff800000102d2e:	80 ff ff $/;"	l
ffff800000102d31	kernel.asm	/^ffff800000102d31:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102d38	kernel.asm	/^ffff800000102d38:	80 ff ff $/;"	l
ffff800000102d3b	kernel.asm	/^ffff800000102d3b:	ff d0                	callq  *%rax$/;"	l
ffff800000102d3d	kernel.asm	/^ffff800000102d3d:	90                   	nop$/;"	l
ffff800000102d3e	kernel.asm	/^ffff800000102d3e:	c9                   	leaveq $/;"	l
ffff800000102d3f	kernel.asm	/^ffff800000102d3f:	c3                   	retq   $/;"	l
ffff800000102d40	kernel.asm	/^ffff800000102d40 <iunlock>:$/;"	l
ffff800000102d40	kernel.asm	/^ffff800000102d40:	55                   	push   %rbp$/;"	l
ffff800000102d41	kernel.asm	/^ffff800000102d41:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102d44	kernel.asm	/^ffff800000102d44:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102d48	kernel.asm	/^ffff800000102d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102d4c	kernel.asm	/^ffff800000102d4c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000102d51	kernel.asm	/^ffff800000102d51:	74 26                	je     ffff800000102d79 <iunlock+0x39>$/;"	l
ffff800000102d53	kernel.asm	/^ffff800000102d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102d57	kernel.asm	/^ffff800000102d57:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102d5b	kernel.asm	/^ffff800000102d5b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102d5e	kernel.asm	/^ffff800000102d5e:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff800000102d65	kernel.asm	/^ffff800000102d65:	80 ff ff $/;"	l
ffff800000102d68	kernel.asm	/^ffff800000102d68:	ff d0                	callq  *%rax$/;"	l
ffff800000102d6a	kernel.asm	/^ffff800000102d6a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102d6c	kernel.asm	/^ffff800000102d6c:	74 0b                	je     ffff800000102d79 <iunlock+0x39>$/;"	l
ffff800000102d6e	kernel.asm	/^ffff800000102d6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102d72	kernel.asm	/^ffff800000102d72:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102d75	kernel.asm	/^ffff800000102d75:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102d77	kernel.asm	/^ffff800000102d77:	7f 16                	jg     ffff800000102d8f <iunlock+0x4f>$/;"	l
ffff800000102d79	kernel.asm	/^ffff800000102d79:	48 bf 99 cd 10 00 00 	movabs $0xffff80000010cd99,%rdi$/;"	l
ffff800000102d80	kernel.asm	/^ffff800000102d80:	80 ff ff $/;"	l
ffff800000102d83	kernel.asm	/^ffff800000102d83:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000102d8a	kernel.asm	/^ffff800000102d8a:	80 ff ff $/;"	l
ffff800000102d8d	kernel.asm	/^ffff800000102d8d:	ff d0                	callq  *%rax$/;"	l
ffff800000102d8f	kernel.asm	/^ffff800000102d8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102d93	kernel.asm	/^ffff800000102d93:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000102d97	kernel.asm	/^ffff800000102d97:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102d9a	kernel.asm	/^ffff800000102d9a:	48 b8 9f 73 10 00 00 	movabs $0xffff80000010739f,%rax$/;"	l
ffff800000102da1	kernel.asm	/^ffff800000102da1:	80 ff ff $/;"	l
ffff800000102da4	kernel.asm	/^ffff800000102da4:	ff d0                	callq  *%rax$/;"	l
ffff800000102da6	kernel.asm	/^ffff800000102da6:	90                   	nop$/;"	l
ffff800000102da7	kernel.asm	/^ffff800000102da7:	c9                   	leaveq $/;"	l
ffff800000102da8	kernel.asm	/^ffff800000102da8:	c3                   	retq   $/;"	l
ffff800000102da9	kernel.asm	/^ffff800000102da9 <iput>:$/;"	l
ffff800000102da9	kernel.asm	/^ffff800000102da9:	55                   	push   %rbp$/;"	l
ffff800000102daa	kernel.asm	/^ffff800000102daa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102dad	kernel.asm	/^ffff800000102dad:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102db1	kernel.asm	/^ffff800000102db1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102db5	kernel.asm	/^ffff800000102db5:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102dbc	kernel.asm	/^ffff800000102dbc:	80 ff ff $/;"	l
ffff800000102dbf	kernel.asm	/^ffff800000102dbf:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000102dc6	kernel.asm	/^ffff800000102dc6:	80 ff ff $/;"	l
ffff800000102dc9	kernel.asm	/^ffff800000102dc9:	ff d0                	callq  *%rax$/;"	l
ffff800000102dcb	kernel.asm	/^ffff800000102dcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102dcf	kernel.asm	/^ffff800000102dcf:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102dd2	kernel.asm	/^ffff800000102dd2:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000102dd5	kernel.asm	/^ffff800000102dd5:	0f 85 8e 00 00 00    	jne    ffff800000102e69 <iput+0xc0>$/;"	l
ffff800000102ddb	kernel.asm	/^ffff800000102ddb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ddf	kernel.asm	/^ffff800000102ddf:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax$/;"	l
ffff800000102de5	kernel.asm	/^ffff800000102de5:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000102de8	kernel.asm	/^ffff800000102de8:	85 c0                	test   %eax,%eax$/;"	l
ffff800000102dea	kernel.asm	/^ffff800000102dea:	74 7d                	je     ffff800000102e69 <iput+0xc0>$/;"	l
ffff800000102dec	kernel.asm	/^ffff800000102dec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102df0	kernel.asm	/^ffff800000102df0:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000102df7	kernel.asm	/^ffff800000102df7:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000102dfa	kernel.asm	/^ffff800000102dfa:	75 6d                	jne    ffff800000102e69 <iput+0xc0>$/;"	l
ffff800000102dfc	kernel.asm	/^ffff800000102dfc:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102e03	kernel.asm	/^ffff800000102e03:	80 ff ff $/;"	l
ffff800000102e06	kernel.asm	/^ffff800000102e06:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000102e0d	kernel.asm	/^ffff800000102e0d:	80 ff ff $/;"	l
ffff800000102e10	kernel.asm	/^ffff800000102e10:	ff d0                	callq  *%rax$/;"	l
ffff800000102e12	kernel.asm	/^ffff800000102e12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e16	kernel.asm	/^ffff800000102e16:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102e19	kernel.asm	/^ffff800000102e19:	48 b8 29 30 10 00 00 	movabs $0xffff800000103029,%rax$/;"	l
ffff800000102e20	kernel.asm	/^ffff800000102e20:	80 ff ff $/;"	l
ffff800000102e23	kernel.asm	/^ffff800000102e23:	ff d0                	callq  *%rax$/;"	l
ffff800000102e25	kernel.asm	/^ffff800000102e25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e29	kernel.asm	/^ffff800000102e29:	66 c7 80 94 00 00 00 	movw   $0x0,0x94(%rax)$/;"	l
ffff800000102e30	kernel.asm	/^ffff800000102e30:	00 00 $/;"	l
ffff800000102e32	kernel.asm	/^ffff800000102e32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e36	kernel.asm	/^ffff800000102e36:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102e39	kernel.asm	/^ffff800000102e39:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff800000102e40	kernel.asm	/^ffff800000102e40:	80 ff ff $/;"	l
ffff800000102e43	kernel.asm	/^ffff800000102e43:	ff d0                	callq  *%rax$/;"	l
ffff800000102e45	kernel.asm	/^ffff800000102e45:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102e4c	kernel.asm	/^ffff800000102e4c:	80 ff ff $/;"	l
ffff800000102e4f	kernel.asm	/^ffff800000102e4f:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000102e56	kernel.asm	/^ffff800000102e56:	80 ff ff $/;"	l
ffff800000102e59	kernel.asm	/^ffff800000102e59:	ff d0                	callq  *%rax$/;"	l
ffff800000102e5b	kernel.asm	/^ffff800000102e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e5f	kernel.asm	/^ffff800000102e5f:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%rax)$/;"	l
ffff800000102e66	kernel.asm	/^ffff800000102e66:	00 00 00 $/;"	l
ffff800000102e69	kernel.asm	/^ffff800000102e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e6d	kernel.asm	/^ffff800000102e6d:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000102e70	kernel.asm	/^ffff800000102e70:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000102e73	kernel.asm	/^ffff800000102e73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102e77	kernel.asm	/^ffff800000102e77:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000102e7a	kernel.asm	/^ffff800000102e7a:	48 bf c0 76 11 00 00 	movabs $0xffff8000001176c0,%rdi$/;"	l
ffff800000102e81	kernel.asm	/^ffff800000102e81:	80 ff ff $/;"	l
ffff800000102e84	kernel.asm	/^ffff800000102e84:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000102e8b	kernel.asm	/^ffff800000102e8b:	80 ff ff $/;"	l
ffff800000102e8e	kernel.asm	/^ffff800000102e8e:	ff d0                	callq  *%rax$/;"	l
ffff800000102e90	kernel.asm	/^ffff800000102e90:	90                   	nop$/;"	l
ffff800000102e91	kernel.asm	/^ffff800000102e91:	c9                   	leaveq $/;"	l
ffff800000102e92	kernel.asm	/^ffff800000102e92:	c3                   	retq   $/;"	l
ffff800000102e93	kernel.asm	/^ffff800000102e93 <iunlockput>:$/;"	l
ffff800000102e93	kernel.asm	/^ffff800000102e93:	55                   	push   %rbp$/;"	l
ffff800000102e94	kernel.asm	/^ffff800000102e94:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102e97	kernel.asm	/^ffff800000102e97:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000102e9b	kernel.asm	/^ffff800000102e9b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000102e9f	kernel.asm	/^ffff800000102e9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102ea3	kernel.asm	/^ffff800000102ea3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102ea6	kernel.asm	/^ffff800000102ea6:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000102ead	kernel.asm	/^ffff800000102ead:	80 ff ff $/;"	l
ffff800000102eb0	kernel.asm	/^ffff800000102eb0:	ff d0                	callq  *%rax$/;"	l
ffff800000102eb2	kernel.asm	/^ffff800000102eb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000102eb6	kernel.asm	/^ffff800000102eb6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102eb9	kernel.asm	/^ffff800000102eb9:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff800000102ec0	kernel.asm	/^ffff800000102ec0:	80 ff ff $/;"	l
ffff800000102ec3	kernel.asm	/^ffff800000102ec3:	ff d0                	callq  *%rax$/;"	l
ffff800000102ec5	kernel.asm	/^ffff800000102ec5:	90                   	nop$/;"	l
ffff800000102ec6	kernel.asm	/^ffff800000102ec6:	c9                   	leaveq $/;"	l
ffff800000102ec7	kernel.asm	/^ffff800000102ec7:	c3                   	retq   $/;"	l
ffff800000102ec8	kernel.asm	/^ffff800000102ec8 <bmap>:$/;"	l
ffff800000102ec8	kernel.asm	/^ffff800000102ec8:	55                   	push   %rbp$/;"	l
ffff800000102ec9	kernel.asm	/^ffff800000102ec9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000102ecc	kernel.asm	/^ffff800000102ecc:	53                   	push   %rbx$/;"	l
ffff800000102ecd	kernel.asm	/^ffff800000102ecd:	48 83 ec 38          	sub    $0x38,%rsp$/;"	l
ffff800000102ed1	kernel.asm	/^ffff800000102ed1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff800000102ed5	kernel.asm	/^ffff800000102ed5:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff800000102ed8	kernel.asm	/^ffff800000102ed8:	83 7d c4 0b          	cmpl   $0xb,-0x3c(%rbp)$/;"	l
ffff800000102edc	kernel.asm	/^ffff800000102edc:	77 47                	ja     ffff800000102f25 <bmap+0x5d>$/;"	l
ffff800000102ede	kernel.asm	/^ffff800000102ede:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102ee2	kernel.asm	/^ffff800000102ee2:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102ee5	kernel.asm	/^ffff800000102ee5:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000102ee9	kernel.asm	/^ffff800000102ee9:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000102eec	kernel.asm	/^ffff800000102eec:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102eef	kernel.asm	/^ffff800000102eef:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102ef3	kernel.asm	/^ffff800000102ef3:	75 28                	jne    ffff800000102f1d <bmap+0x55>$/;"	l
ffff800000102ef5	kernel.asm	/^ffff800000102ef5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102ef9	kernel.asm	/^ffff800000102ef9:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102efb	kernel.asm	/^ffff800000102efb:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102efd	kernel.asm	/^ffff800000102efd:	48 b8 8d 24 10 00 00 	movabs $0xffff80000010248d,%rax$/;"	l
ffff800000102f04	kernel.asm	/^ffff800000102f04:	80 ff ff $/;"	l
ffff800000102f07	kernel.asm	/^ffff800000102f07:	ff d0                	callq  *%rax$/;"	l
ffff800000102f09	kernel.asm	/^ffff800000102f09:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102f0c	kernel.asm	/^ffff800000102f0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102f10	kernel.asm	/^ffff800000102f10:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000102f13	kernel.asm	/^ffff800000102f13:	48 8d 4a 28          	lea    0x28(%rdx),%rcx$/;"	l
ffff800000102f17	kernel.asm	/^ffff800000102f17:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102f1a	kernel.asm	/^ffff800000102f1a:	89 14 88             	mov    %edx,(%rax,%rcx,4)$/;"	l
ffff800000102f1d	kernel.asm	/^ffff800000102f1d:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102f20	kernel.asm	/^ffff800000102f20:	e9 fd 00 00 00       	jmpq   ffff800000103022 <bmap+0x15a>$/;"	l
ffff800000102f25	kernel.asm	/^ffff800000102f25:	83 6d c4 0c          	subl   $0xc,-0x3c(%rbp)$/;"	l
ffff800000102f29	kernel.asm	/^ffff800000102f29:	83 7d c4 7f          	cmpl   $0x7f,-0x3c(%rbp)$/;"	l
ffff800000102f2d	kernel.asm	/^ffff800000102f2d:	0f 87 d9 00 00 00    	ja     ffff80000010300c <bmap+0x144>$/;"	l
ffff800000102f33	kernel.asm	/^ffff800000102f33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102f37	kernel.asm	/^ffff800000102f37:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000102f3d	kernel.asm	/^ffff800000102f3d:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102f40	kernel.asm	/^ffff800000102f40:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102f44	kernel.asm	/^ffff800000102f44:	75 24                	jne    ffff800000102f6a <bmap+0xa2>$/;"	l
ffff800000102f46	kernel.asm	/^ffff800000102f46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102f4a	kernel.asm	/^ffff800000102f4a:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102f4c	kernel.asm	/^ffff800000102f4c:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102f4e	kernel.asm	/^ffff800000102f4e:	48 b8 8d 24 10 00 00 	movabs $0xffff80000010248d,%rax$/;"	l
ffff800000102f55	kernel.asm	/^ffff800000102f55:	80 ff ff $/;"	l
ffff800000102f58	kernel.asm	/^ffff800000102f58:	ff d0                	callq  *%rax$/;"	l
ffff800000102f5a	kernel.asm	/^ffff800000102f5a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102f5d	kernel.asm	/^ffff800000102f5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102f61	kernel.asm	/^ffff800000102f61:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102f64	kernel.asm	/^ffff800000102f64:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)$/;"	l
ffff800000102f6a	kernel.asm	/^ffff800000102f6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102f6e	kernel.asm	/^ffff800000102f6e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102f70	kernel.asm	/^ffff800000102f70:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000102f73	kernel.asm	/^ffff800000102f73:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000102f75	kernel.asm	/^ffff800000102f75:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102f77	kernel.asm	/^ffff800000102f77:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000102f7e	kernel.asm	/^ffff800000102f7e:	80 ff ff $/;"	l
ffff800000102f81	kernel.asm	/^ffff800000102f81:	ff d0                	callq  *%rax$/;"	l
ffff800000102f83	kernel.asm	/^ffff800000102f83:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff800000102f87	kernel.asm	/^ffff800000102f87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102f8b	kernel.asm	/^ffff800000102f8b:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000102f91	kernel.asm	/^ffff800000102f91:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000102f95	kernel.asm	/^ffff800000102f95:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102f98	kernel.asm	/^ffff800000102f98:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102f9f	kernel.asm	/^ffff800000102f9f:	00 $/;"	l
ffff800000102fa0	kernel.asm	/^ffff800000102fa0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102fa4	kernel.asm	/^ffff800000102fa4:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000102fa7	kernel.asm	/^ffff800000102fa7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102fa9	kernel.asm	/^ffff800000102fa9:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102fac	kernel.asm	/^ffff800000102fac:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000102fb0	kernel.asm	/^ffff800000102fb0:	75 42                	jne    ffff800000102ff4 <bmap+0x12c>$/;"	l
ffff800000102fb2	kernel.asm	/^ffff800000102fb2:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff800000102fb5	kernel.asm	/^ffff800000102fb5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000102fbc	kernel.asm	/^ffff800000102fbc:	00 $/;"	l
ffff800000102fbd	kernel.asm	/^ffff800000102fbd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000102fc1	kernel.asm	/^ffff800000102fc1:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx$/;"	l
ffff800000102fc5	kernel.asm	/^ffff800000102fc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000102fc9	kernel.asm	/^ffff800000102fc9:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000102fcb	kernel.asm	/^ffff800000102fcb:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000102fcd	kernel.asm	/^ffff800000102fcd:	48 b8 8d 24 10 00 00 	movabs $0xffff80000010248d,%rax$/;"	l
ffff800000102fd4	kernel.asm	/^ffff800000102fd4:	80 ff ff $/;"	l
ffff800000102fd7	kernel.asm	/^ffff800000102fd7:	ff d0                	callq  *%rax$/;"	l
ffff800000102fd9	kernel.asm	/^ffff800000102fd9:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000102fdc	kernel.asm	/^ffff800000102fdc:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000102fdf	kernel.asm	/^ffff800000102fdf:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff800000102fe1	kernel.asm	/^ffff800000102fe1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102fe5	kernel.asm	/^ffff800000102fe5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102fe8	kernel.asm	/^ffff800000102fe8:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff800000102fef	kernel.asm	/^ffff800000102fef:	80 ff ff $/;"	l
ffff800000102ff2	kernel.asm	/^ffff800000102ff2:	ff d0                	callq  *%rax$/;"	l
ffff800000102ff4	kernel.asm	/^ffff800000102ff4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000102ff8	kernel.asm	/^ffff800000102ff8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000102ffb	kernel.asm	/^ffff800000102ffb:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103002	kernel.asm	/^ffff800000103002:	80 ff ff $/;"	l
ffff800000103005	kernel.asm	/^ffff800000103005:	ff d0                	callq  *%rax$/;"	l
ffff800000103007	kernel.asm	/^ffff800000103007:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010300a	kernel.asm	/^ffff80000010300a:	eb 16                	jmp    ffff800000103022 <bmap+0x15a>$/;"	l
ffff80000010300c	kernel.asm	/^ffff80000010300c:	48 bf a1 cd 10 00 00 	movabs $0xffff80000010cda1,%rdi$/;"	l
ffff800000103013	kernel.asm	/^ffff800000103013:	80 ff ff $/;"	l
ffff800000103016	kernel.asm	/^ffff800000103016:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010301d	kernel.asm	/^ffff80000010301d:	80 ff ff $/;"	l
ffff800000103020	kernel.asm	/^ffff800000103020:	ff d0                	callq  *%rax$/;"	l
ffff800000103022	kernel.asm	/^ffff800000103022:	48 83 c4 38          	add    $0x38,%rsp$/;"	l
ffff800000103026	kernel.asm	/^ffff800000103026:	5b                   	pop    %rbx$/;"	l
ffff800000103027	kernel.asm	/^ffff800000103027:	5d                   	pop    %rbp$/;"	l
ffff800000103028	kernel.asm	/^ffff800000103028:	c3                   	retq   $/;"	l
ffff800000103029	kernel.asm	/^ffff800000103029 <itrunc>:$/;"	l
ffff800000103029	kernel.asm	/^ffff800000103029:	55                   	push   %rbp$/;"	l
ffff80000010302a	kernel.asm	/^ffff80000010302a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010302d	kernel.asm	/^ffff80000010302d:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000103031	kernel.asm	/^ffff800000103031:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff800000103035	kernel.asm	/^ffff800000103035:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010303c	kernel.asm	/^ffff80000010303c:	eb 55                	jmp    ffff800000103093 <itrunc+0x6a>$/;"	l
ffff80000010303e	kernel.asm	/^ffff80000010303e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103042	kernel.asm	/^ffff800000103042:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103045	kernel.asm	/^ffff800000103045:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000103048	kernel.asm	/^ffff800000103048:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff80000010304c	kernel.asm	/^ffff80000010304c:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff80000010304f	kernel.asm	/^ffff80000010304f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103051	kernel.asm	/^ffff800000103051:	74 3c                	je     ffff80000010308f <itrunc+0x66>$/;"	l
ffff800000103053	kernel.asm	/^ffff800000103053:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103057	kernel.asm	/^ffff800000103057:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010305a	kernel.asm	/^ffff80000010305a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010305d	kernel.asm	/^ffff80000010305d:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000103061	kernel.asm	/^ffff800000103061:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff800000103064	kernel.asm	/^ffff800000103064:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000103068	kernel.asm	/^ffff800000103068:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff80000010306a	kernel.asm	/^ffff80000010306a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010306c	kernel.asm	/^ffff80000010306c:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010306e	kernel.asm	/^ffff80000010306e:	48 b8 2d 26 10 00 00 	movabs $0xffff80000010262d,%rax$/;"	l
ffff800000103075	kernel.asm	/^ffff800000103075:	80 ff ff $/;"	l
ffff800000103078	kernel.asm	/^ffff800000103078:	ff d0                	callq  *%rax$/;"	l
ffff80000010307a	kernel.asm	/^ffff80000010307a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010307e	kernel.asm	/^ffff80000010307e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103081	kernel.asm	/^ffff800000103081:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000103084	kernel.asm	/^ffff800000103084:	48 83 c2 28          	add    $0x28,%rdx$/;"	l
ffff800000103088	kernel.asm	/^ffff800000103088:	c7 04 90 00 00 00 00 	movl   $0x0,(%rax,%rdx,4)$/;"	l
ffff80000010308f	kernel.asm	/^ffff80000010308f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103093	kernel.asm	/^ffff800000103093:	83 7d fc 0b          	cmpl   $0xb,-0x4(%rbp)$/;"	l
ffff800000103097	kernel.asm	/^ffff800000103097:	7e a5                	jle    ffff80000010303e <itrunc+0x15>$/;"	l
ffff800000103099	kernel.asm	/^ffff800000103099:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010309d	kernel.asm	/^ffff80000010309d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff8000001030a3	kernel.asm	/^ffff8000001030a3:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001030a5	kernel.asm	/^ffff8000001030a5:	0f 84 ce 00 00 00    	je     ffff800000103179 <itrunc+0x150>$/;"	l
ffff8000001030ab	kernel.asm	/^ffff8000001030ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001030af	kernel.asm	/^ffff8000001030af:	8b 90 d0 00 00 00    	mov    0xd0(%rax),%edx$/;"	l
ffff8000001030b5	kernel.asm	/^ffff8000001030b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001030b9	kernel.asm	/^ffff8000001030b9:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001030bb	kernel.asm	/^ffff8000001030bb:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001030bd	kernel.asm	/^ffff8000001030bd:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001030bf	kernel.asm	/^ffff8000001030bf:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001030c6	kernel.asm	/^ffff8000001030c6:	80 ff ff $/;"	l
ffff8000001030c9	kernel.asm	/^ffff8000001030c9:	ff d0                	callq  *%rax$/;"	l
ffff8000001030cb	kernel.asm	/^ffff8000001030cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001030cf	kernel.asm	/^ffff8000001030cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001030d3	kernel.asm	/^ffff8000001030d3:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff8000001030d9	kernel.asm	/^ffff8000001030d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001030dd	kernel.asm	/^ffff8000001030dd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001030e4	kernel.asm	/^ffff8000001030e4:	eb 4a                	jmp    ffff800000103130 <itrunc+0x107>$/;"	l
ffff8000001030e6	kernel.asm	/^ffff8000001030e6:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001030e9	kernel.asm	/^ffff8000001030e9:	48 98                	cltq   $/;"	l
ffff8000001030eb	kernel.asm	/^ffff8000001030eb:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001030f2	kernel.asm	/^ffff8000001030f2:	00 $/;"	l
ffff8000001030f3	kernel.asm	/^ffff8000001030f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001030f7	kernel.asm	/^ffff8000001030f7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001030fa	kernel.asm	/^ffff8000001030fa:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001030fc	kernel.asm	/^ffff8000001030fc:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001030fe	kernel.asm	/^ffff8000001030fe:	74 2c                	je     ffff80000010312c <itrunc+0x103>$/;"	l
ffff800000103100	kernel.asm	/^ffff800000103100:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103103	kernel.asm	/^ffff800000103103:	48 98                	cltq   $/;"	l
ffff800000103105	kernel.asm	/^ffff800000103105:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010310c	kernel.asm	/^ffff80000010310c:	00 $/;"	l
ffff80000010310d	kernel.asm	/^ffff80000010310d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103111	kernel.asm	/^ffff800000103111:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000103114	kernel.asm	/^ffff800000103114:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103116	kernel.asm	/^ffff800000103116:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010311a	kernel.asm	/^ffff80000010311a:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff80000010311c	kernel.asm	/^ffff80000010311c:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010311e	kernel.asm	/^ffff80000010311e:	89 d7                	mov    %edx,%edi$/;"	l
ffff800000103120	kernel.asm	/^ffff800000103120:	48 b8 2d 26 10 00 00 	movabs $0xffff80000010262d,%rax$/;"	l
ffff800000103127	kernel.asm	/^ffff800000103127:	80 ff ff $/;"	l
ffff80000010312a	kernel.asm	/^ffff80000010312a:	ff d0                	callq  *%rax$/;"	l
ffff80000010312c	kernel.asm	/^ffff80000010312c:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff800000103130	kernel.asm	/^ffff800000103130:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103133	kernel.asm	/^ffff800000103133:	83 f8 7f             	cmp    $0x7f,%eax$/;"	l
ffff800000103136	kernel.asm	/^ffff800000103136:	76 ae                	jbe    ffff8000001030e6 <itrunc+0xbd>$/;"	l
ffff800000103138	kernel.asm	/^ffff800000103138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010313c	kernel.asm	/^ffff80000010313c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010313f	kernel.asm	/^ffff80000010313f:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103146	kernel.asm	/^ffff800000103146:	80 ff ff $/;"	l
ffff800000103149	kernel.asm	/^ffff800000103149:	ff d0                	callq  *%rax$/;"	l
ffff80000010314b	kernel.asm	/^ffff80000010314b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010314f	kernel.asm	/^ffff80000010314f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax$/;"	l
ffff800000103155	kernel.asm	/^ffff800000103155:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000103159	kernel.asm	/^ffff800000103159:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff80000010315b	kernel.asm	/^ffff80000010315b:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010315d	kernel.asm	/^ffff80000010315d:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010315f	kernel.asm	/^ffff80000010315f:	48 b8 2d 26 10 00 00 	movabs $0xffff80000010262d,%rax$/;"	l
ffff800000103166	kernel.asm	/^ffff800000103166:	80 ff ff $/;"	l
ffff800000103169	kernel.asm	/^ffff800000103169:	ff d0                	callq  *%rax$/;"	l
ffff80000010316b	kernel.asm	/^ffff80000010316b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010316f	kernel.asm	/^ffff80000010316f:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)$/;"	l
ffff800000103176	kernel.asm	/^ffff800000103176:	00 00 00 $/;"	l
ffff800000103179	kernel.asm	/^ffff800000103179:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010317d	kernel.asm	/^ffff80000010317d:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%rax)$/;"	l
ffff800000103184	kernel.asm	/^ffff800000103184:	00 00 00 $/;"	l
ffff800000103187	kernel.asm	/^ffff800000103187:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010318b	kernel.asm	/^ffff80000010318b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010318e	kernel.asm	/^ffff80000010318e:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff800000103195	kernel.asm	/^ffff800000103195:	80 ff ff $/;"	l
ffff800000103198	kernel.asm	/^ffff800000103198:	ff d0                	callq  *%rax$/;"	l
ffff80000010319a	kernel.asm	/^ffff80000010319a:	90                   	nop$/;"	l
ffff80000010319b	kernel.asm	/^ffff80000010319b:	c9                   	leaveq $/;"	l
ffff80000010319c	kernel.asm	/^ffff80000010319c:	c3                   	retq   $/;"	l
ffff80000010319d	kernel.asm	/^ffff80000010319d <stati>:$/;"	l
ffff80000010319d	kernel.asm	/^ffff80000010319d:	55                   	push   %rbp$/;"	l
ffff80000010319e	kernel.asm	/^ffff80000010319e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001031a1	kernel.asm	/^ffff8000001031a1:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001031a5	kernel.asm	/^ffff8000001031a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001031a9	kernel.asm	/^ffff8000001031a9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001031ad	kernel.asm	/^ffff8000001031ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001031b1	kernel.asm	/^ffff8000001031b1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001031b3	kernel.asm	/^ffff8000001031b3:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001031b5	kernel.asm	/^ffff8000001031b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001031b9	kernel.asm	/^ffff8000001031b9:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff8000001031bc	kernel.asm	/^ffff8000001031bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001031c0	kernel.asm	/^ffff8000001031c0:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff8000001031c3	kernel.asm	/^ffff8000001031c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001031c7	kernel.asm	/^ffff8000001031c7:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff8000001031ca	kernel.asm	/^ffff8000001031ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001031ce	kernel.asm	/^ffff8000001031ce:	0f b7 90 94 00 00 00 	movzwl 0x94(%rax),%edx$/;"	l
ffff8000001031d5	kernel.asm	/^ffff8000001031d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001031d9	kernel.asm	/^ffff8000001031d9:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001031dc	kernel.asm	/^ffff8000001031dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001031e0	kernel.asm	/^ffff8000001031e0:	0f b7 90 9a 00 00 00 	movzwl 0x9a(%rax),%edx$/;"	l
ffff8000001031e7	kernel.asm	/^ffff8000001031e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001031eb	kernel.asm	/^ffff8000001031eb:	66 89 50 0c          	mov    %dx,0xc(%rax)$/;"	l
ffff8000001031ef	kernel.asm	/^ffff8000001031ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001031f3	kernel.asm	/^ffff8000001031f3:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff8000001031f9	kernel.asm	/^ffff8000001031f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001031fd	kernel.asm	/^ffff8000001031fd:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000103200	kernel.asm	/^ffff800000103200:	90                   	nop$/;"	l
ffff800000103201	kernel.asm	/^ffff800000103201:	c9                   	leaveq $/;"	l
ffff800000103202	kernel.asm	/^ffff800000103202:	c3                   	retq   $/;"	l
ffff800000103203	kernel.asm	/^ffff800000103203 <readi>:$/;"	l
ffff800000103203	kernel.asm	/^ffff800000103203:	55                   	push   %rbp$/;"	l
ffff800000103204	kernel.asm	/^ffff800000103204:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103207	kernel.asm	/^ffff800000103207:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010320b	kernel.asm	/^ffff80000010320b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010320f	kernel.asm	/^ffff80000010320f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff800000103213	kernel.asm	/^ffff800000103213:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103216	kernel.asm	/^ffff800000103216:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000103219	kernel.asm	/^ffff800000103219:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010321d	kernel.asm	/^ffff80000010321d:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000103223	kernel.asm	/^ffff800000103223:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000103226	kernel.asm	/^ffff800000103226:	72 0d                	jb     ffff800000103235 <readi+0x32>$/;"	l
ffff800000103228	kernel.asm	/^ffff800000103228:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff80000010322b	kernel.asm	/^ffff80000010322b:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010322e	kernel.asm	/^ffff80000010322e:	01 d0                	add    %edx,%eax$/;"	l
ffff800000103230	kernel.asm	/^ffff800000103230:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000103233	kernel.asm	/^ffff800000103233:	73 0a                	jae    ffff80000010323f <readi+0x3c>$/;"	l
ffff800000103235	kernel.asm	/^ffff800000103235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010323a	kernel.asm	/^ffff80000010323a:	e9 ed 00 00 00       	jmpq   ffff80000010332c <readi+0x129>$/;"	l
ffff80000010323f	kernel.asm	/^ffff80000010323f:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103242	kernel.asm	/^ffff800000103242:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103245	kernel.asm	/^ffff800000103245:	01 c2                	add    %eax,%edx$/;"	l
ffff800000103247	kernel.asm	/^ffff800000103247:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010324b	kernel.asm	/^ffff80000010324b:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff800000103251	kernel.asm	/^ffff800000103251:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000103253	kernel.asm	/^ffff800000103253:	76 10                	jbe    ffff800000103265 <readi+0x62>$/;"	l
ffff800000103255	kernel.asm	/^ffff800000103255:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103259	kernel.asm	/^ffff800000103259:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010325f	kernel.asm	/^ffff80000010325f:	2b 45 cc             	sub    -0x34(%rbp),%eax$/;"	l
ffff800000103262	kernel.asm	/^ffff800000103262:	89 45 c8             	mov    %eax,-0x38(%rbp)$/;"	l
ffff800000103265	kernel.asm	/^ffff800000103265:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010326c	kernel.asm	/^ffff80000010326c:	e9 ac 00 00 00       	jmpq   ffff80000010331d <readi+0x11a>$/;"	l
ffff800000103271	kernel.asm	/^ffff800000103271:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103274	kernel.asm	/^ffff800000103274:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff800000103277	kernel.asm	/^ffff800000103277:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103279	kernel.asm	/^ffff800000103279:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010327d	kernel.asm	/^ffff80000010327d:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010327f	kernel.asm	/^ffff80000010327f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103282	kernel.asm	/^ffff800000103282:	48 b8 c8 2e 10 00 00 	movabs $0xffff800000102ec8,%rax$/;"	l
ffff800000103289	kernel.asm	/^ffff800000103289:	80 ff ff $/;"	l
ffff80000010328c	kernel.asm	/^ffff80000010328c:	ff d0                	callq  *%rax$/;"	l
ffff80000010328e	kernel.asm	/^ffff80000010328e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103290	kernel.asm	/^ffff800000103290:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103294	kernel.asm	/^ffff800000103294:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103296	kernel.asm	/^ffff800000103296:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103298	kernel.asm	/^ffff800000103298:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010329a	kernel.asm	/^ffff80000010329a:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001032a1	kernel.asm	/^ffff8000001032a1:	80 ff ff $/;"	l
ffff8000001032a4	kernel.asm	/^ffff8000001032a4:	ff d0                	callq  *%rax$/;"	l
ffff8000001032a6	kernel.asm	/^ffff8000001032a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001032aa	kernel.asm	/^ffff8000001032aa:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001032ad	kernel.asm	/^ffff8000001032ad:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001032b2	kernel.asm	/^ffff8000001032b2:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff8000001032b7	kernel.asm	/^ffff8000001032b7:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001032b9	kernel.asm	/^ffff8000001032b9:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001032bc	kernel.asm	/^ffff8000001032bc:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001032bf	kernel.asm	/^ffff8000001032bf:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001032c1	kernel.asm	/^ffff8000001032c1:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff8000001032c4	kernel.asm	/^ffff8000001032c4:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff8000001032c7	kernel.asm	/^ffff8000001032c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001032cb	kernel.asm	/^ffff8000001032cb:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff8000001032d2	kernel.asm	/^ffff8000001032d2:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001032d5	kernel.asm	/^ffff8000001032d5:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001032da	kernel.asm	/^ffff8000001032da:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff8000001032de	kernel.asm	/^ffff8000001032de:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff8000001032e1	kernel.asm	/^ffff8000001032e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff8000001032e5	kernel.asm	/^ffff8000001032e5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001032e8	kernel.asm	/^ffff8000001032e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001032eb	kernel.asm	/^ffff8000001032eb:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff8000001032f2	kernel.asm	/^ffff8000001032f2:	80 ff ff $/;"	l
ffff8000001032f5	kernel.asm	/^ffff8000001032f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001032f7	kernel.asm	/^ffff8000001032f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001032fb	kernel.asm	/^ffff8000001032fb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001032fe	kernel.asm	/^ffff8000001032fe:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103305	kernel.asm	/^ffff800000103305:	80 ff ff $/;"	l
ffff800000103308	kernel.asm	/^ffff800000103308:	ff d0                	callq  *%rax$/;"	l
ffff80000010330a	kernel.asm	/^ffff80000010330a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010330d	kernel.asm	/^ffff80000010330d:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000103310	kernel.asm	/^ffff800000103310:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103313	kernel.asm	/^ffff800000103313:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff800000103316	kernel.asm	/^ffff800000103316:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103319	kernel.asm	/^ffff800000103319:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff80000010331d	kernel.asm	/^ffff80000010331d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103320	kernel.asm	/^ffff800000103320:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff800000103323	kernel.asm	/^ffff800000103323:	0f 82 48 ff ff ff    	jb     ffff800000103271 <readi+0x6e>$/;"	l
ffff800000103329	kernel.asm	/^ffff800000103329:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff80000010332c	kernel.asm	/^ffff80000010332c:	c9                   	leaveq $/;"	l
ffff80000010332d	kernel.asm	/^ffff80000010332d:	c3                   	retq   $/;"	l
ffff80000010332e	kernel.asm	/^ffff80000010332e <writei>:$/;"	l
ffff80000010332e	kernel.asm	/^ffff80000010332e:	55                   	push   %rbp$/;"	l
ffff80000010332f	kernel.asm	/^ffff80000010332f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103332	kernel.asm	/^ffff800000103332:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff800000103336	kernel.asm	/^ffff800000103336:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010333a	kernel.asm	/^ffff80000010333a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010333e	kernel.asm	/^ffff80000010333e:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff800000103341	kernel.asm	/^ffff800000103341:	89 4d c8             	mov    %ecx,-0x38(%rbp)$/;"	l
ffff800000103344	kernel.asm	/^ffff800000103344:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103348	kernel.asm	/^ffff800000103348:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010334e	kernel.asm	/^ffff80000010334e:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff800000103351	kernel.asm	/^ffff800000103351:	72 0d                	jb     ffff800000103360 <writei+0x32>$/;"	l
ffff800000103353	kernel.asm	/^ffff800000103353:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103356	kernel.asm	/^ffff800000103356:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103359	kernel.asm	/^ffff800000103359:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010335b	kernel.asm	/^ffff80000010335b:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff80000010335e	kernel.asm	/^ffff80000010335e:	73 0a                	jae    ffff80000010336a <writei+0x3c>$/;"	l
ffff800000103360	kernel.asm	/^ffff800000103360:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103365	kernel.asm	/^ffff800000103365:	e9 28 01 00 00       	jmpq   ffff800000103492 <writei+0x164>$/;"	l
ffff80000010336a	kernel.asm	/^ffff80000010336a:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff80000010336d	kernel.asm	/^ffff80000010336d:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103370	kernel.asm	/^ffff800000103370:	01 d0                	add    %edx,%eax$/;"	l
ffff800000103372	kernel.asm	/^ffff800000103372:	3d 00 18 01 00       	cmp    $0x11800,%eax$/;"	l
ffff800000103377	kernel.asm	/^ffff800000103377:	76 0a                	jbe    ffff800000103383 <writei+0x55>$/;"	l
ffff800000103379	kernel.asm	/^ffff800000103379:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010337e	kernel.asm	/^ffff80000010337e:	e9 0f 01 00 00       	jmpq   ffff800000103492 <writei+0x164>$/;"	l
ffff800000103383	kernel.asm	/^ffff800000103383:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010338a	kernel.asm	/^ffff80000010338a:	e9 bf 00 00 00       	jmpq   ffff80000010344e <writei+0x120>$/;"	l
ffff80000010338f	kernel.asm	/^ffff80000010338f:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff800000103392	kernel.asm	/^ffff800000103392:	c1 e8 09             	shr    $0x9,%eax$/;"	l
ffff800000103395	kernel.asm	/^ffff800000103395:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103397	kernel.asm	/^ffff800000103397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010339b	kernel.asm	/^ffff80000010339b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010339d	kernel.asm	/^ffff80000010339d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001033a0	kernel.asm	/^ffff8000001033a0:	48 b8 c8 2e 10 00 00 	movabs $0xffff800000102ec8,%rax$/;"	l
ffff8000001033a7	kernel.asm	/^ffff8000001033a7:	80 ff ff $/;"	l
ffff8000001033aa	kernel.asm	/^ffff8000001033aa:	ff d0                	callq  *%rax$/;"	l
ffff8000001033ac	kernel.asm	/^ffff8000001033ac:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001033ae	kernel.asm	/^ffff8000001033ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001033b2	kernel.asm	/^ffff8000001033b2:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001033b4	kernel.asm	/^ffff8000001033b4:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001033b6	kernel.asm	/^ffff8000001033b6:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001033b8	kernel.asm	/^ffff8000001033b8:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001033bf	kernel.asm	/^ffff8000001033bf:	80 ff ff $/;"	l
ffff8000001033c2	kernel.asm	/^ffff8000001033c2:	ff d0                	callq  *%rax$/;"	l
ffff8000001033c4	kernel.asm	/^ffff8000001033c4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001033c8	kernel.asm	/^ffff8000001033c8:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001033cb	kernel.asm	/^ffff8000001033cb:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001033d0	kernel.asm	/^ffff8000001033d0:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff8000001033d5	kernel.asm	/^ffff8000001033d5:	29 c2                	sub    %eax,%edx$/;"	l
ffff8000001033d7	kernel.asm	/^ffff8000001033d7:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff8000001033da	kernel.asm	/^ffff8000001033da:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff8000001033dd	kernel.asm	/^ffff8000001033dd:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001033df	kernel.asm	/^ffff8000001033df:	0f 46 c2             	cmovbe %edx,%eax$/;"	l
ffff8000001033e2	kernel.asm	/^ffff8000001033e2:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff8000001033e5	kernel.asm	/^ffff8000001033e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001033e9	kernel.asm	/^ffff8000001033e9:	48 8d 90 b0 00 00 00 	lea    0xb0(%rax),%rdx$/;"	l
ffff8000001033f0	kernel.asm	/^ffff8000001033f0:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001033f3	kernel.asm	/^ffff8000001033f3:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001033f8	kernel.asm	/^ffff8000001033f8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff8000001033fc	kernel.asm	/^ffff8000001033fc:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff8000001033ff	kernel.asm	/^ffff8000001033ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000103403	kernel.asm	/^ffff800000103403:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103406	kernel.asm	/^ffff800000103406:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff800000103409	kernel.asm	/^ffff800000103409:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000103410	kernel.asm	/^ffff800000103410:	80 ff ff $/;"	l
ffff800000103413	kernel.asm	/^ffff800000103413:	ff d0                	callq  *%rax$/;"	l
ffff800000103415	kernel.asm	/^ffff800000103415:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103419	kernel.asm	/^ffff800000103419:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010341c	kernel.asm	/^ffff80000010341c:	48 b8 97 53 10 00 00 	movabs $0xffff800000105397,%rax$/;"	l
ffff800000103423	kernel.asm	/^ffff800000103423:	80 ff ff $/;"	l
ffff800000103426	kernel.asm	/^ffff800000103426:	ff d0                	callq  *%rax$/;"	l
ffff800000103428	kernel.asm	/^ffff800000103428:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010342c	kernel.asm	/^ffff80000010342c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010342f	kernel.asm	/^ffff80000010342f:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000103436	kernel.asm	/^ffff800000103436:	80 ff ff $/;"	l
ffff800000103439	kernel.asm	/^ffff800000103439:	ff d0                	callq  *%rax$/;"	l
ffff80000010343b	kernel.asm	/^ffff80000010343b:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010343e	kernel.asm	/^ffff80000010343e:	01 45 fc             	add    %eax,-0x4(%rbp)$/;"	l
ffff800000103441	kernel.asm	/^ffff800000103441:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000103444	kernel.asm	/^ffff800000103444:	01 45 cc             	add    %eax,-0x34(%rbp)$/;"	l
ffff800000103447	kernel.asm	/^ffff800000103447:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff80000010344a	kernel.asm	/^ffff80000010344a:	48 01 45 d0          	add    %rax,-0x30(%rbp)$/;"	l
ffff80000010344e	kernel.asm	/^ffff80000010344e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103451	kernel.asm	/^ffff800000103451:	3b 45 c8             	cmp    -0x38(%rbp),%eax$/;"	l
ffff800000103454	kernel.asm	/^ffff800000103454:	0f 82 35 ff ff ff    	jb     ffff80000010338f <writei+0x61>$/;"	l
ffff80000010345a	kernel.asm	/^ffff80000010345a:	83 7d c8 00          	cmpl   $0x0,-0x38(%rbp)$/;"	l
ffff80000010345e	kernel.asm	/^ffff80000010345e:	74 2f                	je     ffff80000010348f <writei+0x161>$/;"	l
ffff800000103460	kernel.asm	/^ffff800000103460:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103464	kernel.asm	/^ffff800000103464:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff80000010346a	kernel.asm	/^ffff80000010346a:	3b 45 cc             	cmp    -0x34(%rbp),%eax$/;"	l
ffff80000010346d	kernel.asm	/^ffff80000010346d:	73 20                	jae    ffff80000010348f <writei+0x161>$/;"	l
ffff80000010346f	kernel.asm	/^ffff80000010346f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103473	kernel.asm	/^ffff800000103473:	8b 55 cc             	mov    -0x34(%rbp),%edx$/;"	l
ffff800000103476	kernel.asm	/^ffff800000103476:	89 90 9c 00 00 00    	mov    %edx,0x9c(%rax)$/;"	l
ffff80000010347c	kernel.asm	/^ffff80000010347c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103480	kernel.asm	/^ffff800000103480:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103483	kernel.asm	/^ffff800000103483:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff80000010348a	kernel.asm	/^ffff80000010348a:	80 ff ff $/;"	l
ffff80000010348d	kernel.asm	/^ffff80000010348d:	ff d0                	callq  *%rax$/;"	l
ffff80000010348f	kernel.asm	/^ffff80000010348f:	8b 45 c8             	mov    -0x38(%rbp),%eax$/;"	l
ffff800000103492	kernel.asm	/^ffff800000103492:	c9                   	leaveq $/;"	l
ffff800000103493	kernel.asm	/^ffff800000103493:	c3                   	retq   $/;"	l
ffff800000103494	kernel.asm	/^ffff800000103494 <namecmp>:$/;"	l
ffff800000103494	kernel.asm	/^ffff800000103494:	55                   	push   %rbp$/;"	l
ffff800000103495	kernel.asm	/^ffff800000103495:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103498	kernel.asm	/^ffff800000103498:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010349c	kernel.asm	/^ffff80000010349c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001034a0	kernel.asm	/^ffff8000001034a0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001034a4	kernel.asm	/^ffff8000001034a4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff8000001034a8	kernel.asm	/^ffff8000001034a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001034ac	kernel.asm	/^ffff8000001034ac:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff8000001034b1	kernel.asm	/^ffff8000001034b1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001034b4	kernel.asm	/^ffff8000001034b4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001034b7	kernel.asm	/^ffff8000001034b7:	48 b8 3a 7a 10 00 00 	movabs $0xffff800000107a3a,%rax$/;"	l
ffff8000001034be	kernel.asm	/^ffff8000001034be:	80 ff ff $/;"	l
ffff8000001034c1	kernel.asm	/^ffff8000001034c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001034c3	kernel.asm	/^ffff8000001034c3:	c9                   	leaveq $/;"	l
ffff8000001034c4	kernel.asm	/^ffff8000001034c4:	c3                   	retq   $/;"	l
ffff8000001034c5	kernel.asm	/^ffff8000001034c5 <dirlookup>:$/;"	l
ffff8000001034c5	kernel.asm	/^ffff8000001034c5:	55                   	push   %rbp$/;"	l
ffff8000001034c6	kernel.asm	/^ffff8000001034c6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001034c9	kernel.asm	/^ffff8000001034c9:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001034cd	kernel.asm	/^ffff8000001034cd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001034d1	kernel.asm	/^ffff8000001034d1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff8000001034d5	kernel.asm	/^ffff8000001034d5:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff8000001034d9	kernel.asm	/^ffff8000001034d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001034dd	kernel.asm	/^ffff8000001034dd:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001034e4	kernel.asm	/^ffff8000001034e4:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001034e8	kernel.asm	/^ffff8000001034e8:	74 16                	je     ffff800000103500 <dirlookup+0x3b>$/;"	l
ffff8000001034ea	kernel.asm	/^ffff8000001034ea:	48 bf b4 cd 10 00 00 	movabs $0xffff80000010cdb4,%rdi$/;"	l
ffff8000001034f1	kernel.asm	/^ffff8000001034f1:	80 ff ff $/;"	l
ffff8000001034f4	kernel.asm	/^ffff8000001034f4:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001034fb	kernel.asm	/^ffff8000001034fb:	80 ff ff $/;"	l
ffff8000001034fe	kernel.asm	/^ffff8000001034fe:	ff d0                	callq  *%rax$/;"	l
ffff800000103500	kernel.asm	/^ffff800000103500:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103507	kernel.asm	/^ffff800000103507:	e9 9f 00 00 00       	jmpq   ffff8000001035ab <dirlookup+0xe6>$/;"	l
ffff80000010350c	kernel.asm	/^ffff80000010350c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010350f	kernel.asm	/^ffff80000010350f:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff800000103513	kernel.asm	/^ffff800000103513:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103517	kernel.asm	/^ffff800000103517:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff80000010351c	kernel.asm	/^ffff80000010351c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010351f	kernel.asm	/^ffff80000010351f:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff800000103526	kernel.asm	/^ffff800000103526:	80 ff ff $/;"	l
ffff800000103529	kernel.asm	/^ffff800000103529:	ff d0                	callq  *%rax$/;"	l
ffff80000010352b	kernel.asm	/^ffff80000010352b:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff80000010352e	kernel.asm	/^ffff80000010352e:	74 16                	je     ffff800000103546 <dirlookup+0x81>$/;"	l
ffff800000103530	kernel.asm	/^ffff800000103530:	48 bf c6 cd 10 00 00 	movabs $0xffff80000010cdc6,%rdi$/;"	l
ffff800000103537	kernel.asm	/^ffff800000103537:	80 ff ff $/;"	l
ffff80000010353a	kernel.asm	/^ffff80000010353a:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103541	kernel.asm	/^ffff800000103541:	80 ff ff $/;"	l
ffff800000103544	kernel.asm	/^ffff800000103544:	ff d0                	callq  *%rax$/;"	l
ffff800000103546	kernel.asm	/^ffff800000103546:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff80000010354a	kernel.asm	/^ffff80000010354a:	66 85 c0             	test   %ax,%ax$/;"	l
ffff80000010354d	kernel.asm	/^ffff80000010354d:	74 57                	je     ffff8000001035a6 <dirlookup+0xe1>$/;"	l
ffff80000010354f	kernel.asm	/^ffff80000010354f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000103553	kernel.asm	/^ffff800000103553:	48 8d 50 02          	lea    0x2(%rax),%rdx$/;"	l
ffff800000103557	kernel.asm	/^ffff800000103557:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010355b	kernel.asm	/^ffff80000010355b:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010355e	kernel.asm	/^ffff80000010355e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103561	kernel.asm	/^ffff800000103561:	48 b8 94 34 10 00 00 	movabs $0xffff800000103494,%rax$/;"	l
ffff800000103568	kernel.asm	/^ffff800000103568:	80 ff ff $/;"	l
ffff80000010356b	kernel.asm	/^ffff80000010356b:	ff d0                	callq  *%rax$/;"	l
ffff80000010356d	kernel.asm	/^ffff80000010356d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010356f	kernel.asm	/^ffff80000010356f:	75 36                	jne    ffff8000001035a7 <dirlookup+0xe2>$/;"	l
ffff800000103571	kernel.asm	/^ffff800000103571:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff800000103576	kernel.asm	/^ffff800000103576:	74 09                	je     ffff800000103581 <dirlookup+0xbc>$/;"	l
ffff800000103578	kernel.asm	/^ffff800000103578:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010357c	kernel.asm	/^ffff80000010357c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010357f	kernel.asm	/^ffff80000010357f:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103581	kernel.asm	/^ffff800000103581:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff800000103585	kernel.asm	/^ffff800000103585:	0f b7 c0             	movzwl %ax,%eax$/;"	l
ffff800000103588	kernel.asm	/^ffff800000103588:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010358b	kernel.asm	/^ffff80000010358b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010358f	kernel.asm	/^ffff80000010358f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103591	kernel.asm	/^ffff800000103591:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000103594	kernel.asm	/^ffff800000103594:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000103596	kernel.asm	/^ffff800000103596:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000103598	kernel.asm	/^ffff800000103598:	48 b8 2f 2a 10 00 00 	movabs $0xffff800000102a2f,%rax$/;"	l
ffff80000010359f	kernel.asm	/^ffff80000010359f:	80 ff ff $/;"	l
ffff8000001035a2	kernel.asm	/^ffff8000001035a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001035a4	kernel.asm	/^ffff8000001035a4:	eb 1d                	jmp    ffff8000001035c3 <dirlookup+0xfe>$/;"	l
ffff8000001035a6	kernel.asm	/^ffff8000001035a6:	90                   	nop$/;"	l
ffff8000001035a7	kernel.asm	/^ffff8000001035a7:	83 45 fc 10          	addl   $0x10,-0x4(%rbp)$/;"	l
ffff8000001035ab	kernel.asm	/^ffff8000001035ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001035af	kernel.asm	/^ffff8000001035af:	8b 80 9c 00 00 00    	mov    0x9c(%rax),%eax$/;"	l
ffff8000001035b5	kernel.asm	/^ffff8000001035b5:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001035b8	kernel.asm	/^ffff8000001035b8:	0f 87 4e ff ff ff    	ja     ffff80000010350c <dirlookup+0x47>$/;"	l
ffff8000001035be	kernel.asm	/^ffff8000001035be:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001035c3	kernel.asm	/^ffff8000001035c3:	c9                   	leaveq $/;"	l
ffff8000001035c4	kernel.asm	/^ffff8000001035c4:	c3                   	retq   $/;"	l
ffff8000001035c5	kernel.asm	/^ffff8000001035c5 <dirlink>:$/;"	l
ffff8000001035c5	kernel.asm	/^ffff8000001035c5:	55                   	push   %rbp$/;"	l
ffff8000001035c6	kernel.asm	/^ffff8000001035c6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001035c9	kernel.asm	/^ffff8000001035c9:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001035cd	kernel.asm	/^ffff8000001035cd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001035d1	kernel.asm	/^ffff8000001035d1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff8000001035d5	kernel.asm	/^ffff8000001035d5:	89 55 cc             	mov    %edx,-0x34(%rbp)$/;"	l
ffff8000001035d8	kernel.asm	/^ffff8000001035d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx$/;"	l
ffff8000001035dc	kernel.asm	/^ffff8000001035dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001035e0	kernel.asm	/^ffff8000001035e0:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001035e5	kernel.asm	/^ffff8000001035e5:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001035e8	kernel.asm	/^ffff8000001035e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001035eb	kernel.asm	/^ffff8000001035eb:	48 b8 c5 34 10 00 00 	movabs $0xffff8000001034c5,%rax$/;"	l
ffff8000001035f2	kernel.asm	/^ffff8000001035f2:	80 ff ff $/;"	l
ffff8000001035f5	kernel.asm	/^ffff8000001035f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001035f7	kernel.asm	/^ffff8000001035f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001035fb	kernel.asm	/^ffff8000001035fb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000103600	kernel.asm	/^ffff800000103600:	74 1d                	je     ffff80000010361f <dirlink+0x5a>$/;"	l
ffff800000103602	kernel.asm	/^ffff800000103602:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000103606	kernel.asm	/^ffff800000103606:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103609	kernel.asm	/^ffff800000103609:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff800000103610	kernel.asm	/^ffff800000103610:	80 ff ff $/;"	l
ffff800000103613	kernel.asm	/^ffff800000103613:	ff d0                	callq  *%rax$/;"	l
ffff800000103615	kernel.asm	/^ffff800000103615:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010361a	kernel.asm	/^ffff80000010361a:	e9 d2 00 00 00       	jmpq   ffff8000001036f1 <dirlink+0x12c>$/;"	l
ffff80000010361f	kernel.asm	/^ffff80000010361f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103626	kernel.asm	/^ffff800000103626:	eb 4c                	jmp    ffff800000103674 <dirlink+0xaf>$/;"	l
ffff800000103628	kernel.asm	/^ffff800000103628:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010362b	kernel.asm	/^ffff80000010362b:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010362f	kernel.asm	/^ffff80000010362f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103633	kernel.asm	/^ffff800000103633:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000103638	kernel.asm	/^ffff800000103638:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010363b	kernel.asm	/^ffff80000010363b:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff800000103642	kernel.asm	/^ffff800000103642:	80 ff ff $/;"	l
ffff800000103645	kernel.asm	/^ffff800000103645:	ff d0                	callq  *%rax$/;"	l
ffff800000103647	kernel.asm	/^ffff800000103647:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff80000010364a	kernel.asm	/^ffff80000010364a:	74 16                	je     ffff800000103662 <dirlink+0x9d>$/;"	l
ffff80000010364c	kernel.asm	/^ffff80000010364c:	48 bf d5 cd 10 00 00 	movabs $0xffff80000010cdd5,%rdi$/;"	l
ffff800000103653	kernel.asm	/^ffff800000103653:	80 ff ff $/;"	l
ffff800000103656	kernel.asm	/^ffff800000103656:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010365d	kernel.asm	/^ffff80000010365d:	80 ff ff $/;"	l
ffff800000103660	kernel.asm	/^ffff800000103660:	ff d0                	callq  *%rax$/;"	l
ffff800000103662	kernel.asm	/^ffff800000103662:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff800000103666	kernel.asm	/^ffff800000103666:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000103669	kernel.asm	/^ffff800000103669:	74 1c                	je     ffff800000103687 <dirlink+0xc2>$/;"	l
ffff80000010366b	kernel.asm	/^ffff80000010366b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010366e	kernel.asm	/^ffff80000010366e:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff800000103671	kernel.asm	/^ffff800000103671:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000103674	kernel.asm	/^ffff800000103674:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000103678	kernel.asm	/^ffff800000103678:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff80000010367e	kernel.asm	/^ffff80000010367e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103681	kernel.asm	/^ffff800000103681:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000103683	kernel.asm	/^ffff800000103683:	77 a3                	ja     ffff800000103628 <dirlink+0x63>$/;"	l
ffff800000103685	kernel.asm	/^ffff800000103685:	eb 01                	jmp    ffff800000103688 <dirlink+0xc3>$/;"	l
ffff800000103687	kernel.asm	/^ffff800000103687:	90                   	nop$/;"	l
ffff800000103688	kernel.asm	/^ffff800000103688:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010368c	kernel.asm	/^ffff80000010368c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000103690	kernel.asm	/^ffff800000103690:	48 8d 4a 02          	lea    0x2(%rdx),%rcx$/;"	l
ffff800000103694	kernel.asm	/^ffff800000103694:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff800000103699	kernel.asm	/^ffff800000103699:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010369c	kernel.asm	/^ffff80000010369c:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff80000010369f	kernel.asm	/^ffff80000010369f:	48 b8 a7 7a 10 00 00 	movabs $0xffff800000107aa7,%rax$/;"	l
ffff8000001036a6	kernel.asm	/^ffff8000001036a6:	80 ff ff $/;"	l
ffff8000001036a9	kernel.asm	/^ffff8000001036a9:	ff d0                	callq  *%rax$/;"	l
ffff8000001036ab	kernel.asm	/^ffff8000001036ab:	8b 45 cc             	mov    -0x34(%rbp),%eax$/;"	l
ffff8000001036ae	kernel.asm	/^ffff8000001036ae:	66 89 45 e0          	mov    %ax,-0x20(%rbp)$/;"	l
ffff8000001036b2	kernel.asm	/^ffff8000001036b2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001036b5	kernel.asm	/^ffff8000001036b5:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff8000001036b9	kernel.asm	/^ffff8000001036b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001036bd	kernel.asm	/^ffff8000001036bd:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff8000001036c2	kernel.asm	/^ffff8000001036c2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001036c5	kernel.asm	/^ffff8000001036c5:	48 b8 2e 33 10 00 00 	movabs $0xffff80000010332e,%rax$/;"	l
ffff8000001036cc	kernel.asm	/^ffff8000001036cc:	80 ff ff $/;"	l
ffff8000001036cf	kernel.asm	/^ffff8000001036cf:	ff d0                	callq  *%rax$/;"	l
ffff8000001036d1	kernel.asm	/^ffff8000001036d1:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff8000001036d4	kernel.asm	/^ffff8000001036d4:	74 16                	je     ffff8000001036ec <dirlink+0x127>$/;"	l
ffff8000001036d6	kernel.asm	/^ffff8000001036d6:	48 bf e2 cd 10 00 00 	movabs $0xffff80000010cde2,%rdi$/;"	l
ffff8000001036dd	kernel.asm	/^ffff8000001036dd:	80 ff ff $/;"	l
ffff8000001036e0	kernel.asm	/^ffff8000001036e0:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001036e7	kernel.asm	/^ffff8000001036e7:	80 ff ff $/;"	l
ffff8000001036ea	kernel.asm	/^ffff8000001036ea:	ff d0                	callq  *%rax$/;"	l
ffff8000001036ec	kernel.asm	/^ffff8000001036ec:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001036f1	kernel.asm	/^ffff8000001036f1:	c9                   	leaveq $/;"	l
ffff8000001036f2	kernel.asm	/^ffff8000001036f2:	c3                   	retq   $/;"	l
ffff8000001036f3	kernel.asm	/^ffff8000001036f3 <skipelem>:$/;"	l
ffff8000001036f3	kernel.asm	/^ffff8000001036f3:	55                   	push   %rbp$/;"	l
ffff8000001036f4	kernel.asm	/^ffff8000001036f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001036f7	kernel.asm	/^ffff8000001036f7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001036fb	kernel.asm	/^ffff8000001036fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001036ff	kernel.asm	/^ffff8000001036ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000103703	kernel.asm	/^ffff800000103703:	eb 05                	jmp    ffff80000010370a <skipelem+0x17>$/;"	l
ffff800000103705	kernel.asm	/^ffff800000103705:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff80000010370a	kernel.asm	/^ffff80000010370a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010370e	kernel.asm	/^ffff80000010370e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103711	kernel.asm	/^ffff800000103711:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103713	kernel.asm	/^ffff800000103713:	74 f0                	je     ffff800000103705 <skipelem+0x12>$/;"	l
ffff800000103715	kernel.asm	/^ffff800000103715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103719	kernel.asm	/^ffff800000103719:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010371c	kernel.asm	/^ffff80000010371c:	84 c0                	test   %al,%al$/;"	l
ffff80000010371e	kernel.asm	/^ffff80000010371e:	75 0a                	jne    ffff80000010372a <skipelem+0x37>$/;"	l
ffff800000103720	kernel.asm	/^ffff800000103720:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103725	kernel.asm	/^ffff800000103725:	e9 a0 00 00 00       	jmpq   ffff8000001037ca <skipelem+0xd7>$/;"	l
ffff80000010372a	kernel.asm	/^ffff80000010372a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010372e	kernel.asm	/^ffff80000010372e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103732	kernel.asm	/^ffff800000103732:	eb 05                	jmp    ffff800000103739 <skipelem+0x46>$/;"	l
ffff800000103734	kernel.asm	/^ffff800000103734:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff800000103739	kernel.asm	/^ffff800000103739:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010373d	kernel.asm	/^ffff80000010373d:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103740	kernel.asm	/^ffff800000103740:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff800000103742	kernel.asm	/^ffff800000103742:	74 0b                	je     ffff80000010374f <skipelem+0x5c>$/;"	l
ffff800000103744	kernel.asm	/^ffff800000103744:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103748	kernel.asm	/^ffff800000103748:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010374b	kernel.asm	/^ffff80000010374b:	84 c0                	test   %al,%al$/;"	l
ffff80000010374d	kernel.asm	/^ffff80000010374d:	75 e5                	jne    ffff800000103734 <skipelem+0x41>$/;"	l
ffff80000010374f	kernel.asm	/^ffff80000010374f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000103753	kernel.asm	/^ffff800000103753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103757	kernel.asm	/^ffff800000103757:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010375a	kernel.asm	/^ffff80000010375a:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010375d	kernel.asm	/^ffff80000010375d:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103760	kernel.asm	/^ffff800000103760:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)$/;"	l
ffff800000103764	kernel.asm	/^ffff800000103764:	7e 21                	jle    ffff800000103787 <skipelem+0x94>$/;"	l
ffff800000103766	kernel.asm	/^ffff800000103766:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010376a	kernel.asm	/^ffff80000010376a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010376e	kernel.asm	/^ffff80000010376e:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
ffff800000103773	kernel.asm	/^ffff800000103773:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103776	kernel.asm	/^ffff800000103776:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103779	kernel.asm	/^ffff800000103779:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000103780	kernel.asm	/^ffff800000103780:	80 ff ff $/;"	l
ffff800000103783	kernel.asm	/^ffff800000103783:	ff d0                	callq  *%rax$/;"	l
ffff800000103785	kernel.asm	/^ffff800000103785:	eb 34                	jmp    ffff8000001037bb <skipelem+0xc8>$/;"	l
ffff800000103787	kernel.asm	/^ffff800000103787:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff80000010378a	kernel.asm	/^ffff80000010378a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010378e	kernel.asm	/^ffff80000010378e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000103792	kernel.asm	/^ffff800000103792:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103795	kernel.asm	/^ffff800000103795:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103798	kernel.asm	/^ffff800000103798:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff80000010379f	kernel.asm	/^ffff80000010379f:	80 ff ff $/;"	l
ffff8000001037a2	kernel.asm	/^ffff8000001037a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001037a4	kernel.asm	/^ffff8000001037a4:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001037a7	kernel.asm	/^ffff8000001037a7:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001037aa	kernel.asm	/^ffff8000001037aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001037ae	kernel.asm	/^ffff8000001037ae:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001037b1	kernel.asm	/^ffff8000001037b1:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff8000001037b4	kernel.asm	/^ffff8000001037b4:	eb 05                	jmp    ffff8000001037bb <skipelem+0xc8>$/;"	l
ffff8000001037b6	kernel.asm	/^ffff8000001037b6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)$/;"	l
ffff8000001037bb	kernel.asm	/^ffff8000001037bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001037bf	kernel.asm	/^ffff8000001037bf:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001037c2	kernel.asm	/^ffff8000001037c2:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff8000001037c4	kernel.asm	/^ffff8000001037c4:	74 f0                	je     ffff8000001037b6 <skipelem+0xc3>$/;"	l
ffff8000001037c6	kernel.asm	/^ffff8000001037c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001037ca	kernel.asm	/^ffff8000001037ca:	c9                   	leaveq $/;"	l
ffff8000001037cb	kernel.asm	/^ffff8000001037cb:	c3                   	retq   $/;"	l
ffff8000001037cc	kernel.asm	/^ffff8000001037cc <namex>:$/;"	l
ffff8000001037cc	kernel.asm	/^ffff8000001037cc:	55                   	push   %rbp$/;"	l
ffff8000001037cd	kernel.asm	/^ffff8000001037cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001037d0	kernel.asm	/^ffff8000001037d0:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001037d4	kernel.asm	/^ffff8000001037d4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001037d8	kernel.asm	/^ffff8000001037d8:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001037db	kernel.asm	/^ffff8000001037db:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff8000001037df	kernel.asm	/^ffff8000001037df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001037e3	kernel.asm	/^ffff8000001037e3:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001037e6	kernel.asm	/^ffff8000001037e6:	3c 2f                	cmp    $0x2f,%al$/;"	l
ffff8000001037e8	kernel.asm	/^ffff8000001037e8:	75 1f                	jne    ffff800000103809 <namex+0x3d>$/;"	l
ffff8000001037ea	kernel.asm	/^ffff8000001037ea:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001037ef	kernel.asm	/^ffff8000001037ef:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001037f4	kernel.asm	/^ffff8000001037f4:	48 b8 2f 2a 10 00 00 	movabs $0xffff800000102a2f,%rax$/;"	l
ffff8000001037fb	kernel.asm	/^ffff8000001037fb:	80 ff ff $/;"	l
ffff8000001037fe	kernel.asm	/^ffff8000001037fe:	ff d0                	callq  *%rax$/;"	l
ffff800000103800	kernel.asm	/^ffff800000103800:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103804	kernel.asm	/^ffff800000103804:	e9 f7 00 00 00       	jmpq   ffff800000103900 <namex+0x134>$/;"	l
ffff800000103809	kernel.asm	/^ffff800000103809:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000103810	kernel.asm	/^ffff800000103810:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000103814	kernel.asm	/^ffff800000103814:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff80000010381b	kernel.asm	/^ffff80000010381b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010381e	kernel.asm	/^ffff80000010381e:	48 b8 60 2b 10 00 00 	movabs $0xffff800000102b60,%rax$/;"	l
ffff800000103825	kernel.asm	/^ffff800000103825:	80 ff ff $/;"	l
ffff800000103828	kernel.asm	/^ffff800000103828:	ff d0                	callq  *%rax$/;"	l
ffff80000010382a	kernel.asm	/^ffff80000010382a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010382e	kernel.asm	/^ffff80000010382e:	e9 cd 00 00 00       	jmpq   ffff800000103900 <namex+0x134>$/;"	l
ffff800000103833	kernel.asm	/^ffff800000103833:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103837	kernel.asm	/^ffff800000103837:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010383a	kernel.asm	/^ffff80000010383a:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000103841	kernel.asm	/^ffff800000103841:	80 ff ff $/;"	l
ffff800000103844	kernel.asm	/^ffff800000103844:	ff d0                	callq  *%rax$/;"	l
ffff800000103846	kernel.asm	/^ffff800000103846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010384a	kernel.asm	/^ffff80000010384a:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000103851	kernel.asm	/^ffff800000103851:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000103855	kernel.asm	/^ffff800000103855:	74 1d                	je     ffff800000103874 <namex+0xa8>$/;"	l
ffff800000103857	kernel.asm	/^ffff800000103857:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010385b	kernel.asm	/^ffff80000010385b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010385e	kernel.asm	/^ffff80000010385e:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000103865	kernel.asm	/^ffff800000103865:	80 ff ff $/;"	l
ffff800000103868	kernel.asm	/^ffff800000103868:	ff d0                	callq  *%rax$/;"	l
ffff80000010386a	kernel.asm	/^ffff80000010386a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010386f	kernel.asm	/^ffff80000010386f:	e9 d9 00 00 00       	jmpq   ffff80000010394d <namex+0x181>$/;"	l
ffff800000103874	kernel.asm	/^ffff800000103874:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff800000103878	kernel.asm	/^ffff800000103878:	74 27                	je     ffff8000001038a1 <namex+0xd5>$/;"	l
ffff80000010387a	kernel.asm	/^ffff80000010387a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010387e	kernel.asm	/^ffff80000010387e:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000103881	kernel.asm	/^ffff800000103881:	84 c0                	test   %al,%al$/;"	l
ffff800000103883	kernel.asm	/^ffff800000103883:	75 1c                	jne    ffff8000001038a1 <namex+0xd5>$/;"	l
ffff800000103885	kernel.asm	/^ffff800000103885:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103889	kernel.asm	/^ffff800000103889:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010388c	kernel.asm	/^ffff80000010388c:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000103893	kernel.asm	/^ffff800000103893:	80 ff ff $/;"	l
ffff800000103896	kernel.asm	/^ffff800000103896:	ff d0                	callq  *%rax$/;"	l
ffff800000103898	kernel.asm	/^ffff800000103898:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010389c	kernel.asm	/^ffff80000010389c:	e9 ac 00 00 00       	jmpq   ffff80000010394d <namex+0x181>$/;"	l
ffff8000001038a1	kernel.asm	/^ffff8000001038a1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx$/;"	l
ffff8000001038a5	kernel.asm	/^ffff8000001038a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001038a9	kernel.asm	/^ffff8000001038a9:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff8000001038ae	kernel.asm	/^ffff8000001038ae:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001038b1	kernel.asm	/^ffff8000001038b1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001038b4	kernel.asm	/^ffff8000001038b4:	48 b8 c5 34 10 00 00 	movabs $0xffff8000001034c5,%rax$/;"	l
ffff8000001038bb	kernel.asm	/^ffff8000001038bb:	80 ff ff $/;"	l
ffff8000001038be	kernel.asm	/^ffff8000001038be:	ff d0                	callq  *%rax$/;"	l
ffff8000001038c0	kernel.asm	/^ffff8000001038c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001038c4	kernel.asm	/^ffff8000001038c4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001038c9	kernel.asm	/^ffff8000001038c9:	75 1a                	jne    ffff8000001038e5 <namex+0x119>$/;"	l
ffff8000001038cb	kernel.asm	/^ffff8000001038cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001038cf	kernel.asm	/^ffff8000001038cf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001038d2	kernel.asm	/^ffff8000001038d2:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff8000001038d9	kernel.asm	/^ffff8000001038d9:	80 ff ff $/;"	l
ffff8000001038dc	kernel.asm	/^ffff8000001038dc:	ff d0                	callq  *%rax$/;"	l
ffff8000001038de	kernel.asm	/^ffff8000001038de:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001038e3	kernel.asm	/^ffff8000001038e3:	eb 68                	jmp    ffff80000010394d <namex+0x181>$/;"	l
ffff8000001038e5	kernel.asm	/^ffff8000001038e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001038e9	kernel.asm	/^ffff8000001038e9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001038ec	kernel.asm	/^ffff8000001038ec:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff8000001038f3	kernel.asm	/^ffff8000001038f3:	80 ff ff $/;"	l
ffff8000001038f6	kernel.asm	/^ffff8000001038f6:	ff d0                	callq  *%rax$/;"	l
ffff8000001038f8	kernel.asm	/^ffff8000001038f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001038fc	kernel.asm	/^ffff8000001038fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103900	kernel.asm	/^ffff800000103900:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff800000103904	kernel.asm	/^ffff800000103904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103908	kernel.asm	/^ffff800000103908:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010390b	kernel.asm	/^ffff80000010390b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010390e	kernel.asm	/^ffff80000010390e:	48 b8 f3 36 10 00 00 	movabs $0xffff8000001036f3,%rax$/;"	l
ffff800000103915	kernel.asm	/^ffff800000103915:	80 ff ff $/;"	l
ffff800000103918	kernel.asm	/^ffff800000103918:	ff d0                	callq  *%rax$/;"	l
ffff80000010391a	kernel.asm	/^ffff80000010391a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010391e	kernel.asm	/^ffff80000010391e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000103923	kernel.asm	/^ffff800000103923:	0f 85 0a ff ff ff    	jne    ffff800000103833 <namex+0x67>$/;"	l
ffff800000103929	kernel.asm	/^ffff800000103929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)$/;"	l
ffff80000010392d	kernel.asm	/^ffff80000010392d:	74 1a                	je     ffff800000103949 <namex+0x17d>$/;"	l
ffff80000010392f	kernel.asm	/^ffff80000010392f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103933	kernel.asm	/^ffff800000103933:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103936	kernel.asm	/^ffff800000103936:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff80000010393d	kernel.asm	/^ffff80000010393d:	80 ff ff $/;"	l
ffff800000103940	kernel.asm	/^ffff800000103940:	ff d0                	callq  *%rax$/;"	l
ffff800000103942	kernel.asm	/^ffff800000103942:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103947	kernel.asm	/^ffff800000103947:	eb 04                	jmp    ffff80000010394d <namex+0x181>$/;"	l
ffff800000103949	kernel.asm	/^ffff800000103949:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010394d	kernel.asm	/^ffff80000010394d:	c9                   	leaveq $/;"	l
ffff80000010394e	kernel.asm	/^ffff80000010394e:	c3                   	retq   $/;"	l
ffff80000010394f	kernel.asm	/^ffff80000010394f <namei>:$/;"	l
ffff80000010394f	kernel.asm	/^ffff80000010394f:	55                   	push   %rbp$/;"	l
ffff800000103950	kernel.asm	/^ffff800000103950:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103953	kernel.asm	/^ffff800000103953:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103957	kernel.asm	/^ffff800000103957:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010395b	kernel.asm	/^ffff80000010395b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff80000010395f	kernel.asm	/^ffff80000010395f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103963	kernel.asm	/^ffff800000103963:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103968	kernel.asm	/^ffff800000103968:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010396b	kernel.asm	/^ffff80000010396b:	48 b8 cc 37 10 00 00 	movabs $0xffff8000001037cc,%rax$/;"	l
ffff800000103972	kernel.asm	/^ffff800000103972:	80 ff ff $/;"	l
ffff800000103975	kernel.asm	/^ffff800000103975:	ff d0                	callq  *%rax$/;"	l
ffff800000103977	kernel.asm	/^ffff800000103977:	c9                   	leaveq $/;"	l
ffff800000103978	kernel.asm	/^ffff800000103978:	c3                   	retq   $/;"	l
ffff800000103979	kernel.asm	/^ffff800000103979 <nameiparent>:$/;"	l
ffff800000103979	kernel.asm	/^ffff800000103979:	55                   	push   %rbp$/;"	l
ffff80000010397a	kernel.asm	/^ffff80000010397a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010397d	kernel.asm	/^ffff80000010397d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103981	kernel.asm	/^ffff800000103981:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000103985	kernel.asm	/^ffff800000103985:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103989	kernel.asm	/^ffff800000103989:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010398d	kernel.asm	/^ffff80000010398d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103991	kernel.asm	/^ffff800000103991:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000103996	kernel.asm	/^ffff800000103996:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103999	kernel.asm	/^ffff800000103999:	48 b8 cc 37 10 00 00 	movabs $0xffff8000001037cc,%rax$/;"	l
ffff8000001039a0	kernel.asm	/^ffff8000001039a0:	80 ff ff $/;"	l
ffff8000001039a3	kernel.asm	/^ffff8000001039a3:	ff d0                	callq  *%rax$/;"	l
ffff8000001039a5	kernel.asm	/^ffff8000001039a5:	c9                   	leaveq $/;"	l
ffff8000001039a6	kernel.asm	/^ffff8000001039a6:	c3                   	retq   $/;"	l
ffff8000001039a7	kernel.asm	/^ffff8000001039a7 <inb>:$/;"	l
ffff8000001039a7	kernel.asm	/^ffff8000001039a7:	55                   	push   %rbp$/;"	l
ffff8000001039a8	kernel.asm	/^ffff8000001039a8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001039ab	kernel.asm	/^ffff8000001039ab:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001039af	kernel.asm	/^ffff8000001039af:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001039b1	kernel.asm	/^ffff8000001039b1:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001039b5	kernel.asm	/^ffff8000001039b5:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001039b9	kernel.asm	/^ffff8000001039b9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001039bb	kernel.asm	/^ffff8000001039bb:	ec                   	in     (%dx),%al$/;"	l
ffff8000001039bc	kernel.asm	/^ffff8000001039bc:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001039bf	kernel.asm	/^ffff8000001039bf:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001039c3	kernel.asm	/^ffff8000001039c3:	c9                   	leaveq $/;"	l
ffff8000001039c4	kernel.asm	/^ffff8000001039c4:	c3                   	retq   $/;"	l
ffff8000001039c5	kernel.asm	/^ffff8000001039c5 <insl>:$/;"	l
ffff8000001039c5	kernel.asm	/^ffff8000001039c5:	55                   	push   %rbp$/;"	l
ffff8000001039c6	kernel.asm	/^ffff8000001039c6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001039c9	kernel.asm	/^ffff8000001039c9:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001039cd	kernel.asm	/^ffff8000001039cd:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff8000001039d0	kernel.asm	/^ffff8000001039d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001039d4	kernel.asm	/^ffff8000001039d4:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff8000001039d7	kernel.asm	/^ffff8000001039d7:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001039da	kernel.asm	/^ffff8000001039da:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff8000001039de	kernel.asm	/^ffff8000001039de:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001039e1	kernel.asm	/^ffff8000001039e1:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001039e4	kernel.asm	/^ffff8000001039e4:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff8000001039e7	kernel.asm	/^ffff8000001039e7:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001039e9	kernel.asm	/^ffff8000001039e9:	fc                   	cld    $/;"	l
ffff8000001039ea	kernel.asm	/^ffff8000001039ea:	f3 6d                	rep insl (%dx),%es:(%rdi)$/;"	l
ffff8000001039ec	kernel.asm	/^ffff8000001039ec:	89 c8                	mov    %ecx,%eax$/;"	l
ffff8000001039ee	kernel.asm	/^ffff8000001039ee:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff8000001039f1	kernel.asm	/^ffff8000001039f1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001039f5	kernel.asm	/^ffff8000001039f5:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff8000001039f8	kernel.asm	/^ffff8000001039f8:	90                   	nop$/;"	l
ffff8000001039f9	kernel.asm	/^ffff8000001039f9:	c9                   	leaveq $/;"	l
ffff8000001039fa	kernel.asm	/^ffff8000001039fa:	c3                   	retq   $/;"	l
ffff8000001039fb	kernel.asm	/^ffff8000001039fb <outb>:$/;"	l
ffff8000001039fb	kernel.asm	/^ffff8000001039fb:	55                   	push   %rbp$/;"	l
ffff8000001039fc	kernel.asm	/^ffff8000001039fc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001039ff	kernel.asm	/^ffff8000001039ff:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103a03	kernel.asm	/^ffff800000103a03:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000103a05	kernel.asm	/^ffff800000103a05:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000103a07	kernel.asm	/^ffff800000103a07:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000103a0b	kernel.asm	/^ffff800000103a0b:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000103a0e	kernel.asm	/^ffff800000103a0e:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000103a12	kernel.asm	/^ffff800000103a12:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000103a16	kernel.asm	/^ffff800000103a16:	ee                   	out    %al,(%dx)$/;"	l
ffff800000103a17	kernel.asm	/^ffff800000103a17:	90                   	nop$/;"	l
ffff800000103a18	kernel.asm	/^ffff800000103a18:	c9                   	leaveq $/;"	l
ffff800000103a19	kernel.asm	/^ffff800000103a19:	c3                   	retq   $/;"	l
ffff800000103a1a	kernel.asm	/^ffff800000103a1a <outsl>:$/;"	l
ffff800000103a1a	kernel.asm	/^ffff800000103a1a:	55                   	push   %rbp$/;"	l
ffff800000103a1b	kernel.asm	/^ffff800000103a1b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103a1e	kernel.asm	/^ffff800000103a1e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103a22	kernel.asm	/^ffff800000103a22:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103a25	kernel.asm	/^ffff800000103a25:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103a29	kernel.asm	/^ffff800000103a29:	89 55 f8             	mov    %edx,-0x8(%rbp)$/;"	l
ffff800000103a2c	kernel.asm	/^ffff800000103a2c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103a2f	kernel.asm	/^ffff800000103a2f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000103a33	kernel.asm	/^ffff800000103a33:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103a36	kernel.asm	/^ffff800000103a36:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000103a39	kernel.asm	/^ffff800000103a39:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000103a3b	kernel.asm	/^ffff800000103a3b:	fc                   	cld    $/;"	l
ffff800000103a3c	kernel.asm	/^ffff800000103a3c:	f3 6f                	rep outsl %ds:(%rsi),(%dx)$/;"	l
ffff800000103a3e	kernel.asm	/^ffff800000103a3e:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000103a40	kernel.asm	/^ffff800000103a40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000103a44	kernel.asm	/^ffff800000103a44:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103a47	kernel.asm	/^ffff800000103a47:	90                   	nop$/;"	l
ffff800000103a48	kernel.asm	/^ffff800000103a48:	c9                   	leaveq $/;"	l
ffff800000103a49	kernel.asm	/^ffff800000103a49:	c3                   	retq   $/;"	l
ffff800000103a4a	kernel.asm	/^ffff800000103a4a <idewait>:$/;"	l
ffff800000103a4a	kernel.asm	/^ffff800000103a4a:	55                   	push   %rbp$/;"	l
ffff800000103a4b	kernel.asm	/^ffff800000103a4b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103a4e	kernel.asm	/^ffff800000103a4e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000103a52	kernel.asm	/^ffff800000103a52:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000103a55	kernel.asm	/^ffff800000103a55:	90                   	nop$/;"	l
ffff800000103a56	kernel.asm	/^ffff800000103a56:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103a5b	kernel.asm	/^ffff800000103a5b:	48 b8 a7 39 10 00 00 	movabs $0xffff8000001039a7,%rax$/;"	l
ffff800000103a62	kernel.asm	/^ffff800000103a62:	80 ff ff $/;"	l
ffff800000103a65	kernel.asm	/^ffff800000103a65:	ff d0                	callq  *%rax$/;"	l
ffff800000103a67	kernel.asm	/^ffff800000103a67:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103a6a	kernel.asm	/^ffff800000103a6a:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000103a6d	kernel.asm	/^ffff800000103a6d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103a70	kernel.asm	/^ffff800000103a70:	25 c0 00 00 00       	and    $0xc0,%eax$/;"	l
ffff800000103a75	kernel.asm	/^ffff800000103a75:	83 f8 40             	cmp    $0x40,%eax$/;"	l
ffff800000103a78	kernel.asm	/^ffff800000103a78:	75 dc                	jne    ffff800000103a56 <idewait+0xc>$/;"	l
ffff800000103a7a	kernel.asm	/^ffff800000103a7a:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000103a7e	kernel.asm	/^ffff800000103a7e:	74 11                	je     ffff800000103a91 <idewait+0x47>$/;"	l
ffff800000103a80	kernel.asm	/^ffff800000103a80:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103a83	kernel.asm	/^ffff800000103a83:	83 e0 21             	and    $0x21,%eax$/;"	l
ffff800000103a86	kernel.asm	/^ffff800000103a86:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103a88	kernel.asm	/^ffff800000103a88:	74 07                	je     ffff800000103a91 <idewait+0x47>$/;"	l
ffff800000103a8a	kernel.asm	/^ffff800000103a8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000103a8f	kernel.asm	/^ffff800000103a8f:	eb 05                	jmp    ffff800000103a96 <idewait+0x4c>$/;"	l
ffff800000103a91	kernel.asm	/^ffff800000103a91:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000103a96	kernel.asm	/^ffff800000103a96:	c9                   	leaveq $/;"	l
ffff800000103a97	kernel.asm	/^ffff800000103a97:	c3                   	retq   $/;"	l
ffff800000103a98	kernel.asm	/^ffff800000103a98 <ideinit>:$/;"	l
ffff800000103a98	kernel.asm	/^ffff800000103a98:	55                   	push   %rbp$/;"	l
ffff800000103a99	kernel.asm	/^ffff800000103a99:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103a9c	kernel.asm	/^ffff800000103a9c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103aa0	kernel.asm	/^ffff800000103aa0:	48 be ea cd 10 00 00 	movabs $0xffff80000010cdea,%rsi$/;"	l
ffff800000103aa7	kernel.asm	/^ffff800000103aa7:	80 ff ff $/;"	l
ffff800000103aaa	kernel.asm	/^ffff800000103aaa:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103ab1	kernel.asm	/^ffff800000103ab1:	80 ff ff $/;"	l
ffff800000103ab4	kernel.asm	/^ffff800000103ab4:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000103abb	kernel.asm	/^ffff800000103abb:	80 ff ff $/;"	l
ffff800000103abe	kernel.asm	/^ffff800000103abe:	ff d0                	callq  *%rax$/;"	l
ffff800000103ac0	kernel.asm	/^ffff800000103ac0:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000103ac7	kernel.asm	/^ffff800000103ac7:	80 ff ff $/;"	l
ffff800000103aca	kernel.asm	/^ffff800000103aca:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103acc	kernel.asm	/^ffff800000103acc:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000103acf	kernel.asm	/^ffff800000103acf:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103ad1	kernel.asm	/^ffff800000103ad1:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff800000103ad6	kernel.asm	/^ffff800000103ad6:	48 b8 fa 40 10 00 00 	movabs $0xffff8000001040fa,%rax$/;"	l
ffff800000103add	kernel.asm	/^ffff800000103add:	80 ff ff $/;"	l
ffff800000103ae0	kernel.asm	/^ffff800000103ae0:	ff d0                	callq  *%rax$/;"	l
ffff800000103ae2	kernel.asm	/^ffff800000103ae2:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103ae7	kernel.asm	/^ffff800000103ae7:	48 b8 4a 3a 10 00 00 	movabs $0xffff800000103a4a,%rax$/;"	l
ffff800000103aee	kernel.asm	/^ffff800000103aee:	80 ff ff $/;"	l
ffff800000103af1	kernel.asm	/^ffff800000103af1:	ff d0                	callq  *%rax$/;"	l
ffff800000103af3	kernel.asm	/^ffff800000103af3:	be f0 00 00 00       	mov    $0xf0,%esi$/;"	l
ffff800000103af8	kernel.asm	/^ffff800000103af8:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103afd	kernel.asm	/^ffff800000103afd:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103b04	kernel.asm	/^ffff800000103b04:	80 ff ff $/;"	l
ffff800000103b07	kernel.asm	/^ffff800000103b07:	ff d0                	callq  *%rax$/;"	l
ffff800000103b09	kernel.asm	/^ffff800000103b09:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000103b10	kernel.asm	/^ffff800000103b10:	eb 2b                	jmp    ffff800000103b3d <ideinit+0xa5>$/;"	l
ffff800000103b12	kernel.asm	/^ffff800000103b12:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103b17	kernel.asm	/^ffff800000103b17:	48 b8 a7 39 10 00 00 	movabs $0xffff8000001039a7,%rax$/;"	l
ffff800000103b1e	kernel.asm	/^ffff800000103b1e:	80 ff ff $/;"	l
ffff800000103b21	kernel.asm	/^ffff800000103b21:	ff d0                	callq  *%rax$/;"	l
ffff800000103b23	kernel.asm	/^ffff800000103b23:	84 c0                	test   %al,%al$/;"	l
ffff800000103b25	kernel.asm	/^ffff800000103b25:	74 12                	je     ffff800000103b39 <ideinit+0xa1>$/;"	l
ffff800000103b27	kernel.asm	/^ffff800000103b27:	48 b8 d0 a1 11 00 00 	movabs $0xffff80000011a1d0,%rax$/;"	l
ffff800000103b2e	kernel.asm	/^ffff800000103b2e:	80 ff ff $/;"	l
ffff800000103b31	kernel.asm	/^ffff800000103b31:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000103b37	kernel.asm	/^ffff800000103b37:	eb 0d                	jmp    ffff800000103b46 <ideinit+0xae>$/;"	l
ffff800000103b39	kernel.asm	/^ffff800000103b39:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103b3d	kernel.asm	/^ffff800000103b3d:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)$/;"	l
ffff800000103b44	kernel.asm	/^ffff800000103b44:	7e cc                	jle    ffff800000103b12 <ideinit+0x7a>$/;"	l
ffff800000103b46	kernel.asm	/^ffff800000103b46:	be e0 00 00 00       	mov    $0xe0,%esi$/;"	l
ffff800000103b4b	kernel.asm	/^ffff800000103b4b:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103b50	kernel.asm	/^ffff800000103b50:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103b57	kernel.asm	/^ffff800000103b57:	80 ff ff $/;"	l
ffff800000103b5a	kernel.asm	/^ffff800000103b5a:	ff d0                	callq  *%rax$/;"	l
ffff800000103b5c	kernel.asm	/^ffff800000103b5c:	90                   	nop$/;"	l
ffff800000103b5d	kernel.asm	/^ffff800000103b5d:	c9                   	leaveq $/;"	l
ffff800000103b5e	kernel.asm	/^ffff800000103b5e:	c3                   	retq   $/;"	l
ffff800000103b5f	kernel.asm	/^ffff800000103b5f <idestart>:$/;"	l
ffff800000103b5f	kernel.asm	/^ffff800000103b5f:	55                   	push   %rbp$/;"	l
ffff800000103b60	kernel.asm	/^ffff800000103b60:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103b63	kernel.asm	/^ffff800000103b63:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103b67	kernel.asm	/^ffff800000103b67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103b6b	kernel.asm	/^ffff800000103b6b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000103b70	kernel.asm	/^ffff800000103b70:	75 16                	jne    ffff800000103b88 <idestart+0x29>$/;"	l
ffff800000103b72	kernel.asm	/^ffff800000103b72:	48 bf ee cd 10 00 00 	movabs $0xffff80000010cdee,%rdi$/;"	l
ffff800000103b79	kernel.asm	/^ffff800000103b79:	80 ff ff $/;"	l
ffff800000103b7c	kernel.asm	/^ffff800000103b7c:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103b83	kernel.asm	/^ffff800000103b83:	80 ff ff $/;"	l
ffff800000103b86	kernel.asm	/^ffff800000103b86:	ff d0                	callq  *%rax$/;"	l
ffff800000103b88	kernel.asm	/^ffff800000103b88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103b8c	kernel.asm	/^ffff800000103b8c:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000103b8f	kernel.asm	/^ffff800000103b8f:	3d e7 03 00 00       	cmp    $0x3e7,%eax$/;"	l
ffff800000103b94	kernel.asm	/^ffff800000103b94:	76 16                	jbe    ffff800000103bac <idestart+0x4d>$/;"	l
ffff800000103b96	kernel.asm	/^ffff800000103b96:	48 bf f7 cd 10 00 00 	movabs $0xffff80000010cdf7,%rdi$/;"	l
ffff800000103b9d	kernel.asm	/^ffff800000103b9d:	80 ff ff $/;"	l
ffff800000103ba0	kernel.asm	/^ffff800000103ba0:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103ba7	kernel.asm	/^ffff800000103ba7:	80 ff ff $/;"	l
ffff800000103baa	kernel.asm	/^ffff800000103baa:	ff d0                	callq  *%rax$/;"	l
ffff800000103bac	kernel.asm	/^ffff800000103bac:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103bb3	kernel.asm	/^ffff800000103bb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103bb7	kernel.asm	/^ffff800000103bb7:	8b 50 08             	mov    0x8(%rax),%edx$/;"	l
ffff800000103bba	kernel.asm	/^ffff800000103bba:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103bbd	kernel.asm	/^ffff800000103bbd:	0f af c2             	imul   %edx,%eax$/;"	l
ffff800000103bc0	kernel.asm	/^ffff800000103bc0:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000103bc3	kernel.asm	/^ffff800000103bc3:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103bc7	kernel.asm	/^ffff800000103bc7:	75 07                	jne    ffff800000103bd0 <idestart+0x71>$/;"	l
ffff800000103bc9	kernel.asm	/^ffff800000103bc9:	b8 20 00 00 00       	mov    $0x20,%eax$/;"	l
ffff800000103bce	kernel.asm	/^ffff800000103bce:	eb 05                	jmp    ffff800000103bd5 <idestart+0x76>$/;"	l
ffff800000103bd0	kernel.asm	/^ffff800000103bd0:	b8 c4 00 00 00       	mov    $0xc4,%eax$/;"	l
ffff800000103bd5	kernel.asm	/^ffff800000103bd5:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000103bd8	kernel.asm	/^ffff800000103bd8:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000103bdc	kernel.asm	/^ffff800000103bdc:	75 07                	jne    ffff800000103be5 <idestart+0x86>$/;"	l
ffff800000103bde	kernel.asm	/^ffff800000103bde:	b8 30 00 00 00       	mov    $0x30,%eax$/;"	l
ffff800000103be3	kernel.asm	/^ffff800000103be3:	eb 05                	jmp    ffff800000103bea <idestart+0x8b>$/;"	l
ffff800000103be5	kernel.asm	/^ffff800000103be5:	b8 c5 00 00 00       	mov    $0xc5,%eax$/;"	l
ffff800000103bea	kernel.asm	/^ffff800000103bea:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000103bed	kernel.asm	/^ffff800000103bed:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)$/;"	l
ffff800000103bf1	kernel.asm	/^ffff800000103bf1:	7e 16                	jle    ffff800000103c09 <idestart+0xaa>$/;"	l
ffff800000103bf3	kernel.asm	/^ffff800000103bf3:	48 bf ee cd 10 00 00 	movabs $0xffff80000010cdee,%rdi$/;"	l
ffff800000103bfa	kernel.asm	/^ffff800000103bfa:	80 ff ff $/;"	l
ffff800000103bfd	kernel.asm	/^ffff800000103bfd:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103c04	kernel.asm	/^ffff800000103c04:	80 ff ff $/;"	l
ffff800000103c07	kernel.asm	/^ffff800000103c07:	ff d0                	callq  *%rax$/;"	l
ffff800000103c09	kernel.asm	/^ffff800000103c09:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000103c0e	kernel.asm	/^ffff800000103c0e:	48 b8 4a 3a 10 00 00 	movabs $0xffff800000103a4a,%rax$/;"	l
ffff800000103c15	kernel.asm	/^ffff800000103c15:	80 ff ff $/;"	l
ffff800000103c18	kernel.asm	/^ffff800000103c18:	ff d0                	callq  *%rax$/;"	l
ffff800000103c1a	kernel.asm	/^ffff800000103c1a:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000103c1f	kernel.asm	/^ffff800000103c1f:	bf f6 03 00 00       	mov    $0x3f6,%edi$/;"	l
ffff800000103c24	kernel.asm	/^ffff800000103c24:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103c2b	kernel.asm	/^ffff800000103c2b:	80 ff ff $/;"	l
ffff800000103c2e	kernel.asm	/^ffff800000103c2e:	ff d0                	callq  *%rax$/;"	l
ffff800000103c30	kernel.asm	/^ffff800000103c30:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000103c33	kernel.asm	/^ffff800000103c33:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103c36	kernel.asm	/^ffff800000103c36:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103c38	kernel.asm	/^ffff800000103c38:	bf f2 01 00 00       	mov    $0x1f2,%edi$/;"	l
ffff800000103c3d	kernel.asm	/^ffff800000103c3d:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103c44	kernel.asm	/^ffff800000103c44:	80 ff ff $/;"	l
ffff800000103c47	kernel.asm	/^ffff800000103c47:	ff d0                	callq  *%rax$/;"	l
ffff800000103c49	kernel.asm	/^ffff800000103c49:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103c4c	kernel.asm	/^ffff800000103c4c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103c4f	kernel.asm	/^ffff800000103c4f:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103c51	kernel.asm	/^ffff800000103c51:	bf f3 01 00 00       	mov    $0x1f3,%edi$/;"	l
ffff800000103c56	kernel.asm	/^ffff800000103c56:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103c5d	kernel.asm	/^ffff800000103c5d:	80 ff ff $/;"	l
ffff800000103c60	kernel.asm	/^ffff800000103c60:	ff d0                	callq  *%rax$/;"	l
ffff800000103c62	kernel.asm	/^ffff800000103c62:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103c65	kernel.asm	/^ffff800000103c65:	c1 f8 08             	sar    $0x8,%eax$/;"	l
ffff800000103c68	kernel.asm	/^ffff800000103c68:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103c6b	kernel.asm	/^ffff800000103c6b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103c6d	kernel.asm	/^ffff800000103c6d:	bf f4 01 00 00       	mov    $0x1f4,%edi$/;"	l
ffff800000103c72	kernel.asm	/^ffff800000103c72:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103c79	kernel.asm	/^ffff800000103c79:	80 ff ff $/;"	l
ffff800000103c7c	kernel.asm	/^ffff800000103c7c:	ff d0                	callq  *%rax$/;"	l
ffff800000103c7e	kernel.asm	/^ffff800000103c7e:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103c81	kernel.asm	/^ffff800000103c81:	c1 f8 10             	sar    $0x10,%eax$/;"	l
ffff800000103c84	kernel.asm	/^ffff800000103c84:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103c87	kernel.asm	/^ffff800000103c87:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103c89	kernel.asm	/^ffff800000103c89:	bf f5 01 00 00       	mov    $0x1f5,%edi$/;"	l
ffff800000103c8e	kernel.asm	/^ffff800000103c8e:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103c95	kernel.asm	/^ffff800000103c95:	80 ff ff $/;"	l
ffff800000103c98	kernel.asm	/^ffff800000103c98:	ff d0                	callq  *%rax$/;"	l
ffff800000103c9a	kernel.asm	/^ffff800000103c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103c9e	kernel.asm	/^ffff800000103c9e:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103ca1	kernel.asm	/^ffff800000103ca1:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000103ca4	kernel.asm	/^ffff800000103ca4:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff800000103ca7	kernel.asm	/^ffff800000103ca7:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103ca9	kernel.asm	/^ffff800000103ca9:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000103cac	kernel.asm	/^ffff800000103cac:	c1 f8 18             	sar    $0x18,%eax$/;"	l
ffff800000103caf	kernel.asm	/^ffff800000103caf:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000103cb2	kernel.asm	/^ffff800000103cb2:	09 d0                	or     %edx,%eax$/;"	l
ffff800000103cb4	kernel.asm	/^ffff800000103cb4:	83 c8 e0             	or     $0xffffffe0,%eax$/;"	l
ffff800000103cb7	kernel.asm	/^ffff800000103cb7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103cba	kernel.asm	/^ffff800000103cba:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103cbc	kernel.asm	/^ffff800000103cbc:	bf f6 01 00 00       	mov    $0x1f6,%edi$/;"	l
ffff800000103cc1	kernel.asm	/^ffff800000103cc1:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103cc8	kernel.asm	/^ffff800000103cc8:	80 ff ff $/;"	l
ffff800000103ccb	kernel.asm	/^ffff800000103ccb:	ff d0                	callq  *%rax$/;"	l
ffff800000103ccd	kernel.asm	/^ffff800000103ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103cd1	kernel.asm	/^ffff800000103cd1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103cd3	kernel.asm	/^ffff800000103cd3:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103cd6	kernel.asm	/^ffff800000103cd6:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103cd8	kernel.asm	/^ffff800000103cd8:	74 3e                	je     ffff800000103d18 <idestart+0x1b9>$/;"	l
ffff800000103cda	kernel.asm	/^ffff800000103cda:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000103cdd	kernel.asm	/^ffff800000103cdd:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103ce0	kernel.asm	/^ffff800000103ce0:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103ce2	kernel.asm	/^ffff800000103ce2:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103ce7	kernel.asm	/^ffff800000103ce7:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103cee	kernel.asm	/^ffff800000103cee:	80 ff ff $/;"	l
ffff800000103cf1	kernel.asm	/^ffff800000103cf1:	ff d0                	callq  *%rax$/;"	l
ffff800000103cf3	kernel.asm	/^ffff800000103cf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103cf7	kernel.asm	/^ffff800000103cf7:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103cfd	kernel.asm	/^ffff800000103cfd:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103d02	kernel.asm	/^ffff800000103d02:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103d05	kernel.asm	/^ffff800000103d05:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103d0a	kernel.asm	/^ffff800000103d0a:	48 b8 1a 3a 10 00 00 	movabs $0xffff800000103a1a,%rax$/;"	l
ffff800000103d11	kernel.asm	/^ffff800000103d11:	80 ff ff $/;"	l
ffff800000103d14	kernel.asm	/^ffff800000103d14:	ff d0                	callq  *%rax$/;"	l
ffff800000103d16	kernel.asm	/^ffff800000103d16:	eb 19                	jmp    ffff800000103d31 <idestart+0x1d2>$/;"	l
ffff800000103d18	kernel.asm	/^ffff800000103d18:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000103d1b	kernel.asm	/^ffff800000103d1b:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000103d1e	kernel.asm	/^ffff800000103d1e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000103d20	kernel.asm	/^ffff800000103d20:	bf f7 01 00 00       	mov    $0x1f7,%edi$/;"	l
ffff800000103d25	kernel.asm	/^ffff800000103d25:	48 b8 fb 39 10 00 00 	movabs $0xffff8000001039fb,%rax$/;"	l
ffff800000103d2c	kernel.asm	/^ffff800000103d2c:	80 ff ff $/;"	l
ffff800000103d2f	kernel.asm	/^ffff800000103d2f:	ff d0                	callq  *%rax$/;"	l
ffff800000103d31	kernel.asm	/^ffff800000103d31:	90                   	nop$/;"	l
ffff800000103d32	kernel.asm	/^ffff800000103d32:	c9                   	leaveq $/;"	l
ffff800000103d33	kernel.asm	/^ffff800000103d33:	c3                   	retq   $/;"	l
ffff800000103d34	kernel.asm	/^ffff800000103d34 <ideintr>:$/;"	l
ffff800000103d34	kernel.asm	/^ffff800000103d34:	55                   	push   %rbp$/;"	l
ffff800000103d35	kernel.asm	/^ffff800000103d35:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103d38	kernel.asm	/^ffff800000103d38:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000103d3c	kernel.asm	/^ffff800000103d3c:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103d43	kernel.asm	/^ffff800000103d43:	80 ff ff $/;"	l
ffff800000103d46	kernel.asm	/^ffff800000103d46:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000103d4d	kernel.asm	/^ffff800000103d4d:	80 ff ff $/;"	l
ffff800000103d50	kernel.asm	/^ffff800000103d50:	ff d0                	callq  *%rax$/;"	l
ffff800000103d52	kernel.asm	/^ffff800000103d52:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103d59	kernel.asm	/^ffff800000103d59:	80 ff ff $/;"	l
ffff800000103d5c	kernel.asm	/^ffff800000103d5c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103d5f	kernel.asm	/^ffff800000103d5f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103d63	kernel.asm	/^ffff800000103d63:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000103d68	kernel.asm	/^ffff800000103d68:	75 1b                	jne    ffff800000103d85 <ideintr+0x51>$/;"	l
ffff800000103d6a	kernel.asm	/^ffff800000103d6a:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103d71	kernel.asm	/^ffff800000103d71:	80 ff ff $/;"	l
ffff800000103d74	kernel.asm	/^ffff800000103d74:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000103d7b	kernel.asm	/^ffff800000103d7b:	80 ff ff $/;"	l
ffff800000103d7e	kernel.asm	/^ffff800000103d7e:	ff d0                	callq  *%rax$/;"	l
ffff800000103d80	kernel.asm	/^ffff800000103d80:	e9 d6 00 00 00       	jmpq   ffff800000103e5b <ideintr+0x127>$/;"	l
ffff800000103d85	kernel.asm	/^ffff800000103d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103d89	kernel.asm	/^ffff800000103d89:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx$/;"	l
ffff800000103d90	kernel.asm	/^ffff800000103d90:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103d97	kernel.asm	/^ffff800000103d97:	80 ff ff $/;"	l
ffff800000103d9a	kernel.asm	/^ffff800000103d9a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103d9d	kernel.asm	/^ffff800000103d9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103da1	kernel.asm	/^ffff800000103da1:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103da3	kernel.asm	/^ffff800000103da3:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000103da6	kernel.asm	/^ffff800000103da6:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103da8	kernel.asm	/^ffff800000103da8:	75 38                	jne    ffff800000103de2 <ideintr+0xae>$/;"	l
ffff800000103daa	kernel.asm	/^ffff800000103daa:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000103daf	kernel.asm	/^ffff800000103daf:	48 b8 4a 3a 10 00 00 	movabs $0xffff800000103a4a,%rax$/;"	l
ffff800000103db6	kernel.asm	/^ffff800000103db6:	80 ff ff $/;"	l
ffff800000103db9	kernel.asm	/^ffff800000103db9:	ff d0                	callq  *%rax$/;"	l
ffff800000103dbb	kernel.asm	/^ffff800000103dbb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103dbd	kernel.asm	/^ffff800000103dbd:	78 23                	js     ffff800000103de2 <ideintr+0xae>$/;"	l
ffff800000103dbf	kernel.asm	/^ffff800000103dbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103dc3	kernel.asm	/^ffff800000103dc3:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000103dc9	kernel.asm	/^ffff800000103dc9:	ba 80 00 00 00       	mov    $0x80,%edx$/;"	l
ffff800000103dce	kernel.asm	/^ffff800000103dce:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000103dd1	kernel.asm	/^ffff800000103dd1:	bf f0 01 00 00       	mov    $0x1f0,%edi$/;"	l
ffff800000103dd6	kernel.asm	/^ffff800000103dd6:	48 b8 c5 39 10 00 00 	movabs $0xffff8000001039c5,%rax$/;"	l
ffff800000103ddd	kernel.asm	/^ffff800000103ddd:	80 ff ff $/;"	l
ffff800000103de0	kernel.asm	/^ffff800000103de0:	ff d0                	callq  *%rax$/;"	l
ffff800000103de2	kernel.asm	/^ffff800000103de2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103de6	kernel.asm	/^ffff800000103de6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103de8	kernel.asm	/^ffff800000103de8:	83 c8 02             	or     $0x2,%eax$/;"	l
ffff800000103deb	kernel.asm	/^ffff800000103deb:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103ded	kernel.asm	/^ffff800000103ded:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103df1	kernel.asm	/^ffff800000103df1:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103df3	kernel.asm	/^ffff800000103df3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103df7	kernel.asm	/^ffff800000103df7:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103df9	kernel.asm	/^ffff800000103df9:	83 e0 fb             	and    $0xfffffffb,%eax$/;"	l
ffff800000103dfc	kernel.asm	/^ffff800000103dfc:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000103dfe	kernel.asm	/^ffff800000103dfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103e02	kernel.asm	/^ffff800000103e02:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103e04	kernel.asm	/^ffff800000103e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103e08	kernel.asm	/^ffff800000103e08:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103e0b	kernel.asm	/^ffff800000103e0b:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff800000103e12	kernel.asm	/^ffff800000103e12:	80 ff ff $/;"	l
ffff800000103e15	kernel.asm	/^ffff800000103e15:	ff d0                	callq  *%rax$/;"	l
ffff800000103e17	kernel.asm	/^ffff800000103e17:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103e1e	kernel.asm	/^ffff800000103e1e:	80 ff ff $/;"	l
ffff800000103e21	kernel.asm	/^ffff800000103e21:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103e24	kernel.asm	/^ffff800000103e24:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103e27	kernel.asm	/^ffff800000103e27:	74 1c                	je     ffff800000103e45 <ideintr+0x111>$/;"	l
ffff800000103e29	kernel.asm	/^ffff800000103e29:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103e30	kernel.asm	/^ffff800000103e30:	80 ff ff $/;"	l
ffff800000103e33	kernel.asm	/^ffff800000103e33:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103e36	kernel.asm	/^ffff800000103e36:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103e39	kernel.asm	/^ffff800000103e39:	48 b8 5f 3b 10 00 00 	movabs $0xffff800000103b5f,%rax$/;"	l
ffff800000103e40	kernel.asm	/^ffff800000103e40:	80 ff ff $/;"	l
ffff800000103e43	kernel.asm	/^ffff800000103e43:	ff d0                	callq  *%rax$/;"	l
ffff800000103e45	kernel.asm	/^ffff800000103e45:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103e4c	kernel.asm	/^ffff800000103e4c:	80 ff ff $/;"	l
ffff800000103e4f	kernel.asm	/^ffff800000103e4f:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000103e56	kernel.asm	/^ffff800000103e56:	80 ff ff $/;"	l
ffff800000103e59	kernel.asm	/^ffff800000103e59:	ff d0                	callq  *%rax$/;"	l
ffff800000103e5b	kernel.asm	/^ffff800000103e5b:	c9                   	leaveq $/;"	l
ffff800000103e5c	kernel.asm	/^ffff800000103e5c:	c3                   	retq   $/;"	l
ffff800000103e5d	kernel.asm	/^ffff800000103e5d <iderw>:$/;"	l
ffff800000103e5d	kernel.asm	/^ffff800000103e5d:	55                   	push   %rbp$/;"	l
ffff800000103e5e	kernel.asm	/^ffff800000103e5e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103e61	kernel.asm	/^ffff800000103e61:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000103e65	kernel.asm	/^ffff800000103e65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000103e69	kernel.asm	/^ffff800000103e69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103e6d	kernel.asm	/^ffff800000103e6d:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000103e71	kernel.asm	/^ffff800000103e71:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103e74	kernel.asm	/^ffff800000103e74:	48 b8 04 74 10 00 00 	movabs $0xffff800000107404,%rax$/;"	l
ffff800000103e7b	kernel.asm	/^ffff800000103e7b:	80 ff ff $/;"	l
ffff800000103e7e	kernel.asm	/^ffff800000103e7e:	ff d0                	callq  *%rax$/;"	l
ffff800000103e80	kernel.asm	/^ffff800000103e80:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103e82	kernel.asm	/^ffff800000103e82:	75 16                	jne    ffff800000103e9a <iderw+0x3d>$/;"	l
ffff800000103e84	kernel.asm	/^ffff800000103e84:	48 bf 09 ce 10 00 00 	movabs $0xffff80000010ce09,%rdi$/;"	l
ffff800000103e8b	kernel.asm	/^ffff800000103e8b:	80 ff ff $/;"	l
ffff800000103e8e	kernel.asm	/^ffff800000103e8e:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103e95	kernel.asm	/^ffff800000103e95:	80 ff ff $/;"	l
ffff800000103e98	kernel.asm	/^ffff800000103e98:	ff d0                	callq  *%rax$/;"	l
ffff800000103e9a	kernel.asm	/^ffff800000103e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103e9e	kernel.asm	/^ffff800000103e9e:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103ea0	kernel.asm	/^ffff800000103ea0:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103ea3	kernel.asm	/^ffff800000103ea3:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103ea6	kernel.asm	/^ffff800000103ea6:	75 16                	jne    ffff800000103ebe <iderw+0x61>$/;"	l
ffff800000103ea8	kernel.asm	/^ffff800000103ea8:	48 bf 1f ce 10 00 00 	movabs $0xffff80000010ce1f,%rdi$/;"	l
ffff800000103eaf	kernel.asm	/^ffff800000103eaf:	80 ff ff $/;"	l
ffff800000103eb2	kernel.asm	/^ffff800000103eb2:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103eb9	kernel.asm	/^ffff800000103eb9:	80 ff ff $/;"	l
ffff800000103ebc	kernel.asm	/^ffff800000103ebc:	ff d0                	callq  *%rax$/;"	l
ffff800000103ebe	kernel.asm	/^ffff800000103ebe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103ec2	kernel.asm	/^ffff800000103ec2:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000103ec5	kernel.asm	/^ffff800000103ec5:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103ec7	kernel.asm	/^ffff800000103ec7:	74 26                	je     ffff800000103eef <iderw+0x92>$/;"	l
ffff800000103ec9	kernel.asm	/^ffff800000103ec9:	48 b8 d0 a1 11 00 00 	movabs $0xffff80000011a1d0,%rax$/;"	l
ffff800000103ed0	kernel.asm	/^ffff800000103ed0:	80 ff ff $/;"	l
ffff800000103ed3	kernel.asm	/^ffff800000103ed3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103ed5	kernel.asm	/^ffff800000103ed5:	85 c0                	test   %eax,%eax$/;"	l
ffff800000103ed7	kernel.asm	/^ffff800000103ed7:	75 16                	jne    ffff800000103eef <iderw+0x92>$/;"	l
ffff800000103ed9	kernel.asm	/^ffff800000103ed9:	48 bf 34 ce 10 00 00 	movabs $0xffff80000010ce34,%rdi$/;"	l
ffff800000103ee0	kernel.asm	/^ffff800000103ee0:	80 ff ff $/;"	l
ffff800000103ee3	kernel.asm	/^ffff800000103ee3:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000103eea	kernel.asm	/^ffff800000103eea:	80 ff ff $/;"	l
ffff800000103eed	kernel.asm	/^ffff800000103eed:	ff d0                	callq  *%rax$/;"	l
ffff800000103eef	kernel.asm	/^ffff800000103eef:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103ef6	kernel.asm	/^ffff800000103ef6:	80 ff ff $/;"	l
ffff800000103ef9	kernel.asm	/^ffff800000103ef9:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000103f00	kernel.asm	/^ffff800000103f00:	80 ff ff $/;"	l
ffff800000103f03	kernel.asm	/^ffff800000103f03:	ff d0                	callq  *%rax$/;"	l
ffff800000103f05	kernel.asm	/^ffff800000103f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103f09	kernel.asm	/^ffff800000103f09:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)$/;"	l
ffff800000103f10	kernel.asm	/^ffff800000103f10:	00 00 00 00 $/;"	l
ffff800000103f14	kernel.asm	/^ffff800000103f14:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103f1b	kernel.asm	/^ffff800000103f1b:	80 ff ff $/;"	l
ffff800000103f1e	kernel.asm	/^ffff800000103f1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103f22	kernel.asm	/^ffff800000103f22:	eb 11                	jmp    ffff800000103f35 <iderw+0xd8>$/;"	l
ffff800000103f24	kernel.asm	/^ffff800000103f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103f28	kernel.asm	/^ffff800000103f28:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103f2b	kernel.asm	/^ffff800000103f2b:	48 05 a8 00 00 00    	add    $0xa8,%rax$/;"	l
ffff800000103f31	kernel.asm	/^ffff800000103f31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000103f35	kernel.asm	/^ffff800000103f35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103f39	kernel.asm	/^ffff800000103f39:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103f3c	kernel.asm	/^ffff800000103f3c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000103f3f	kernel.asm	/^ffff800000103f3f:	75 e3                	jne    ffff800000103f24 <iderw+0xc7>$/;"	l
ffff800000103f41	kernel.asm	/^ffff800000103f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000103f45	kernel.asm	/^ffff800000103f45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000103f49	kernel.asm	/^ffff800000103f49:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000103f4c	kernel.asm	/^ffff800000103f4c:	48 b8 c8 a1 11 00 00 	movabs $0xffff80000011a1c8,%rax$/;"	l
ffff800000103f53	kernel.asm	/^ffff800000103f53:	80 ff ff $/;"	l
ffff800000103f56	kernel.asm	/^ffff800000103f56:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103f59	kernel.asm	/^ffff800000103f59:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000103f5d	kernel.asm	/^ffff800000103f5d:	75 32                	jne    ffff800000103f91 <iderw+0x134>$/;"	l
ffff800000103f5f	kernel.asm	/^ffff800000103f5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103f63	kernel.asm	/^ffff800000103f63:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103f66	kernel.asm	/^ffff800000103f66:	48 b8 5f 3b 10 00 00 	movabs $0xffff800000103b5f,%rax$/;"	l
ffff800000103f6d	kernel.asm	/^ffff800000103f6d:	80 ff ff $/;"	l
ffff800000103f70	kernel.asm	/^ffff800000103f70:	ff d0                	callq  *%rax$/;"	l
ffff800000103f72	kernel.asm	/^ffff800000103f72:	eb 1d                	jmp    ffff800000103f91 <iderw+0x134>$/;"	l
ffff800000103f74	kernel.asm	/^ffff800000103f74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103f78	kernel.asm	/^ffff800000103f78:	48 be 60 a1 11 00 00 	movabs $0xffff80000011a160,%rsi$/;"	l
ffff800000103f7f	kernel.asm	/^ffff800000103f7f:	80 ff ff $/;"	l
ffff800000103f82	kernel.asm	/^ffff800000103f82:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000103f85	kernel.asm	/^ffff800000103f85:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000103f8c	kernel.asm	/^ffff800000103f8c:	80 ff ff $/;"	l
ffff800000103f8f	kernel.asm	/^ffff800000103f8f:	ff d0                	callq  *%rax$/;"	l
ffff800000103f91	kernel.asm	/^ffff800000103f91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000103f95	kernel.asm	/^ffff800000103f95:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000103f97	kernel.asm	/^ffff800000103f97:	83 e0 06             	and    $0x6,%eax$/;"	l
ffff800000103f9a	kernel.asm	/^ffff800000103f9a:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000103f9d	kernel.asm	/^ffff800000103f9d:	75 d5                	jne    ffff800000103f74 <iderw+0x117>$/;"	l
ffff800000103f9f	kernel.asm	/^ffff800000103f9f:	48 bf 60 a1 11 00 00 	movabs $0xffff80000011a160,%rdi$/;"	l
ffff800000103fa6	kernel.asm	/^ffff800000103fa6:	80 ff ff $/;"	l
ffff800000103fa9	kernel.asm	/^ffff800000103fa9:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000103fb0	kernel.asm	/^ffff800000103fb0:	80 ff ff $/;"	l
ffff800000103fb3	kernel.asm	/^ffff800000103fb3:	ff d0                	callq  *%rax$/;"	l
ffff800000103fb5	kernel.asm	/^ffff800000103fb5:	90                   	nop$/;"	l
ffff800000103fb6	kernel.asm	/^ffff800000103fb6:	c9                   	leaveq $/;"	l
ffff800000103fb7	kernel.asm	/^ffff800000103fb7:	c3                   	retq   $/;"	l
ffff800000103fb8	kernel.asm	/^ffff800000103fb8 <ioapicread>:$/;"	l
ffff800000103fb8	kernel.asm	/^ffff800000103fb8:	55                   	push   %rbp$/;"	l
ffff800000103fb9	kernel.asm	/^ffff800000103fb9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103fbc	kernel.asm	/^ffff800000103fbc:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103fc0	kernel.asm	/^ffff800000103fc0:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103fc3	kernel.asm	/^ffff800000103fc3:	48 b8 d8 a1 11 00 00 	movabs $0xffff80000011a1d8,%rax$/;"	l
ffff800000103fca	kernel.asm	/^ffff800000103fca:	80 ff ff $/;"	l
ffff800000103fcd	kernel.asm	/^ffff800000103fcd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103fd0	kernel.asm	/^ffff800000103fd0:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000103fd3	kernel.asm	/^ffff800000103fd3:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000103fd5	kernel.asm	/^ffff800000103fd5:	48 b8 d8 a1 11 00 00 	movabs $0xffff80000011a1d8,%rax$/;"	l
ffff800000103fdc	kernel.asm	/^ffff800000103fdc:	80 ff ff $/;"	l
ffff800000103fdf	kernel.asm	/^ffff800000103fdf:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000103fe2	kernel.asm	/^ffff800000103fe2:	8b 40 10             	mov    0x10(%rax),%eax$/;"	l
ffff800000103fe5	kernel.asm	/^ffff800000103fe5:	c9                   	leaveq $/;"	l
ffff800000103fe6	kernel.asm	/^ffff800000103fe6:	c3                   	retq   $/;"	l
ffff800000103fe7	kernel.asm	/^ffff800000103fe7 <ioapicwrite>:$/;"	l
ffff800000103fe7	kernel.asm	/^ffff800000103fe7:	55                   	push   %rbp$/;"	l
ffff800000103fe8	kernel.asm	/^ffff800000103fe8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000103feb	kernel.asm	/^ffff800000103feb:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000103fef	kernel.asm	/^ffff800000103fef:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000103ff2	kernel.asm	/^ffff800000103ff2:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000103ff5	kernel.asm	/^ffff800000103ff5:	48 b8 d8 a1 11 00 00 	movabs $0xffff80000011a1d8,%rax$/;"	l
ffff800000103ffc	kernel.asm	/^ffff800000103ffc:	80 ff ff $/;"	l
ffff800000103fff	kernel.asm	/^ffff800000103fff:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104002	kernel.asm	/^ffff800000104002:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104005	kernel.asm	/^ffff800000104005:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104007	kernel.asm	/^ffff800000104007:	48 b8 d8 a1 11 00 00 	movabs $0xffff80000011a1d8,%rax$/;"	l
ffff80000010400e	kernel.asm	/^ffff80000010400e:	80 ff ff $/;"	l
ffff800000104011	kernel.asm	/^ffff800000104011:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104014	kernel.asm	/^ffff800000104014:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff800000104017	kernel.asm	/^ffff800000104017:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff80000010401a	kernel.asm	/^ffff80000010401a:	90                   	nop$/;"	l
ffff80000010401b	kernel.asm	/^ffff80000010401b:	c9                   	leaveq $/;"	l
ffff80000010401c	kernel.asm	/^ffff80000010401c:	c3                   	retq   $/;"	l
ffff80000010401d	kernel.asm	/^ffff80000010401d <ioapicinit>:$/;"	l
ffff80000010401d	kernel.asm	/^ffff80000010401d:	55                   	push   %rbp$/;"	l
ffff80000010401e	kernel.asm	/^ffff80000010401e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104021	kernel.asm	/^ffff800000104021:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104025	kernel.asm	/^ffff800000104025:	48 b8 d8 a1 11 00 00 	movabs $0xffff80000011a1d8,%rax$/;"	l
ffff80000010402c	kernel.asm	/^ffff80000010402c:	80 ff ff $/;"	l
ffff80000010402f	kernel.asm	/^ffff80000010402f:	48 b9 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rcx$/;"	l
ffff800000104036	kernel.asm	/^ffff800000104036:	80 ff ff $/;"	l
ffff800000104039	kernel.asm	/^ffff800000104039:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff80000010403c	kernel.asm	/^ffff80000010403c:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000104041	kernel.asm	/^ffff800000104041:	48 b8 b8 3f 10 00 00 	movabs $0xffff800000103fb8,%rax$/;"	l
ffff800000104048	kernel.asm	/^ffff800000104048:	80 ff ff $/;"	l
ffff80000010404b	kernel.asm	/^ffff80000010404b:	ff d0                	callq  *%rax$/;"	l
ffff80000010404d	kernel.asm	/^ffff80000010404d:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff800000104050	kernel.asm	/^ffff800000104050:	25 ff 00 00 00       	and    $0xff,%eax$/;"	l
ffff800000104055	kernel.asm	/^ffff800000104055:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104058	kernel.asm	/^ffff800000104058:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010405d	kernel.asm	/^ffff80000010405d:	48 b8 b8 3f 10 00 00 	movabs $0xffff800000103fb8,%rax$/;"	l
ffff800000104064	kernel.asm	/^ffff800000104064:	80 ff ff $/;"	l
ffff800000104067	kernel.asm	/^ffff800000104067:	ff d0                	callq  *%rax$/;"	l
ffff800000104069	kernel.asm	/^ffff800000104069:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff80000010406c	kernel.asm	/^ffff80000010406c:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff80000010406f	kernel.asm	/^ffff80000010406f:	48 b8 04 ab 11 00 00 	movabs $0xffff80000011ab04,%rax$/;"	l
ffff800000104076	kernel.asm	/^ffff800000104076:	80 ff ff $/;"	l
ffff800000104079	kernel.asm	/^ffff800000104079:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010407c	kernel.asm	/^ffff80000010407c:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010407f	kernel.asm	/^ffff80000010407f:	3b 45 f4             	cmp    -0xc(%rbp),%eax$/;"	l
ffff800000104082	kernel.asm	/^ffff800000104082:	74 1b                	je     ffff80000010409f <ioapicinit+0x82>$/;"	l
ffff800000104084	kernel.asm	/^ffff800000104084:	48 bf 58 ce 10 00 00 	movabs $0xffff80000010ce58,%rdi$/;"	l
ffff80000010408b	kernel.asm	/^ffff80000010408b:	80 ff ff $/;"	l
ffff80000010408e	kernel.asm	/^ffff80000010408e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104093	kernel.asm	/^ffff800000104093:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff80000010409a	kernel.asm	/^ffff80000010409a:	80 ff ff $/;"	l
ffff80000010409d	kernel.asm	/^ffff80000010409d:	ff d2                	callq  *%rdx$/;"	l
ffff80000010409f	kernel.asm	/^ffff80000010409f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001040a6	kernel.asm	/^ffff8000001040a6:	eb 47                	jmp    ffff8000001040ef <ioapicinit+0xd2>$/;"	l
ffff8000001040a8	kernel.asm	/^ffff8000001040a8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001040ab	kernel.asm	/^ffff8000001040ab:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff8000001040ae	kernel.asm	/^ffff8000001040ae:	0d 00 00 01 00       	or     $0x10000,%eax$/;"	l
ffff8000001040b3	kernel.asm	/^ffff8000001040b3:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001040b5	kernel.asm	/^ffff8000001040b5:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001040b8	kernel.asm	/^ffff8000001040b8:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff8000001040bb	kernel.asm	/^ffff8000001040bb:	01 c0                	add    %eax,%eax$/;"	l
ffff8000001040bd	kernel.asm	/^ffff8000001040bd:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001040bf	kernel.asm	/^ffff8000001040bf:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001040c1	kernel.asm	/^ffff8000001040c1:	48 b8 e7 3f 10 00 00 	movabs $0xffff800000103fe7,%rax$/;"	l
ffff8000001040c8	kernel.asm	/^ffff8000001040c8:	80 ff ff $/;"	l
ffff8000001040cb	kernel.asm	/^ffff8000001040cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001040cd	kernel.asm	/^ffff8000001040cd:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001040d0	kernel.asm	/^ffff8000001040d0:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff8000001040d3	kernel.asm	/^ffff8000001040d3:	01 c0                	add    %eax,%eax$/;"	l
ffff8000001040d5	kernel.asm	/^ffff8000001040d5:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff8000001040d8	kernel.asm	/^ffff8000001040d8:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001040dd	kernel.asm	/^ffff8000001040dd:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001040df	kernel.asm	/^ffff8000001040df:	48 b8 e7 3f 10 00 00 	movabs $0xffff800000103fe7,%rax$/;"	l
ffff8000001040e6	kernel.asm	/^ffff8000001040e6:	80 ff ff $/;"	l
ffff8000001040e9	kernel.asm	/^ffff8000001040e9:	ff d0                	callq  *%rax$/;"	l
ffff8000001040eb	kernel.asm	/^ffff8000001040eb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001040ef	kernel.asm	/^ffff8000001040ef:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001040f2	kernel.asm	/^ffff8000001040f2:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff8000001040f5	kernel.asm	/^ffff8000001040f5:	7e b1                	jle    ffff8000001040a8 <ioapicinit+0x8b>$/;"	l
ffff8000001040f7	kernel.asm	/^ffff8000001040f7:	90                   	nop$/;"	l
ffff8000001040f8	kernel.asm	/^ffff8000001040f8:	c9                   	leaveq $/;"	l
ffff8000001040f9	kernel.asm	/^ffff8000001040f9:	c3                   	retq   $/;"	l
ffff8000001040fa	kernel.asm	/^ffff8000001040fa <ioapicenable>:$/;"	l
ffff8000001040fa	kernel.asm	/^ffff8000001040fa:	55                   	push   %rbp$/;"	l
ffff8000001040fb	kernel.asm	/^ffff8000001040fb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001040fe	kernel.asm	/^ffff8000001040fe:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104102	kernel.asm	/^ffff800000104102:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104105	kernel.asm	/^ffff800000104105:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff800000104108	kernel.asm	/^ffff800000104108:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010410b	kernel.asm	/^ffff80000010410b:	83 c0 20             	add    $0x20,%eax$/;"	l
ffff80000010410e	kernel.asm	/^ffff80000010410e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104110	kernel.asm	/^ffff800000104110:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104113	kernel.asm	/^ffff800000104113:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000104116	kernel.asm	/^ffff800000104116:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104118	kernel.asm	/^ffff800000104118:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010411a	kernel.asm	/^ffff80000010411a:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010411c	kernel.asm	/^ffff80000010411c:	48 b8 e7 3f 10 00 00 	movabs $0xffff800000103fe7,%rax$/;"	l
ffff800000104123	kernel.asm	/^ffff800000104123:	80 ff ff $/;"	l
ffff800000104126	kernel.asm	/^ffff800000104126:	ff d0                	callq  *%rax$/;"	l
ffff800000104128	kernel.asm	/^ffff800000104128:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010412b	kernel.asm	/^ffff80000010412b:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff80000010412e	kernel.asm	/^ffff80000010412e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104130	kernel.asm	/^ffff800000104130:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104133	kernel.asm	/^ffff800000104133:	83 c0 08             	add    $0x8,%eax$/;"	l
ffff800000104136	kernel.asm	/^ffff800000104136:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104138	kernel.asm	/^ffff800000104138:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010413b	kernel.asm	/^ffff80000010413b:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010413d	kernel.asm	/^ffff80000010413d:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010413f	kernel.asm	/^ffff80000010413f:	48 b8 e7 3f 10 00 00 	movabs $0xffff800000103fe7,%rax$/;"	l
ffff800000104146	kernel.asm	/^ffff800000104146:	80 ff ff $/;"	l
ffff800000104149	kernel.asm	/^ffff800000104149:	ff d0                	callq  *%rax$/;"	l
ffff80000010414b	kernel.asm	/^ffff80000010414b:	90                   	nop$/;"	l
ffff80000010414c	kernel.asm	/^ffff80000010414c:	c9                   	leaveq $/;"	l
ffff80000010414d	kernel.asm	/^ffff80000010414d:	c3                   	retq   $/;"	l
ffff80000010414e	kernel.asm	/^ffff80000010414e <kinit1>:$/;"	l
ffff80000010414e	kernel.asm	/^ffff80000010414e:	55                   	push   %rbp$/;"	l
ffff80000010414f	kernel.asm	/^ffff80000010414f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104152	kernel.asm	/^ffff800000104152:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104156	kernel.asm	/^ffff800000104156:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010415a	kernel.asm	/^ffff80000010415a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff80000010415e	kernel.asm	/^ffff80000010415e:	48 be 8a ce 10 00 00 	movabs $0xffff80000010ce8a,%rsi$/;"	l
ffff800000104165	kernel.asm	/^ffff800000104165:	80 ff ff $/;"	l
ffff800000104168	kernel.asm	/^ffff800000104168:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff80000010416f	kernel.asm	/^ffff80000010416f:	80 ff ff $/;"	l
ffff800000104172	kernel.asm	/^ffff800000104172:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000104179	kernel.asm	/^ffff800000104179:	80 ff ff $/;"	l
ffff80000010417c	kernel.asm	/^ffff80000010417c:	ff d0                	callq  *%rax$/;"	l
ffff80000010417e	kernel.asm	/^ffff80000010417e:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104185	kernel.asm	/^ffff800000104185:	80 ff ff $/;"	l
ffff800000104188	kernel.asm	/^ffff800000104188:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%rax)$/;"	l
ffff80000010418f	kernel.asm	/^ffff80000010418f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000104193	kernel.asm	/^ffff800000104193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104197	kernel.asm	/^ffff800000104197:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010419a	kernel.asm	/^ffff80000010419a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010419d	kernel.asm	/^ffff80000010419d:	48 b8 ea 41 10 00 00 	movabs $0xffff8000001041ea,%rax$/;"	l
ffff8000001041a4	kernel.asm	/^ffff8000001041a4:	80 ff ff $/;"	l
ffff8000001041a7	kernel.asm	/^ffff8000001041a7:	ff d0                	callq  *%rax$/;"	l
ffff8000001041a9	kernel.asm	/^ffff8000001041a9:	90                   	nop$/;"	l
ffff8000001041aa	kernel.asm	/^ffff8000001041aa:	c9                   	leaveq $/;"	l
ffff8000001041ab	kernel.asm	/^ffff8000001041ab:	c3                   	retq   $/;"	l
ffff8000001041ac	kernel.asm	/^ffff8000001041ac <kinit2>:$/;"	l
ffff8000001041ac	kernel.asm	/^ffff8000001041ac:	55                   	push   %rbp$/;"	l
ffff8000001041ad	kernel.asm	/^ffff8000001041ad:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001041b0	kernel.asm	/^ffff8000001041b0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001041b4	kernel.asm	/^ffff8000001041b4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001041b8	kernel.asm	/^ffff8000001041b8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001041bc	kernel.asm	/^ffff8000001041bc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001041c0	kernel.asm	/^ffff8000001041c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001041c4	kernel.asm	/^ffff8000001041c4:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001041c7	kernel.asm	/^ffff8000001041c7:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001041ca	kernel.asm	/^ffff8000001041ca:	48 b8 ea 41 10 00 00 	movabs $0xffff8000001041ea,%rax$/;"	l
ffff8000001041d1	kernel.asm	/^ffff8000001041d1:	80 ff ff $/;"	l
ffff8000001041d4	kernel.asm	/^ffff8000001041d4:	ff d0                	callq  *%rax$/;"	l
ffff8000001041d6	kernel.asm	/^ffff8000001041d6:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001041dd	kernel.asm	/^ffff8000001041dd:	80 ff ff $/;"	l
ffff8000001041e0	kernel.asm	/^ffff8000001041e0:	c7 40 68 01 00 00 00 	movl   $0x1,0x68(%rax)$/;"	l
ffff8000001041e7	kernel.asm	/^ffff8000001041e7:	90                   	nop$/;"	l
ffff8000001041e8	kernel.asm	/^ffff8000001041e8:	c9                   	leaveq $/;"	l
ffff8000001041e9	kernel.asm	/^ffff8000001041e9:	c3                   	retq   $/;"	l
ffff8000001041ea	kernel.asm	/^ffff8000001041ea <freerange>:$/;"	l
ffff8000001041ea	kernel.asm	/^ffff8000001041ea:	55                   	push   %rbp$/;"	l
ffff8000001041eb	kernel.asm	/^ffff8000001041eb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001041ee	kernel.asm	/^ffff8000001041ee:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001041f2	kernel.asm	/^ffff8000001041f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001041f6	kernel.asm	/^ffff8000001041f6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001041fa	kernel.asm	/^ffff8000001041fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001041fe	kernel.asm	/^ffff8000001041fe:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff800000104204	kernel.asm	/^ffff800000104204:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010420a	kernel.asm	/^ffff80000010420a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010420e	kernel.asm	/^ffff80000010420e:	eb 1b                	jmp    ffff80000010422b <freerange+0x41>$/;"	l
ffff800000104210	kernel.asm	/^ffff800000104210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104214	kernel.asm	/^ffff800000104214:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104217	kernel.asm	/^ffff800000104217:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010421e	kernel.asm	/^ffff80000010421e:	80 ff ff $/;"	l
ffff800000104221	kernel.asm	/^ffff800000104221:	ff d0                	callq  *%rax$/;"	l
ffff800000104223	kernel.asm	/^ffff800000104223:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010422a	kernel.asm	/^ffff80000010422a:	00 $/;"	l
ffff80000010422b	kernel.asm	/^ffff80000010422b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010422f	kernel.asm	/^ffff80000010422f:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000104235	kernel.asm	/^ffff800000104235:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax$/;"	l
ffff800000104239	kernel.asm	/^ffff800000104239:	76 d5                	jbe    ffff800000104210 <freerange+0x26>$/;"	l
ffff80000010423b	kernel.asm	/^ffff80000010423b:	90                   	nop$/;"	l
ffff80000010423c	kernel.asm	/^ffff80000010423c:	c9                   	leaveq $/;"	l
ffff80000010423d	kernel.asm	/^ffff80000010423d:	c3                   	retq   $/;"	l
ffff80000010423e	kernel.asm	/^ffff80000010423e <kfree>:$/;"	l
ffff80000010423e	kernel.asm	/^ffff80000010423e:	55                   	push   %rbp$/;"	l
ffff80000010423f	kernel.asm	/^ffff80000010423f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104242	kernel.asm	/^ffff800000104242:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104246	kernel.asm	/^ffff800000104246:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010424a	kernel.asm	/^ffff80000010424a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010424e	kernel.asm	/^ffff80000010424e:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff800000104253	kernel.asm	/^ffff800000104253:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104256	kernel.asm	/^ffff800000104256:	75 29                	jne    ffff800000104281 <kfree+0x43>$/;"	l
ffff800000104258	kernel.asm	/^ffff800000104258:	48 b8 00 f0 11 00 00 	movabs $0xffff80000011f000,%rax$/;"	l
ffff80000010425f	kernel.asm	/^ffff80000010425f:	80 ff ff $/;"	l
ffff800000104262	kernel.asm	/^ffff800000104262:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000104266	kernel.asm	/^ffff800000104266:	72 19                	jb     ffff800000104281 <kfree+0x43>$/;"	l
ffff800000104268	kernel.asm	/^ffff800000104268:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010426c	kernel.asm	/^ffff80000010426c:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff800000104273	kernel.asm	/^ffff800000104273:	80 00 00 $/;"	l
ffff800000104276	kernel.asm	/^ffff800000104276:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000104279	kernel.asm	/^ffff800000104279:	48 3d ff ff ff 0d    	cmp    $0xdffffff,%rax$/;"	l
ffff80000010427f	kernel.asm	/^ffff80000010427f:	76 16                	jbe    ffff800000104297 <kfree+0x59>$/;"	l
ffff800000104281	kernel.asm	/^ffff800000104281:	48 bf 8f ce 10 00 00 	movabs $0xffff80000010ce8f,%rdi$/;"	l
ffff800000104288	kernel.asm	/^ffff800000104288:	80 ff ff $/;"	l
ffff80000010428b	kernel.asm	/^ffff80000010428b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000104292	kernel.asm	/^ffff800000104292:	80 ff ff $/;"	l
ffff800000104295	kernel.asm	/^ffff800000104295:	ff d0                	callq  *%rax$/;"	l
ffff800000104297	kernel.asm	/^ffff800000104297:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010429b	kernel.asm	/^ffff80000010429b:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff8000001042a0	kernel.asm	/^ffff8000001042a0:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001042a5	kernel.asm	/^ffff8000001042a5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001042a8	kernel.asm	/^ffff8000001042a8:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff8000001042af	kernel.asm	/^ffff8000001042af:	80 ff ff $/;"	l
ffff8000001042b2	kernel.asm	/^ffff8000001042b2:	ff d0                	callq  *%rax$/;"	l
ffff8000001042b4	kernel.asm	/^ffff8000001042b4:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001042bb	kernel.asm	/^ffff8000001042bb:	80 ff ff $/;"	l
ffff8000001042be	kernel.asm	/^ffff8000001042be:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff8000001042c1	kernel.asm	/^ffff8000001042c1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001042c3	kernel.asm	/^ffff8000001042c3:	74 16                	je     ffff8000001042db <kfree+0x9d>$/;"	l
ffff8000001042c5	kernel.asm	/^ffff8000001042c5:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff8000001042cc	kernel.asm	/^ffff8000001042cc:	80 ff ff $/;"	l
ffff8000001042cf	kernel.asm	/^ffff8000001042cf:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001042d6	kernel.asm	/^ffff8000001042d6:	80 ff ff $/;"	l
ffff8000001042d9	kernel.asm	/^ffff8000001042d9:	ff d0                	callq  *%rax$/;"	l
ffff8000001042db	kernel.asm	/^ffff8000001042db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001042df	kernel.asm	/^ffff8000001042df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001042e3	kernel.asm	/^ffff8000001042e3:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001042ea	kernel.asm	/^ffff8000001042ea:	80 ff ff $/;"	l
ffff8000001042ed	kernel.asm	/^ffff8000001042ed:	48 8b 50 70          	mov    0x70(%rax),%rdx$/;"	l
ffff8000001042f1	kernel.asm	/^ffff8000001042f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001042f5	kernel.asm	/^ffff8000001042f5:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001042f8	kernel.asm	/^ffff8000001042f8:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff8000001042ff	kernel.asm	/^ffff8000001042ff:	80 ff ff $/;"	l
ffff800000104302	kernel.asm	/^ffff800000104302:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000104306	kernel.asm	/^ffff800000104306:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff80000010430a	kernel.asm	/^ffff80000010430a:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104311	kernel.asm	/^ffff800000104311:	80 ff ff $/;"	l
ffff800000104314	kernel.asm	/^ffff800000104314:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104317	kernel.asm	/^ffff800000104317:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104319	kernel.asm	/^ffff800000104319:	74 16                	je     ffff800000104331 <kfree+0xf3>$/;"	l
ffff80000010431b	kernel.asm	/^ffff80000010431b:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104322	kernel.asm	/^ffff800000104322:	80 ff ff $/;"	l
ffff800000104325	kernel.asm	/^ffff800000104325:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010432c	kernel.asm	/^ffff80000010432c:	80 ff ff $/;"	l
ffff80000010432f	kernel.asm	/^ffff80000010432f:	ff d0                	callq  *%rax$/;"	l
ffff800000104331	kernel.asm	/^ffff800000104331:	90                   	nop$/;"	l
ffff800000104332	kernel.asm	/^ffff800000104332:	c9                   	leaveq $/;"	l
ffff800000104333	kernel.asm	/^ffff800000104333:	c3                   	retq   $/;"	l
ffff800000104334	kernel.asm	/^ffff800000104334 <kalloc>:$/;"	l
ffff800000104334	kernel.asm	/^ffff800000104334:	55                   	push   %rbp$/;"	l
ffff800000104335	kernel.asm	/^ffff800000104335:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104338	kernel.asm	/^ffff800000104338:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010433c	kernel.asm	/^ffff80000010433c:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104343	kernel.asm	/^ffff800000104343:	80 ff ff $/;"	l
ffff800000104346	kernel.asm	/^ffff800000104346:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104349	kernel.asm	/^ffff800000104349:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010434b	kernel.asm	/^ffff80000010434b:	74 16                	je     ffff800000104363 <kalloc+0x2f>$/;"	l
ffff80000010434d	kernel.asm	/^ffff80000010434d:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff800000104354	kernel.asm	/^ffff800000104354:	80 ff ff $/;"	l
ffff800000104357	kernel.asm	/^ffff800000104357:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff80000010435e	kernel.asm	/^ffff80000010435e:	80 ff ff $/;"	l
ffff800000104361	kernel.asm	/^ffff800000104361:	ff d0                	callq  *%rax$/;"	l
ffff800000104363	kernel.asm	/^ffff800000104363:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff80000010436a	kernel.asm	/^ffff80000010436a:	80 ff ff $/;"	l
ffff80000010436d	kernel.asm	/^ffff80000010436d:	48 8b 40 70          	mov    0x70(%rax),%rax$/;"	l
ffff800000104371	kernel.asm	/^ffff800000104371:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104375	kernel.asm	/^ffff800000104375:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010437a	kernel.asm	/^ffff80000010437a:	74 15                	je     ffff800000104391 <kalloc+0x5d>$/;"	l
ffff80000010437c	kernel.asm	/^ffff80000010437c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104380	kernel.asm	/^ffff800000104380:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000104383	kernel.asm	/^ffff800000104383:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff80000010438a	kernel.asm	/^ffff80000010438a:	80 ff ff $/;"	l
ffff80000010438d	kernel.asm	/^ffff80000010438d:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff800000104391	kernel.asm	/^ffff800000104391:	48 b8 e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rax$/;"	l
ffff800000104398	kernel.asm	/^ffff800000104398:	80 ff ff $/;"	l
ffff80000010439b	kernel.asm	/^ffff80000010439b:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff80000010439e	kernel.asm	/^ffff80000010439e:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001043a0	kernel.asm	/^ffff8000001043a0:	74 16                	je     ffff8000001043b8 <kalloc+0x84>$/;"	l
ffff8000001043a2	kernel.asm	/^ffff8000001043a2:	48 bf e0 a1 11 00 00 	movabs $0xffff80000011a1e0,%rdi$/;"	l
ffff8000001043a9	kernel.asm	/^ffff8000001043a9:	80 ff ff $/;"	l
ffff8000001043ac	kernel.asm	/^ffff8000001043ac:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001043b3	kernel.asm	/^ffff8000001043b3:	80 ff ff $/;"	l
ffff8000001043b6	kernel.asm	/^ffff8000001043b6:	ff d0                	callq  *%rax$/;"	l
ffff8000001043b8	kernel.asm	/^ffff8000001043b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001043bc	kernel.asm	/^ffff8000001043bc:	c9                   	leaveq $/;"	l
ffff8000001043bd	kernel.asm	/^ffff8000001043bd:	c3                   	retq   $/;"	l
ffff8000001043be	kernel.asm	/^ffff8000001043be <inb>:$/;"	l
ffff8000001043be	kernel.asm	/^ffff8000001043be:	55                   	push   %rbp$/;"	l
ffff8000001043bf	kernel.asm	/^ffff8000001043bf:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043c2	kernel.asm	/^ffff8000001043c2:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001043c6	kernel.asm	/^ffff8000001043c6:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001043c8	kernel.asm	/^ffff8000001043c8:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001043cc	kernel.asm	/^ffff8000001043cc:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001043d0	kernel.asm	/^ffff8000001043d0:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001043d2	kernel.asm	/^ffff8000001043d2:	ec                   	in     (%dx),%al$/;"	l
ffff8000001043d3	kernel.asm	/^ffff8000001043d3:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001043d6	kernel.asm	/^ffff8000001043d6:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001043da	kernel.asm	/^ffff8000001043da:	c9                   	leaveq $/;"	l
ffff8000001043db	kernel.asm	/^ffff8000001043db:	c3                   	retq   $/;"	l
ffff8000001043dc	kernel.asm	/^ffff8000001043dc <kbdgetc>:$/;"	l
ffff8000001043dc	kernel.asm	/^ffff8000001043dc:	55                   	push   %rbp$/;"	l
ffff8000001043dd	kernel.asm	/^ffff8000001043dd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001043e0	kernel.asm	/^ffff8000001043e0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001043e4	kernel.asm	/^ffff8000001043e4:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff8000001043e9	kernel.asm	/^ffff8000001043e9:	48 b8 be 43 10 00 00 	movabs $0xffff8000001043be,%rax$/;"	l
ffff8000001043f0	kernel.asm	/^ffff8000001043f0:	80 ff ff $/;"	l
ffff8000001043f3	kernel.asm	/^ffff8000001043f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001043f5	kernel.asm	/^ffff8000001043f5:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001043f8	kernel.asm	/^ffff8000001043f8:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001043fb	kernel.asm	/^ffff8000001043fb:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001043fe	kernel.asm	/^ffff8000001043fe:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000104401	kernel.asm	/^ffff800000104401:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104403	kernel.asm	/^ffff800000104403:	75 0a                	jne    ffff80000010440f <kbdgetc+0x33>$/;"	l
ffff800000104405	kernel.asm	/^ffff800000104405:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010440a	kernel.asm	/^ffff80000010440a:	e9 ae 01 00 00       	jmpq   ffff8000001045bd <kbdgetc+0x1e1>$/;"	l
ffff80000010440f	kernel.asm	/^ffff80000010440f:	bf 60 00 00 00       	mov    $0x60,%edi$/;"	l
ffff800000104414	kernel.asm	/^ffff800000104414:	48 b8 be 43 10 00 00 	movabs $0xffff8000001043be,%rax$/;"	l
ffff80000010441b	kernel.asm	/^ffff80000010441b:	80 ff ff $/;"	l
ffff80000010441e	kernel.asm	/^ffff80000010441e:	ff d0                	callq  *%rax$/;"	l
ffff800000104420	kernel.asm	/^ffff800000104420:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104423	kernel.asm	/^ffff800000104423:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104426	kernel.asm	/^ffff800000104426:	81 7d fc e0 00 00 00 	cmpl   $0xe0,-0x4(%rbp)$/;"	l
ffff80000010442d	kernel.asm	/^ffff80000010442d:	75 27                	jne    ffff800000104456 <kbdgetc+0x7a>$/;"	l
ffff80000010442f	kernel.asm	/^ffff80000010442f:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104436	kernel.asm	/^ffff800000104436:	80 ff ff $/;"	l
ffff800000104439	kernel.asm	/^ffff800000104439:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010443b	kernel.asm	/^ffff80000010443b:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff80000010443e	kernel.asm	/^ffff80000010443e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104440	kernel.asm	/^ffff800000104440:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104447	kernel.asm	/^ffff800000104447:	80 ff ff $/;"	l
ffff80000010444a	kernel.asm	/^ffff80000010444a:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010444c	kernel.asm	/^ffff80000010444c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104451	kernel.asm	/^ffff800000104451:	e9 67 01 00 00       	jmpq   ffff8000001045bd <kbdgetc+0x1e1>$/;"	l
ffff800000104456	kernel.asm	/^ffff800000104456:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104459	kernel.asm	/^ffff800000104459:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff80000010445e	kernel.asm	/^ffff80000010445e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104460	kernel.asm	/^ffff800000104460:	74 60                	je     ffff8000001044c2 <kbdgetc+0xe6>$/;"	l
ffff800000104462	kernel.asm	/^ffff800000104462:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104469	kernel.asm	/^ffff800000104469:	80 ff ff $/;"	l
ffff80000010446c	kernel.asm	/^ffff80000010446c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010446e	kernel.asm	/^ffff80000010446e:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff800000104471	kernel.asm	/^ffff800000104471:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104473	kernel.asm	/^ffff800000104473:	75 08                	jne    ffff80000010447d <kbdgetc+0xa1>$/;"	l
ffff800000104475	kernel.asm	/^ffff800000104475:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104478	kernel.asm	/^ffff800000104478:	83 e0 7f             	and    $0x7f,%eax$/;"	l
ffff80000010447b	kernel.asm	/^ffff80000010447b:	eb 03                	jmp    ffff800000104480 <kbdgetc+0xa4>$/;"	l
ffff80000010447d	kernel.asm	/^ffff80000010447d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104480	kernel.asm	/^ffff800000104480:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104483	kernel.asm	/^ffff800000104483:	48 ba 20 e0 10 00 00 	movabs $0xffff80000010e020,%rdx$/;"	l
ffff80000010448a	kernel.asm	/^ffff80000010448a:	80 ff ff $/;"	l
ffff80000010448d	kernel.asm	/^ffff80000010448d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104490	kernel.asm	/^ffff800000104490:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff800000104494	kernel.asm	/^ffff800000104494:	83 c8 40             	or     $0x40,%eax$/;"	l
ffff800000104497	kernel.asm	/^ffff800000104497:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010449a	kernel.asm	/^ffff80000010449a:	f7 d0                	not    %eax$/;"	l
ffff80000010449c	kernel.asm	/^ffff80000010449c:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010449e	kernel.asm	/^ffff80000010449e:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff8000001044a5	kernel.asm	/^ffff8000001044a5:	80 ff ff $/;"	l
ffff8000001044a8	kernel.asm	/^ffff8000001044a8:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001044aa	kernel.asm	/^ffff8000001044aa:	21 c2                	and    %eax,%edx$/;"	l
ffff8000001044ac	kernel.asm	/^ffff8000001044ac:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff8000001044b3	kernel.asm	/^ffff8000001044b3:	80 ff ff $/;"	l
ffff8000001044b6	kernel.asm	/^ffff8000001044b6:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001044b8	kernel.asm	/^ffff8000001044b8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001044bd	kernel.asm	/^ffff8000001044bd:	e9 fb 00 00 00       	jmpq   ffff8000001045bd <kbdgetc+0x1e1>$/;"	l
ffff8000001044c2	kernel.asm	/^ffff8000001044c2:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff8000001044c9	kernel.asm	/^ffff8000001044c9:	80 ff ff $/;"	l
ffff8000001044cc	kernel.asm	/^ffff8000001044cc:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001044ce	kernel.asm	/^ffff8000001044ce:	83 e0 40             	and    $0x40,%eax$/;"	l
ffff8000001044d1	kernel.asm	/^ffff8000001044d1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001044d3	kernel.asm	/^ffff8000001044d3:	74 24                	je     ffff8000001044f9 <kbdgetc+0x11d>$/;"	l
ffff8000001044d5	kernel.asm	/^ffff8000001044d5:	81 4d fc 80 00 00 00 	orl    $0x80,-0x4(%rbp)$/;"	l
ffff8000001044dc	kernel.asm	/^ffff8000001044dc:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff8000001044e3	kernel.asm	/^ffff8000001044e3:	80 ff ff $/;"	l
ffff8000001044e6	kernel.asm	/^ffff8000001044e6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001044e8	kernel.asm	/^ffff8000001044e8:	83 e0 bf             	and    $0xffffffbf,%eax$/;"	l
ffff8000001044eb	kernel.asm	/^ffff8000001044eb:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001044ed	kernel.asm	/^ffff8000001044ed:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff8000001044f4	kernel.asm	/^ffff8000001044f4:	80 ff ff $/;"	l
ffff8000001044f7	kernel.asm	/^ffff8000001044f7:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001044f9	kernel.asm	/^ffff8000001044f9:	48 ba 20 e0 10 00 00 	movabs $0xffff80000010e020,%rdx$/;"	l
ffff800000104500	kernel.asm	/^ffff800000104500:	80 ff ff $/;"	l
ffff800000104503	kernel.asm	/^ffff800000104503:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104506	kernel.asm	/^ffff800000104506:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff80000010450a	kernel.asm	/^ffff80000010450a:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff80000010450d	kernel.asm	/^ffff80000010450d:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104514	kernel.asm	/^ffff800000104514:	80 ff ff $/;"	l
ffff800000104517	kernel.asm	/^ffff800000104517:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104519	kernel.asm	/^ffff800000104519:	09 c2                	or     %eax,%edx$/;"	l
ffff80000010451b	kernel.asm	/^ffff80000010451b:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104522	kernel.asm	/^ffff800000104522:	80 ff ff $/;"	l
ffff800000104525	kernel.asm	/^ffff800000104525:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104527	kernel.asm	/^ffff800000104527:	48 ba 20 e1 10 00 00 	movabs $0xffff80000010e120,%rdx$/;"	l
ffff80000010452e	kernel.asm	/^ffff80000010452e:	80 ff ff $/;"	l
ffff800000104531	kernel.asm	/^ffff800000104531:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104534	kernel.asm	/^ffff800000104534:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff800000104538	kernel.asm	/^ffff800000104538:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff80000010453b	kernel.asm	/^ffff80000010453b:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104542	kernel.asm	/^ffff800000104542:	80 ff ff $/;"	l
ffff800000104545	kernel.asm	/^ffff800000104545:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104547	kernel.asm	/^ffff800000104547:	31 c2                	xor    %eax,%edx$/;"	l
ffff800000104549	kernel.asm	/^ffff800000104549:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff800000104550	kernel.asm	/^ffff800000104550:	80 ff ff $/;"	l
ffff800000104553	kernel.asm	/^ffff800000104553:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104555	kernel.asm	/^ffff800000104555:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff80000010455c	kernel.asm	/^ffff80000010455c:	80 ff ff $/;"	l
ffff80000010455f	kernel.asm	/^ffff80000010455f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104561	kernel.asm	/^ffff800000104561:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000104564	kernel.asm	/^ffff800000104564:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104566	kernel.asm	/^ffff800000104566:	48 b8 20 e5 10 00 00 	movabs $0xffff80000010e520,%rax$/;"	l
ffff80000010456d	kernel.asm	/^ffff80000010456d:	80 ff ff $/;"	l
ffff800000104570	kernel.asm	/^ffff800000104570:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000104572	kernel.asm	/^ffff800000104572:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx$/;"	l
ffff800000104576	kernel.asm	/^ffff800000104576:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104579	kernel.asm	/^ffff800000104579:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010457c	kernel.asm	/^ffff80000010457c:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010457f	kernel.asm	/^ffff80000010457f:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104582	kernel.asm	/^ffff800000104582:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104585	kernel.asm	/^ffff800000104585:	48 b8 58 a2 11 00 00 	movabs $0xffff80000011a258,%rax$/;"	l
ffff80000010458c	kernel.asm	/^ffff80000010458c:	80 ff ff $/;"	l
ffff80000010458f	kernel.asm	/^ffff80000010458f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104591	kernel.asm	/^ffff800000104591:	83 e0 08             	and    $0x8,%eax$/;"	l
ffff800000104594	kernel.asm	/^ffff800000104594:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104596	kernel.asm	/^ffff800000104596:	74 22                	je     ffff8000001045ba <kbdgetc+0x1de>$/;"	l
ffff800000104598	kernel.asm	/^ffff800000104598:	83 7d f8 60          	cmpl   $0x60,-0x8(%rbp)$/;"	l
ffff80000010459c	kernel.asm	/^ffff80000010459c:	76 0c                	jbe    ffff8000001045aa <kbdgetc+0x1ce>$/;"	l
ffff80000010459e	kernel.asm	/^ffff80000010459e:	83 7d f8 7a          	cmpl   $0x7a,-0x8(%rbp)$/;"	l
ffff8000001045a2	kernel.asm	/^ffff8000001045a2:	77 06                	ja     ffff8000001045aa <kbdgetc+0x1ce>$/;"	l
ffff8000001045a4	kernel.asm	/^ffff8000001045a4:	83 6d f8 20          	subl   $0x20,-0x8(%rbp)$/;"	l
ffff8000001045a8	kernel.asm	/^ffff8000001045a8:	eb 10                	jmp    ffff8000001045ba <kbdgetc+0x1de>$/;"	l
ffff8000001045aa	kernel.asm	/^ffff8000001045aa:	83 7d f8 40          	cmpl   $0x40,-0x8(%rbp)$/;"	l
ffff8000001045ae	kernel.asm	/^ffff8000001045ae:	76 0a                	jbe    ffff8000001045ba <kbdgetc+0x1de>$/;"	l
ffff8000001045b0	kernel.asm	/^ffff8000001045b0:	83 7d f8 5a          	cmpl   $0x5a,-0x8(%rbp)$/;"	l
ffff8000001045b4	kernel.asm	/^ffff8000001045b4:	77 04                	ja     ffff8000001045ba <kbdgetc+0x1de>$/;"	l
ffff8000001045b6	kernel.asm	/^ffff8000001045b6:	83 45 f8 20          	addl   $0x20,-0x8(%rbp)$/;"	l
ffff8000001045ba	kernel.asm	/^ffff8000001045ba:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001045bd	kernel.asm	/^ffff8000001045bd:	c9                   	leaveq $/;"	l
ffff8000001045be	kernel.asm	/^ffff8000001045be:	c3                   	retq   $/;"	l
ffff8000001045bf	kernel.asm	/^ffff8000001045bf <kbdintr>:$/;"	l
ffff8000001045bf	kernel.asm	/^ffff8000001045bf:	55                   	push   %rbp$/;"	l
ffff8000001045c0	kernel.asm	/^ffff8000001045c0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001045c3	kernel.asm	/^ffff8000001045c3:	48 bf dc 43 10 00 00 	movabs $0xffff8000001043dc,%rdi$/;"	l
ffff8000001045ca	kernel.asm	/^ffff8000001045ca:	80 ff ff $/;"	l
ffff8000001045cd	kernel.asm	/^ffff8000001045cd:	48 b8 fa 0e 10 00 00 	movabs $0xffff800000100efa,%rax$/;"	l
ffff8000001045d4	kernel.asm	/^ffff8000001045d4:	80 ff ff $/;"	l
ffff8000001045d7	kernel.asm	/^ffff8000001045d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001045d9	kernel.asm	/^ffff8000001045d9:	90                   	nop$/;"	l
ffff8000001045da	kernel.asm	/^ffff8000001045da:	5d                   	pop    %rbp$/;"	l
ffff8000001045db	kernel.asm	/^ffff8000001045db:	c3                   	retq   $/;"	l
ffff8000001045dc	kernel.asm	/^ffff8000001045dc <inb>:$/;"	l
ffff8000001045dc	kernel.asm	/^ffff8000001045dc:	55                   	push   %rbp$/;"	l
ffff8000001045dd	kernel.asm	/^ffff8000001045dd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001045e0	kernel.asm	/^ffff8000001045e0:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff8000001045e4	kernel.asm	/^ffff8000001045e4:	89 f8                	mov    %edi,%eax$/;"	l
ffff8000001045e6	kernel.asm	/^ffff8000001045e6:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff8000001045ea	kernel.asm	/^ffff8000001045ea:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff8000001045ee	kernel.asm	/^ffff8000001045ee:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001045f0	kernel.asm	/^ffff8000001045f0:	ec                   	in     (%dx),%al$/;"	l
ffff8000001045f1	kernel.asm	/^ffff8000001045f1:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff8000001045f4	kernel.asm	/^ffff8000001045f4:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff8000001045f8	kernel.asm	/^ffff8000001045f8:	c9                   	leaveq $/;"	l
ffff8000001045f9	kernel.asm	/^ffff8000001045f9:	c3                   	retq   $/;"	l
ffff8000001045fa	kernel.asm	/^ffff8000001045fa <outb>:$/;"	l
ffff8000001045fa	kernel.asm	/^ffff8000001045fa:	55                   	push   %rbp$/;"	l
ffff8000001045fb	kernel.asm	/^ffff8000001045fb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001045fe	kernel.asm	/^ffff8000001045fe:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104602	kernel.asm	/^ffff800000104602:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000104604	kernel.asm	/^ffff800000104604:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000104606	kernel.asm	/^ffff800000104606:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff80000010460a	kernel.asm	/^ffff80000010460a:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010460d	kernel.asm	/^ffff80000010460d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000104611	kernel.asm	/^ffff800000104611:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000104615	kernel.asm	/^ffff800000104615:	ee                   	out    %al,(%dx)$/;"	l
ffff800000104616	kernel.asm	/^ffff800000104616:	90                   	nop$/;"	l
ffff800000104617	kernel.asm	/^ffff800000104617:	c9                   	leaveq $/;"	l
ffff800000104618	kernel.asm	/^ffff800000104618:	c3                   	retq   $/;"	l
ffff800000104619	kernel.asm	/^ffff800000104619 <readeflags>:$/;"	l
ffff800000104619	kernel.asm	/^ffff800000104619:	55                   	push   %rbp$/;"	l
ffff80000010461a	kernel.asm	/^ffff80000010461a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010461d	kernel.asm	/^ffff80000010461d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104621	kernel.asm	/^ffff800000104621:	9c                   	pushfq $/;"	l
ffff800000104622	kernel.asm	/^ffff800000104622:	58                   	pop    %rax$/;"	l
ffff800000104623	kernel.asm	/^ffff800000104623:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000104627	kernel.asm	/^ffff800000104627:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010462b	kernel.asm	/^ffff80000010462b:	c9                   	leaveq $/;"	l
ffff80000010462c	kernel.asm	/^ffff80000010462c:	c3                   	retq   $/;"	l
ffff80000010462d	kernel.asm	/^ffff80000010462d <lapicw>:$/;"	l
ffff80000010462d	kernel.asm	/^ffff80000010462d:	55                   	push   %rbp$/;"	l
ffff80000010462e	kernel.asm	/^ffff80000010462e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104631	kernel.asm	/^ffff800000104631:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104635	kernel.asm	/^ffff800000104635:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104638	kernel.asm	/^ffff800000104638:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff80000010463b	kernel.asm	/^ffff80000010463b:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104642	kernel.asm	/^ffff800000104642:	80 ff ff $/;"	l
ffff800000104645	kernel.asm	/^ffff800000104645:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104648	kernel.asm	/^ffff800000104648:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010464b	kernel.asm	/^ffff80000010464b:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010464e	kernel.asm	/^ffff80000010464e:	48 c1 e2 02          	shl    $0x2,%rdx$/;"	l
ffff800000104652	kernel.asm	/^ffff800000104652:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000104655	kernel.asm	/^ffff800000104655:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff800000104658	kernel.asm	/^ffff800000104658:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff80000010465a	kernel.asm	/^ffff80000010465a:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104661	kernel.asm	/^ffff800000104661:	80 ff ff $/;"	l
ffff800000104664	kernel.asm	/^ffff800000104664:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104667	kernel.asm	/^ffff800000104667:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010466b	kernel.asm	/^ffff80000010466b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010466d	kernel.asm	/^ffff80000010466d:	90                   	nop$/;"	l
ffff80000010466e	kernel.asm	/^ffff80000010466e:	c9                   	leaveq $/;"	l
ffff80000010466f	kernel.asm	/^ffff80000010466f:	c3                   	retq   $/;"	l
ffff800000104670	kernel.asm	/^ffff800000104670 <lapicinit>:$/;"	l
ffff800000104670	kernel.asm	/^ffff800000104670:	55                   	push   %rbp$/;"	l
ffff800000104671	kernel.asm	/^ffff800000104671:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104674	kernel.asm	/^ffff800000104674:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff80000010467b	kernel.asm	/^ffff80000010467b:	80 ff ff $/;"	l
ffff80000010467e	kernel.asm	/^ffff80000010467e:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104681	kernel.asm	/^ffff800000104681:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000104684	kernel.asm	/^ffff800000104684:	0f 84 73 01 00 00    	je     ffff8000001047fd <lapicinit+0x18d>$/;"	l
ffff80000010468a	kernel.asm	/^ffff80000010468a:	be 3f 01 00 00       	mov    $0x13f,%esi$/;"	l
ffff80000010468f	kernel.asm	/^ffff80000010468f:	bf 3c 00 00 00       	mov    $0x3c,%edi$/;"	l
ffff800000104694	kernel.asm	/^ffff800000104694:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff80000010469b	kernel.asm	/^ffff80000010469b:	80 ff ff $/;"	l
ffff80000010469e	kernel.asm	/^ffff80000010469e:	ff d0                	callq  *%rax$/;"	l
ffff8000001046a0	kernel.asm	/^ffff8000001046a0:	be 0b 00 00 00       	mov    $0xb,%esi$/;"	l
ffff8000001046a5	kernel.asm	/^ffff8000001046a5:	bf f8 00 00 00       	mov    $0xf8,%edi$/;"	l
ffff8000001046aa	kernel.asm	/^ffff8000001046aa:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001046b1	kernel.asm	/^ffff8000001046b1:	80 ff ff $/;"	l
ffff8000001046b4	kernel.asm	/^ffff8000001046b4:	ff d0                	callq  *%rax$/;"	l
ffff8000001046b6	kernel.asm	/^ffff8000001046b6:	be 20 00 02 00       	mov    $0x20020,%esi$/;"	l
ffff8000001046bb	kernel.asm	/^ffff8000001046bb:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff8000001046c0	kernel.asm	/^ffff8000001046c0:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001046c7	kernel.asm	/^ffff8000001046c7:	80 ff ff $/;"	l
ffff8000001046ca	kernel.asm	/^ffff8000001046ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001046cc	kernel.asm	/^ffff8000001046cc:	be 80 96 98 00       	mov    $0x989680,%esi$/;"	l
ffff8000001046d1	kernel.asm	/^ffff8000001046d1:	bf e0 00 00 00       	mov    $0xe0,%edi$/;"	l
ffff8000001046d6	kernel.asm	/^ffff8000001046d6:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001046dd	kernel.asm	/^ffff8000001046dd:	80 ff ff $/;"	l
ffff8000001046e0	kernel.asm	/^ffff8000001046e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001046e2	kernel.asm	/^ffff8000001046e2:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff8000001046e7	kernel.asm	/^ffff8000001046e7:	bf d4 00 00 00       	mov    $0xd4,%edi$/;"	l
ffff8000001046ec	kernel.asm	/^ffff8000001046ec:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001046f3	kernel.asm	/^ffff8000001046f3:	80 ff ff $/;"	l
ffff8000001046f6	kernel.asm	/^ffff8000001046f6:	ff d0                	callq  *%rax$/;"	l
ffff8000001046f8	kernel.asm	/^ffff8000001046f8:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff8000001046fd	kernel.asm	/^ffff8000001046fd:	bf d8 00 00 00       	mov    $0xd8,%edi$/;"	l
ffff800000104702	kernel.asm	/^ffff800000104702:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104709	kernel.asm	/^ffff800000104709:	80 ff ff $/;"	l
ffff80000010470c	kernel.asm	/^ffff80000010470c:	ff d0                	callq  *%rax$/;"	l
ffff80000010470e	kernel.asm	/^ffff80000010470e:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104715	kernel.asm	/^ffff800000104715:	80 ff ff $/;"	l
ffff800000104718	kernel.asm	/^ffff800000104718:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010471b	kernel.asm	/^ffff80000010471b:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff80000010471f	kernel.asm	/^ffff80000010471f:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000104721	kernel.asm	/^ffff800000104721:	c1 e8 10             	shr    $0x10,%eax$/;"	l
ffff800000104724	kernel.asm	/^ffff800000104724:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104727	kernel.asm	/^ffff800000104727:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff80000010472a	kernel.asm	/^ffff80000010472a:	76 16                	jbe    ffff800000104742 <lapicinit+0xd2>$/;"	l
ffff80000010472c	kernel.asm	/^ffff80000010472c:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff800000104731	kernel.asm	/^ffff800000104731:	bf d0 00 00 00       	mov    $0xd0,%edi$/;"	l
ffff800000104736	kernel.asm	/^ffff800000104736:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff80000010473d	kernel.asm	/^ffff80000010473d:	80 ff ff $/;"	l
ffff800000104740	kernel.asm	/^ffff800000104740:	ff d0                	callq  *%rax$/;"	l
ffff800000104742	kernel.asm	/^ffff800000104742:	be 33 00 00 00       	mov    $0x33,%esi$/;"	l
ffff800000104747	kernel.asm	/^ffff800000104747:	bf dc 00 00 00       	mov    $0xdc,%edi$/;"	l
ffff80000010474c	kernel.asm	/^ffff80000010474c:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104753	kernel.asm	/^ffff800000104753:	80 ff ff $/;"	l
ffff800000104756	kernel.asm	/^ffff800000104756:	ff d0                	callq  *%rax$/;"	l
ffff800000104758	kernel.asm	/^ffff800000104758:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010475d	kernel.asm	/^ffff80000010475d:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff800000104762	kernel.asm	/^ffff800000104762:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104769	kernel.asm	/^ffff800000104769:	80 ff ff $/;"	l
ffff80000010476c	kernel.asm	/^ffff80000010476c:	ff d0                	callq  *%rax$/;"	l
ffff80000010476e	kernel.asm	/^ffff80000010476e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104773	kernel.asm	/^ffff800000104773:	bf a0 00 00 00       	mov    $0xa0,%edi$/;"	l
ffff800000104778	kernel.asm	/^ffff800000104778:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff80000010477f	kernel.asm	/^ffff80000010477f:	80 ff ff $/;"	l
ffff800000104782	kernel.asm	/^ffff800000104782:	ff d0                	callq  *%rax$/;"	l
ffff800000104784	kernel.asm	/^ffff800000104784:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104789	kernel.asm	/^ffff800000104789:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff80000010478e	kernel.asm	/^ffff80000010478e:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104795	kernel.asm	/^ffff800000104795:	80 ff ff $/;"	l
ffff800000104798	kernel.asm	/^ffff800000104798:	ff d0                	callq  *%rax$/;"	l
ffff80000010479a	kernel.asm	/^ffff80000010479a:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010479f	kernel.asm	/^ffff80000010479f:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff8000001047a4	kernel.asm	/^ffff8000001047a4:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001047ab	kernel.asm	/^ffff8000001047ab:	80 ff ff $/;"	l
ffff8000001047ae	kernel.asm	/^ffff8000001047ae:	ff d0                	callq  *%rax$/;"	l
ffff8000001047b0	kernel.asm	/^ffff8000001047b0:	be 00 85 08 00       	mov    $0x88500,%esi$/;"	l
ffff8000001047b5	kernel.asm	/^ffff8000001047b5:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001047ba	kernel.asm	/^ffff8000001047ba:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001047c1	kernel.asm	/^ffff8000001047c1:	80 ff ff $/;"	l
ffff8000001047c4	kernel.asm	/^ffff8000001047c4:	ff d0                	callq  *%rax$/;"	l
ffff8000001047c6	kernel.asm	/^ffff8000001047c6:	90                   	nop$/;"	l
ffff8000001047c7	kernel.asm	/^ffff8000001047c7:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff8000001047ce	kernel.asm	/^ffff8000001047ce:	80 ff ff $/;"	l
ffff8000001047d1	kernel.asm	/^ffff8000001047d1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001047d4	kernel.asm	/^ffff8000001047d4:	48 05 00 03 00 00    	add    $0x300,%rax$/;"	l
ffff8000001047da	kernel.asm	/^ffff8000001047da:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001047dc	kernel.asm	/^ffff8000001047dc:	25 00 10 00 00       	and    $0x1000,%eax$/;"	l
ffff8000001047e1	kernel.asm	/^ffff8000001047e1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001047e3	kernel.asm	/^ffff8000001047e3:	75 e2                	jne    ffff8000001047c7 <lapicinit+0x157>$/;"	l
ffff8000001047e5	kernel.asm	/^ffff8000001047e5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001047ea	kernel.asm	/^ffff8000001047ea:	bf 20 00 00 00       	mov    $0x20,%edi$/;"	l
ffff8000001047ef	kernel.asm	/^ffff8000001047ef:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001047f6	kernel.asm	/^ffff8000001047f6:	80 ff ff $/;"	l
ffff8000001047f9	kernel.asm	/^ffff8000001047f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001047fb	kernel.asm	/^ffff8000001047fb:	eb 01                	jmp    ffff8000001047fe <lapicinit+0x18e>$/;"	l
ffff8000001047fd	kernel.asm	/^ffff8000001047fd:	90                   	nop$/;"	l
ffff8000001047fe	kernel.asm	/^ffff8000001047fe:	5d                   	pop    %rbp$/;"	l
ffff8000001047ff	kernel.asm	/^ffff8000001047ff:	c3                   	retq   $/;"	l
ffff800000104800	kernel.asm	/^ffff800000104800 <cpunum>:$/;"	l
ffff800000104800	kernel.asm	/^ffff800000104800:	55                   	push   %rbp$/;"	l
ffff800000104801	kernel.asm	/^ffff800000104801:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104804	kernel.asm	/^ffff800000104804:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000104808	kernel.asm	/^ffff800000104808:	48 b8 19 46 10 00 00 	movabs $0xffff800000104619,%rax$/;"	l
ffff80000010480f	kernel.asm	/^ffff80000010480f:	80 ff ff $/;"	l
ffff800000104812	kernel.asm	/^ffff800000104812:	ff d0                	callq  *%rax$/;"	l
ffff800000104814	kernel.asm	/^ffff800000104814:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000104819	kernel.asm	/^ffff800000104819:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010481c	kernel.asm	/^ffff80000010481c:	74 41                	je     ffff80000010485f <cpunum+0x5f>$/;"	l
ffff80000010481e	kernel.asm	/^ffff80000010481e:	48 b8 68 a2 11 00 00 	movabs $0xffff80000011a268,%rax$/;"	l
ffff800000104825	kernel.asm	/^ffff800000104825:	80 ff ff $/;"	l
ffff800000104828	kernel.asm	/^ffff800000104828:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010482a	kernel.asm	/^ffff80000010482a:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff80000010482d	kernel.asm	/^ffff80000010482d:	48 ba 68 a2 11 00 00 	movabs $0xffff80000011a268,%rdx$/;"	l
ffff800000104834	kernel.asm	/^ffff800000104834:	80 ff ff $/;"	l
ffff800000104837	kernel.asm	/^ffff800000104837:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff800000104839	kernel.asm	/^ffff800000104839:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010483b	kernel.asm	/^ffff80000010483b:	75 22                	jne    ffff80000010485f <cpunum+0x5f>$/;"	l
ffff80000010483d	kernel.asm	/^ffff80000010483d:	48 8b 45 08          	mov    0x8(%rbp),%rax$/;"	l
ffff800000104841	kernel.asm	/^ffff800000104841:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000104844	kernel.asm	/^ffff800000104844:	48 bf 98 ce 10 00 00 	movabs $0xffff80000010ce98,%rdi$/;"	l
ffff80000010484b	kernel.asm	/^ffff80000010484b:	80 ff ff $/;"	l
ffff80000010484e	kernel.asm	/^ffff80000010484e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104853	kernel.asm	/^ffff800000104853:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff80000010485a	kernel.asm	/^ffff80000010485a:	80 ff ff $/;"	l
ffff80000010485d	kernel.asm	/^ffff80000010485d:	ff d2                	callq  *%rdx$/;"	l
ffff80000010485f	kernel.asm	/^ffff80000010485f:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104866	kernel.asm	/^ffff800000104866:	80 ff ff $/;"	l
ffff800000104869	kernel.asm	/^ffff800000104869:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010486c	kernel.asm	/^ffff80000010486c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010486f	kernel.asm	/^ffff80000010486f:	75 0a                	jne    ffff80000010487b <cpunum+0x7b>$/;"	l
ffff800000104871	kernel.asm	/^ffff800000104871:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000104876	kernel.asm	/^ffff800000104876:	e9 8a 00 00 00       	jmpq   ffff800000104905 <cpunum+0x105>$/;"	l
ffff80000010487b	kernel.asm	/^ffff80000010487b:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104882	kernel.asm	/^ffff800000104882:	80 ff ff $/;"	l
ffff800000104885	kernel.asm	/^ffff800000104885:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104888	kernel.asm	/^ffff800000104888:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010488c	kernel.asm	/^ffff80000010488c:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010488e	kernel.asm	/^ffff80000010488e:	c1 e8 18             	shr    $0x18,%eax$/;"	l
ffff800000104891	kernel.asm	/^ffff800000104891:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104894	kernel.asm	/^ffff800000104894:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010489b	kernel.asm	/^ffff80000010489b:	eb 41                	jmp    ffff8000001048de <cpunum+0xde>$/;"	l
ffff80000010489d	kernel.asm	/^ffff80000010489d:	48 b9 80 a3 11 00 00 	movabs $0xffff80000011a380,%rcx$/;"	l
ffff8000001048a4	kernel.asm	/^ffff8000001048a4:	80 ff ff $/;"	l
ffff8000001048a7	kernel.asm	/^ffff8000001048a7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001048aa	kernel.asm	/^ffff8000001048aa:	48 98                	cltq   $/;"	l
ffff8000001048ac	kernel.asm	/^ffff8000001048ac:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001048af	kernel.asm	/^ffff8000001048af:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001048b2	kernel.asm	/^ffff8000001048b2:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff8000001048b6	kernel.asm	/^ffff8000001048b6:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001048b9	kernel.asm	/^ffff8000001048b9:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff8000001048bc	kernel.asm	/^ffff8000001048bc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff8000001048c0	kernel.asm	/^ffff8000001048c0:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff8000001048c3	kernel.asm	/^ffff8000001048c3:	48 01 c8             	add    %rcx,%rax$/;"	l
ffff8000001048c6	kernel.asm	/^ffff8000001048c6:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff8000001048ca	kernel.asm	/^ffff8000001048ca:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001048cd	kernel.asm	/^ffff8000001048cd:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001048d0	kernel.asm	/^ffff8000001048d0:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff8000001048d3	kernel.asm	/^ffff8000001048d3:	75 05                	jne    ffff8000001048da <cpunum+0xda>$/;"	l
ffff8000001048d5	kernel.asm	/^ffff8000001048d5:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001048d8	kernel.asm	/^ffff8000001048d8:	eb 2b                	jmp    ffff800000104905 <cpunum+0x105>$/;"	l
ffff8000001048da	kernel.asm	/^ffff8000001048da:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001048de	kernel.asm	/^ffff8000001048de:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff8000001048e5	kernel.asm	/^ffff8000001048e5:	80 ff ff $/;"	l
ffff8000001048e8	kernel.asm	/^ffff8000001048e8:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001048ea	kernel.asm	/^ffff8000001048ea:	39 45 fc             	cmp    %eax,-0x4(%rbp)$/;"	l
ffff8000001048ed	kernel.asm	/^ffff8000001048ed:	7c ae                	jl     ffff80000010489d <cpunum+0x9d>$/;"	l
ffff8000001048ef	kernel.asm	/^ffff8000001048ef:	48 bf c4 ce 10 00 00 	movabs $0xffff80000010cec4,%rdi$/;"	l
ffff8000001048f6	kernel.asm	/^ffff8000001048f6:	80 ff ff $/;"	l
ffff8000001048f9	kernel.asm	/^ffff8000001048f9:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000104900	kernel.asm	/^ffff800000104900:	80 ff ff $/;"	l
ffff800000104903	kernel.asm	/^ffff800000104903:	ff d0                	callq  *%rax$/;"	l
ffff800000104905	kernel.asm	/^ffff800000104905:	c9                   	leaveq $/;"	l
ffff800000104906	kernel.asm	/^ffff800000104906:	c3                   	retq   $/;"	l
ffff800000104907	kernel.asm	/^ffff800000104907 <lapiceoi>:$/;"	l
ffff800000104907	kernel.asm	/^ffff800000104907:	55                   	push   %rbp$/;"	l
ffff800000104908	kernel.asm	/^ffff800000104908:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010490b	kernel.asm	/^ffff80000010490b:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000104912	kernel.asm	/^ffff800000104912:	80 ff ff $/;"	l
ffff800000104915	kernel.asm	/^ffff800000104915:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000104918	kernel.asm	/^ffff800000104918:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010491b	kernel.asm	/^ffff80000010491b:	74 16                	je     ffff800000104933 <lapiceoi+0x2c>$/;"	l
ffff80000010491d	kernel.asm	/^ffff80000010491d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000104922	kernel.asm	/^ffff800000104922:	bf 2c 00 00 00       	mov    $0x2c,%edi$/;"	l
ffff800000104927	kernel.asm	/^ffff800000104927:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff80000010492e	kernel.asm	/^ffff80000010492e:	80 ff ff $/;"	l
ffff800000104931	kernel.asm	/^ffff800000104931:	ff d0                	callq  *%rax$/;"	l
ffff800000104933	kernel.asm	/^ffff800000104933:	90                   	nop$/;"	l
ffff800000104934	kernel.asm	/^ffff800000104934:	5d                   	pop    %rbp$/;"	l
ffff800000104935	kernel.asm	/^ffff800000104935:	c3                   	retq   $/;"	l
ffff800000104936	kernel.asm	/^ffff800000104936 <microdelay>:$/;"	l
ffff800000104936	kernel.asm	/^ffff800000104936:	55                   	push   %rbp$/;"	l
ffff800000104937	kernel.asm	/^ffff800000104937:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010493a	kernel.asm	/^ffff80000010493a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010493e	kernel.asm	/^ffff80000010493e:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104941	kernel.asm	/^ffff800000104941:	90                   	nop$/;"	l
ffff800000104942	kernel.asm	/^ffff800000104942:	c9                   	leaveq $/;"	l
ffff800000104943	kernel.asm	/^ffff800000104943:	c3                   	retq   $/;"	l
ffff800000104944	kernel.asm	/^ffff800000104944 <lapicstartap>:$/;"	l
ffff800000104944	kernel.asm	/^ffff800000104944:	55                   	push   %rbp$/;"	l
ffff800000104945	kernel.asm	/^ffff800000104945:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104948	kernel.asm	/^ffff800000104948:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010494c	kernel.asm	/^ffff80000010494c:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010494e	kernel.asm	/^ffff80000010494e:	89 75 e8             	mov    %esi,-0x18(%rbp)$/;"	l
ffff800000104951	kernel.asm	/^ffff800000104951:	88 45 ec             	mov    %al,-0x14(%rbp)$/;"	l
ffff800000104954	kernel.asm	/^ffff800000104954:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff800000104959	kernel.asm	/^ffff800000104959:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff80000010495e	kernel.asm	/^ffff80000010495e:	48 b8 fa 45 10 00 00 	movabs $0xffff8000001045fa,%rax$/;"	l
ffff800000104965	kernel.asm	/^ffff800000104965:	80 ff ff $/;"	l
ffff800000104968	kernel.asm	/^ffff800000104968:	ff d0                	callq  *%rax$/;"	l
ffff80000010496a	kernel.asm	/^ffff80000010496a:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff80000010496f	kernel.asm	/^ffff80000010496f:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff800000104974	kernel.asm	/^ffff800000104974:	48 b8 fa 45 10 00 00 	movabs $0xffff8000001045fa,%rax$/;"	l
ffff80000010497b	kernel.asm	/^ffff80000010497b:	80 ff ff $/;"	l
ffff80000010497e	kernel.asm	/^ffff80000010497e:	ff d0                	callq  *%rax$/;"	l
ffff800000104980	kernel.asm	/^ffff800000104980:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax$/;"	l
ffff800000104987	kernel.asm	/^ffff800000104987:	80 ff ff $/;"	l
ffff80000010498a	kernel.asm	/^ffff80000010498a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010498e	kernel.asm	/^ffff80000010498e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104992	kernel.asm	/^ffff800000104992:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff800000104997	kernel.asm	/^ffff800000104997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010499b	kernel.asm	/^ffff80000010499b:	48 83 c0 02          	add    $0x2,%rax$/;"	l
ffff80000010499f	kernel.asm	/^ffff80000010499f:	8b 55 e8             	mov    -0x18(%rbp),%edx$/;"	l
ffff8000001049a2	kernel.asm	/^ffff8000001049a2:	c1 ea 04             	shr    $0x4,%edx$/;"	l
ffff8000001049a5	kernel.asm	/^ffff8000001049a5:	66 89 10             	mov    %dx,(%rax)$/;"	l
ffff8000001049a8	kernel.asm	/^ffff8000001049a8:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff8000001049ac	kernel.asm	/^ffff8000001049ac:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001049af	kernel.asm	/^ffff8000001049af:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001049b1	kernel.asm	/^ffff8000001049b1:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff8000001049b6	kernel.asm	/^ffff8000001049b6:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001049bd	kernel.asm	/^ffff8000001049bd:	80 ff ff $/;"	l
ffff8000001049c0	kernel.asm	/^ffff8000001049c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001049c2	kernel.asm	/^ffff8000001049c2:	be 00 c5 00 00       	mov    $0xc500,%esi$/;"	l
ffff8000001049c7	kernel.asm	/^ffff8000001049c7:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001049cc	kernel.asm	/^ffff8000001049cc:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001049d3	kernel.asm	/^ffff8000001049d3:	80 ff ff $/;"	l
ffff8000001049d6	kernel.asm	/^ffff8000001049d6:	ff d0                	callq  *%rax$/;"	l
ffff8000001049d8	kernel.asm	/^ffff8000001049d8:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff8000001049dd	kernel.asm	/^ffff8000001049dd:	48 b8 36 49 10 00 00 	movabs $0xffff800000104936,%rax$/;"	l
ffff8000001049e4	kernel.asm	/^ffff8000001049e4:	80 ff ff $/;"	l
ffff8000001049e7	kernel.asm	/^ffff8000001049e7:	ff d0                	callq  *%rax$/;"	l
ffff8000001049e9	kernel.asm	/^ffff8000001049e9:	be 00 85 00 00       	mov    $0x8500,%esi$/;"	l
ffff8000001049ee	kernel.asm	/^ffff8000001049ee:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff8000001049f3	kernel.asm	/^ffff8000001049f3:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff8000001049fa	kernel.asm	/^ffff8000001049fa:	80 ff ff $/;"	l
ffff8000001049fd	kernel.asm	/^ffff8000001049fd:	ff d0                	callq  *%rax$/;"	l
ffff8000001049ff	kernel.asm	/^ffff8000001049ff:	bf 64 00 00 00       	mov    $0x64,%edi$/;"	l
ffff800000104a04	kernel.asm	/^ffff800000104a04:	48 b8 36 49 10 00 00 	movabs $0xffff800000104936,%rax$/;"	l
ffff800000104a0b	kernel.asm	/^ffff800000104a0b:	80 ff ff $/;"	l
ffff800000104a0e	kernel.asm	/^ffff800000104a0e:	ff d0                	callq  *%rax$/;"	l
ffff800000104a10	kernel.asm	/^ffff800000104a10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104a17	kernel.asm	/^ffff800000104a17:	eb 4b                	jmp    ffff800000104a64 <lapicstartap+0x120>$/;"	l
ffff800000104a19	kernel.asm	/^ffff800000104a19:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax$/;"	l
ffff800000104a1d	kernel.asm	/^ffff800000104a1d:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff800000104a20	kernel.asm	/^ffff800000104a20:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000104a22	kernel.asm	/^ffff800000104a22:	bf c4 00 00 00       	mov    $0xc4,%edi$/;"	l
ffff800000104a27	kernel.asm	/^ffff800000104a27:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104a2e	kernel.asm	/^ffff800000104a2e:	80 ff ff $/;"	l
ffff800000104a31	kernel.asm	/^ffff800000104a31:	ff d0                	callq  *%rax$/;"	l
ffff800000104a33	kernel.asm	/^ffff800000104a33:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104a36	kernel.asm	/^ffff800000104a36:	c1 e8 0c             	shr    $0xc,%eax$/;"	l
ffff800000104a39	kernel.asm	/^ffff800000104a39:	80 cc 06             	or     $0x6,%ah$/;"	l
ffff800000104a3c	kernel.asm	/^ffff800000104a3c:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000104a3e	kernel.asm	/^ffff800000104a3e:	bf c0 00 00 00       	mov    $0xc0,%edi$/;"	l
ffff800000104a43	kernel.asm	/^ffff800000104a43:	48 b8 2d 46 10 00 00 	movabs $0xffff80000010462d,%rax$/;"	l
ffff800000104a4a	kernel.asm	/^ffff800000104a4a:	80 ff ff $/;"	l
ffff800000104a4d	kernel.asm	/^ffff800000104a4d:	ff d0                	callq  *%rax$/;"	l
ffff800000104a4f	kernel.asm	/^ffff800000104a4f:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff800000104a54	kernel.asm	/^ffff800000104a54:	48 b8 36 49 10 00 00 	movabs $0xffff800000104936,%rax$/;"	l
ffff800000104a5b	kernel.asm	/^ffff800000104a5b:	80 ff ff $/;"	l
ffff800000104a5e	kernel.asm	/^ffff800000104a5e:	ff d0                	callq  *%rax$/;"	l
ffff800000104a60	kernel.asm	/^ffff800000104a60:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104a64	kernel.asm	/^ffff800000104a64:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104a68	kernel.asm	/^ffff800000104a68:	7e af                	jle    ffff800000104a19 <lapicstartap+0xd5>$/;"	l
ffff800000104a6a	kernel.asm	/^ffff800000104a6a:	90                   	nop$/;"	l
ffff800000104a6b	kernel.asm	/^ffff800000104a6b:	c9                   	leaveq $/;"	l
ffff800000104a6c	kernel.asm	/^ffff800000104a6c:	c3                   	retq   $/;"	l
ffff800000104a6d	kernel.asm	/^ffff800000104a6d <cmos_read>:$/;"	l
ffff800000104a6d	kernel.asm	/^ffff800000104a6d:	55                   	push   %rbp$/;"	l
ffff800000104a6e	kernel.asm	/^ffff800000104a6e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104a71	kernel.asm	/^ffff800000104a71:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104a75	kernel.asm	/^ffff800000104a75:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000104a78	kernel.asm	/^ffff800000104a78:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104a7b	kernel.asm	/^ffff800000104a7b:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104a7e	kernel.asm	/^ffff800000104a7e:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000104a80	kernel.asm	/^ffff800000104a80:	bf 70 00 00 00       	mov    $0x70,%edi$/;"	l
ffff800000104a85	kernel.asm	/^ffff800000104a85:	48 b8 fa 45 10 00 00 	movabs $0xffff8000001045fa,%rax$/;"	l
ffff800000104a8c	kernel.asm	/^ffff800000104a8c:	80 ff ff $/;"	l
ffff800000104a8f	kernel.asm	/^ffff800000104a8f:	ff d0                	callq  *%rax$/;"	l
ffff800000104a91	kernel.asm	/^ffff800000104a91:	bf c8 00 00 00       	mov    $0xc8,%edi$/;"	l
ffff800000104a96	kernel.asm	/^ffff800000104a96:	48 b8 36 49 10 00 00 	movabs $0xffff800000104936,%rax$/;"	l
ffff800000104a9d	kernel.asm	/^ffff800000104a9d:	80 ff ff $/;"	l
ffff800000104aa0	kernel.asm	/^ffff800000104aa0:	ff d0                	callq  *%rax$/;"	l
ffff800000104aa2	kernel.asm	/^ffff800000104aa2:	bf 71 00 00 00       	mov    $0x71,%edi$/;"	l
ffff800000104aa7	kernel.asm	/^ffff800000104aa7:	48 b8 dc 45 10 00 00 	movabs $0xffff8000001045dc,%rax$/;"	l
ffff800000104aae	kernel.asm	/^ffff800000104aae:	80 ff ff $/;"	l
ffff800000104ab1	kernel.asm	/^ffff800000104ab1:	ff d0                	callq  *%rax$/;"	l
ffff800000104ab3	kernel.asm	/^ffff800000104ab3:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104ab6	kernel.asm	/^ffff800000104ab6:	c9                   	leaveq $/;"	l
ffff800000104ab7	kernel.asm	/^ffff800000104ab7:	c3                   	retq   $/;"	l
ffff800000104ab8	kernel.asm	/^ffff800000104ab8 <fill_rtcdate>:$/;"	l
ffff800000104ab8	kernel.asm	/^ffff800000104ab8:	55                   	push   %rbp$/;"	l
ffff800000104ab9	kernel.asm	/^ffff800000104ab9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104abc	kernel.asm	/^ffff800000104abc:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000104ac0	kernel.asm	/^ffff800000104ac0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000104ac4	kernel.asm	/^ffff800000104ac4:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000104ac9	kernel.asm	/^ffff800000104ac9:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104ad0	kernel.asm	/^ffff800000104ad0:	80 ff ff $/;"	l
ffff800000104ad3	kernel.asm	/^ffff800000104ad3:	ff d0                	callq  *%rax$/;"	l
ffff800000104ad5	kernel.asm	/^ffff800000104ad5:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104ad7	kernel.asm	/^ffff800000104ad7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104adb	kernel.asm	/^ffff800000104adb:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104add	kernel.asm	/^ffff800000104add:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000104ae2	kernel.asm	/^ffff800000104ae2:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104ae9	kernel.asm	/^ffff800000104ae9:	80 ff ff $/;"	l
ffff800000104aec	kernel.asm	/^ffff800000104aec:	ff d0                	callq  *%rax$/;"	l
ffff800000104aee	kernel.asm	/^ffff800000104aee:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104af0	kernel.asm	/^ffff800000104af0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104af4	kernel.asm	/^ffff800000104af4:	89 50 04             	mov    %edx,0x4(%rax)$/;"	l
ffff800000104af7	kernel.asm	/^ffff800000104af7:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff800000104afc	kernel.asm	/^ffff800000104afc:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104b03	kernel.asm	/^ffff800000104b03:	80 ff ff $/;"	l
ffff800000104b06	kernel.asm	/^ffff800000104b06:	ff d0                	callq  *%rax$/;"	l
ffff800000104b08	kernel.asm	/^ffff800000104b08:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b0a	kernel.asm	/^ffff800000104b0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104b0e	kernel.asm	/^ffff800000104b0e:	89 50 08             	mov    %edx,0x8(%rax)$/;"	l
ffff800000104b11	kernel.asm	/^ffff800000104b11:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff800000104b16	kernel.asm	/^ffff800000104b16:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104b1d	kernel.asm	/^ffff800000104b1d:	80 ff ff $/;"	l
ffff800000104b20	kernel.asm	/^ffff800000104b20:	ff d0                	callq  *%rax$/;"	l
ffff800000104b22	kernel.asm	/^ffff800000104b22:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b24	kernel.asm	/^ffff800000104b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104b28	kernel.asm	/^ffff800000104b28:	89 50 0c             	mov    %edx,0xc(%rax)$/;"	l
ffff800000104b2b	kernel.asm	/^ffff800000104b2b:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff800000104b30	kernel.asm	/^ffff800000104b30:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104b37	kernel.asm	/^ffff800000104b37:	80 ff ff $/;"	l
ffff800000104b3a	kernel.asm	/^ffff800000104b3a:	ff d0                	callq  *%rax$/;"	l
ffff800000104b3c	kernel.asm	/^ffff800000104b3c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b3e	kernel.asm	/^ffff800000104b3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104b42	kernel.asm	/^ffff800000104b42:	89 50 10             	mov    %edx,0x10(%rax)$/;"	l
ffff800000104b45	kernel.asm	/^ffff800000104b45:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff800000104b4a	kernel.asm	/^ffff800000104b4a:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104b51	kernel.asm	/^ffff800000104b51:	80 ff ff $/;"	l
ffff800000104b54	kernel.asm	/^ffff800000104b54:	ff d0                	callq  *%rax$/;"	l
ffff800000104b56	kernel.asm	/^ffff800000104b56:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104b58	kernel.asm	/^ffff800000104b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000104b5c	kernel.asm	/^ffff800000104b5c:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff800000104b5f	kernel.asm	/^ffff800000104b5f:	90                   	nop$/;"	l
ffff800000104b60	kernel.asm	/^ffff800000104b60:	c9                   	leaveq $/;"	l
ffff800000104b61	kernel.asm	/^ffff800000104b61:	c3                   	retq   $/;"	l
ffff800000104b62	kernel.asm	/^ffff800000104b62 <cmostime>:$/;"	l
ffff800000104b62	kernel.asm	/^ffff800000104b62:	55                   	push   %rbp$/;"	l
ffff800000104b63	kernel.asm	/^ffff800000104b63:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104b66	kernel.asm	/^ffff800000104b66:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff800000104b6a	kernel.asm	/^ffff800000104b6a:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)$/;"	l
ffff800000104b6e	kernel.asm	/^ffff800000104b6e:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff800000104b73	kernel.asm	/^ffff800000104b73:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104b7a	kernel.asm	/^ffff800000104b7a:	80 ff ff $/;"	l
ffff800000104b7d	kernel.asm	/^ffff800000104b7d:	ff d0                	callq  *%rax$/;"	l
ffff800000104b7f	kernel.asm	/^ffff800000104b7f:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000104b82	kernel.asm	/^ffff800000104b82:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104b85	kernel.asm	/^ffff800000104b85:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff800000104b88	kernel.asm	/^ffff800000104b88:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104b8a	kernel.asm	/^ffff800000104b8a:	0f 94 c0             	sete   %al$/;"	l
ffff800000104b8d	kernel.asm	/^ffff800000104b8d:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000104b90	kernel.asm	/^ffff800000104b90:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000104b93	kernel.asm	/^ffff800000104b93:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000104b97	kernel.asm	/^ffff800000104b97:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104b9a	kernel.asm	/^ffff800000104b9a:	48 b8 b8 4a 10 00 00 	movabs $0xffff800000104ab8,%rax$/;"	l
ffff800000104ba1	kernel.asm	/^ffff800000104ba1:	80 ff ff $/;"	l
ffff800000104ba4	kernel.asm	/^ffff800000104ba4:	ff d0                	callq  *%rax$/;"	l
ffff800000104ba6	kernel.asm	/^ffff800000104ba6:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff800000104bab	kernel.asm	/^ffff800000104bab:	48 b8 6d 4a 10 00 00 	movabs $0xffff800000104a6d,%rax$/;"	l
ffff800000104bb2	kernel.asm	/^ffff800000104bb2:	80 ff ff $/;"	l
ffff800000104bb5	kernel.asm	/^ffff800000104bb5:	ff d0                	callq  *%rax$/;"	l
ffff800000104bb7	kernel.asm	/^ffff800000104bb7:	25 80 00 00 00       	and    $0x80,%eax$/;"	l
ffff800000104bbc	kernel.asm	/^ffff800000104bbc:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104bbe	kernel.asm	/^ffff800000104bbe:	75 38                	jne    ffff800000104bf8 <cmostime+0x96>$/;"	l
ffff800000104bc0	kernel.asm	/^ffff800000104bc0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax$/;"	l
ffff800000104bc4	kernel.asm	/^ffff800000104bc4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104bc7	kernel.asm	/^ffff800000104bc7:	48 b8 b8 4a 10 00 00 	movabs $0xffff800000104ab8,%rax$/;"	l
ffff800000104bce	kernel.asm	/^ffff800000104bce:	80 ff ff $/;"	l
ffff800000104bd1	kernel.asm	/^ffff800000104bd1:	ff d0                	callq  *%rax$/;"	l
ffff800000104bd3	kernel.asm	/^ffff800000104bd3:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx$/;"	l
ffff800000104bd7	kernel.asm	/^ffff800000104bd7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000104bdb	kernel.asm	/^ffff800000104bdb:	ba 18 00 00 00       	mov    $0x18,%edx$/;"	l
ffff800000104be0	kernel.asm	/^ffff800000104be0:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104be3	kernel.asm	/^ffff800000104be3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104be6	kernel.asm	/^ffff800000104be6:	48 b8 f6 78 10 00 00 	movabs $0xffff8000001078f6,%rax$/;"	l
ffff800000104bed	kernel.asm	/^ffff800000104bed:	80 ff ff $/;"	l
ffff800000104bf0	kernel.asm	/^ffff800000104bf0:	ff d0                	callq  *%rax$/;"	l
ffff800000104bf2	kernel.asm	/^ffff800000104bf2:	85 c0                	test   %eax,%eax$/;"	l
ffff800000104bf4	kernel.asm	/^ffff800000104bf4:	74 05                	je     ffff800000104bfb <cmostime+0x99>$/;"	l
ffff800000104bf6	kernel.asm	/^ffff800000104bf6:	eb 9b                	jmp    ffff800000104b93 <cmostime+0x31>$/;"	l
ffff800000104bf8	kernel.asm	/^ffff800000104bf8:	90                   	nop$/;"	l
ffff800000104bf9	kernel.asm	/^ffff800000104bf9:	eb 98                	jmp    ffff800000104b93 <cmostime+0x31>$/;"	l
ffff800000104bfb	kernel.asm	/^ffff800000104bfb:	90                   	nop$/;"	l
ffff800000104bfc	kernel.asm	/^ffff800000104bfc:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff800000104c00	kernel.asm	/^ffff800000104c00:	0f 84 b4 00 00 00    	je     ffff800000104cba <cmostime+0x158>$/;"	l
ffff800000104c06	kernel.asm	/^ffff800000104c06:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff800000104c09	kernel.asm	/^ffff800000104c09:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104c0c	kernel.asm	/^ffff800000104c0c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c0e	kernel.asm	/^ffff800000104c0e:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104c10	kernel.asm	/^ffff800000104c10:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104c13	kernel.asm	/^ffff800000104c13:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c15	kernel.asm	/^ffff800000104c15:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104c17	kernel.asm	/^ffff800000104c17:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c19	kernel.asm	/^ffff800000104c19:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff800000104c1c	kernel.asm	/^ffff800000104c1c:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104c1f	kernel.asm	/^ffff800000104c1f:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c21	kernel.asm	/^ffff800000104c21:	89 45 e0             	mov    %eax,-0x20(%rbp)$/;"	l
ffff800000104c24	kernel.asm	/^ffff800000104c24:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000104c27	kernel.asm	/^ffff800000104c27:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104c2a	kernel.asm	/^ffff800000104c2a:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c2c	kernel.asm	/^ffff800000104c2c:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104c2e	kernel.asm	/^ffff800000104c2e:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104c31	kernel.asm	/^ffff800000104c31:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c33	kernel.asm	/^ffff800000104c33:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104c35	kernel.asm	/^ffff800000104c35:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c37	kernel.asm	/^ffff800000104c37:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000104c3a	kernel.asm	/^ffff800000104c3a:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104c3d	kernel.asm	/^ffff800000104c3d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c3f	kernel.asm	/^ffff800000104c3f:	89 45 e4             	mov    %eax,-0x1c(%rbp)$/;"	l
ffff800000104c42	kernel.asm	/^ffff800000104c42:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104c45	kernel.asm	/^ffff800000104c45:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104c48	kernel.asm	/^ffff800000104c48:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c4a	kernel.asm	/^ffff800000104c4a:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104c4c	kernel.asm	/^ffff800000104c4c:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104c4f	kernel.asm	/^ffff800000104c4f:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c51	kernel.asm	/^ffff800000104c51:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104c53	kernel.asm	/^ffff800000104c53:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c55	kernel.asm	/^ffff800000104c55:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000104c58	kernel.asm	/^ffff800000104c58:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104c5b	kernel.asm	/^ffff800000104c5b:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c5d	kernel.asm	/^ffff800000104c5d:	89 45 e8             	mov    %eax,-0x18(%rbp)$/;"	l
ffff800000104c60	kernel.asm	/^ffff800000104c60:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104c63	kernel.asm	/^ffff800000104c63:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104c66	kernel.asm	/^ffff800000104c66:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c68	kernel.asm	/^ffff800000104c68:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104c6a	kernel.asm	/^ffff800000104c6a:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104c6d	kernel.asm	/^ffff800000104c6d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c6f	kernel.asm	/^ffff800000104c6f:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104c71	kernel.asm	/^ffff800000104c71:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c73	kernel.asm	/^ffff800000104c73:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104c76	kernel.asm	/^ffff800000104c76:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104c79	kernel.asm	/^ffff800000104c79:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c7b	kernel.asm	/^ffff800000104c7b:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000104c7e	kernel.asm	/^ffff800000104c7e:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104c81	kernel.asm	/^ffff800000104c81:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104c84	kernel.asm	/^ffff800000104c84:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c86	kernel.asm	/^ffff800000104c86:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104c88	kernel.asm	/^ffff800000104c88:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104c8b	kernel.asm	/^ffff800000104c8b:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c8d	kernel.asm	/^ffff800000104c8d:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104c8f	kernel.asm	/^ffff800000104c8f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104c91	kernel.asm	/^ffff800000104c91:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104c94	kernel.asm	/^ffff800000104c94:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104c97	kernel.asm	/^ffff800000104c97:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104c99	kernel.asm	/^ffff800000104c99:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000104c9c	kernel.asm	/^ffff800000104c9c:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104c9f	kernel.asm	/^ffff800000104c9f:	c1 e8 04             	shr    $0x4,%eax$/;"	l
ffff800000104ca2	kernel.asm	/^ffff800000104ca2:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104ca4	kernel.asm	/^ffff800000104ca4:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000104ca6	kernel.asm	/^ffff800000104ca6:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff800000104ca9	kernel.asm	/^ffff800000104ca9:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104cab	kernel.asm	/^ffff800000104cab:	01 c0                	add    %eax,%eax$/;"	l
ffff800000104cad	kernel.asm	/^ffff800000104cad:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104caf	kernel.asm	/^ffff800000104caf:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000104cb2	kernel.asm	/^ffff800000104cb2:	83 e0 0f             	and    $0xf,%eax$/;"	l
ffff800000104cb5	kernel.asm	/^ffff800000104cb5:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104cb7	kernel.asm	/^ffff800000104cb7:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000104cba	kernel.asm	/^ffff800000104cba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104cbe	kernel.asm	/^ffff800000104cbe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000104cc2	kernel.asm	/^ffff800000104cc2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000104cc5	kernel.asm	/^ffff800000104cc5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000104cc9	kernel.asm	/^ffff800000104cc9:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000104ccd	kernel.asm	/^ffff800000104ccd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000104cd1	kernel.asm	/^ffff800000104cd1:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000104cd5	kernel.asm	/^ffff800000104cd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104cd9	kernel.asm	/^ffff800000104cd9:	8b 40 14             	mov    0x14(%rax),%eax$/;"	l
ffff800000104cdc	kernel.asm	/^ffff800000104cdc:	8d 90 d0 07 00 00    	lea    0x7d0(%rax),%edx$/;"	l
ffff800000104ce2	kernel.asm	/^ffff800000104ce2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax$/;"	l
ffff800000104ce6	kernel.asm	/^ffff800000104ce6:	89 50 14             	mov    %edx,0x14(%rax)$/;"	l
ffff800000104ce9	kernel.asm	/^ffff800000104ce9:	90                   	nop$/;"	l
ffff800000104cea	kernel.asm	/^ffff800000104cea:	c9                   	leaveq $/;"	l
ffff800000104ceb	kernel.asm	/^ffff800000104ceb:	c3                   	retq   $/;"	l
ffff800000104cec	kernel.asm	/^ffff800000104cec <initlog>:$/;"	l
ffff800000104cec	kernel.asm	/^ffff800000104cec:	55                   	push   %rbp$/;"	l
ffff800000104ced	kernel.asm	/^ffff800000104ced:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104cf0	kernel.asm	/^ffff800000104cf0:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000104cf4	kernel.asm	/^ffff800000104cf4:	89 7d dc             	mov    %edi,-0x24(%rbp)$/;"	l
ffff800000104cf7	kernel.asm	/^ffff800000104cf7:	48 be d4 ce 10 00 00 	movabs $0xffff80000010ced4,%rsi$/;"	l
ffff800000104cfe	kernel.asm	/^ffff800000104cfe:	80 ff ff $/;"	l
ffff800000104d01	kernel.asm	/^ffff800000104d01:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff800000104d08	kernel.asm	/^ffff800000104d08:	80 ff ff $/;"	l
ffff800000104d0b	kernel.asm	/^ffff800000104d0b:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000104d12	kernel.asm	/^ffff800000104d12:	80 ff ff $/;"	l
ffff800000104d15	kernel.asm	/^ffff800000104d15:	ff d0                	callq  *%rax$/;"	l
ffff800000104d17	kernel.asm	/^ffff800000104d17:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff800000104d1b	kernel.asm	/^ffff800000104d1b:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000104d1e	kernel.asm	/^ffff800000104d1e:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000104d21	kernel.asm	/^ffff800000104d21:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104d23	kernel.asm	/^ffff800000104d23:	48 b8 b4 23 10 00 00 	movabs $0xffff8000001023b4,%rax$/;"	l
ffff800000104d2a	kernel.asm	/^ffff800000104d2a:	80 ff ff $/;"	l
ffff800000104d2d	kernel.asm	/^ffff800000104d2d:	ff d0                	callq  *%rax$/;"	l
ffff800000104d2f	kernel.asm	/^ffff800000104d2f:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000104d32	kernel.asm	/^ffff800000104d32:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104d34	kernel.asm	/^ffff800000104d34:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104d3b	kernel.asm	/^ffff800000104d3b:	80 ff ff $/;"	l
ffff800000104d3e	kernel.asm	/^ffff800000104d3e:	89 50 68             	mov    %edx,0x68(%rax)$/;"	l
ffff800000104d41	kernel.asm	/^ffff800000104d41:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000104d44	kernel.asm	/^ffff800000104d44:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104d46	kernel.asm	/^ffff800000104d46:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104d4d	kernel.asm	/^ffff800000104d4d:	80 ff ff $/;"	l
ffff800000104d50	kernel.asm	/^ffff800000104d50:	89 50 6c             	mov    %edx,0x6c(%rax)$/;"	l
ffff800000104d53	kernel.asm	/^ffff800000104d53:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104d5a	kernel.asm	/^ffff800000104d5a:	80 ff ff $/;"	l
ffff800000104d5d	kernel.asm	/^ffff800000104d5d:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000104d60	kernel.asm	/^ffff800000104d60:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff800000104d63	kernel.asm	/^ffff800000104d63:	48 b8 f6 4f 10 00 00 	movabs $0xffff800000104ff6,%rax$/;"	l
ffff800000104d6a	kernel.asm	/^ffff800000104d6a:	80 ff ff $/;"	l
ffff800000104d6d	kernel.asm	/^ffff800000104d6d:	ff d0                	callq  *%rax$/;"	l
ffff800000104d6f	kernel.asm	/^ffff800000104d6f:	90                   	nop$/;"	l
ffff800000104d70	kernel.asm	/^ffff800000104d70:	c9                   	leaveq $/;"	l
ffff800000104d71	kernel.asm	/^ffff800000104d71:	c3                   	retq   $/;"	l
ffff800000104d72	kernel.asm	/^ffff800000104d72 <install_trans>:$/;"	l
ffff800000104d72	kernel.asm	/^ffff800000104d72:	55                   	push   %rbp$/;"	l
ffff800000104d73	kernel.asm	/^ffff800000104d73:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104d76	kernel.asm	/^ffff800000104d76:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104d7a	kernel.asm	/^ffff800000104d7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104d81	kernel.asm	/^ffff800000104d81:	e9 dc 00 00 00       	jmpq   ffff800000104e62 <install_trans+0xf0>$/;"	l
ffff800000104d86	kernel.asm	/^ffff800000104d86:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104d8d	kernel.asm	/^ffff800000104d8d:	80 ff ff $/;"	l
ffff800000104d90	kernel.asm	/^ffff800000104d90:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000104d93	kernel.asm	/^ffff800000104d93:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000104d96	kernel.asm	/^ffff800000104d96:	01 d0                	add    %edx,%eax$/;"	l
ffff800000104d98	kernel.asm	/^ffff800000104d98:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000104d9b	kernel.asm	/^ffff800000104d9b:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104d9d	kernel.asm	/^ffff800000104d9d:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104da4	kernel.asm	/^ffff800000104da4:	80 ff ff $/;"	l
ffff800000104da7	kernel.asm	/^ffff800000104da7:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104daa	kernel.asm	/^ffff800000104daa:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104dac	kernel.asm	/^ffff800000104dac:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104dae	kernel.asm	/^ffff800000104dae:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104db5	kernel.asm	/^ffff800000104db5:	80 ff ff $/;"	l
ffff800000104db8	kernel.asm	/^ffff800000104db8:	ff d0                	callq  *%rax$/;"	l
ffff800000104dba	kernel.asm	/^ffff800000104dba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104dbe	kernel.asm	/^ffff800000104dbe:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104dc5	kernel.asm	/^ffff800000104dc5:	80 ff ff $/;"	l
ffff800000104dc8	kernel.asm	/^ffff800000104dc8:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104dcb	kernel.asm	/^ffff800000104dcb:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104dce	kernel.asm	/^ffff800000104dce:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104dd2	kernel.asm	/^ffff800000104dd2:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000104dd6	kernel.asm	/^ffff800000104dd6:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104dd8	kernel.asm	/^ffff800000104dd8:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104ddf	kernel.asm	/^ffff800000104ddf:	80 ff ff $/;"	l
ffff800000104de2	kernel.asm	/^ffff800000104de2:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104de5	kernel.asm	/^ffff800000104de5:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104de7	kernel.asm	/^ffff800000104de7:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104de9	kernel.asm	/^ffff800000104de9:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104df0	kernel.asm	/^ffff800000104df0:	80 ff ff $/;"	l
ffff800000104df3	kernel.asm	/^ffff800000104df3:	ff d0                	callq  *%rax$/;"	l
ffff800000104df5	kernel.asm	/^ffff800000104df5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104df9	kernel.asm	/^ffff800000104df9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104dfd	kernel.asm	/^ffff800000104dfd:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff800000104e04	kernel.asm	/^ffff800000104e04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104e08	kernel.asm	/^ffff800000104e08:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104e0e	kernel.asm	/^ffff800000104e0e:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff800000104e13	kernel.asm	/^ffff800000104e13:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000104e16	kernel.asm	/^ffff800000104e16:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e19	kernel.asm	/^ffff800000104e19:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000104e20	kernel.asm	/^ffff800000104e20:	80 ff ff $/;"	l
ffff800000104e23	kernel.asm	/^ffff800000104e23:	ff d0                	callq  *%rax$/;"	l
ffff800000104e25	kernel.asm	/^ffff800000104e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104e29	kernel.asm	/^ffff800000104e29:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e2c	kernel.asm	/^ffff800000104e2c:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104e33	kernel.asm	/^ffff800000104e33:	80 ff ff $/;"	l
ffff800000104e36	kernel.asm	/^ffff800000104e36:	ff d0                	callq  *%rax$/;"	l
ffff800000104e38	kernel.asm	/^ffff800000104e38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104e3c	kernel.asm	/^ffff800000104e3c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e3f	kernel.asm	/^ffff800000104e3f:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104e46	kernel.asm	/^ffff800000104e46:	80 ff ff $/;"	l
ffff800000104e49	kernel.asm	/^ffff800000104e49:	ff d0                	callq  *%rax$/;"	l
ffff800000104e4b	kernel.asm	/^ffff800000104e4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104e4f	kernel.asm	/^ffff800000104e4f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104e52	kernel.asm	/^ffff800000104e52:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104e59	kernel.asm	/^ffff800000104e59:	80 ff ff $/;"	l
ffff800000104e5c	kernel.asm	/^ffff800000104e5c:	ff d0                	callq  *%rax$/;"	l
ffff800000104e5e	kernel.asm	/^ffff800000104e5e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104e62	kernel.asm	/^ffff800000104e62:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104e69	kernel.asm	/^ffff800000104e69:	80 ff ff $/;"	l
ffff800000104e6c	kernel.asm	/^ffff800000104e6c:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104e6f	kernel.asm	/^ffff800000104e6f:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104e72	kernel.asm	/^ffff800000104e72:	0f 8f 0e ff ff ff    	jg     ffff800000104d86 <install_trans+0x14>$/;"	l
ffff800000104e78	kernel.asm	/^ffff800000104e78:	90                   	nop$/;"	l
ffff800000104e79	kernel.asm	/^ffff800000104e79:	c9                   	leaveq $/;"	l
ffff800000104e7a	kernel.asm	/^ffff800000104e7a:	c3                   	retq   $/;"	l
ffff800000104e7b	kernel.asm	/^ffff800000104e7b <read_head>:$/;"	l
ffff800000104e7b	kernel.asm	/^ffff800000104e7b:	55                   	push   %rbp$/;"	l
ffff800000104e7c	kernel.asm	/^ffff800000104e7c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104e7f	kernel.asm	/^ffff800000104e7f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104e83	kernel.asm	/^ffff800000104e83:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104e8a	kernel.asm	/^ffff800000104e8a:	80 ff ff $/;"	l
ffff800000104e8d	kernel.asm	/^ffff800000104e8d:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104e90	kernel.asm	/^ffff800000104e90:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104e92	kernel.asm	/^ffff800000104e92:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104e99	kernel.asm	/^ffff800000104e99:	80 ff ff $/;"	l
ffff800000104e9c	kernel.asm	/^ffff800000104e9c:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104e9f	kernel.asm	/^ffff800000104e9f:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104ea1	kernel.asm	/^ffff800000104ea1:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104ea3	kernel.asm	/^ffff800000104ea3:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104eaa	kernel.asm	/^ffff800000104eaa:	80 ff ff $/;"	l
ffff800000104ead	kernel.asm	/^ffff800000104ead:	ff d0                	callq  *%rax$/;"	l
ffff800000104eaf	kernel.asm	/^ffff800000104eaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104eb3	kernel.asm	/^ffff800000104eb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104eb7	kernel.asm	/^ffff800000104eb7:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104ebd	kernel.asm	/^ffff800000104ebd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104ec1	kernel.asm	/^ffff800000104ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104ec5	kernel.asm	/^ffff800000104ec5:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000104ec7	kernel.asm	/^ffff800000104ec7:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104ece	kernel.asm	/^ffff800000104ece:	80 ff ff $/;"	l
ffff800000104ed1	kernel.asm	/^ffff800000104ed1:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff800000104ed4	kernel.asm	/^ffff800000104ed4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104edb	kernel.asm	/^ffff800000104edb:	eb 2a                	jmp    ffff800000104f07 <read_head+0x8c>$/;"	l
ffff800000104edd	kernel.asm	/^ffff800000104edd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104ee1	kernel.asm	/^ffff800000104ee1:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104ee4	kernel.asm	/^ffff800000104ee4:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104ee7	kernel.asm	/^ffff800000104ee7:	8b 54 90 04          	mov    0x4(%rax,%rdx,4),%edx$/;"	l
ffff800000104eeb	kernel.asm	/^ffff800000104eeb:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104ef2	kernel.asm	/^ffff800000104ef2:	80 ff ff $/;"	l
ffff800000104ef5	kernel.asm	/^ffff800000104ef5:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000104ef8	kernel.asm	/^ffff800000104ef8:	48 63 c9             	movslq %ecx,%rcx$/;"	l
ffff800000104efb	kernel.asm	/^ffff800000104efb:	48 83 c1 1c          	add    $0x1c,%rcx$/;"	l
ffff800000104eff	kernel.asm	/^ffff800000104eff:	89 54 88 10          	mov    %edx,0x10(%rax,%rcx,4)$/;"	l
ffff800000104f03	kernel.asm	/^ffff800000104f03:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104f07	kernel.asm	/^ffff800000104f07:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104f0e	kernel.asm	/^ffff800000104f0e:	80 ff ff $/;"	l
ffff800000104f11	kernel.asm	/^ffff800000104f11:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104f14	kernel.asm	/^ffff800000104f14:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104f17	kernel.asm	/^ffff800000104f17:	7f c4                	jg     ffff800000104edd <read_head+0x62>$/;"	l
ffff800000104f19	kernel.asm	/^ffff800000104f19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104f1d	kernel.asm	/^ffff800000104f1d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104f20	kernel.asm	/^ffff800000104f20:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104f27	kernel.asm	/^ffff800000104f27:	80 ff ff $/;"	l
ffff800000104f2a	kernel.asm	/^ffff800000104f2a:	ff d0                	callq  *%rax$/;"	l
ffff800000104f2c	kernel.asm	/^ffff800000104f2c:	90                   	nop$/;"	l
ffff800000104f2d	kernel.asm	/^ffff800000104f2d:	c9                   	leaveq $/;"	l
ffff800000104f2e	kernel.asm	/^ffff800000104f2e:	c3                   	retq   $/;"	l
ffff800000104f2f	kernel.asm	/^ffff800000104f2f <write_head>:$/;"	l
ffff800000104f2f	kernel.asm	/^ffff800000104f2f:	55                   	push   %rbp$/;"	l
ffff800000104f30	kernel.asm	/^ffff800000104f30:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104f33	kernel.asm	/^ffff800000104f33:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000104f37	kernel.asm	/^ffff800000104f37:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104f3e	kernel.asm	/^ffff800000104f3e:	80 ff ff $/;"	l
ffff800000104f41	kernel.asm	/^ffff800000104f41:	8b 40 68             	mov    0x68(%rax),%eax$/;"	l
ffff800000104f44	kernel.asm	/^ffff800000104f44:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000104f46	kernel.asm	/^ffff800000104f46:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104f4d	kernel.asm	/^ffff800000104f4d:	80 ff ff $/;"	l
ffff800000104f50	kernel.asm	/^ffff800000104f50:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff800000104f53	kernel.asm	/^ffff800000104f53:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000104f55	kernel.asm	/^ffff800000104f55:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000104f57	kernel.asm	/^ffff800000104f57:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000104f5e	kernel.asm	/^ffff800000104f5e:	80 ff ff $/;"	l
ffff800000104f61	kernel.asm	/^ffff800000104f61:	ff d0                	callq  *%rax$/;"	l
ffff800000104f63	kernel.asm	/^ffff800000104f63:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000104f67	kernel.asm	/^ffff800000104f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104f6b	kernel.asm	/^ffff800000104f6b:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff800000104f71	kernel.asm	/^ffff800000104f71:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000104f75	kernel.asm	/^ffff800000104f75:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104f7c	kernel.asm	/^ffff800000104f7c:	80 ff ff $/;"	l
ffff800000104f7f	kernel.asm	/^ffff800000104f7f:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff800000104f82	kernel.asm	/^ffff800000104f82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104f86	kernel.asm	/^ffff800000104f86:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000104f88	kernel.asm	/^ffff800000104f88:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000104f8f	kernel.asm	/^ffff800000104f8f:	eb 2a                	jmp    ffff800000104fbb <write_head+0x8c>$/;"	l
ffff800000104f91	kernel.asm	/^ffff800000104f91:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104f98	kernel.asm	/^ffff800000104f98:	80 ff ff $/;"	l
ffff800000104f9b	kernel.asm	/^ffff800000104f9b:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104f9e	kernel.asm	/^ffff800000104f9e:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104fa1	kernel.asm	/^ffff800000104fa1:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000104fa5	kernel.asm	/^ffff800000104fa5:	8b 4c 90 10          	mov    0x10(%rax,%rdx,4),%ecx$/;"	l
ffff800000104fa9	kernel.asm	/^ffff800000104fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000104fad	kernel.asm	/^ffff800000104fad:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000104fb0	kernel.asm	/^ffff800000104fb0:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000104fb3	kernel.asm	/^ffff800000104fb3:	89 4c 90 04          	mov    %ecx,0x4(%rax,%rdx,4)$/;"	l
ffff800000104fb7	kernel.asm	/^ffff800000104fb7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000104fbb	kernel.asm	/^ffff800000104fbb:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000104fc2	kernel.asm	/^ffff800000104fc2:	80 ff ff $/;"	l
ffff800000104fc5	kernel.asm	/^ffff800000104fc5:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000104fc8	kernel.asm	/^ffff800000104fc8:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000104fcb	kernel.asm	/^ffff800000104fcb:	7f c4                	jg     ffff800000104f91 <write_head+0x62>$/;"	l
ffff800000104fcd	kernel.asm	/^ffff800000104fcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104fd1	kernel.asm	/^ffff800000104fd1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104fd4	kernel.asm	/^ffff800000104fd4:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff800000104fdb	kernel.asm	/^ffff800000104fdb:	80 ff ff $/;"	l
ffff800000104fde	kernel.asm	/^ffff800000104fde:	ff d0                	callq  *%rax$/;"	l
ffff800000104fe0	kernel.asm	/^ffff800000104fe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000104fe4	kernel.asm	/^ffff800000104fe4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000104fe7	kernel.asm	/^ffff800000104fe7:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000104fee	kernel.asm	/^ffff800000104fee:	80 ff ff $/;"	l
ffff800000104ff1	kernel.asm	/^ffff800000104ff1:	ff d0                	callq  *%rax$/;"	l
ffff800000104ff3	kernel.asm	/^ffff800000104ff3:	90                   	nop$/;"	l
ffff800000104ff4	kernel.asm	/^ffff800000104ff4:	c9                   	leaveq $/;"	l
ffff800000104ff5	kernel.asm	/^ffff800000104ff5:	c3                   	retq   $/;"	l
ffff800000104ff6	kernel.asm	/^ffff800000104ff6 <recover_from_log>:$/;"	l
ffff800000104ff6	kernel.asm	/^ffff800000104ff6:	55                   	push   %rbp$/;"	l
ffff800000104ff7	kernel.asm	/^ffff800000104ff7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000104ffa	kernel.asm	/^ffff800000104ffa:	48 b8 7b 4e 10 00 00 	movabs $0xffff800000104e7b,%rax$/;"	l
ffff800000105001	kernel.asm	/^ffff800000105001:	80 ff ff $/;"	l
ffff800000105004	kernel.asm	/^ffff800000105004:	ff d0                	callq  *%rax$/;"	l
ffff800000105006	kernel.asm	/^ffff800000105006:	48 b8 72 4d 10 00 00 	movabs $0xffff800000104d72,%rax$/;"	l
ffff80000010500d	kernel.asm	/^ffff80000010500d:	80 ff ff $/;"	l
ffff800000105010	kernel.asm	/^ffff800000105010:	ff d0                	callq  *%rax$/;"	l
ffff800000105012	kernel.asm	/^ffff800000105012:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105019	kernel.asm	/^ffff800000105019:	80 ff ff $/;"	l
ffff80000010501c	kernel.asm	/^ffff80000010501c:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff800000105023	kernel.asm	/^ffff800000105023:	48 b8 2f 4f 10 00 00 	movabs $0xffff800000104f2f,%rax$/;"	l
ffff80000010502a	kernel.asm	/^ffff80000010502a:	80 ff ff $/;"	l
ffff80000010502d	kernel.asm	/^ffff80000010502d:	ff d0                	callq  *%rax$/;"	l
ffff80000010502f	kernel.asm	/^ffff80000010502f:	90                   	nop$/;"	l
ffff800000105030	kernel.asm	/^ffff800000105030:	5d                   	pop    %rbp$/;"	l
ffff800000105031	kernel.asm	/^ffff800000105031:	c3                   	retq   $/;"	l
ffff800000105032	kernel.asm	/^ffff800000105032 <begin_op>:$/;"	l
ffff800000105032	kernel.asm	/^ffff800000105032:	55                   	push   %rbp$/;"	l
ffff800000105033	kernel.asm	/^ffff800000105033:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105036	kernel.asm	/^ffff800000105036:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff80000010503d	kernel.asm	/^ffff80000010503d:	80 ff ff $/;"	l
ffff800000105040	kernel.asm	/^ffff800000105040:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000105047	kernel.asm	/^ffff800000105047:	80 ff ff $/;"	l
ffff80000010504a	kernel.asm	/^ffff80000010504a:	ff d0                	callq  *%rax$/;"	l
ffff80000010504c	kernel.asm	/^ffff80000010504c:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105053	kernel.asm	/^ffff800000105053:	80 ff ff $/;"	l
ffff800000105056	kernel.asm	/^ffff800000105056:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000105059	kernel.asm	/^ffff800000105059:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010505b	kernel.asm	/^ffff80000010505b:	74 22                	je     ffff80000010507f <begin_op+0x4d>$/;"	l
ffff80000010505d	kernel.asm	/^ffff80000010505d:	48 be 80 a2 11 00 00 	movabs $0xffff80000011a280,%rsi$/;"	l
ffff800000105064	kernel.asm	/^ffff800000105064:	80 ff ff $/;"	l
ffff800000105067	kernel.asm	/^ffff800000105067:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff80000010506e	kernel.asm	/^ffff80000010506e:	80 ff ff $/;"	l
ffff800000105071	kernel.asm	/^ffff800000105071:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000105078	kernel.asm	/^ffff800000105078:	80 ff ff $/;"	l
ffff80000010507b	kernel.asm	/^ffff80000010507b:	ff d0                	callq  *%rax$/;"	l
ffff80000010507d	kernel.asm	/^ffff80000010507d:	eb cd                	jmp    ffff80000010504c <begin_op+0x1a>$/;"	l
ffff80000010507f	kernel.asm	/^ffff80000010507f:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105086	kernel.asm	/^ffff800000105086:	80 ff ff $/;"	l
ffff800000105089	kernel.asm	/^ffff800000105089:	8b 48 7c             	mov    0x7c(%rax),%ecx$/;"	l
ffff80000010508c	kernel.asm	/^ffff80000010508c:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105093	kernel.asm	/^ffff800000105093:	80 ff ff $/;"	l
ffff800000105096	kernel.asm	/^ffff800000105096:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff800000105099	kernel.asm	/^ffff800000105099:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff80000010509c	kernel.asm	/^ffff80000010509c:	89 d0                	mov    %edx,%eax$/;"	l
ffff80000010509e	kernel.asm	/^ffff80000010509e:	c1 e0 02             	shl    $0x2,%eax$/;"	l
ffff8000001050a1	kernel.asm	/^ffff8000001050a1:	01 d0                	add    %edx,%eax$/;"	l
ffff8000001050a3	kernel.asm	/^ffff8000001050a3:	01 c0                	add    %eax,%eax$/;"	l
ffff8000001050a5	kernel.asm	/^ffff8000001050a5:	01 c8                	add    %ecx,%eax$/;"	l
ffff8000001050a7	kernel.asm	/^ffff8000001050a7:	83 f8 1e             	cmp    $0x1e,%eax$/;"	l
ffff8000001050aa	kernel.asm	/^ffff8000001050aa:	7e 25                	jle    ffff8000001050d1 <begin_op+0x9f>$/;"	l
ffff8000001050ac	kernel.asm	/^ffff8000001050ac:	48 be 80 a2 11 00 00 	movabs $0xffff80000011a280,%rsi$/;"	l
ffff8000001050b3	kernel.asm	/^ffff8000001050b3:	80 ff ff $/;"	l
ffff8000001050b6	kernel.asm	/^ffff8000001050b6:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001050bd	kernel.asm	/^ffff8000001050bd:	80 ff ff $/;"	l
ffff8000001050c0	kernel.asm	/^ffff8000001050c0:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff8000001050c7	kernel.asm	/^ffff8000001050c7:	80 ff ff $/;"	l
ffff8000001050ca	kernel.asm	/^ffff8000001050ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001050cc	kernel.asm	/^ffff8000001050cc:	e9 7b ff ff ff       	jmpq   ffff80000010504c <begin_op+0x1a>$/;"	l
ffff8000001050d1	kernel.asm	/^ffff8000001050d1:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001050d8	kernel.asm	/^ffff8000001050d8:	80 ff ff $/;"	l
ffff8000001050db	kernel.asm	/^ffff8000001050db:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff8000001050de	kernel.asm	/^ffff8000001050de:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001050e1	kernel.asm	/^ffff8000001050e1:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001050e8	kernel.asm	/^ffff8000001050e8:	80 ff ff $/;"	l
ffff8000001050eb	kernel.asm	/^ffff8000001050eb:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff8000001050ee	kernel.asm	/^ffff8000001050ee:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001050f5	kernel.asm	/^ffff8000001050f5:	80 ff ff $/;"	l
ffff8000001050f8	kernel.asm	/^ffff8000001050f8:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001050ff	kernel.asm	/^ffff8000001050ff:	80 ff ff $/;"	l
ffff800000105102	kernel.asm	/^ffff800000105102:	ff d0                	callq  *%rax$/;"	l
ffff800000105104	kernel.asm	/^ffff800000105104:	90                   	nop$/;"	l
ffff800000105105	kernel.asm	/^ffff800000105105:	90                   	nop$/;"	l
ffff800000105106	kernel.asm	/^ffff800000105106:	5d                   	pop    %rbp$/;"	l
ffff800000105107	kernel.asm	/^ffff800000105107:	c3                   	retq   $/;"	l
ffff800000105108	kernel.asm	/^ffff800000105108 <end_op>:$/;"	l
ffff800000105108	kernel.asm	/^ffff800000105108:	55                   	push   %rbp$/;"	l
ffff800000105109	kernel.asm	/^ffff800000105109:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010510c	kernel.asm	/^ffff80000010510c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000105110	kernel.asm	/^ffff800000105110:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105117	kernel.asm	/^ffff800000105117:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff80000010511e	kernel.asm	/^ffff80000010511e:	80 ff ff $/;"	l
ffff800000105121	kernel.asm	/^ffff800000105121:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000105128	kernel.asm	/^ffff800000105128:	80 ff ff $/;"	l
ffff80000010512b	kernel.asm	/^ffff80000010512b:	ff d0                	callq  *%rax$/;"	l
ffff80000010512d	kernel.asm	/^ffff80000010512d:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105134	kernel.asm	/^ffff800000105134:	80 ff ff $/;"	l
ffff800000105137	kernel.asm	/^ffff800000105137:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff80000010513a	kernel.asm	/^ffff80000010513a:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff80000010513d	kernel.asm	/^ffff80000010513d:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105144	kernel.asm	/^ffff800000105144:	80 ff ff $/;"	l
ffff800000105147	kernel.asm	/^ffff800000105147:	89 50 70             	mov    %edx,0x70(%rax)$/;"	l
ffff80000010514a	kernel.asm	/^ffff80000010514a:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105151	kernel.asm	/^ffff800000105151:	80 ff ff $/;"	l
ffff800000105154	kernel.asm	/^ffff800000105154:	8b 40 74             	mov    0x74(%rax),%eax$/;"	l
ffff800000105157	kernel.asm	/^ffff800000105157:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105159	kernel.asm	/^ffff800000105159:	74 16                	je     ffff800000105171 <end_op+0x69>$/;"	l
ffff80000010515b	kernel.asm	/^ffff80000010515b:	48 bf d8 ce 10 00 00 	movabs $0xffff80000010ced8,%rdi$/;"	l
ffff800000105162	kernel.asm	/^ffff800000105162:	80 ff ff $/;"	l
ffff800000105165	kernel.asm	/^ffff800000105165:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010516c	kernel.asm	/^ffff80000010516c:	80 ff ff $/;"	l
ffff80000010516f	kernel.asm	/^ffff80000010516f:	ff d0                	callq  *%rax$/;"	l
ffff800000105171	kernel.asm	/^ffff800000105171:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105178	kernel.asm	/^ffff800000105178:	80 ff ff $/;"	l
ffff80000010517b	kernel.asm	/^ffff80000010517b:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff80000010517e	kernel.asm	/^ffff80000010517e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105180	kernel.asm	/^ffff800000105180:	75 1a                	jne    ffff80000010519c <end_op+0x94>$/;"	l
ffff800000105182	kernel.asm	/^ffff800000105182:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105189	kernel.asm	/^ffff800000105189:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105190	kernel.asm	/^ffff800000105190:	80 ff ff $/;"	l
ffff800000105193	kernel.asm	/^ffff800000105193:	c7 40 74 01 00 00 00 	movl   $0x1,0x74(%rax)$/;"	l
ffff80000010519a	kernel.asm	/^ffff80000010519a:	eb 16                	jmp    ffff8000001051b2 <end_op+0xaa>$/;"	l
ffff80000010519c	kernel.asm	/^ffff80000010519c:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001051a3	kernel.asm	/^ffff8000001051a3:	80 ff ff $/;"	l
ffff8000001051a6	kernel.asm	/^ffff8000001051a6:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff8000001051ad	kernel.asm	/^ffff8000001051ad:	80 ff ff $/;"	l
ffff8000001051b0	kernel.asm	/^ffff8000001051b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001051b2	kernel.asm	/^ffff8000001051b2:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001051b9	kernel.asm	/^ffff8000001051b9:	80 ff ff $/;"	l
ffff8000001051bc	kernel.asm	/^ffff8000001051bc:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001051c3	kernel.asm	/^ffff8000001051c3:	80 ff ff $/;"	l
ffff8000001051c6	kernel.asm	/^ffff8000001051c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001051c8	kernel.asm	/^ffff8000001051c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001051cc	kernel.asm	/^ffff8000001051cc:	74 64                	je     ffff800000105232 <end_op+0x12a>$/;"	l
ffff8000001051ce	kernel.asm	/^ffff8000001051ce:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001051d3	kernel.asm	/^ffff8000001051d3:	48 ba 3e 53 10 00 00 	movabs $0xffff80000010533e,%rdx$/;"	l
ffff8000001051da	kernel.asm	/^ffff8000001051da:	80 ff ff $/;"	l
ffff8000001051dd	kernel.asm	/^ffff8000001051dd:	ff d2                	callq  *%rdx$/;"	l
ffff8000001051df	kernel.asm	/^ffff8000001051df:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001051e6	kernel.asm	/^ffff8000001051e6:	80 ff ff $/;"	l
ffff8000001051e9	kernel.asm	/^ffff8000001051e9:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001051f0	kernel.asm	/^ffff8000001051f0:	80 ff ff $/;"	l
ffff8000001051f3	kernel.asm	/^ffff8000001051f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001051f5	kernel.asm	/^ffff8000001051f5:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001051fc	kernel.asm	/^ffff8000001051fc:	80 ff ff $/;"	l
ffff8000001051ff	kernel.asm	/^ffff8000001051ff:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%rax)$/;"	l
ffff800000105206	kernel.asm	/^ffff800000105206:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff80000010520d	kernel.asm	/^ffff80000010520d:	80 ff ff $/;"	l
ffff800000105210	kernel.asm	/^ffff800000105210:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff800000105217	kernel.asm	/^ffff800000105217:	80 ff ff $/;"	l
ffff80000010521a	kernel.asm	/^ffff80000010521a:	ff d0                	callq  *%rax$/;"	l
ffff80000010521c	kernel.asm	/^ffff80000010521c:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff800000105223	kernel.asm	/^ffff800000105223:	80 ff ff $/;"	l
ffff800000105226	kernel.asm	/^ffff800000105226:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010522d	kernel.asm	/^ffff80000010522d:	80 ff ff $/;"	l
ffff800000105230	kernel.asm	/^ffff800000105230:	ff d0                	callq  *%rax$/;"	l
ffff800000105232	kernel.asm	/^ffff800000105232:	90                   	nop$/;"	l
ffff800000105233	kernel.asm	/^ffff800000105233:	c9                   	leaveq $/;"	l
ffff800000105234	kernel.asm	/^ffff800000105234:	c3                   	retq   $/;"	l
ffff800000105235	kernel.asm	/^ffff800000105235 <write_log>:$/;"	l
ffff800000105235	kernel.asm	/^ffff800000105235:	55                   	push   %rbp$/;"	l
ffff800000105236	kernel.asm	/^ffff800000105236:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105239	kernel.asm	/^ffff800000105239:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010523d	kernel.asm	/^ffff80000010523d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105244	kernel.asm	/^ffff800000105244:	e9 dc 00 00 00       	jmpq   ffff800000105325 <write_log+0xf0>$/;"	l
ffff800000105249	kernel.asm	/^ffff800000105249:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105250	kernel.asm	/^ffff800000105250:	80 ff ff $/;"	l
ffff800000105253	kernel.asm	/^ffff800000105253:	8b 50 68             	mov    0x68(%rax),%edx$/;"	l
ffff800000105256	kernel.asm	/^ffff800000105256:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000105259	kernel.asm	/^ffff800000105259:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010525b	kernel.asm	/^ffff80000010525b:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010525e	kernel.asm	/^ffff80000010525e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105260	kernel.asm	/^ffff800000105260:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105267	kernel.asm	/^ffff800000105267:	80 ff ff $/;"	l
ffff80000010526a	kernel.asm	/^ffff80000010526a:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff80000010526d	kernel.asm	/^ffff80000010526d:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010526f	kernel.asm	/^ffff80000010526f:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000105271	kernel.asm	/^ffff800000105271:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff800000105278	kernel.asm	/^ffff800000105278:	80 ff ff $/;"	l
ffff80000010527b	kernel.asm	/^ffff80000010527b:	ff d0                	callq  *%rax$/;"	l
ffff80000010527d	kernel.asm	/^ffff80000010527d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000105281	kernel.asm	/^ffff800000105281:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105288	kernel.asm	/^ffff800000105288:	80 ff ff $/;"	l
ffff80000010528b	kernel.asm	/^ffff80000010528b:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010528e	kernel.asm	/^ffff80000010528e:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105291	kernel.asm	/^ffff800000105291:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000105295	kernel.asm	/^ffff800000105295:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff800000105299	kernel.asm	/^ffff800000105299:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010529b	kernel.asm	/^ffff80000010529b:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001052a2	kernel.asm	/^ffff8000001052a2:	80 ff ff $/;"	l
ffff8000001052a5	kernel.asm	/^ffff8000001052a5:	8b 40 78             	mov    0x78(%rax),%eax$/;"	l
ffff8000001052a8	kernel.asm	/^ffff8000001052a8:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001052aa	kernel.asm	/^ffff8000001052aa:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001052ac	kernel.asm	/^ffff8000001052ac:	48 b8 f8 03 10 00 00 	movabs $0xffff8000001003f8,%rax$/;"	l
ffff8000001052b3	kernel.asm	/^ffff8000001052b3:	80 ff ff $/;"	l
ffff8000001052b6	kernel.asm	/^ffff8000001052b6:	ff d0                	callq  *%rax$/;"	l
ffff8000001052b8	kernel.asm	/^ffff8000001052b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001052bc	kernel.asm	/^ffff8000001052bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001052c0	kernel.asm	/^ffff8000001052c0:	48 8d 88 b0 00 00 00 	lea    0xb0(%rax),%rcx$/;"	l
ffff8000001052c7	kernel.asm	/^ffff8000001052c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001052cb	kernel.asm	/^ffff8000001052cb:	48 05 b0 00 00 00    	add    $0xb0,%rax$/;"	l
ffff8000001052d1	kernel.asm	/^ffff8000001052d1:	ba 00 02 00 00       	mov    $0x200,%edx$/;"	l
ffff8000001052d6	kernel.asm	/^ffff8000001052d6:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001052d9	kernel.asm	/^ffff8000001052d9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001052dc	kernel.asm	/^ffff8000001052dc:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff8000001052e3	kernel.asm	/^ffff8000001052e3:	80 ff ff $/;"	l
ffff8000001052e6	kernel.asm	/^ffff8000001052e6:	ff d0                	callq  *%rax$/;"	l
ffff8000001052e8	kernel.asm	/^ffff8000001052e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001052ec	kernel.asm	/^ffff8000001052ec:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001052ef	kernel.asm	/^ffff8000001052ef:	48 b8 46 04 10 00 00 	movabs $0xffff800000100446,%rax$/;"	l
ffff8000001052f6	kernel.asm	/^ffff8000001052f6:	80 ff ff $/;"	l
ffff8000001052f9	kernel.asm	/^ffff8000001052f9:	ff d0                	callq  *%rax$/;"	l
ffff8000001052fb	kernel.asm	/^ffff8000001052fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001052ff	kernel.asm	/^ffff8000001052ff:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105302	kernel.asm	/^ffff800000105302:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff800000105309	kernel.asm	/^ffff800000105309:	80 ff ff $/;"	l
ffff80000010530c	kernel.asm	/^ffff80000010530c:	ff d0                	callq  *%rax$/;"	l
ffff80000010530e	kernel.asm	/^ffff80000010530e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105312	kernel.asm	/^ffff800000105312:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105315	kernel.asm	/^ffff800000105315:	48 b8 aa 04 10 00 00 	movabs $0xffff8000001004aa,%rax$/;"	l
ffff80000010531c	kernel.asm	/^ffff80000010531c:	80 ff ff $/;"	l
ffff80000010531f	kernel.asm	/^ffff80000010531f:	ff d0                	callq  *%rax$/;"	l
ffff800000105321	kernel.asm	/^ffff800000105321:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000105325	kernel.asm	/^ffff800000105325:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff80000010532c	kernel.asm	/^ffff80000010532c:	80 ff ff $/;"	l
ffff80000010532f	kernel.asm	/^ffff80000010532f:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000105332	kernel.asm	/^ffff800000105332:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff800000105335	kernel.asm	/^ffff800000105335:	0f 8f 0e ff ff ff    	jg     ffff800000105249 <write_log+0x14>$/;"	l
ffff80000010533b	kernel.asm	/^ffff80000010533b:	90                   	nop$/;"	l
ffff80000010533c	kernel.asm	/^ffff80000010533c:	c9                   	leaveq $/;"	l
ffff80000010533d	kernel.asm	/^ffff80000010533d:	c3                   	retq   $/;"	l
ffff80000010533e	kernel.asm	/^ffff80000010533e <commit>:$/;"	l
ffff80000010533e	kernel.asm	/^ffff80000010533e:	55                   	push   %rbp$/;"	l
ffff80000010533f	kernel.asm	/^ffff80000010533f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105342	kernel.asm	/^ffff800000105342:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105349	kernel.asm	/^ffff800000105349:	80 ff ff $/;"	l
ffff80000010534c	kernel.asm	/^ffff80000010534c:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010534f	kernel.asm	/^ffff80000010534f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105351	kernel.asm	/^ffff800000105351:	7e 41                	jle    ffff800000105394 <commit+0x56>$/;"	l
ffff800000105353	kernel.asm	/^ffff800000105353:	48 b8 35 52 10 00 00 	movabs $0xffff800000105235,%rax$/;"	l
ffff80000010535a	kernel.asm	/^ffff80000010535a:	80 ff ff $/;"	l
ffff80000010535d	kernel.asm	/^ffff80000010535d:	ff d0                	callq  *%rax$/;"	l
ffff80000010535f	kernel.asm	/^ffff80000010535f:	48 b8 2f 4f 10 00 00 	movabs $0xffff800000104f2f,%rax$/;"	l
ffff800000105366	kernel.asm	/^ffff800000105366:	80 ff ff $/;"	l
ffff800000105369	kernel.asm	/^ffff800000105369:	ff d0                	callq  *%rax$/;"	l
ffff80000010536b	kernel.asm	/^ffff80000010536b:	48 b8 72 4d 10 00 00 	movabs $0xffff800000104d72,%rax$/;"	l
ffff800000105372	kernel.asm	/^ffff800000105372:	80 ff ff $/;"	l
ffff800000105375	kernel.asm	/^ffff800000105375:	ff d0                	callq  *%rax$/;"	l
ffff800000105377	kernel.asm	/^ffff800000105377:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff80000010537e	kernel.asm	/^ffff80000010537e:	80 ff ff $/;"	l
ffff800000105381	kernel.asm	/^ffff800000105381:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)$/;"	l
ffff800000105388	kernel.asm	/^ffff800000105388:	48 b8 2f 4f 10 00 00 	movabs $0xffff800000104f2f,%rax$/;"	l
ffff80000010538f	kernel.asm	/^ffff80000010538f:	80 ff ff $/;"	l
ffff800000105392	kernel.asm	/^ffff800000105392:	ff d0                	callq  *%rax$/;"	l
ffff800000105394	kernel.asm	/^ffff800000105394:	90                   	nop$/;"	l
ffff800000105395	kernel.asm	/^ffff800000105395:	5d                   	pop    %rbp$/;"	l
ffff800000105396	kernel.asm	/^ffff800000105396:	c3                   	retq   $/;"	l
ffff800000105397	kernel.asm	/^ffff800000105397 <log_write>:$/;"	l
ffff800000105397	kernel.asm	/^ffff800000105397:	55                   	push   %rbp$/;"	l
ffff800000105398	kernel.asm	/^ffff800000105398:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010539b	kernel.asm	/^ffff80000010539b:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010539f	kernel.asm	/^ffff80000010539f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001053a3	kernel.asm	/^ffff8000001053a3:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001053aa	kernel.asm	/^ffff8000001053aa:	80 ff ff $/;"	l
ffff8000001053ad	kernel.asm	/^ffff8000001053ad:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001053b0	kernel.asm	/^ffff8000001053b0:	83 f8 1d             	cmp    $0x1d,%eax$/;"	l
ffff8000001053b3	kernel.asm	/^ffff8000001053b3:	7f 21                	jg     ffff8000001053d6 <log_write+0x3f>$/;"	l
ffff8000001053b5	kernel.asm	/^ffff8000001053b5:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001053bc	kernel.asm	/^ffff8000001053bc:	80 ff ff $/;"	l
ffff8000001053bf	kernel.asm	/^ffff8000001053bf:	8b 50 7c             	mov    0x7c(%rax),%edx$/;"	l
ffff8000001053c2	kernel.asm	/^ffff8000001053c2:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001053c9	kernel.asm	/^ffff8000001053c9:	80 ff ff $/;"	l
ffff8000001053cc	kernel.asm	/^ffff8000001053cc:	8b 40 6c             	mov    0x6c(%rax),%eax$/;"	l
ffff8000001053cf	kernel.asm	/^ffff8000001053cf:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001053d2	kernel.asm	/^ffff8000001053d2:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001053d4	kernel.asm	/^ffff8000001053d4:	7c 16                	jl     ffff8000001053ec <log_write+0x55>$/;"	l
ffff8000001053d6	kernel.asm	/^ffff8000001053d6:	48 bf e7 ce 10 00 00 	movabs $0xffff80000010cee7,%rdi$/;"	l
ffff8000001053dd	kernel.asm	/^ffff8000001053dd:	80 ff ff $/;"	l
ffff8000001053e0	kernel.asm	/^ffff8000001053e0:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001053e7	kernel.asm	/^ffff8000001053e7:	80 ff ff $/;"	l
ffff8000001053ea	kernel.asm	/^ffff8000001053ea:	ff d0                	callq  *%rax$/;"	l
ffff8000001053ec	kernel.asm	/^ffff8000001053ec:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001053f3	kernel.asm	/^ffff8000001053f3:	80 ff ff $/;"	l
ffff8000001053f6	kernel.asm	/^ffff8000001053f6:	8b 40 70             	mov    0x70(%rax),%eax$/;"	l
ffff8000001053f9	kernel.asm	/^ffff8000001053f9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001053fb	kernel.asm	/^ffff8000001053fb:	7f 16                	jg     ffff800000105413 <log_write+0x7c>$/;"	l
ffff8000001053fd	kernel.asm	/^ffff8000001053fd:	48 bf fd ce 10 00 00 	movabs $0xffff80000010cefd,%rdi$/;"	l
ffff800000105404	kernel.asm	/^ffff800000105404:	80 ff ff $/;"	l
ffff800000105407	kernel.asm	/^ffff800000105407:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010540e	kernel.asm	/^ffff80000010540e:	80 ff ff $/;"	l
ffff800000105411	kernel.asm	/^ffff800000105411:	ff d0                	callq  *%rax$/;"	l
ffff800000105413	kernel.asm	/^ffff800000105413:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff80000010541a	kernel.asm	/^ffff80000010541a:	80 ff ff $/;"	l
ffff80000010541d	kernel.asm	/^ffff80000010541d:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000105424	kernel.asm	/^ffff800000105424:	80 ff ff $/;"	l
ffff800000105427	kernel.asm	/^ffff800000105427:	ff d0                	callq  *%rax$/;"	l
ffff800000105429	kernel.asm	/^ffff800000105429:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105430	kernel.asm	/^ffff800000105430:	eb 29                	jmp    ffff80000010545b <log_write+0xc4>$/;"	l
ffff800000105432	kernel.asm	/^ffff800000105432:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105439	kernel.asm	/^ffff800000105439:	80 ff ff $/;"	l
ffff80000010543c	kernel.asm	/^ffff80000010543c:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010543f	kernel.asm	/^ffff80000010543f:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105442	kernel.asm	/^ffff800000105442:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff800000105446	kernel.asm	/^ffff800000105446:	8b 44 90 10          	mov    0x10(%rax,%rdx,4),%eax$/;"	l
ffff80000010544a	kernel.asm	/^ffff80000010544a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010544c	kernel.asm	/^ffff80000010544c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105450	kernel.asm	/^ffff800000105450:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000105453	kernel.asm	/^ffff800000105453:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000105455	kernel.asm	/^ffff800000105455:	74 18                	je     ffff80000010546f <log_write+0xd8>$/;"	l
ffff800000105457	kernel.asm	/^ffff800000105457:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010545b	kernel.asm	/^ffff80000010545b:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105462	kernel.asm	/^ffff800000105462:	80 ff ff $/;"	l
ffff800000105465	kernel.asm	/^ffff800000105465:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff800000105468	kernel.asm	/^ffff800000105468:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff80000010546b	kernel.asm	/^ffff80000010546b:	7f c5                	jg     ffff800000105432 <log_write+0x9b>$/;"	l
ffff80000010546d	kernel.asm	/^ffff80000010546d:	eb 01                	jmp    ffff800000105470 <log_write+0xd9>$/;"	l
ffff80000010546f	kernel.asm	/^ffff80000010546f:	90                   	nop$/;"	l
ffff800000105470	kernel.asm	/^ffff800000105470:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105474	kernel.asm	/^ffff800000105474:	8b 40 08             	mov    0x8(%rax),%eax$/;"	l
ffff800000105477	kernel.asm	/^ffff800000105477:	89 c1                	mov    %eax,%ecx$/;"	l
ffff800000105479	kernel.asm	/^ffff800000105479:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105480	kernel.asm	/^ffff800000105480:	80 ff ff $/;"	l
ffff800000105483	kernel.asm	/^ffff800000105483:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000105486	kernel.asm	/^ffff800000105486:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000105489	kernel.asm	/^ffff800000105489:	48 83 c2 1c          	add    $0x1c,%rdx$/;"	l
ffff80000010548d	kernel.asm	/^ffff80000010548d:	89 4c 90 10          	mov    %ecx,0x10(%rax,%rdx,4)$/;"	l
ffff800000105491	kernel.asm	/^ffff800000105491:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff800000105498	kernel.asm	/^ffff800000105498:	80 ff ff $/;"	l
ffff80000010549b	kernel.asm	/^ffff80000010549b:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff80000010549e	kernel.asm	/^ffff80000010549e:	3b 45 fc             	cmp    -0x4(%rbp),%eax$/;"	l
ffff8000001054a1	kernel.asm	/^ffff8000001054a1:	75 1d                	jne    ffff8000001054c0 <log_write+0x129>$/;"	l
ffff8000001054a3	kernel.asm	/^ffff8000001054a3:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001054aa	kernel.asm	/^ffff8000001054aa:	80 ff ff $/;"	l
ffff8000001054ad	kernel.asm	/^ffff8000001054ad:	8b 40 7c             	mov    0x7c(%rax),%eax$/;"	l
ffff8000001054b0	kernel.asm	/^ffff8000001054b0:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001054b3	kernel.asm	/^ffff8000001054b3:	48 b8 80 a2 11 00 00 	movabs $0xffff80000011a280,%rax$/;"	l
ffff8000001054ba	kernel.asm	/^ffff8000001054ba:	80 ff ff $/;"	l
ffff8000001054bd	kernel.asm	/^ffff8000001054bd:	89 50 7c             	mov    %edx,0x7c(%rax)$/;"	l
ffff8000001054c0	kernel.asm	/^ffff8000001054c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001054c4	kernel.asm	/^ffff8000001054c4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001054c6	kernel.asm	/^ffff8000001054c6:	83 c8 04             	or     $0x4,%eax$/;"	l
ffff8000001054c9	kernel.asm	/^ffff8000001054c9:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001054cb	kernel.asm	/^ffff8000001054cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001054cf	kernel.asm	/^ffff8000001054cf:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001054d1	kernel.asm	/^ffff8000001054d1:	48 bf 80 a2 11 00 00 	movabs $0xffff80000011a280,%rdi$/;"	l
ffff8000001054d8	kernel.asm	/^ffff8000001054d8:	80 ff ff $/;"	l
ffff8000001054db	kernel.asm	/^ffff8000001054db:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001054e2	kernel.asm	/^ffff8000001054e2:	80 ff ff $/;"	l
ffff8000001054e5	kernel.asm	/^ffff8000001054e5:	ff d0                	callq  *%rax$/;"	l
ffff8000001054e7	kernel.asm	/^ffff8000001054e7:	90                   	nop$/;"	l
ffff8000001054e8	kernel.asm	/^ffff8000001054e8:	c9                   	leaveq $/;"	l
ffff8000001054e9	kernel.asm	/^ffff8000001054e9:	c3                   	retq   $/;"	l
ffff8000001054ea	kernel.asm	/^ffff8000001054ea <v2p>:$/;"	l
ffff8000001054ea	kernel.asm	/^ffff8000001054ea:	55                   	push   %rbp$/;"	l
ffff8000001054eb	kernel.asm	/^ffff8000001054eb:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001054ee	kernel.asm	/^ffff8000001054ee:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001054f2	kernel.asm	/^ffff8000001054f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001054f6	kernel.asm	/^ffff8000001054f6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001054fa	kernel.asm	/^ffff8000001054fa:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff800000105501	kernel.asm	/^ffff800000105501:	80 00 00 $/;"	l
ffff800000105504	kernel.asm	/^ffff800000105504:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105507	kernel.asm	/^ffff800000105507:	c9                   	leaveq $/;"	l
ffff800000105508	kernel.asm	/^ffff800000105508:	c3                   	retq   $/;"	l
ffff800000105509	kernel.asm	/^ffff800000105509 <xchg>:$/;"	l
ffff800000105509	kernel.asm	/^ffff800000105509:	55                   	push   %rbp$/;"	l
ffff80000010550a	kernel.asm	/^ffff80000010550a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010550d	kernel.asm	/^ffff80000010550d:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105511	kernel.asm	/^ffff800000105511:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105515	kernel.asm	/^ffff800000105515:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105519	kernel.asm	/^ffff800000105519:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010551d	kernel.asm	/^ffff80000010551d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105521	kernel.asm	/^ffff800000105521:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff800000105525	kernel.asm	/^ffff800000105525:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff800000105528	kernel.asm	/^ffff800000105528:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010552b	kernel.asm	/^ffff80000010552b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010552e	kernel.asm	/^ffff80000010552e:	c9                   	leaveq $/;"	l
ffff80000010552f	kernel.asm	/^ffff80000010552f:	c3                   	retq   $/;"	l
ffff800000105530	kernel.asm	/^ffff800000105530 <main>:$/;"	l
ffff800000105530	kernel.asm	/^ffff800000105530:	55                   	push   %rbp$/;"	l
ffff800000105531	kernel.asm	/^ffff800000105531:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105534	kernel.asm	/^ffff800000105534:	48 b8 39 9c 10 00 00 	movabs $0xffff800000109c39,%rax$/;"	l
ffff80000010553b	kernel.asm	/^ffff80000010553b:	80 ff ff $/;"	l
ffff80000010553e	kernel.asm	/^ffff80000010553e:	ff d0                	callq  *%rax$/;"	l
ffff800000105540	kernel.asm	/^ffff800000105540:	48 be 00 00 40 00 00 	movabs $0xffff800000400000,%rsi$/;"	l
ffff800000105547	kernel.asm	/^ffff800000105547:	80 ff ff $/;"	l
ffff80000010554a	kernel.asm	/^ffff80000010554a:	48 bf 00 f0 11 00 00 	movabs $0xffff80000011f000,%rdi$/;"	l
ffff800000105551	kernel.asm	/^ffff800000105551:	80 ff ff $/;"	l
ffff800000105554	kernel.asm	/^ffff800000105554:	48 b8 4e 41 10 00 00 	movabs $0xffff80000010414e,%rax$/;"	l
ffff80000010555b	kernel.asm	/^ffff80000010555b:	80 ff ff $/;"	l
ffff80000010555e	kernel.asm	/^ffff80000010555e:	ff d0                	callq  *%rax$/;"	l
ffff800000105560	kernel.asm	/^ffff800000105560:	48 b8 f4 bd 10 00 00 	movabs $0xffff80000010bdf4,%rax$/;"	l
ffff800000105567	kernel.asm	/^ffff800000105567:	80 ff ff $/;"	l
ffff80000010556a	kernel.asm	/^ffff80000010556a:	ff d0                	callq  *%rax$/;"	l
ffff80000010556c	kernel.asm	/^ffff80000010556c:	48 b8 3f 5b 10 00 00 	movabs $0xffff800000105b3f,%rax$/;"	l
ffff800000105573	kernel.asm	/^ffff800000105573:	80 ff ff $/;"	l
ffff800000105576	kernel.asm	/^ffff800000105576:	ff d0                	callq  *%rax$/;"	l
ffff800000105578	kernel.asm	/^ffff800000105578:	48 b8 70 46 10 00 00 	movabs $0xffff800000104670,%rax$/;"	l
ffff80000010557f	kernel.asm	/^ffff80000010557f:	80 ff ff $/;"	l
ffff800000105582	kernel.asm	/^ffff800000105582:	ff d0                	callq  *%rax$/;"	l
ffff800000105584	kernel.asm	/^ffff800000105584:	48 b8 01 97 10 00 00 	movabs $0xffff800000109701,%rax$/;"	l
ffff80000010558b	kernel.asm	/^ffff80000010558b:	80 ff ff $/;"	l
ffff80000010558e	kernel.asm	/^ffff80000010558e:	ff d0                	callq  *%rax$/;"	l
ffff800000105590	kernel.asm	/^ffff800000105590:	48 b8 37 b9 10 00 00 	movabs $0xffff80000010b937,%rax$/;"	l
ffff800000105597	kernel.asm	/^ffff800000105597:	80 ff ff $/;"	l
ffff80000010559a	kernel.asm	/^ffff80000010559a:	ff d0                	callq  *%rax$/;"	l
ffff80000010559c	kernel.asm	/^ffff80000010559c:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff8000001055a3	kernel.asm	/^ffff8000001055a3:	80 ff ff $/;"	l
ffff8000001055a6	kernel.asm	/^ffff8000001055a6:	ff d0                	callq  *%rax$/;"	l
ffff8000001055a8	kernel.asm	/^ffff8000001055a8:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001055aa	kernel.asm	/^ffff8000001055aa:	48 bf 18 cf 10 00 00 	movabs $0xffff80000010cf18,%rdi$/;"	l
ffff8000001055b1	kernel.asm	/^ffff8000001055b1:	80 ff ff $/;"	l
ffff8000001055b4	kernel.asm	/^ffff8000001055b4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001055b9	kernel.asm	/^ffff8000001055b9:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff8000001055c0	kernel.asm	/^ffff8000001055c0:	80 ff ff $/;"	l
ffff8000001055c3	kernel.asm	/^ffff8000001055c3:	ff d2                	callq  *%rdx$/;"	l
ffff8000001055c5	kernel.asm	/^ffff8000001055c5:	48 b8 1d 40 10 00 00 	movabs $0xffff80000010401d,%rax$/;"	l
ffff8000001055cc	kernel.asm	/^ffff8000001055cc:	80 ff ff $/;"	l
ffff8000001055cf	kernel.asm	/^ffff8000001055cf:	ff d0                	callq  *%rax$/;"	l
ffff8000001055d1	kernel.asm	/^ffff8000001055d1:	48 b8 53 14 10 00 00 	movabs $0xffff800000101453,%rax$/;"	l
ffff8000001055d8	kernel.asm	/^ffff8000001055d8:	80 ff ff $/;"	l
ffff8000001055db	kernel.asm	/^ffff8000001055db:	ff d0                	callq  *%rax$/;"	l
ffff8000001055dd	kernel.asm	/^ffff8000001055dd:	48 b8 3d 9d 10 00 00 	movabs $0xffff800000109d3d,%rax$/;"	l
ffff8000001055e4	kernel.asm	/^ffff8000001055e4:	80 ff ff $/;"	l
ffff8000001055e7	kernel.asm	/^ffff8000001055e7:	ff d0                	callq  *%rax$/;"	l
ffff8000001055e9	kernel.asm	/^ffff8000001055e9:	48 b8 65 62 10 00 00 	movabs $0xffff800000106265,%rax$/;"	l
ffff8000001055f0	kernel.asm	/^ffff8000001055f0:	80 ff ff $/;"	l
ffff8000001055f3	kernel.asm	/^ffff8000001055f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001055f5	kernel.asm	/^ffff8000001055f5:	48 b8 01 97 10 00 00 	movabs $0xffff800000109701,%rax$/;"	l
ffff8000001055fc	kernel.asm	/^ffff8000001055fc:	80 ff ff $/;"	l
ffff8000001055ff	kernel.asm	/^ffff8000001055ff:	ff d0                	callq  *%rax$/;"	l
ffff800000105601	kernel.asm	/^ffff800000105601:	48 b8 53 01 10 00 00 	movabs $0xffff800000100153,%rax$/;"	l
ffff800000105608	kernel.asm	/^ffff800000105608:	80 ff ff $/;"	l
ffff80000010560b	kernel.asm	/^ffff80000010560b:	ff d0                	callq  *%rax$/;"	l
ffff80000010560d	kernel.asm	/^ffff80000010560d:	48 b8 1b 1c 10 00 00 	movabs $0xffff800000101c1b,%rax$/;"	l
ffff800000105614	kernel.asm	/^ffff800000105614:	80 ff ff $/;"	l
ffff800000105617	kernel.asm	/^ffff800000105617:	ff d0                	callq  *%rax$/;"	l
ffff800000105619	kernel.asm	/^ffff800000105619:	48 b8 98 3a 10 00 00 	movabs $0xffff800000103a98,%rax$/;"	l
ffff800000105620	kernel.asm	/^ffff800000105620:	80 ff ff $/;"	l
ffff800000105623	kernel.asm	/^ffff800000105623:	ff d0                	callq  *%rax$/;"	l
ffff800000105625	kernel.asm	/^ffff800000105625:	48 b8 18 57 10 00 00 	movabs $0xffff800000105718,%rax$/;"	l
ffff80000010562c	kernel.asm	/^ffff80000010562c:	80 ff ff $/;"	l
ffff80000010562f	kernel.asm	/^ffff80000010562f:	ff d0                	callq  *%rax$/;"	l
ffff800000105631	kernel.asm	/^ffff800000105631:	48 be 00 00 00 0e 00 	movabs $0xffff80000e000000,%rsi$/;"	l
ffff800000105638	kernel.asm	/^ffff800000105638:	80 ff ff $/;"	l
ffff80000010563b	kernel.asm	/^ffff80000010563b:	48 bf 00 00 40 00 00 	movabs $0xffff800000400000,%rdi$/;"	l
ffff800000105642	kernel.asm	/^ffff800000105642:	80 ff ff $/;"	l
ffff800000105645	kernel.asm	/^ffff800000105645:	48 b8 ac 41 10 00 00 	movabs $0xffff8000001041ac,%rax$/;"	l
ffff80000010564c	kernel.asm	/^ffff80000010564c:	80 ff ff $/;"	l
ffff80000010564f	kernel.asm	/^ffff80000010564f:	ff d0                	callq  *%rax$/;"	l
ffff800000105651	kernel.asm	/^ffff800000105651:	48 b8 04 64 10 00 00 	movabs $0xffff800000106404,%rax$/;"	l
ffff800000105658	kernel.asm	/^ffff800000105658:	80 ff ff $/;"	l
ffff80000010565b	kernel.asm	/^ffff80000010565b:	ff d0                	callq  *%rax$/;"	l
ffff80000010565d	kernel.asm	/^ffff80000010565d:	48 b8 9d 56 10 00 00 	movabs $0xffff80000010569d,%rax$/;"	l
ffff800000105664	kernel.asm	/^ffff800000105664:	80 ff ff $/;"	l
ffff800000105667	kernel.asm	/^ffff800000105667:	ff d0                	callq  *%rax$/;"	l
ffff800000105669	kernel.asm	/^ffff800000105669 <mpenter>:$/;"	l
ffff800000105669	kernel.asm	/^ffff800000105669:	55                   	push   %rbp$/;"	l
ffff80000010566a	kernel.asm	/^ffff80000010566a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010566d	kernel.asm	/^ffff80000010566d:	48 b8 f9 be 10 00 00 	movabs $0xffff80000010bef9,%rax$/;"	l
ffff800000105674	kernel.asm	/^ffff800000105674:	80 ff ff $/;"	l
ffff800000105677	kernel.asm	/^ffff800000105677:	ff d0                	callq  *%rax$/;"	l
ffff800000105679	kernel.asm	/^ffff800000105679:	48 b8 37 b9 10 00 00 	movabs $0xffff80000010b937,%rax$/;"	l
ffff800000105680	kernel.asm	/^ffff800000105680:	80 ff ff $/;"	l
ffff800000105683	kernel.asm	/^ffff800000105683:	ff d0                	callq  *%rax$/;"	l
ffff800000105685	kernel.asm	/^ffff800000105685:	48 b8 70 46 10 00 00 	movabs $0xffff800000104670,%rax$/;"	l
ffff80000010568c	kernel.asm	/^ffff80000010568c:	80 ff ff $/;"	l
ffff80000010568f	kernel.asm	/^ffff80000010568f:	ff d0                	callq  *%rax$/;"	l
ffff800000105691	kernel.asm	/^ffff800000105691:	48 b8 9d 56 10 00 00 	movabs $0xffff80000010569d,%rax$/;"	l
ffff800000105698	kernel.asm	/^ffff800000105698:	80 ff ff $/;"	l
ffff80000010569b	kernel.asm	/^ffff80000010569b:	ff d0                	callq  *%rax$/;"	l
ffff80000010569d	kernel.asm	/^ffff80000010569d <mpmain>:$/;"	l
ffff80000010569d	kernel.asm	/^ffff80000010569d:	55                   	push   %rbp$/;"	l
ffff80000010569e	kernel.asm	/^ffff80000010569e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001056a1	kernel.asm	/^ffff8000001056a1:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff8000001056a8	kernel.asm	/^ffff8000001056a8:	80 ff ff $/;"	l
ffff8000001056ab	kernel.asm	/^ffff8000001056ab:	ff d0                	callq  *%rax$/;"	l
ffff8000001056ad	kernel.asm	/^ffff8000001056ad:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001056af	kernel.asm	/^ffff8000001056af:	48 bf 2f cf 10 00 00 	movabs $0xffff80000010cf2f,%rdi$/;"	l
ffff8000001056b6	kernel.asm	/^ffff8000001056b6:	80 ff ff $/;"	l
ffff8000001056b9	kernel.asm	/^ffff8000001056b9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001056be	kernel.asm	/^ffff8000001056be:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff8000001056c5	kernel.asm	/^ffff8000001056c5:	80 ff ff $/;"	l
ffff8000001056c8	kernel.asm	/^ffff8000001056c8:	ff d2                	callq  *%rdx$/;"	l
ffff8000001056ca	kernel.asm	/^ffff8000001056ca:	48 b8 d9 96 10 00 00 	movabs $0xffff8000001096d9,%rax$/;"	l
ffff8000001056d1	kernel.asm	/^ffff8000001056d1:	80 ff ff $/;"	l
ffff8000001056d4	kernel.asm	/^ffff8000001056d4:	ff d0                	callq  *%rax$/;"	l
ffff8000001056d6	kernel.asm	/^ffff8000001056d6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001056db	kernel.asm	/^ffff8000001056db:	48 ba c3 b8 10 00 00 	movabs $0xffff80000010b8c3,%rdx$/;"	l
ffff8000001056e2	kernel.asm	/^ffff8000001056e2:	80 ff ff $/;"	l
ffff8000001056e5	kernel.asm	/^ffff8000001056e5:	ff d2                	callq  *%rdx$/;"	l
ffff8000001056e7	kernel.asm	/^ffff8000001056e7:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001056ee	kernel.asm	/^ffff8000001056ee:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001056f2	kernel.asm	/^ffff8000001056f2:	48 05 d8 00 00 00    	add    $0xd8,%rax$/;"	l
ffff8000001056f8	kernel.asm	/^ffff8000001056f8:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff8000001056fd	kernel.asm	/^ffff8000001056fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105700	kernel.asm	/^ffff800000105700:	48 b8 09 55 10 00 00 	movabs $0xffff800000105509,%rax$/;"	l
ffff800000105707	kernel.asm	/^ffff800000105707:	80 ff ff $/;"	l
ffff80000010570a	kernel.asm	/^ffff80000010570a:	ff d0                	callq  *%rax$/;"	l
ffff80000010570c	kernel.asm	/^ffff80000010570c:	48 b8 1a 6c 10 00 00 	movabs $0xffff800000106c1a,%rax$/;"	l
ffff800000105713	kernel.asm	/^ffff800000105713:	80 ff ff $/;"	l
ffff800000105716	kernel.asm	/^ffff800000105716:	ff d0                	callq  *%rax$/;"	l
ffff800000105718	kernel.asm	/^ffff800000105718 <startothers>:$/;"	l
ffff800000105718	kernel.asm	/^ffff800000105718:	55                   	push   %rbp$/;"	l
ffff800000105719	kernel.asm	/^ffff800000105719:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010571c	kernel.asm	/^ffff80000010571c:	53                   	push   %rbx$/;"	l
ffff80000010571d	kernel.asm	/^ffff80000010571d:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff800000105721	kernel.asm	/^ffff800000105721:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax$/;"	l
ffff800000105728	kernel.asm	/^ffff800000105728:	80 ff ff $/;"	l
ffff80000010572b	kernel.asm	/^ffff80000010572b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010572f	kernel.asm	/^ffff80000010572f:	48 b8 72 00 00 00 00 	movabs $0x72,%rax$/;"	l
ffff800000105736	kernel.asm	/^ffff800000105736:	00 00 00 $/;"	l
ffff800000105739	kernel.asm	/^ffff800000105739:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010573b	kernel.asm	/^ffff80000010573b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010573f	kernel.asm	/^ffff80000010573f:	48 be 9c 02 11 00 00 	movabs $0xffff80000011029c,%rsi$/;"	l
ffff800000105746	kernel.asm	/^ffff800000105746:	80 ff ff $/;"	l
ffff800000105749	kernel.asm	/^ffff800000105749:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010574c	kernel.asm	/^ffff80000010574c:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000105753	kernel.asm	/^ffff800000105753:	80 ff ff $/;"	l
ffff800000105756	kernel.asm	/^ffff800000105756:	ff d0                	callq  *%rax$/;"	l
ffff800000105758	kernel.asm	/^ffff800000105758:	48 b8 80 a3 11 00 00 	movabs $0xffff80000011a380,%rax$/;"	l
ffff80000010575f	kernel.asm	/^ffff80000010575f:	80 ff ff $/;"	l
ffff800000105762	kernel.asm	/^ffff800000105762:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105766	kernel.asm	/^ffff800000105766:	e9 c2 00 00 00       	jmpq   ffff80000010582d <startothers+0x115>$/;"	l
ffff80000010576b	kernel.asm	/^ffff80000010576b:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff800000105772	kernel.asm	/^ffff800000105772:	80 ff ff $/;"	l
ffff800000105775	kernel.asm	/^ffff800000105775:	ff d0                	callq  *%rax$/;"	l
ffff800000105777	kernel.asm	/^ffff800000105777:	48 98                	cltq   $/;"	l
ffff800000105779	kernel.asm	/^ffff800000105779:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010577d	kernel.asm	/^ffff80000010577d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105780	kernel.asm	/^ffff800000105780:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000105784	kernel.asm	/^ffff800000105784:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000105787	kernel.asm	/^ffff800000105787:	48 b8 80 a3 11 00 00 	movabs $0xffff80000011a380,%rax$/;"	l
ffff80000010578e	kernel.asm	/^ffff80000010578e:	80 ff ff $/;"	l
ffff800000105791	kernel.asm	/^ffff800000105791:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105794	kernel.asm	/^ffff800000105794:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105798	kernel.asm	/^ffff800000105798:	0f 84 86 00 00 00    	je     ffff800000105824 <startothers+0x10c>$/;"	l
ffff80000010579e	kernel.asm	/^ffff80000010579e:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff8000001057a5	kernel.asm	/^ffff8000001057a5:	80 ff ff $/;"	l
ffff8000001057a8	kernel.asm	/^ffff8000001057a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001057aa	kernel.asm	/^ffff8000001057aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff8000001057ae	kernel.asm	/^ffff8000001057ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001057b2	kernel.asm	/^ffff8000001057b2:	48 83 e8 04          	sub    $0x4,%rax$/;"	l
ffff8000001057b6	kernel.asm	/^ffff8000001057b6:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)$/;"	l
ffff8000001057bc	kernel.asm	/^ffff8000001057bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001057c0	kernel.asm	/^ffff8000001057c0:	48 8d 58 f8          	lea    -0x8(%rax),%rbx$/;"	l
ffff8000001057c4	kernel.asm	/^ffff8000001057c4:	48 bf 49 00 10 00 00 	movabs $0xffff800000100049,%rdi$/;"	l
ffff8000001057cb	kernel.asm	/^ffff8000001057cb:	80 ff ff $/;"	l
ffff8000001057ce	kernel.asm	/^ffff8000001057ce:	48 b8 ea 54 10 00 00 	movabs $0xffff8000001054ea,%rax$/;"	l
ffff8000001057d5	kernel.asm	/^ffff8000001057d5:	80 ff ff $/;"	l
ffff8000001057d8	kernel.asm	/^ffff8000001057d8:	ff d0                	callq  *%rax$/;"	l
ffff8000001057da	kernel.asm	/^ffff8000001057da:	89 03                	mov    %eax,(%rbx)$/;"	l
ffff8000001057dc	kernel.asm	/^ffff8000001057dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001057e0	kernel.asm	/^ffff8000001057e0:	48 83 e8 10          	sub    $0x10,%rax$/;"	l
ffff8000001057e4	kernel.asm	/^ffff8000001057e4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff8000001057e8	kernel.asm	/^ffff8000001057e8:	48 81 c2 00 10 00 00 	add    $0x1000,%rdx$/;"	l
ffff8000001057ef	kernel.asm	/^ffff8000001057ef:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001057f2	kernel.asm	/^ffff8000001057f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001057f6	kernel.asm	/^ffff8000001057f6:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001057f8	kernel.asm	/^ffff8000001057f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001057fc	kernel.asm	/^ffff8000001057fc:	0f b6 40 01          	movzbl 0x1(%rax),%eax$/;"	l
ffff800000105800	kernel.asm	/^ffff800000105800:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105803	kernel.asm	/^ffff800000105803:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000105805	kernel.asm	/^ffff800000105805:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000105807	kernel.asm	/^ffff800000105807:	48 b8 44 49 10 00 00 	movabs $0xffff800000104944,%rax$/;"	l
ffff80000010580e	kernel.asm	/^ffff80000010580e:	80 ff ff $/;"	l
ffff800000105811	kernel.asm	/^ffff800000105811:	ff d0                	callq  *%rax$/;"	l
ffff800000105813	kernel.asm	/^ffff800000105813:	90                   	nop$/;"	l
ffff800000105814	kernel.asm	/^ffff800000105814:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105818	kernel.asm	/^ffff800000105818:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax$/;"	l
ffff80000010581e	kernel.asm	/^ffff80000010581e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105820	kernel.asm	/^ffff800000105820:	74 f2                	je     ffff800000105814 <startothers+0xfc>$/;"	l
ffff800000105822	kernel.asm	/^ffff800000105822:	eb 01                	jmp    ffff800000105825 <startothers+0x10d>$/;"	l
ffff800000105824	kernel.asm	/^ffff800000105824:	90                   	nop$/;"	l
ffff800000105825	kernel.asm	/^ffff800000105825:	48 81 45 e8 f0 00 00 	addq   $0xf0,-0x18(%rbp)$/;"	l
ffff80000010582c	kernel.asm	/^ffff80000010582c:	00 $/;"	l
ffff80000010582d	kernel.asm	/^ffff80000010582d:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105834	kernel.asm	/^ffff800000105834:	80 ff ff $/;"	l
ffff800000105837	kernel.asm	/^ffff800000105837:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105839	kernel.asm	/^ffff800000105839:	48 98                	cltq   $/;"	l
ffff80000010583b	kernel.asm	/^ffff80000010583b:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010583f	kernel.asm	/^ffff80000010583f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105842	kernel.asm	/^ffff800000105842:	48 c1 e2 04          	shl    $0x4,%rdx$/;"	l
ffff800000105846	kernel.asm	/^ffff800000105846:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000105849	kernel.asm	/^ffff800000105849:	48 b8 80 a3 11 00 00 	movabs $0xffff80000011a380,%rax$/;"	l
ffff800000105850	kernel.asm	/^ffff800000105850:	80 ff ff $/;"	l
ffff800000105853	kernel.asm	/^ffff800000105853:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105856	kernel.asm	/^ffff800000105856:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff80000010585a	kernel.asm	/^ffff80000010585a:	0f 87 0b ff ff ff    	ja     ffff80000010576b <startothers+0x53>$/;"	l
ffff800000105860	kernel.asm	/^ffff800000105860:	90                   	nop$/;"	l
ffff800000105861	kernel.asm	/^ffff800000105861:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff800000105865	kernel.asm	/^ffff800000105865:	5b                   	pop    %rbx$/;"	l
ffff800000105866	kernel.asm	/^ffff800000105866:	5d                   	pop    %rbp$/;"	l
ffff800000105867	kernel.asm	/^ffff800000105867:	c3                   	retq   $/;"	l
ffff800000105868	kernel.asm	/^ffff800000105868 <inb>:$/;"	l
ffff800000105868	kernel.asm	/^ffff800000105868:	55                   	push   %rbp$/;"	l
ffff800000105869	kernel.asm	/^ffff800000105869:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010586c	kernel.asm	/^ffff80000010586c:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000105870	kernel.asm	/^ffff800000105870:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000105872	kernel.asm	/^ffff800000105872:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000105876	kernel.asm	/^ffff800000105876:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010587a	kernel.asm	/^ffff80000010587a:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010587c	kernel.asm	/^ffff80000010587c:	ec                   	in     (%dx),%al$/;"	l
ffff80000010587d	kernel.asm	/^ffff80000010587d:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000105880	kernel.asm	/^ffff800000105880:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000105884	kernel.asm	/^ffff800000105884:	c9                   	leaveq $/;"	l
ffff800000105885	kernel.asm	/^ffff800000105885:	c3                   	retq   $/;"	l
ffff800000105886	kernel.asm	/^ffff800000105886 <outb>:$/;"	l
ffff800000105886	kernel.asm	/^ffff800000105886:	55                   	push   %rbp$/;"	l
ffff800000105887	kernel.asm	/^ffff800000105887:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010588a	kernel.asm	/^ffff80000010588a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010588e	kernel.asm	/^ffff80000010588e:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000105890	kernel.asm	/^ffff800000105890:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000105892	kernel.asm	/^ffff800000105892:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000105896	kernel.asm	/^ffff800000105896:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000105899	kernel.asm	/^ffff800000105899:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010589d	kernel.asm	/^ffff80000010589d:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff8000001058a1	kernel.asm	/^ffff8000001058a1:	ee                   	out    %al,(%dx)$/;"	l
ffff8000001058a2	kernel.asm	/^ffff8000001058a2:	90                   	nop$/;"	l
ffff8000001058a3	kernel.asm	/^ffff8000001058a3:	c9                   	leaveq $/;"	l
ffff8000001058a4	kernel.asm	/^ffff8000001058a4:	c3                   	retq   $/;"	l
ffff8000001058a5	kernel.asm	/^ffff8000001058a5 <sum>:$/;"	l
ffff8000001058a5	kernel.asm	/^ffff8000001058a5:	55                   	push   %rbp$/;"	l
ffff8000001058a6	kernel.asm	/^ffff8000001058a6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001058a9	kernel.asm	/^ffff8000001058a9:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001058ad	kernel.asm	/^ffff8000001058ad:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001058b1	kernel.asm	/^ffff8000001058b1:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001058b4	kernel.asm	/^ffff8000001058b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff8000001058bb	kernel.asm	/^ffff8000001058bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001058c2	kernel.asm	/^ffff8000001058c2:	eb 1a                	jmp    ffff8000001058de <sum+0x39>$/;"	l
ffff8000001058c4	kernel.asm	/^ffff8000001058c4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001058c7	kernel.asm	/^ffff8000001058c7:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001058ca	kernel.asm	/^ffff8000001058ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001058ce	kernel.asm	/^ffff8000001058ce:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001058d1	kernel.asm	/^ffff8000001058d1:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001058d4	kernel.asm	/^ffff8000001058d4:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001058d7	kernel.asm	/^ffff8000001058d7:	01 45 f8             	add    %eax,-0x8(%rbp)$/;"	l
ffff8000001058da	kernel.asm	/^ffff8000001058da:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001058de	kernel.asm	/^ffff8000001058de:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001058e1	kernel.asm	/^ffff8000001058e1:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff8000001058e4	kernel.asm	/^ffff8000001058e4:	7c de                	jl     ffff8000001058c4 <sum+0x1f>$/;"	l
ffff8000001058e6	kernel.asm	/^ffff8000001058e6:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001058e9	kernel.asm	/^ffff8000001058e9:	c9                   	leaveq $/;"	l
ffff8000001058ea	kernel.asm	/^ffff8000001058ea:	c3                   	retq   $/;"	l
ffff8000001058eb	kernel.asm	/^ffff8000001058eb <mpsearch1>:$/;"	l
ffff8000001058eb	kernel.asm	/^ffff8000001058eb:	55                   	push   %rbp$/;"	l
ffff8000001058ec	kernel.asm	/^ffff8000001058ec:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001058ef	kernel.asm	/^ffff8000001058ef:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001058f3	kernel.asm	/^ffff8000001058f3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001058f7	kernel.asm	/^ffff8000001058f7:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff8000001058fa	kernel.asm	/^ffff8000001058fa:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff800000105901	kernel.asm	/^ffff800000105901:	80 ff ff $/;"	l
ffff800000105904	kernel.asm	/^ffff800000105904:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000105908	kernel.asm	/^ffff800000105908:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010590b	kernel.asm	/^ffff80000010590b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010590f	kernel.asm	/^ffff80000010590f:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff800000105912	kernel.asm	/^ffff800000105912:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000105915	kernel.asm	/^ffff800000105915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105919	kernel.asm	/^ffff800000105919:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010591c	kernel.asm	/^ffff80000010591c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105920	kernel.asm	/^ffff800000105920:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105924	kernel.asm	/^ffff800000105924:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105928	kernel.asm	/^ffff800000105928:	eb 4d                	jmp    ffff800000105977 <mpsearch1+0x8c>$/;"	l
ffff80000010592a	kernel.asm	/^ffff80000010592a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010592e	kernel.asm	/^ffff80000010592e:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff800000105933	kernel.asm	/^ffff800000105933:	48 be 40 cf 10 00 00 	movabs $0xffff80000010cf40,%rsi$/;"	l
ffff80000010593a	kernel.asm	/^ffff80000010593a:	80 ff ff $/;"	l
ffff80000010593d	kernel.asm	/^ffff80000010593d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105940	kernel.asm	/^ffff800000105940:	48 b8 f6 78 10 00 00 	movabs $0xffff8000001078f6,%rax$/;"	l
ffff800000105947	kernel.asm	/^ffff800000105947:	80 ff ff $/;"	l
ffff80000010594a	kernel.asm	/^ffff80000010594a:	ff d0                	callq  *%rax$/;"	l
ffff80000010594c	kernel.asm	/^ffff80000010594c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010594e	kernel.asm	/^ffff80000010594e:	75 22                	jne    ffff800000105972 <mpsearch1+0x87>$/;"	l
ffff800000105950	kernel.asm	/^ffff800000105950:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105954	kernel.asm	/^ffff800000105954:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff800000105959	kernel.asm	/^ffff800000105959:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010595c	kernel.asm	/^ffff80000010595c:	48 b8 a5 58 10 00 00 	movabs $0xffff8000001058a5,%rax$/;"	l
ffff800000105963	kernel.asm	/^ffff800000105963:	80 ff ff $/;"	l
ffff800000105966	kernel.asm	/^ffff800000105966:	ff d0                	callq  *%rax$/;"	l
ffff800000105968	kernel.asm	/^ffff800000105968:	84 c0                	test   %al,%al$/;"	l
ffff80000010596a	kernel.asm	/^ffff80000010596a:	75 06                	jne    ffff800000105972 <mpsearch1+0x87>$/;"	l
ffff80000010596c	kernel.asm	/^ffff80000010596c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105970	kernel.asm	/^ffff800000105970:	eb 14                	jmp    ffff800000105986 <mpsearch1+0x9b>$/;"	l
ffff800000105972	kernel.asm	/^ffff800000105972:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)$/;"	l
ffff800000105977	kernel.asm	/^ffff800000105977:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010597b	kernel.asm	/^ffff80000010597b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff80000010597f	kernel.asm	/^ffff80000010597f:	72 a9                	jb     ffff80000010592a <mpsearch1+0x3f>$/;"	l
ffff800000105981	kernel.asm	/^ffff800000105981:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105986	kernel.asm	/^ffff800000105986:	c9                   	leaveq $/;"	l
ffff800000105987	kernel.asm	/^ffff800000105987:	c3                   	retq   $/;"	l
ffff800000105988	kernel.asm	/^ffff800000105988 <mpsearch>:$/;"	l
ffff800000105988	kernel.asm	/^ffff800000105988:	55                   	push   %rbp$/;"	l
ffff800000105989	kernel.asm	/^ffff800000105989:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010598c	kernel.asm	/^ffff80000010598c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105990	kernel.asm	/^ffff800000105990:	48 b8 00 04 00 00 00 	movabs $0xffff800000000400,%rax$/;"	l
ffff800000105997	kernel.asm	/^ffff800000105997:	80 ff ff $/;"	l
ffff80000010599a	kernel.asm	/^ffff80000010599a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010599e	kernel.asm	/^ffff80000010599e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001059a2	kernel.asm	/^ffff8000001059a2:	48 83 c0 0f          	add    $0xf,%rax$/;"	l
ffff8000001059a6	kernel.asm	/^ffff8000001059a6:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001059a9	kernel.asm	/^ffff8000001059a9:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001059ac	kernel.asm	/^ffff8000001059ac:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001059af	kernel.asm	/^ffff8000001059af:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001059b1	kernel.asm	/^ffff8000001059b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001059b5	kernel.asm	/^ffff8000001059b5:	48 83 c0 0e          	add    $0xe,%rax$/;"	l
ffff8000001059b9	kernel.asm	/^ffff8000001059b9:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff8000001059bc	kernel.asm	/^ffff8000001059bc:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff8000001059bf	kernel.asm	/^ffff8000001059bf:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001059c1	kernel.asm	/^ffff8000001059c1:	c1 e0 04             	shl    $0x4,%eax$/;"	l
ffff8000001059c4	kernel.asm	/^ffff8000001059c4:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff8000001059c7	kernel.asm	/^ffff8000001059c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001059cb	kernel.asm	/^ffff8000001059cb:	74 28                	je     ffff8000001059f5 <mpsearch+0x6d>$/;"	l
ffff8000001059cd	kernel.asm	/^ffff8000001059cd:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001059d0	kernel.asm	/^ffff8000001059d0:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff8000001059d5	kernel.asm	/^ffff8000001059d5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001059d8	kernel.asm	/^ffff8000001059d8:	48 b8 eb 58 10 00 00 	movabs $0xffff8000001058eb,%rax$/;"	l
ffff8000001059df	kernel.asm	/^ffff8000001059df:	80 ff ff $/;"	l
ffff8000001059e2	kernel.asm	/^ffff8000001059e2:	ff d0                	callq  *%rax$/;"	l
ffff8000001059e4	kernel.asm	/^ffff8000001059e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001059e8	kernel.asm	/^ffff8000001059e8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff8000001059ed	kernel.asm	/^ffff8000001059ed:	74 5e                	je     ffff800000105a4d <mpsearch+0xc5>$/;"	l
ffff8000001059ef	kernel.asm	/^ffff8000001059ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001059f3	kernel.asm	/^ffff8000001059f3:	eb 6e                	jmp    ffff800000105a63 <mpsearch+0xdb>$/;"	l
ffff8000001059f5	kernel.asm	/^ffff8000001059f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001059f9	kernel.asm	/^ffff8000001059f9:	48 83 c0 14          	add    $0x14,%rax$/;"	l
ffff8000001059fd	kernel.asm	/^ffff8000001059fd:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105a00	kernel.asm	/^ffff800000105a00:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105a03	kernel.asm	/^ffff800000105a03:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff800000105a06	kernel.asm	/^ffff800000105a06:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105a08	kernel.asm	/^ffff800000105a08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a0c	kernel.asm	/^ffff800000105a0c:	48 83 c0 13          	add    $0x13,%rax$/;"	l
ffff800000105a10	kernel.asm	/^ffff800000105a10:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105a13	kernel.asm	/^ffff800000105a13:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105a16	kernel.asm	/^ffff800000105a16:	09 d0                	or     %edx,%eax$/;"	l
ffff800000105a18	kernel.asm	/^ffff800000105a18:	c1 e0 0a             	shl    $0xa,%eax$/;"	l
ffff800000105a1b	kernel.asm	/^ffff800000105a1b:	89 45 f4             	mov    %eax,-0xc(%rbp)$/;"	l
ffff800000105a1e	kernel.asm	/^ffff800000105a1e:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000105a21	kernel.asm	/^ffff800000105a21:	2d 00 04 00 00       	sub    $0x400,%eax$/;"	l
ffff800000105a26	kernel.asm	/^ffff800000105a26:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000105a28	kernel.asm	/^ffff800000105a28:	be 00 04 00 00       	mov    $0x400,%esi$/;"	l
ffff800000105a2d	kernel.asm	/^ffff800000105a2d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105a30	kernel.asm	/^ffff800000105a30:	48 b8 eb 58 10 00 00 	movabs $0xffff8000001058eb,%rax$/;"	l
ffff800000105a37	kernel.asm	/^ffff800000105a37:	80 ff ff $/;"	l
ffff800000105a3a	kernel.asm	/^ffff800000105a3a:	ff d0                	callq  *%rax$/;"	l
ffff800000105a3c	kernel.asm	/^ffff800000105a3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105a40	kernel.asm	/^ffff800000105a40:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000105a45	kernel.asm	/^ffff800000105a45:	74 06                	je     ffff800000105a4d <mpsearch+0xc5>$/;"	l
ffff800000105a47	kernel.asm	/^ffff800000105a47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105a4b	kernel.asm	/^ffff800000105a4b:	eb 16                	jmp    ffff800000105a63 <mpsearch+0xdb>$/;"	l
ffff800000105a4d	kernel.asm	/^ffff800000105a4d:	be 00 00 01 00       	mov    $0x10000,%esi$/;"	l
ffff800000105a52	kernel.asm	/^ffff800000105a52:	bf 00 00 0f 00       	mov    $0xf0000,%edi$/;"	l
ffff800000105a57	kernel.asm	/^ffff800000105a57:	48 b8 eb 58 10 00 00 	movabs $0xffff8000001058eb,%rax$/;"	l
ffff800000105a5e	kernel.asm	/^ffff800000105a5e:	80 ff ff $/;"	l
ffff800000105a61	kernel.asm	/^ffff800000105a61:	ff d0                	callq  *%rax$/;"	l
ffff800000105a63	kernel.asm	/^ffff800000105a63:	c9                   	leaveq $/;"	l
ffff800000105a64	kernel.asm	/^ffff800000105a64:	c3                   	retq   $/;"	l
ffff800000105a65	kernel.asm	/^ffff800000105a65 <mpconfig>:$/;"	l
ffff800000105a65	kernel.asm	/^ffff800000105a65:	55                   	push   %rbp$/;"	l
ffff800000105a66	kernel.asm	/^ffff800000105a66:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105a69	kernel.asm	/^ffff800000105a69:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105a6d	kernel.asm	/^ffff800000105a6d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105a71	kernel.asm	/^ffff800000105a71:	48 b8 88 59 10 00 00 	movabs $0xffff800000105988,%rax$/;"	l
ffff800000105a78	kernel.asm	/^ffff800000105a78:	80 ff ff $/;"	l
ffff800000105a7b	kernel.asm	/^ffff800000105a7b:	ff d0                	callq  *%rax$/;"	l
ffff800000105a7d	kernel.asm	/^ffff800000105a7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105a81	kernel.asm	/^ffff800000105a81:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105a86	kernel.asm	/^ffff800000105a86:	74 0b                	je     ffff800000105a93 <mpconfig+0x2e>$/;"	l
ffff800000105a88	kernel.asm	/^ffff800000105a88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105a8c	kernel.asm	/^ffff800000105a8c:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000105a8f	kernel.asm	/^ffff800000105a8f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105a91	kernel.asm	/^ffff800000105a91:	75 0a                	jne    ffff800000105a9d <mpconfig+0x38>$/;"	l
ffff800000105a93	kernel.asm	/^ffff800000105a93:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105a98	kernel.asm	/^ffff800000105a98:	e9 a0 00 00 00       	jmpq   ffff800000105b3d <mpconfig+0xd8>$/;"	l
ffff800000105a9d	kernel.asm	/^ffff800000105a9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105aa1	kernel.asm	/^ffff800000105aa1:	8b 40 04             	mov    0x4(%rax),%eax$/;"	l
ffff800000105aa4	kernel.asm	/^ffff800000105aa4:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105aa6	kernel.asm	/^ffff800000105aa6:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff800000105aad	kernel.asm	/^ffff800000105aad:	80 ff ff $/;"	l
ffff800000105ab0	kernel.asm	/^ffff800000105ab0:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105ab3	kernel.asm	/^ffff800000105ab3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000105ab7	kernel.asm	/^ffff800000105ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105abb	kernel.asm	/^ffff800000105abb:	ba 04 00 00 00       	mov    $0x4,%edx$/;"	l
ffff800000105ac0	kernel.asm	/^ffff800000105ac0:	48 be 45 cf 10 00 00 	movabs $0xffff80000010cf45,%rsi$/;"	l
ffff800000105ac7	kernel.asm	/^ffff800000105ac7:	80 ff ff $/;"	l
ffff800000105aca	kernel.asm	/^ffff800000105aca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105acd	kernel.asm	/^ffff800000105acd:	48 b8 f6 78 10 00 00 	movabs $0xffff8000001078f6,%rax$/;"	l
ffff800000105ad4	kernel.asm	/^ffff800000105ad4:	80 ff ff $/;"	l
ffff800000105ad7	kernel.asm	/^ffff800000105ad7:	ff d0                	callq  *%rax$/;"	l
ffff800000105ad9	kernel.asm	/^ffff800000105ad9:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105adb	kernel.asm	/^ffff800000105adb:	74 07                	je     ffff800000105ae4 <mpconfig+0x7f>$/;"	l
ffff800000105add	kernel.asm	/^ffff800000105add:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105ae2	kernel.asm	/^ffff800000105ae2:	eb 59                	jmp    ffff800000105b3d <mpconfig+0xd8>$/;"	l
ffff800000105ae4	kernel.asm	/^ffff800000105ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105ae8	kernel.asm	/^ffff800000105ae8:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff800000105aec	kernel.asm	/^ffff800000105aec:	3c 01                	cmp    $0x1,%al$/;"	l
ffff800000105aee	kernel.asm	/^ffff800000105aee:	74 13                	je     ffff800000105b03 <mpconfig+0x9e>$/;"	l
ffff800000105af0	kernel.asm	/^ffff800000105af0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105af4	kernel.asm	/^ffff800000105af4:	0f b6 40 06          	movzbl 0x6(%rax),%eax$/;"	l
ffff800000105af8	kernel.asm	/^ffff800000105af8:	3c 04                	cmp    $0x4,%al$/;"	l
ffff800000105afa	kernel.asm	/^ffff800000105afa:	74 07                	je     ffff800000105b03 <mpconfig+0x9e>$/;"	l
ffff800000105afc	kernel.asm	/^ffff800000105afc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105b01	kernel.asm	/^ffff800000105b01:	eb 3a                	jmp    ffff800000105b3d <mpconfig+0xd8>$/;"	l
ffff800000105b03	kernel.asm	/^ffff800000105b03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105b07	kernel.asm	/^ffff800000105b07:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff800000105b0b	kernel.asm	/^ffff800000105b0b:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff800000105b0e	kernel.asm	/^ffff800000105b0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105b12	kernel.asm	/^ffff800000105b12:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000105b14	kernel.asm	/^ffff800000105b14:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105b17	kernel.asm	/^ffff800000105b17:	48 b8 a5 58 10 00 00 	movabs $0xffff8000001058a5,%rax$/;"	l
ffff800000105b1e	kernel.asm	/^ffff800000105b1e:	80 ff ff $/;"	l
ffff800000105b21	kernel.asm	/^ffff800000105b21:	ff d0                	callq  *%rax$/;"	l
ffff800000105b23	kernel.asm	/^ffff800000105b23:	84 c0                	test   %al,%al$/;"	l
ffff800000105b25	kernel.asm	/^ffff800000105b25:	74 07                	je     ffff800000105b2e <mpconfig+0xc9>$/;"	l
ffff800000105b27	kernel.asm	/^ffff800000105b27:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105b2c	kernel.asm	/^ffff800000105b2c:	eb 0f                	jmp    ffff800000105b3d <mpconfig+0xd8>$/;"	l
ffff800000105b2e	kernel.asm	/^ffff800000105b2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105b32	kernel.asm	/^ffff800000105b32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105b36	kernel.asm	/^ffff800000105b36:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105b39	kernel.asm	/^ffff800000105b39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105b3d	kernel.asm	/^ffff800000105b3d:	c9                   	leaveq $/;"	l
ffff800000105b3e	kernel.asm	/^ffff800000105b3e:	c3                   	retq   $/;"	l
ffff800000105b3f	kernel.asm	/^ffff800000105b3f <mpinit>:$/;"	l
ffff800000105b3f	kernel.asm	/^ffff800000105b3f:	55                   	push   %rbp$/;"	l
ffff800000105b40	kernel.asm	/^ffff800000105b40:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105b43	kernel.asm	/^ffff800000105b43:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105b47	kernel.asm	/^ffff800000105b47:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000105b4b	kernel.asm	/^ffff800000105b4b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105b4e	kernel.asm	/^ffff800000105b4e:	48 b8 65 5a 10 00 00 	movabs $0xffff800000105a65,%rax$/;"	l
ffff800000105b55	kernel.asm	/^ffff800000105b55:	80 ff ff $/;"	l
ffff800000105b58	kernel.asm	/^ffff800000105b58:	ff d0                	callq  *%rax$/;"	l
ffff800000105b5a	kernel.asm	/^ffff800000105b5a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000105b5e	kernel.asm	/^ffff800000105b5e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000105b63	kernel.asm	/^ffff800000105b63:	75 20                	jne    ffff800000105b85 <mpinit+0x46>$/;"	l
ffff800000105b65	kernel.asm	/^ffff800000105b65:	48 bf 4a cf 10 00 00 	movabs $0xffff80000010cf4a,%rdi$/;"	l
ffff800000105b6c	kernel.asm	/^ffff800000105b6c:	80 ff ff $/;"	l
ffff800000105b6f	kernel.asm	/^ffff800000105b6f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105b74	kernel.asm	/^ffff800000105b74:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000105b7b	kernel.asm	/^ffff800000105b7b:	80 ff ff $/;"	l
ffff800000105b7e	kernel.asm	/^ffff800000105b7e:	ff d2                	callq  *%rdx$/;"	l
ffff800000105b80	kernel.asm	/^ffff800000105b80:	e9 bb 01 00 00       	jmpq   ffff800000105d40 <mpinit+0x201>$/;"	l
ffff800000105b85	kernel.asm	/^ffff800000105b85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105b89	kernel.asm	/^ffff800000105b89:	8b 40 24             	mov    0x24(%rax),%eax$/;"	l
ffff800000105b8c	kernel.asm	/^ffff800000105b8c:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000105b8e	kernel.asm	/^ffff800000105b8e:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff800000105b95	kernel.asm	/^ffff800000105b95:	80 ff ff $/;"	l
ffff800000105b98	kernel.asm	/^ffff800000105b98:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105b9b	kernel.asm	/^ffff800000105b9b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105b9e	kernel.asm	/^ffff800000105b9e:	48 b8 60 a2 11 00 00 	movabs $0xffff80000011a260,%rax$/;"	l
ffff800000105ba5	kernel.asm	/^ffff800000105ba5:	80 ff ff $/;"	l
ffff800000105ba8	kernel.asm	/^ffff800000105ba8:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105bab	kernel.asm	/^ffff800000105bab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105baf	kernel.asm	/^ffff800000105baf:	48 83 c0 2c          	add    $0x2c,%rax$/;"	l
ffff800000105bb3	kernel.asm	/^ffff800000105bb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105bb7	kernel.asm	/^ffff800000105bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105bbb	kernel.asm	/^ffff800000105bbb:	0f b7 40 04          	movzwl 0x4(%rax),%eax$/;"	l
ffff800000105bbf	kernel.asm	/^ffff800000105bbf:	0f b7 d0             	movzwl %ax,%edx$/;"	l
ffff800000105bc2	kernel.asm	/^ffff800000105bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000105bc6	kernel.asm	/^ffff800000105bc6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105bc9	kernel.asm	/^ffff800000105bc9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000105bcd	kernel.asm	/^ffff800000105bcd:	e9 eb 00 00 00       	jmpq   ffff800000105cbd <mpinit+0x17e>$/;"	l
ffff800000105bd2	kernel.asm	/^ffff800000105bd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105bd6	kernel.asm	/^ffff800000105bd6:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000105bd9	kernel.asm	/^ffff800000105bd9:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105bdc	kernel.asm	/^ffff800000105bdc:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000105bdf	kernel.asm	/^ffff800000105bdf:	0f 87 c2 00 00 00    	ja     ffff800000105ca7 <mpinit+0x168>$/;"	l
ffff800000105be5	kernel.asm	/^ffff800000105be5:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000105be7	kernel.asm	/^ffff800000105be7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000105bee	kernel.asm	/^ffff800000105bee:	00 $/;"	l
ffff800000105bef	kernel.asm	/^ffff800000105bef:	48 b8 a0 cf 10 00 00 	movabs $0xffff80000010cfa0,%rax$/;"	l
ffff800000105bf6	kernel.asm	/^ffff800000105bf6:	80 ff ff $/;"	l
ffff800000105bf9	kernel.asm	/^ffff800000105bf9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000105bfc	kernel.asm	/^ffff800000105bfc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105bff	kernel.asm	/^ffff800000105bff:	ff e0                	jmpq   *%rax$/;"	l
ffff800000105c01	kernel.asm	/^ffff800000105c01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c05	kernel.asm	/^ffff800000105c05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff800000105c09	kernel.asm	/^ffff800000105c09:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105c10	kernel.asm	/^ffff800000105c10:	80 ff ff $/;"	l
ffff800000105c13	kernel.asm	/^ffff800000105c13:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105c15	kernel.asm	/^ffff800000105c15:	83 f8 07             	cmp    $0x7,%eax$/;"	l
ffff800000105c18	kernel.asm	/^ffff800000105c18:	7f 5c                	jg     ffff800000105c76 <mpinit+0x137>$/;"	l
ffff800000105c1a	kernel.asm	/^ffff800000105c1a:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105c21	kernel.asm	/^ffff800000105c21:	80 ff ff $/;"	l
ffff800000105c24	kernel.asm	/^ffff800000105c24:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000105c26	kernel.asm	/^ffff800000105c26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105c2a	kernel.asm	/^ffff800000105c2a:	0f b6 48 01          	movzbl 0x1(%rax),%ecx$/;"	l
ffff800000105c2e	kernel.asm	/^ffff800000105c2e:	48 be 80 a3 11 00 00 	movabs $0xffff80000011a380,%rsi$/;"	l
ffff800000105c35	kernel.asm	/^ffff800000105c35:	80 ff ff $/;"	l
ffff800000105c38	kernel.asm	/^ffff800000105c38:	48 63 c2             	movslq %edx,%rax$/;"	l
ffff800000105c3b	kernel.asm	/^ffff800000105c3b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105c3e	kernel.asm	/^ffff800000105c3e:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000105c41	kernel.asm	/^ffff800000105c41:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff800000105c45	kernel.asm	/^ffff800000105c45:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105c48	kernel.asm	/^ffff800000105c48:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000105c4b	kernel.asm	/^ffff800000105c4b:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff800000105c4f	kernel.asm	/^ffff800000105c4f:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff800000105c52	kernel.asm	/^ffff800000105c52:	48 01 f0             	add    %rsi,%rax$/;"	l
ffff800000105c55	kernel.asm	/^ffff800000105c55:	48 83 c0 01          	add    $0x1,%rax$/;"	l
ffff800000105c59	kernel.asm	/^ffff800000105c59:	88 08                	mov    %cl,(%rax)$/;"	l
ffff800000105c5b	kernel.asm	/^ffff800000105c5b:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105c62	kernel.asm	/^ffff800000105c62:	80 ff ff $/;"	l
ffff800000105c65	kernel.asm	/^ffff800000105c65:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105c67	kernel.asm	/^ffff800000105c67:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff800000105c6a	kernel.asm	/^ffff800000105c6a:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105c71	kernel.asm	/^ffff800000105c71:	80 ff ff $/;"	l
ffff800000105c74	kernel.asm	/^ffff800000105c74:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000105c76	kernel.asm	/^ffff800000105c76:	48 83 45 f8 14       	addq   $0x14,-0x8(%rbp)$/;"	l
ffff800000105c7b	kernel.asm	/^ffff800000105c7b:	eb 40                	jmp    ffff800000105cbd <mpinit+0x17e>$/;"	l
ffff800000105c7d	kernel.asm	/^ffff800000105c7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105c81	kernel.asm	/^ffff800000105c81:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff800000105c85	kernel.asm	/^ffff800000105c85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000105c89	kernel.asm	/^ffff800000105c89:	0f b6 50 01          	movzbl 0x1(%rax),%edx$/;"	l
ffff800000105c8d	kernel.asm	/^ffff800000105c8d:	48 b8 04 ab 11 00 00 	movabs $0xffff80000011ab04,%rax$/;"	l
ffff800000105c94	kernel.asm	/^ffff800000105c94:	80 ff ff $/;"	l
ffff800000105c97	kernel.asm	/^ffff800000105c97:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000105c99	kernel.asm	/^ffff800000105c99:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105c9e	kernel.asm	/^ffff800000105c9e:	eb 1d                	jmp    ffff800000105cbd <mpinit+0x17e>$/;"	l
ffff800000105ca0	kernel.asm	/^ffff800000105ca0:	48 83 45 f8 08       	addq   $0x8,-0x8(%rbp)$/;"	l
ffff800000105ca5	kernel.asm	/^ffff800000105ca5:	eb 16                	jmp    ffff800000105cbd <mpinit+0x17e>$/;"	l
ffff800000105ca7	kernel.asm	/^ffff800000105ca7:	48 bf 60 cf 10 00 00 	movabs $0xffff80000010cf60,%rdi$/;"	l
ffff800000105cae	kernel.asm	/^ffff800000105cae:	80 ff ff $/;"	l
ffff800000105cb1	kernel.asm	/^ffff800000105cb1:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000105cb8	kernel.asm	/^ffff800000105cb8:	80 ff ff $/;"	l
ffff800000105cbb	kernel.asm	/^ffff800000105cbb:	ff d0                	callq  *%rax$/;"	l
ffff800000105cbd	kernel.asm	/^ffff800000105cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105cc1	kernel.asm	/^ffff800000105cc1:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000105cc5	kernel.asm	/^ffff800000105cc5:	0f 82 07 ff ff ff    	jb     ffff800000105bd2 <mpinit+0x93>$/;"	l
ffff800000105ccb	kernel.asm	/^ffff800000105ccb:	48 b8 00 ab 11 00 00 	movabs $0xffff80000011ab00,%rax$/;"	l
ffff800000105cd2	kernel.asm	/^ffff800000105cd2:	80 ff ff $/;"	l
ffff800000105cd5	kernel.asm	/^ffff800000105cd5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000105cd7	kernel.asm	/^ffff800000105cd7:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105cd9	kernel.asm	/^ffff800000105cd9:	48 bf 81 cf 10 00 00 	movabs $0xffff80000010cf81,%rdi$/;"	l
ffff800000105ce0	kernel.asm	/^ffff800000105ce0:	80 ff ff $/;"	l
ffff800000105ce3	kernel.asm	/^ffff800000105ce3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105ce8	kernel.asm	/^ffff800000105ce8:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000105cef	kernel.asm	/^ffff800000105cef:	80 ff ff $/;"	l
ffff800000105cf2	kernel.asm	/^ffff800000105cf2:	ff d2                	callq  *%rdx$/;"	l
ffff800000105cf4	kernel.asm	/^ffff800000105cf4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff800000105cf8	kernel.asm	/^ffff800000105cf8:	0f b6 40 0c          	movzbl 0xc(%rax),%eax$/;"	l
ffff800000105cfc	kernel.asm	/^ffff800000105cfc:	84 c0                	test   %al,%al$/;"	l
ffff800000105cfe	kernel.asm	/^ffff800000105cfe:	74 40                	je     ffff800000105d40 <mpinit+0x201>$/;"	l
ffff800000105d00	kernel.asm	/^ffff800000105d00:	be 70 00 00 00       	mov    $0x70,%esi$/;"	l
ffff800000105d05	kernel.asm	/^ffff800000105d05:	bf 22 00 00 00       	mov    $0x22,%edi$/;"	l
ffff800000105d0a	kernel.asm	/^ffff800000105d0a:	48 b8 86 58 10 00 00 	movabs $0xffff800000105886,%rax$/;"	l
ffff800000105d11	kernel.asm	/^ffff800000105d11:	80 ff ff $/;"	l
ffff800000105d14	kernel.asm	/^ffff800000105d14:	ff d0                	callq  *%rax$/;"	l
ffff800000105d16	kernel.asm	/^ffff800000105d16:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105d1b	kernel.asm	/^ffff800000105d1b:	48 b8 68 58 10 00 00 	movabs $0xffff800000105868,%rax$/;"	l
ffff800000105d22	kernel.asm	/^ffff800000105d22:	80 ff ff $/;"	l
ffff800000105d25	kernel.asm	/^ffff800000105d25:	ff d0                	callq  *%rax$/;"	l
ffff800000105d27	kernel.asm	/^ffff800000105d27:	83 c8 01             	or     $0x1,%eax$/;"	l
ffff800000105d2a	kernel.asm	/^ffff800000105d2a:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000105d2d	kernel.asm	/^ffff800000105d2d:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000105d2f	kernel.asm	/^ffff800000105d2f:	bf 23 00 00 00       	mov    $0x23,%edi$/;"	l
ffff800000105d34	kernel.asm	/^ffff800000105d34:	48 b8 86 58 10 00 00 	movabs $0xffff800000105886,%rax$/;"	l
ffff800000105d3b	kernel.asm	/^ffff800000105d3b:	80 ff ff $/;"	l
ffff800000105d3e	kernel.asm	/^ffff800000105d3e:	ff d0                	callq  *%rax$/;"	l
ffff800000105d40	kernel.asm	/^ffff800000105d40:	c9                   	leaveq $/;"	l
ffff800000105d41	kernel.asm	/^ffff800000105d41:	c3                   	retq   $/;"	l
ffff800000105d42	kernel.asm	/^ffff800000105d42 <pipealloc>:$/;"	l
ffff800000105d42	kernel.asm	/^ffff800000105d42:	55                   	push   %rbp$/;"	l
ffff800000105d43	kernel.asm	/^ffff800000105d43:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105d46	kernel.asm	/^ffff800000105d46:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000105d4a	kernel.asm	/^ffff800000105d4a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105d4e	kernel.asm	/^ffff800000105d4e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105d52	kernel.asm	/^ffff800000105d52:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105d59	kernel.asm	/^ffff800000105d59:	00 $/;"	l
ffff800000105d5a	kernel.asm	/^ffff800000105d5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105d5e	kernel.asm	/^ffff800000105d5e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000105d65	kernel.asm	/^ffff800000105d65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105d69	kernel.asm	/^ffff800000105d69:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000105d6c	kernel.asm	/^ffff800000105d6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105d70	kernel.asm	/^ffff800000105d70:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105d73	kernel.asm	/^ffff800000105d73:	48 b8 42 1c 10 00 00 	movabs $0xffff800000101c42,%rax$/;"	l
ffff800000105d7a	kernel.asm	/^ffff800000105d7a:	80 ff ff $/;"	l
ffff800000105d7d	kernel.asm	/^ffff800000105d7d:	ff d0                	callq  *%rax$/;"	l
ffff800000105d7f	kernel.asm	/^ffff800000105d7f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105d82	kernel.asm	/^ffff800000105d82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105d86	kernel.asm	/^ffff800000105d86:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105d89	kernel.asm	/^ffff800000105d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105d8d	kernel.asm	/^ffff800000105d8d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105d90	kernel.asm	/^ffff800000105d90:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105d93	kernel.asm	/^ffff800000105d93:	0f 84 02 01 00 00    	je     ffff800000105e9b <pipealloc+0x159>$/;"	l
ffff800000105d99	kernel.asm	/^ffff800000105d99:	48 b8 42 1c 10 00 00 	movabs $0xffff800000101c42,%rax$/;"	l
ffff800000105da0	kernel.asm	/^ffff800000105da0:	80 ff ff $/;"	l
ffff800000105da3	kernel.asm	/^ffff800000105da3:	ff d0                	callq  *%rax$/;"	l
ffff800000105da5	kernel.asm	/^ffff800000105da5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000105da8	kernel.asm	/^ffff800000105da8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105dac	kernel.asm	/^ffff800000105dac:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000105daf	kernel.asm	/^ffff800000105daf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105db3	kernel.asm	/^ffff800000105db3:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105db6	kernel.asm	/^ffff800000105db6:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105db9	kernel.asm	/^ffff800000105db9:	0f 84 dc 00 00 00    	je     ffff800000105e9b <pipealloc+0x159>$/;"	l
ffff800000105dbf	kernel.asm	/^ffff800000105dbf:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff800000105dc6	kernel.asm	/^ffff800000105dc6:	80 ff ff $/;"	l
ffff800000105dc9	kernel.asm	/^ffff800000105dc9:	ff d0                	callq  *%rax$/;"	l
ffff800000105dcb	kernel.asm	/^ffff800000105dcb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000105dcf	kernel.asm	/^ffff800000105dcf:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105dd4	kernel.asm	/^ffff800000105dd4:	0f 84 c0 00 00 00    	je     ffff800000105e9a <pipealloc+0x158>$/;"	l
ffff800000105dda	kernel.asm	/^ffff800000105dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dde	kernel.asm	/^ffff800000105dde:	c7 80 70 02 00 00 01 	movl   $0x1,0x270(%rax)$/;"	l
ffff800000105de5	kernel.asm	/^ffff800000105de5:	00 00 00 $/;"	l
ffff800000105de8	kernel.asm	/^ffff800000105de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dec	kernel.asm	/^ffff800000105dec:	c7 80 74 02 00 00 01 	movl   $0x1,0x274(%rax)$/;"	l
ffff800000105df3	kernel.asm	/^ffff800000105df3:	00 00 00 $/;"	l
ffff800000105df6	kernel.asm	/^ffff800000105df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105dfa	kernel.asm	/^ffff800000105dfa:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)$/;"	l
ffff800000105e01	kernel.asm	/^ffff800000105e01:	00 00 00 $/;"	l
ffff800000105e04	kernel.asm	/^ffff800000105e04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105e08	kernel.asm	/^ffff800000105e08:	c7 80 68 02 00 00 00 	movl   $0x0,0x268(%rax)$/;"	l
ffff800000105e0f	kernel.asm	/^ffff800000105e0f:	00 00 00 $/;"	l
ffff800000105e12	kernel.asm	/^ffff800000105e12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105e16	kernel.asm	/^ffff800000105e16:	48 be c8 cf 10 00 00 	movabs $0xffff80000010cfc8,%rsi$/;"	l
ffff800000105e1d	kernel.asm	/^ffff800000105e1d:	80 ff ff $/;"	l
ffff800000105e20	kernel.asm	/^ffff800000105e20:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105e23	kernel.asm	/^ffff800000105e23:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000105e2a	kernel.asm	/^ffff800000105e2a:	80 ff ff $/;"	l
ffff800000105e2d	kernel.asm	/^ffff800000105e2d:	ff d0                	callq  *%rax$/;"	l
ffff800000105e2f	kernel.asm	/^ffff800000105e2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e33	kernel.asm	/^ffff800000105e33:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e36	kernel.asm	/^ffff800000105e36:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105e3c	kernel.asm	/^ffff800000105e3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e40	kernel.asm	/^ffff800000105e40:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e43	kernel.asm	/^ffff800000105e43:	c6 40 08 01          	movb   $0x1,0x8(%rax)$/;"	l
ffff800000105e47	kernel.asm	/^ffff800000105e47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e4b	kernel.asm	/^ffff800000105e4b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e4e	kernel.asm	/^ffff800000105e4e:	c6 40 09 00          	movb   $0x0,0x9(%rax)$/;"	l
ffff800000105e52	kernel.asm	/^ffff800000105e52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105e56	kernel.asm	/^ffff800000105e56:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e59	kernel.asm	/^ffff800000105e59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105e5d	kernel.asm	/^ffff800000105e5d:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105e61	kernel.asm	/^ffff800000105e61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105e65	kernel.asm	/^ffff800000105e65:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e68	kernel.asm	/^ffff800000105e68:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000105e6e	kernel.asm	/^ffff800000105e6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105e72	kernel.asm	/^ffff800000105e72:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e75	kernel.asm	/^ffff800000105e75:	c6 40 08 00          	movb   $0x0,0x8(%rax)$/;"	l
ffff800000105e79	kernel.asm	/^ffff800000105e79:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105e7d	kernel.asm	/^ffff800000105e7d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e80	kernel.asm	/^ffff800000105e80:	c6 40 09 01          	movb   $0x1,0x9(%rax)$/;"	l
ffff800000105e84	kernel.asm	/^ffff800000105e84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105e88	kernel.asm	/^ffff800000105e88:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105e8b	kernel.asm	/^ffff800000105e8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000105e8f	kernel.asm	/^ffff800000105e8f:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000105e93	kernel.asm	/^ffff800000105e93:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000105e98	kernel.asm	/^ffff800000105e98:	eb 64                	jmp    ffff800000105efe <pipealloc+0x1bc>$/;"	l
ffff800000105e9a	kernel.asm	/^ffff800000105e9a:	90                   	nop$/;"	l
ffff800000105e9b	kernel.asm	/^ffff800000105e9b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000105ea0	kernel.asm	/^ffff800000105ea0:	74 13                	je     ffff800000105eb5 <pipealloc+0x173>$/;"	l
ffff800000105ea2	kernel.asm	/^ffff800000105ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105ea6	kernel.asm	/^ffff800000105ea6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ea9	kernel.asm	/^ffff800000105ea9:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff800000105eb0	kernel.asm	/^ffff800000105eb0:	80 ff ff $/;"	l
ffff800000105eb3	kernel.asm	/^ffff800000105eb3:	ff d0                	callq  *%rax$/;"	l
ffff800000105eb5	kernel.asm	/^ffff800000105eb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105eb9	kernel.asm	/^ffff800000105eb9:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105ebc	kernel.asm	/^ffff800000105ebc:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105ebf	kernel.asm	/^ffff800000105ebf:	74 16                	je     ffff800000105ed7 <pipealloc+0x195>$/;"	l
ffff800000105ec1	kernel.asm	/^ffff800000105ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105ec5	kernel.asm	/^ffff800000105ec5:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105ec8	kernel.asm	/^ffff800000105ec8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105ecb	kernel.asm	/^ffff800000105ecb:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff800000105ed2	kernel.asm	/^ffff800000105ed2:	80 ff ff $/;"	l
ffff800000105ed5	kernel.asm	/^ffff800000105ed5:	ff d0                	callq  *%rax$/;"	l
ffff800000105ed7	kernel.asm	/^ffff800000105ed7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105edb	kernel.asm	/^ffff800000105edb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105ede	kernel.asm	/^ffff800000105ede:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000105ee1	kernel.asm	/^ffff800000105ee1:	74 16                	je     ffff800000105ef9 <pipealloc+0x1b7>$/;"	l
ffff800000105ee3	kernel.asm	/^ffff800000105ee3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000105ee7	kernel.asm	/^ffff800000105ee7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000105eea	kernel.asm	/^ffff800000105eea:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105eed	kernel.asm	/^ffff800000105eed:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff800000105ef4	kernel.asm	/^ffff800000105ef4:	80 ff ff $/;"	l
ffff800000105ef7	kernel.asm	/^ffff800000105ef7:	ff d0                	callq  *%rax$/;"	l
ffff800000105ef9	kernel.asm	/^ffff800000105ef9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000105efe	kernel.asm	/^ffff800000105efe:	c9                   	leaveq $/;"	l
ffff800000105eff	kernel.asm	/^ffff800000105eff:	c3                   	retq   $/;"	l
ffff800000105f00	kernel.asm	/^ffff800000105f00 <pipeclose>:$/;"	l
ffff800000105f00	kernel.asm	/^ffff800000105f00:	55                   	push   %rbp$/;"	l
ffff800000105f01	kernel.asm	/^ffff800000105f01:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105f04	kernel.asm	/^ffff800000105f04:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000105f08	kernel.asm	/^ffff800000105f08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000105f0c	kernel.asm	/^ffff800000105f0c:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000105f0f	kernel.asm	/^ffff800000105f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f13	kernel.asm	/^ffff800000105f13:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f16	kernel.asm	/^ffff800000105f16:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000105f1d	kernel.asm	/^ffff800000105f1d:	80 ff ff $/;"	l
ffff800000105f20	kernel.asm	/^ffff800000105f20:	ff d0                	callq  *%rax$/;"	l
ffff800000105f22	kernel.asm	/^ffff800000105f22:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff800000105f26	kernel.asm	/^ffff800000105f26:	74 29                	je     ffff800000105f51 <pipeclose+0x51>$/;"	l
ffff800000105f28	kernel.asm	/^ffff800000105f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f2c	kernel.asm	/^ffff800000105f2c:	c7 80 74 02 00 00 00 	movl   $0x0,0x274(%rax)$/;"	l
ffff800000105f33	kernel.asm	/^ffff800000105f33:	00 00 00 $/;"	l
ffff800000105f36	kernel.asm	/^ffff800000105f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f3a	kernel.asm	/^ffff800000105f3a:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff800000105f40	kernel.asm	/^ffff800000105f40:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f43	kernel.asm	/^ffff800000105f43:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff800000105f4a	kernel.asm	/^ffff800000105f4a:	80 ff ff $/;"	l
ffff800000105f4d	kernel.asm	/^ffff800000105f4d:	ff d0                	callq  *%rax$/;"	l
ffff800000105f4f	kernel.asm	/^ffff800000105f4f:	eb 27                	jmp    ffff800000105f78 <pipeclose+0x78>$/;"	l
ffff800000105f51	kernel.asm	/^ffff800000105f51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f55	kernel.asm	/^ffff800000105f55:	c7 80 70 02 00 00 00 	movl   $0x0,0x270(%rax)$/;"	l
ffff800000105f5c	kernel.asm	/^ffff800000105f5c:	00 00 00 $/;"	l
ffff800000105f5f	kernel.asm	/^ffff800000105f5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f63	kernel.asm	/^ffff800000105f63:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000105f69	kernel.asm	/^ffff800000105f69:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f6c	kernel.asm	/^ffff800000105f6c:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff800000105f73	kernel.asm	/^ffff800000105f73:	80 ff ff $/;"	l
ffff800000105f76	kernel.asm	/^ffff800000105f76:	ff d0                	callq  *%rax$/;"	l
ffff800000105f78	kernel.asm	/^ffff800000105f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f7c	kernel.asm	/^ffff800000105f7c:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff800000105f82	kernel.asm	/^ffff800000105f82:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105f84	kernel.asm	/^ffff800000105f84:	75 36                	jne    ffff800000105fbc <pipeclose+0xbc>$/;"	l
ffff800000105f86	kernel.asm	/^ffff800000105f86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f8a	kernel.asm	/^ffff800000105f8a:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff800000105f90	kernel.asm	/^ffff800000105f90:	85 c0                	test   %eax,%eax$/;"	l
ffff800000105f92	kernel.asm	/^ffff800000105f92:	75 28                	jne    ffff800000105fbc <pipeclose+0xbc>$/;"	l
ffff800000105f94	kernel.asm	/^ffff800000105f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105f98	kernel.asm	/^ffff800000105f98:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105f9b	kernel.asm	/^ffff800000105f9b:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000105fa2	kernel.asm	/^ffff800000105fa2:	80 ff ff $/;"	l
ffff800000105fa5	kernel.asm	/^ffff800000105fa5:	ff d0                	callq  *%rax$/;"	l
ffff800000105fa7	kernel.asm	/^ffff800000105fa7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105fab	kernel.asm	/^ffff800000105fab:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105fae	kernel.asm	/^ffff800000105fae:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff800000105fb5	kernel.asm	/^ffff800000105fb5:	80 ff ff $/;"	l
ffff800000105fb8	kernel.asm	/^ffff800000105fb8:	ff d0                	callq  *%rax$/;"	l
ffff800000105fba	kernel.asm	/^ffff800000105fba:	eb 13                	jmp    ffff800000105fcf <pipeclose+0xcf>$/;"	l
ffff800000105fbc	kernel.asm	/^ffff800000105fbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000105fc0	kernel.asm	/^ffff800000105fc0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105fc3	kernel.asm	/^ffff800000105fc3:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000105fca	kernel.asm	/^ffff800000105fca:	80 ff ff $/;"	l
ffff800000105fcd	kernel.asm	/^ffff800000105fcd:	ff d0                	callq  *%rax$/;"	l
ffff800000105fcf	kernel.asm	/^ffff800000105fcf:	90                   	nop$/;"	l
ffff800000105fd0	kernel.asm	/^ffff800000105fd0:	c9                   	leaveq $/;"	l
ffff800000105fd1	kernel.asm	/^ffff800000105fd1:	c3                   	retq   $/;"	l
ffff800000105fd2	kernel.asm	/^ffff800000105fd2 <pipewrite>:$/;"	l
ffff800000105fd2	kernel.asm	/^ffff800000105fd2:	55                   	push   %rbp$/;"	l
ffff800000105fd3	kernel.asm	/^ffff800000105fd3:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000105fd6	kernel.asm	/^ffff800000105fd6:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000105fda	kernel.asm	/^ffff800000105fda:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000105fde	kernel.asm	/^ffff800000105fde:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000105fe2	kernel.asm	/^ffff800000105fe2:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000105fe5	kernel.asm	/^ffff800000105fe5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000105fe9	kernel.asm	/^ffff800000105fe9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000105fec	kernel.asm	/^ffff800000105fec:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000105ff3	kernel.asm	/^ffff800000105ff3:	80 ff ff $/;"	l
ffff800000105ff6	kernel.asm	/^ffff800000105ff6:	ff d0                	callq  *%rax$/;"	l
ffff800000105ff8	kernel.asm	/^ffff800000105ff8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000105fff	kernel.asm	/^ffff800000105fff:	e9 d4 00 00 00       	jmpq   ffff8000001060d8 <pipewrite+0x106>$/;"	l
ffff800000106004	kernel.asm	/^ffff800000106004:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106008	kernel.asm	/^ffff800000106008:	8b 80 70 02 00 00    	mov    0x270(%rax),%eax$/;"	l
ffff80000010600e	kernel.asm	/^ffff80000010600e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106010	kernel.asm	/^ffff800000106010:	74 12                	je     ffff800000106024 <pipewrite+0x52>$/;"	l
ffff800000106012	kernel.asm	/^ffff800000106012:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106019	kernel.asm	/^ffff800000106019:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010601d	kernel.asm	/^ffff80000010601d:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000106020	kernel.asm	/^ffff800000106020:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106022	kernel.asm	/^ffff800000106022:	74 1d                	je     ffff800000106041 <pipewrite+0x6f>$/;"	l
ffff800000106024	kernel.asm	/^ffff800000106024:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106028	kernel.asm	/^ffff800000106028:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010602b	kernel.asm	/^ffff80000010602b:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106032	kernel.asm	/^ffff800000106032:	80 ff ff $/;"	l
ffff800000106035	kernel.asm	/^ffff800000106035:	ff d0                	callq  *%rax$/;"	l
ffff800000106037	kernel.asm	/^ffff800000106037:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010603c	kernel.asm	/^ffff80000010603c:	e9 ce 00 00 00       	jmpq   ffff80000010610f <pipewrite+0x13d>$/;"	l
ffff800000106041	kernel.asm	/^ffff800000106041:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106045	kernel.asm	/^ffff800000106045:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff80000010604b	kernel.asm	/^ffff80000010604b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010604e	kernel.asm	/^ffff80000010604e:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff800000106055	kernel.asm	/^ffff800000106055:	80 ff ff $/;"	l
ffff800000106058	kernel.asm	/^ffff800000106058:	ff d0                	callq  *%rax$/;"	l
ffff80000010605a	kernel.asm	/^ffff80000010605a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010605e	kernel.asm	/^ffff80000010605e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000106062	kernel.asm	/^ffff800000106062:	48 81 c2 6c 02 00 00 	add    $0x26c,%rdx$/;"	l
ffff800000106069	kernel.asm	/^ffff800000106069:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010606c	kernel.asm	/^ffff80000010606c:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff80000010606f	kernel.asm	/^ffff80000010606f:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000106076	kernel.asm	/^ffff800000106076:	80 ff ff $/;"	l
ffff800000106079	kernel.asm	/^ffff800000106079:	ff d0                	callq  *%rax$/;"	l
ffff80000010607b	kernel.asm	/^ffff80000010607b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010607f	kernel.asm	/^ffff80000010607f:	8b 90 6c 02 00 00    	mov    0x26c(%rax),%edx$/;"	l
ffff800000106085	kernel.asm	/^ffff800000106085:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106089	kernel.asm	/^ffff800000106089:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff80000010608f	kernel.asm	/^ffff80000010608f:	05 00 02 00 00       	add    $0x200,%eax$/;"	l
ffff800000106094	kernel.asm	/^ffff800000106094:	39 c2                	cmp    %eax,%edx$/;"	l
ffff800000106096	kernel.asm	/^ffff800000106096:	0f 84 68 ff ff ff    	je     ffff800000106004 <pipewrite+0x32>$/;"	l
ffff80000010609c	kernel.asm	/^ffff80000010609c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001060a0	kernel.asm	/^ffff8000001060a0:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff8000001060a6	kernel.asm	/^ffff8000001060a6:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001060a9	kernel.asm	/^ffff8000001060a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001060ad	kernel.asm	/^ffff8000001060ad:	89 8a 6c 02 00 00    	mov    %ecx,0x26c(%rdx)$/;"	l
ffff8000001060b3	kernel.asm	/^ffff8000001060b3:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001060b8	kernel.asm	/^ffff8000001060b8:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001060ba	kernel.asm	/^ffff8000001060ba:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001060bd	kernel.asm	/^ffff8000001060bd:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001060c0	kernel.asm	/^ffff8000001060c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001060c4	kernel.asm	/^ffff8000001060c4:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001060c7	kernel.asm	/^ffff8000001060c7:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff8000001060ca	kernel.asm	/^ffff8000001060ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001060ce	kernel.asm	/^ffff8000001060ce:	89 c9                	mov    %ecx,%ecx$/;"	l
ffff8000001060d0	kernel.asm	/^ffff8000001060d0:	88 54 08 68          	mov    %dl,0x68(%rax,%rcx,1)$/;"	l
ffff8000001060d4	kernel.asm	/^ffff8000001060d4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001060d8	kernel.asm	/^ffff8000001060d8:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001060db	kernel.asm	/^ffff8000001060db:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff8000001060de	kernel.asm	/^ffff8000001060de:	7c 9b                	jl     ffff80000010607b <pipewrite+0xa9>$/;"	l
ffff8000001060e0	kernel.asm	/^ffff8000001060e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001060e4	kernel.asm	/^ffff8000001060e4:	48 05 68 02 00 00    	add    $0x268,%rax$/;"	l
ffff8000001060ea	kernel.asm	/^ffff8000001060ea:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001060ed	kernel.asm	/^ffff8000001060ed:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff8000001060f4	kernel.asm	/^ffff8000001060f4:	80 ff ff $/;"	l
ffff8000001060f7	kernel.asm	/^ffff8000001060f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001060f9	kernel.asm	/^ffff8000001060f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001060fd	kernel.asm	/^ffff8000001060fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106100	kernel.asm	/^ffff800000106100:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106107	kernel.asm	/^ffff800000106107:	80 ff ff $/;"	l
ffff80000010610a	kernel.asm	/^ffff80000010610a:	ff d0                	callq  *%rax$/;"	l
ffff80000010610c	kernel.asm	/^ffff80000010610c:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff80000010610f	kernel.asm	/^ffff80000010610f:	c9                   	leaveq $/;"	l
ffff800000106110	kernel.asm	/^ffff800000106110:	c3                   	retq   $/;"	l
ffff800000106111	kernel.asm	/^ffff800000106111 <piperead>:$/;"	l
ffff800000106111	kernel.asm	/^ffff800000106111:	55                   	push   %rbp$/;"	l
ffff800000106112	kernel.asm	/^ffff800000106112:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106115	kernel.asm	/^ffff800000106115:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000106119	kernel.asm	/^ffff800000106119:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010611d	kernel.asm	/^ffff80000010611d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000106121	kernel.asm	/^ffff800000106121:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000106124	kernel.asm	/^ffff800000106124:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106128	kernel.asm	/^ffff800000106128:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010612b	kernel.asm	/^ffff80000010612b:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106132	kernel.asm	/^ffff800000106132:	80 ff ff $/;"	l
ffff800000106135	kernel.asm	/^ffff800000106135:	ff d0                	callq  *%rax$/;"	l
ffff800000106137	kernel.asm	/^ffff800000106137:	eb 50                	jmp    ffff800000106189 <piperead+0x78>$/;"	l
ffff800000106139	kernel.asm	/^ffff800000106139:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106140	kernel.asm	/^ffff800000106140:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106144	kernel.asm	/^ffff800000106144:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000106147	kernel.asm	/^ffff800000106147:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106149	kernel.asm	/^ffff800000106149:	74 1d                	je     ffff800000106168 <piperead+0x57>$/;"	l
ffff80000010614b	kernel.asm	/^ffff80000010614b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010614f	kernel.asm	/^ffff80000010614f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106152	kernel.asm	/^ffff800000106152:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106159	kernel.asm	/^ffff800000106159:	80 ff ff $/;"	l
ffff80000010615c	kernel.asm	/^ffff80000010615c:	ff d0                	callq  *%rax$/;"	l
ffff80000010615e	kernel.asm	/^ffff80000010615e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106163	kernel.asm	/^ffff800000106163:	e9 df 00 00 00       	jmpq   ffff800000106247 <piperead+0x136>$/;"	l
ffff800000106168	kernel.asm	/^ffff800000106168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010616c	kernel.asm	/^ffff80000010616c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000106170	kernel.asm	/^ffff800000106170:	48 81 c2 68 02 00 00 	add    $0x268,%rdx$/;"	l
ffff800000106177	kernel.asm	/^ffff800000106177:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010617a	kernel.asm	/^ffff80000010617a:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff80000010617d	kernel.asm	/^ffff80000010617d:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000106184	kernel.asm	/^ffff800000106184:	80 ff ff $/;"	l
ffff800000106187	kernel.asm	/^ffff800000106187:	ff d0                	callq  *%rax$/;"	l
ffff800000106189	kernel.asm	/^ffff800000106189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010618d	kernel.asm	/^ffff80000010618d:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff800000106193	kernel.asm	/^ffff800000106193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106197	kernel.asm	/^ffff800000106197:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff80000010619d	kernel.asm	/^ffff80000010619d:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010619f	kernel.asm	/^ffff80000010619f:	75 0e                	jne    ffff8000001061af <piperead+0x9e>$/;"	l
ffff8000001061a1	kernel.asm	/^ffff8000001061a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001061a5	kernel.asm	/^ffff8000001061a5:	8b 80 74 02 00 00    	mov    0x274(%rax),%eax$/;"	l
ffff8000001061ab	kernel.asm	/^ffff8000001061ab:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001061ad	kernel.asm	/^ffff8000001061ad:	75 8a                	jne    ffff800000106139 <piperead+0x28>$/;"	l
ffff8000001061af	kernel.asm	/^ffff8000001061af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff8000001061b6	kernel.asm	/^ffff8000001061b6:	eb 55                	jmp    ffff80000010620d <piperead+0xfc>$/;"	l
ffff8000001061b8	kernel.asm	/^ffff8000001061b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001061bc	kernel.asm	/^ffff8000001061bc:	8b 90 68 02 00 00    	mov    0x268(%rax),%edx$/;"	l
ffff8000001061c2	kernel.asm	/^ffff8000001061c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001061c6	kernel.asm	/^ffff8000001061c6:	8b 80 6c 02 00 00    	mov    0x26c(%rax),%eax$/;"	l
ffff8000001061cc	kernel.asm	/^ffff8000001061cc:	39 c2                	cmp    %eax,%edx$/;"	l
ffff8000001061ce	kernel.asm	/^ffff8000001061ce:	74 47                	je     ffff800000106217 <piperead+0x106>$/;"	l
ffff8000001061d0	kernel.asm	/^ffff8000001061d0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001061d3	kernel.asm	/^ffff8000001061d3:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff8000001061d6	kernel.asm	/^ffff8000001061d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001061da	kernel.asm	/^ffff8000001061da:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi$/;"	l
ffff8000001061de	kernel.asm	/^ffff8000001061de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001061e2	kernel.asm	/^ffff8000001061e2:	8b 80 68 02 00 00    	mov    0x268(%rax),%eax$/;"	l
ffff8000001061e8	kernel.asm	/^ffff8000001061e8:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff8000001061eb	kernel.asm	/^ffff8000001061eb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001061ef	kernel.asm	/^ffff8000001061ef:	89 8a 68 02 00 00    	mov    %ecx,0x268(%rdx)$/;"	l
ffff8000001061f5	kernel.asm	/^ffff8000001061f5:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff8000001061fa	kernel.asm	/^ffff8000001061fa:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001061fc	kernel.asm	/^ffff8000001061fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106200	kernel.asm	/^ffff800000106200:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000106202	kernel.asm	/^ffff800000106202:	0f b6 44 10 68       	movzbl 0x68(%rax,%rdx,1),%eax$/;"	l
ffff800000106207	kernel.asm	/^ffff800000106207:	88 06                	mov    %al,(%rsi)$/;"	l
ffff800000106209	kernel.asm	/^ffff800000106209:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010620d	kernel.asm	/^ffff80000010620d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000106210	kernel.asm	/^ffff800000106210:	3b 45 dc             	cmp    -0x24(%rbp),%eax$/;"	l
ffff800000106213	kernel.asm	/^ffff800000106213:	7c a3                	jl     ffff8000001061b8 <piperead+0xa7>$/;"	l
ffff800000106215	kernel.asm	/^ffff800000106215:	eb 01                	jmp    ffff800000106218 <piperead+0x107>$/;"	l
ffff800000106217	kernel.asm	/^ffff800000106217:	90                   	nop$/;"	l
ffff800000106218	kernel.asm	/^ffff800000106218:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010621c	kernel.asm	/^ffff80000010621c:	48 05 6c 02 00 00    	add    $0x26c,%rax$/;"	l
ffff800000106222	kernel.asm	/^ffff800000106222:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106225	kernel.asm	/^ffff800000106225:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff80000010622c	kernel.asm	/^ffff80000010622c:	80 ff ff $/;"	l
ffff80000010622f	kernel.asm	/^ffff80000010622f:	ff d0                	callq  *%rax$/;"	l
ffff800000106231	kernel.asm	/^ffff800000106231:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000106235	kernel.asm	/^ffff800000106235:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106238	kernel.asm	/^ffff800000106238:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010623f	kernel.asm	/^ffff80000010623f:	80 ff ff $/;"	l
ffff800000106242	kernel.asm	/^ffff800000106242:	ff d0                	callq  *%rax$/;"	l
ffff800000106244	kernel.asm	/^ffff800000106244:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000106247	kernel.asm	/^ffff800000106247:	c9                   	leaveq $/;"	l
ffff800000106248	kernel.asm	/^ffff800000106248:	c3                   	retq   $/;"	l
ffff800000106249	kernel.asm	/^ffff800000106249 <readeflags>:$/;"	l
ffff800000106249	kernel.asm	/^ffff800000106249:	55                   	push   %rbp$/;"	l
ffff80000010624a	kernel.asm	/^ffff80000010624a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010624d	kernel.asm	/^ffff80000010624d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106251	kernel.asm	/^ffff800000106251:	9c                   	pushfq $/;"	l
ffff800000106252	kernel.asm	/^ffff800000106252:	58                   	pop    %rax$/;"	l
ffff800000106253	kernel.asm	/^ffff800000106253:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106257	kernel.asm	/^ffff800000106257:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010625b	kernel.asm	/^ffff80000010625b:	c9                   	leaveq $/;"	l
ffff80000010625c	kernel.asm	/^ffff80000010625c:	c3                   	retq   $/;"	l
ffff80000010625d	kernel.asm	/^ffff80000010625d <sti>:$/;"	l
ffff80000010625d	kernel.asm	/^ffff80000010625d:	55                   	push   %rbp$/;"	l
ffff80000010625e	kernel.asm	/^ffff80000010625e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106261	kernel.asm	/^ffff800000106261:	fb                   	sti    $/;"	l
ffff800000106262	kernel.asm	/^ffff800000106262:	90                   	nop$/;"	l
ffff800000106263	kernel.asm	/^ffff800000106263:	5d                   	pop    %rbp$/;"	l
ffff800000106264	kernel.asm	/^ffff800000106264:	c3                   	retq   $/;"	l
ffff800000106265	kernel.asm	/^ffff800000106265 <pinit>:$/;"	l
ffff800000106265	kernel.asm	/^ffff800000106265:	55                   	push   %rbp$/;"	l
ffff800000106266	kernel.asm	/^ffff800000106266:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106269	kernel.asm	/^ffff800000106269:	48 be cd cf 10 00 00 	movabs $0xffff80000010cfcd,%rsi$/;"	l
ffff800000106270	kernel.asm	/^ffff800000106270:	80 ff ff $/;"	l
ffff800000106273	kernel.asm	/^ffff800000106273:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff80000010627a	kernel.asm	/^ffff80000010627a:	80 ff ff $/;"	l
ffff80000010627d	kernel.asm	/^ffff80000010627d:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff800000106284	kernel.asm	/^ffff800000106284:	80 ff ff $/;"	l
ffff800000106287	kernel.asm	/^ffff800000106287:	ff d0                	callq  *%rax$/;"	l
ffff800000106289	kernel.asm	/^ffff800000106289:	90                   	nop$/;"	l
ffff80000010628a	kernel.asm	/^ffff80000010628a:	5d                   	pop    %rbp$/;"	l
ffff80000010628b	kernel.asm	/^ffff80000010628b:	c3                   	retq   $/;"	l
ffff80000010628c	kernel.asm	/^ffff80000010628c <allocproc>:$/;"	l
ffff80000010628c	kernel.asm	/^ffff80000010628c:	55                   	push   %rbp$/;"	l
ffff80000010628d	kernel.asm	/^ffff80000010628d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106290	kernel.asm	/^ffff800000106290:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106294	kernel.asm	/^ffff800000106294:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff80000010629b	kernel.asm	/^ffff80000010629b:	80 ff ff $/;"	l
ffff80000010629e	kernel.asm	/^ffff80000010629e:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001062a5	kernel.asm	/^ffff8000001062a5:	80 ff ff $/;"	l
ffff8000001062a8	kernel.asm	/^ffff8000001062a8:	ff d0                	callq  *%rax$/;"	l
ffff8000001062aa	kernel.asm	/^ffff8000001062aa:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff8000001062b1	kernel.asm	/^ffff8000001062b1:	80 ff ff $/;"	l
ffff8000001062b4	kernel.asm	/^ffff8000001062b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001062b8	kernel.asm	/^ffff8000001062b8:	eb 13                	jmp    ffff8000001062cd <allocproc+0x41>$/;"	l
ffff8000001062ba	kernel.asm	/^ffff8000001062ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001062be	kernel.asm	/^ffff8000001062be:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001062c1	kernel.asm	/^ffff8000001062c1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001062c3	kernel.asm	/^ffff8000001062c3:	74 38                	je     ffff8000001062fd <allocproc+0x71>$/;"	l
ffff8000001062c5	kernel.asm	/^ffff8000001062c5:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff8000001062cc	kernel.asm	/^ffff8000001062cc:	00 $/;"	l
ffff8000001062cd	kernel.asm	/^ffff8000001062cd:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff8000001062d4	kernel.asm	/^ffff8000001062d4:	80 ff ff $/;"	l
ffff8000001062d7	kernel.asm	/^ffff8000001062d7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff8000001062db	kernel.asm	/^ffff8000001062db:	72 dd                	jb     ffff8000001062ba <allocproc+0x2e>$/;"	l
ffff8000001062dd	kernel.asm	/^ffff8000001062dd:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff8000001062e4	kernel.asm	/^ffff8000001062e4:	80 ff ff $/;"	l
ffff8000001062e7	kernel.asm	/^ffff8000001062e7:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001062ee	kernel.asm	/^ffff8000001062ee:	80 ff ff $/;"	l
ffff8000001062f1	kernel.asm	/^ffff8000001062f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001062f3	kernel.asm	/^ffff8000001062f3:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001062f8	kernel.asm	/^ffff8000001062f8:	e9 05 01 00 00       	jmpq   ffff800000106402 <allocproc+0x176>$/;"	l
ffff8000001062fd	kernel.asm	/^ffff8000001062fd:	90                   	nop$/;"	l
ffff8000001062fe	kernel.asm	/^ffff8000001062fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106302	kernel.asm	/^ffff800000106302:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%rax)$/;"	l
ffff800000106309	kernel.asm	/^ffff800000106309:	48 b8 40 e5 10 00 00 	movabs $0xffff80000010e540,%rax$/;"	l
ffff800000106310	kernel.asm	/^ffff800000106310:	80 ff ff $/;"	l
ffff800000106313	kernel.asm	/^ffff800000106313:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000106315	kernel.asm	/^ffff800000106315:	8d 48 01             	lea    0x1(%rax),%ecx$/;"	l
ffff800000106318	kernel.asm	/^ffff800000106318:	48 ba 40 e5 10 00 00 	movabs $0xffff80000010e540,%rdx$/;"	l
ffff80000010631f	kernel.asm	/^ffff80000010631f:	80 ff ff $/;"	l
ffff800000106322	kernel.asm	/^ffff800000106322:	89 0a                	mov    %ecx,(%rdx)$/;"	l
ffff800000106324	kernel.asm	/^ffff800000106324:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106328	kernel.asm	/^ffff800000106328:	89 42 1c             	mov    %eax,0x1c(%rdx)$/;"	l
ffff80000010632b	kernel.asm	/^ffff80000010632b:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106332	kernel.asm	/^ffff800000106332:	80 ff ff $/;"	l
ffff800000106335	kernel.asm	/^ffff800000106335:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010633c	kernel.asm	/^ffff80000010633c:	80 ff ff $/;"	l
ffff80000010633f	kernel.asm	/^ffff80000010633f:	ff d0                	callq  *%rax$/;"	l
ffff800000106341	kernel.asm	/^ffff800000106341:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff800000106348	kernel.asm	/^ffff800000106348:	80 ff ff $/;"	l
ffff80000010634b	kernel.asm	/^ffff80000010634b:	ff d0                	callq  *%rax$/;"	l
ffff80000010634d	kernel.asm	/^ffff80000010634d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106350	kernel.asm	/^ffff800000106350:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106354	kernel.asm	/^ffff800000106354:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000106358	kernel.asm	/^ffff800000106358:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010635c	kernel.asm	/^ffff80000010635c:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106360	kernel.asm	/^ffff800000106360:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106363	kernel.asm	/^ffff800000106363:	75 15                	jne    ffff80000010637a <allocproc+0xee>$/;"	l
ffff800000106365	kernel.asm	/^ffff800000106365:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106369	kernel.asm	/^ffff800000106369:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106370	kernel.asm	/^ffff800000106370:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106375	kernel.asm	/^ffff800000106375:	e9 88 00 00 00       	jmpq   ffff800000106402 <allocproc+0x176>$/;"	l
ffff80000010637a	kernel.asm	/^ffff80000010637a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010637e	kernel.asm	/^ffff80000010637e:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106382	kernel.asm	/^ffff800000106382:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff800000106388	kernel.asm	/^ffff800000106388:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010638c	kernel.asm	/^ffff80000010638c:	48 81 6d f0 b0 00 00 	subq   $0xb0,-0x10(%rbp)$/;"	l
ffff800000106393	kernel.asm	/^ffff800000106393:	00 $/;"	l
ffff800000106394	kernel.asm	/^ffff800000106394:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106398	kernel.asm	/^ffff800000106398:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010639c	kernel.asm	/^ffff80000010639c:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff8000001063a0	kernel.asm	/^ffff8000001063a0:	48 83 6d f0 08       	subq   $0x8,-0x10(%rbp)$/;"	l
ffff8000001063a5	kernel.asm	/^ffff8000001063a5:	48 ba 5f 95 10 00 00 	movabs $0xffff80000010955f,%rdx$/;"	l
ffff8000001063ac	kernel.asm	/^ffff8000001063ac:	80 ff ff $/;"	l
ffff8000001063af	kernel.asm	/^ffff8000001063af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001063b3	kernel.asm	/^ffff8000001063b3:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff8000001063b6	kernel.asm	/^ffff8000001063b6:	48 83 6d f0 40       	subq   $0x40,-0x10(%rbp)$/;"	l
ffff8000001063bb	kernel.asm	/^ffff8000001063bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001063bf	kernel.asm	/^ffff8000001063bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001063c3	kernel.asm	/^ffff8000001063c3:	48 89 50 30          	mov    %rdx,0x30(%rax)$/;"	l
ffff8000001063c7	kernel.asm	/^ffff8000001063c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001063cb	kernel.asm	/^ffff8000001063cb:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff8000001063cf	kernel.asm	/^ffff8000001063cf:	ba 40 00 00 00       	mov    $0x40,%edx$/;"	l
ffff8000001063d4	kernel.asm	/^ffff8000001063d4:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001063d9	kernel.asm	/^ffff8000001063d9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001063dc	kernel.asm	/^ffff8000001063dc:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff8000001063e3	kernel.asm	/^ffff8000001063e3:	80 ff ff $/;"	l
ffff8000001063e6	kernel.asm	/^ffff8000001063e6:	ff d0                	callq  *%rax$/;"	l
ffff8000001063e8	kernel.asm	/^ffff8000001063e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001063ec	kernel.asm	/^ffff8000001063ec:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff8000001063f0	kernel.asm	/^ffff8000001063f0:	48 ba 7e 6e 10 00 00 	movabs $0xffff800000106e7e,%rdx$/;"	l
ffff8000001063f7	kernel.asm	/^ffff8000001063f7:	80 ff ff $/;"	l
ffff8000001063fa	kernel.asm	/^ffff8000001063fa:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff8000001063fe	kernel.asm	/^ffff8000001063fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106402	kernel.asm	/^ffff800000106402:	c9                   	leaveq $/;"	l
ffff800000106403	kernel.asm	/^ffff800000106403:	c3                   	retq   $/;"	l
ffff800000106404	kernel.asm	/^ffff800000106404 <userinit>:$/;"	l
ffff800000106404	kernel.asm	/^ffff800000106404:	55                   	push   %rbp$/;"	l
ffff800000106405	kernel.asm	/^ffff800000106405:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106408	kernel.asm	/^ffff800000106408:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010640c	kernel.asm	/^ffff80000010640c:	48 b8 8c 62 10 00 00 	movabs $0xffff80000010628c,%rax$/;"	l
ffff800000106413	kernel.asm	/^ffff800000106413:	80 ff ff $/;"	l
ffff800000106416	kernel.asm	/^ffff800000106416:	ff d0                	callq  *%rax$/;"	l
ffff800000106418	kernel.asm	/^ffff800000106418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010641c	kernel.asm	/^ffff80000010641c:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106423	kernel.asm	/^ffff800000106423:	80 ff ff $/;"	l
ffff800000106426	kernel.asm	/^ffff800000106426:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010642a	kernel.asm	/^ffff80000010642a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010642d	kernel.asm	/^ffff80000010642d:	48 b8 85 bd 10 00 00 	movabs $0xffff80000010bd85,%rax$/;"	l
ffff800000106434	kernel.asm	/^ffff800000106434:	80 ff ff $/;"	l
ffff800000106437	kernel.asm	/^ffff800000106437:	ff d0                	callq  *%rax$/;"	l
ffff800000106439	kernel.asm	/^ffff800000106439:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010643c	kernel.asm	/^ffff80000010643c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106440	kernel.asm	/^ffff800000106440:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff800000106444	kernel.asm	/^ffff800000106444:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106448	kernel.asm	/^ffff800000106448:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010644c	kernel.asm	/^ffff80000010644c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010644f	kernel.asm	/^ffff80000010644f:	75 16                	jne    ffff800000106467 <userinit+0x63>$/;"	l
ffff800000106451	kernel.asm	/^ffff800000106451:	48 bf d4 cf 10 00 00 	movabs $0xffff80000010cfd4,%rdi$/;"	l
ffff800000106458	kernel.asm	/^ffff800000106458:	80 ff ff $/;"	l
ffff80000010645b	kernel.asm	/^ffff80000010645b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106462	kernel.asm	/^ffff800000106462:	80 ff ff $/;"	l
ffff800000106465	kernel.asm	/^ffff800000106465:	ff d0                	callq  *%rax$/;"	l
ffff800000106467	kernel.asm	/^ffff800000106467:	48 b8 3c 00 00 00 00 	movabs $0x3c,%rax$/;"	l
ffff80000010646e	kernel.asm	/^ffff80000010646e:	00 00 00 $/;"	l
ffff800000106471	kernel.asm	/^ffff800000106471:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000106473	kernel.asm	/^ffff800000106473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106477	kernel.asm	/^ffff800000106477:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010647b	kernel.asm	/^ffff80000010647b:	48 be 60 02 11 00 00 	movabs $0xffff800000110260,%rsi$/;"	l
ffff800000106482	kernel.asm	/^ffff800000106482:	80 ff ff $/;"	l
ffff800000106485	kernel.asm	/^ffff800000106485:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106488	kernel.asm	/^ffff800000106488:	48 b8 05 c3 10 00 00 	movabs $0xffff80000010c305,%rax$/;"	l
ffff80000010648f	kernel.asm	/^ffff80000010648f:	80 ff ff $/;"	l
ffff800000106492	kernel.asm	/^ffff800000106492:	ff d0                	callq  *%rax$/;"	l
ffff800000106494	kernel.asm	/^ffff800000106494:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106498	kernel.asm	/^ffff800000106498:	48 c7 00 00 10 00 00 	movq   $0x1000,(%rax)$/;"	l
ffff80000010649f	kernel.asm	/^ffff80000010649f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001064a3	kernel.asm	/^ffff8000001064a3:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001064a7	kernel.asm	/^ffff8000001064a7:	ba b0 00 00 00       	mov    $0xb0,%edx$/;"	l
ffff8000001064ac	kernel.asm	/^ffff8000001064ac:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001064b1	kernel.asm	/^ffff8000001064b1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001064b4	kernel.asm	/^ffff8000001064b4:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff8000001064bb	kernel.asm	/^ffff8000001064bb:	80 ff ff $/;"	l
ffff8000001064be	kernel.asm	/^ffff8000001064be:	ff d0                	callq  *%rax$/;"	l
ffff8000001064c0	kernel.asm	/^ffff8000001064c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001064c4	kernel.asm	/^ffff8000001064c4:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001064c8	kernel.asm	/^ffff8000001064c8:	48 c7 80 90 00 00 00 	movq   $0x23,0x90(%rax)$/;"	l
ffff8000001064cf	kernel.asm	/^ffff8000001064cf:	23 00 00 00 $/;"	l
ffff8000001064d3	kernel.asm	/^ffff8000001064d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001064d7	kernel.asm	/^ffff8000001064d7:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001064db	kernel.asm	/^ffff8000001064db:	48 c7 80 a8 00 00 00 	movq   $0x2b,0xa8(%rax)$/;"	l
ffff8000001064e2	kernel.asm	/^ffff8000001064e2:	2b 00 00 00 $/;"	l
ffff8000001064e6	kernel.asm	/^ffff8000001064e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001064ea	kernel.asm	/^ffff8000001064ea:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff8000001064ee	kernel.asm	/^ffff8000001064ee:	48 c7 80 98 00 00 00 	movq   $0x200,0x98(%rax)$/;"	l
ffff8000001064f5	kernel.asm	/^ffff8000001064f5:	00 02 00 00 $/;"	l
ffff8000001064f9	kernel.asm	/^ffff8000001064f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001064fd	kernel.asm	/^ffff8000001064fd:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106501	kernel.asm	/^ffff800000106501:	48 c7 80 a0 00 00 00 	movq   $0x1000,0xa0(%rax)$/;"	l
ffff800000106508	kernel.asm	/^ffff800000106508:	00 10 00 00 $/;"	l
ffff80000010650c	kernel.asm	/^ffff80000010650c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106510	kernel.asm	/^ffff800000106510:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106514	kernel.asm	/^ffff800000106514:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)$/;"	l
ffff80000010651b	kernel.asm	/^ffff80000010651b:	00 00 00 00 $/;"	l
ffff80000010651f	kernel.asm	/^ffff80000010651f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106523	kernel.asm	/^ffff800000106523:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106527	kernel.asm	/^ffff800000106527:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff80000010652e	kernel.asm	/^ffff80000010652e:	00 $/;"	l
ffff80000010652f	kernel.asm	/^ffff80000010652f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106533	kernel.asm	/^ffff800000106533:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff800000106539	kernel.asm	/^ffff800000106539:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010653e	kernel.asm	/^ffff80000010653e:	48 be ed cf 10 00 00 	movabs $0xffff80000010cfed,%rsi$/;"	l
ffff800000106545	kernel.asm	/^ffff800000106545:	80 ff ff $/;"	l
ffff800000106548	kernel.asm	/^ffff800000106548:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010654b	kernel.asm	/^ffff80000010654b:	48 b8 18 7b 10 00 00 	movabs $0xffff800000107b18,%rax$/;"	l
ffff800000106552	kernel.asm	/^ffff800000106552:	80 ff ff $/;"	l
ffff800000106555	kernel.asm	/^ffff800000106555:	ff d0                	callq  *%rax$/;"	l
ffff800000106557	kernel.asm	/^ffff800000106557:	48 bf f6 cf 10 00 00 	movabs $0xffff80000010cff6,%rdi$/;"	l
ffff80000010655e	kernel.asm	/^ffff80000010655e:	80 ff ff $/;"	l
ffff800000106561	kernel.asm	/^ffff800000106561:	48 b8 4f 39 10 00 00 	movabs $0xffff80000010394f,%rax$/;"	l
ffff800000106568	kernel.asm	/^ffff800000106568:	80 ff ff $/;"	l
ffff80000010656b	kernel.asm	/^ffff80000010656b:	ff d0                	callq  *%rax$/;"	l
ffff80000010656d	kernel.asm	/^ffff80000010656d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106570	kernel.asm	/^ffff800000106570:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106574	kernel.asm	/^ffff800000106574:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff80000010657b	kernel.asm	/^ffff80000010657b:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106582	kernel.asm	/^ffff800000106582:	80 ff ff $/;"	l
ffff800000106585	kernel.asm	/^ffff800000106585:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff80000010658c	kernel.asm	/^ffff80000010658c:	80 ff ff $/;"	l
ffff80000010658f	kernel.asm	/^ffff80000010658f:	ff d0                	callq  *%rax$/;"	l
ffff800000106591	kernel.asm	/^ffff800000106591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106595	kernel.asm	/^ffff800000106595:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff80000010659c	kernel.asm	/^ffff80000010659c:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff8000001065a3	kernel.asm	/^ffff8000001065a3:	80 ff ff $/;"	l
ffff8000001065a6	kernel.asm	/^ffff8000001065a6:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001065ad	kernel.asm	/^ffff8000001065ad:	80 ff ff $/;"	l
ffff8000001065b0	kernel.asm	/^ffff8000001065b0:	ff d0                	callq  *%rax$/;"	l
ffff8000001065b2	kernel.asm	/^ffff8000001065b2:	90                   	nop$/;"	l
ffff8000001065b3	kernel.asm	/^ffff8000001065b3:	c9                   	leaveq $/;"	l
ffff8000001065b4	kernel.asm	/^ffff8000001065b4:	c3                   	retq   $/;"	l
ffff8000001065b5	kernel.asm	/^ffff8000001065b5 <growproc>:$/;"	l
ffff8000001065b5	kernel.asm	/^ffff8000001065b5:	55                   	push   %rbp$/;"	l
ffff8000001065b6	kernel.asm	/^ffff8000001065b6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001065b9	kernel.asm	/^ffff8000001065b9:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001065bd	kernel.asm	/^ffff8000001065bd:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001065c0	kernel.asm	/^ffff8000001065c0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065c7	kernel.asm	/^ffff8000001065c7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065cb	kernel.asm	/^ffff8000001065cb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001065ce	kernel.asm	/^ffff8000001065ce:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001065d1	kernel.asm	/^ffff8000001065d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff8000001065d5	kernel.asm	/^ffff8000001065d5:	7e 3b                	jle    ffff800000106612 <growproc+0x5d>$/;"	l
ffff8000001065d7	kernel.asm	/^ffff8000001065d7:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff8000001065da	kernel.asm	/^ffff8000001065da:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001065dd	kernel.asm	/^ffff8000001065dd:	01 c2                	add    %eax,%edx$/;"	l
ffff8000001065df	kernel.asm	/^ffff8000001065df:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001065e6	kernel.asm	/^ffff8000001065e6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001065ea	kernel.asm	/^ffff8000001065ea:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001065ee	kernel.asm	/^ffff8000001065ee:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff8000001065f1	kernel.asm	/^ffff8000001065f1:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001065f3	kernel.asm	/^ffff8000001065f3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001065f6	kernel.asm	/^ffff8000001065f6:	48 b8 dd c4 10 00 00 	movabs $0xffff80000010c4dd,%rax$/;"	l
ffff8000001065fd	kernel.asm	/^ffff8000001065fd:	80 ff ff $/;"	l
ffff800000106600	kernel.asm	/^ffff800000106600:	ff d0                	callq  *%rax$/;"	l
ffff800000106602	kernel.asm	/^ffff800000106602:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106605	kernel.asm	/^ffff800000106605:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000106609	kernel.asm	/^ffff800000106609:	75 4b                	jne    ffff800000106656 <growproc+0xa1>$/;"	l
ffff80000010660b	kernel.asm	/^ffff80000010660b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106610	kernel.asm	/^ffff800000106610:	eb 74                	jmp    ffff800000106686 <growproc+0xd1>$/;"	l
ffff800000106612	kernel.asm	/^ffff800000106612:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000106616	kernel.asm	/^ffff800000106616:	79 3e                	jns    ffff800000106656 <growproc+0xa1>$/;"	l
ffff800000106618	kernel.asm	/^ffff800000106618:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff80000010661b	kernel.asm	/^ffff80000010661b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010661e	kernel.asm	/^ffff80000010661e:	01 d0                	add    %edx,%eax$/;"	l
ffff800000106620	kernel.asm	/^ffff800000106620:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000106622	kernel.asm	/^ffff800000106622:	8b 4d fc             	mov    -0x4(%rbp),%ecx$/;"	l
ffff800000106625	kernel.asm	/^ffff800000106625:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010662c	kernel.asm	/^ffff80000010662c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106630	kernel.asm	/^ffff800000106630:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106634	kernel.asm	/^ffff800000106634:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000106637	kernel.asm	/^ffff800000106637:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010663a	kernel.asm	/^ffff80000010663a:	48 b8 31 c6 10 00 00 	movabs $0xffff80000010c631,%rax$/;"	l
ffff800000106641	kernel.asm	/^ffff800000106641:	80 ff ff $/;"	l
ffff800000106644	kernel.asm	/^ffff800000106644:	ff d0                	callq  *%rax$/;"	l
ffff800000106646	kernel.asm	/^ffff800000106646:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106649	kernel.asm	/^ffff800000106649:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010664d	kernel.asm	/^ffff80000010664d:	75 07                	jne    ffff800000106656 <growproc+0xa1>$/;"	l
ffff80000010664f	kernel.asm	/^ffff80000010664f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106654	kernel.asm	/^ffff800000106654:	eb 30                	jmp    ffff800000106686 <growproc+0xd1>$/;"	l
ffff800000106656	kernel.asm	/^ffff800000106656:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010665d	kernel.asm	/^ffff80000010665d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106661	kernel.asm	/^ffff800000106661:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106664	kernel.asm	/^ffff800000106664:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000106667	kernel.asm	/^ffff800000106667:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010666e	kernel.asm	/^ffff80000010666e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106672	kernel.asm	/^ffff800000106672:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106675	kernel.asm	/^ffff800000106675:	48 b8 2b bf 10 00 00 	movabs $0xffff80000010bf2b,%rax$/;"	l
ffff80000010667c	kernel.asm	/^ffff80000010667c:	80 ff ff $/;"	l
ffff80000010667f	kernel.asm	/^ffff80000010667f:	ff d0                	callq  *%rax$/;"	l
ffff800000106681	kernel.asm	/^ffff800000106681:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106686	kernel.asm	/^ffff800000106686:	c9                   	leaveq $/;"	l
ffff800000106687	kernel.asm	/^ffff800000106687:	c3                   	retq   $/;"	l
ffff800000106688	kernel.asm	/^ffff800000106688 <fork>:$/;"	l
ffff800000106688	kernel.asm	/^ffff800000106688:	55                   	push   %rbp$/;"	l
ffff800000106689	kernel.asm	/^ffff800000106689:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010668c	kernel.asm	/^ffff80000010668c:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000106690	kernel.asm	/^ffff800000106690:	48 b8 8c 62 10 00 00 	movabs $0xffff80000010628c,%rax$/;"	l
ffff800000106697	kernel.asm	/^ffff800000106697:	80 ff ff $/;"	l
ffff80000010669a	kernel.asm	/^ffff80000010669a:	ff d0                	callq  *%rax$/;"	l
ffff80000010669c	kernel.asm	/^ffff80000010669c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001066a0	kernel.asm	/^ffff8000001066a0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001066a5	kernel.asm	/^ffff8000001066a5:	75 0a                	jne    ffff8000001066b1 <fork+0x29>$/;"	l
ffff8000001066a7	kernel.asm	/^ffff8000001066a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001066ac	kernel.asm	/^ffff8000001066ac:	e9 f6 01 00 00       	jmpq   ffff8000001068a7 <fork+0x21f>$/;"	l
ffff8000001066b1	kernel.asm	/^ffff8000001066b1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001066b8	kernel.asm	/^ffff8000001066b8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001066bc	kernel.asm	/^ffff8000001066bc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001066bf	kernel.asm	/^ffff8000001066bf:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001066c1	kernel.asm	/^ffff8000001066c1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001066c8	kernel.asm	/^ffff8000001066c8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001066cc	kernel.asm	/^ffff8000001066cc:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001066d0	kernel.asm	/^ffff8000001066d0:	89 d6                	mov    %edx,%esi$/;"	l
ffff8000001066d2	kernel.asm	/^ffff8000001066d2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001066d5	kernel.asm	/^ffff8000001066d5:	48 b8 60 c9 10 00 00 	movabs $0xffff80000010c960,%rax$/;"	l
ffff8000001066dc	kernel.asm	/^ffff8000001066dc:	80 ff ff $/;"	l
ffff8000001066df	kernel.asm	/^ffff8000001066df:	ff d0                	callq  *%rax$/;"	l
ffff8000001066e1	kernel.asm	/^ffff8000001066e1:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001066e4	kernel.asm	/^ffff8000001066e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001066e8	kernel.asm	/^ffff8000001066e8:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff8000001066ec	kernel.asm	/^ffff8000001066ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001066f0	kernel.asm	/^ffff8000001066f0:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff8000001066f4	kernel.asm	/^ffff8000001066f4:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001066f7	kernel.asm	/^ffff8000001066f7:	75 38                	jne    ffff800000106731 <fork+0xa9>$/;"	l
ffff8000001066f9	kernel.asm	/^ffff8000001066f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001066fd	kernel.asm	/^ffff8000001066fd:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106701	kernel.asm	/^ffff800000106701:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106704	kernel.asm	/^ffff800000106704:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010670b	kernel.asm	/^ffff80000010670b:	80 ff ff $/;"	l
ffff80000010670e	kernel.asm	/^ffff80000010670e:	ff d0                	callq  *%rax$/;"	l
ffff800000106710	kernel.asm	/^ffff800000106710:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106714	kernel.asm	/^ffff800000106714:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff80000010671b	kernel.asm	/^ffff80000010671b:	00 $/;"	l
ffff80000010671c	kernel.asm	/^ffff80000010671c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106720	kernel.asm	/^ffff800000106720:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106727	kernel.asm	/^ffff800000106727:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010672c	kernel.asm	/^ffff80000010672c:	e9 76 01 00 00       	jmpq   ffff8000001068a7 <fork+0x21f>$/;"	l
ffff800000106731	kernel.asm	/^ffff800000106731:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106738	kernel.asm	/^ffff800000106738:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010673c	kernel.asm	/^ffff80000010673c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff80000010673f	kernel.asm	/^ffff80000010673f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106743	kernel.asm	/^ffff800000106743:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000106746	kernel.asm	/^ffff800000106746:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010674d	kernel.asm	/^ffff80000010674d:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff800000106751	kernel.asm	/^ffff800000106751:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106755	kernel.asm	/^ffff800000106755:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff800000106759	kernel.asm	/^ffff800000106759:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010675d	kernel.asm	/^ffff80000010675d:	48 8b 50 28          	mov    0x28(%rax),%rdx$/;"	l
ffff800000106761	kernel.asm	/^ffff800000106761:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106768	kernel.asm	/^ffff800000106768:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010676c	kernel.asm	/^ffff80000010676c:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106770	kernel.asm	/^ffff800000106770:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106773	kernel.asm	/^ffff800000106773:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
ffff800000106778	kernel.asm	/^ffff800000106778:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff80000010677b	kernel.asm	/^ffff80000010677b:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff80000010677e	kernel.asm	/^ffff80000010677e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)$/;"	l
ffff800000106781	kernel.asm	/^ffff800000106781:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106785	kernel.asm	/^ffff800000106785:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000106789	kernel.asm	/^ffff800000106789:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000106790	kernel.asm	/^ffff800000106790:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000106797	kernel.asm	/^ffff800000106797:	eb 62                	jmp    ffff8000001067fb <fork+0x173>$/;"	l
ffff800000106799	kernel.asm	/^ffff800000106799:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067a0	kernel.asm	/^ffff8000001067a0:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067a4	kernel.asm	/^ffff8000001067a4:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001067a7	kernel.asm	/^ffff8000001067a7:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001067aa	kernel.asm	/^ffff8000001067aa:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001067ae	kernel.asm	/^ffff8000001067ae:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001067b3	kernel.asm	/^ffff8000001067b3:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001067b6	kernel.asm	/^ffff8000001067b6:	74 3f                	je     ffff8000001067f7 <fork+0x16f>$/;"	l
ffff8000001067b8	kernel.asm	/^ffff8000001067b8:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001067bf	kernel.asm	/^ffff8000001067bf:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001067c3	kernel.asm	/^ffff8000001067c3:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001067c6	kernel.asm	/^ffff8000001067c6:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001067c9	kernel.asm	/^ffff8000001067c9:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001067cd	kernel.asm	/^ffff8000001067cd:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001067d2	kernel.asm	/^ffff8000001067d2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001067d5	kernel.asm	/^ffff8000001067d5:	48 b8 d4 1c 10 00 00 	movabs $0xffff800000101cd4,%rax$/;"	l
ffff8000001067dc	kernel.asm	/^ffff8000001067dc:	80 ff ff $/;"	l
ffff8000001067df	kernel.asm	/^ffff8000001067df:	ff d0                	callq  *%rax$/;"	l
ffff8000001067e1	kernel.asm	/^ffff8000001067e1:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff8000001067e4	kernel.asm	/^ffff8000001067e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001067e8	kernel.asm	/^ffff8000001067e8:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001067eb	kernel.asm	/^ffff8000001067eb:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001067ee	kernel.asm	/^ffff8000001067ee:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001067f2	kernel.asm	/^ffff8000001067f2:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)$/;"	l
ffff8000001067f7	kernel.asm	/^ffff8000001067f7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001067fb	kernel.asm	/^ffff8000001067fb:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff8000001067ff	kernel.asm	/^ffff8000001067ff:	7e 98                	jle    ffff800000106799 <fork+0x111>$/;"	l
ffff800000106801	kernel.asm	/^ffff800000106801:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106808	kernel.asm	/^ffff800000106808:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010680c	kernel.asm	/^ffff80000010680c:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000106813	kernel.asm	/^ffff800000106813:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106816	kernel.asm	/^ffff800000106816:	48 b8 60 2b 10 00 00 	movabs $0xffff800000102b60,%rax$/;"	l
ffff80000010681d	kernel.asm	/^ffff80000010681d:	80 ff ff $/;"	l
ffff800000106820	kernel.asm	/^ffff800000106820:	ff d0                	callq  *%rax$/;"	l
ffff800000106822	kernel.asm	/^ffff800000106822:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000106825	kernel.asm	/^ffff800000106825:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106829	kernel.asm	/^ffff800000106829:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff800000106830	kernel.asm	/^ffff800000106830:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106837	kernel.asm	/^ffff800000106837:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010683b	kernel.asm	/^ffff80000010683b:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff800000106842	kernel.asm	/^ffff800000106842:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106846	kernel.asm	/^ffff800000106846:	48 05 d0 00 00 00    	add    $0xd0,%rax$/;"	l
ffff80000010684c	kernel.asm	/^ffff80000010684c:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff800000106851	kernel.asm	/^ffff800000106851:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000106854	kernel.asm	/^ffff800000106854:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106857	kernel.asm	/^ffff800000106857:	48 b8 18 7b 10 00 00 	movabs $0xffff800000107b18,%rax$/;"	l
ffff80000010685e	kernel.asm	/^ffff80000010685e:	80 ff ff $/;"	l
ffff800000106861	kernel.asm	/^ffff800000106861:	ff d0                	callq  *%rax$/;"	l
ffff800000106863	kernel.asm	/^ffff800000106863:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106867	kernel.asm	/^ffff800000106867:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff80000010686a	kernel.asm	/^ffff80000010686a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff80000010686d	kernel.asm	/^ffff80000010686d:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106874	kernel.asm	/^ffff800000106874:	80 ff ff $/;"	l
ffff800000106877	kernel.asm	/^ffff800000106877:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff80000010687e	kernel.asm	/^ffff80000010687e:	80 ff ff $/;"	l
ffff800000106881	kernel.asm	/^ffff800000106881:	ff d0                	callq  *%rax$/;"	l
ffff800000106883	kernel.asm	/^ffff800000106883:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106887	kernel.asm	/^ffff800000106887:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff80000010688e	kernel.asm	/^ffff80000010688e:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106895	kernel.asm	/^ffff800000106895:	80 ff ff $/;"	l
ffff800000106898	kernel.asm	/^ffff800000106898:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010689f	kernel.asm	/^ffff80000010689f:	80 ff ff $/;"	l
ffff8000001068a2	kernel.asm	/^ffff8000001068a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001068a4	kernel.asm	/^ffff8000001068a4:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff8000001068a7	kernel.asm	/^ffff8000001068a7:	c9                   	leaveq $/;"	l
ffff8000001068a8	kernel.asm	/^ffff8000001068a8:	c3                   	retq   $/;"	l
ffff8000001068a9	kernel.asm	/^ffff8000001068a9 <exit>:$/;"	l
ffff8000001068a9	kernel.asm	/^ffff8000001068a9:	55                   	push   %rbp$/;"	l
ffff8000001068aa	kernel.asm	/^ffff8000001068aa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001068ad	kernel.asm	/^ffff8000001068ad:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001068b1	kernel.asm	/^ffff8000001068b1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001068b8	kernel.asm	/^ffff8000001068b8:	64 48 8b 10          	mov    %fs:(%rax),%rdx$/;"	l
ffff8000001068bc	kernel.asm	/^ffff8000001068bc:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff8000001068c3	kernel.asm	/^ffff8000001068c3:	80 ff ff $/;"	l
ffff8000001068c6	kernel.asm	/^ffff8000001068c6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001068c9	kernel.asm	/^ffff8000001068c9:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001068cc	kernel.asm	/^ffff8000001068cc:	75 16                	jne    ffff8000001068e4 <exit+0x3b>$/;"	l
ffff8000001068ce	kernel.asm	/^ffff8000001068ce:	48 bf f8 cf 10 00 00 	movabs $0xffff80000010cff8,%rdi$/;"	l
ffff8000001068d5	kernel.asm	/^ffff8000001068d5:	80 ff ff $/;"	l
ffff8000001068d8	kernel.asm	/^ffff8000001068d8:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001068df	kernel.asm	/^ffff8000001068df:	80 ff ff $/;"	l
ffff8000001068e2	kernel.asm	/^ffff8000001068e2:	ff d0                	callq  *%rax$/;"	l
ffff8000001068e4	kernel.asm	/^ffff8000001068e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff8000001068eb	kernel.asm	/^ffff8000001068eb:	eb 6a                	jmp    ffff800000106957 <exit+0xae>$/;"	l
ffff8000001068ed	kernel.asm	/^ffff8000001068ed:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001068f4	kernel.asm	/^ffff8000001068f4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001068f8	kernel.asm	/^ffff8000001068f8:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001068fb	kernel.asm	/^ffff8000001068fb:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001068fe	kernel.asm	/^ffff8000001068fe:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106902	kernel.asm	/^ffff800000106902:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106907	kernel.asm	/^ffff800000106907:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010690a	kernel.asm	/^ffff80000010690a:	74 47                	je     ffff800000106953 <exit+0xaa>$/;"	l
ffff80000010690c	kernel.asm	/^ffff80000010690c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106913	kernel.asm	/^ffff800000106913:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106917	kernel.asm	/^ffff800000106917:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff80000010691a	kernel.asm	/^ffff80000010691a:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010691d	kernel.asm	/^ffff80000010691d:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106921	kernel.asm	/^ffff800000106921:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000106926	kernel.asm	/^ffff800000106926:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106929	kernel.asm	/^ffff800000106929:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff800000106930	kernel.asm	/^ffff800000106930:	80 ff ff $/;"	l
ffff800000106933	kernel.asm	/^ffff800000106933:	ff d0                	callq  *%rax$/;"	l
ffff800000106935	kernel.asm	/^ffff800000106935:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010693c	kernel.asm	/^ffff80000010693c:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106940	kernel.asm	/^ffff800000106940:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000106943	kernel.asm	/^ffff800000106943:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000106946	kernel.asm	/^ffff800000106946:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff80000010694a	kernel.asm	/^ffff80000010694a:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff800000106951	kernel.asm	/^ffff800000106951:	00 00 $/;"	l
ffff800000106953	kernel.asm	/^ffff800000106953:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff800000106957	kernel.asm	/^ffff800000106957:	83 7d f4 0f          	cmpl   $0xf,-0xc(%rbp)$/;"	l
ffff80000010695b	kernel.asm	/^ffff80000010695b:	7e 90                	jle    ffff8000001068ed <exit+0x44>$/;"	l
ffff80000010695d	kernel.asm	/^ffff80000010695d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106962	kernel.asm	/^ffff800000106962:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000106969	kernel.asm	/^ffff800000106969:	80 ff ff $/;"	l
ffff80000010696c	kernel.asm	/^ffff80000010696c:	ff d2                	callq  *%rdx$/;"	l
ffff80000010696e	kernel.asm	/^ffff80000010696e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106975	kernel.asm	/^ffff800000106975:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106979	kernel.asm	/^ffff800000106979:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000106980	kernel.asm	/^ffff800000106980:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106983	kernel.asm	/^ffff800000106983:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff80000010698a	kernel.asm	/^ffff80000010698a:	80 ff ff $/;"	l
ffff80000010698d	kernel.asm	/^ffff80000010698d:	ff d0                	callq  *%rax$/;"	l
ffff80000010698f	kernel.asm	/^ffff80000010698f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000106994	kernel.asm	/^ffff800000106994:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff80000010699b	kernel.asm	/^ffff80000010699b:	80 ff ff $/;"	l
ffff80000010699e	kernel.asm	/^ffff80000010699e:	ff d2                	callq  *%rdx$/;"	l
ffff8000001069a0	kernel.asm	/^ffff8000001069a0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001069a7	kernel.asm	/^ffff8000001069a7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001069ab	kernel.asm	/^ffff8000001069ab:	48 c7 80 c8 00 00 00 	movq   $0x0,0xc8(%rax)$/;"	l
ffff8000001069b2	kernel.asm	/^ffff8000001069b2:	00 00 00 00 $/;"	l
ffff8000001069b6	kernel.asm	/^ffff8000001069b6:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff8000001069bd	kernel.asm	/^ffff8000001069bd:	80 ff ff $/;"	l
ffff8000001069c0	kernel.asm	/^ffff8000001069c0:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001069c7	kernel.asm	/^ffff8000001069c7:	80 ff ff $/;"	l
ffff8000001069ca	kernel.asm	/^ffff8000001069ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001069cc	kernel.asm	/^ffff8000001069cc:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001069d3	kernel.asm	/^ffff8000001069d3:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001069d7	kernel.asm	/^ffff8000001069d7:	48 8b 40 20          	mov    0x20(%rax),%rax$/;"	l
ffff8000001069db	kernel.asm	/^ffff8000001069db:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001069de	kernel.asm	/^ffff8000001069de:	48 b8 fc 6f 10 00 00 	movabs $0xffff800000106ffc,%rax$/;"	l
ffff8000001069e5	kernel.asm	/^ffff8000001069e5:	80 ff ff $/;"	l
ffff8000001069e8	kernel.asm	/^ffff8000001069e8:	ff d0                	callq  *%rax$/;"	l
ffff8000001069ea	kernel.asm	/^ffff8000001069ea:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff8000001069f1	kernel.asm	/^ffff8000001069f1:	80 ff ff $/;"	l
ffff8000001069f4	kernel.asm	/^ffff8000001069f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001069f8	kernel.asm	/^ffff8000001069f8:	eb 5d                	jmp    ffff800000106a57 <exit+0x1ae>$/;"	l
ffff8000001069fa	kernel.asm	/^ffff8000001069fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001069fe	kernel.asm	/^ffff8000001069fe:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff800000106a02	kernel.asm	/^ffff800000106a02:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106a09	kernel.asm	/^ffff800000106a09:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106a0d	kernel.asm	/^ffff800000106a0d:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000106a10	kernel.asm	/^ffff800000106a10:	75 3d                	jne    ffff800000106a4f <exit+0x1a6>$/;"	l
ffff800000106a12	kernel.asm	/^ffff800000106a12:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106a19	kernel.asm	/^ffff800000106a19:	80 ff ff $/;"	l
ffff800000106a1c	kernel.asm	/^ffff800000106a1c:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000106a1f	kernel.asm	/^ffff800000106a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106a23	kernel.asm	/^ffff800000106a23:	48 89 50 20          	mov    %rdx,0x20(%rax)$/;"	l
ffff800000106a27	kernel.asm	/^ffff800000106a27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106a2b	kernel.asm	/^ffff800000106a2b:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106a2e	kernel.asm	/^ffff800000106a2e:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff800000106a31	kernel.asm	/^ffff800000106a31:	75 1c                	jne    ffff800000106a4f <exit+0x1a6>$/;"	l
ffff800000106a33	kernel.asm	/^ffff800000106a33:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106a3a	kernel.asm	/^ffff800000106a3a:	80 ff ff $/;"	l
ffff800000106a3d	kernel.asm	/^ffff800000106a3d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000106a40	kernel.asm	/^ffff800000106a40:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106a43	kernel.asm	/^ffff800000106a43:	48 b8 fc 6f 10 00 00 	movabs $0xffff800000106ffc,%rax$/;"	l
ffff800000106a4a	kernel.asm	/^ffff800000106a4a:	80 ff ff $/;"	l
ffff800000106a4d	kernel.asm	/^ffff800000106a4d:	ff d0                	callq  *%rax$/;"	l
ffff800000106a4f	kernel.asm	/^ffff800000106a4f:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106a56	kernel.asm	/^ffff800000106a56:	00 $/;"	l
ffff800000106a57	kernel.asm	/^ffff800000106a57:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106a5e	kernel.asm	/^ffff800000106a5e:	80 ff ff $/;"	l
ffff800000106a61	kernel.asm	/^ffff800000106a61:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106a65	kernel.asm	/^ffff800000106a65:	72 93                	jb     ffff8000001069fa <exit+0x151>$/;"	l
ffff800000106a67	kernel.asm	/^ffff800000106a67:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106a6e	kernel.asm	/^ffff800000106a6e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106a72	kernel.asm	/^ffff800000106a72:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%rax)$/;"	l
ffff800000106a79	kernel.asm	/^ffff800000106a79:	48 b8 19 6d 10 00 00 	movabs $0xffff800000106d19,%rax$/;"	l
ffff800000106a80	kernel.asm	/^ffff800000106a80:	80 ff ff $/;"	l
ffff800000106a83	kernel.asm	/^ffff800000106a83:	ff d0                	callq  *%rax$/;"	l
ffff800000106a85	kernel.asm	/^ffff800000106a85:	48 bf 05 d0 10 00 00 	movabs $0xffff80000010d005,%rdi$/;"	l
ffff800000106a8c	kernel.asm	/^ffff800000106a8c:	80 ff ff $/;"	l
ffff800000106a8f	kernel.asm	/^ffff800000106a8f:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106a96	kernel.asm	/^ffff800000106a96:	80 ff ff $/;"	l
ffff800000106a99	kernel.asm	/^ffff800000106a99:	ff d0                	callq  *%rax$/;"	l
ffff800000106a9b	kernel.asm	/^ffff800000106a9b <wait>:$/;"	l
ffff800000106a9b	kernel.asm	/^ffff800000106a9b:	55                   	push   %rbp$/;"	l
ffff800000106a9c	kernel.asm	/^ffff800000106a9c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106a9f	kernel.asm	/^ffff800000106a9f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106aa3	kernel.asm	/^ffff800000106aa3:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106aaa	kernel.asm	/^ffff800000106aaa:	80 ff ff $/;"	l
ffff800000106aad	kernel.asm	/^ffff800000106aad:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106ab4	kernel.asm	/^ffff800000106ab4:	80 ff ff $/;"	l
ffff800000106ab7	kernel.asm	/^ffff800000106ab7:	ff d0                	callq  *%rax$/;"	l
ffff800000106ab9	kernel.asm	/^ffff800000106ab9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff800000106ac0	kernel.asm	/^ffff800000106ac0:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff800000106ac7	kernel.asm	/^ffff800000106ac7:	80 ff ff $/;"	l
ffff800000106aca	kernel.asm	/^ffff800000106aca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106ace	kernel.asm	/^ffff800000106ace:	e9 d3 00 00 00       	jmpq   ffff800000106ba6 <wait+0x10b>$/;"	l
ffff800000106ad3	kernel.asm	/^ffff800000106ad3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106ad7	kernel.asm	/^ffff800000106ad7:	48 8b 50 20          	mov    0x20(%rax),%rdx$/;"	l
ffff800000106adb	kernel.asm	/^ffff800000106adb:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106ae2	kernel.asm	/^ffff800000106ae2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106ae6	kernel.asm	/^ffff800000106ae6:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000106ae9	kernel.asm	/^ffff800000106ae9:	0f 85 ae 00 00 00    	jne    ffff800000106b9d <wait+0x102>$/;"	l
ffff800000106aef	kernel.asm	/^ffff800000106aef:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)$/;"	l
ffff800000106af6	kernel.asm	/^ffff800000106af6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106afa	kernel.asm	/^ffff800000106afa:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106afd	kernel.asm	/^ffff800000106afd:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff800000106b00	kernel.asm	/^ffff800000106b00:	0f 85 98 00 00 00    	jne    ffff800000106b9e <wait+0x103>$/;"	l
ffff800000106b06	kernel.asm	/^ffff800000106b06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b0a	kernel.asm	/^ffff800000106b0a:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000106b0d	kernel.asm	/^ffff800000106b0d:	89 45 f0             	mov    %eax,-0x10(%rbp)$/;"	l
ffff800000106b10	kernel.asm	/^ffff800000106b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b14	kernel.asm	/^ffff800000106b14:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff800000106b18	kernel.asm	/^ffff800000106b18:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106b1b	kernel.asm	/^ffff800000106b1b:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff800000106b22	kernel.asm	/^ffff800000106b22:	80 ff ff $/;"	l
ffff800000106b25	kernel.asm	/^ffff800000106b25:	ff d0                	callq  *%rax$/;"	l
ffff800000106b27	kernel.asm	/^ffff800000106b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b2b	kernel.asm	/^ffff800000106b2b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff800000106b32	kernel.asm	/^ffff800000106b32:	00 $/;"	l
ffff800000106b33	kernel.asm	/^ffff800000106b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b37	kernel.asm	/^ffff800000106b37:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106b3b	kernel.asm	/^ffff800000106b3b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106b3e	kernel.asm	/^ffff800000106b3e:	48 b8 27 c7 10 00 00 	movabs $0xffff80000010c727,%rax$/;"	l
ffff800000106b45	kernel.asm	/^ffff800000106b45:	80 ff ff $/;"	l
ffff800000106b48	kernel.asm	/^ffff800000106b48:	ff d0                	callq  *%rax$/;"	l
ffff800000106b4a	kernel.asm	/^ffff800000106b4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b4e	kernel.asm	/^ffff800000106b4e:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)$/;"	l
ffff800000106b55	kernel.asm	/^ffff800000106b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b59	kernel.asm	/^ffff800000106b59:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)$/;"	l
ffff800000106b60	kernel.asm	/^ffff800000106b60:	00 $/;"	l
ffff800000106b61	kernel.asm	/^ffff800000106b61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b65	kernel.asm	/^ffff800000106b65:	c6 80 d0 00 00 00 00 	movb   $0x0,0xd0(%rax)$/;"	l
ffff800000106b6c	kernel.asm	/^ffff800000106b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b70	kernel.asm	/^ffff800000106b70:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%rax)$/;"	l
ffff800000106b77	kernel.asm	/^ffff800000106b77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000106b7b	kernel.asm	/^ffff800000106b7b:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)$/;"	l
ffff800000106b82	kernel.asm	/^ffff800000106b82:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106b89	kernel.asm	/^ffff800000106b89:	80 ff ff $/;"	l
ffff800000106b8c	kernel.asm	/^ffff800000106b8c:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106b93	kernel.asm	/^ffff800000106b93:	80 ff ff $/;"	l
ffff800000106b96	kernel.asm	/^ffff800000106b96:	ff d0                	callq  *%rax$/;"	l
ffff800000106b98	kernel.asm	/^ffff800000106b98:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000106b9b	kernel.asm	/^ffff800000106b9b:	eb 7b                	jmp    ffff800000106c18 <wait+0x17d>$/;"	l
ffff800000106b9d	kernel.asm	/^ffff800000106b9d:	90                   	nop$/;"	l
ffff800000106b9e	kernel.asm	/^ffff800000106b9e:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000106ba5	kernel.asm	/^ffff800000106ba5:	00 $/;"	l
ffff800000106ba6	kernel.asm	/^ffff800000106ba6:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106bad	kernel.asm	/^ffff800000106bad:	80 ff ff $/;"	l
ffff800000106bb0	kernel.asm	/^ffff800000106bb0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000106bb4	kernel.asm	/^ffff800000106bb4:	0f 82 19 ff ff ff    	jb     ffff800000106ad3 <wait+0x38>$/;"	l
ffff800000106bba	kernel.asm	/^ffff800000106bba:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)$/;"	l
ffff800000106bbe	kernel.asm	/^ffff800000106bbe:	74 12                	je     ffff800000106bd2 <wait+0x137>$/;"	l
ffff800000106bc0	kernel.asm	/^ffff800000106bc0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106bc7	kernel.asm	/^ffff800000106bc7:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106bcb	kernel.asm	/^ffff800000106bcb:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000106bce	kernel.asm	/^ffff800000106bce:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106bd0	kernel.asm	/^ffff800000106bd0:	74 1d                	je     ffff800000106bef <wait+0x154>$/;"	l
ffff800000106bd2	kernel.asm	/^ffff800000106bd2:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106bd9	kernel.asm	/^ffff800000106bd9:	80 ff ff $/;"	l
ffff800000106bdc	kernel.asm	/^ffff800000106bdc:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106be3	kernel.asm	/^ffff800000106be3:	80 ff ff $/;"	l
ffff800000106be6	kernel.asm	/^ffff800000106be6:	ff d0                	callq  *%rax$/;"	l
ffff800000106be8	kernel.asm	/^ffff800000106be8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000106bed	kernel.asm	/^ffff800000106bed:	eb 29                	jmp    ffff800000106c18 <wait+0x17d>$/;"	l
ffff800000106bef	kernel.asm	/^ffff800000106bef:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106bf6	kernel.asm	/^ffff800000106bf6:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106bfa	kernel.asm	/^ffff800000106bfa:	48 be 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rsi$/;"	l
ffff800000106c01	kernel.asm	/^ffff800000106c01:	80 ff ff $/;"	l
ffff800000106c04	kernel.asm	/^ffff800000106c04:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106c07	kernel.asm	/^ffff800000106c07:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000106c0e	kernel.asm	/^ffff800000106c0e:	80 ff ff $/;"	l
ffff800000106c11	kernel.asm	/^ffff800000106c11:	ff d0                	callq  *%rax$/;"	l
ffff800000106c13	kernel.asm	/^ffff800000106c13:	e9 a1 fe ff ff       	jmpq   ffff800000106ab9 <wait+0x1e>$/;"	l
ffff800000106c18	kernel.asm	/^ffff800000106c18:	c9                   	leaveq $/;"	l
ffff800000106c19	kernel.asm	/^ffff800000106c19:	c3                   	retq   $/;"	l
ffff800000106c1a	kernel.asm	/^ffff800000106c1a <scheduler>:$/;"	l
ffff800000106c1a	kernel.asm	/^ffff800000106c1a:	55                   	push   %rbp$/;"	l
ffff800000106c1b	kernel.asm	/^ffff800000106c1b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106c1e	kernel.asm	/^ffff800000106c1e:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106c22	kernel.asm	/^ffff800000106c22:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000106c29	kernel.asm	/^ffff800000106c29:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000106c2d	kernel.asm	/^ffff800000106c2d:	48 b8 5d 62 10 00 00 	movabs $0xffff80000010625d,%rax$/;"	l
ffff800000106c34	kernel.asm	/^ffff800000106c34:	80 ff ff $/;"	l
ffff800000106c37	kernel.asm	/^ffff800000106c37:	ff d0                	callq  *%rax$/;"	l
ffff800000106c39	kernel.asm	/^ffff800000106c39:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106c40	kernel.asm	/^ffff800000106c40:	80 ff ff $/;"	l
ffff800000106c43	kernel.asm	/^ffff800000106c43:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106c4a	kernel.asm	/^ffff800000106c4a:	80 ff ff $/;"	l
ffff800000106c4d	kernel.asm	/^ffff800000106c4d:	ff d0                	callq  *%rax$/;"	l
ffff800000106c4f	kernel.asm	/^ffff800000106c4f:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff800000106c56	kernel.asm	/^ffff800000106c56:	80 ff ff $/;"	l
ffff800000106c59	kernel.asm	/^ffff800000106c59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000106c5d	kernel.asm	/^ffff800000106c5d:	e9 88 00 00 00       	jmpq   ffff800000106cea <scheduler+0xd0>$/;"	l
ffff800000106c62	kernel.asm	/^ffff800000106c62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106c66	kernel.asm	/^ffff800000106c66:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106c69	kernel.asm	/^ffff800000106c69:	83 f8 03             	cmp    $0x3,%eax$/;"	l
ffff800000106c6c	kernel.asm	/^ffff800000106c6c:	75 73                	jne    ffff800000106ce1 <scheduler+0xc7>$/;"	l
ffff800000106c6e	kernel.asm	/^ffff800000106c6e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106c75	kernel.asm	/^ffff800000106c75:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff800000106c79	kernel.asm	/^ffff800000106c79:	64 48 89 10          	mov    %rdx,%fs:(%rax)$/;"	l
ffff800000106c7d	kernel.asm	/^ffff800000106c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106c81	kernel.asm	/^ffff800000106c81:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106c84	kernel.asm	/^ffff800000106c84:	48 b8 2b bf 10 00 00 	movabs $0xffff80000010bf2b,%rax$/;"	l
ffff800000106c8b	kernel.asm	/^ffff800000106c8b:	80 ff ff $/;"	l
ffff800000106c8e	kernel.asm	/^ffff800000106c8e:	ff d0                	callq  *%rax$/;"	l
ffff800000106c90	kernel.asm	/^ffff800000106c90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106c94	kernel.asm	/^ffff800000106c94:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%rax)$/;"	l
ffff800000106c9b	kernel.asm	/^ffff800000106c9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106c9f	kernel.asm	/^ffff800000106c9f:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000106ca3	kernel.asm	/^ffff800000106ca3:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000106caa	kernel.asm	/^ffff800000106caa:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106cae	kernel.asm	/^ffff800000106cae:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff800000106cb2	kernel.asm	/^ffff800000106cb2:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106cb5	kernel.asm	/^ffff800000106cb5:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106cb8	kernel.asm	/^ffff800000106cb8:	48 b8 ac 7b 10 00 00 	movabs $0xffff800000107bac,%rax$/;"	l
ffff800000106cbf	kernel.asm	/^ffff800000106cbf:	80 ff ff $/;"	l
ffff800000106cc2	kernel.asm	/^ffff800000106cc2:	ff d0                	callq  *%rax$/;"	l
ffff800000106cc4	kernel.asm	/^ffff800000106cc4:	48 b8 f9 be 10 00 00 	movabs $0xffff80000010bef9,%rax$/;"	l
ffff800000106ccb	kernel.asm	/^ffff800000106ccb:	80 ff ff $/;"	l
ffff800000106cce	kernel.asm	/^ffff800000106cce:	ff d0                	callq  *%rax$/;"	l
ffff800000106cd0	kernel.asm	/^ffff800000106cd0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106cd7	kernel.asm	/^ffff800000106cd7:	64 48 c7 00 00 00 00 	movq   $0x0,%fs:(%rax)$/;"	l
ffff800000106cde	kernel.asm	/^ffff800000106cde:	00 $/;"	l
ffff800000106cdf	kernel.asm	/^ffff800000106cdf:	eb 01                	jmp    ffff800000106ce2 <scheduler+0xc8>$/;"	l
ffff800000106ce1	kernel.asm	/^ffff800000106ce1:	90                   	nop$/;"	l
ffff800000106ce2	kernel.asm	/^ffff800000106ce2:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff800000106ce9	kernel.asm	/^ffff800000106ce9:	00 $/;"	l
ffff800000106cea	kernel.asm	/^ffff800000106cea:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000106cf1	kernel.asm	/^ffff800000106cf1:	80 ff ff $/;"	l
ffff800000106cf4	kernel.asm	/^ffff800000106cf4:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106cf8	kernel.asm	/^ffff800000106cf8:	0f 82 64 ff ff ff    	jb     ffff800000106c62 <scheduler+0x48>$/;"	l
ffff800000106cfe	kernel.asm	/^ffff800000106cfe:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106d05	kernel.asm	/^ffff800000106d05:	80 ff ff $/;"	l
ffff800000106d08	kernel.asm	/^ffff800000106d08:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106d0f	kernel.asm	/^ffff800000106d0f:	80 ff ff $/;"	l
ffff800000106d12	kernel.asm	/^ffff800000106d12:	ff d0                	callq  *%rax$/;"	l
ffff800000106d14	kernel.asm	/^ffff800000106d14:	e9 10 ff ff ff       	jmpq   ffff800000106c29 <scheduler+0xf>$/;"	l
ffff800000106d19	kernel.asm	/^ffff800000106d19 <sched>:$/;"	l
ffff800000106d19	kernel.asm	/^ffff800000106d19:	55                   	push   %rbp$/;"	l
ffff800000106d1a	kernel.asm	/^ffff800000106d1a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106d1d	kernel.asm	/^ffff800000106d1d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106d21	kernel.asm	/^ffff800000106d21:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106d28	kernel.asm	/^ffff800000106d28:	80 ff ff $/;"	l
ffff800000106d2b	kernel.asm	/^ffff800000106d2b:	48 b8 a3 76 10 00 00 	movabs $0xffff8000001076a3,%rax$/;"	l
ffff800000106d32	kernel.asm	/^ffff800000106d32:	80 ff ff $/;"	l
ffff800000106d35	kernel.asm	/^ffff800000106d35:	ff d0                	callq  *%rax$/;"	l
ffff800000106d37	kernel.asm	/^ffff800000106d37:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106d39	kernel.asm	/^ffff800000106d39:	75 16                	jne    ffff800000106d51 <sched+0x38>$/;"	l
ffff800000106d3b	kernel.asm	/^ffff800000106d3b:	48 bf 11 d0 10 00 00 	movabs $0xffff80000010d011,%rdi$/;"	l
ffff800000106d42	kernel.asm	/^ffff800000106d42:	80 ff ff $/;"	l
ffff800000106d45	kernel.asm	/^ffff800000106d45:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106d4c	kernel.asm	/^ffff800000106d4c:	80 ff ff $/;"	l
ffff800000106d4f	kernel.asm	/^ffff800000106d4f:	ff d0                	callq  *%rax$/;"	l
ffff800000106d51	kernel.asm	/^ffff800000106d51:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106d58	kernel.asm	/^ffff800000106d58:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d5c	kernel.asm	/^ffff800000106d5c:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff800000106d62	kernel.asm	/^ffff800000106d62:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ffff800000106d65	kernel.asm	/^ffff800000106d65:	74 16                	je     ffff800000106d7d <sched+0x64>$/;"	l
ffff800000106d67	kernel.asm	/^ffff800000106d67:	48 bf 23 d0 10 00 00 	movabs $0xffff80000010d023,%rdi$/;"	l
ffff800000106d6e	kernel.asm	/^ffff800000106d6e:	80 ff ff $/;"	l
ffff800000106d71	kernel.asm	/^ffff800000106d71:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106d78	kernel.asm	/^ffff800000106d78:	80 ff ff $/;"	l
ffff800000106d7b	kernel.asm	/^ffff800000106d7b:	ff d0                	callq  *%rax$/;"	l
ffff800000106d7d	kernel.asm	/^ffff800000106d7d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106d84	kernel.asm	/^ffff800000106d84:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106d88	kernel.asm	/^ffff800000106d88:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000106d8b	kernel.asm	/^ffff800000106d8b:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000106d8e	kernel.asm	/^ffff800000106d8e:	75 16                	jne    ffff800000106da6 <sched+0x8d>$/;"	l
ffff800000106d90	kernel.asm	/^ffff800000106d90:	48 bf 2f d0 10 00 00 	movabs $0xffff80000010d02f,%rdi$/;"	l
ffff800000106d97	kernel.asm	/^ffff800000106d97:	80 ff ff $/;"	l
ffff800000106d9a	kernel.asm	/^ffff800000106d9a:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106da1	kernel.asm	/^ffff800000106da1:	80 ff ff $/;"	l
ffff800000106da4	kernel.asm	/^ffff800000106da4:	ff d0                	callq  *%rax$/;"	l
ffff800000106da6	kernel.asm	/^ffff800000106da6:	48 b8 49 62 10 00 00 	movabs $0xffff800000106249,%rax$/;"	l
ffff800000106dad	kernel.asm	/^ffff800000106dad:	80 ff ff $/;"	l
ffff800000106db0	kernel.asm	/^ffff800000106db0:	ff d0                	callq  *%rax$/;"	l
ffff800000106db2	kernel.asm	/^ffff800000106db2:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000106db7	kernel.asm	/^ffff800000106db7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106dba	kernel.asm	/^ffff800000106dba:	74 16                	je     ffff800000106dd2 <sched+0xb9>$/;"	l
ffff800000106dbc	kernel.asm	/^ffff800000106dbc:	48 bf 3d d0 10 00 00 	movabs $0xffff80000010d03d,%rdi$/;"	l
ffff800000106dc3	kernel.asm	/^ffff800000106dc3:	80 ff ff $/;"	l
ffff800000106dc6	kernel.asm	/^ffff800000106dc6:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106dcd	kernel.asm	/^ffff800000106dcd:	80 ff ff $/;"	l
ffff800000106dd0	kernel.asm	/^ffff800000106dd0:	ff d0                	callq  *%rax$/;"	l
ffff800000106dd2	kernel.asm	/^ffff800000106dd2:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106dd9	kernel.asm	/^ffff800000106dd9:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106ddd	kernel.asm	/^ffff800000106ddd:	8b 80 e0 00 00 00    	mov    0xe0(%rax),%eax$/;"	l
ffff800000106de3	kernel.asm	/^ffff800000106de3:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000106de6	kernel.asm	/^ffff800000106de6:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106ded	kernel.asm	/^ffff800000106ded:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106df1	kernel.asm	/^ffff800000106df1:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000106df5	kernel.asm	/^ffff800000106df5:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx$/;"	l
ffff800000106dfc	kernel.asm	/^ffff800000106dfc:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000106e00	kernel.asm	/^ffff800000106e00:	48 83 c2 30          	add    $0x30,%rdx$/;"	l
ffff800000106e04	kernel.asm	/^ffff800000106e04:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000106e07	kernel.asm	/^ffff800000106e07:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000106e0a	kernel.asm	/^ffff800000106e0a:	48 b8 ac 7b 10 00 00 	movabs $0xffff800000107bac,%rax$/;"	l
ffff800000106e11	kernel.asm	/^ffff800000106e11:	80 ff ff $/;"	l
ffff800000106e14	kernel.asm	/^ffff800000106e14:	ff d0                	callq  *%rax$/;"	l
ffff800000106e16	kernel.asm	/^ffff800000106e16:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000106e1d	kernel.asm	/^ffff800000106e1d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106e21	kernel.asm	/^ffff800000106e21:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000106e24	kernel.asm	/^ffff800000106e24:	89 90 e0 00 00 00    	mov    %edx,0xe0(%rax)$/;"	l
ffff800000106e2a	kernel.asm	/^ffff800000106e2a:	90                   	nop$/;"	l
ffff800000106e2b	kernel.asm	/^ffff800000106e2b:	c9                   	leaveq $/;"	l
ffff800000106e2c	kernel.asm	/^ffff800000106e2c:	c3                   	retq   $/;"	l
ffff800000106e2d	kernel.asm	/^ffff800000106e2d <yield>:$/;"	l
ffff800000106e2d	kernel.asm	/^ffff800000106e2d:	55                   	push   %rbp$/;"	l
ffff800000106e2e	kernel.asm	/^ffff800000106e2e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e31	kernel.asm	/^ffff800000106e31:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106e38	kernel.asm	/^ffff800000106e38:	80 ff ff $/;"	l
ffff800000106e3b	kernel.asm	/^ffff800000106e3b:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106e42	kernel.asm	/^ffff800000106e42:	80 ff ff $/;"	l
ffff800000106e45	kernel.asm	/^ffff800000106e45:	ff d0                	callq  *%rax$/;"	l
ffff800000106e47	kernel.asm	/^ffff800000106e47:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106e4e	kernel.asm	/^ffff800000106e4e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106e52	kernel.asm	/^ffff800000106e52:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000106e59	kernel.asm	/^ffff800000106e59:	48 b8 19 6d 10 00 00 	movabs $0xffff800000106d19,%rax$/;"	l
ffff800000106e60	kernel.asm	/^ffff800000106e60:	80 ff ff $/;"	l
ffff800000106e63	kernel.asm	/^ffff800000106e63:	ff d0                	callq  *%rax$/;"	l
ffff800000106e65	kernel.asm	/^ffff800000106e65:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106e6c	kernel.asm	/^ffff800000106e6c:	80 ff ff $/;"	l
ffff800000106e6f	kernel.asm	/^ffff800000106e6f:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106e76	kernel.asm	/^ffff800000106e76:	80 ff ff $/;"	l
ffff800000106e79	kernel.asm	/^ffff800000106e79:	ff d0                	callq  *%rax$/;"	l
ffff800000106e7b	kernel.asm	/^ffff800000106e7b:	90                   	nop$/;"	l
ffff800000106e7c	kernel.asm	/^ffff800000106e7c:	5d                   	pop    %rbp$/;"	l
ffff800000106e7d	kernel.asm	/^ffff800000106e7d:	c3                   	retq   $/;"	l
ffff800000106e7e	kernel.asm	/^ffff800000106e7e <forkret>:$/;"	l
ffff800000106e7e	kernel.asm	/^ffff800000106e7e:	55                   	push   %rbp$/;"	l
ffff800000106e7f	kernel.asm	/^ffff800000106e7f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106e82	kernel.asm	/^ffff800000106e82:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106e86	kernel.asm	/^ffff800000106e86:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106e8d	kernel.asm	/^ffff800000106e8d:	80 ff ff $/;"	l
ffff800000106e90	kernel.asm	/^ffff800000106e90:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106e97	kernel.asm	/^ffff800000106e97:	80 ff ff $/;"	l
ffff800000106e9a	kernel.asm	/^ffff800000106e9a:	ff d0                	callq  *%rax$/;"	l
ffff800000106e9c	kernel.asm	/^ffff800000106e9c:	48 b8 44 e5 10 00 00 	movabs $0xffff80000010e544,%rax$/;"	l
ffff800000106ea3	kernel.asm	/^ffff800000106ea3:	80 ff ff $/;"	l
ffff800000106ea6	kernel.asm	/^ffff800000106ea6:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000106ea8	kernel.asm	/^ffff800000106ea8:	85 c0                	test   %eax,%eax$/;"	l
ffff800000106eaa	kernel.asm	/^ffff800000106eaa:	74 32                	je     ffff800000106ede <forkret+0x60>$/;"	l
ffff800000106eac	kernel.asm	/^ffff800000106eac:	48 b8 44 e5 10 00 00 	movabs $0xffff80000010e544,%rax$/;"	l
ffff800000106eb3	kernel.asm	/^ffff800000106eb3:	80 ff ff $/;"	l
ffff800000106eb6	kernel.asm	/^ffff800000106eb6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff800000106ebc	kernel.asm	/^ffff800000106ebc:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106ec1	kernel.asm	/^ffff800000106ec1:	48 b8 49 27 10 00 00 	movabs $0xffff800000102749,%rax$/;"	l
ffff800000106ec8	kernel.asm	/^ffff800000106ec8:	80 ff ff $/;"	l
ffff800000106ecb	kernel.asm	/^ffff800000106ecb:	ff d0                	callq  *%rax$/;"	l
ffff800000106ecd	kernel.asm	/^ffff800000106ecd:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000106ed2	kernel.asm	/^ffff800000106ed2:	48 b8 ec 4c 10 00 00 	movabs $0xffff800000104cec,%rax$/;"	l
ffff800000106ed9	kernel.asm	/^ffff800000106ed9:	80 ff ff $/;"	l
ffff800000106edc	kernel.asm	/^ffff800000106edc:	ff d0                	callq  *%rax$/;"	l
ffff800000106ede	kernel.asm	/^ffff800000106ede:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106ee5	kernel.asm	/^ffff800000106ee5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106ee9	kernel.asm	/^ffff800000106ee9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000106eed	kernel.asm	/^ffff800000106eed:	90                   	nop$/;"	l
ffff800000106eee	kernel.asm	/^ffff800000106eee:	c9                   	leaveq $/;"	l
ffff800000106eef	kernel.asm	/^ffff800000106eef:	c3                   	retq   $/;"	l
ffff800000106ef0	kernel.asm	/^ffff800000106ef0 <sleep>:$/;"	l
ffff800000106ef0	kernel.asm	/^ffff800000106ef0:	55                   	push   %rbp$/;"	l
ffff800000106ef1	kernel.asm	/^ffff800000106ef1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000106ef4	kernel.asm	/^ffff800000106ef4:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000106ef8	kernel.asm	/^ffff800000106ef8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000106efc	kernel.asm	/^ffff800000106efc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000106f00	kernel.asm	/^ffff800000106f00:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106f07	kernel.asm	/^ffff800000106f07:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106f0b	kernel.asm	/^ffff800000106f0b:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000106f0e	kernel.asm	/^ffff800000106f0e:	75 16                	jne    ffff800000106f26 <sleep+0x36>$/;"	l
ffff800000106f10	kernel.asm	/^ffff800000106f10:	48 bf 51 d0 10 00 00 	movabs $0xffff80000010d051,%rdi$/;"	l
ffff800000106f17	kernel.asm	/^ffff800000106f17:	80 ff ff $/;"	l
ffff800000106f1a	kernel.asm	/^ffff800000106f1a:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106f21	kernel.asm	/^ffff800000106f21:	80 ff ff $/;"	l
ffff800000106f24	kernel.asm	/^ffff800000106f24:	ff d0                	callq  *%rax$/;"	l
ffff800000106f26	kernel.asm	/^ffff800000106f26:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000106f2b	kernel.asm	/^ffff800000106f2b:	75 16                	jne    ffff800000106f43 <sleep+0x53>$/;"	l
ffff800000106f2d	kernel.asm	/^ffff800000106f2d:	48 bf 57 d0 10 00 00 	movabs $0xffff80000010d057,%rdi$/;"	l
ffff800000106f34	kernel.asm	/^ffff800000106f34:	80 ff ff $/;"	l
ffff800000106f37	kernel.asm	/^ffff800000106f37:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000106f3e	kernel.asm	/^ffff800000106f3e:	80 ff ff $/;"	l
ffff800000106f41	kernel.asm	/^ffff800000106f41:	ff d0                	callq  *%rax$/;"	l
ffff800000106f43	kernel.asm	/^ffff800000106f43:	48 b8 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rax$/;"	l
ffff800000106f4a	kernel.asm	/^ffff800000106f4a:	80 ff ff $/;"	l
ffff800000106f4d	kernel.asm	/^ffff800000106f4d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106f51	kernel.asm	/^ffff800000106f51:	74 29                	je     ffff800000106f7c <sleep+0x8c>$/;"	l
ffff800000106f53	kernel.asm	/^ffff800000106f53:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106f5a	kernel.asm	/^ffff800000106f5a:	80 ff ff $/;"	l
ffff800000106f5d	kernel.asm	/^ffff800000106f5d:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106f64	kernel.asm	/^ffff800000106f64:	80 ff ff $/;"	l
ffff800000106f67	kernel.asm	/^ffff800000106f67:	ff d0                	callq  *%rax$/;"	l
ffff800000106f69	kernel.asm	/^ffff800000106f69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106f6d	kernel.asm	/^ffff800000106f6d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106f70	kernel.asm	/^ffff800000106f70:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106f77	kernel.asm	/^ffff800000106f77:	80 ff ff $/;"	l
ffff800000106f7a	kernel.asm	/^ffff800000106f7a:	ff d0                	callq  *%rax$/;"	l
ffff800000106f7c	kernel.asm	/^ffff800000106f7c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106f83	kernel.asm	/^ffff800000106f83:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106f87	kernel.asm	/^ffff800000106f87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000106f8b	kernel.asm	/^ffff800000106f8b:	48 89 50 38          	mov    %rdx,0x38(%rax)$/;"	l
ffff800000106f8f	kernel.asm	/^ffff800000106f8f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106f96	kernel.asm	/^ffff800000106f96:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106f9a	kernel.asm	/^ffff800000106f9a:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%rax)$/;"	l
ffff800000106fa1	kernel.asm	/^ffff800000106fa1:	48 b8 19 6d 10 00 00 	movabs $0xffff800000106d19,%rax$/;"	l
ffff800000106fa8	kernel.asm	/^ffff800000106fa8:	80 ff ff $/;"	l
ffff800000106fab	kernel.asm	/^ffff800000106fab:	ff d0                	callq  *%rax$/;"	l
ffff800000106fad	kernel.asm	/^ffff800000106fad:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000106fb4	kernel.asm	/^ffff800000106fb4:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000106fb8	kernel.asm	/^ffff800000106fb8:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)$/;"	l
ffff800000106fbf	kernel.asm	/^ffff800000106fbf:	00 $/;"	l
ffff800000106fc0	kernel.asm	/^ffff800000106fc0:	48 b8 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rax$/;"	l
ffff800000106fc7	kernel.asm	/^ffff800000106fc7:	80 ff ff $/;"	l
ffff800000106fca	kernel.asm	/^ffff800000106fca:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff800000106fce	kernel.asm	/^ffff800000106fce:	74 29                	je     ffff800000106ff9 <sleep+0x109>$/;"	l
ffff800000106fd0	kernel.asm	/^ffff800000106fd0:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000106fd7	kernel.asm	/^ffff800000106fd7:	80 ff ff $/;"	l
ffff800000106fda	kernel.asm	/^ffff800000106fda:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000106fe1	kernel.asm	/^ffff800000106fe1:	80 ff ff $/;"	l
ffff800000106fe4	kernel.asm	/^ffff800000106fe4:	ff d0                	callq  *%rax$/;"	l
ffff800000106fe6	kernel.asm	/^ffff800000106fe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000106fea	kernel.asm	/^ffff800000106fea:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000106fed	kernel.asm	/^ffff800000106fed:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000106ff4	kernel.asm	/^ffff800000106ff4:	80 ff ff $/;"	l
ffff800000106ff7	kernel.asm	/^ffff800000106ff7:	ff d0                	callq  *%rax$/;"	l
ffff800000106ff9	kernel.asm	/^ffff800000106ff9:	90                   	nop$/;"	l
ffff800000106ffa	kernel.asm	/^ffff800000106ffa:	c9                   	leaveq $/;"	l
ffff800000106ffb	kernel.asm	/^ffff800000106ffb:	c3                   	retq   $/;"	l
ffff800000106ffc	kernel.asm	/^ffff800000106ffc <wakeup1>:$/;"	l
ffff800000106ffc	kernel.asm	/^ffff800000106ffc:	55                   	push   %rbp$/;"	l
ffff800000106ffd	kernel.asm	/^ffff800000106ffd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107000	kernel.asm	/^ffff800000107000:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107004	kernel.asm	/^ffff800000107004:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107008	kernel.asm	/^ffff800000107008:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff80000010700f	kernel.asm	/^ffff80000010700f:	80 ff ff $/;"	l
ffff800000107012	kernel.asm	/^ffff800000107012:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107016	kernel.asm	/^ffff800000107016:	eb 2d                	jmp    ffff800000107045 <wakeup1+0x49>$/;"	l
ffff800000107018	kernel.asm	/^ffff800000107018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010701c	kernel.asm	/^ffff80000010701c:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010701f	kernel.asm	/^ffff80000010701f:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000107022	kernel.asm	/^ffff800000107022:	75 19                	jne    ffff80000010703d <wakeup1+0x41>$/;"	l
ffff800000107024	kernel.asm	/^ffff800000107024:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107028	kernel.asm	/^ffff800000107028:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff80000010702c	kernel.asm	/^ffff80000010702c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000107030	kernel.asm	/^ffff800000107030:	75 0b                	jne    ffff80000010703d <wakeup1+0x41>$/;"	l
ffff800000107032	kernel.asm	/^ffff800000107032:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107036	kernel.asm	/^ffff800000107036:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff80000010703d	kernel.asm	/^ffff80000010703d:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000107044	kernel.asm	/^ffff800000107044:	00 $/;"	l
ffff800000107045	kernel.asm	/^ffff800000107045:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff80000010704c	kernel.asm	/^ffff80000010704c:	80 ff ff $/;"	l
ffff80000010704f	kernel.asm	/^ffff80000010704f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000107053	kernel.asm	/^ffff800000107053:	72 c3                	jb     ffff800000107018 <wakeup1+0x1c>$/;"	l
ffff800000107055	kernel.asm	/^ffff800000107055:	90                   	nop$/;"	l
ffff800000107056	kernel.asm	/^ffff800000107056:	c9                   	leaveq $/;"	l
ffff800000107057	kernel.asm	/^ffff800000107057:	c3                   	retq   $/;"	l
ffff800000107058	kernel.asm	/^ffff800000107058 <wakeup>:$/;"	l
ffff800000107058	kernel.asm	/^ffff800000107058:	55                   	push   %rbp$/;"	l
ffff800000107059	kernel.asm	/^ffff800000107059:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010705c	kernel.asm	/^ffff80000010705c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107060	kernel.asm	/^ffff800000107060:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107064	kernel.asm	/^ffff800000107064:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff80000010706b	kernel.asm	/^ffff80000010706b:	80 ff ff $/;"	l
ffff80000010706e	kernel.asm	/^ffff80000010706e:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000107075	kernel.asm	/^ffff800000107075:	80 ff ff $/;"	l
ffff800000107078	kernel.asm	/^ffff800000107078:	ff d0                	callq  *%rax$/;"	l
ffff80000010707a	kernel.asm	/^ffff80000010707a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010707e	kernel.asm	/^ffff80000010707e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107081	kernel.asm	/^ffff800000107081:	48 b8 fc 6f 10 00 00 	movabs $0xffff800000106ffc,%rax$/;"	l
ffff800000107088	kernel.asm	/^ffff800000107088:	80 ff ff $/;"	l
ffff80000010708b	kernel.asm	/^ffff80000010708b:	ff d0                	callq  *%rax$/;"	l
ffff80000010708d	kernel.asm	/^ffff80000010708d:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000107094	kernel.asm	/^ffff800000107094:	80 ff ff $/;"	l
ffff800000107097	kernel.asm	/^ffff800000107097:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010709e	kernel.asm	/^ffff80000010709e:	80 ff ff $/;"	l
ffff8000001070a1	kernel.asm	/^ffff8000001070a1:	ff d0                	callq  *%rax$/;"	l
ffff8000001070a3	kernel.asm	/^ffff8000001070a3:	90                   	nop$/;"	l
ffff8000001070a4	kernel.asm	/^ffff8000001070a4:	c9                   	leaveq $/;"	l
ffff8000001070a5	kernel.asm	/^ffff8000001070a5:	c3                   	retq   $/;"	l
ffff8000001070a6	kernel.asm	/^ffff8000001070a6 <kill>:$/;"	l
ffff8000001070a6	kernel.asm	/^ffff8000001070a6:	55                   	push   %rbp$/;"	l
ffff8000001070a7	kernel.asm	/^ffff8000001070a7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001070aa	kernel.asm	/^ffff8000001070aa:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001070ae	kernel.asm	/^ffff8000001070ae:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff8000001070b1	kernel.asm	/^ffff8000001070b1:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff8000001070b8	kernel.asm	/^ffff8000001070b8:	80 ff ff $/;"	l
ffff8000001070bb	kernel.asm	/^ffff8000001070bb:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001070c2	kernel.asm	/^ffff8000001070c2:	80 ff ff $/;"	l
ffff8000001070c5	kernel.asm	/^ffff8000001070c5:	ff d0                	callq  *%rax$/;"	l
ffff8000001070c7	kernel.asm	/^ffff8000001070c7:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff8000001070ce	kernel.asm	/^ffff8000001070ce:	80 ff ff $/;"	l
ffff8000001070d1	kernel.asm	/^ffff8000001070d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001070d5	kernel.asm	/^ffff8000001070d5:	eb 53                	jmp    ffff80000010712a <kill+0x84>$/;"	l
ffff8000001070d7	kernel.asm	/^ffff8000001070d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070db	kernel.asm	/^ffff8000001070db:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001070de	kernel.asm	/^ffff8000001070de:	3b 45 ec             	cmp    -0x14(%rbp),%eax$/;"	l
ffff8000001070e1	kernel.asm	/^ffff8000001070e1:	75 3f                	jne    ffff800000107122 <kill+0x7c>$/;"	l
ffff8000001070e3	kernel.asm	/^ffff8000001070e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070e7	kernel.asm	/^ffff8000001070e7:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff8000001070ee	kernel.asm	/^ffff8000001070ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070f2	kernel.asm	/^ffff8000001070f2:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff8000001070f5	kernel.asm	/^ffff8000001070f5:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff8000001070f8	kernel.asm	/^ffff8000001070f8:	75 0b                	jne    ffff800000107105 <kill+0x5f>$/;"	l
ffff8000001070fa	kernel.asm	/^ffff8000001070fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001070fe	kernel.asm	/^ffff8000001070fe:	c7 40 18 03 00 00 00 	movl   $0x3,0x18(%rax)$/;"	l
ffff800000107105	kernel.asm	/^ffff800000107105:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff80000010710c	kernel.asm	/^ffff80000010710c:	80 ff ff $/;"	l
ffff80000010710f	kernel.asm	/^ffff80000010710f:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000107116	kernel.asm	/^ffff800000107116:	80 ff ff $/;"	l
ffff800000107119	kernel.asm	/^ffff800000107119:	ff d0                	callq  *%rax$/;"	l
ffff80000010711b	kernel.asm	/^ffff80000010711b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107120	kernel.asm	/^ffff800000107120:	eb 33                	jmp    ffff800000107155 <kill+0xaf>$/;"	l
ffff800000107122	kernel.asm	/^ffff800000107122:	48 81 45 f8 e0 00 00 	addq   $0xe0,-0x8(%rbp)$/;"	l
ffff800000107129	kernel.asm	/^ffff800000107129:	00 $/;"	l
ffff80000010712a	kernel.asm	/^ffff80000010712a:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff800000107131	kernel.asm	/^ffff800000107131:	80 ff ff $/;"	l
ffff800000107134	kernel.asm	/^ffff800000107134:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)$/;"	l
ffff800000107138	kernel.asm	/^ffff800000107138:	72 9d                	jb     ffff8000001070d7 <kill+0x31>$/;"	l
ffff80000010713a	kernel.asm	/^ffff80000010713a:	48 bf 20 ab 11 00 00 	movabs $0xffff80000011ab20,%rdi$/;"	l
ffff800000107141	kernel.asm	/^ffff800000107141:	80 ff ff $/;"	l
ffff800000107144	kernel.asm	/^ffff800000107144:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010714b	kernel.asm	/^ffff80000010714b:	80 ff ff $/;"	l
ffff80000010714e	kernel.asm	/^ffff80000010714e:	ff d0                	callq  *%rax$/;"	l
ffff800000107150	kernel.asm	/^ffff800000107150:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107155	kernel.asm	/^ffff800000107155:	c9                   	leaveq $/;"	l
ffff800000107156	kernel.asm	/^ffff800000107156:	c3                   	retq   $/;"	l
ffff800000107157	kernel.asm	/^ffff800000107157 <procdump>:$/;"	l
ffff800000107157	kernel.asm	/^ffff800000107157:	55                   	push   %rbp$/;"	l
ffff800000107158	kernel.asm	/^ffff800000107158:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010715b	kernel.asm	/^ffff80000010715b:	48 83 ec 70          	sub    $0x70,%rsp$/;"	l
ffff80000010715f	kernel.asm	/^ffff80000010715f:	48 b8 88 ab 11 00 00 	movabs $0xffff80000011ab88,%rax$/;"	l
ffff800000107166	kernel.asm	/^ffff800000107166:	80 ff ff $/;"	l
ffff800000107169	kernel.asm	/^ffff800000107169:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010716d	kernel.asm	/^ffff80000010716d:	e9 3b 01 00 00       	jmpq   ffff8000001072ad <procdump+0x156>$/;"	l
ffff800000107172	kernel.asm	/^ffff800000107172:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107176	kernel.asm	/^ffff800000107176:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000107179	kernel.asm	/^ffff800000107179:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010717b	kernel.asm	/^ffff80000010717b:	0f 84 23 01 00 00    	je     ffff8000001072a4 <procdump+0x14d>$/;"	l
ffff800000107181	kernel.asm	/^ffff800000107181:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107185	kernel.asm	/^ffff800000107185:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000107188	kernel.asm	/^ffff800000107188:	83 f8 05             	cmp    $0x5,%eax$/;"	l
ffff80000010718b	kernel.asm	/^ffff80000010718b:	77 39                	ja     ffff8000001071c6 <procdump+0x6f>$/;"	l
ffff80000010718d	kernel.asm	/^ffff80000010718d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107191	kernel.asm	/^ffff800000107191:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff800000107194	kernel.asm	/^ffff800000107194:	48 b8 60 e5 10 00 00 	movabs $0xffff80000010e560,%rax$/;"	l
ffff80000010719b	kernel.asm	/^ffff80000010719b:	80 ff ff $/;"	l
ffff80000010719e	kernel.asm	/^ffff80000010719e:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001071a0	kernel.asm	/^ffff8000001071a0:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff8000001071a4	kernel.asm	/^ffff8000001071a4:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001071a7	kernel.asm	/^ffff8000001071a7:	74 1d                	je     ffff8000001071c6 <procdump+0x6f>$/;"	l
ffff8000001071a9	kernel.asm	/^ffff8000001071a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001071ad	kernel.asm	/^ffff8000001071ad:	8b 50 18             	mov    0x18(%rax),%edx$/;"	l
ffff8000001071b0	kernel.asm	/^ffff8000001071b0:	48 b8 60 e5 10 00 00 	movabs $0xffff80000010e560,%rax$/;"	l
ffff8000001071b7	kernel.asm	/^ffff8000001071b7:	80 ff ff $/;"	l
ffff8000001071ba	kernel.asm	/^ffff8000001071ba:	89 d2                	mov    %edx,%edx$/;"	l
ffff8000001071bc	kernel.asm	/^ffff8000001071bc:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff8000001071c0	kernel.asm	/^ffff8000001071c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001071c4	kernel.asm	/^ffff8000001071c4:	eb 0e                	jmp    ffff8000001071d4 <procdump+0x7d>$/;"	l
ffff8000001071c6	kernel.asm	/^ffff8000001071c6:	48 b8 68 d0 10 00 00 	movabs $0xffff80000010d068,%rax$/;"	l
ffff8000001071cd	kernel.asm	/^ffff8000001071cd:	80 ff ff $/;"	l
ffff8000001071d0	kernel.asm	/^ffff8000001071d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff8000001071d4	kernel.asm	/^ffff8000001071d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001071d8	kernel.asm	/^ffff8000001071d8:	48 8d 88 d0 00 00 00 	lea    0xd0(%rax),%rcx$/;"	l
ffff8000001071df	kernel.asm	/^ffff8000001071df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001071e3	kernel.asm	/^ffff8000001071e3:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff8000001071e6	kernel.asm	/^ffff8000001071e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001071ea	kernel.asm	/^ffff8000001071ea:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001071ec	kernel.asm	/^ffff8000001071ec:	48 bf 6c d0 10 00 00 	movabs $0xffff80000010d06c,%rdi$/;"	l
ffff8000001071f3	kernel.asm	/^ffff8000001071f3:	80 ff ff $/;"	l
ffff8000001071f6	kernel.asm	/^ffff8000001071f6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001071fb	kernel.asm	/^ffff8000001071fb:	49 b8 b6 07 10 00 00 	movabs $0xffff8000001007b6,%r8$/;"	l
ffff800000107202	kernel.asm	/^ffff800000107202:	80 ff ff $/;"	l
ffff800000107205	kernel.asm	/^ffff800000107205:	41 ff d0             	callq  *%r8$/;"	l
ffff800000107208	kernel.asm	/^ffff800000107208:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010720c	kernel.asm	/^ffff80000010720c:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff80000010720f	kernel.asm	/^ffff80000010720f:	83 f8 02             	cmp    $0x2,%eax$/;"	l
ffff800000107212	kernel.asm	/^ffff800000107212:	75 73                	jne    ffff800000107287 <procdump+0x130>$/;"	l
ffff800000107214	kernel.asm	/^ffff800000107214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107218	kernel.asm	/^ffff800000107218:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff80000010721c	kernel.asm	/^ffff80000010721c:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000107220	kernel.asm	/^ffff800000107220:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff800000107224	kernel.asm	/^ffff800000107224:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107227	kernel.asm	/^ffff800000107227:	48 8d 45 90          	lea    -0x70(%rbp),%rax$/;"	l
ffff80000010722b	kernel.asm	/^ffff80000010722b:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010722e	kernel.asm	/^ffff80000010722e:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000107231	kernel.asm	/^ffff800000107231:	48 b8 0a 76 10 00 00 	movabs $0xffff80000010760a,%rax$/;"	l
ffff800000107238	kernel.asm	/^ffff800000107238:	80 ff ff $/;"	l
ffff80000010723b	kernel.asm	/^ffff80000010723b:	ff d0                	callq  *%rax$/;"	l
ffff80000010723d	kernel.asm	/^ffff80000010723d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107244	kernel.asm	/^ffff800000107244:	eb 2c                	jmp    ffff800000107272 <procdump+0x11b>$/;"	l
ffff800000107246	kernel.asm	/^ffff800000107246:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107249	kernel.asm	/^ffff800000107249:	48 98                	cltq   $/;"	l
ffff80000010724b	kernel.asm	/^ffff80000010724b:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff800000107250	kernel.asm	/^ffff800000107250:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000107253	kernel.asm	/^ffff800000107253:	48 bf 75 d0 10 00 00 	movabs $0xffff80000010d075,%rdi$/;"	l
ffff80000010725a	kernel.asm	/^ffff80000010725a:	80 ff ff $/;"	l
ffff80000010725d	kernel.asm	/^ffff80000010725d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107262	kernel.asm	/^ffff800000107262:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000107269	kernel.asm	/^ffff800000107269:	80 ff ff $/;"	l
ffff80000010726c	kernel.asm	/^ffff80000010726c:	ff d2                	callq  *%rdx$/;"	l
ffff80000010726e	kernel.asm	/^ffff80000010726e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107272	kernel.asm	/^ffff800000107272:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000107276	kernel.asm	/^ffff800000107276:	7f 0f                	jg     ffff800000107287 <procdump+0x130>$/;"	l
ffff800000107278	kernel.asm	/^ffff800000107278:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010727b	kernel.asm	/^ffff80000010727b:	48 98                	cltq   $/;"	l
ffff80000010727d	kernel.asm	/^ffff80000010727d:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax$/;"	l
ffff800000107282	kernel.asm	/^ffff800000107282:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107285	kernel.asm	/^ffff800000107285:	75 bf                	jne    ffff800000107246 <procdump+0xef>$/;"	l
ffff800000107287	kernel.asm	/^ffff800000107287:	48 bf 79 d0 10 00 00 	movabs $0xffff80000010d079,%rdi$/;"	l
ffff80000010728e	kernel.asm	/^ffff80000010728e:	80 ff ff $/;"	l
ffff800000107291	kernel.asm	/^ffff800000107291:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107296	kernel.asm	/^ffff800000107296:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff80000010729d	kernel.asm	/^ffff80000010729d:	80 ff ff $/;"	l
ffff8000001072a0	kernel.asm	/^ffff8000001072a0:	ff d2                	callq  *%rdx$/;"	l
ffff8000001072a2	kernel.asm	/^ffff8000001072a2:	eb 01                	jmp    ffff8000001072a5 <procdump+0x14e>$/;"	l
ffff8000001072a4	kernel.asm	/^ffff8000001072a4:	90                   	nop$/;"	l
ffff8000001072a5	kernel.asm	/^ffff8000001072a5:	48 81 45 f0 e0 00 00 	addq   $0xe0,-0x10(%rbp)$/;"	l
ffff8000001072ac	kernel.asm	/^ffff8000001072ac:	00 $/;"	l
ffff8000001072ad	kernel.asm	/^ffff8000001072ad:	48 b8 88 e3 11 00 00 	movabs $0xffff80000011e388,%rax$/;"	l
ffff8000001072b4	kernel.asm	/^ffff8000001072b4:	80 ff ff $/;"	l
ffff8000001072b7	kernel.asm	/^ffff8000001072b7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)$/;"	l
ffff8000001072bb	kernel.asm	/^ffff8000001072bb:	0f 82 b1 fe ff ff    	jb     ffff800000107172 <procdump+0x1b>$/;"	l
ffff8000001072c1	kernel.asm	/^ffff8000001072c1:	90                   	nop$/;"	l
ffff8000001072c2	kernel.asm	/^ffff8000001072c2:	c9                   	leaveq $/;"	l
ffff8000001072c3	kernel.asm	/^ffff8000001072c3:	c3                   	retq   $/;"	l
ffff8000001072c4	kernel.asm	/^ffff8000001072c4 <initsleeplock>:$/;"	l
ffff8000001072c4	kernel.asm	/^ffff8000001072c4:	55                   	push   %rbp$/;"	l
ffff8000001072c5	kernel.asm	/^ffff8000001072c5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001072c8	kernel.asm	/^ffff8000001072c8:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001072cc	kernel.asm	/^ffff8000001072cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001072d0	kernel.asm	/^ffff8000001072d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001072d4	kernel.asm	/^ffff8000001072d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072d8	kernel.asm	/^ffff8000001072d8:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001072dc	kernel.asm	/^ffff8000001072dc:	48 be a5 d0 10 00 00 	movabs $0xffff80000010d0a5,%rsi$/;"	l
ffff8000001072e3	kernel.asm	/^ffff8000001072e3:	80 ff ff $/;"	l
ffff8000001072e6	kernel.asm	/^ffff8000001072e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001072e9	kernel.asm	/^ffff8000001072e9:	48 b8 97 74 10 00 00 	movabs $0xffff800000107497,%rax$/;"	l
ffff8000001072f0	kernel.asm	/^ffff8000001072f0:	80 ff ff $/;"	l
ffff8000001072f3	kernel.asm	/^ffff8000001072f3:	ff d0                	callq  *%rax$/;"	l
ffff8000001072f5	kernel.asm	/^ffff8000001072f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001072f9	kernel.asm	/^ffff8000001072f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001072fd	kernel.asm	/^ffff8000001072fd:	48 89 50 70          	mov    %rdx,0x70(%rax)$/;"	l
ffff800000107301	kernel.asm	/^ffff800000107301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107305	kernel.asm	/^ffff800000107305:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff80000010730b	kernel.asm	/^ffff80000010730b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010730f	kernel.asm	/^ffff80000010730f:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff800000107316	kernel.asm	/^ffff800000107316:	90                   	nop$/;"	l
ffff800000107317	kernel.asm	/^ffff800000107317:	c9                   	leaveq $/;"	l
ffff800000107318	kernel.asm	/^ffff800000107318:	c3                   	retq   $/;"	l
ffff800000107319	kernel.asm	/^ffff800000107319 <acquiresleep>:$/;"	l
ffff800000107319	kernel.asm	/^ffff800000107319:	55                   	push   %rbp$/;"	l
ffff80000010731a	kernel.asm	/^ffff80000010731a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010731d	kernel.asm	/^ffff80000010731d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107321	kernel.asm	/^ffff800000107321:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107325	kernel.asm	/^ffff800000107325:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107329	kernel.asm	/^ffff800000107329:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010732d	kernel.asm	/^ffff80000010732d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107330	kernel.asm	/^ffff800000107330:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000107337	kernel.asm	/^ffff800000107337:	80 ff ff $/;"	l
ffff80000010733a	kernel.asm	/^ffff80000010733a:	ff d0                	callq  *%rax$/;"	l
ffff80000010733c	kernel.asm	/^ffff80000010733c:	eb 1e                	jmp    ffff80000010735c <acquiresleep+0x43>$/;"	l
ffff80000010733e	kernel.asm	/^ffff80000010733e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107342	kernel.asm	/^ffff800000107342:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107346	kernel.asm	/^ffff800000107346:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010734a	kernel.asm	/^ffff80000010734a:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010734d	kernel.asm	/^ffff80000010734d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107350	kernel.asm	/^ffff800000107350:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000107357	kernel.asm	/^ffff800000107357:	80 ff ff $/;"	l
ffff80000010735a	kernel.asm	/^ffff80000010735a:	ff d0                	callq  *%rax$/;"	l
ffff80000010735c	kernel.asm	/^ffff80000010735c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107360	kernel.asm	/^ffff800000107360:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000107362	kernel.asm	/^ffff800000107362:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107364	kernel.asm	/^ffff800000107364:	75 d8                	jne    ffff80000010733e <acquiresleep+0x25>$/;"	l
ffff800000107366	kernel.asm	/^ffff800000107366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010736a	kernel.asm	/^ffff80000010736a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000107370	kernel.asm	/^ffff800000107370:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107377	kernel.asm	/^ffff800000107377:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010737b	kernel.asm	/^ffff80000010737b:	8b 50 1c             	mov    0x1c(%rax),%edx$/;"	l
ffff80000010737e	kernel.asm	/^ffff80000010737e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107382	kernel.asm	/^ffff800000107382:	89 50 78             	mov    %edx,0x78(%rax)$/;"	l
ffff800000107385	kernel.asm	/^ffff800000107385:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107389	kernel.asm	/^ffff800000107389:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010738d	kernel.asm	/^ffff80000010738d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107390	kernel.asm	/^ffff800000107390:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000107397	kernel.asm	/^ffff800000107397:	80 ff ff $/;"	l
ffff80000010739a	kernel.asm	/^ffff80000010739a:	ff d0                	callq  *%rax$/;"	l
ffff80000010739c	kernel.asm	/^ffff80000010739c:	90                   	nop$/;"	l
ffff80000010739d	kernel.asm	/^ffff80000010739d:	c9                   	leaveq $/;"	l
ffff80000010739e	kernel.asm	/^ffff80000010739e:	c3                   	retq   $/;"	l
ffff80000010739f	kernel.asm	/^ffff80000010739f <releasesleep>:$/;"	l
ffff80000010739f	kernel.asm	/^ffff80000010739f:	55                   	push   %rbp$/;"	l
ffff8000001073a0	kernel.asm	/^ffff8000001073a0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001073a3	kernel.asm	/^ffff8000001073a3:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001073a7	kernel.asm	/^ffff8000001073a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001073ab	kernel.asm	/^ffff8000001073ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073af	kernel.asm	/^ffff8000001073af:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001073b3	kernel.asm	/^ffff8000001073b3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001073b6	kernel.asm	/^ffff8000001073b6:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001073bd	kernel.asm	/^ffff8000001073bd:	80 ff ff $/;"	l
ffff8000001073c0	kernel.asm	/^ffff8000001073c0:	ff d0                	callq  *%rax$/;"	l
ffff8000001073c2	kernel.asm	/^ffff8000001073c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073c6	kernel.asm	/^ffff8000001073c6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001073cc	kernel.asm	/^ffff8000001073cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073d0	kernel.asm	/^ffff8000001073d0:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)$/;"	l
ffff8000001073d7	kernel.asm	/^ffff8000001073d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073db	kernel.asm	/^ffff8000001073db:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001073de	kernel.asm	/^ffff8000001073de:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff8000001073e5	kernel.asm	/^ffff8000001073e5:	80 ff ff $/;"	l
ffff8000001073e8	kernel.asm	/^ffff8000001073e8:	ff d0                	callq  *%rax$/;"	l
ffff8000001073ea	kernel.asm	/^ffff8000001073ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001073ee	kernel.asm	/^ffff8000001073ee:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff8000001073f2	kernel.asm	/^ffff8000001073f2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001073f5	kernel.asm	/^ffff8000001073f5:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001073fc	kernel.asm	/^ffff8000001073fc:	80 ff ff $/;"	l
ffff8000001073ff	kernel.asm	/^ffff8000001073ff:	ff d0                	callq  *%rax$/;"	l
ffff800000107401	kernel.asm	/^ffff800000107401:	90                   	nop$/;"	l
ffff800000107402	kernel.asm	/^ffff800000107402:	c9                   	leaveq $/;"	l
ffff800000107403	kernel.asm	/^ffff800000107403:	c3                   	retq   $/;"	l
ffff800000107404	kernel.asm	/^ffff800000107404 <holdingsleep>:$/;"	l
ffff800000107404	kernel.asm	/^ffff800000107404:	55                   	push   %rbp$/;"	l
ffff800000107405	kernel.asm	/^ffff800000107405:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107408	kernel.asm	/^ffff800000107408:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010740c	kernel.asm	/^ffff80000010740c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107410	kernel.asm	/^ffff800000107410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107414	kernel.asm	/^ffff800000107414:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107418	kernel.asm	/^ffff800000107418:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010741b	kernel.asm	/^ffff80000010741b:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000107422	kernel.asm	/^ffff800000107422:	80 ff ff $/;"	l
ffff800000107425	kernel.asm	/^ffff800000107425:	ff d0                	callq  *%rax$/;"	l
ffff800000107427	kernel.asm	/^ffff800000107427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010742b	kernel.asm	/^ffff80000010742b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010742d	kernel.asm	/^ffff80000010742d:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107430	kernel.asm	/^ffff800000107430:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107434	kernel.asm	/^ffff800000107434:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff800000107438	kernel.asm	/^ffff800000107438:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010743b	kernel.asm	/^ffff80000010743b:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff800000107442	kernel.asm	/^ffff800000107442:	80 ff ff $/;"	l
ffff800000107445	kernel.asm	/^ffff800000107445:	ff d0                	callq  *%rax$/;"	l
ffff800000107447	kernel.asm	/^ffff800000107447:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010744a	kernel.asm	/^ffff80000010744a:	c9                   	leaveq $/;"	l
ffff80000010744b	kernel.asm	/^ffff80000010744b:	c3                   	retq   $/;"	l
ffff80000010744c	kernel.asm	/^ffff80000010744c <readeflags>:$/;"	l
ffff80000010744c	kernel.asm	/^ffff80000010744c:	55                   	push   %rbp$/;"	l
ffff80000010744d	kernel.asm	/^ffff80000010744d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107450	kernel.asm	/^ffff800000107450:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107454	kernel.asm	/^ffff800000107454:	9c                   	pushfq $/;"	l
ffff800000107455	kernel.asm	/^ffff800000107455:	58                   	pop    %rax$/;"	l
ffff800000107456	kernel.asm	/^ffff800000107456:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010745a	kernel.asm	/^ffff80000010745a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010745e	kernel.asm	/^ffff80000010745e:	c9                   	leaveq $/;"	l
ffff80000010745f	kernel.asm	/^ffff80000010745f:	c3                   	retq   $/;"	l
ffff800000107460	kernel.asm	/^ffff800000107460 <cli>:$/;"	l
ffff800000107460	kernel.asm	/^ffff800000107460:	55                   	push   %rbp$/;"	l
ffff800000107461	kernel.asm	/^ffff800000107461:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107464	kernel.asm	/^ffff800000107464:	fa                   	cli    $/;"	l
ffff800000107465	kernel.asm	/^ffff800000107465:	90                   	nop$/;"	l
ffff800000107466	kernel.asm	/^ffff800000107466:	5d                   	pop    %rbp$/;"	l
ffff800000107467	kernel.asm	/^ffff800000107467:	c3                   	retq   $/;"	l
ffff800000107468	kernel.asm	/^ffff800000107468 <sti>:$/;"	l
ffff800000107468	kernel.asm	/^ffff800000107468:	55                   	push   %rbp$/;"	l
ffff800000107469	kernel.asm	/^ffff800000107469:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010746c	kernel.asm	/^ffff80000010746c:	fb                   	sti    $/;"	l
ffff80000010746d	kernel.asm	/^ffff80000010746d:	90                   	nop$/;"	l
ffff80000010746e	kernel.asm	/^ffff80000010746e:	5d                   	pop    %rbp$/;"	l
ffff80000010746f	kernel.asm	/^ffff80000010746f:	c3                   	retq   $/;"	l
ffff800000107470	kernel.asm	/^ffff800000107470 <xchg>:$/;"	l
ffff800000107470	kernel.asm	/^ffff800000107470:	55                   	push   %rbp$/;"	l
ffff800000107471	kernel.asm	/^ffff800000107471:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107474	kernel.asm	/^ffff800000107474:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107478	kernel.asm	/^ffff800000107478:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010747c	kernel.asm	/^ffff80000010747c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107480	kernel.asm	/^ffff800000107480:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107484	kernel.asm	/^ffff800000107484:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107488	kernel.asm	/^ffff800000107488:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff80000010748c	kernel.asm	/^ffff80000010748c:	f0 87 02             	lock xchg %eax,(%rdx)$/;"	l
ffff80000010748f	kernel.asm	/^ffff80000010748f:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000107492	kernel.asm	/^ffff800000107492:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107495	kernel.asm	/^ffff800000107495:	c9                   	leaveq $/;"	l
ffff800000107496	kernel.asm	/^ffff800000107496:	c3                   	retq   $/;"	l
ffff800000107497	kernel.asm	/^ffff800000107497 <initlock>:$/;"	l
ffff800000107497	kernel.asm	/^ffff800000107497:	55                   	push   %rbp$/;"	l
ffff800000107498	kernel.asm	/^ffff800000107498:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010749b	kernel.asm	/^ffff80000010749b:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010749f	kernel.asm	/^ffff80000010749f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001074a3	kernel.asm	/^ffff8000001074a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff8000001074a7	kernel.asm	/^ffff8000001074a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074ab	kernel.asm	/^ffff8000001074ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001074af	kernel.asm	/^ffff8000001074af:	48 89 50 08          	mov    %rdx,0x8(%rax)$/;"	l
ffff8000001074b3	kernel.asm	/^ffff8000001074b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074b7	kernel.asm	/^ffff8000001074b7:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001074bd	kernel.asm	/^ffff8000001074bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074c1	kernel.asm	/^ffff8000001074c1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001074c8	kernel.asm	/^ffff8000001074c8:	00 $/;"	l
ffff8000001074c9	kernel.asm	/^ffff8000001074c9:	90                   	nop$/;"	l
ffff8000001074ca	kernel.asm	/^ffff8000001074ca:	c9                   	leaveq $/;"	l
ffff8000001074cb	kernel.asm	/^ffff8000001074cb:	c3                   	retq   $/;"	l
ffff8000001074cc	kernel.asm	/^ffff8000001074cc <acquire>:$/;"	l
ffff8000001074cc	kernel.asm	/^ffff8000001074cc:	55                   	push   %rbp$/;"	l
ffff8000001074cd	kernel.asm	/^ffff8000001074cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001074d0	kernel.asm	/^ffff8000001074d0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001074d4	kernel.asm	/^ffff8000001074d4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001074d8	kernel.asm	/^ffff8000001074d8:	48 b8 df 76 10 00 00 	movabs $0xffff8000001076df,%rax$/;"	l
ffff8000001074df	kernel.asm	/^ffff8000001074df:	80 ff ff $/;"	l
ffff8000001074e2	kernel.asm	/^ffff8000001074e2:	ff d0                	callq  *%rax$/;"	l
ffff8000001074e4	kernel.asm	/^ffff8000001074e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001074e8	kernel.asm	/^ffff8000001074e8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001074eb	kernel.asm	/^ffff8000001074eb:	48 b8 a3 76 10 00 00 	movabs $0xffff8000001076a3,%rax$/;"	l
ffff8000001074f2	kernel.asm	/^ffff8000001074f2:	80 ff ff $/;"	l
ffff8000001074f5	kernel.asm	/^ffff8000001074f5:	ff d0                	callq  *%rax$/;"	l
ffff8000001074f7	kernel.asm	/^ffff8000001074f7:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001074f9	kernel.asm	/^ffff8000001074f9:	74 16                	je     ffff800000107511 <acquire+0x45>$/;"	l
ffff8000001074fb	kernel.asm	/^ffff8000001074fb:	48 bf b0 d0 10 00 00 	movabs $0xffff80000010d0b0,%rdi$/;"	l
ffff800000107502	kernel.asm	/^ffff800000107502:	80 ff ff $/;"	l
ffff800000107505	kernel.asm	/^ffff800000107505:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010750c	kernel.asm	/^ffff80000010750c:	80 ff ff $/;"	l
ffff80000010750f	kernel.asm	/^ffff80000010750f:	ff d0                	callq  *%rax$/;"	l
ffff800000107511	kernel.asm	/^ffff800000107511:	90                   	nop$/;"	l
ffff800000107512	kernel.asm	/^ffff800000107512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107516	kernel.asm	/^ffff800000107516:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010751b	kernel.asm	/^ffff80000010751b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010751e	kernel.asm	/^ffff80000010751e:	48 b8 70 74 10 00 00 	movabs $0xffff800000107470,%rax$/;"	l
ffff800000107525	kernel.asm	/^ffff800000107525:	80 ff ff $/;"	l
ffff800000107528	kernel.asm	/^ffff800000107528:	ff d0                	callq  *%rax$/;"	l
ffff80000010752a	kernel.asm	/^ffff80000010752a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010752c	kernel.asm	/^ffff80000010752c:	75 e4                	jne    ffff800000107512 <acquire+0x46>$/;"	l
ffff80000010752e	kernel.asm	/^ffff80000010752e:	0f ae f0             	mfence $/;"	l
ffff800000107531	kernel.asm	/^ffff800000107531:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107535	kernel.asm	/^ffff800000107535:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff80000010753c	kernel.asm	/^ffff80000010753c:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000107540	kernel.asm	/^ffff800000107540:	48 89 50 10          	mov    %rdx,0x10(%rax)$/;"	l
ffff800000107544	kernel.asm	/^ffff800000107544:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107548	kernel.asm	/^ffff800000107548:	48 8d 50 18          	lea    0x18(%rax),%rdx$/;"	l
ffff80000010754c	kernel.asm	/^ffff80000010754c:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000107550	kernel.asm	/^ffff800000107550:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107553	kernel.asm	/^ffff800000107553:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107556	kernel.asm	/^ffff800000107556:	48 b8 d6 75 10 00 00 	movabs $0xffff8000001075d6,%rax$/;"	l
ffff80000010755d	kernel.asm	/^ffff80000010755d:	80 ff ff $/;"	l
ffff800000107560	kernel.asm	/^ffff800000107560:	ff d0                	callq  *%rax$/;"	l
ffff800000107562	kernel.asm	/^ffff800000107562:	90                   	nop$/;"	l
ffff800000107563	kernel.asm	/^ffff800000107563:	c9                   	leaveq $/;"	l
ffff800000107564	kernel.asm	/^ffff800000107564:	c3                   	retq   $/;"	l
ffff800000107565	kernel.asm	/^ffff800000107565 <release>:$/;"	l
ffff800000107565	kernel.asm	/^ffff800000107565:	55                   	push   %rbp$/;"	l
ffff800000107566	kernel.asm	/^ffff800000107566:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107569	kernel.asm	/^ffff800000107569:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010756d	kernel.asm	/^ffff80000010756d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107571	kernel.asm	/^ffff800000107571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107575	kernel.asm	/^ffff800000107575:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107578	kernel.asm	/^ffff800000107578:	48 b8 a3 76 10 00 00 	movabs $0xffff8000001076a3,%rax$/;"	l
ffff80000010757f	kernel.asm	/^ffff80000010757f:	80 ff ff $/;"	l
ffff800000107582	kernel.asm	/^ffff800000107582:	ff d0                	callq  *%rax$/;"	l
ffff800000107584	kernel.asm	/^ffff800000107584:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107586	kernel.asm	/^ffff800000107586:	75 16                	jne    ffff80000010759e <release+0x39>$/;"	l
ffff800000107588	kernel.asm	/^ffff800000107588:	48 bf b8 d0 10 00 00 	movabs $0xffff80000010d0b8,%rdi$/;"	l
ffff80000010758f	kernel.asm	/^ffff80000010758f:	80 ff ff $/;"	l
ffff800000107592	kernel.asm	/^ffff800000107592:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000107599	kernel.asm	/^ffff800000107599:	80 ff ff $/;"	l
ffff80000010759c	kernel.asm	/^ffff80000010759c:	ff d0                	callq  *%rax$/;"	l
ffff80000010759e	kernel.asm	/^ffff80000010759e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001075a2	kernel.asm	/^ffff8000001075a2:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)$/;"	l
ffff8000001075a9	kernel.asm	/^ffff8000001075a9:	00 $/;"	l
ffff8000001075aa	kernel.asm	/^ffff8000001075aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001075ae	kernel.asm	/^ffff8000001075ae:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)$/;"	l
ffff8000001075b5	kernel.asm	/^ffff8000001075b5:	00 $/;"	l
ffff8000001075b6	kernel.asm	/^ffff8000001075b6:	0f ae f0             	mfence $/;"	l
ffff8000001075b9	kernel.asm	/^ffff8000001075b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001075bd	kernel.asm	/^ffff8000001075bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001075c1	kernel.asm	/^ffff8000001075c1:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001075c7	kernel.asm	/^ffff8000001075c7:	48 b8 59 77 10 00 00 	movabs $0xffff800000107759,%rax$/;"	l
ffff8000001075ce	kernel.asm	/^ffff8000001075ce:	80 ff ff $/;"	l
ffff8000001075d1	kernel.asm	/^ffff8000001075d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001075d3	kernel.asm	/^ffff8000001075d3:	90                   	nop$/;"	l
ffff8000001075d4	kernel.asm	/^ffff8000001075d4:	c9                   	leaveq $/;"	l
ffff8000001075d5	kernel.asm	/^ffff8000001075d5:	c3                   	retq   $/;"	l
ffff8000001075d6	kernel.asm	/^ffff8000001075d6 <getcallerpcs>:$/;"	l
ffff8000001075d6	kernel.asm	/^ffff8000001075d6:	55                   	push   %rbp$/;"	l
ffff8000001075d7	kernel.asm	/^ffff8000001075d7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001075da	kernel.asm	/^ffff8000001075da:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001075de	kernel.asm	/^ffff8000001075de:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001075e2	kernel.asm	/^ffff8000001075e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff8000001075e6	kernel.asm	/^ffff8000001075e6:	48 89 e8             	mov    %rbp,%rax$/;"	l
ffff8000001075e9	kernel.asm	/^ffff8000001075e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001075ed	kernel.asm	/^ffff8000001075ed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff8000001075f1	kernel.asm	/^ffff8000001075f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001075f5	kernel.asm	/^ffff8000001075f5:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001075f8	kernel.asm	/^ffff8000001075f8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001075fb	kernel.asm	/^ffff8000001075fb:	48 b8 0a 76 10 00 00 	movabs $0xffff80000010760a,%rax$/;"	l
ffff800000107602	kernel.asm	/^ffff800000107602:	80 ff ff $/;"	l
ffff800000107605	kernel.asm	/^ffff800000107605:	ff d0                	callq  *%rax$/;"	l
ffff800000107607	kernel.asm	/^ffff800000107607:	90                   	nop$/;"	l
ffff800000107608	kernel.asm	/^ffff800000107608:	c9                   	leaveq $/;"	l
ffff800000107609	kernel.asm	/^ffff800000107609:	c3                   	retq   $/;"	l
ffff80000010760a	kernel.asm	/^ffff80000010760a <getstackpcs>:$/;"	l
ffff80000010760a	kernel.asm	/^ffff80000010760a:	55                   	push   %rbp$/;"	l
ffff80000010760b	kernel.asm	/^ffff80000010760b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010760e	kernel.asm	/^ffff80000010760e:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107612	kernel.asm	/^ffff800000107612:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107616	kernel.asm	/^ffff800000107616:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010761a	kernel.asm	/^ffff80000010761a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107621	kernel.asm	/^ffff800000107621:	eb 50                	jmp    ffff800000107673 <getstackpcs+0x69>$/;"	l
ffff800000107623	kernel.asm	/^ffff800000107623:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff800000107628	kernel.asm	/^ffff800000107628:	74 70                	je     ffff80000010769a <getstackpcs+0x90>$/;"	l
ffff80000010762a	kernel.asm	/^ffff80000010762a:	48 b8 ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rax$/;"	l
ffff800000107631	kernel.asm	/^ffff800000107631:	7f ff ff $/;"	l
ffff800000107634	kernel.asm	/^ffff800000107634:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107638	kernel.asm	/^ffff800000107638:	76 60                	jbe    ffff80000010769a <getstackpcs+0x90>$/;"	l
ffff80000010763a	kernel.asm	/^ffff80000010763a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010763f	kernel.asm	/^ffff80000010763f:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)$/;"	l
ffff800000107643	kernel.asm	/^ffff800000107643:	74 55                	je     ffff80000010769a <getstackpcs+0x90>$/;"	l
ffff800000107645	kernel.asm	/^ffff800000107645:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107648	kernel.asm	/^ffff800000107648:	48 98                	cltq   $/;"	l
ffff80000010764a	kernel.asm	/^ffff80000010764a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107651	kernel.asm	/^ffff800000107651:	00 $/;"	l
ffff800000107652	kernel.asm	/^ffff800000107652:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107656	kernel.asm	/^ffff800000107656:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff800000107659	kernel.asm	/^ffff800000107659:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010765d	kernel.asm	/^ffff80000010765d:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff800000107661	kernel.asm	/^ffff800000107661:	48 89 02             	mov    %rax,(%rdx)$/;"	l
ffff800000107664	kernel.asm	/^ffff800000107664:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107668	kernel.asm	/^ffff800000107668:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010766b	kernel.asm	/^ffff80000010766b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010766f	kernel.asm	/^ffff80000010766f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107673	kernel.asm	/^ffff800000107673:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff800000107677	kernel.asm	/^ffff800000107677:	7e aa                	jle    ffff800000107623 <getstackpcs+0x19>$/;"	l
ffff800000107679	kernel.asm	/^ffff800000107679:	eb 1f                	jmp    ffff80000010769a <getstackpcs+0x90>$/;"	l
ffff80000010767b	kernel.asm	/^ffff80000010767b:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010767e	kernel.asm	/^ffff80000010767e:	48 98                	cltq   $/;"	l
ffff800000107680	kernel.asm	/^ffff800000107680:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107687	kernel.asm	/^ffff800000107687:	00 $/;"	l
ffff800000107688	kernel.asm	/^ffff800000107688:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010768c	kernel.asm	/^ffff80000010768c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010768f	kernel.asm	/^ffff80000010768f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff800000107696	kernel.asm	/^ffff800000107696:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010769a	kernel.asm	/^ffff80000010769a:	83 7d fc 09          	cmpl   $0x9,-0x4(%rbp)$/;"	l
ffff80000010769e	kernel.asm	/^ffff80000010769e:	7e db                	jle    ffff80000010767b <getstackpcs+0x71>$/;"	l
ffff8000001076a0	kernel.asm	/^ffff8000001076a0:	90                   	nop$/;"	l
ffff8000001076a1	kernel.asm	/^ffff8000001076a1:	c9                   	leaveq $/;"	l
ffff8000001076a2	kernel.asm	/^ffff8000001076a2:	c3                   	retq   $/;"	l
ffff8000001076a3	kernel.asm	/^ffff8000001076a3 <holding>:$/;"	l
ffff8000001076a3	kernel.asm	/^ffff8000001076a3:	55                   	push   %rbp$/;"	l
ffff8000001076a4	kernel.asm	/^ffff8000001076a4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001076a7	kernel.asm	/^ffff8000001076a7:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff8000001076ab	kernel.asm	/^ffff8000001076ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff8000001076af	kernel.asm	/^ffff8000001076af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076b3	kernel.asm	/^ffff8000001076b3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001076b5	kernel.asm	/^ffff8000001076b5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001076b7	kernel.asm	/^ffff8000001076b7:	74 1f                	je     ffff8000001076d8 <holding+0x35>$/;"	l
ffff8000001076b9	kernel.asm	/^ffff8000001076b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001076bd	kernel.asm	/^ffff8000001076bd:	48 8b 50 10          	mov    0x10(%rax),%rdx$/;"	l
ffff8000001076c1	kernel.asm	/^ffff8000001076c1:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001076c8	kernel.asm	/^ffff8000001076c8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001076cc	kernel.asm	/^ffff8000001076cc:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff8000001076cf	kernel.asm	/^ffff8000001076cf:	75 07                	jne    ffff8000001076d8 <holding+0x35>$/;"	l
ffff8000001076d1	kernel.asm	/^ffff8000001076d1:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001076d6	kernel.asm	/^ffff8000001076d6:	eb 05                	jmp    ffff8000001076dd <holding+0x3a>$/;"	l
ffff8000001076d8	kernel.asm	/^ffff8000001076d8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001076dd	kernel.asm	/^ffff8000001076dd:	c9                   	leaveq $/;"	l
ffff8000001076de	kernel.asm	/^ffff8000001076de:	c3                   	retq   $/;"	l
ffff8000001076df	kernel.asm	/^ffff8000001076df <pushcli>:$/;"	l
ffff8000001076df	kernel.asm	/^ffff8000001076df:	55                   	push   %rbp$/;"	l
ffff8000001076e0	kernel.asm	/^ffff8000001076e0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001076e3	kernel.asm	/^ffff8000001076e3:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001076e7	kernel.asm	/^ffff8000001076e7:	48 b8 4c 74 10 00 00 	movabs $0xffff80000010744c,%rax$/;"	l
ffff8000001076ee	kernel.asm	/^ffff8000001076ee:	80 ff ff $/;"	l
ffff8000001076f1	kernel.asm	/^ffff8000001076f1:	ff d0                	callq  *%rax$/;"	l
ffff8000001076f3	kernel.asm	/^ffff8000001076f3:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001076f6	kernel.asm	/^ffff8000001076f6:	48 b8 60 74 10 00 00 	movabs $0xffff800000107460,%rax$/;"	l
ffff8000001076fd	kernel.asm	/^ffff8000001076fd:	80 ff ff $/;"	l
ffff800000107700	kernel.asm	/^ffff800000107700:	ff d0                	callq  *%rax$/;"	l
ffff800000107702	kernel.asm	/^ffff800000107702:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107709	kernel.asm	/^ffff800000107709:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010770d	kernel.asm	/^ffff80000010770d:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff800000107713	kernel.asm	/^ffff800000107713:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107715	kernel.asm	/^ffff800000107715:	75 1a                	jne    ffff800000107731 <pushcli+0x52>$/;"	l
ffff800000107717	kernel.asm	/^ffff800000107717:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff80000010771e	kernel.asm	/^ffff80000010771e:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107722	kernel.asm	/^ffff800000107722:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000107725	kernel.asm	/^ffff800000107725:	81 e2 00 02 00 00    	and    $0x200,%edx$/;"	l
ffff80000010772b	kernel.asm	/^ffff80000010772b:	89 90 e0 00 00 00    	mov    %edx,0xe0(%rax)$/;"	l
ffff800000107731	kernel.asm	/^ffff800000107731:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107738	kernel.asm	/^ffff800000107738:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010773c	kernel.asm	/^ffff80000010773c:	48 c7 c2 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rdx$/;"	l
ffff800000107743	kernel.asm	/^ffff800000107743:	64 48 8b 12          	mov    %fs:(%rdx),%rdx$/;"	l
ffff800000107747	kernel.asm	/^ffff800000107747:	8b 92 dc 00 00 00    	mov    0xdc(%rdx),%edx$/;"	l
ffff80000010774d	kernel.asm	/^ffff80000010774d:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff800000107750	kernel.asm	/^ffff800000107750:	89 90 dc 00 00 00    	mov    %edx,0xdc(%rax)$/;"	l
ffff800000107756	kernel.asm	/^ffff800000107756:	90                   	nop$/;"	l
ffff800000107757	kernel.asm	/^ffff800000107757:	c9                   	leaveq $/;"	l
ffff800000107758	kernel.asm	/^ffff800000107758:	c3                   	retq   $/;"	l
ffff800000107759	kernel.asm	/^ffff800000107759 <popcli>:$/;"	l
ffff800000107759	kernel.asm	/^ffff800000107759:	55                   	push   %rbp$/;"	l
ffff80000010775a	kernel.asm	/^ffff80000010775a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010775d	kernel.asm	/^ffff80000010775d:	48 b8 4c 74 10 00 00 	movabs $0xffff80000010744c,%rax$/;"	l
ffff800000107764	kernel.asm	/^ffff800000107764:	80 ff ff $/;"	l
ffff800000107767	kernel.asm	/^ffff800000107767:	ff d0                	callq  *%rax$/;"	l
ffff800000107769	kernel.asm	/^ffff800000107769:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff80000010776e	kernel.asm	/^ffff80000010776e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107771	kernel.asm	/^ffff800000107771:	74 16                	je     ffff800000107789 <popcli+0x30>$/;"	l
ffff800000107773	kernel.asm	/^ffff800000107773:	48 bf c0 d0 10 00 00 	movabs $0xffff80000010d0c0,%rdi$/;"	l
ffff80000010777a	kernel.asm	/^ffff80000010777a:	80 ff ff $/;"	l
ffff80000010777d	kernel.asm	/^ffff80000010777d:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000107784	kernel.asm	/^ffff800000107784:	80 ff ff $/;"	l
ffff800000107787	kernel.asm	/^ffff800000107787:	ff d0                	callq  *%rax$/;"	l
ffff800000107789	kernel.asm	/^ffff800000107789:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff800000107790	kernel.asm	/^ffff800000107790:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107794	kernel.asm	/^ffff800000107794:	8b 90 dc 00 00 00    	mov    0xdc(%rax),%edx$/;"	l
ffff80000010779a	kernel.asm	/^ffff80000010779a:	83 ea 01             	sub    $0x1,%edx$/;"	l
ffff80000010779d	kernel.asm	/^ffff80000010779d:	89 90 dc 00 00 00    	mov    %edx,0xdc(%rax)$/;"	l
ffff8000001077a3	kernel.asm	/^ffff8000001077a3:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff8000001077a9	kernel.asm	/^ffff8000001077a9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001077ab	kernel.asm	/^ffff8000001077ab:	79 16                	jns    ffff8000001077c3 <popcli+0x6a>$/;"	l
ffff8000001077ad	kernel.asm	/^ffff8000001077ad:	48 bf d7 d0 10 00 00 	movabs $0xffff80000010d0d7,%rdi$/;"	l
ffff8000001077b4	kernel.asm	/^ffff8000001077b4:	80 ff ff $/;"	l
ffff8000001077b7	kernel.asm	/^ffff8000001077b7:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001077be	kernel.asm	/^ffff8000001077be:	80 ff ff $/;"	l
ffff8000001077c1	kernel.asm	/^ffff8000001077c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001077c3	kernel.asm	/^ffff8000001077c3:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001077ca	kernel.asm	/^ffff8000001077ca:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001077ce	kernel.asm	/^ffff8000001077ce:	8b 80 dc 00 00 00    	mov    0xdc(%rax),%eax$/;"	l
ffff8000001077d4	kernel.asm	/^ffff8000001077d4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001077d6	kernel.asm	/^ffff8000001077d6:	75 21                	jne    ffff8000001077f9 <popcli+0xa0>$/;"	l
ffff8000001077d8	kernel.asm	/^ffff8000001077d8:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax$/;"	l
ffff8000001077df	kernel.asm	/^ffff8000001077df:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001077e3	kernel.asm	/^ffff8000001077e3:	8b 80 e0 00 00 00    	mov    0xe0(%rax),%eax$/;"	l
ffff8000001077e9	kernel.asm	/^ffff8000001077e9:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001077eb	kernel.asm	/^ffff8000001077eb:	74 0c                	je     ffff8000001077f9 <popcli+0xa0>$/;"	l
ffff8000001077ed	kernel.asm	/^ffff8000001077ed:	48 b8 68 74 10 00 00 	movabs $0xffff800000107468,%rax$/;"	l
ffff8000001077f4	kernel.asm	/^ffff8000001077f4:	80 ff ff $/;"	l
ffff8000001077f7	kernel.asm	/^ffff8000001077f7:	ff d0                	callq  *%rax$/;"	l
ffff8000001077f9	kernel.asm	/^ffff8000001077f9:	90                   	nop$/;"	l
ffff8000001077fa	kernel.asm	/^ffff8000001077fa:	5d                   	pop    %rbp$/;"	l
ffff8000001077fb	kernel.asm	/^ffff8000001077fb:	c3                   	retq   $/;"	l
ffff8000001077fc	kernel.asm	/^ffff8000001077fc <stosb>:$/;"	l
ffff8000001077fc	kernel.asm	/^ffff8000001077fc:	55                   	push   %rbp$/;"	l
ffff8000001077fd	kernel.asm	/^ffff8000001077fd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107800	kernel.asm	/^ffff800000107800:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107804	kernel.asm	/^ffff800000107804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107808	kernel.asm	/^ffff800000107808:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010780b	kernel.asm	/^ffff80000010780b:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010780e	kernel.asm	/^ffff80000010780e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107812	kernel.asm	/^ffff800000107812:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff800000107815	kernel.asm	/^ffff800000107815:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000107818	kernel.asm	/^ffff800000107818:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010781b	kernel.asm	/^ffff80000010781b:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff80000010781e	kernel.asm	/^ffff80000010781e:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107820	kernel.asm	/^ffff800000107820:	fc                   	cld    $/;"	l
ffff800000107821	kernel.asm	/^ffff800000107821:	f3 aa                	rep stos %al,%es:(%rdi)$/;"	l
ffff800000107823	kernel.asm	/^ffff800000107823:	89 ca                	mov    %ecx,%edx$/;"	l
ffff800000107825	kernel.asm	/^ffff800000107825:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff800000107828	kernel.asm	/^ffff800000107828:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff80000010782c	kernel.asm	/^ffff80000010782c:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010782f	kernel.asm	/^ffff80000010782f:	90                   	nop$/;"	l
ffff800000107830	kernel.asm	/^ffff800000107830:	c9                   	leaveq $/;"	l
ffff800000107831	kernel.asm	/^ffff800000107831:	c3                   	retq   $/;"	l
ffff800000107832	kernel.asm	/^ffff800000107832 <stosl>:$/;"	l
ffff800000107832	kernel.asm	/^ffff800000107832:	55                   	push   %rbp$/;"	l
ffff800000107833	kernel.asm	/^ffff800000107833:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107836	kernel.asm	/^ffff800000107836:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010783a	kernel.asm	/^ffff80000010783a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010783e	kernel.asm	/^ffff80000010783e:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000107841	kernel.asm	/^ffff800000107841:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107844	kernel.asm	/^ffff800000107844:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff800000107848	kernel.asm	/^ffff800000107848:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff80000010784b	kernel.asm	/^ffff80000010784b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010784e	kernel.asm	/^ffff80000010784e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107851	kernel.asm	/^ffff800000107851:	48 89 f7             	mov    %rsi,%rdi$/;"	l
ffff800000107854	kernel.asm	/^ffff800000107854:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107856	kernel.asm	/^ffff800000107856:	fc                   	cld    $/;"	l
ffff800000107857	kernel.asm	/^ffff800000107857:	f3 ab                	rep stos %eax,%es:(%rdi)$/;"	l
ffff800000107859	kernel.asm	/^ffff800000107859:	89 ca                	mov    %ecx,%edx$/;"	l
ffff80000010785b	kernel.asm	/^ffff80000010785b:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010785e	kernel.asm	/^ffff80000010785e:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)$/;"	l
ffff800000107862	kernel.asm	/^ffff800000107862:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff800000107865	kernel.asm	/^ffff800000107865:	90                   	nop$/;"	l
ffff800000107866	kernel.asm	/^ffff800000107866:	c9                   	leaveq $/;"	l
ffff800000107867	kernel.asm	/^ffff800000107867:	c3                   	retq   $/;"	l
ffff800000107868	kernel.asm	/^ffff800000107868 <memset>:$/;"	l
ffff800000107868	kernel.asm	/^ffff800000107868:	55                   	push   %rbp$/;"	l
ffff800000107869	kernel.asm	/^ffff800000107869:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010786c	kernel.asm	/^ffff80000010786c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107870	kernel.asm	/^ffff800000107870:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107874	kernel.asm	/^ffff800000107874:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff800000107877	kernel.asm	/^ffff800000107877:	89 55 f0             	mov    %edx,-0x10(%rbp)$/;"	l
ffff80000010787a	kernel.asm	/^ffff80000010787a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010787e	kernel.asm	/^ffff80000010787e:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000107881	kernel.asm	/^ffff800000107881:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107884	kernel.asm	/^ffff800000107884:	75 4f                	jne    ffff8000001078d5 <memset+0x6d>$/;"	l
ffff800000107886	kernel.asm	/^ffff800000107886:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff800000107889	kernel.asm	/^ffff800000107889:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff80000010788c	kernel.asm	/^ffff80000010788c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010788e	kernel.asm	/^ffff80000010788e:	75 45                	jne    ffff8000001078d5 <memset+0x6d>$/;"	l
ffff800000107890	kernel.asm	/^ffff800000107890:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)$/;"	l
ffff800000107897	kernel.asm	/^ffff800000107897:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010789a	kernel.asm	/^ffff80000010789a:	c1 e8 02             	shr    $0x2,%eax$/;"	l
ffff80000010789d	kernel.asm	/^ffff80000010789d:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010789f	kernel.asm	/^ffff80000010789f:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001078a2	kernel.asm	/^ffff8000001078a2:	c1 e0 18             	shl    $0x18,%eax$/;"	l
ffff8000001078a5	kernel.asm	/^ffff8000001078a5:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001078a7	kernel.asm	/^ffff8000001078a7:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001078aa	kernel.asm	/^ffff8000001078aa:	c1 e0 10             	shl    $0x10,%eax$/;"	l
ffff8000001078ad	kernel.asm	/^ffff8000001078ad:	09 c2                	or     %eax,%edx$/;"	l
ffff8000001078af	kernel.asm	/^ffff8000001078af:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff8000001078b2	kernel.asm	/^ffff8000001078b2:	c1 e0 08             	shl    $0x8,%eax$/;"	l
ffff8000001078b5	kernel.asm	/^ffff8000001078b5:	09 d0                	or     %edx,%eax$/;"	l
ffff8000001078b7	kernel.asm	/^ffff8000001078b7:	0b 45 f4             	or     -0xc(%rbp),%eax$/;"	l
ffff8000001078ba	kernel.asm	/^ffff8000001078ba:	89 c1                	mov    %eax,%ecx$/;"	l
ffff8000001078bc	kernel.asm	/^ffff8000001078bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001078c0	kernel.asm	/^ffff8000001078c0:	89 f2                	mov    %esi,%edx$/;"	l
ffff8000001078c2	kernel.asm	/^ffff8000001078c2:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001078c4	kernel.asm	/^ffff8000001078c4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001078c7	kernel.asm	/^ffff8000001078c7:	48 b8 32 78 10 00 00 	movabs $0xffff800000107832,%rax$/;"	l
ffff8000001078ce	kernel.asm	/^ffff8000001078ce:	80 ff ff $/;"	l
ffff8000001078d1	kernel.asm	/^ffff8000001078d1:	ff d0                	callq  *%rax$/;"	l
ffff8000001078d3	kernel.asm	/^ffff8000001078d3:	eb 1b                	jmp    ffff8000001078f0 <memset+0x88>$/;"	l
ffff8000001078d5	kernel.asm	/^ffff8000001078d5:	8b 55 f0             	mov    -0x10(%rbp),%edx$/;"	l
ffff8000001078d8	kernel.asm	/^ffff8000001078d8:	8b 4d f4             	mov    -0xc(%rbp),%ecx$/;"	l
ffff8000001078db	kernel.asm	/^ffff8000001078db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001078df	kernel.asm	/^ffff8000001078df:	89 ce                	mov    %ecx,%esi$/;"	l
ffff8000001078e1	kernel.asm	/^ffff8000001078e1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001078e4	kernel.asm	/^ffff8000001078e4:	48 b8 fc 77 10 00 00 	movabs $0xffff8000001077fc,%rax$/;"	l
ffff8000001078eb	kernel.asm	/^ffff8000001078eb:	80 ff ff $/;"	l
ffff8000001078ee	kernel.asm	/^ffff8000001078ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001078f0	kernel.asm	/^ffff8000001078f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001078f4	kernel.asm	/^ffff8000001078f4:	c9                   	leaveq $/;"	l
ffff8000001078f5	kernel.asm	/^ffff8000001078f5:	c3                   	retq   $/;"	l
ffff8000001078f6	kernel.asm	/^ffff8000001078f6 <memcmp>:$/;"	l
ffff8000001078f6	kernel.asm	/^ffff8000001078f6:	55                   	push   %rbp$/;"	l
ffff8000001078f7	kernel.asm	/^ffff8000001078f7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001078fa	kernel.asm	/^ffff8000001078fa:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff8000001078fe	kernel.asm	/^ffff8000001078fe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107902	kernel.asm	/^ffff800000107902:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107906	kernel.asm	/^ffff800000107906:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107909	kernel.asm	/^ffff800000107909:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010790d	kernel.asm	/^ffff80000010790d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107911	kernel.asm	/^ffff800000107911:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107915	kernel.asm	/^ffff800000107915:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107919	kernel.asm	/^ffff800000107919:	eb 36                	jmp    ffff800000107951 <memcmp+0x5b>$/;"	l
ffff80000010791b	kernel.asm	/^ffff80000010791b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010791f	kernel.asm	/^ffff80000010791f:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000107922	kernel.asm	/^ffff800000107922:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107926	kernel.asm	/^ffff800000107926:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107929	kernel.asm	/^ffff800000107929:	38 c2                	cmp    %al,%dl$/;"	l
ffff80000010792b	kernel.asm	/^ffff80000010792b:	74 1a                	je     ffff800000107947 <memcmp+0x51>$/;"	l
ffff80000010792d	kernel.asm	/^ffff80000010792d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107931	kernel.asm	/^ffff800000107931:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107934	kernel.asm	/^ffff800000107934:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000107937	kernel.asm	/^ffff800000107937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010793b	kernel.asm	/^ffff80000010793b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff80000010793e	kernel.asm	/^ffff80000010793e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000107941	kernel.asm	/^ffff800000107941:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000107943	kernel.asm	/^ffff800000107943:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000107945	kernel.asm	/^ffff800000107945:	eb 1c                	jmp    ffff800000107963 <memcmp+0x6d>$/;"	l
ffff800000107947	kernel.asm	/^ffff800000107947:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff80000010794c	kernel.asm	/^ffff80000010794c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff800000107951	kernel.asm	/^ffff800000107951:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107954	kernel.asm	/^ffff800000107954:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107957	kernel.asm	/^ffff800000107957:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010795a	kernel.asm	/^ffff80000010795a:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010795c	kernel.asm	/^ffff80000010795c:	75 bd                	jne    ffff80000010791b <memcmp+0x25>$/;"	l
ffff80000010795e	kernel.asm	/^ffff80000010795e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107963	kernel.asm	/^ffff800000107963:	c9                   	leaveq $/;"	l
ffff800000107964	kernel.asm	/^ffff800000107964:	c3                   	retq   $/;"	l
ffff800000107965	kernel.asm	/^ffff800000107965 <memmove>:$/;"	l
ffff800000107965	kernel.asm	/^ffff800000107965:	55                   	push   %rbp$/;"	l
ffff800000107966	kernel.asm	/^ffff800000107966:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107969	kernel.asm	/^ffff800000107969:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff80000010796d	kernel.asm	/^ffff80000010796d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107971	kernel.asm	/^ffff800000107971:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107975	kernel.asm	/^ffff800000107975:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107978	kernel.asm	/^ffff800000107978:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010797c	kernel.asm	/^ffff80000010797c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107980	kernel.asm	/^ffff800000107980:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107984	kernel.asm	/^ffff800000107984:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107988	kernel.asm	/^ffff800000107988:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010798c	kernel.asm	/^ffff80000010798c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff800000107990	kernel.asm	/^ffff800000107990:	73 63                	jae    ffff8000001079f5 <memmove+0x90>$/;"	l
ffff800000107992	kernel.asm	/^ffff800000107992:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff800000107995	kernel.asm	/^ffff800000107995:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107999	kernel.asm	/^ffff800000107999:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010799c	kernel.asm	/^ffff80000010799c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff8000001079a0	kernel.asm	/^ffff8000001079a0:	76 53                	jbe    ffff8000001079f5 <memmove+0x90>$/;"	l
ffff8000001079a2	kernel.asm	/^ffff8000001079a2:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001079a5	kernel.asm	/^ffff8000001079a5:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff8000001079a9	kernel.asm	/^ffff8000001079a9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001079ac	kernel.asm	/^ffff8000001079ac:	48 01 45 f0          	add    %rax,-0x10(%rbp)$/;"	l
ffff8000001079b0	kernel.asm	/^ffff8000001079b0:	eb 17                	jmp    ffff8000001079c9 <memmove+0x64>$/;"	l
ffff8000001079b2	kernel.asm	/^ffff8000001079b2:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)$/;"	l
ffff8000001079b7	kernel.asm	/^ffff8000001079b7:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)$/;"	l
ffff8000001079bc	kernel.asm	/^ffff8000001079bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001079c0	kernel.asm	/^ffff8000001079c0:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff8000001079c3	kernel.asm	/^ffff8000001079c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001079c7	kernel.asm	/^ffff8000001079c7:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001079c9	kernel.asm	/^ffff8000001079c9:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001079cc	kernel.asm	/^ffff8000001079cc:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001079cf	kernel.asm	/^ffff8000001079cf:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001079d2	kernel.asm	/^ffff8000001079d2:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001079d4	kernel.asm	/^ffff8000001079d4:	75 dc                	jne    ffff8000001079b2 <memmove+0x4d>$/;"	l
ffff8000001079d6	kernel.asm	/^ffff8000001079d6:	eb 2a                	jmp    ffff800000107a02 <memmove+0x9d>$/;"	l
ffff8000001079d8	kernel.asm	/^ffff8000001079d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001079dc	kernel.asm	/^ffff8000001079dc:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff8000001079e0	kernel.asm	/^ffff8000001079e0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)$/;"	l
ffff8000001079e4	kernel.asm	/^ffff8000001079e4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001079e8	kernel.asm	/^ffff8000001079e8:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff8000001079ec	kernel.asm	/^ffff8000001079ec:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)$/;"	l
ffff8000001079f0	kernel.asm	/^ffff8000001079f0:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff8000001079f3	kernel.asm	/^ffff8000001079f3:	88 10                	mov    %dl,(%rax)$/;"	l
ffff8000001079f5	kernel.asm	/^ffff8000001079f5:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff8000001079f8	kernel.asm	/^ffff8000001079f8:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff8000001079fb	kernel.asm	/^ffff8000001079fb:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff8000001079fe	kernel.asm	/^ffff8000001079fe:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107a00	kernel.asm	/^ffff800000107a00:	75 d6                	jne    ffff8000001079d8 <memmove+0x73>$/;"	l
ffff800000107a02	kernel.asm	/^ffff800000107a02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107a06	kernel.asm	/^ffff800000107a06:	c9                   	leaveq $/;"	l
ffff800000107a07	kernel.asm	/^ffff800000107a07:	c3                   	retq   $/;"	l
ffff800000107a08	kernel.asm	/^ffff800000107a08 <memcpy>:$/;"	l
ffff800000107a08	kernel.asm	/^ffff800000107a08:	55                   	push   %rbp$/;"	l
ffff800000107a09	kernel.asm	/^ffff800000107a09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107a0c	kernel.asm	/^ffff800000107a0c:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107a10	kernel.asm	/^ffff800000107a10:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107a14	kernel.asm	/^ffff800000107a14:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107a18	kernel.asm	/^ffff800000107a18:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff800000107a1b	kernel.asm	/^ffff800000107a1b:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107a1e	kernel.asm	/^ffff800000107a1e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx$/;"	l
ffff800000107a22	kernel.asm	/^ffff800000107a22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a26	kernel.asm	/^ffff800000107a26:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000107a29	kernel.asm	/^ffff800000107a29:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107a2c	kernel.asm	/^ffff800000107a2c:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff800000107a33	kernel.asm	/^ffff800000107a33:	80 ff ff $/;"	l
ffff800000107a36	kernel.asm	/^ffff800000107a36:	ff d0                	callq  *%rax$/;"	l
ffff800000107a38	kernel.asm	/^ffff800000107a38:	c9                   	leaveq $/;"	l
ffff800000107a39	kernel.asm	/^ffff800000107a39:	c3                   	retq   $/;"	l
ffff800000107a3a	kernel.asm	/^ffff800000107a3a <strncmp>:$/;"	l
ffff800000107a3a	kernel.asm	/^ffff800000107a3a:	55                   	push   %rbp$/;"	l
ffff800000107a3b	kernel.asm	/^ffff800000107a3b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107a3e	kernel.asm	/^ffff800000107a3e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107a42	kernel.asm	/^ffff800000107a42:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107a46	kernel.asm	/^ffff800000107a46:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107a4a	kernel.asm	/^ffff800000107a4a:	89 55 ec             	mov    %edx,-0x14(%rbp)$/;"	l
ffff800000107a4d	kernel.asm	/^ffff800000107a4d:	eb 0e                	jmp    ffff800000107a5d <strncmp+0x23>$/;"	l
ffff800000107a4f	kernel.asm	/^ffff800000107a4f:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)$/;"	l
ffff800000107a53	kernel.asm	/^ffff800000107a53:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107a58	kernel.asm	/^ffff800000107a58:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)$/;"	l
ffff800000107a5d	kernel.asm	/^ffff800000107a5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107a61	kernel.asm	/^ffff800000107a61:	74 1d                	je     ffff800000107a80 <strncmp+0x46>$/;"	l
ffff800000107a63	kernel.asm	/^ffff800000107a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a67	kernel.asm	/^ffff800000107a67:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107a6a	kernel.asm	/^ffff800000107a6a:	84 c0                	test   %al,%al$/;"	l
ffff800000107a6c	kernel.asm	/^ffff800000107a6c:	74 12                	je     ffff800000107a80 <strncmp+0x46>$/;"	l
ffff800000107a6e	kernel.asm	/^ffff800000107a6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a72	kernel.asm	/^ffff800000107a72:	0f b6 10             	movzbl (%rax),%edx$/;"	l
ffff800000107a75	kernel.asm	/^ffff800000107a75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107a79	kernel.asm	/^ffff800000107a79:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107a7c	kernel.asm	/^ffff800000107a7c:	38 c2                	cmp    %al,%dl$/;"	l
ffff800000107a7e	kernel.asm	/^ffff800000107a7e:	74 cf                	je     ffff800000107a4f <strncmp+0x15>$/;"	l
ffff800000107a80	kernel.asm	/^ffff800000107a80:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107a84	kernel.asm	/^ffff800000107a84:	75 07                	jne    ffff800000107a8d <strncmp+0x53>$/;"	l
ffff800000107a86	kernel.asm	/^ffff800000107a86:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107a8b	kernel.asm	/^ffff800000107a8b:	eb 18                	jmp    ffff800000107aa5 <strncmp+0x6b>$/;"	l
ffff800000107a8d	kernel.asm	/^ffff800000107a8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107a91	kernel.asm	/^ffff800000107a91:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107a94	kernel.asm	/^ffff800000107a94:	0f b6 d0             	movzbl %al,%edx$/;"	l
ffff800000107a97	kernel.asm	/^ffff800000107a97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107a9b	kernel.asm	/^ffff800000107a9b:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107a9e	kernel.asm	/^ffff800000107a9e:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000107aa1	kernel.asm	/^ffff800000107aa1:	29 c2                	sub    %eax,%edx$/;"	l
ffff800000107aa3	kernel.asm	/^ffff800000107aa3:	89 d0                	mov    %edx,%eax$/;"	l
ffff800000107aa5	kernel.asm	/^ffff800000107aa5:	c9                   	leaveq $/;"	l
ffff800000107aa6	kernel.asm	/^ffff800000107aa6:	c3                   	retq   $/;"	l
ffff800000107aa7	kernel.asm	/^ffff800000107aa7 <strncpy>:$/;"	l
ffff800000107aa7	kernel.asm	/^ffff800000107aa7:	55                   	push   %rbp$/;"	l
ffff800000107aa8	kernel.asm	/^ffff800000107aa8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107aab	kernel.asm	/^ffff800000107aab:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff800000107aaf	kernel.asm	/^ffff800000107aaf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107ab3	kernel.asm	/^ffff800000107ab3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107ab7	kernel.asm	/^ffff800000107ab7:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107aba	kernel.asm	/^ffff800000107aba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107abe	kernel.asm	/^ffff800000107abe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107ac2	kernel.asm	/^ffff800000107ac2:	90                   	nop$/;"	l
ffff800000107ac3	kernel.asm	/^ffff800000107ac3:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107ac6	kernel.asm	/^ffff800000107ac6:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107ac9	kernel.asm	/^ffff800000107ac9:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107acc	kernel.asm	/^ffff800000107acc:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107ace	kernel.asm	/^ffff800000107ace:	7e 35                	jle    ffff800000107b05 <strncpy+0x5e>$/;"	l
ffff800000107ad0	kernel.asm	/^ffff800000107ad0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107ad4	kernel.asm	/^ffff800000107ad4:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000107ad8	kernel.asm	/^ffff800000107ad8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107adc	kernel.asm	/^ffff800000107adc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107ae0	kernel.asm	/^ffff800000107ae0:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff800000107ae4	kernel.asm	/^ffff800000107ae4:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff800000107ae8	kernel.asm	/^ffff800000107ae8:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107aeb	kernel.asm	/^ffff800000107aeb:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000107aed	kernel.asm	/^ffff800000107aed:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107af0	kernel.asm	/^ffff800000107af0:	84 c0                	test   %al,%al$/;"	l
ffff800000107af2	kernel.asm	/^ffff800000107af2:	75 cf                	jne    ffff800000107ac3 <strncpy+0x1c>$/;"	l
ffff800000107af4	kernel.asm	/^ffff800000107af4:	eb 0f                	jmp    ffff800000107b05 <strncpy+0x5e>$/;"	l
ffff800000107af6	kernel.asm	/^ffff800000107af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107afa	kernel.asm	/^ffff800000107afa:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000107afe	kernel.asm	/^ffff800000107afe:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107b02	kernel.asm	/^ffff800000107b02:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff800000107b05	kernel.asm	/^ffff800000107b05:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000107b08	kernel.asm	/^ffff800000107b08:	8d 50 ff             	lea    -0x1(%rax),%edx$/;"	l
ffff800000107b0b	kernel.asm	/^ffff800000107b0b:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107b0e	kernel.asm	/^ffff800000107b0e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107b10	kernel.asm	/^ffff800000107b10:	7f e4                	jg     ffff800000107af6 <strncpy+0x4f>$/;"	l
ffff800000107b12	kernel.asm	/^ffff800000107b12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107b16	kernel.asm	/^ffff800000107b16:	c9                   	leaveq $/;"	l
ffff800000107b17	kernel.asm	/^ffff800000107b17:	c3                   	retq   $/;"	l
ffff800000107b18	kernel.asm	/^ffff800000107b18 <safestrcpy>:$/;"	l
ffff800000107b18	kernel.asm	/^ffff800000107b18:	55                   	push   %rbp$/;"	l
ffff800000107b19	kernel.asm	/^ffff800000107b19:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107b1c	kernel.asm	/^ffff800000107b1c:	48 83 ec 28          	sub    $0x28,%rsp$/;"	l
ffff800000107b20	kernel.asm	/^ffff800000107b20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107b24	kernel.asm	/^ffff800000107b24:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107b28	kernel.asm	/^ffff800000107b28:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff800000107b2b	kernel.asm	/^ffff800000107b2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107b2f	kernel.asm	/^ffff800000107b2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107b33	kernel.asm	/^ffff800000107b33:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107b37	kernel.asm	/^ffff800000107b37:	7f 06                	jg     ffff800000107b3f <safestrcpy+0x27>$/;"	l
ffff800000107b39	kernel.asm	/^ffff800000107b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107b3d	kernel.asm	/^ffff800000107b3d:	eb 39                	jmp    ffff800000107b78 <safestrcpy+0x60>$/;"	l
ffff800000107b3f	kernel.asm	/^ffff800000107b3f:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)$/;"	l
ffff800000107b43	kernel.asm	/^ffff800000107b43:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)$/;"	l
ffff800000107b47	kernel.asm	/^ffff800000107b47:	7e 24                	jle    ffff800000107b6d <safestrcpy+0x55>$/;"	l
ffff800000107b49	kernel.asm	/^ffff800000107b49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107b4d	kernel.asm	/^ffff800000107b4d:	48 8d 50 01          	lea    0x1(%rax),%rdx$/;"	l
ffff800000107b51	kernel.asm	/^ffff800000107b51:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff800000107b55	kernel.asm	/^ffff800000107b55:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107b59	kernel.asm	/^ffff800000107b59:	48 8d 4a 01          	lea    0x1(%rdx),%rcx$/;"	l
ffff800000107b5d	kernel.asm	/^ffff800000107b5d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)$/;"	l
ffff800000107b61	kernel.asm	/^ffff800000107b61:	0f b6 12             	movzbl (%rdx),%edx$/;"	l
ffff800000107b64	kernel.asm	/^ffff800000107b64:	88 10                	mov    %dl,(%rax)$/;"	l
ffff800000107b66	kernel.asm	/^ffff800000107b66:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107b69	kernel.asm	/^ffff800000107b69:	84 c0                	test   %al,%al$/;"	l
ffff800000107b6b	kernel.asm	/^ffff800000107b6b:	75 d2                	jne    ffff800000107b3f <safestrcpy+0x27>$/;"	l
ffff800000107b6d	kernel.asm	/^ffff800000107b6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107b71	kernel.asm	/^ffff800000107b71:	c6 00 00             	movb   $0x0,(%rax)$/;"	l
ffff800000107b74	kernel.asm	/^ffff800000107b74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107b78	kernel.asm	/^ffff800000107b78:	c9                   	leaveq $/;"	l
ffff800000107b79	kernel.asm	/^ffff800000107b79:	c3                   	retq   $/;"	l
ffff800000107b7a	kernel.asm	/^ffff800000107b7a <strlen>:$/;"	l
ffff800000107b7a	kernel.asm	/^ffff800000107b7a:	55                   	push   %rbp$/;"	l
ffff800000107b7b	kernel.asm	/^ffff800000107b7b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107b7e	kernel.asm	/^ffff800000107b7e:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107b82	kernel.asm	/^ffff800000107b82:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107b86	kernel.asm	/^ffff800000107b86:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000107b8d	kernel.asm	/^ffff800000107b8d:	eb 04                	jmp    ffff800000107b93 <strlen+0x19>$/;"	l
ffff800000107b8f	kernel.asm	/^ffff800000107b8f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000107b93	kernel.asm	/^ffff800000107b93:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107b96	kernel.asm	/^ffff800000107b96:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff800000107b99	kernel.asm	/^ffff800000107b99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000107b9d	kernel.asm	/^ffff800000107b9d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000107ba0	kernel.asm	/^ffff800000107ba0:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107ba3	kernel.asm	/^ffff800000107ba3:	84 c0                	test   %al,%al$/;"	l
ffff800000107ba5	kernel.asm	/^ffff800000107ba5:	75 e8                	jne    ffff800000107b8f <strlen+0x15>$/;"	l
ffff800000107ba7	kernel.asm	/^ffff800000107ba7:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107baa	kernel.asm	/^ffff800000107baa:	c9                   	leaveq $/;"	l
ffff800000107bab	kernel.asm	/^ffff800000107bab:	c3                   	retq   $/;"	l
ffff800000107bac	kernel.asm	/^ffff800000107bac <swtch>:$/;"	l
ffff800000107bac	kernel.asm	/^ffff800000107bac:	55                   	push   %rbp$/;"	l
ffff800000107bad	kernel.asm	/^ffff800000107bad:	53                   	push   %rbx$/;"	l
ffff800000107bae	kernel.asm	/^ffff800000107bae:	41 53                	push   %r11$/;"	l
ffff800000107bb0	kernel.asm	/^ffff800000107bb0:	41 54                	push   %r12$/;"	l
ffff800000107bb2	kernel.asm	/^ffff800000107bb2:	41 55                	push   %r13$/;"	l
ffff800000107bb4	kernel.asm	/^ffff800000107bb4:	41 56                	push   %r14$/;"	l
ffff800000107bb6	kernel.asm	/^ffff800000107bb6:	41 57                	push   %r15$/;"	l
ffff800000107bb8	kernel.asm	/^ffff800000107bb8:	48 89 27             	mov    %rsp,(%rdi)$/;"	l
ffff800000107bbb	kernel.asm	/^ffff800000107bbb:	48 89 f4             	mov    %rsi,%rsp$/;"	l
ffff800000107bbe	kernel.asm	/^ffff800000107bbe:	41 5f                	pop    %r15$/;"	l
ffff800000107bc0	kernel.asm	/^ffff800000107bc0:	41 5e                	pop    %r14$/;"	l
ffff800000107bc2	kernel.asm	/^ffff800000107bc2:	41 5d                	pop    %r13$/;"	l
ffff800000107bc4	kernel.asm	/^ffff800000107bc4:	41 5c                	pop    %r12$/;"	l
ffff800000107bc6	kernel.asm	/^ffff800000107bc6:	41 5b                	pop    %r11$/;"	l
ffff800000107bc8	kernel.asm	/^ffff800000107bc8:	5b                   	pop    %rbx$/;"	l
ffff800000107bc9	kernel.asm	/^ffff800000107bc9:	5d                   	pop    %rbp$/;"	l
ffff800000107bca	kernel.asm	/^ffff800000107bca:	c3                   	retq   $/;"	l
ffff800000107bcb	kernel.asm	/^ffff800000107bcb <fetchint>:$/;"	l
ffff800000107bcb	kernel.asm	/^ffff800000107bcb:	55                   	push   %rbp$/;"	l
ffff800000107bcc	kernel.asm	/^ffff800000107bcc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107bcf	kernel.asm	/^ffff800000107bcf:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107bd3	kernel.asm	/^ffff800000107bd3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107bd7	kernel.asm	/^ffff800000107bd7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107bdb	kernel.asm	/^ffff800000107bdb:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107be2	kernel.asm	/^ffff800000107be2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107be6	kernel.asm	/^ffff800000107be6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107be9	kernel.asm	/^ffff800000107be9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff800000107bed	kernel.asm	/^ffff800000107bed:	76 1b                	jbe    ffff800000107c0a <fetchint+0x3f>$/;"	l
ffff800000107bef	kernel.asm	/^ffff800000107bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107bf3	kernel.asm	/^ffff800000107bf3:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff800000107bf7	kernel.asm	/^ffff800000107bf7:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107bfe	kernel.asm	/^ffff800000107bfe:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c02	kernel.asm	/^ffff800000107c02:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c05	kernel.asm	/^ffff800000107c05:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107c08	kernel.asm	/^ffff800000107c08:	76 07                	jbe    ffff800000107c11 <fetchint+0x46>$/;"	l
ffff800000107c0a	kernel.asm	/^ffff800000107c0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107c0f	kernel.asm	/^ffff800000107c0f:	eb 11                	jmp    ffff800000107c22 <fetchint+0x57>$/;"	l
ffff800000107c11	kernel.asm	/^ffff800000107c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c15	kernel.asm	/^ffff800000107c15:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000107c17	kernel.asm	/^ffff800000107c17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107c1b	kernel.asm	/^ffff800000107c1b:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107c1d	kernel.asm	/^ffff800000107c1d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107c22	kernel.asm	/^ffff800000107c22:	c9                   	leaveq $/;"	l
ffff800000107c23	kernel.asm	/^ffff800000107c23:	c3                   	retq   $/;"	l
ffff800000107c24	kernel.asm	/^ffff800000107c24 <fetchaddr>:$/;"	l
ffff800000107c24	kernel.asm	/^ffff800000107c24:	55                   	push   %rbp$/;"	l
ffff800000107c25	kernel.asm	/^ffff800000107c25:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c28	kernel.asm	/^ffff800000107c28:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107c2c	kernel.asm	/^ffff800000107c2c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff800000107c30	kernel.asm	/^ffff800000107c30:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107c34	kernel.asm	/^ffff800000107c34:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107c3b	kernel.asm	/^ffff800000107c3b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c3f	kernel.asm	/^ffff800000107c3f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c42	kernel.asm	/^ffff800000107c42:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff800000107c46	kernel.asm	/^ffff800000107c46:	76 1b                	jbe    ffff800000107c63 <fetchaddr+0x3f>$/;"	l
ffff800000107c48	kernel.asm	/^ffff800000107c48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c4c	kernel.asm	/^ffff800000107c4c:	48 8d 50 08          	lea    0x8(%rax),%rdx$/;"	l
ffff800000107c50	kernel.asm	/^ffff800000107c50:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107c57	kernel.asm	/^ffff800000107c57:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c5b	kernel.asm	/^ffff800000107c5b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c5e	kernel.asm	/^ffff800000107c5e:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107c61	kernel.asm	/^ffff800000107c61:	76 07                	jbe    ffff800000107c6a <fetchaddr+0x46>$/;"	l
ffff800000107c63	kernel.asm	/^ffff800000107c63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107c68	kernel.asm	/^ffff800000107c68:	eb 13                	jmp    ffff800000107c7d <fetchaddr+0x59>$/;"	l
ffff800000107c6a	kernel.asm	/^ffff800000107c6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107c6e	kernel.asm	/^ffff800000107c6e:	48 8b 10             	mov    (%rax),%rdx$/;"	l
ffff800000107c71	kernel.asm	/^ffff800000107c71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107c75	kernel.asm	/^ffff800000107c75:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107c78	kernel.asm	/^ffff800000107c78:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107c7d	kernel.asm	/^ffff800000107c7d:	c9                   	leaveq $/;"	l
ffff800000107c7e	kernel.asm	/^ffff800000107c7e:	c3                   	retq   $/;"	l
ffff800000107c7f	kernel.asm	/^ffff800000107c7f <fetchstr>:$/;"	l
ffff800000107c7f	kernel.asm	/^ffff800000107c7f:	55                   	push   %rbp$/;"	l
ffff800000107c80	kernel.asm	/^ffff800000107c80:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107c83	kernel.asm	/^ffff800000107c83:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107c87	kernel.asm	/^ffff800000107c87:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff800000107c8b	kernel.asm	/^ffff800000107c8b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107c8f	kernel.asm	/^ffff800000107c8f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107c96	kernel.asm	/^ffff800000107c96:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107c9a	kernel.asm	/^ffff800000107c9a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107c9d	kernel.asm	/^ffff800000107c9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax$/;"	l
ffff800000107ca1	kernel.asm	/^ffff800000107ca1:	77 07                	ja     ffff800000107caa <fetchstr+0x2b>$/;"	l
ffff800000107ca3	kernel.asm	/^ffff800000107ca3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ca8	kernel.asm	/^ffff800000107ca8:	eb 5c                	jmp    ffff800000107d06 <fetchstr+0x87>$/;"	l
ffff800000107caa	kernel.asm	/^ffff800000107caa:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff800000107cae	kernel.asm	/^ffff800000107cae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107cb2	kernel.asm	/^ffff800000107cb2:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107cb5	kernel.asm	/^ffff800000107cb5:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107cbc	kernel.asm	/^ffff800000107cbc:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107cc0	kernel.asm	/^ffff800000107cc0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107cc3	kernel.asm	/^ffff800000107cc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000107cc7	kernel.asm	/^ffff800000107cc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ccb	kernel.asm	/^ffff800000107ccb:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107cce	kernel.asm	/^ffff800000107cce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000107cd2	kernel.asm	/^ffff800000107cd2:	eb 23                	jmp    ffff800000107cf7 <fetchstr+0x78>$/;"	l
ffff800000107cd4	kernel.asm	/^ffff800000107cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107cd8	kernel.asm	/^ffff800000107cd8:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000107cdb	kernel.asm	/^ffff800000107cdb:	84 c0                	test   %al,%al$/;"	l
ffff800000107cdd	kernel.asm	/^ffff800000107cdd:	75 13                	jne    ffff800000107cf2 <fetchstr+0x73>$/;"	l
ffff800000107cdf	kernel.asm	/^ffff800000107cdf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000107ce3	kernel.asm	/^ffff800000107ce3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107ce7	kernel.asm	/^ffff800000107ce7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107cea	kernel.asm	/^ffff800000107cea:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff800000107ced	kernel.asm	/^ffff800000107ced:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff800000107cf0	kernel.asm	/^ffff800000107cf0:	eb 14                	jmp    ffff800000107d06 <fetchstr+0x87>$/;"	l
ffff800000107cf2	kernel.asm	/^ffff800000107cf2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000107cf7	kernel.asm	/^ffff800000107cf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107cfb	kernel.asm	/^ffff800000107cfb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff800000107cff	kernel.asm	/^ffff800000107cff:	72 d3                	jb     ffff800000107cd4 <fetchstr+0x55>$/;"	l
ffff800000107d01	kernel.asm	/^ffff800000107d01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107d06	kernel.asm	/^ffff800000107d06:	c9                   	leaveq $/;"	l
ffff800000107d07	kernel.asm	/^ffff800000107d07:	c3                   	retq   $/;"	l
ffff800000107d08	kernel.asm	/^ffff800000107d08 <fetcharg>:$/;"	l
ffff800000107d08	kernel.asm	/^ffff800000107d08:	55                   	push   %rbp$/;"	l
ffff800000107d09	kernel.asm	/^ffff800000107d09:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107d0c	kernel.asm	/^ffff800000107d0c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107d10	kernel.asm	/^ffff800000107d10:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107d13	kernel.asm	/^ffff800000107d13:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)$/;"	l
ffff800000107d17	kernel.asm	/^ffff800000107d17:	0f 87 9b 00 00 00    	ja     ffff800000107db8 <fetcharg+0xb0>$/;"	l
ffff800000107d1d	kernel.asm	/^ffff800000107d1d:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107d20	kernel.asm	/^ffff800000107d20:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000107d27	kernel.asm	/^ffff800000107d27:	00 $/;"	l
ffff800000107d28	kernel.asm	/^ffff800000107d28:	48 b8 f0 d0 10 00 00 	movabs $0xffff80000010d0f0,%rax$/;"	l
ffff800000107d2f	kernel.asm	/^ffff800000107d2f:	80 ff ff $/;"	l
ffff800000107d32	kernel.asm	/^ffff800000107d32:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000107d35	kernel.asm	/^ffff800000107d35:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107d38	kernel.asm	/^ffff800000107d38:	ff e0                	jmpq   *%rax$/;"	l
ffff800000107d3a	kernel.asm	/^ffff800000107d3a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d41	kernel.asm	/^ffff800000107d41:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d45	kernel.asm	/^ffff800000107d45:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d49	kernel.asm	/^ffff800000107d49:	48 8b 40 30          	mov    0x30(%rax),%rax$/;"	l
ffff800000107d4d	kernel.asm	/^ffff800000107d4d:	eb 7f                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107d4f	kernel.asm	/^ffff800000107d4f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d56	kernel.asm	/^ffff800000107d56:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d5a	kernel.asm	/^ffff800000107d5a:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d5e	kernel.asm	/^ffff800000107d5e:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d62	kernel.asm	/^ffff800000107d62:	eb 6a                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107d64	kernel.asm	/^ffff800000107d64:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d6b	kernel.asm	/^ffff800000107d6b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d6f	kernel.asm	/^ffff800000107d6f:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d73	kernel.asm	/^ffff800000107d73:	48 8b 40 18          	mov    0x18(%rax),%rax$/;"	l
ffff800000107d77	kernel.asm	/^ffff800000107d77:	eb 55                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107d79	kernel.asm	/^ffff800000107d79:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d80	kernel.asm	/^ffff800000107d80:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d84	kernel.asm	/^ffff800000107d84:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d88	kernel.asm	/^ffff800000107d88:	48 8b 40 48          	mov    0x48(%rax),%rax$/;"	l
ffff800000107d8c	kernel.asm	/^ffff800000107d8c:	eb 40                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107d8e	kernel.asm	/^ffff800000107d8e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107d95	kernel.asm	/^ffff800000107d95:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107d99	kernel.asm	/^ffff800000107d99:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107d9d	kernel.asm	/^ffff800000107d9d:	48 8b 40 38          	mov    0x38(%rax),%rax$/;"	l
ffff800000107da1	kernel.asm	/^ffff800000107da1:	eb 2b                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107da3	kernel.asm	/^ffff800000107da3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107daa	kernel.asm	/^ffff800000107daa:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107dae	kernel.asm	/^ffff800000107dae:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107db2	kernel.asm	/^ffff800000107db2:	48 8b 40 40          	mov    0x40(%rax),%rax$/;"	l
ffff800000107db6	kernel.asm	/^ffff800000107db6:	eb 16                	jmp    ffff800000107dce <fetcharg+0xc6>$/;"	l
ffff800000107db8	kernel.asm	/^ffff800000107db8:	48 bf e0 d0 10 00 00 	movabs $0xffff80000010d0e0,%rdi$/;"	l
ffff800000107dbf	kernel.asm	/^ffff800000107dbf:	80 ff ff $/;"	l
ffff800000107dc2	kernel.asm	/^ffff800000107dc2:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000107dc9	kernel.asm	/^ffff800000107dc9:	80 ff ff $/;"	l
ffff800000107dcc	kernel.asm	/^ffff800000107dcc:	ff d0                	callq  *%rax$/;"	l
ffff800000107dce	kernel.asm	/^ffff800000107dce:	c9                   	leaveq $/;"	l
ffff800000107dcf	kernel.asm	/^ffff800000107dcf:	c3                   	retq   $/;"	l
ffff800000107dd0	kernel.asm	/^ffff800000107dd0 <argint>:$/;"	l
ffff800000107dd0	kernel.asm	/^ffff800000107dd0:	55                   	push   %rbp$/;"	l
ffff800000107dd1	kernel.asm	/^ffff800000107dd1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107dd4	kernel.asm	/^ffff800000107dd4:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107dd8	kernel.asm	/^ffff800000107dd8:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107ddb	kernel.asm	/^ffff800000107ddb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107ddf	kernel.asm	/^ffff800000107ddf:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107de2	kernel.asm	/^ffff800000107de2:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107de4	kernel.asm	/^ffff800000107de4:	48 b8 08 7d 10 00 00 	movabs $0xffff800000107d08,%rax$/;"	l
ffff800000107deb	kernel.asm	/^ffff800000107deb:	80 ff ff $/;"	l
ffff800000107dee	kernel.asm	/^ffff800000107dee:	ff d0                	callq  *%rax$/;"	l
ffff800000107df0	kernel.asm	/^ffff800000107df0:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107df2	kernel.asm	/^ffff800000107df2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107df6	kernel.asm	/^ffff800000107df6:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000107df8	kernel.asm	/^ffff800000107df8:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107dfd	kernel.asm	/^ffff800000107dfd:	c9                   	leaveq $/;"	l
ffff800000107dfe	kernel.asm	/^ffff800000107dfe:	c3                   	retq   $/;"	l
ffff800000107dff	kernel.asm	/^ffff800000107dff <argaddr>:$/;"	l
ffff800000107dff	kernel.asm	/^ffff800000107dff:	55                   	push   %rbp$/;"	l
ffff800000107e00	kernel.asm	/^ffff800000107e00:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107e03	kernel.asm	/^ffff800000107e03:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000107e07	kernel.asm	/^ffff800000107e07:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff800000107e0a	kernel.asm	/^ffff800000107e0a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)$/;"	l
ffff800000107e0e	kernel.asm	/^ffff800000107e0e:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107e11	kernel.asm	/^ffff800000107e11:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107e13	kernel.asm	/^ffff800000107e13:	48 b8 08 7d 10 00 00 	movabs $0xffff800000107d08,%rax$/;"	l
ffff800000107e1a	kernel.asm	/^ffff800000107e1a:	80 ff ff $/;"	l
ffff800000107e1d	kernel.asm	/^ffff800000107e1d:	ff d0                	callq  *%rax$/;"	l
ffff800000107e1f	kernel.asm	/^ffff800000107e1f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107e22	kernel.asm	/^ffff800000107e22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000107e26	kernel.asm	/^ffff800000107e26:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107e29	kernel.asm	/^ffff800000107e29:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107e2e	kernel.asm	/^ffff800000107e2e:	c9                   	leaveq $/;"	l
ffff800000107e2f	kernel.asm	/^ffff800000107e2f:	c3                   	retq   $/;"	l
ffff800000107e30	kernel.asm	/^ffff800000107e30 <argptr>:$/;"	l
ffff800000107e30	kernel.asm	/^ffff800000107e30:	55                   	push   %rbp$/;"	l
ffff800000107e31	kernel.asm	/^ffff800000107e31:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107e34	kernel.asm	/^ffff800000107e34:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107e38	kernel.asm	/^ffff800000107e38:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107e3b	kernel.asm	/^ffff800000107e3b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107e3f	kernel.asm	/^ffff800000107e3f:	89 55 e8             	mov    %edx,-0x18(%rbp)$/;"	l
ffff800000107e42	kernel.asm	/^ffff800000107e42:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx$/;"	l
ffff800000107e46	kernel.asm	/^ffff800000107e46:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107e49	kernel.asm	/^ffff800000107e49:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107e4c	kernel.asm	/^ffff800000107e4c:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107e4e	kernel.asm	/^ffff800000107e4e:	48 b8 ff 7d 10 00 00 	movabs $0xffff800000107dff,%rax$/;"	l
ffff800000107e55	kernel.asm	/^ffff800000107e55:	80 ff ff $/;"	l
ffff800000107e58	kernel.asm	/^ffff800000107e58:	ff d0                	callq  *%rax$/;"	l
ffff800000107e5a	kernel.asm	/^ffff800000107e5a:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107e5c	kernel.asm	/^ffff800000107e5c:	79 07                	jns    ffff800000107e65 <argptr+0x35>$/;"	l
ffff800000107e5e	kernel.asm	/^ffff800000107e5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107e63	kernel.asm	/^ffff800000107e63:	eb 59                	jmp    ffff800000107ebe <argptr+0x8e>$/;"	l
ffff800000107e65	kernel.asm	/^ffff800000107e65:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)$/;"	l
ffff800000107e69	kernel.asm	/^ffff800000107e69:	78 39                	js     ffff800000107ea4 <argptr+0x74>$/;"	l
ffff800000107e6b	kernel.asm	/^ffff800000107e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107e6f	kernel.asm	/^ffff800000107e6f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107e71	kernel.asm	/^ffff800000107e71:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107e78	kernel.asm	/^ffff800000107e78:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107e7c	kernel.asm	/^ffff800000107e7c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107e7f	kernel.asm	/^ffff800000107e7f:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107e82	kernel.asm	/^ffff800000107e82:	73 20                	jae    ffff800000107ea4 <argptr+0x74>$/;"	l
ffff800000107e84	kernel.asm	/^ffff800000107e84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107e88	kernel.asm	/^ffff800000107e88:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107e8a	kernel.asm	/^ffff800000107e8a:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000107e8d	kernel.asm	/^ffff800000107e8d:	01 d0                	add    %edx,%eax$/;"	l
ffff800000107e8f	kernel.asm	/^ffff800000107e8f:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000107e91	kernel.asm	/^ffff800000107e91:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107e98	kernel.asm	/^ffff800000107e98:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107e9c	kernel.asm	/^ffff800000107e9c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107e9f	kernel.asm	/^ffff800000107e9f:	48 39 c2             	cmp    %rax,%rdx$/;"	l
ffff800000107ea2	kernel.asm	/^ffff800000107ea2:	76 07                	jbe    ffff800000107eab <argptr+0x7b>$/;"	l
ffff800000107ea4	kernel.asm	/^ffff800000107ea4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ea9	kernel.asm	/^ffff800000107ea9:	eb 13                	jmp    ffff800000107ebe <argptr+0x8e>$/;"	l
ffff800000107eab	kernel.asm	/^ffff800000107eab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000107eaf	kernel.asm	/^ffff800000107eaf:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000107eb2	kernel.asm	/^ffff800000107eb2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000107eb6	kernel.asm	/^ffff800000107eb6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000107eb9	kernel.asm	/^ffff800000107eb9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107ebe	kernel.asm	/^ffff800000107ebe:	c9                   	leaveq $/;"	l
ffff800000107ebf	kernel.asm	/^ffff800000107ebf:	c3                   	retq   $/;"	l
ffff800000107ec0	kernel.asm	/^ffff800000107ec0 <argstr>:$/;"	l
ffff800000107ec0	kernel.asm	/^ffff800000107ec0:	55                   	push   %rbp$/;"	l
ffff800000107ec1	kernel.asm	/^ffff800000107ec1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107ec4	kernel.asm	/^ffff800000107ec4:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000107ec8	kernel.asm	/^ffff800000107ec8:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107ecb	kernel.asm	/^ffff800000107ecb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107ecf	kernel.asm	/^ffff800000107ecf:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx$/;"	l
ffff800000107ed3	kernel.asm	/^ffff800000107ed3:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107ed6	kernel.asm	/^ffff800000107ed6:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107ed9	kernel.asm	/^ffff800000107ed9:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000107edb	kernel.asm	/^ffff800000107edb:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000107ee2	kernel.asm	/^ffff800000107ee2:	80 ff ff $/;"	l
ffff800000107ee5	kernel.asm	/^ffff800000107ee5:	ff d0                	callq  *%rax$/;"	l
ffff800000107ee7	kernel.asm	/^ffff800000107ee7:	85 c0                	test   %eax,%eax$/;"	l
ffff800000107ee9	kernel.asm	/^ffff800000107ee9:	79 07                	jns    ffff800000107ef2 <argstr+0x32>$/;"	l
ffff800000107eeb	kernel.asm	/^ffff800000107eeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000107ef0	kernel.asm	/^ffff800000107ef0:	eb 1b                	jmp    ffff800000107f0d <argstr+0x4d>$/;"	l
ffff800000107ef2	kernel.asm	/^ffff800000107ef2:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000107ef5	kernel.asm	/^ffff800000107ef5:	48 98                	cltq   $/;"	l
ffff800000107ef7	kernel.asm	/^ffff800000107ef7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx$/;"	l
ffff800000107efb	kernel.asm	/^ffff800000107efb:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000107efe	kernel.asm	/^ffff800000107efe:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000107f01	kernel.asm	/^ffff800000107f01:	48 b8 7f 7c 10 00 00 	movabs $0xffff800000107c7f,%rax$/;"	l
ffff800000107f08	kernel.asm	/^ffff800000107f08:	80 ff ff $/;"	l
ffff800000107f0b	kernel.asm	/^ffff800000107f0b:	ff d0                	callq  *%rax$/;"	l
ffff800000107f0d	kernel.asm	/^ffff800000107f0d:	c9                   	leaveq $/;"	l
ffff800000107f0e	kernel.asm	/^ffff800000107f0e:	c3                   	retq   $/;"	l
ffff800000107f0f	kernel.asm	/^ffff800000107f0f <syscall>:$/;"	l
ffff800000107f0f	kernel.asm	/^ffff800000107f0f:	55                   	push   %rbp$/;"	l
ffff800000107f10	kernel.asm	/^ffff800000107f10:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107f13	kernel.asm	/^ffff800000107f13:	53                   	push   %rbx$/;"	l
ffff800000107f14	kernel.asm	/^ffff800000107f14:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000107f18	kernel.asm	/^ffff800000107f18:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107f1f	kernel.asm	/^ffff800000107f1f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107f23	kernel.asm	/^ffff800000107f23:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107f27	kernel.asm	/^ffff800000107f27:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000107f2a	kernel.asm	/^ffff800000107f2a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000107f2d	kernel.asm	/^ffff800000107f2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000107f31	kernel.asm	/^ffff800000107f31:	7e 4d                	jle    ffff800000107f80 <syscall+0x71>$/;"	l
ffff800000107f33	kernel.asm	/^ffff800000107f33:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107f36	kernel.asm	/^ffff800000107f36:	83 f8 16             	cmp    $0x16,%eax$/;"	l
ffff800000107f39	kernel.asm	/^ffff800000107f39:	77 45                	ja     ffff800000107f80 <syscall+0x71>$/;"	l
ffff800000107f3b	kernel.asm	/^ffff800000107f3b:	48 b8 a0 e5 10 00 00 	movabs $0xffff80000010e5a0,%rax$/;"	l
ffff800000107f42	kernel.asm	/^ffff800000107f42:	80 ff ff $/;"	l
ffff800000107f45	kernel.asm	/^ffff800000107f45:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107f48	kernel.asm	/^ffff800000107f48:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107f4b	kernel.asm	/^ffff800000107f4b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107f4f	kernel.asm	/^ffff800000107f4f:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000107f52	kernel.asm	/^ffff800000107f52:	74 2c                	je     ffff800000107f80 <syscall+0x71>$/;"	l
ffff800000107f54	kernel.asm	/^ffff800000107f54:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107f5b	kernel.asm	/^ffff800000107f5b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107f5f	kernel.asm	/^ffff800000107f5f:	48 8b 58 28          	mov    0x28(%rax),%rbx$/;"	l
ffff800000107f63	kernel.asm	/^ffff800000107f63:	48 b8 a0 e5 10 00 00 	movabs $0xffff80000010e5a0,%rax$/;"	l
ffff800000107f6a	kernel.asm	/^ffff800000107f6a:	80 ff ff $/;"	l
ffff800000107f6d	kernel.asm	/^ffff800000107f6d:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107f70	kernel.asm	/^ffff800000107f70:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000107f73	kernel.asm	/^ffff800000107f73:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000107f77	kernel.asm	/^ffff800000107f77:	ff d0                	callq  *%rax$/;"	l
ffff800000107f79	kernel.asm	/^ffff800000107f79:	48 98                	cltq   $/;"	l
ffff800000107f7b	kernel.asm	/^ffff800000107f7b:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff800000107f7e	kernel.asm	/^ffff800000107f7e:	eb 5c                	jmp    ffff800000107fdc <syscall+0xcd>$/;"	l
ffff800000107f80	kernel.asm	/^ffff800000107f80:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107f87	kernel.asm	/^ffff800000107f87:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107f8b	kernel.asm	/^ffff800000107f8b:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff800000107f92	kernel.asm	/^ffff800000107f92:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107f99	kernel.asm	/^ffff800000107f99:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107f9d	kernel.asm	/^ffff800000107f9d:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000107fa0	kernel.asm	/^ffff800000107fa0:	8b 55 ec             	mov    -0x14(%rbp),%edx$/;"	l
ffff800000107fa3	kernel.asm	/^ffff800000107fa3:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000107fa5	kernel.asm	/^ffff800000107fa5:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff800000107fa8	kernel.asm	/^ffff800000107fa8:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000107faa	kernel.asm	/^ffff800000107faa:	48 bf 20 d1 10 00 00 	movabs $0xffff80000010d120,%rdi$/;"	l
ffff800000107fb1	kernel.asm	/^ffff800000107fb1:	80 ff ff $/;"	l
ffff800000107fb4	kernel.asm	/^ffff800000107fb4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000107fb9	kernel.asm	/^ffff800000107fb9:	49 b8 b6 07 10 00 00 	movabs $0xffff8000001007b6,%r8$/;"	l
ffff800000107fc0	kernel.asm	/^ffff800000107fc0:	80 ff ff $/;"	l
ffff800000107fc3	kernel.asm	/^ffff800000107fc3:	41 ff d0             	callq  *%r8$/;"	l
ffff800000107fc6	kernel.asm	/^ffff800000107fc6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000107fcd	kernel.asm	/^ffff800000107fcd:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000107fd1	kernel.asm	/^ffff800000107fd1:	48 8b 40 28          	mov    0x28(%rax),%rax$/;"	l
ffff800000107fd5	kernel.asm	/^ffff800000107fd5:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)$/;"	l
ffff800000107fdc	kernel.asm	/^ffff800000107fdc:	90                   	nop$/;"	l
ffff800000107fdd	kernel.asm	/^ffff800000107fdd:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff800000107fe1	kernel.asm	/^ffff800000107fe1:	5b                   	pop    %rbx$/;"	l
ffff800000107fe2	kernel.asm	/^ffff800000107fe2:	5d                   	pop    %rbp$/;"	l
ffff800000107fe3	kernel.asm	/^ffff800000107fe3:	c3                   	retq   $/;"	l
ffff800000107fe4	kernel.asm	/^ffff800000107fe4 <argfd>:$/;"	l
ffff800000107fe4	kernel.asm	/^ffff800000107fe4:	55                   	push   %rbp$/;"	l
ffff800000107fe5	kernel.asm	/^ffff800000107fe5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000107fe8	kernel.asm	/^ffff800000107fe8:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000107fec	kernel.asm	/^ffff800000107fec:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000107fef	kernel.asm	/^ffff800000107fef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff800000107ff3	kernel.asm	/^ffff800000107ff3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff800000107ff7	kernel.asm	/^ffff800000107ff7:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx$/;"	l
ffff800000107ffb	kernel.asm	/^ffff800000107ffb:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000107ffe	kernel.asm	/^ffff800000107ffe:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108001	kernel.asm	/^ffff800000108001:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000108003	kernel.asm	/^ffff800000108003:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff80000010800a	kernel.asm	/^ffff80000010800a:	80 ff ff $/;"	l
ffff80000010800d	kernel.asm	/^ffff80000010800d:	ff d0                	callq  *%rax$/;"	l
ffff80000010800f	kernel.asm	/^ffff80000010800f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108011	kernel.asm	/^ffff800000108011:	79 07                	jns    ffff80000010801a <argfd+0x36>$/;"	l
ffff800000108013	kernel.asm	/^ffff800000108013:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108018	kernel.asm	/^ffff800000108018:	eb 62                	jmp    ffff80000010807c <argfd+0x98>$/;"	l
ffff80000010801a	kernel.asm	/^ffff80000010801a:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010801d	kernel.asm	/^ffff80000010801d:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010801f	kernel.asm	/^ffff80000010801f:	78 2d                	js     ffff80000010804e <argfd+0x6a>$/;"	l
ffff800000108021	kernel.asm	/^ffff800000108021:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff800000108024	kernel.asm	/^ffff800000108024:	83 f8 0f             	cmp    $0xf,%eax$/;"	l
ffff800000108027	kernel.asm	/^ffff800000108027:	7f 25                	jg     ffff80000010804e <argfd+0x6a>$/;"	l
ffff800000108029	kernel.asm	/^ffff800000108029:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000108030	kernel.asm	/^ffff800000108030:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000108034	kernel.asm	/^ffff800000108034:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108037	kernel.asm	/^ffff800000108037:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010803a	kernel.asm	/^ffff80000010803a:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff80000010803e	kernel.asm	/^ffff80000010803e:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff800000108043	kernel.asm	/^ffff800000108043:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108047	kernel.asm	/^ffff800000108047:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010804c	kernel.asm	/^ffff80000010804c:	75 07                	jne    ffff800000108055 <argfd+0x71>$/;"	l
ffff80000010804e	kernel.asm	/^ffff80000010804e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108053	kernel.asm	/^ffff800000108053:	eb 27                	jmp    ffff80000010807c <argfd+0x98>$/;"	l
ffff800000108055	kernel.asm	/^ffff800000108055:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff80000010805a	kernel.asm	/^ffff80000010805a:	74 09                	je     ffff800000108065 <argfd+0x81>$/;"	l
ffff80000010805c	kernel.asm	/^ffff80000010805c:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff80000010805f	kernel.asm	/^ffff80000010805f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108063	kernel.asm	/^ffff800000108063:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000108065	kernel.asm	/^ffff800000108065:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)$/;"	l
ffff80000010806a	kernel.asm	/^ffff80000010806a:	74 0b                	je     ffff800000108077 <argfd+0x93>$/;"	l
ffff80000010806c	kernel.asm	/^ffff80000010806c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000108070	kernel.asm	/^ffff800000108070:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108074	kernel.asm	/^ffff800000108074:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000108077	kernel.asm	/^ffff800000108077:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010807c	kernel.asm	/^ffff80000010807c:	c9                   	leaveq $/;"	l
ffff80000010807d	kernel.asm	/^ffff80000010807d:	c3                   	retq   $/;"	l
ffff80000010807e	kernel.asm	/^ffff80000010807e <fdalloc>:$/;"	l
ffff80000010807e	kernel.asm	/^ffff80000010807e:	55                   	push   %rbp$/;"	l
ffff80000010807f	kernel.asm	/^ffff80000010807f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108082	kernel.asm	/^ffff800000108082:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000108086	kernel.asm	/^ffff800000108086:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010808a	kernel.asm	/^ffff80000010808a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108091	kernel.asm	/^ffff800000108091:	eb 46                	jmp    ffff8000001080d9 <fdalloc+0x5b>$/;"	l
ffff800000108093	kernel.asm	/^ffff800000108093:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010809a	kernel.asm	/^ffff80000010809a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010809e	kernel.asm	/^ffff80000010809e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001080a1	kernel.asm	/^ffff8000001080a1:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001080a4	kernel.asm	/^ffff8000001080a4:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001080a8	kernel.asm	/^ffff8000001080a8:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax$/;"	l
ffff8000001080ad	kernel.asm	/^ffff8000001080ad:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001080b0	kernel.asm	/^ffff8000001080b0:	75 23                	jne    ffff8000001080d5 <fdalloc+0x57>$/;"	l
ffff8000001080b2	kernel.asm	/^ffff8000001080b2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001080b9	kernel.asm	/^ffff8000001080b9:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001080bd	kernel.asm	/^ffff8000001080bd:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001080c0	kernel.asm	/^ffff8000001080c0:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001080c3	kernel.asm	/^ffff8000001080c3:	48 8d 4a 08          	lea    0x8(%rdx),%rcx$/;"	l
ffff8000001080c7	kernel.asm	/^ffff8000001080c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff8000001080cb	kernel.asm	/^ffff8000001080cb:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)$/;"	l
ffff8000001080d0	kernel.asm	/^ffff8000001080d0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001080d3	kernel.asm	/^ffff8000001080d3:	eb 0f                	jmp    ffff8000001080e4 <fdalloc+0x66>$/;"	l
ffff8000001080d5	kernel.asm	/^ffff8000001080d5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001080d9	kernel.asm	/^ffff8000001080d9:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)$/;"	l
ffff8000001080dd	kernel.asm	/^ffff8000001080dd:	7e b4                	jle    ffff800000108093 <fdalloc+0x15>$/;"	l
ffff8000001080df	kernel.asm	/^ffff8000001080df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001080e4	kernel.asm	/^ffff8000001080e4:	c9                   	leaveq $/;"	l
ffff8000001080e5	kernel.asm	/^ffff8000001080e5:	c3                   	retq   $/;"	l
ffff8000001080e6	kernel.asm	/^ffff8000001080e6 <sys_dup>:$/;"	l
ffff8000001080e6	kernel.asm	/^ffff8000001080e6:	55                   	push   %rbp$/;"	l
ffff8000001080e7	kernel.asm	/^ffff8000001080e7:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001080ea	kernel.asm	/^ffff8000001080ea:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001080ee	kernel.asm	/^ffff8000001080ee:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001080f2	kernel.asm	/^ffff8000001080f2:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001080f5	kernel.asm	/^ffff8000001080f5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001080fa	kernel.asm	/^ffff8000001080fa:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001080ff	kernel.asm	/^ffff8000001080ff:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff800000108106	kernel.asm	/^ffff800000108106:	80 ff ff $/;"	l
ffff800000108109	kernel.asm	/^ffff800000108109:	ff d0                	callq  *%rax$/;"	l
ffff80000010810b	kernel.asm	/^ffff80000010810b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010810d	kernel.asm	/^ffff80000010810d:	79 07                	jns    ffff800000108116 <sys_dup+0x30>$/;"	l
ffff80000010810f	kernel.asm	/^ffff80000010810f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108114	kernel.asm	/^ffff800000108114:	eb 39                	jmp    ffff80000010814f <sys_dup+0x69>$/;"	l
ffff800000108116	kernel.asm	/^ffff800000108116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010811a	kernel.asm	/^ffff80000010811a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010811d	kernel.asm	/^ffff80000010811d:	48 b8 7e 80 10 00 00 	movabs $0xffff80000010807e,%rax$/;"	l
ffff800000108124	kernel.asm	/^ffff800000108124:	80 ff ff $/;"	l
ffff800000108127	kernel.asm	/^ffff800000108127:	ff d0                	callq  *%rax$/;"	l
ffff800000108129	kernel.asm	/^ffff800000108129:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010812c	kernel.asm	/^ffff80000010812c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000108130	kernel.asm	/^ffff800000108130:	79 07                	jns    ffff800000108139 <sys_dup+0x53>$/;"	l
ffff800000108132	kernel.asm	/^ffff800000108132:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108137	kernel.asm	/^ffff800000108137:	eb 16                	jmp    ffff80000010814f <sys_dup+0x69>$/;"	l
ffff800000108139	kernel.asm	/^ffff800000108139:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010813d	kernel.asm	/^ffff80000010813d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108140	kernel.asm	/^ffff800000108140:	48 b8 d4 1c 10 00 00 	movabs $0xffff800000101cd4,%rax$/;"	l
ffff800000108147	kernel.asm	/^ffff800000108147:	80 ff ff $/;"	l
ffff80000010814a	kernel.asm	/^ffff80000010814a:	ff d0                	callq  *%rax$/;"	l
ffff80000010814c	kernel.asm	/^ffff80000010814c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010814f	kernel.asm	/^ffff80000010814f:	c9                   	leaveq $/;"	l
ffff800000108150	kernel.asm	/^ffff800000108150:	c3                   	retq   $/;"	l
ffff800000108151	kernel.asm	/^ffff800000108151 <sys_read>:$/;"	l
ffff800000108151	kernel.asm	/^ffff800000108151:	55                   	push   %rbp$/;"	l
ffff800000108152	kernel.asm	/^ffff800000108152:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108155	kernel.asm	/^ffff800000108155:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108159	kernel.asm	/^ffff800000108159:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff80000010815d	kernel.asm	/^ffff80000010815d:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000108160	kernel.asm	/^ffff800000108160:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108165	kernel.asm	/^ffff800000108165:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010816a	kernel.asm	/^ffff80000010816a:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff800000108171	kernel.asm	/^ffff800000108171:	80 ff ff $/;"	l
ffff800000108174	kernel.asm	/^ffff800000108174:	ff d0                	callq  *%rax$/;"	l
ffff800000108176	kernel.asm	/^ffff800000108176:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108178	kernel.asm	/^ffff800000108178:	78 3b                	js     ffff8000001081b5 <sys_read+0x64>$/;"	l
ffff80000010817a	kernel.asm	/^ffff80000010817a:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff80000010817e	kernel.asm	/^ffff80000010817e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108181	kernel.asm	/^ffff800000108181:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108186	kernel.asm	/^ffff800000108186:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff80000010818d	kernel.asm	/^ffff80000010818d:	80 ff ff $/;"	l
ffff800000108190	kernel.asm	/^ffff800000108190:	ff d0                	callq  *%rax$/;"	l
ffff800000108192	kernel.asm	/^ffff800000108192:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108194	kernel.asm	/^ffff800000108194:	78 1f                	js     ffff8000001081b5 <sys_read+0x64>$/;"	l
ffff800000108196	kernel.asm	/^ffff800000108196:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108199	kernel.asm	/^ffff800000108199:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff80000010819d	kernel.asm	/^ffff80000010819d:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001081a0	kernel.asm	/^ffff8000001081a0:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001081a5	kernel.asm	/^ffff8000001081a5:	48 b8 30 7e 10 00 00 	movabs $0xffff800000107e30,%rax$/;"	l
ffff8000001081ac	kernel.asm	/^ffff8000001081ac:	80 ff ff $/;"	l
ffff8000001081af	kernel.asm	/^ffff8000001081af:	ff d0                	callq  *%rax$/;"	l
ffff8000001081b1	kernel.asm	/^ffff8000001081b1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001081b3	kernel.asm	/^ffff8000001081b3:	79 07                	jns    ffff8000001081bc <sys_read+0x6b>$/;"	l
ffff8000001081b5	kernel.asm	/^ffff8000001081b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001081ba	kernel.asm	/^ffff8000001081ba:	eb 1d                	jmp    ffff8000001081d9 <sys_read+0x88>$/;"	l
ffff8000001081bc	kernel.asm	/^ffff8000001081bc:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff8000001081bf	kernel.asm	/^ffff8000001081bf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff8000001081c3	kernel.asm	/^ffff8000001081c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001081c7	kernel.asm	/^ffff8000001081c7:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001081ca	kernel.asm	/^ffff8000001081ca:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001081cd	kernel.asm	/^ffff8000001081cd:	48 b8 b5 1f 10 00 00 	movabs $0xffff800000101fb5,%rax$/;"	l
ffff8000001081d4	kernel.asm	/^ffff8000001081d4:	80 ff ff $/;"	l
ffff8000001081d7	kernel.asm	/^ffff8000001081d7:	ff d0                	callq  *%rax$/;"	l
ffff8000001081d9	kernel.asm	/^ffff8000001081d9:	c9                   	leaveq $/;"	l
ffff8000001081da	kernel.asm	/^ffff8000001081da:	c3                   	retq   $/;"	l
ffff8000001081db	kernel.asm	/^ffff8000001081db <sys_write>:$/;"	l
ffff8000001081db	kernel.asm	/^ffff8000001081db:	55                   	push   %rbp$/;"	l
ffff8000001081dc	kernel.asm	/^ffff8000001081dc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001081df	kernel.asm	/^ffff8000001081df:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001081e3	kernel.asm	/^ffff8000001081e3:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001081e7	kernel.asm	/^ffff8000001081e7:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001081ea	kernel.asm	/^ffff8000001081ea:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff8000001081ef	kernel.asm	/^ffff8000001081ef:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001081f4	kernel.asm	/^ffff8000001081f4:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff8000001081fb	kernel.asm	/^ffff8000001081fb:	80 ff ff $/;"	l
ffff8000001081fe	kernel.asm	/^ffff8000001081fe:	ff d0                	callq  *%rax$/;"	l
ffff800000108200	kernel.asm	/^ffff800000108200:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108202	kernel.asm	/^ffff800000108202:	78 3b                	js     ffff80000010823f <sys_write+0x64>$/;"	l
ffff800000108204	kernel.asm	/^ffff800000108204:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000108208	kernel.asm	/^ffff800000108208:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010820b	kernel.asm	/^ffff80000010820b:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108210	kernel.asm	/^ffff800000108210:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000108217	kernel.asm	/^ffff800000108217:	80 ff ff $/;"	l
ffff80000010821a	kernel.asm	/^ffff80000010821a:	ff d0                	callq  *%rax$/;"	l
ffff80000010821c	kernel.asm	/^ffff80000010821c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010821e	kernel.asm	/^ffff80000010821e:	78 1f                	js     ffff80000010823f <sys_write+0x64>$/;"	l
ffff800000108220	kernel.asm	/^ffff800000108220:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108223	kernel.asm	/^ffff800000108223:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108227	kernel.asm	/^ffff800000108227:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010822a	kernel.asm	/^ffff80000010822a:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010822f	kernel.asm	/^ffff80000010822f:	48 b8 30 7e 10 00 00 	movabs $0xffff800000107e30,%rax$/;"	l
ffff800000108236	kernel.asm	/^ffff800000108236:	80 ff ff $/;"	l
ffff800000108239	kernel.asm	/^ffff800000108239:	ff d0                	callq  *%rax$/;"	l
ffff80000010823b	kernel.asm	/^ffff80000010823b:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010823d	kernel.asm	/^ffff80000010823d:	79 07                	jns    ffff800000108246 <sys_write+0x6b>$/;"	l
ffff80000010823f	kernel.asm	/^ffff80000010823f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108244	kernel.asm	/^ffff800000108244:	eb 1d                	jmp    ffff800000108263 <sys_write+0x88>$/;"	l
ffff800000108246	kernel.asm	/^ffff800000108246:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108249	kernel.asm	/^ffff800000108249:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx$/;"	l
ffff80000010824d	kernel.asm	/^ffff80000010824d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108251	kernel.asm	/^ffff800000108251:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000108254	kernel.asm	/^ffff800000108254:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108257	kernel.asm	/^ffff800000108257:	48 b8 62 21 10 00 00 	movabs $0xffff800000102162,%rax$/;"	l
ffff80000010825e	kernel.asm	/^ffff80000010825e:	80 ff ff $/;"	l
ffff800000108261	kernel.asm	/^ffff800000108261:	ff d0                	callq  *%rax$/;"	l
ffff800000108263	kernel.asm	/^ffff800000108263:	c9                   	leaveq $/;"	l
ffff800000108264	kernel.asm	/^ffff800000108264:	c3                   	retq   $/;"	l
ffff800000108265	kernel.asm	/^ffff800000108265 <sys_close>:$/;"	l
ffff800000108265	kernel.asm	/^ffff800000108265:	55                   	push   %rbp$/;"	l
ffff800000108266	kernel.asm	/^ffff800000108266:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108269	kernel.asm	/^ffff800000108269:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010826d	kernel.asm	/^ffff80000010826d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx$/;"	l
ffff800000108271	kernel.asm	/^ffff800000108271:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff800000108275	kernel.asm	/^ffff800000108275:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108278	kernel.asm	/^ffff800000108278:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010827d	kernel.asm	/^ffff80000010827d:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff800000108284	kernel.asm	/^ffff800000108284:	80 ff ff $/;"	l
ffff800000108287	kernel.asm	/^ffff800000108287:	ff d0                	callq  *%rax$/;"	l
ffff800000108289	kernel.asm	/^ffff800000108289:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010828b	kernel.asm	/^ffff80000010828b:	79 07                	jns    ffff800000108294 <sys_close+0x2f>$/;"	l
ffff80000010828d	kernel.asm	/^ffff80000010828d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108292	kernel.asm	/^ffff800000108292:	eb 36                	jmp    ffff8000001082ca <sys_close+0x65>$/;"	l
ffff800000108294	kernel.asm	/^ffff800000108294:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010829b	kernel.asm	/^ffff80000010829b:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010829f	kernel.asm	/^ffff80000010829f:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001082a2	kernel.asm	/^ffff8000001082a2:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001082a5	kernel.asm	/^ffff8000001082a5:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001082a9	kernel.asm	/^ffff8000001082a9:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff8000001082b0	kernel.asm	/^ffff8000001082b0:	00 00 $/;"	l
ffff8000001082b2	kernel.asm	/^ffff8000001082b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001082b6	kernel.asm	/^ffff8000001082b6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001082b9	kernel.asm	/^ffff8000001082b9:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff8000001082c0	kernel.asm	/^ffff8000001082c0:	80 ff ff $/;"	l
ffff8000001082c3	kernel.asm	/^ffff8000001082c3:	ff d0                	callq  *%rax$/;"	l
ffff8000001082c5	kernel.asm	/^ffff8000001082c5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001082ca	kernel.asm	/^ffff8000001082ca:	c9                   	leaveq $/;"	l
ffff8000001082cb	kernel.asm	/^ffff8000001082cb:	c3                   	retq   $/;"	l
ffff8000001082cc	kernel.asm	/^ffff8000001082cc <sys_ioctl>:$/;"	l
ffff8000001082cc	kernel.asm	/^ffff8000001082cc:	55                   	push   %rbp$/;"	l
ffff8000001082cd	kernel.asm	/^ffff8000001082cd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001082d0	kernel.asm	/^ffff8000001082d0:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001082d4	kernel.asm	/^ffff8000001082d4:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx$/;"	l
ffff8000001082d8	kernel.asm	/^ffff8000001082d8:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff8000001082dc	kernel.asm	/^ffff8000001082dc:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001082df	kernel.asm	/^ffff8000001082df:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001082e4	kernel.asm	/^ffff8000001082e4:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff8000001082eb	kernel.asm	/^ffff8000001082eb:	80 ff ff $/;"	l
ffff8000001082ee	kernel.asm	/^ffff8000001082ee:	ff d0                	callq  *%rax$/;"	l
ffff8000001082f0	kernel.asm	/^ffff8000001082f0:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001082f2	kernel.asm	/^ffff8000001082f2:	79 07                	jns    ffff8000001082fb <sys_ioctl+0x2f>$/;"	l
ffff8000001082f4	kernel.asm	/^ffff8000001082f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001082f9	kernel.asm	/^ffff8000001082f9:	eb 61                	jmp    ffff80000010835c <sys_ioctl+0x90>$/;"	l
ffff8000001082fb	kernel.asm	/^ffff8000001082fb:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001082ff	kernel.asm	/^ffff8000001082ff:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108302	kernel.asm	/^ffff800000108302:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108307	kernel.asm	/^ffff800000108307:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff80000010830e	kernel.asm	/^ffff80000010830e:	80 ff ff $/;"	l
ffff800000108311	kernel.asm	/^ffff800000108311:	ff d0                	callq  *%rax$/;"	l
ffff800000108313	kernel.asm	/^ffff800000108313:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108315	kernel.asm	/^ffff800000108315:	79 07                	jns    ffff80000010831e <sys_ioctl+0x52>$/;"	l
ffff800000108317	kernel.asm	/^ffff800000108317:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010831c	kernel.asm	/^ffff80000010831c:	eb 3e                	jmp    ffff80000010835c <sys_ioctl+0x90>$/;"	l
ffff80000010831e	kernel.asm	/^ffff80000010831e:	48 8d 45 f4          	lea    -0xc(%rbp),%rax$/;"	l
ffff800000108322	kernel.asm	/^ffff800000108322:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108325	kernel.asm	/^ffff800000108325:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010832a	kernel.asm	/^ffff80000010832a:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000108331	kernel.asm	/^ffff800000108331:	80 ff ff $/;"	l
ffff800000108334	kernel.asm	/^ffff800000108334:	ff d0                	callq  *%rax$/;"	l
ffff800000108336	kernel.asm	/^ffff800000108336:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108338	kernel.asm	/^ffff800000108338:	79 07                	jns    ffff800000108341 <sys_ioctl+0x75>$/;"	l
ffff80000010833a	kernel.asm	/^ffff80000010833a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010833f	kernel.asm	/^ffff80000010833f:	eb 1b                	jmp    ffff80000010835c <sys_ioctl+0x90>$/;"	l
ffff800000108341	kernel.asm	/^ffff800000108341:	8b 55 f4             	mov    -0xc(%rbp),%edx$/;"	l
ffff800000108344	kernel.asm	/^ffff800000108344:	8b 4d f8             	mov    -0x8(%rbp),%ecx$/;"	l
ffff800000108347	kernel.asm	/^ffff800000108347:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010834b	kernel.asm	/^ffff80000010834b:	89 ce                	mov    %ecx,%esi$/;"	l
ffff80000010834d	kernel.asm	/^ffff80000010834d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108350	kernel.asm	/^ffff800000108350:	48 b8 79 1e 10 00 00 	movabs $0xffff800000101e79,%rax$/;"	l
ffff800000108357	kernel.asm	/^ffff800000108357:	80 ff ff $/;"	l
ffff80000010835a	kernel.asm	/^ffff80000010835a:	ff d0                	callq  *%rax$/;"	l
ffff80000010835c	kernel.asm	/^ffff80000010835c:	c9                   	leaveq $/;"	l
ffff80000010835d	kernel.asm	/^ffff80000010835d:	c3                   	retq   $/;"	l
ffff80000010835e	kernel.asm	/^ffff80000010835e <sys_fstat>:$/;"	l
ffff80000010835e	kernel.asm	/^ffff80000010835e:	55                   	push   %rbp$/;"	l
ffff80000010835f	kernel.asm	/^ffff80000010835f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108362	kernel.asm	/^ffff800000108362:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108366	kernel.asm	/^ffff800000108366:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff80000010836a	kernel.asm	/^ffff80000010836a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010836d	kernel.asm	/^ffff80000010836d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108372	kernel.asm	/^ffff800000108372:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108377	kernel.asm	/^ffff800000108377:	48 b8 e4 7f 10 00 00 	movabs $0xffff800000107fe4,%rax$/;"	l
ffff80000010837e	kernel.asm	/^ffff80000010837e:	80 ff ff $/;"	l
ffff800000108381	kernel.asm	/^ffff800000108381:	ff d0                	callq  *%rax$/;"	l
ffff800000108383	kernel.asm	/^ffff800000108383:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108385	kernel.asm	/^ffff800000108385:	78 21                	js     ffff8000001083a8 <sys_fstat+0x4a>$/;"	l
ffff800000108387	kernel.asm	/^ffff800000108387:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff80000010838b	kernel.asm	/^ffff80000010838b:	ba 14 00 00 00       	mov    $0x14,%edx$/;"	l
ffff800000108390	kernel.asm	/^ffff800000108390:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108393	kernel.asm	/^ffff800000108393:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108398	kernel.asm	/^ffff800000108398:	48 b8 30 7e 10 00 00 	movabs $0xffff800000107e30,%rax$/;"	l
ffff80000010839f	kernel.asm	/^ffff80000010839f:	80 ff ff $/;"	l
ffff8000001083a2	kernel.asm	/^ffff8000001083a2:	ff d0                	callq  *%rax$/;"	l
ffff8000001083a4	kernel.asm	/^ffff8000001083a4:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001083a6	kernel.asm	/^ffff8000001083a6:	79 07                	jns    ffff8000001083af <sys_fstat+0x51>$/;"	l
ffff8000001083a8	kernel.asm	/^ffff8000001083a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001083ad	kernel.asm	/^ffff8000001083ad:	eb 1a                	jmp    ffff8000001083c9 <sys_fstat+0x6b>$/;"	l
ffff8000001083af	kernel.asm	/^ffff8000001083af:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff8000001083b3	kernel.asm	/^ffff8000001083b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001083b7	kernel.asm	/^ffff8000001083b7:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001083ba	kernel.asm	/^ffff8000001083ba:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001083bd	kernel.asm	/^ffff8000001083bd:	48 b8 40 1f 10 00 00 	movabs $0xffff800000101f40,%rax$/;"	l
ffff8000001083c4	kernel.asm	/^ffff8000001083c4:	80 ff ff $/;"	l
ffff8000001083c7	kernel.asm	/^ffff8000001083c7:	ff d0                	callq  *%rax$/;"	l
ffff8000001083c9	kernel.asm	/^ffff8000001083c9:	c9                   	leaveq $/;"	l
ffff8000001083ca	kernel.asm	/^ffff8000001083ca:	c3                   	retq   $/;"	l
ffff8000001083cb	kernel.asm	/^ffff8000001083cb <sys_link>:$/;"	l
ffff8000001083cb	kernel.asm	/^ffff8000001083cb:	55                   	push   %rbp$/;"	l
ffff8000001083cc	kernel.asm	/^ffff8000001083cc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001083cf	kernel.asm	/^ffff8000001083cf:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001083d3	kernel.asm	/^ffff8000001083d3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff8000001083d7	kernel.asm	/^ffff8000001083d7:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001083da	kernel.asm	/^ffff8000001083da:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001083df	kernel.asm	/^ffff8000001083df:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff8000001083e6	kernel.asm	/^ffff8000001083e6:	80 ff ff $/;"	l
ffff8000001083e9	kernel.asm	/^ffff8000001083e9:	ff d0                	callq  *%rax$/;"	l
ffff8000001083eb	kernel.asm	/^ffff8000001083eb:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001083ed	kernel.asm	/^ffff8000001083ed:	78 1c                	js     ffff80000010840b <sys_link+0x40>$/;"	l
ffff8000001083ef	kernel.asm	/^ffff8000001083ef:	48 8d 45 d8          	lea    -0x28(%rbp),%rax$/;"	l
ffff8000001083f3	kernel.asm	/^ffff8000001083f3:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001083f6	kernel.asm	/^ffff8000001083f6:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001083fb	kernel.asm	/^ffff8000001083fb:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff800000108402	kernel.asm	/^ffff800000108402:	80 ff ff $/;"	l
ffff800000108405	kernel.asm	/^ffff800000108405:	ff d0                	callq  *%rax$/;"	l
ffff800000108407	kernel.asm	/^ffff800000108407:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108409	kernel.asm	/^ffff800000108409:	79 0a                	jns    ffff800000108415 <sys_link+0x4a>$/;"	l
ffff80000010840b	kernel.asm	/^ffff80000010840b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108410	kernel.asm	/^ffff800000108410:	e9 0c 02 00 00       	jmpq   ffff800000108621 <sys_link+0x256>$/;"	l
ffff800000108415	kernel.asm	/^ffff800000108415:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010841a	kernel.asm	/^ffff80000010841a:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000108421	kernel.asm	/^ffff800000108421:	80 ff ff $/;"	l
ffff800000108424	kernel.asm	/^ffff800000108424:	ff d2                	callq  *%rdx$/;"	l
ffff800000108426	kernel.asm	/^ffff800000108426:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010842a	kernel.asm	/^ffff80000010842a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010842d	kernel.asm	/^ffff80000010842d:	48 b8 4f 39 10 00 00 	movabs $0xffff80000010394f,%rax$/;"	l
ffff800000108434	kernel.asm	/^ffff800000108434:	80 ff ff $/;"	l
ffff800000108437	kernel.asm	/^ffff800000108437:	ff d0                	callq  *%rax$/;"	l
ffff800000108439	kernel.asm	/^ffff800000108439:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010843d	kernel.asm	/^ffff80000010843d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108442	kernel.asm	/^ffff800000108442:	75 1b                	jne    ffff80000010845f <sys_link+0x94>$/;"	l
ffff800000108444	kernel.asm	/^ffff800000108444:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108449	kernel.asm	/^ffff800000108449:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108450	kernel.asm	/^ffff800000108450:	80 ff ff $/;"	l
ffff800000108453	kernel.asm	/^ffff800000108453:	ff d2                	callq  *%rdx$/;"	l
ffff800000108455	kernel.asm	/^ffff800000108455:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010845a	kernel.asm	/^ffff80000010845a:	e9 c2 01 00 00       	jmpq   ffff800000108621 <sys_link+0x256>$/;"	l
ffff80000010845f	kernel.asm	/^ffff80000010845f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108463	kernel.asm	/^ffff800000108463:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108466	kernel.asm	/^ffff800000108466:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff80000010846d	kernel.asm	/^ffff80000010846d:	80 ff ff $/;"	l
ffff800000108470	kernel.asm	/^ffff800000108470:	ff d0                	callq  *%rax$/;"	l
ffff800000108472	kernel.asm	/^ffff800000108472:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108476	kernel.asm	/^ffff800000108476:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff80000010847d	kernel.asm	/^ffff80000010847d:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108481	kernel.asm	/^ffff800000108481:	75 2e                	jne    ffff8000001084b1 <sys_link+0xe6>$/;"	l
ffff800000108483	kernel.asm	/^ffff800000108483:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108487	kernel.asm	/^ffff800000108487:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010848a	kernel.asm	/^ffff80000010848a:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108491	kernel.asm	/^ffff800000108491:	80 ff ff $/;"	l
ffff800000108494	kernel.asm	/^ffff800000108494:	ff d0                	callq  *%rax$/;"	l
ffff800000108496	kernel.asm	/^ffff800000108496:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010849b	kernel.asm	/^ffff80000010849b:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff8000001084a2	kernel.asm	/^ffff8000001084a2:	80 ff ff $/;"	l
ffff8000001084a5	kernel.asm	/^ffff8000001084a5:	ff d2                	callq  *%rdx$/;"	l
ffff8000001084a7	kernel.asm	/^ffff8000001084a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001084ac	kernel.asm	/^ffff8000001084ac:	e9 70 01 00 00       	jmpq   ffff800000108621 <sys_link+0x256>$/;"	l
ffff8000001084b1	kernel.asm	/^ffff8000001084b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001084b5	kernel.asm	/^ffff8000001084b5:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001084bc	kernel.asm	/^ffff8000001084bc:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff8000001084bf	kernel.asm	/^ffff8000001084bf:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001084c1	kernel.asm	/^ffff8000001084c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001084c5	kernel.asm	/^ffff8000001084c5:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001084cc	kernel.asm	/^ffff8000001084cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001084d0	kernel.asm	/^ffff8000001084d0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001084d3	kernel.asm	/^ffff8000001084d3:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff8000001084da	kernel.asm	/^ffff8000001084da:	80 ff ff $/;"	l
ffff8000001084dd	kernel.asm	/^ffff8000001084dd:	ff d0                	callq  *%rax$/;"	l
ffff8000001084df	kernel.asm	/^ffff8000001084df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001084e3	kernel.asm	/^ffff8000001084e3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001084e6	kernel.asm	/^ffff8000001084e6:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff8000001084ed	kernel.asm	/^ffff8000001084ed:	80 ff ff $/;"	l
ffff8000001084f0	kernel.asm	/^ffff8000001084f0:	ff d0                	callq  *%rax$/;"	l
ffff8000001084f2	kernel.asm	/^ffff8000001084f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001084f6	kernel.asm	/^ffff8000001084f6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff8000001084fa	kernel.asm	/^ffff8000001084fa:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001084fd	kernel.asm	/^ffff8000001084fd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108500	kernel.asm	/^ffff800000108500:	48 b8 79 39 10 00 00 	movabs $0xffff800000103979,%rax$/;"	l
ffff800000108507	kernel.asm	/^ffff800000108507:	80 ff ff $/;"	l
ffff80000010850a	kernel.asm	/^ffff80000010850a:	ff d0                	callq  *%rax$/;"	l
ffff80000010850c	kernel.asm	/^ffff80000010850c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108510	kernel.asm	/^ffff800000108510:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108515	kernel.asm	/^ffff800000108515:	0f 84 9b 00 00 00    	je     ffff8000001085b6 <sys_link+0x1eb>$/;"	l
ffff80000010851b	kernel.asm	/^ffff80000010851b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010851f	kernel.asm	/^ffff80000010851f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108522	kernel.asm	/^ffff800000108522:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000108529	kernel.asm	/^ffff800000108529:	80 ff ff $/;"	l
ffff80000010852c	kernel.asm	/^ffff80000010852c:	ff d0                	callq  *%rax$/;"	l
ffff80000010852e	kernel.asm	/^ffff80000010852e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108532	kernel.asm	/^ffff800000108532:	8b 10                	mov    (%rax),%edx$/;"	l
ffff800000108534	kernel.asm	/^ffff800000108534:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108538	kernel.asm	/^ffff800000108538:	8b 00                	mov    (%rax),%eax$/;"	l
ffff80000010853a	kernel.asm	/^ffff80000010853a:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010853c	kernel.asm	/^ffff80000010853c:	75 25                	jne    ffff800000108563 <sys_link+0x198>$/;"	l
ffff80000010853e	kernel.asm	/^ffff80000010853e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108542	kernel.asm	/^ffff800000108542:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108545	kernel.asm	/^ffff800000108545:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx$/;"	l
ffff800000108549	kernel.asm	/^ffff800000108549:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010854d	kernel.asm	/^ffff80000010854d:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000108550	kernel.asm	/^ffff800000108550:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108553	kernel.asm	/^ffff800000108553:	48 b8 c5 35 10 00 00 	movabs $0xffff8000001035c5,%rax$/;"	l
ffff80000010855a	kernel.asm	/^ffff80000010855a:	80 ff ff $/;"	l
ffff80000010855d	kernel.asm	/^ffff80000010855d:	ff d0                	callq  *%rax$/;"	l
ffff80000010855f	kernel.asm	/^ffff80000010855f:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108561	kernel.asm	/^ffff800000108561:	79 15                	jns    ffff800000108578 <sys_link+0x1ad>$/;"	l
ffff800000108563	kernel.asm	/^ffff800000108563:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108567	kernel.asm	/^ffff800000108567:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010856a	kernel.asm	/^ffff80000010856a:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108571	kernel.asm	/^ffff800000108571:	80 ff ff $/;"	l
ffff800000108574	kernel.asm	/^ffff800000108574:	ff d0                	callq  *%rax$/;"	l
ffff800000108576	kernel.asm	/^ffff800000108576:	eb 3f                	jmp    ffff8000001085b7 <sys_link+0x1ec>$/;"	l
ffff800000108578	kernel.asm	/^ffff800000108578:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010857c	kernel.asm	/^ffff80000010857c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010857f	kernel.asm	/^ffff80000010857f:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108586	kernel.asm	/^ffff800000108586:	80 ff ff $/;"	l
ffff800000108589	kernel.asm	/^ffff800000108589:	ff d0                	callq  *%rax$/;"	l
ffff80000010858b	kernel.asm	/^ffff80000010858b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010858f	kernel.asm	/^ffff80000010858f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108592	kernel.asm	/^ffff800000108592:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff800000108599	kernel.asm	/^ffff800000108599:	80 ff ff $/;"	l
ffff80000010859c	kernel.asm	/^ffff80000010859c:	ff d0                	callq  *%rax$/;"	l
ffff80000010859e	kernel.asm	/^ffff80000010859e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001085a3	kernel.asm	/^ffff8000001085a3:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff8000001085aa	kernel.asm	/^ffff8000001085aa:	80 ff ff $/;"	l
ffff8000001085ad	kernel.asm	/^ffff8000001085ad:	ff d2                	callq  *%rdx$/;"	l
ffff8000001085af	kernel.asm	/^ffff8000001085af:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001085b4	kernel.asm	/^ffff8000001085b4:	eb 6b                	jmp    ffff800000108621 <sys_link+0x256>$/;"	l
ffff8000001085b6	kernel.asm	/^ffff8000001085b6:	90                   	nop$/;"	l
ffff8000001085b7	kernel.asm	/^ffff8000001085b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085bb	kernel.asm	/^ffff8000001085bb:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085be	kernel.asm	/^ffff8000001085be:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001085c5	kernel.asm	/^ffff8000001085c5:	80 ff ff $/;"	l
ffff8000001085c8	kernel.asm	/^ffff8000001085c8:	ff d0                	callq  *%rax$/;"	l
ffff8000001085ca	kernel.asm	/^ffff8000001085ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085ce	kernel.asm	/^ffff8000001085ce:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001085d5	kernel.asm	/^ffff8000001085d5:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001085d8	kernel.asm	/^ffff8000001085d8:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001085da	kernel.asm	/^ffff8000001085da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085de	kernel.asm	/^ffff8000001085de:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001085e5	kernel.asm	/^ffff8000001085e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085e9	kernel.asm	/^ffff8000001085e9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085ec	kernel.asm	/^ffff8000001085ec:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff8000001085f3	kernel.asm	/^ffff8000001085f3:	80 ff ff $/;"	l
ffff8000001085f6	kernel.asm	/^ffff8000001085f6:	ff d0                	callq  *%rax$/;"	l
ffff8000001085f8	kernel.asm	/^ffff8000001085f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001085fc	kernel.asm	/^ffff8000001085fc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001085ff	kernel.asm	/^ffff8000001085ff:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108606	kernel.asm	/^ffff800000108606:	80 ff ff $/;"	l
ffff800000108609	kernel.asm	/^ffff800000108609:	ff d0                	callq  *%rax$/;"	l
ffff80000010860b	kernel.asm	/^ffff80000010860b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108610	kernel.asm	/^ffff800000108610:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108617	kernel.asm	/^ffff800000108617:	80 ff ff $/;"	l
ffff80000010861a	kernel.asm	/^ffff80000010861a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010861c	kernel.asm	/^ffff80000010861c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108621	kernel.asm	/^ffff800000108621:	c9                   	leaveq $/;"	l
ffff800000108622	kernel.asm	/^ffff800000108622:	c3                   	retq   $/;"	l
ffff800000108623	kernel.asm	/^ffff800000108623 <isdirempty>:$/;"	l
ffff800000108623	kernel.asm	/^ffff800000108623:	55                   	push   %rbp$/;"	l
ffff800000108624	kernel.asm	/^ffff800000108624:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108627	kernel.asm	/^ffff800000108627:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010862b	kernel.asm	/^ffff80000010862b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010862f	kernel.asm	/^ffff80000010862f:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)$/;"	l
ffff800000108636	kernel.asm	/^ffff800000108636:	eb 53                	jmp    ffff80000010868b <isdirempty+0x68>$/;"	l
ffff800000108638	kernel.asm	/^ffff800000108638:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010863b	kernel.asm	/^ffff80000010863b:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff80000010863f	kernel.asm	/^ffff80000010863f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000108643	kernel.asm	/^ffff800000108643:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000108648	kernel.asm	/^ffff800000108648:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010864b	kernel.asm	/^ffff80000010864b:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff800000108652	kernel.asm	/^ffff800000108652:	80 ff ff $/;"	l
ffff800000108655	kernel.asm	/^ffff800000108655:	ff d0                	callq  *%rax$/;"	l
ffff800000108657	kernel.asm	/^ffff800000108657:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff80000010865a	kernel.asm	/^ffff80000010865a:	74 16                	je     ffff800000108672 <isdirempty+0x4f>$/;"	l
ffff80000010865c	kernel.asm	/^ffff80000010865c:	48 bf 3c d1 10 00 00 	movabs $0xffff80000010d13c,%rdi$/;"	l
ffff800000108663	kernel.asm	/^ffff800000108663:	80 ff ff $/;"	l
ffff800000108666	kernel.asm	/^ffff800000108666:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010866d	kernel.asm	/^ffff80000010866d:	80 ff ff $/;"	l
ffff800000108670	kernel.asm	/^ffff800000108670:	ff d0                	callq  *%rax$/;"	l
ffff800000108672	kernel.asm	/^ffff800000108672:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax$/;"	l
ffff800000108676	kernel.asm	/^ffff800000108676:	66 85 c0             	test   %ax,%ax$/;"	l
ffff800000108679	kernel.asm	/^ffff800000108679:	74 07                	je     ffff800000108682 <isdirempty+0x5f>$/;"	l
ffff80000010867b	kernel.asm	/^ffff80000010867b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108680	kernel.asm	/^ffff800000108680:	eb 1f                	jmp    ffff8000001086a1 <isdirempty+0x7e>$/;"	l
ffff800000108682	kernel.asm	/^ffff800000108682:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108685	kernel.asm	/^ffff800000108685:	83 c0 10             	add    $0x10,%eax$/;"	l
ffff800000108688	kernel.asm	/^ffff800000108688:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010868b	kernel.asm	/^ffff80000010868b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010868f	kernel.asm	/^ffff80000010868f:	8b 90 9c 00 00 00    	mov    0x9c(%rax),%edx$/;"	l
ffff800000108695	kernel.asm	/^ffff800000108695:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000108698	kernel.asm	/^ffff800000108698:	39 c2                	cmp    %eax,%edx$/;"	l
ffff80000010869a	kernel.asm	/^ffff80000010869a:	77 9c                	ja     ffff800000108638 <isdirempty+0x15>$/;"	l
ffff80000010869c	kernel.asm	/^ffff80000010869c:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff8000001086a1	kernel.asm	/^ffff8000001086a1:	c9                   	leaveq $/;"	l
ffff8000001086a2	kernel.asm	/^ffff8000001086a2:	c3                   	retq   $/;"	l
ffff8000001086a3	kernel.asm	/^ffff8000001086a3 <sys_unlink>:$/;"	l
ffff8000001086a3	kernel.asm	/^ffff8000001086a3:	55                   	push   %rbp$/;"	l
ffff8000001086a4	kernel.asm	/^ffff8000001086a4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001086a7	kernel.asm	/^ffff8000001086a7:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff8000001086ab	kernel.asm	/^ffff8000001086ab:	48 8d 45 c8          	lea    -0x38(%rbp),%rax$/;"	l
ffff8000001086af	kernel.asm	/^ffff8000001086af:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001086b2	kernel.asm	/^ffff8000001086b2:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001086b7	kernel.asm	/^ffff8000001086b7:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff8000001086be	kernel.asm	/^ffff8000001086be:	80 ff ff $/;"	l
ffff8000001086c1	kernel.asm	/^ffff8000001086c1:	ff d0                	callq  *%rax$/;"	l
ffff8000001086c3	kernel.asm	/^ffff8000001086c3:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001086c5	kernel.asm	/^ffff8000001086c5:	79 0a                	jns    ffff8000001086d1 <sys_unlink+0x2e>$/;"	l
ffff8000001086c7	kernel.asm	/^ffff8000001086c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001086cc	kernel.asm	/^ffff8000001086cc:	e9 80 02 00 00       	jmpq   ffff800000108951 <sys_unlink+0x2ae>$/;"	l
ffff8000001086d1	kernel.asm	/^ffff8000001086d1:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001086d6	kernel.asm	/^ffff8000001086d6:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff8000001086dd	kernel.asm	/^ffff8000001086dd:	80 ff ff $/;"	l
ffff8000001086e0	kernel.asm	/^ffff8000001086e0:	ff d2                	callq  *%rdx$/;"	l
ffff8000001086e2	kernel.asm	/^ffff8000001086e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff8000001086e6	kernel.asm	/^ffff8000001086e6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff8000001086ea	kernel.asm	/^ffff8000001086ea:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001086ed	kernel.asm	/^ffff8000001086ed:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001086f0	kernel.asm	/^ffff8000001086f0:	48 b8 79 39 10 00 00 	movabs $0xffff800000103979,%rax$/;"	l
ffff8000001086f7	kernel.asm	/^ffff8000001086f7:	80 ff ff $/;"	l
ffff8000001086fa	kernel.asm	/^ffff8000001086fa:	ff d0                	callq  *%rax$/;"	l
ffff8000001086fc	kernel.asm	/^ffff8000001086fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108700	kernel.asm	/^ffff800000108700:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108705	kernel.asm	/^ffff800000108705:	75 1b                	jne    ffff800000108722 <sys_unlink+0x7f>$/;"	l
ffff800000108707	kernel.asm	/^ffff800000108707:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010870c	kernel.asm	/^ffff80000010870c:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108713	kernel.asm	/^ffff800000108713:	80 ff ff $/;"	l
ffff800000108716	kernel.asm	/^ffff800000108716:	ff d2                	callq  *%rdx$/;"	l
ffff800000108718	kernel.asm	/^ffff800000108718:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010871d	kernel.asm	/^ffff80000010871d:	e9 2f 02 00 00       	jmpq   ffff800000108951 <sys_unlink+0x2ae>$/;"	l
ffff800000108722	kernel.asm	/^ffff800000108722:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108726	kernel.asm	/^ffff800000108726:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108729	kernel.asm	/^ffff800000108729:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000108730	kernel.asm	/^ffff800000108730:	80 ff ff $/;"	l
ffff800000108733	kernel.asm	/^ffff800000108733:	ff d0                	callq  *%rax$/;"	l
ffff800000108735	kernel.asm	/^ffff800000108735:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff800000108739	kernel.asm	/^ffff800000108739:	48 be 4e d1 10 00 00 	movabs $0xffff80000010d14e,%rsi$/;"	l
ffff800000108740	kernel.asm	/^ffff800000108740:	80 ff ff $/;"	l
ffff800000108743	kernel.asm	/^ffff800000108743:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108746	kernel.asm	/^ffff800000108746:	48 b8 94 34 10 00 00 	movabs $0xffff800000103494,%rax$/;"	l
ffff80000010874d	kernel.asm	/^ffff80000010874d:	80 ff ff $/;"	l
ffff800000108750	kernel.asm	/^ffff800000108750:	ff d0                	callq  *%rax$/;"	l
ffff800000108752	kernel.asm	/^ffff800000108752:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108754	kernel.asm	/^ffff800000108754:	0f 84 ce 01 00 00    	je     ffff800000108928 <sys_unlink+0x285>$/;"	l
ffff80000010875a	kernel.asm	/^ffff80000010875a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax$/;"	l
ffff80000010875e	kernel.asm	/^ffff80000010875e:	48 be 50 d1 10 00 00 	movabs $0xffff80000010d150,%rsi$/;"	l
ffff800000108765	kernel.asm	/^ffff800000108765:	80 ff ff $/;"	l
ffff800000108768	kernel.asm	/^ffff800000108768:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010876b	kernel.asm	/^ffff80000010876b:	48 b8 94 34 10 00 00 	movabs $0xffff800000103494,%rax$/;"	l
ffff800000108772	kernel.asm	/^ffff800000108772:	80 ff ff $/;"	l
ffff800000108775	kernel.asm	/^ffff800000108775:	ff d0                	callq  *%rax$/;"	l
ffff800000108777	kernel.asm	/^ffff800000108777:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108779	kernel.asm	/^ffff800000108779:	0f 84 a9 01 00 00    	je     ffff800000108928 <sys_unlink+0x285>$/;"	l
ffff80000010877f	kernel.asm	/^ffff80000010877f:	48 8d 55 c4          	lea    -0x3c(%rbp),%rdx$/;"	l
ffff800000108783	kernel.asm	/^ffff800000108783:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff800000108787	kernel.asm	/^ffff800000108787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010878b	kernel.asm	/^ffff80000010878b:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010878e	kernel.asm	/^ffff80000010878e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108791	kernel.asm	/^ffff800000108791:	48 b8 c5 34 10 00 00 	movabs $0xffff8000001034c5,%rax$/;"	l
ffff800000108798	kernel.asm	/^ffff800000108798:	80 ff ff $/;"	l
ffff80000010879b	kernel.asm	/^ffff80000010879b:	ff d0                	callq  *%rax$/;"	l
ffff80000010879d	kernel.asm	/^ffff80000010879d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001087a1	kernel.asm	/^ffff8000001087a1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001087a6	kernel.asm	/^ffff8000001087a6:	0f 84 7b 01 00 00    	je     ffff800000108927 <sys_unlink+0x284>$/;"	l
ffff8000001087ac	kernel.asm	/^ffff8000001087ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087b0	kernel.asm	/^ffff8000001087b0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087b3	kernel.asm	/^ffff8000001087b3:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001087ba	kernel.asm	/^ffff8000001087ba:	80 ff ff $/;"	l
ffff8000001087bd	kernel.asm	/^ffff8000001087bd:	ff d0                	callq  *%rax$/;"	l
ffff8000001087bf	kernel.asm	/^ffff8000001087bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087c3	kernel.asm	/^ffff8000001087c3:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001087ca	kernel.asm	/^ffff8000001087ca:	66 85 c0             	test   %ax,%ax$/;"	l
ffff8000001087cd	kernel.asm	/^ffff8000001087cd:	7f 16                	jg     ffff8000001087e5 <sys_unlink+0x142>$/;"	l
ffff8000001087cf	kernel.asm	/^ffff8000001087cf:	48 bf 53 d1 10 00 00 	movabs $0xffff80000010d153,%rdi$/;"	l
ffff8000001087d6	kernel.asm	/^ffff8000001087d6:	80 ff ff $/;"	l
ffff8000001087d9	kernel.asm	/^ffff8000001087d9:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff8000001087e0	kernel.asm	/^ffff8000001087e0:	80 ff ff $/;"	l
ffff8000001087e3	kernel.asm	/^ffff8000001087e3:	ff d0                	callq  *%rax$/;"	l
ffff8000001087e5	kernel.asm	/^ffff8000001087e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087e9	kernel.asm	/^ffff8000001087e9:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff8000001087f0	kernel.asm	/^ffff8000001087f0:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff8000001087f4	kernel.asm	/^ffff8000001087f4:	75 2f                	jne    ffff800000108825 <sys_unlink+0x182>$/;"	l
ffff8000001087f6	kernel.asm	/^ffff8000001087f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001087fa	kernel.asm	/^ffff8000001087fa:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001087fd	kernel.asm	/^ffff8000001087fd:	48 b8 23 86 10 00 00 	movabs $0xffff800000108623,%rax$/;"	l
ffff800000108804	kernel.asm	/^ffff800000108804:	80 ff ff $/;"	l
ffff800000108807	kernel.asm	/^ffff800000108807:	ff d0                	callq  *%rax$/;"	l
ffff800000108809	kernel.asm	/^ffff800000108809:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010880b	kernel.asm	/^ffff80000010880b:	75 18                	jne    ffff800000108825 <sys_unlink+0x182>$/;"	l
ffff80000010880d	kernel.asm	/^ffff80000010880d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108811	kernel.asm	/^ffff800000108811:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108814	kernel.asm	/^ffff800000108814:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff80000010881b	kernel.asm	/^ffff80000010881b:	80 ff ff $/;"	l
ffff80000010881e	kernel.asm	/^ffff80000010881e:	ff d0                	callq  *%rax$/;"	l
ffff800000108820	kernel.asm	/^ffff800000108820:	e9 03 01 00 00       	jmpq   ffff800000108928 <sys_unlink+0x285>$/;"	l
ffff800000108825	kernel.asm	/^ffff800000108825:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000108829	kernel.asm	/^ffff800000108829:	ba 10 00 00 00       	mov    $0x10,%edx$/;"	l
ffff80000010882e	kernel.asm	/^ffff80000010882e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000108833	kernel.asm	/^ffff800000108833:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108836	kernel.asm	/^ffff800000108836:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010883d	kernel.asm	/^ffff80000010883d:	80 ff ff $/;"	l
ffff800000108840	kernel.asm	/^ffff800000108840:	ff d0                	callq  *%rax$/;"	l
ffff800000108842	kernel.asm	/^ffff800000108842:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff800000108845	kernel.asm	/^ffff800000108845:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi$/;"	l
ffff800000108849	kernel.asm	/^ffff800000108849:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010884d	kernel.asm	/^ffff80000010884d:	b9 10 00 00 00       	mov    $0x10,%ecx$/;"	l
ffff800000108852	kernel.asm	/^ffff800000108852:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108855	kernel.asm	/^ffff800000108855:	48 b8 2e 33 10 00 00 	movabs $0xffff80000010332e,%rax$/;"	l
ffff80000010885c	kernel.asm	/^ffff80000010885c:	80 ff ff $/;"	l
ffff80000010885f	kernel.asm	/^ffff80000010885f:	ff d0                	callq  *%rax$/;"	l
ffff800000108861	kernel.asm	/^ffff800000108861:	83 f8 10             	cmp    $0x10,%eax$/;"	l
ffff800000108864	kernel.asm	/^ffff800000108864:	74 16                	je     ffff80000010887c <sys_unlink+0x1d9>$/;"	l
ffff800000108866	kernel.asm	/^ffff800000108866:	48 bf 65 d1 10 00 00 	movabs $0xffff80000010d165,%rdi$/;"	l
ffff80000010886d	kernel.asm	/^ffff80000010886d:	80 ff ff $/;"	l
ffff800000108870	kernel.asm	/^ffff800000108870:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000108877	kernel.asm	/^ffff800000108877:	80 ff ff $/;"	l
ffff80000010887a	kernel.asm	/^ffff80000010887a:	ff d0                	callq  *%rax$/;"	l
ffff80000010887c	kernel.asm	/^ffff80000010887c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108880	kernel.asm	/^ffff800000108880:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108887	kernel.asm	/^ffff800000108887:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff80000010888b	kernel.asm	/^ffff80000010888b:	75 2e                	jne    ffff8000001088bb <sys_unlink+0x218>$/;"	l
ffff80000010888d	kernel.asm	/^ffff80000010888d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108891	kernel.asm	/^ffff800000108891:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108898	kernel.asm	/^ffff800000108898:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010889b	kernel.asm	/^ffff80000010889b:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010889d	kernel.asm	/^ffff80000010889d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001088a1	kernel.asm	/^ffff8000001088a1:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001088a8	kernel.asm	/^ffff8000001088a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001088ac	kernel.asm	/^ffff8000001088ac:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088af	kernel.asm	/^ffff8000001088af:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff8000001088b6	kernel.asm	/^ffff8000001088b6:	80 ff ff $/;"	l
ffff8000001088b9	kernel.asm	/^ffff8000001088b9:	ff d0                	callq  *%rax$/;"	l
ffff8000001088bb	kernel.asm	/^ffff8000001088bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001088bf	kernel.asm	/^ffff8000001088bf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088c2	kernel.asm	/^ffff8000001088c2:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff8000001088c9	kernel.asm	/^ffff8000001088c9:	80 ff ff $/;"	l
ffff8000001088cc	kernel.asm	/^ffff8000001088cc:	ff d0                	callq  *%rax$/;"	l
ffff8000001088ce	kernel.asm	/^ffff8000001088ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088d2	kernel.asm	/^ffff8000001088d2:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff8000001088d9	kernel.asm	/^ffff8000001088d9:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff8000001088dc	kernel.asm	/^ffff8000001088dc:	89 c2                	mov    %eax,%edx$/;"	l
ffff8000001088de	kernel.asm	/^ffff8000001088de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088e2	kernel.asm	/^ffff8000001088e2:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff8000001088e9	kernel.asm	/^ffff8000001088e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001088ed	kernel.asm	/^ffff8000001088ed:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001088f0	kernel.asm	/^ffff8000001088f0:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff8000001088f7	kernel.asm	/^ffff8000001088f7:	80 ff ff $/;"	l
ffff8000001088fa	kernel.asm	/^ffff8000001088fa:	ff d0                	callq  *%rax$/;"	l
ffff8000001088fc	kernel.asm	/^ffff8000001088fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108900	kernel.asm	/^ffff800000108900:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108903	kernel.asm	/^ffff800000108903:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff80000010890a	kernel.asm	/^ffff80000010890a:	80 ff ff $/;"	l
ffff80000010890d	kernel.asm	/^ffff80000010890d:	ff d0                	callq  *%rax$/;"	l
ffff80000010890f	kernel.asm	/^ffff80000010890f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108914	kernel.asm	/^ffff800000108914:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff80000010891b	kernel.asm	/^ffff80000010891b:	80 ff ff $/;"	l
ffff80000010891e	kernel.asm	/^ffff80000010891e:	ff d2                	callq  *%rdx$/;"	l
ffff800000108920	kernel.asm	/^ffff800000108920:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108925	kernel.asm	/^ffff800000108925:	eb 2a                	jmp    ffff800000108951 <sys_unlink+0x2ae>$/;"	l
ffff800000108927	kernel.asm	/^ffff800000108927:	90                   	nop$/;"	l
ffff800000108928	kernel.asm	/^ffff800000108928:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010892c	kernel.asm	/^ffff80000010892c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010892f	kernel.asm	/^ffff80000010892f:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108936	kernel.asm	/^ffff800000108936:	80 ff ff $/;"	l
ffff800000108939	kernel.asm	/^ffff800000108939:	ff d0                	callq  *%rax$/;"	l
ffff80000010893b	kernel.asm	/^ffff80000010893b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108940	kernel.asm	/^ffff800000108940:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108947	kernel.asm	/^ffff800000108947:	80 ff ff $/;"	l
ffff80000010894a	kernel.asm	/^ffff80000010894a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010894c	kernel.asm	/^ffff80000010894c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108951	kernel.asm	/^ffff800000108951:	c9                   	leaveq $/;"	l
ffff800000108952	kernel.asm	/^ffff800000108952:	c3                   	retq   $/;"	l
ffff800000108953	kernel.asm	/^ffff800000108953 <create>:$/;"	l
ffff800000108953	kernel.asm	/^ffff800000108953:	55                   	push   %rbp$/;"	l
ffff800000108954	kernel.asm	/^ffff800000108954:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108957	kernel.asm	/^ffff800000108957:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010895b	kernel.asm	/^ffff80000010895b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010895f	kernel.asm	/^ffff80000010895f:	89 c8                	mov    %ecx,%eax$/;"	l
ffff800000108961	kernel.asm	/^ffff800000108961:	66 89 75 c4          	mov    %si,-0x3c(%rbp)$/;"	l
ffff800000108965	kernel.asm	/^ffff800000108965:	66 89 55 c0          	mov    %dx,-0x40(%rbp)$/;"	l
ffff800000108969	kernel.asm	/^ffff800000108969:	66 89 45 bc          	mov    %ax,-0x44(%rbp)$/;"	l
ffff80000010896d	kernel.asm	/^ffff80000010896d:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx$/;"	l
ffff800000108971	kernel.asm	/^ffff800000108971:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff800000108975	kernel.asm	/^ffff800000108975:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000108978	kernel.asm	/^ffff800000108978:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010897b	kernel.asm	/^ffff80000010897b:	48 b8 79 39 10 00 00 	movabs $0xffff800000103979,%rax$/;"	l
ffff800000108982	kernel.asm	/^ffff800000108982:	80 ff ff $/;"	l
ffff800000108985	kernel.asm	/^ffff800000108985:	ff d0                	callq  *%rax$/;"	l
ffff800000108987	kernel.asm	/^ffff800000108987:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010898b	kernel.asm	/^ffff80000010898b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108990	kernel.asm	/^ffff800000108990:	75 0a                	jne    ffff80000010899c <create+0x49>$/;"	l
ffff800000108992	kernel.asm	/^ffff800000108992:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108997	kernel.asm	/^ffff800000108997:	e9 1d 02 00 00       	jmpq   ffff800000108bb9 <create+0x266>$/;"	l
ffff80000010899c	kernel.asm	/^ffff80000010899c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001089a0	kernel.asm	/^ffff8000001089a0:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089a3	kernel.asm	/^ffff8000001089a3:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001089aa	kernel.asm	/^ffff8000001089aa:	80 ff ff $/;"	l
ffff8000001089ad	kernel.asm	/^ffff8000001089ad:	ff d0                	callq  *%rax$/;"	l
ffff8000001089af	kernel.asm	/^ffff8000001089af:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx$/;"	l
ffff8000001089b3	kernel.asm	/^ffff8000001089b3:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff8000001089b7	kernel.asm	/^ffff8000001089b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001089bb	kernel.asm	/^ffff8000001089bb:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff8000001089be	kernel.asm	/^ffff8000001089be:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089c1	kernel.asm	/^ffff8000001089c1:	48 b8 c5 34 10 00 00 	movabs $0xffff8000001034c5,%rax$/;"	l
ffff8000001089c8	kernel.asm	/^ffff8000001089c8:	80 ff ff $/;"	l
ffff8000001089cb	kernel.asm	/^ffff8000001089cb:	ff d0                	callq  *%rax$/;"	l
ffff8000001089cd	kernel.asm	/^ffff8000001089cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff8000001089d1	kernel.asm	/^ffff8000001089d1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff8000001089d6	kernel.asm	/^ffff8000001089d6:	74 64                	je     ffff800000108a3c <create+0xe9>$/;"	l
ffff8000001089d8	kernel.asm	/^ffff8000001089d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001089dc	kernel.asm	/^ffff8000001089dc:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089df	kernel.asm	/^ffff8000001089df:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff8000001089e6	kernel.asm	/^ffff8000001089e6:	80 ff ff $/;"	l
ffff8000001089e9	kernel.asm	/^ffff8000001089e9:	ff d0                	callq  *%rax$/;"	l
ffff8000001089eb	kernel.asm	/^ffff8000001089eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001089ef	kernel.asm	/^ffff8000001089ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001089f2	kernel.asm	/^ffff8000001089f2:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff8000001089f9	kernel.asm	/^ffff8000001089f9:	80 ff ff $/;"	l
ffff8000001089fc	kernel.asm	/^ffff8000001089fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001089fe	kernel.asm	/^ffff8000001089fe:	66 83 7d c4 02       	cmpw   $0x2,-0x3c(%rbp)$/;"	l
ffff800000108a03	kernel.asm	/^ffff800000108a03:	75 1a                	jne    ffff800000108a1f <create+0xcc>$/;"	l
ffff800000108a05	kernel.asm	/^ffff800000108a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a09	kernel.asm	/^ffff800000108a09:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108a10	kernel.asm	/^ffff800000108a10:	66 83 f8 02          	cmp    $0x2,%ax$/;"	l
ffff800000108a14	kernel.asm	/^ffff800000108a14:	75 09                	jne    ffff800000108a1f <create+0xcc>$/;"	l
ffff800000108a16	kernel.asm	/^ffff800000108a16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a1a	kernel.asm	/^ffff800000108a1a:	e9 9a 01 00 00       	jmpq   ffff800000108bb9 <create+0x266>$/;"	l
ffff800000108a1f	kernel.asm	/^ffff800000108a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a23	kernel.asm	/^ffff800000108a23:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a26	kernel.asm	/^ffff800000108a26:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108a2d	kernel.asm	/^ffff800000108a2d:	80 ff ff $/;"	l
ffff800000108a30	kernel.asm	/^ffff800000108a30:	ff d0                	callq  *%rax$/;"	l
ffff800000108a32	kernel.asm	/^ffff800000108a32:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108a37	kernel.asm	/^ffff800000108a37:	e9 7d 01 00 00       	jmpq   ffff800000108bb9 <create+0x266>$/;"	l
ffff800000108a3c	kernel.asm	/^ffff800000108a3c:	0f bf 55 c4          	movswl -0x3c(%rbp),%edx$/;"	l
ffff800000108a40	kernel.asm	/^ffff800000108a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108a44	kernel.asm	/^ffff800000108a44:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000108a46	kernel.asm	/^ffff800000108a46:	89 d6                	mov    %edx,%esi$/;"	l
ffff800000108a48	kernel.asm	/^ffff800000108a48:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000108a4a	kernel.asm	/^ffff800000108a4a:	48 b8 f8 27 10 00 00 	movabs $0xffff8000001027f8,%rax$/;"	l
ffff800000108a51	kernel.asm	/^ffff800000108a51:	80 ff ff $/;"	l
ffff800000108a54	kernel.asm	/^ffff800000108a54:	ff d0                	callq  *%rax$/;"	l
ffff800000108a56	kernel.asm	/^ffff800000108a56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108a5a	kernel.asm	/^ffff800000108a5a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108a5f	kernel.asm	/^ffff800000108a5f:	75 16                	jne    ffff800000108a77 <create+0x124>$/;"	l
ffff800000108a61	kernel.asm	/^ffff800000108a61:	48 bf 74 d1 10 00 00 	movabs $0xffff80000010d174,%rdi$/;"	l
ffff800000108a68	kernel.asm	/^ffff800000108a68:	80 ff ff $/;"	l
ffff800000108a6b	kernel.asm	/^ffff800000108a6b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000108a72	kernel.asm	/^ffff800000108a72:	80 ff ff $/;"	l
ffff800000108a75	kernel.asm	/^ffff800000108a75:	ff d0                	callq  *%rax$/;"	l
ffff800000108a77	kernel.asm	/^ffff800000108a77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a7b	kernel.asm	/^ffff800000108a7b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108a7e	kernel.asm	/^ffff800000108a7e:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000108a85	kernel.asm	/^ffff800000108a85:	80 ff ff $/;"	l
ffff800000108a88	kernel.asm	/^ffff800000108a88:	ff d0                	callq  *%rax$/;"	l
ffff800000108a8a	kernel.asm	/^ffff800000108a8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a8e	kernel.asm	/^ffff800000108a8e:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx$/;"	l
ffff800000108a92	kernel.asm	/^ffff800000108a92:	66 89 90 96 00 00 00 	mov    %dx,0x96(%rax)$/;"	l
ffff800000108a99	kernel.asm	/^ffff800000108a99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108a9d	kernel.asm	/^ffff800000108a9d:	0f b7 55 bc          	movzwl -0x44(%rbp),%edx$/;"	l
ffff800000108aa1	kernel.asm	/^ffff800000108aa1:	66 89 90 98 00 00 00 	mov    %dx,0x98(%rax)$/;"	l
ffff800000108aa8	kernel.asm	/^ffff800000108aa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108aac	kernel.asm	/^ffff800000108aac:	66 c7 80 9a 00 00 00 	movw   $0x1,0x9a(%rax)$/;"	l
ffff800000108ab3	kernel.asm	/^ffff800000108ab3:	01 00 $/;"	l
ffff800000108ab5	kernel.asm	/^ffff800000108ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108ab9	kernel.asm	/^ffff800000108ab9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108abc	kernel.asm	/^ffff800000108abc:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff800000108ac3	kernel.asm	/^ffff800000108ac3:	80 ff ff $/;"	l
ffff800000108ac6	kernel.asm	/^ffff800000108ac6:	ff d0                	callq  *%rax$/;"	l
ffff800000108ac8	kernel.asm	/^ffff800000108ac8:	66 83 7d c4 01       	cmpw   $0x1,-0x3c(%rbp)$/;"	l
ffff800000108acd	kernel.asm	/^ffff800000108acd:	0f 85 94 00 00 00    	jne    ffff800000108b67 <create+0x214>$/;"	l
ffff800000108ad3	kernel.asm	/^ffff800000108ad3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ad7	kernel.asm	/^ffff800000108ad7:	0f b7 80 9a 00 00 00 	movzwl 0x9a(%rax),%eax$/;"	l
ffff800000108ade	kernel.asm	/^ffff800000108ade:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000108ae1	kernel.asm	/^ffff800000108ae1:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108ae3	kernel.asm	/^ffff800000108ae3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ae7	kernel.asm	/^ffff800000108ae7:	66 89 90 9a 00 00 00 	mov    %dx,0x9a(%rax)$/;"	l
ffff800000108aee	kernel.asm	/^ffff800000108aee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108af2	kernel.asm	/^ffff800000108af2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108af5	kernel.asm	/^ffff800000108af5:	48 b8 1d 29 10 00 00 	movabs $0xffff80000010291d,%rax$/;"	l
ffff800000108afc	kernel.asm	/^ffff800000108afc:	80 ff ff $/;"	l
ffff800000108aff	kernel.asm	/^ffff800000108aff:	ff d0                	callq  *%rax$/;"	l
ffff800000108b01	kernel.asm	/^ffff800000108b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b05	kernel.asm	/^ffff800000108b05:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108b08	kernel.asm	/^ffff800000108b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b0c	kernel.asm	/^ffff800000108b0c:	48 be 4e d1 10 00 00 	movabs $0xffff80000010d14e,%rsi$/;"	l
ffff800000108b13	kernel.asm	/^ffff800000108b13:	80 ff ff $/;"	l
ffff800000108b16	kernel.asm	/^ffff800000108b16:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b19	kernel.asm	/^ffff800000108b19:	48 b8 c5 35 10 00 00 	movabs $0xffff8000001035c5,%rax$/;"	l
ffff800000108b20	kernel.asm	/^ffff800000108b20:	80 ff ff $/;"	l
ffff800000108b23	kernel.asm	/^ffff800000108b23:	ff d0                	callq  *%rax$/;"	l
ffff800000108b25	kernel.asm	/^ffff800000108b25:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b27	kernel.asm	/^ffff800000108b27:	78 28                	js     ffff800000108b51 <create+0x1fe>$/;"	l
ffff800000108b29	kernel.asm	/^ffff800000108b29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108b2d	kernel.asm	/^ffff800000108b2d:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108b30	kernel.asm	/^ffff800000108b30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b34	kernel.asm	/^ffff800000108b34:	48 be 50 d1 10 00 00 	movabs $0xffff80000010d150,%rsi$/;"	l
ffff800000108b3b	kernel.asm	/^ffff800000108b3b:	80 ff ff $/;"	l
ffff800000108b3e	kernel.asm	/^ffff800000108b3e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b41	kernel.asm	/^ffff800000108b41:	48 b8 c5 35 10 00 00 	movabs $0xffff8000001035c5,%rax$/;"	l
ffff800000108b48	kernel.asm	/^ffff800000108b48:	80 ff ff $/;"	l
ffff800000108b4b	kernel.asm	/^ffff800000108b4b:	ff d0                	callq  *%rax$/;"	l
ffff800000108b4d	kernel.asm	/^ffff800000108b4d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b4f	kernel.asm	/^ffff800000108b4f:	79 16                	jns    ffff800000108b67 <create+0x214>$/;"	l
ffff800000108b51	kernel.asm	/^ffff800000108b51:	48 bf 83 d1 10 00 00 	movabs $0xffff80000010d183,%rdi$/;"	l
ffff800000108b58	kernel.asm	/^ffff800000108b58:	80 ff ff $/;"	l
ffff800000108b5b	kernel.asm	/^ffff800000108b5b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000108b62	kernel.asm	/^ffff800000108b62:	80 ff ff $/;"	l
ffff800000108b65	kernel.asm	/^ffff800000108b65:	ff d0                	callq  *%rax$/;"	l
ffff800000108b67	kernel.asm	/^ffff800000108b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108b6b	kernel.asm	/^ffff800000108b6b:	8b 50 04             	mov    0x4(%rax),%edx$/;"	l
ffff800000108b6e	kernel.asm	/^ffff800000108b6e:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx$/;"	l
ffff800000108b72	kernel.asm	/^ffff800000108b72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108b76	kernel.asm	/^ffff800000108b76:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff800000108b79	kernel.asm	/^ffff800000108b79:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108b7c	kernel.asm	/^ffff800000108b7c:	48 b8 c5 35 10 00 00 	movabs $0xffff8000001035c5,%rax$/;"	l
ffff800000108b83	kernel.asm	/^ffff800000108b83:	80 ff ff $/;"	l
ffff800000108b86	kernel.asm	/^ffff800000108b86:	ff d0                	callq  *%rax$/;"	l
ffff800000108b88	kernel.asm	/^ffff800000108b88:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108b8a	kernel.asm	/^ffff800000108b8a:	79 16                	jns    ffff800000108ba2 <create+0x24f>$/;"	l
ffff800000108b8c	kernel.asm	/^ffff800000108b8c:	48 bf 8f d1 10 00 00 	movabs $0xffff80000010d18f,%rdi$/;"	l
ffff800000108b93	kernel.asm	/^ffff800000108b93:	80 ff ff $/;"	l
ffff800000108b96	kernel.asm	/^ffff800000108b96:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000108b9d	kernel.asm	/^ffff800000108b9d:	80 ff ff $/;"	l
ffff800000108ba0	kernel.asm	/^ffff800000108ba0:	ff d0                	callq  *%rax$/;"	l
ffff800000108ba2	kernel.asm	/^ffff800000108ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ba6	kernel.asm	/^ffff800000108ba6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108ba9	kernel.asm	/^ffff800000108ba9:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108bb0	kernel.asm	/^ffff800000108bb0:	80 ff ff $/;"	l
ffff800000108bb3	kernel.asm	/^ffff800000108bb3:	ff d0                	callq  *%rax$/;"	l
ffff800000108bb5	kernel.asm	/^ffff800000108bb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108bb9	kernel.asm	/^ffff800000108bb9:	c9                   	leaveq $/;"	l
ffff800000108bba	kernel.asm	/^ffff800000108bba:	c3                   	retq   $/;"	l
ffff800000108bbb	kernel.asm	/^ffff800000108bbb <sys_open>:$/;"	l
ffff800000108bbb	kernel.asm	/^ffff800000108bbb:	55                   	push   %rbp$/;"	l
ffff800000108bbc	kernel.asm	/^ffff800000108bbc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108bbf	kernel.asm	/^ffff800000108bbf:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff800000108bc3	kernel.asm	/^ffff800000108bc3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax$/;"	l
ffff800000108bc7	kernel.asm	/^ffff800000108bc7:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108bca	kernel.asm	/^ffff800000108bca:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108bcf	kernel.asm	/^ffff800000108bcf:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff800000108bd6	kernel.asm	/^ffff800000108bd6:	80 ff ff $/;"	l
ffff800000108bd9	kernel.asm	/^ffff800000108bd9:	ff d0                	callq  *%rax$/;"	l
ffff800000108bdb	kernel.asm	/^ffff800000108bdb:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108bdd	kernel.asm	/^ffff800000108bdd:	78 1c                	js     ffff800000108bfb <sys_open+0x40>$/;"	l
ffff800000108bdf	kernel.asm	/^ffff800000108bdf:	48 8d 45 dc          	lea    -0x24(%rbp),%rax$/;"	l
ffff800000108be3	kernel.asm	/^ffff800000108be3:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108be6	kernel.asm	/^ffff800000108be6:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108beb	kernel.asm	/^ffff800000108beb:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000108bf2	kernel.asm	/^ffff800000108bf2:	80 ff ff $/;"	l
ffff800000108bf5	kernel.asm	/^ffff800000108bf5:	ff d0                	callq  *%rax$/;"	l
ffff800000108bf7	kernel.asm	/^ffff800000108bf7:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108bf9	kernel.asm	/^ffff800000108bf9:	79 0a                	jns    ffff800000108c05 <sys_open+0x4a>$/;"	l
ffff800000108bfb	kernel.asm	/^ffff800000108bfb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108c00	kernel.asm	/^ffff800000108c00:	e9 fb 01 00 00       	jmpq   ffff800000108e00 <sys_open+0x245>$/;"	l
ffff800000108c05	kernel.asm	/^ffff800000108c05:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c0a	kernel.asm	/^ffff800000108c0a:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000108c11	kernel.asm	/^ffff800000108c11:	80 ff ff $/;"	l
ffff800000108c14	kernel.asm	/^ffff800000108c14:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c16	kernel.asm	/^ffff800000108c16:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108c19	kernel.asm	/^ffff800000108c19:	25 00 02 00 00       	and    $0x200,%eax$/;"	l
ffff800000108c1e	kernel.asm	/^ffff800000108c1e:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108c20	kernel.asm	/^ffff800000108c20:	74 4c                	je     ffff800000108c6e <sys_open+0xb3>$/;"	l
ffff800000108c22	kernel.asm	/^ffff800000108c22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108c26	kernel.asm	/^ffff800000108c26:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108c2b	kernel.asm	/^ffff800000108c2b:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000108c30	kernel.asm	/^ffff800000108c30:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff800000108c35	kernel.asm	/^ffff800000108c35:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108c38	kernel.asm	/^ffff800000108c38:	48 b8 53 89 10 00 00 	movabs $0xffff800000108953,%rax$/;"	l
ffff800000108c3f	kernel.asm	/^ffff800000108c3f:	80 ff ff $/;"	l
ffff800000108c42	kernel.asm	/^ffff800000108c42:	ff d0                	callq  *%rax$/;"	l
ffff800000108c44	kernel.asm	/^ffff800000108c44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108c48	kernel.asm	/^ffff800000108c48:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108c4d	kernel.asm	/^ffff800000108c4d:	0f 85 ad 00 00 00    	jne    ffff800000108d00 <sys_open+0x145>$/;"	l
ffff800000108c53	kernel.asm	/^ffff800000108c53:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c58	kernel.asm	/^ffff800000108c58:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108c5f	kernel.asm	/^ffff800000108c5f:	80 ff ff $/;"	l
ffff800000108c62	kernel.asm	/^ffff800000108c62:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c64	kernel.asm	/^ffff800000108c64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108c69	kernel.asm	/^ffff800000108c69:	e9 92 01 00 00       	jmpq   ffff800000108e00 <sys_open+0x245>$/;"	l
ffff800000108c6e	kernel.asm	/^ffff800000108c6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000108c72	kernel.asm	/^ffff800000108c72:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108c75	kernel.asm	/^ffff800000108c75:	48 b8 4f 39 10 00 00 	movabs $0xffff80000010394f,%rax$/;"	l
ffff800000108c7c	kernel.asm	/^ffff800000108c7c:	80 ff ff $/;"	l
ffff800000108c7f	kernel.asm	/^ffff800000108c7f:	ff d0                	callq  *%rax$/;"	l
ffff800000108c81	kernel.asm	/^ffff800000108c81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108c85	kernel.asm	/^ffff800000108c85:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108c8a	kernel.asm	/^ffff800000108c8a:	75 1b                	jne    ffff800000108ca7 <sys_open+0xec>$/;"	l
ffff800000108c8c	kernel.asm	/^ffff800000108c8c:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108c91	kernel.asm	/^ffff800000108c91:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108c98	kernel.asm	/^ffff800000108c98:	80 ff ff $/;"	l
ffff800000108c9b	kernel.asm	/^ffff800000108c9b:	ff d2                	callq  *%rdx$/;"	l
ffff800000108c9d	kernel.asm	/^ffff800000108c9d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108ca2	kernel.asm	/^ffff800000108ca2:	e9 59 01 00 00       	jmpq   ffff800000108e00 <sys_open+0x245>$/;"	l
ffff800000108ca7	kernel.asm	/^ffff800000108ca7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108cab	kernel.asm	/^ffff800000108cab:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108cae	kernel.asm	/^ffff800000108cae:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000108cb5	kernel.asm	/^ffff800000108cb5:	80 ff ff $/;"	l
ffff800000108cb8	kernel.asm	/^ffff800000108cb8:	ff d0                	callq  *%rax$/;"	l
ffff800000108cba	kernel.asm	/^ffff800000108cba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108cbe	kernel.asm	/^ffff800000108cbe:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000108cc5	kernel.asm	/^ffff800000108cc5:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000108cc9	kernel.asm	/^ffff800000108cc9:	75 35                	jne    ffff800000108d00 <sys_open+0x145>$/;"	l
ffff800000108ccb	kernel.asm	/^ffff800000108ccb:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108cce	kernel.asm	/^ffff800000108cce:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108cd0	kernel.asm	/^ffff800000108cd0:	74 2e                	je     ffff800000108d00 <sys_open+0x145>$/;"	l
ffff800000108cd2	kernel.asm	/^ffff800000108cd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108cd6	kernel.asm	/^ffff800000108cd6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108cd9	kernel.asm	/^ffff800000108cd9:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108ce0	kernel.asm	/^ffff800000108ce0:	80 ff ff $/;"	l
ffff800000108ce3	kernel.asm	/^ffff800000108ce3:	ff d0                	callq  *%rax$/;"	l
ffff800000108ce5	kernel.asm	/^ffff800000108ce5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108cea	kernel.asm	/^ffff800000108cea:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108cf1	kernel.asm	/^ffff800000108cf1:	80 ff ff $/;"	l
ffff800000108cf4	kernel.asm	/^ffff800000108cf4:	ff d2                	callq  *%rdx$/;"	l
ffff800000108cf6	kernel.asm	/^ffff800000108cf6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108cfb	kernel.asm	/^ffff800000108cfb:	e9 00 01 00 00       	jmpq   ffff800000108e00 <sys_open+0x245>$/;"	l
ffff800000108d00	kernel.asm	/^ffff800000108d00:	48 b8 42 1c 10 00 00 	movabs $0xffff800000101c42,%rax$/;"	l
ffff800000108d07	kernel.asm	/^ffff800000108d07:	80 ff ff $/;"	l
ffff800000108d0a	kernel.asm	/^ffff800000108d0a:	ff d0                	callq  *%rax$/;"	l
ffff800000108d0c	kernel.asm	/^ffff800000108d0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff800000108d10	kernel.asm	/^ffff800000108d10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108d15	kernel.asm	/^ffff800000108d15:	74 1c                	je     ffff800000108d33 <sys_open+0x178>$/;"	l
ffff800000108d17	kernel.asm	/^ffff800000108d17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108d1b	kernel.asm	/^ffff800000108d1b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d1e	kernel.asm	/^ffff800000108d1e:	48 b8 7e 80 10 00 00 	movabs $0xffff80000010807e,%rax$/;"	l
ffff800000108d25	kernel.asm	/^ffff800000108d25:	80 ff ff $/;"	l
ffff800000108d28	kernel.asm	/^ffff800000108d28:	ff d0                	callq  *%rax$/;"	l
ffff800000108d2a	kernel.asm	/^ffff800000108d2a:	89 45 ec             	mov    %eax,-0x14(%rbp)$/;"	l
ffff800000108d2d	kernel.asm	/^ffff800000108d2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)$/;"	l
ffff800000108d31	kernel.asm	/^ffff800000108d31:	79 48                	jns    ffff800000108d7b <sys_open+0x1c0>$/;"	l
ffff800000108d33	kernel.asm	/^ffff800000108d33:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff800000108d38	kernel.asm	/^ffff800000108d38:	74 13                	je     ffff800000108d4d <sys_open+0x192>$/;"	l
ffff800000108d3a	kernel.asm	/^ffff800000108d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108d3e	kernel.asm	/^ffff800000108d3e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d41	kernel.asm	/^ffff800000108d41:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff800000108d48	kernel.asm	/^ffff800000108d48:	80 ff ff $/;"	l
ffff800000108d4b	kernel.asm	/^ffff800000108d4b:	ff d0                	callq  *%rax$/;"	l
ffff800000108d4d	kernel.asm	/^ffff800000108d4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d51	kernel.asm	/^ffff800000108d51:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d54	kernel.asm	/^ffff800000108d54:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108d5b	kernel.asm	/^ffff800000108d5b:	80 ff ff $/;"	l
ffff800000108d5e	kernel.asm	/^ffff800000108d5e:	ff d0                	callq  *%rax$/;"	l
ffff800000108d60	kernel.asm	/^ffff800000108d60:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108d65	kernel.asm	/^ffff800000108d65:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108d6c	kernel.asm	/^ffff800000108d6c:	80 ff ff $/;"	l
ffff800000108d6f	kernel.asm	/^ffff800000108d6f:	ff d2                	callq  *%rdx$/;"	l
ffff800000108d71	kernel.asm	/^ffff800000108d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108d76	kernel.asm	/^ffff800000108d76:	e9 85 00 00 00       	jmpq   ffff800000108e00 <sys_open+0x245>$/;"	l
ffff800000108d7b	kernel.asm	/^ffff800000108d7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108d7f	kernel.asm	/^ffff800000108d7f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108d82	kernel.asm	/^ffff800000108d82:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000108d89	kernel.asm	/^ffff800000108d89:	80 ff ff $/;"	l
ffff800000108d8c	kernel.asm	/^ffff800000108d8c:	ff d0                	callq  *%rax$/;"	l
ffff800000108d8e	kernel.asm	/^ffff800000108d8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108d93	kernel.asm	/^ffff800000108d93:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108d9a	kernel.asm	/^ffff800000108d9a:	80 ff ff $/;"	l
ffff800000108d9d	kernel.asm	/^ffff800000108d9d:	ff d2                	callq  *%rdx$/;"	l
ffff800000108d9f	kernel.asm	/^ffff800000108d9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108da3	kernel.asm	/^ffff800000108da3:	c7 00 02 00 00 00    	movl   $0x2,(%rax)$/;"	l
ffff800000108da9	kernel.asm	/^ffff800000108da9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108dad	kernel.asm	/^ffff800000108dad:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000108db1	kernel.asm	/^ffff800000108db1:	48 89 50 18          	mov    %rdx,0x18(%rax)$/;"	l
ffff800000108db5	kernel.asm	/^ffff800000108db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108db9	kernel.asm	/^ffff800000108db9:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)$/;"	l
ffff800000108dc0	kernel.asm	/^ffff800000108dc0:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108dc3	kernel.asm	/^ffff800000108dc3:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108dc6	kernel.asm	/^ffff800000108dc6:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108dc8	kernel.asm	/^ffff800000108dc8:	0f 94 c0             	sete   %al$/;"	l
ffff800000108dcb	kernel.asm	/^ffff800000108dcb:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108dcd	kernel.asm	/^ffff800000108dcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108dd1	kernel.asm	/^ffff800000108dd1:	88 50 08             	mov    %dl,0x8(%rax)$/;"	l
ffff800000108dd4	kernel.asm	/^ffff800000108dd4:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108dd7	kernel.asm	/^ffff800000108dd7:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000108dda	kernel.asm	/^ffff800000108dda:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108ddc	kernel.asm	/^ffff800000108ddc:	75 0a                	jne    ffff800000108de8 <sys_open+0x22d>$/;"	l
ffff800000108dde	kernel.asm	/^ffff800000108dde:	8b 45 dc             	mov    -0x24(%rbp),%eax$/;"	l
ffff800000108de1	kernel.asm	/^ffff800000108de1:	83 e0 02             	and    $0x2,%eax$/;"	l
ffff800000108de4	kernel.asm	/^ffff800000108de4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108de6	kernel.asm	/^ffff800000108de6:	74 07                	je     ffff800000108def <sys_open+0x234>$/;"	l
ffff800000108de8	kernel.asm	/^ffff800000108de8:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ffff800000108ded	kernel.asm	/^ffff800000108ded:	eb 05                	jmp    ffff800000108df4 <sys_open+0x239>$/;"	l
ffff800000108def	kernel.asm	/^ffff800000108def:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108df4	kernel.asm	/^ffff800000108df4:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000108df6	kernel.asm	/^ffff800000108df6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108dfa	kernel.asm	/^ffff800000108dfa:	88 50 09             	mov    %dl,0x9(%rax)$/;"	l
ffff800000108dfd	kernel.asm	/^ffff800000108dfd:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108e00	kernel.asm	/^ffff800000108e00:	c9                   	leaveq $/;"	l
ffff800000108e01	kernel.asm	/^ffff800000108e01:	c3                   	retq   $/;"	l
ffff800000108e02	kernel.asm	/^ffff800000108e02 <sys_mkdir>:$/;"	l
ffff800000108e02	kernel.asm	/^ffff800000108e02:	55                   	push   %rbp$/;"	l
ffff800000108e03	kernel.asm	/^ffff800000108e03:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108e06	kernel.asm	/^ffff800000108e06:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108e0a	kernel.asm	/^ffff800000108e0a:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e0f	kernel.asm	/^ffff800000108e0f:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000108e16	kernel.asm	/^ffff800000108e16:	80 ff ff $/;"	l
ffff800000108e19	kernel.asm	/^ffff800000108e19:	ff d2                	callq  *%rdx$/;"	l
ffff800000108e1b	kernel.asm	/^ffff800000108e1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108e1f	kernel.asm	/^ffff800000108e1f:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108e22	kernel.asm	/^ffff800000108e22:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108e27	kernel.asm	/^ffff800000108e27:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff800000108e2e	kernel.asm	/^ffff800000108e2e:	80 ff ff $/;"	l
ffff800000108e31	kernel.asm	/^ffff800000108e31:	ff d0                	callq  *%rax$/;"	l
ffff800000108e33	kernel.asm	/^ffff800000108e33:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108e35	kernel.asm	/^ffff800000108e35:	78 2d                	js     ffff800000108e64 <sys_mkdir+0x62>$/;"	l
ffff800000108e37	kernel.asm	/^ffff800000108e37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108e3b	kernel.asm	/^ffff800000108e3b:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000108e40	kernel.asm	/^ffff800000108e40:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff800000108e45	kernel.asm	/^ffff800000108e45:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000108e4a	kernel.asm	/^ffff800000108e4a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e4d	kernel.asm	/^ffff800000108e4d:	48 b8 53 89 10 00 00 	movabs $0xffff800000108953,%rax$/;"	l
ffff800000108e54	kernel.asm	/^ffff800000108e54:	80 ff ff $/;"	l
ffff800000108e57	kernel.asm	/^ffff800000108e57:	ff d0                	callq  *%rax$/;"	l
ffff800000108e59	kernel.asm	/^ffff800000108e59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108e5d	kernel.asm	/^ffff800000108e5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108e62	kernel.asm	/^ffff800000108e62:	75 18                	jne    ffff800000108e7c <sys_mkdir+0x7a>$/;"	l
ffff800000108e64	kernel.asm	/^ffff800000108e64:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e69	kernel.asm	/^ffff800000108e69:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108e70	kernel.asm	/^ffff800000108e70:	80 ff ff $/;"	l
ffff800000108e73	kernel.asm	/^ffff800000108e73:	ff d2                	callq  *%rdx$/;"	l
ffff800000108e75	kernel.asm	/^ffff800000108e75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108e7a	kernel.asm	/^ffff800000108e7a:	eb 29                	jmp    ffff800000108ea5 <sys_mkdir+0xa3>$/;"	l
ffff800000108e7c	kernel.asm	/^ffff800000108e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108e80	kernel.asm	/^ffff800000108e80:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108e83	kernel.asm	/^ffff800000108e83:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108e8a	kernel.asm	/^ffff800000108e8a:	80 ff ff $/;"	l
ffff800000108e8d	kernel.asm	/^ffff800000108e8d:	ff d0                	callq  *%rax$/;"	l
ffff800000108e8f	kernel.asm	/^ffff800000108e8f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108e94	kernel.asm	/^ffff800000108e94:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108e9b	kernel.asm	/^ffff800000108e9b:	80 ff ff $/;"	l
ffff800000108e9e	kernel.asm	/^ffff800000108e9e:	ff d2                	callq  *%rdx$/;"	l
ffff800000108ea0	kernel.asm	/^ffff800000108ea0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108ea5	kernel.asm	/^ffff800000108ea5:	c9                   	leaveq $/;"	l
ffff800000108ea6	kernel.asm	/^ffff800000108ea6:	c3                   	retq   $/;"	l
ffff800000108ea7	kernel.asm	/^ffff800000108ea7 <sys_mknod>:$/;"	l
ffff800000108ea7	kernel.asm	/^ffff800000108ea7:	55                   	push   %rbp$/;"	l
ffff800000108ea8	kernel.asm	/^ffff800000108ea8:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108eab	kernel.asm	/^ffff800000108eab:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000108eaf	kernel.asm	/^ffff800000108eaf:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108eb4	kernel.asm	/^ffff800000108eb4:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000108ebb	kernel.asm	/^ffff800000108ebb:	80 ff ff $/;"	l
ffff800000108ebe	kernel.asm	/^ffff800000108ebe:	ff d2                	callq  *%rdx$/;"	l
ffff800000108ec0	kernel.asm	/^ffff800000108ec0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108ec4	kernel.asm	/^ffff800000108ec4:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108ec7	kernel.asm	/^ffff800000108ec7:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108ecc	kernel.asm	/^ffff800000108ecc:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff800000108ed3	kernel.asm	/^ffff800000108ed3:	80 ff ff $/;"	l
ffff800000108ed6	kernel.asm	/^ffff800000108ed6:	ff d0                	callq  *%rax$/;"	l
ffff800000108ed8	kernel.asm	/^ffff800000108ed8:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108eda	kernel.asm	/^ffff800000108eda:	78 67                	js     ffff800000108f43 <sys_mknod+0x9c>$/;"	l
ffff800000108edc	kernel.asm	/^ffff800000108edc:	48 8d 45 ec          	lea    -0x14(%rbp),%rax$/;"	l
ffff800000108ee0	kernel.asm	/^ffff800000108ee0:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108ee3	kernel.asm	/^ffff800000108ee3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff800000108ee8	kernel.asm	/^ffff800000108ee8:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000108eef	kernel.asm	/^ffff800000108eef:	80 ff ff $/;"	l
ffff800000108ef2	kernel.asm	/^ffff800000108ef2:	ff d0                	callq  *%rax$/;"	l
ffff800000108ef4	kernel.asm	/^ffff800000108ef4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108ef6	kernel.asm	/^ffff800000108ef6:	78 4b                	js     ffff800000108f43 <sys_mknod+0x9c>$/;"	l
ffff800000108ef8	kernel.asm	/^ffff800000108ef8:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff800000108efc	kernel.asm	/^ffff800000108efc:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108eff	kernel.asm	/^ffff800000108eff:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff800000108f04	kernel.asm	/^ffff800000108f04:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000108f0b	kernel.asm	/^ffff800000108f0b:	80 ff ff $/;"	l
ffff800000108f0e	kernel.asm	/^ffff800000108f0e:	ff d0                	callq  *%rax$/;"	l
ffff800000108f10	kernel.asm	/^ffff800000108f10:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108f12	kernel.asm	/^ffff800000108f12:	78 2f                	js     ffff800000108f43 <sys_mknod+0x9c>$/;"	l
ffff800000108f14	kernel.asm	/^ffff800000108f14:	8b 45 e8             	mov    -0x18(%rbp),%eax$/;"	l
ffff800000108f17	kernel.asm	/^ffff800000108f17:	0f bf c8             	movswl %ax,%ecx$/;"	l
ffff800000108f1a	kernel.asm	/^ffff800000108f1a:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000108f1d	kernel.asm	/^ffff800000108f1d:	0f bf d0             	movswl %ax,%edx$/;"	l
ffff800000108f20	kernel.asm	/^ffff800000108f20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108f24	kernel.asm	/^ffff800000108f24:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000108f29	kernel.asm	/^ffff800000108f29:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108f2c	kernel.asm	/^ffff800000108f2c:	48 b8 53 89 10 00 00 	movabs $0xffff800000108953,%rax$/;"	l
ffff800000108f33	kernel.asm	/^ffff800000108f33:	80 ff ff $/;"	l
ffff800000108f36	kernel.asm	/^ffff800000108f36:	ff d0                	callq  *%rax$/;"	l
ffff800000108f38	kernel.asm	/^ffff800000108f38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108f3c	kernel.asm	/^ffff800000108f3c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108f41	kernel.asm	/^ffff800000108f41:	75 18                	jne    ffff800000108f5b <sys_mknod+0xb4>$/;"	l
ffff800000108f43	kernel.asm	/^ffff800000108f43:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f48	kernel.asm	/^ffff800000108f48:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108f4f	kernel.asm	/^ffff800000108f4f:	80 ff ff $/;"	l
ffff800000108f52	kernel.asm	/^ffff800000108f52:	ff d2                	callq  *%rdx$/;"	l
ffff800000108f54	kernel.asm	/^ffff800000108f54:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108f59	kernel.asm	/^ffff800000108f59:	eb 29                	jmp    ffff800000108f84 <sys_mknod+0xdd>$/;"	l
ffff800000108f5b	kernel.asm	/^ffff800000108f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108f5f	kernel.asm	/^ffff800000108f5f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108f62	kernel.asm	/^ffff800000108f62:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000108f69	kernel.asm	/^ffff800000108f69:	80 ff ff $/;"	l
ffff800000108f6c	kernel.asm	/^ffff800000108f6c:	ff d0                	callq  *%rax$/;"	l
ffff800000108f6e	kernel.asm	/^ffff800000108f6e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f73	kernel.asm	/^ffff800000108f73:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108f7a	kernel.asm	/^ffff800000108f7a:	80 ff ff $/;"	l
ffff800000108f7d	kernel.asm	/^ffff800000108f7d:	ff d2                	callq  *%rdx$/;"	l
ffff800000108f7f	kernel.asm	/^ffff800000108f7f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f84	kernel.asm	/^ffff800000108f84:	c9                   	leaveq $/;"	l
ffff800000108f85	kernel.asm	/^ffff800000108f85:	c3                   	retq   $/;"	l
ffff800000108f86	kernel.asm	/^ffff800000108f86 <sys_chdir>:$/;"	l
ffff800000108f86	kernel.asm	/^ffff800000108f86:	55                   	push   %rbp$/;"	l
ffff800000108f87	kernel.asm	/^ffff800000108f87:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000108f8a	kernel.asm	/^ffff800000108f8a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000108f8e	kernel.asm	/^ffff800000108f8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108f93	kernel.asm	/^ffff800000108f93:	48 ba 32 50 10 00 00 	movabs $0xffff800000105032,%rdx$/;"	l
ffff800000108f9a	kernel.asm	/^ffff800000108f9a:	80 ff ff $/;"	l
ffff800000108f9d	kernel.asm	/^ffff800000108f9d:	ff d2                	callq  *%rdx$/;"	l
ffff800000108f9f	kernel.asm	/^ffff800000108f9f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff800000108fa3	kernel.asm	/^ffff800000108fa3:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000108fa6	kernel.asm	/^ffff800000108fa6:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff800000108fab	kernel.asm	/^ffff800000108fab:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff800000108fb2	kernel.asm	/^ffff800000108fb2:	80 ff ff $/;"	l
ffff800000108fb5	kernel.asm	/^ffff800000108fb5:	ff d0                	callq  *%rax$/;"	l
ffff800000108fb7	kernel.asm	/^ffff800000108fb7:	85 c0                	test   %eax,%eax$/;"	l
ffff800000108fb9	kernel.asm	/^ffff800000108fb9:	78 1e                	js     ffff800000108fd9 <sys_chdir+0x53>$/;"	l
ffff800000108fbb	kernel.asm	/^ffff800000108fbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000108fbf	kernel.asm	/^ffff800000108fbf:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108fc2	kernel.asm	/^ffff800000108fc2:	48 b8 4f 39 10 00 00 	movabs $0xffff80000010394f,%rax$/;"	l
ffff800000108fc9	kernel.asm	/^ffff800000108fc9:	80 ff ff $/;"	l
ffff800000108fcc	kernel.asm	/^ffff800000108fcc:	ff d0                	callq  *%rax$/;"	l
ffff800000108fce	kernel.asm	/^ffff800000108fce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000108fd2	kernel.asm	/^ffff800000108fd2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff800000108fd7	kernel.asm	/^ffff800000108fd7:	75 1b                	jne    ffff800000108ff4 <sys_chdir+0x6e>$/;"	l
ffff800000108fd9	kernel.asm	/^ffff800000108fd9:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000108fde	kernel.asm	/^ffff800000108fde:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000108fe5	kernel.asm	/^ffff800000108fe5:	80 ff ff $/;"	l
ffff800000108fe8	kernel.asm	/^ffff800000108fe8:	ff d2                	callq  *%rdx$/;"	l
ffff800000108fea	kernel.asm	/^ffff800000108fea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000108fef	kernel.asm	/^ffff800000108fef:	e9 af 00 00 00       	jmpq   ffff8000001090a3 <sys_chdir+0x11d>$/;"	l
ffff800000108ff4	kernel.asm	/^ffff800000108ff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000108ff8	kernel.asm	/^ffff800000108ff8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000108ffb	kernel.asm	/^ffff800000108ffb:	48 b8 af 2b 10 00 00 	movabs $0xffff800000102baf,%rax$/;"	l
ffff800000109002	kernel.asm	/^ffff800000109002:	80 ff ff $/;"	l
ffff800000109005	kernel.asm	/^ffff800000109005:	ff d0                	callq  *%rax$/;"	l
ffff800000109007	kernel.asm	/^ffff800000109007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010900b	kernel.asm	/^ffff80000010900b:	0f b7 80 94 00 00 00 	movzwl 0x94(%rax),%eax$/;"	l
ffff800000109012	kernel.asm	/^ffff800000109012:	66 83 f8 01          	cmp    $0x1,%ax$/;"	l
ffff800000109016	kernel.asm	/^ffff800000109016:	74 2b                	je     ffff800000109043 <sys_chdir+0xbd>$/;"	l
ffff800000109018	kernel.asm	/^ffff800000109018:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010901c	kernel.asm	/^ffff80000010901c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010901f	kernel.asm	/^ffff80000010901f:	48 b8 93 2e 10 00 00 	movabs $0xffff800000102e93,%rax$/;"	l
ffff800000109026	kernel.asm	/^ffff800000109026:	80 ff ff $/;"	l
ffff800000109029	kernel.asm	/^ffff800000109029:	ff d0                	callq  *%rax$/;"	l
ffff80000010902b	kernel.asm	/^ffff80000010902b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109030	kernel.asm	/^ffff800000109030:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000109037	kernel.asm	/^ffff800000109037:	80 ff ff $/;"	l
ffff80000010903a	kernel.asm	/^ffff80000010903a:	ff d2                	callq  *%rdx$/;"	l
ffff80000010903c	kernel.asm	/^ffff80000010903c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109041	kernel.asm	/^ffff800000109041:	eb 60                	jmp    ffff8000001090a3 <sys_chdir+0x11d>$/;"	l
ffff800000109043	kernel.asm	/^ffff800000109043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109047	kernel.asm	/^ffff800000109047:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010904a	kernel.asm	/^ffff80000010904a:	48 b8 40 2d 10 00 00 	movabs $0xffff800000102d40,%rax$/;"	l
ffff800000109051	kernel.asm	/^ffff800000109051:	80 ff ff $/;"	l
ffff800000109054	kernel.asm	/^ffff800000109054:	ff d0                	callq  *%rax$/;"	l
ffff800000109056	kernel.asm	/^ffff800000109056:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010905d	kernel.asm	/^ffff80000010905d:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109061	kernel.asm	/^ffff800000109061:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax$/;"	l
ffff800000109068	kernel.asm	/^ffff800000109068:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010906b	kernel.asm	/^ffff80000010906b:	48 b8 a9 2d 10 00 00 	movabs $0xffff800000102da9,%rax$/;"	l
ffff800000109072	kernel.asm	/^ffff800000109072:	80 ff ff $/;"	l
ffff800000109075	kernel.asm	/^ffff800000109075:	ff d0                	callq  *%rax$/;"	l
ffff800000109077	kernel.asm	/^ffff800000109077:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010907c	kernel.asm	/^ffff80000010907c:	48 ba 08 51 10 00 00 	movabs $0xffff800000105108,%rdx$/;"	l
ffff800000109083	kernel.asm	/^ffff800000109083:	80 ff ff $/;"	l
ffff800000109086	kernel.asm	/^ffff800000109086:	ff d2                	callq  *%rdx$/;"	l
ffff800000109088	kernel.asm	/^ffff800000109088:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010908f	kernel.asm	/^ffff80000010908f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109093	kernel.asm	/^ffff800000109093:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000109097	kernel.asm	/^ffff800000109097:	48 89 90 c8 00 00 00 	mov    %rdx,0xc8(%rax)$/;"	l
ffff80000010909e	kernel.asm	/^ffff80000010909e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001090a3	kernel.asm	/^ffff8000001090a3:	c9                   	leaveq $/;"	l
ffff8000001090a4	kernel.asm	/^ffff8000001090a4:	c3                   	retq   $/;"	l
ffff8000001090a5	kernel.asm	/^ffff8000001090a5 <sys_exec>:$/;"	l
ffff8000001090a5	kernel.asm	/^ffff8000001090a5:	55                   	push   %rbp$/;"	l
ffff8000001090a6	kernel.asm	/^ffff8000001090a6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001090a9	kernel.asm	/^ffff8000001090a9:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp$/;"	l
ffff8000001090b0	kernel.asm	/^ffff8000001090b0:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001090b4	kernel.asm	/^ffff8000001090b4:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001090b7	kernel.asm	/^ffff8000001090b7:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001090bc	kernel.asm	/^ffff8000001090bc:	48 b8 c0 7e 10 00 00 	movabs $0xffff800000107ec0,%rax$/;"	l
ffff8000001090c3	kernel.asm	/^ffff8000001090c3:	80 ff ff $/;"	l
ffff8000001090c6	kernel.asm	/^ffff8000001090c6:	ff d0                	callq  *%rax$/;"	l
ffff8000001090c8	kernel.asm	/^ffff8000001090c8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001090ca	kernel.asm	/^ffff8000001090ca:	78 24                	js     ffff8000001090f0 <sys_exec+0x4b>$/;"	l
ffff8000001090cc	kernel.asm	/^ffff8000001090cc:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax$/;"	l
ffff8000001090d3	kernel.asm	/^ffff8000001090d3:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001090d6	kernel.asm	/^ffff8000001090d6:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff8000001090db	kernel.asm	/^ffff8000001090db:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001090e0	kernel.asm	/^ffff8000001090e0:	48 ba ff 7d 10 00 00 	movabs $0xffff800000107dff,%rdx$/;"	l
ffff8000001090e7	kernel.asm	/^ffff8000001090e7:	80 ff ff $/;"	l
ffff8000001090ea	kernel.asm	/^ffff8000001090ea:	ff d2                	callq  *%rdx$/;"	l
ffff8000001090ec	kernel.asm	/^ffff8000001090ec:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001090ee	kernel.asm	/^ffff8000001090ee:	79 0a                	jns    ffff8000001090fa <sys_exec+0x55>$/;"	l
ffff8000001090f0	kernel.asm	/^ffff8000001090f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001090f5	kernel.asm	/^ffff8000001090f5:	e9 f7 00 00 00       	jmpq   ffff8000001091f1 <sys_exec+0x14c>$/;"	l
ffff8000001090fa	kernel.asm	/^ffff8000001090fa:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff800000109101	kernel.asm	/^ffff800000109101:	ba 00 01 00 00       	mov    $0x100,%edx$/;"	l
ffff800000109106	kernel.asm	/^ffff800000109106:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010910b	kernel.asm	/^ffff80000010910b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010910e	kernel.asm	/^ffff80000010910e:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff800000109115	kernel.asm	/^ffff800000109115:	80 ff ff $/;"	l
ffff800000109118	kernel.asm	/^ffff800000109118:	ff d0                	callq  *%rax$/;"	l
ffff80000010911a	kernel.asm	/^ffff80000010911a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109121	kernel.asm	/^ffff800000109121:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109124	kernel.asm	/^ffff800000109124:	83 f8 1f             	cmp    $0x1f,%eax$/;"	l
ffff800000109127	kernel.asm	/^ffff800000109127:	76 0a                	jbe    ffff800000109133 <sys_exec+0x8e>$/;"	l
ffff800000109129	kernel.asm	/^ffff800000109129:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010912e	kernel.asm	/^ffff80000010912e:	e9 be 00 00 00       	jmpq   ffff8000001091f1 <sys_exec+0x14c>$/;"	l
ffff800000109133	kernel.asm	/^ffff800000109133:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109136	kernel.asm	/^ffff800000109136:	48 98                	cltq   $/;"	l
ffff800000109138	kernel.asm	/^ffff800000109138:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010913f	kernel.asm	/^ffff80000010913f:	00 $/;"	l
ffff800000109140	kernel.asm	/^ffff800000109140:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax$/;"	l
ffff800000109147	kernel.asm	/^ffff800000109147:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010914a	kernel.asm	/^ffff80000010914a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax$/;"	l
ffff800000109151	kernel.asm	/^ffff800000109151:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109154	kernel.asm	/^ffff800000109154:	48 89 d7             	mov    %rdx,%rdi$/;"	l
ffff800000109157	kernel.asm	/^ffff800000109157:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010915c	kernel.asm	/^ffff80000010915c:	48 ba 24 7c 10 00 00 	movabs $0xffff800000107c24,%rdx$/;"	l
ffff800000109163	kernel.asm	/^ffff800000109163:	80 ff ff $/;"	l
ffff800000109166	kernel.asm	/^ffff800000109166:	ff d2                	callq  *%rdx$/;"	l
ffff800000109168	kernel.asm	/^ffff800000109168:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010916a	kernel.asm	/^ffff80000010916a:	79 07                	jns    ffff800000109173 <sys_exec+0xce>$/;"	l
ffff80000010916c	kernel.asm	/^ffff80000010916c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109171	kernel.asm	/^ffff800000109171:	eb 7e                	jmp    ffff8000001091f1 <sys_exec+0x14c>$/;"	l
ffff800000109173	kernel.asm	/^ffff800000109173:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff80000010917a	kernel.asm	/^ffff80000010917a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010917d	kernel.asm	/^ffff80000010917d:	75 31                	jne    ffff8000001091b0 <sys_exec+0x10b>$/;"	l
ffff80000010917f	kernel.asm	/^ffff80000010917f:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109182	kernel.asm	/^ffff800000109182:	48 98                	cltq   $/;"	l
ffff800000109184	kernel.asm	/^ffff800000109184:	48 c7 84 c5 f0 fe ff 	movq   $0x0,-0x110(%rbp,%rax,8)$/;"	l
ffff80000010918b	kernel.asm	/^ffff80000010918b:	ff 00 00 00 00 $/;"	l
ffff800000109190	kernel.asm	/^ffff800000109190:	90                   	nop$/;"	l
ffff800000109191	kernel.asm	/^ffff800000109191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff800000109195	kernel.asm	/^ffff800000109195:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx$/;"	l
ffff80000010919c	kernel.asm	/^ffff80000010919c:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010919f	kernel.asm	/^ffff80000010919f:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001091a2	kernel.asm	/^ffff8000001091a2:	48 b8 fb 15 10 00 00 	movabs $0xffff8000001015fb,%rax$/;"	l
ffff8000001091a9	kernel.asm	/^ffff8000001091a9:	80 ff ff $/;"	l
ffff8000001091ac	kernel.asm	/^ffff8000001091ac:	ff d0                	callq  *%rax$/;"	l
ffff8000001091ae	kernel.asm	/^ffff8000001091ae:	eb 41                	jmp    ffff8000001091f1 <sys_exec+0x14c>$/;"	l
ffff8000001091b0	kernel.asm	/^ffff8000001091b0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax$/;"	l
ffff8000001091b7	kernel.asm	/^ffff8000001091b7:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001091ba	kernel.asm	/^ffff8000001091ba:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001091bd	kernel.asm	/^ffff8000001091bd:	48 c1 e2 03          	shl    $0x3,%rdx$/;"	l
ffff8000001091c1	kernel.asm	/^ffff8000001091c1:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff8000001091c4	kernel.asm	/^ffff8000001091c4:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax$/;"	l
ffff8000001091cb	kernel.asm	/^ffff8000001091cb:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff8000001091ce	kernel.asm	/^ffff8000001091ce:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001091d1	kernel.asm	/^ffff8000001091d1:	48 b8 7f 7c 10 00 00 	movabs $0xffff800000107c7f,%rax$/;"	l
ffff8000001091d8	kernel.asm	/^ffff8000001091d8:	80 ff ff $/;"	l
ffff8000001091db	kernel.asm	/^ffff8000001091db:	ff d0                	callq  *%rax$/;"	l
ffff8000001091dd	kernel.asm	/^ffff8000001091dd:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001091df	kernel.asm	/^ffff8000001091df:	79 07                	jns    ffff8000001091e8 <sys_exec+0x143>$/;"	l
ffff8000001091e1	kernel.asm	/^ffff8000001091e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001091e6	kernel.asm	/^ffff8000001091e6:	eb 09                	jmp    ffff8000001091f1 <sys_exec+0x14c>$/;"	l
ffff8000001091e8	kernel.asm	/^ffff8000001091e8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff8000001091ec	kernel.asm	/^ffff8000001091ec:	e9 30 ff ff ff       	jmpq   ffff800000109121 <sys_exec+0x7c>$/;"	l
ffff8000001091f1	kernel.asm	/^ffff8000001091f1:	c9                   	leaveq $/;"	l
ffff8000001091f2	kernel.asm	/^ffff8000001091f2:	c3                   	retq   $/;"	l
ffff8000001091f3	kernel.asm	/^ffff8000001091f3 <sys_pipe>:$/;"	l
ffff8000001091f3	kernel.asm	/^ffff8000001091f3:	55                   	push   %rbp$/;"	l
ffff8000001091f4	kernel.asm	/^ffff8000001091f4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001091f7	kernel.asm	/^ffff8000001091f7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001091fb	kernel.asm	/^ffff8000001091fb:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001091ff	kernel.asm	/^ffff8000001091ff:	ba 08 00 00 00       	mov    $0x8,%edx$/;"	l
ffff800000109204	kernel.asm	/^ffff800000109204:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109207	kernel.asm	/^ffff800000109207:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010920c	kernel.asm	/^ffff80000010920c:	48 b8 30 7e 10 00 00 	movabs $0xffff800000107e30,%rax$/;"	l
ffff800000109213	kernel.asm	/^ffff800000109213:	80 ff ff $/;"	l
ffff800000109216	kernel.asm	/^ffff800000109216:	ff d0                	callq  *%rax$/;"	l
ffff800000109218	kernel.asm	/^ffff800000109218:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010921a	kernel.asm	/^ffff80000010921a:	79 0a                	jns    ffff800000109226 <sys_pipe+0x33>$/;"	l
ffff80000010921c	kernel.asm	/^ffff80000010921c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109221	kernel.asm	/^ffff800000109221:	e9 d3 00 00 00       	jmpq   ffff8000001092f9 <sys_pipe+0x106>$/;"	l
ffff800000109226	kernel.asm	/^ffff800000109226:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx$/;"	l
ffff80000010922a	kernel.asm	/^ffff80000010922a:	48 8d 45 e8          	lea    -0x18(%rbp),%rax$/;"	l
ffff80000010922e	kernel.asm	/^ffff80000010922e:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff800000109231	kernel.asm	/^ffff800000109231:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109234	kernel.asm	/^ffff800000109234:	48 b8 42 5d 10 00 00 	movabs $0xffff800000105d42,%rax$/;"	l
ffff80000010923b	kernel.asm	/^ffff80000010923b:	80 ff ff $/;"	l
ffff80000010923e	kernel.asm	/^ffff80000010923e:	ff d0                	callq  *%rax$/;"	l
ffff800000109240	kernel.asm	/^ffff800000109240:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109242	kernel.asm	/^ffff800000109242:	79 0a                	jns    ffff80000010924e <sys_pipe+0x5b>$/;"	l
ffff800000109244	kernel.asm	/^ffff800000109244:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109249	kernel.asm	/^ffff800000109249:	e9 ab 00 00 00       	jmpq   ffff8000001092f9 <sys_pipe+0x106>$/;"	l
ffff80000010924e	kernel.asm	/^ffff80000010924e:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%rbp)$/;"	l
ffff800000109255	kernel.asm	/^ffff800000109255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109259	kernel.asm	/^ffff800000109259:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010925c	kernel.asm	/^ffff80000010925c:	48 b8 7e 80 10 00 00 	movabs $0xffff80000010807e,%rax$/;"	l
ffff800000109263	kernel.asm	/^ffff800000109263:	80 ff ff $/;"	l
ffff800000109266	kernel.asm	/^ffff800000109266:	ff d0                	callq  *%rax$/;"	l
ffff800000109268	kernel.asm	/^ffff800000109268:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff80000010926b	kernel.asm	/^ffff80000010926b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010926f	kernel.asm	/^ffff80000010926f:	78 1c                	js     ffff80000010928d <sys_pipe+0x9a>$/;"	l
ffff800000109271	kernel.asm	/^ffff800000109271:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff800000109275	kernel.asm	/^ffff800000109275:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109278	kernel.asm	/^ffff800000109278:	48 b8 7e 80 10 00 00 	movabs $0xffff80000010807e,%rax$/;"	l
ffff80000010927f	kernel.asm	/^ffff80000010927f:	80 ff ff $/;"	l
ffff800000109282	kernel.asm	/^ffff800000109282:	ff d0                	callq  *%rax$/;"	l
ffff800000109284	kernel.asm	/^ffff800000109284:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff800000109287	kernel.asm	/^ffff800000109287:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010928b	kernel.asm	/^ffff80000010928b:	79 51                	jns    ffff8000001092de <sys_pipe+0xeb>$/;"	l
ffff80000010928d	kernel.asm	/^ffff80000010928d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109291	kernel.asm	/^ffff800000109291:	78 1e                	js     ffff8000001092b1 <sys_pipe+0xbe>$/;"	l
ffff800000109293	kernel.asm	/^ffff800000109293:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010929a	kernel.asm	/^ffff80000010929a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010929e	kernel.asm	/^ffff80000010929e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001092a1	kernel.asm	/^ffff8000001092a1:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff8000001092a4	kernel.asm	/^ffff8000001092a4:	48 83 c2 08          	add    $0x8,%rdx$/;"	l
ffff8000001092a8	kernel.asm	/^ffff8000001092a8:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)$/;"	l
ffff8000001092af	kernel.asm	/^ffff8000001092af:	00 00 $/;"	l
ffff8000001092b1	kernel.asm	/^ffff8000001092b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001092b5	kernel.asm	/^ffff8000001092b5:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001092b8	kernel.asm	/^ffff8000001092b8:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff8000001092bf	kernel.asm	/^ffff8000001092bf:	80 ff ff $/;"	l
ffff8000001092c2	kernel.asm	/^ffff8000001092c2:	ff d0                	callq  *%rax$/;"	l
ffff8000001092c4	kernel.asm	/^ffff8000001092c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff8000001092c8	kernel.asm	/^ffff8000001092c8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001092cb	kernel.asm	/^ffff8000001092cb:	48 b8 44 1d 10 00 00 	movabs $0xffff800000101d44,%rax$/;"	l
ffff8000001092d2	kernel.asm	/^ffff8000001092d2:	80 ff ff $/;"	l
ffff8000001092d5	kernel.asm	/^ffff8000001092d5:	ff d0                	callq  *%rax$/;"	l
ffff8000001092d7	kernel.asm	/^ffff8000001092d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001092dc	kernel.asm	/^ffff8000001092dc:	eb 1b                	jmp    ffff8000001092f9 <sys_pipe+0x106>$/;"	l
ffff8000001092de	kernel.asm	/^ffff8000001092de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001092e2	kernel.asm	/^ffff8000001092e2:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff8000001092e5	kernel.asm	/^ffff8000001092e5:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001092e7	kernel.asm	/^ffff8000001092e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff8000001092eb	kernel.asm	/^ffff8000001092eb:	48 8d 50 04          	lea    0x4(%rax),%rdx$/;"	l
ffff8000001092ef	kernel.asm	/^ffff8000001092ef:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001092f2	kernel.asm	/^ffff8000001092f2:	89 02                	mov    %eax,(%rdx)$/;"	l
ffff8000001092f4	kernel.asm	/^ffff8000001092f4:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001092f9	kernel.asm	/^ffff8000001092f9:	c9                   	leaveq $/;"	l
ffff8000001092fa	kernel.asm	/^ffff8000001092fa:	c3                   	retq   $/;"	l
ffff8000001092fb	kernel.asm	/^ffff8000001092fb <sys_fork>:$/;"	l
ffff8000001092fb	kernel.asm	/^ffff8000001092fb:	55                   	push   %rbp$/;"	l
ffff8000001092fc	kernel.asm	/^ffff8000001092fc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001092ff	kernel.asm	/^ffff8000001092ff:	48 b8 88 66 10 00 00 	movabs $0xffff800000106688,%rax$/;"	l
ffff800000109306	kernel.asm	/^ffff800000109306:	80 ff ff $/;"	l
ffff800000109309	kernel.asm	/^ffff800000109309:	ff d0                	callq  *%rax$/;"	l
ffff80000010930b	kernel.asm	/^ffff80000010930b:	5d                   	pop    %rbp$/;"	l
ffff80000010930c	kernel.asm	/^ffff80000010930c:	c3                   	retq   $/;"	l
ffff80000010930d	kernel.asm	/^ffff80000010930d <sys_exit>:$/;"	l
ffff80000010930d	kernel.asm	/^ffff80000010930d:	55                   	push   %rbp$/;"	l
ffff80000010930e	kernel.asm	/^ffff80000010930e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109311	kernel.asm	/^ffff800000109311:	48 b8 a9 68 10 00 00 	movabs $0xffff8000001068a9,%rax$/;"	l
ffff800000109318	kernel.asm	/^ffff800000109318:	80 ff ff $/;"	l
ffff80000010931b	kernel.asm	/^ffff80000010931b:	ff d0                	callq  *%rax$/;"	l
ffff80000010931d	kernel.asm	/^ffff80000010931d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109322	kernel.asm	/^ffff800000109322:	5d                   	pop    %rbp$/;"	l
ffff800000109323	kernel.asm	/^ffff800000109323:	c3                   	retq   $/;"	l
ffff800000109324	kernel.asm	/^ffff800000109324 <sys_wait>:$/;"	l
ffff800000109324	kernel.asm	/^ffff800000109324:	55                   	push   %rbp$/;"	l
ffff800000109325	kernel.asm	/^ffff800000109325:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109328	kernel.asm	/^ffff800000109328:	48 b8 9b 6a 10 00 00 	movabs $0xffff800000106a9b,%rax$/;"	l
ffff80000010932f	kernel.asm	/^ffff80000010932f:	80 ff ff $/;"	l
ffff800000109332	kernel.asm	/^ffff800000109332:	ff d0                	callq  *%rax$/;"	l
ffff800000109334	kernel.asm	/^ffff800000109334:	5d                   	pop    %rbp$/;"	l
ffff800000109335	kernel.asm	/^ffff800000109335:	c3                   	retq   $/;"	l
ffff800000109336	kernel.asm	/^ffff800000109336 <sys_kill>:$/;"	l
ffff800000109336	kernel.asm	/^ffff800000109336:	55                   	push   %rbp$/;"	l
ffff800000109337	kernel.asm	/^ffff800000109337:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010933a	kernel.asm	/^ffff80000010933a:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010933e	kernel.asm	/^ffff80000010933e:	48 8d 45 fc          	lea    -0x4(%rbp),%rax$/;"	l
ffff800000109342	kernel.asm	/^ffff800000109342:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109345	kernel.asm	/^ffff800000109345:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010934a	kernel.asm	/^ffff80000010934a:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000109351	kernel.asm	/^ffff800000109351:	80 ff ff $/;"	l
ffff800000109354	kernel.asm	/^ffff800000109354:	ff d0                	callq  *%rax$/;"	l
ffff800000109356	kernel.asm	/^ffff800000109356:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109358	kernel.asm	/^ffff800000109358:	79 07                	jns    ffff800000109361 <sys_kill+0x2b>$/;"	l
ffff80000010935a	kernel.asm	/^ffff80000010935a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010935f	kernel.asm	/^ffff80000010935f:	eb 11                	jmp    ffff800000109372 <sys_kill+0x3c>$/;"	l
ffff800000109361	kernel.asm	/^ffff800000109361:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109364	kernel.asm	/^ffff800000109364:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109366	kernel.asm	/^ffff800000109366:	48 b8 a6 70 10 00 00 	movabs $0xffff8000001070a6,%rax$/;"	l
ffff80000010936d	kernel.asm	/^ffff80000010936d:	80 ff ff $/;"	l
ffff800000109370	kernel.asm	/^ffff800000109370:	ff d0                	callq  *%rax$/;"	l
ffff800000109372	kernel.asm	/^ffff800000109372:	c9                   	leaveq $/;"	l
ffff800000109373	kernel.asm	/^ffff800000109373:	c3                   	retq   $/;"	l
ffff800000109374	kernel.asm	/^ffff800000109374 <sys_getpid>:$/;"	l
ffff800000109374	kernel.asm	/^ffff800000109374:	55                   	push   %rbp$/;"	l
ffff800000109375	kernel.asm	/^ffff800000109375:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109378	kernel.asm	/^ffff800000109378:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010937f	kernel.asm	/^ffff80000010937f:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109383	kernel.asm	/^ffff800000109383:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109386	kernel.asm	/^ffff800000109386:	5d                   	pop    %rbp$/;"	l
ffff800000109387	kernel.asm	/^ffff800000109387:	c3                   	retq   $/;"	l
ffff800000109388	kernel.asm	/^ffff800000109388 <sys_sbrk>:$/;"	l
ffff800000109388	kernel.asm	/^ffff800000109388:	55                   	push   %rbp$/;"	l
ffff800000109389	kernel.asm	/^ffff800000109389:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010938c	kernel.asm	/^ffff80000010938c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109390	kernel.asm	/^ffff800000109390:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff800000109394	kernel.asm	/^ffff800000109394:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109397	kernel.asm	/^ffff800000109397:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010939c	kernel.asm	/^ffff80000010939c:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff8000001093a3	kernel.asm	/^ffff8000001093a3:	80 ff ff $/;"	l
ffff8000001093a6	kernel.asm	/^ffff8000001093a6:	ff d0                	callq  *%rax$/;"	l
ffff8000001093a8	kernel.asm	/^ffff8000001093a8:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001093aa	kernel.asm	/^ffff8000001093aa:	79 07                	jns    ffff8000001093b3 <sys_sbrk+0x2b>$/;"	l
ffff8000001093ac	kernel.asm	/^ffff8000001093ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001093b1	kernel.asm	/^ffff8000001093b1:	eb 30                	jmp    ffff8000001093e3 <sys_sbrk+0x5b>$/;"	l
ffff8000001093b3	kernel.asm	/^ffff8000001093b3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001093ba	kernel.asm	/^ffff8000001093ba:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001093be	kernel.asm	/^ffff8000001093be:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001093c1	kernel.asm	/^ffff8000001093c1:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001093c4	kernel.asm	/^ffff8000001093c4:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff8000001093c7	kernel.asm	/^ffff8000001093c7:	89 c7                	mov    %eax,%edi$/;"	l
ffff8000001093c9	kernel.asm	/^ffff8000001093c9:	48 b8 b5 65 10 00 00 	movabs $0xffff8000001065b5,%rax$/;"	l
ffff8000001093d0	kernel.asm	/^ffff8000001093d0:	80 ff ff $/;"	l
ffff8000001093d3	kernel.asm	/^ffff8000001093d3:	ff d0                	callq  *%rax$/;"	l
ffff8000001093d5	kernel.asm	/^ffff8000001093d5:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001093d7	kernel.asm	/^ffff8000001093d7:	79 07                	jns    ffff8000001093e0 <sys_sbrk+0x58>$/;"	l
ffff8000001093d9	kernel.asm	/^ffff8000001093d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff8000001093de	kernel.asm	/^ffff8000001093de:	eb 03                	jmp    ffff8000001093e3 <sys_sbrk+0x5b>$/;"	l
ffff8000001093e0	kernel.asm	/^ffff8000001093e0:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff8000001093e3	kernel.asm	/^ffff8000001093e3:	c9                   	leaveq $/;"	l
ffff8000001093e4	kernel.asm	/^ffff8000001093e4:	c3                   	retq   $/;"	l
ffff8000001093e5	kernel.asm	/^ffff8000001093e5 <sys_sleep>:$/;"	l
ffff8000001093e5	kernel.asm	/^ffff8000001093e5:	55                   	push   %rbp$/;"	l
ffff8000001093e6	kernel.asm	/^ffff8000001093e6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001093e9	kernel.asm	/^ffff8000001093e9:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001093ed	kernel.asm	/^ffff8000001093ed:	48 8d 45 f8          	lea    -0x8(%rbp),%rax$/;"	l
ffff8000001093f1	kernel.asm	/^ffff8000001093f1:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff8000001093f4	kernel.asm	/^ffff8000001093f4:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff8000001093f9	kernel.asm	/^ffff8000001093f9:	48 b8 d0 7d 10 00 00 	movabs $0xffff800000107dd0,%rax$/;"	l
ffff800000109400	kernel.asm	/^ffff800000109400:	80 ff ff $/;"	l
ffff800000109403	kernel.asm	/^ffff800000109403:	ff d0                	callq  *%rax$/;"	l
ffff800000109405	kernel.asm	/^ffff800000109405:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109407	kernel.asm	/^ffff800000109407:	79 0a                	jns    ffff800000109413 <sys_sleep+0x2e>$/;"	l
ffff800000109409	kernel.asm	/^ffff800000109409:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010940e	kernel.asm	/^ffff80000010940e:	e9 a7 00 00 00       	jmpq   ffff8000001094ba <sys_sleep+0xd5>$/;"	l
ffff800000109413	kernel.asm	/^ffff800000109413:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff80000010941a	kernel.asm	/^ffff80000010941a:	80 ff ff $/;"	l
ffff80000010941d	kernel.asm	/^ffff80000010941d:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff800000109424	kernel.asm	/^ffff800000109424:	80 ff ff $/;"	l
ffff800000109427	kernel.asm	/^ffff800000109427:	ff d0                	callq  *%rax$/;"	l
ffff800000109429	kernel.asm	/^ffff800000109429:	48 b8 28 e4 11 00 00 	movabs $0xffff80000011e428,%rax$/;"	l
ffff800000109430	kernel.asm	/^ffff800000109430:	80 ff ff $/;"	l
ffff800000109433	kernel.asm	/^ffff800000109433:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109435	kernel.asm	/^ffff800000109435:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff800000109438	kernel.asm	/^ffff800000109438:	eb 4f                	jmp    ffff800000109489 <sys_sleep+0xa4>$/;"	l
ffff80000010943a	kernel.asm	/^ffff80000010943a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109441	kernel.asm	/^ffff800000109441:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109445	kernel.asm	/^ffff800000109445:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109448	kernel.asm	/^ffff800000109448:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010944a	kernel.asm	/^ffff80000010944a:	74 1d                	je     ffff800000109469 <sys_sleep+0x84>$/;"	l
ffff80000010944c	kernel.asm	/^ffff80000010944c:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff800000109453	kernel.asm	/^ffff800000109453:	80 ff ff $/;"	l
ffff800000109456	kernel.asm	/^ffff800000109456:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010945d	kernel.asm	/^ffff80000010945d:	80 ff ff $/;"	l
ffff800000109460	kernel.asm	/^ffff800000109460:	ff d0                	callq  *%rax$/;"	l
ffff800000109462	kernel.asm	/^ffff800000109462:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109467	kernel.asm	/^ffff800000109467:	eb 51                	jmp    ffff8000001094ba <sys_sleep+0xd5>$/;"	l
ffff800000109469	kernel.asm	/^ffff800000109469:	48 be c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rsi$/;"	l
ffff800000109470	kernel.asm	/^ffff800000109470:	80 ff ff $/;"	l
ffff800000109473	kernel.asm	/^ffff800000109473:	48 bf 28 e4 11 00 00 	movabs $0xffff80000011e428,%rdi$/;"	l
ffff80000010947a	kernel.asm	/^ffff80000010947a:	80 ff ff $/;"	l
ffff80000010947d	kernel.asm	/^ffff80000010947d:	48 b8 f0 6e 10 00 00 	movabs $0xffff800000106ef0,%rax$/;"	l
ffff800000109484	kernel.asm	/^ffff800000109484:	80 ff ff $/;"	l
ffff800000109487	kernel.asm	/^ffff800000109487:	ff d0                	callq  *%rax$/;"	l
ffff800000109489	kernel.asm	/^ffff800000109489:	48 b8 28 e4 11 00 00 	movabs $0xffff80000011e428,%rax$/;"	l
ffff800000109490	kernel.asm	/^ffff800000109490:	80 ff ff $/;"	l
ffff800000109493	kernel.asm	/^ffff800000109493:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109495	kernel.asm	/^ffff800000109495:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff800000109498	kernel.asm	/^ffff800000109498:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010949b	kernel.asm	/^ffff80000010949b:	39 d0                	cmp    %edx,%eax$/;"	l
ffff80000010949d	kernel.asm	/^ffff80000010949d:	72 9b                	jb     ffff80000010943a <sys_sleep+0x55>$/;"	l
ffff80000010949f	kernel.asm	/^ffff80000010949f:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff8000001094a6	kernel.asm	/^ffff8000001094a6:	80 ff ff $/;"	l
ffff8000001094a9	kernel.asm	/^ffff8000001094a9:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001094b0	kernel.asm	/^ffff8000001094b0:	80 ff ff $/;"	l
ffff8000001094b3	kernel.asm	/^ffff8000001094b3:	ff d0                	callq  *%rax$/;"	l
ffff8000001094b5	kernel.asm	/^ffff8000001094b5:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001094ba	kernel.asm	/^ffff8000001094ba:	c9                   	leaveq $/;"	l
ffff8000001094bb	kernel.asm	/^ffff8000001094bb:	c3                   	retq   $/;"	l
ffff8000001094bc	kernel.asm	/^ffff8000001094bc <sys_uptime>:$/;"	l
ffff8000001094bc	kernel.asm	/^ffff8000001094bc:	55                   	push   %rbp$/;"	l
ffff8000001094bd	kernel.asm	/^ffff8000001094bd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001094c0	kernel.asm	/^ffff8000001094c0:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001094c4	kernel.asm	/^ffff8000001094c4:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff8000001094cb	kernel.asm	/^ffff8000001094cb:	80 ff ff $/;"	l
ffff8000001094ce	kernel.asm	/^ffff8000001094ce:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001094d5	kernel.asm	/^ffff8000001094d5:	80 ff ff $/;"	l
ffff8000001094d8	kernel.asm	/^ffff8000001094d8:	ff d0                	callq  *%rax$/;"	l
ffff8000001094da	kernel.asm	/^ffff8000001094da:	48 b8 28 e4 11 00 00 	movabs $0xffff80000011e428,%rax$/;"	l
ffff8000001094e1	kernel.asm	/^ffff8000001094e1:	80 ff ff $/;"	l
ffff8000001094e4	kernel.asm	/^ffff8000001094e4:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001094e6	kernel.asm	/^ffff8000001094e6:	89 45 fc             	mov    %eax,-0x4(%rbp)$/;"	l
ffff8000001094e9	kernel.asm	/^ffff8000001094e9:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff8000001094f0	kernel.asm	/^ffff8000001094f0:	80 ff ff $/;"	l
ffff8000001094f3	kernel.asm	/^ffff8000001094f3:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff8000001094fa	kernel.asm	/^ffff8000001094fa:	80 ff ff $/;"	l
ffff8000001094fd	kernel.asm	/^ffff8000001094fd:	ff d0                	callq  *%rax$/;"	l
ffff8000001094ff	kernel.asm	/^ffff8000001094ff:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff800000109502	kernel.asm	/^ffff800000109502:	c9                   	leaveq $/;"	l
ffff800000109503	kernel.asm	/^ffff800000109503:	c3                   	retq   $/;"	l
ffff800000109504	kernel.asm	/^ffff800000109504 <alltraps>:$/;"	l
ffff800000109504	kernel.asm	/^ffff800000109504:	41 57                	push   %r15$/;"	l
ffff800000109506	kernel.asm	/^ffff800000109506:	41 56                	push   %r14$/;"	l
ffff800000109508	kernel.asm	/^ffff800000109508:	41 55                	push   %r13$/;"	l
ffff80000010950a	kernel.asm	/^ffff80000010950a:	41 54                	push   %r12$/;"	l
ffff80000010950c	kernel.asm	/^ffff80000010950c:	41 53                	push   %r11$/;"	l
ffff80000010950e	kernel.asm	/^ffff80000010950e:	41 52                	push   %r10$/;"	l
ffff800000109510	kernel.asm	/^ffff800000109510:	41 51                	push   %r9$/;"	l
ffff800000109512	kernel.asm	/^ffff800000109512:	41 50                	push   %r8$/;"	l
ffff800000109514	kernel.asm	/^ffff800000109514:	57                   	push   %rdi$/;"	l
ffff800000109515	kernel.asm	/^ffff800000109515:	56                   	push   %rsi$/;"	l
ffff800000109516	kernel.asm	/^ffff800000109516:	55                   	push   %rbp$/;"	l
ffff800000109517	kernel.asm	/^ffff800000109517:	52                   	push   %rdx$/;"	l
ffff800000109518	kernel.asm	/^ffff800000109518:	51                   	push   %rcx$/;"	l
ffff800000109519	kernel.asm	/^ffff800000109519:	53                   	push   %rbx$/;"	l
ffff80000010951a	kernel.asm	/^ffff80000010951a:	50                   	push   %rax$/;"	l
ffff80000010951b	kernel.asm	/^ffff80000010951b:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff80000010951e	kernel.asm	/^ffff80000010951e:	e8 c2 02 00 00       	callq  ffff8000001097e5 <trap>$/;"	l
ffff800000109523	kernel.asm	/^ffff800000109523 <trapret>:$/;"	l
ffff800000109523	kernel.asm	/^ffff800000109523:	58                   	pop    %rax$/;"	l
ffff800000109524	kernel.asm	/^ffff800000109524:	5b                   	pop    %rbx$/;"	l
ffff800000109525	kernel.asm	/^ffff800000109525:	59                   	pop    %rcx$/;"	l
ffff800000109526	kernel.asm	/^ffff800000109526:	5a                   	pop    %rdx$/;"	l
ffff800000109527	kernel.asm	/^ffff800000109527:	5d                   	pop    %rbp$/;"	l
ffff800000109528	kernel.asm	/^ffff800000109528:	5e                   	pop    %rsi$/;"	l
ffff800000109529	kernel.asm	/^ffff800000109529:	5f                   	pop    %rdi$/;"	l
ffff80000010952a	kernel.asm	/^ffff80000010952a:	41 58                	pop    %r8$/;"	l
ffff80000010952c	kernel.asm	/^ffff80000010952c:	41 59                	pop    %r9$/;"	l
ffff80000010952e	kernel.asm	/^ffff80000010952e:	41 5a                	pop    %r10$/;"	l
ffff800000109530	kernel.asm	/^ffff800000109530:	41 5b                	pop    %r11$/;"	l
ffff800000109532	kernel.asm	/^ffff800000109532:	41 5c                	pop    %r12$/;"	l
ffff800000109534	kernel.asm	/^ffff800000109534:	41 5d                	pop    %r13$/;"	l
ffff800000109536	kernel.asm	/^ffff800000109536:	41 5e                	pop    %r14$/;"	l
ffff800000109538	kernel.asm	/^ffff800000109538:	41 5f                	pop    %r15$/;"	l
ffff80000010953a	kernel.asm	/^ffff80000010953a:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff80000010953e	kernel.asm	/^ffff80000010953e:	48 cf                	iretq  $/;"	l
ffff800000109540	kernel.asm	/^ffff800000109540 <syscall_trap>:$/;"	l
ffff800000109540	kernel.asm	/^ffff800000109540:	41 57                	push   %r15$/;"	l
ffff800000109542	kernel.asm	/^ffff800000109542:	41 56                	push   %r14$/;"	l
ffff800000109544	kernel.asm	/^ffff800000109544:	41 55                	push   %r13$/;"	l
ffff800000109546	kernel.asm	/^ffff800000109546:	41 54                	push   %r12$/;"	l
ffff800000109548	kernel.asm	/^ffff800000109548:	41 53                	push   %r11$/;"	l
ffff80000010954a	kernel.asm	/^ffff80000010954a:	41 52                	push   %r10$/;"	l
ffff80000010954c	kernel.asm	/^ffff80000010954c:	41 51                	push   %r9$/;"	l
ffff80000010954e	kernel.asm	/^ffff80000010954e:	41 50                	push   %r8$/;"	l
ffff800000109550	kernel.asm	/^ffff800000109550:	57                   	push   %rdi$/;"	l
ffff800000109551	kernel.asm	/^ffff800000109551:	56                   	push   %rsi$/;"	l
ffff800000109552	kernel.asm	/^ffff800000109552:	55                   	push   %rbp$/;"	l
ffff800000109553	kernel.asm	/^ffff800000109553:	52                   	push   %rdx$/;"	l
ffff800000109554	kernel.asm	/^ffff800000109554:	51                   	push   %rcx$/;"	l
ffff800000109555	kernel.asm	/^ffff800000109555:	53                   	push   %rbx$/;"	l
ffff800000109556	kernel.asm	/^ffff800000109556:	50                   	push   %rax$/;"	l
ffff800000109557	kernel.asm	/^ffff800000109557:	48 89 e7             	mov    %rsp,%rdi$/;"	l
ffff80000010955a	kernel.asm	/^ffff80000010955a:	e8 86 02 00 00       	callq  ffff8000001097e5 <trap>$/;"	l
ffff80000010955f	kernel.asm	/^ffff80000010955f <syscall_trapret>:$/;"	l
ffff80000010955f	kernel.asm	/^ffff80000010955f:	58                   	pop    %rax$/;"	l
ffff800000109560	kernel.asm	/^ffff800000109560:	5b                   	pop    %rbx$/;"	l
ffff800000109561	kernel.asm	/^ffff800000109561:	59                   	pop    %rcx$/;"	l
ffff800000109562	kernel.asm	/^ffff800000109562:	5a                   	pop    %rdx$/;"	l
ffff800000109563	kernel.asm	/^ffff800000109563:	5d                   	pop    %rbp$/;"	l
ffff800000109564	kernel.asm	/^ffff800000109564:	5e                   	pop    %rsi$/;"	l
ffff800000109565	kernel.asm	/^ffff800000109565:	5f                   	pop    %rdi$/;"	l
ffff800000109566	kernel.asm	/^ffff800000109566:	41 58                	pop    %r8$/;"	l
ffff800000109568	kernel.asm	/^ffff800000109568:	41 59                	pop    %r9$/;"	l
ffff80000010956a	kernel.asm	/^ffff80000010956a:	41 5a                	pop    %r10$/;"	l
ffff80000010956c	kernel.asm	/^ffff80000010956c:	41 5b                	pop    %r11$/;"	l
ffff80000010956e	kernel.asm	/^ffff80000010956e:	41 5c                	pop    %r12$/;"	l
ffff800000109570	kernel.asm	/^ffff800000109570:	41 5d                	pop    %r13$/;"	l
ffff800000109572	kernel.asm	/^ffff800000109572:	41 5e                	pop    %r14$/;"	l
ffff800000109574	kernel.asm	/^ffff800000109574:	41 5f                	pop    %r15$/;"	l
ffff800000109576	kernel.asm	/^ffff800000109576:	48 83 c4 28          	add    $0x28,%rsp$/;"	l
ffff80000010957a	kernel.asm	/^ffff80000010957a:	48 8b 24 24          	mov    (%rsp),%rsp$/;"	l
ffff80000010957e	kernel.asm	/^ffff80000010957e:	48 0f 07             	sysretq $/;"	l
ffff800000109581	kernel.asm	/^ffff800000109581 <lidt>:$/;"	l
ffff800000109581	kernel.asm	/^ffff800000109581:	55                   	push   %rbp$/;"	l
ffff800000109582	kernel.asm	/^ffff800000109582:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109585	kernel.asm	/^ffff800000109585:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109589	kernel.asm	/^ffff800000109589:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010958d	kernel.asm	/^ffff80000010958d:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff800000109590	kernel.asm	/^ffff800000109590:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000109593	kernel.asm	/^ffff800000109593:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff800000109596	kernel.asm	/^ffff800000109596:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff80000010959a	kernel.asm	/^ffff80000010959a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010959e	kernel.asm	/^ffff80000010959e:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff8000001095a2	kernel.asm	/^ffff8000001095a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001095a6	kernel.asm	/^ffff8000001095a6:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff8000001095aa	kernel.asm	/^ffff8000001095aa:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff8000001095ae	kernel.asm	/^ffff8000001095ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001095b2	kernel.asm	/^ffff8000001095b2:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff8000001095b6	kernel.asm	/^ffff8000001095b6:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff8000001095ba	kernel.asm	/^ffff8000001095ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001095be	kernel.asm	/^ffff8000001095be:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff8000001095c2	kernel.asm	/^ffff8000001095c2:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff8000001095c6	kernel.asm	/^ffff8000001095c6:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff8000001095ca	kernel.asm	/^ffff8000001095ca:	0f 01 18             	lidt   (%rax)$/;"	l
ffff8000001095cd	kernel.asm	/^ffff8000001095cd:	90                   	nop$/;"	l
ffff8000001095ce	kernel.asm	/^ffff8000001095ce:	c9                   	leaveq $/;"	l
ffff8000001095cf	kernel.asm	/^ffff8000001095cf:	c3                   	retq   $/;"	l
ffff8000001095d0	kernel.asm	/^ffff8000001095d0 <rcr2>:$/;"	l
ffff8000001095d0	kernel.asm	/^ffff8000001095d0:	55                   	push   %rbp$/;"	l
ffff8000001095d1	kernel.asm	/^ffff8000001095d1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001095d4	kernel.asm	/^ffff8000001095d4:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff8000001095d8	kernel.asm	/^ffff8000001095d8:	0f 20 d0             	mov    %cr2,%rax$/;"	l
ffff8000001095db	kernel.asm	/^ffff8000001095db:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff8000001095df	kernel.asm	/^ffff8000001095df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff8000001095e3	kernel.asm	/^ffff8000001095e3:	c9                   	leaveq $/;"	l
ffff8000001095e4	kernel.asm	/^ffff8000001095e4:	c3                   	retq   $/;"	l
ffff8000001095e5	kernel.asm	/^ffff8000001095e5 <mkgate>:$/;"	l
ffff8000001095e5	kernel.asm	/^ffff8000001095e5:	55                   	push   %rbp$/;"	l
ffff8000001095e6	kernel.asm	/^ffff8000001095e6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001095e9	kernel.asm	/^ffff8000001095e9:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff8000001095ed	kernel.asm	/^ffff8000001095ed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff8000001095f1	kernel.asm	/^ffff8000001095f1:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff8000001095f4	kernel.asm	/^ffff8000001095f4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)$/;"	l
ffff8000001095f8	kernel.asm	/^ffff8000001095f8:	89 4d e0             	mov    %ecx,-0x20(%rbp)$/;"	l
ffff8000001095fb	kernel.asm	/^ffff8000001095fb:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)$/;"	l
ffff8000001095ff	kernel.asm	/^ffff8000001095ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109603	kernel.asm	/^ffff800000109603:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109607	kernel.asm	/^ffff800000109607:	c1 65 e4 02          	shll   $0x2,-0x1c(%rbp)$/;"	l
ffff80000010960b	kernel.asm	/^ffff80000010960b:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010960e	kernel.asm	/^ffff80000010960e:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109615	kernel.asm	/^ffff800000109615:	00 $/;"	l
ffff800000109616	kernel.asm	/^ffff800000109616:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010961a	kernel.asm	/^ffff80000010961a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010961d	kernel.asm	/^ffff80000010961d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000109621	kernel.asm	/^ffff800000109621:	0f b7 d2             	movzwl %dx,%edx$/;"	l
ffff800000109624	kernel.asm	/^ffff800000109624:	81 ca 00 00 08 00    	or     $0x80000,%edx$/;"	l
ffff80000010962a	kernel.asm	/^ffff80000010962a:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010962c	kernel.asm	/^ffff80000010962c:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010962f	kernel.asm	/^ffff80000010962f:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000109632	kernel.asm	/^ffff800000109632:	89 c0                	mov    %eax,%eax$/;"	l
ffff800000109634	kernel.asm	/^ffff800000109634:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010963b	kernel.asm	/^ffff80000010963b:	00 $/;"	l
ffff80000010963c	kernel.asm	/^ffff80000010963c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109640	kernel.asm	/^ffff800000109640:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff800000109643	kernel.asm	/^ffff800000109643:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff800000109647	kernel.asm	/^ffff800000109647:	89 d1                	mov    %edx,%ecx$/;"	l
ffff800000109649	kernel.asm	/^ffff800000109649:	66 b9 00 00          	mov    $0x0,%cx$/;"	l
ffff80000010964d	kernel.asm	/^ffff80000010964d:	8b 55 e0             	mov    -0x20(%rbp),%edx$/;"	l
ffff800000109650	kernel.asm	/^ffff800000109650:	83 e2 03             	and    $0x3,%edx$/;"	l
ffff800000109653	kernel.asm	/^ffff800000109653:	c1 e2 0d             	shl    $0xd,%edx$/;"	l
ffff800000109656	kernel.asm	/^ffff800000109656:	09 ca                	or     %ecx,%edx$/;"	l
ffff800000109658	kernel.asm	/^ffff800000109658:	80 ce 8e             	or     $0x8e,%dh$/;"	l
ffff80000010965b	kernel.asm	/^ffff80000010965b:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010965d	kernel.asm	/^ffff80000010965d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)$/;"	l
ffff800000109661	kernel.asm	/^ffff800000109661:	74 35                	je     ffff800000109698 <mkgate+0xb3>$/;"	l
ffff800000109663	kernel.asm	/^ffff800000109663:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff800000109666	kernel.asm	/^ffff800000109666:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff800000109669	kernel.asm	/^ffff800000109669:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010966b	kernel.asm	/^ffff80000010966b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff800000109672	kernel.asm	/^ffff800000109672:	00 $/;"	l
ffff800000109673	kernel.asm	/^ffff800000109673:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff800000109677	kernel.asm	/^ffff800000109677:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010967a	kernel.asm	/^ffff80000010967a:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010967d	kernel.asm	/^ffff80000010967d:	83 c2 01             	add    $0x1,%edx$/;"	l
ffff800000109680	kernel.asm	/^ffff800000109680:	89 d2                	mov    %edx,%edx$/;"	l
ffff800000109682	kernel.asm	/^ffff800000109682:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx$/;"	l
ffff800000109689	kernel.asm	/^ffff800000109689:	00 $/;"	l
ffff80000010968a	kernel.asm	/^ffff80000010968a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010968e	kernel.asm	/^ffff80000010968e:	48 01 ca             	add    %rcx,%rdx$/;"	l
ffff800000109691	kernel.asm	/^ffff800000109691:	8b 12                	mov    (%rdx),%edx$/;"	l
ffff800000109693	kernel.asm	/^ffff800000109693:	80 ce 01             	or     $0x1,%dh$/;"	l
ffff800000109696	kernel.asm	/^ffff800000109696:	89 10                	mov    %edx,(%rax)$/;"	l
ffff800000109698	kernel.asm	/^ffff800000109698:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010969b	kernel.asm	/^ffff80000010969b:	83 c0 02             	add    $0x2,%eax$/;"	l
ffff80000010969e	kernel.asm	/^ffff80000010969e:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001096a0	kernel.asm	/^ffff8000001096a0:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001096a7	kernel.asm	/^ffff8000001096a7:	00 $/;"	l
ffff8000001096a8	kernel.asm	/^ffff8000001096a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001096ac	kernel.asm	/^ffff8000001096ac:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001096af	kernel.asm	/^ffff8000001096af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff8000001096b3	kernel.asm	/^ffff8000001096b3:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff8000001096b7	kernel.asm	/^ffff8000001096b7:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001096b9	kernel.asm	/^ffff8000001096b9:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff8000001096bc	kernel.asm	/^ffff8000001096bc:	83 c0 03             	add    $0x3,%eax$/;"	l
ffff8000001096bf	kernel.asm	/^ffff8000001096bf:	89 c0                	mov    %eax,%eax$/;"	l
ffff8000001096c1	kernel.asm	/^ffff8000001096c1:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff8000001096c8	kernel.asm	/^ffff8000001096c8:	00 $/;"	l
ffff8000001096c9	kernel.asm	/^ffff8000001096c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff8000001096cd	kernel.asm	/^ffff8000001096cd:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001096d0	kernel.asm	/^ffff8000001096d0:	c7 00 00 00 00 00    	movl   $0x0,(%rax)$/;"	l
ffff8000001096d6	kernel.asm	/^ffff8000001096d6:	90                   	nop$/;"	l
ffff8000001096d7	kernel.asm	/^ffff8000001096d7:	c9                   	leaveq $/;"	l
ffff8000001096d8	kernel.asm	/^ffff8000001096d8:	c3                   	retq   $/;"	l
ffff8000001096d9	kernel.asm	/^ffff8000001096d9 <idtinit>:$/;"	l
ffff8000001096d9	kernel.asm	/^ffff8000001096d9:	55                   	push   %rbp$/;"	l
ffff8000001096da	kernel.asm	/^ffff8000001096da:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001096dd	kernel.asm	/^ffff8000001096dd:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff8000001096e4	kernel.asm	/^ffff8000001096e4:	80 ff ff $/;"	l
ffff8000001096e7	kernel.asm	/^ffff8000001096e7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001096ea	kernel.asm	/^ffff8000001096ea:	be 00 10 00 00       	mov    $0x1000,%esi$/;"	l
ffff8000001096ef	kernel.asm	/^ffff8000001096ef:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001096f2	kernel.asm	/^ffff8000001096f2:	48 b8 81 95 10 00 00 	movabs $0xffff800000109581,%rax$/;"	l
ffff8000001096f9	kernel.asm	/^ffff8000001096f9:	80 ff ff $/;"	l
ffff8000001096fc	kernel.asm	/^ffff8000001096fc:	ff d0                	callq  *%rax$/;"	l
ffff8000001096fe	kernel.asm	/^ffff8000001096fe:	90                   	nop$/;"	l
ffff8000001096ff	kernel.asm	/^ffff8000001096ff:	5d                   	pop    %rbp$/;"	l
ffff800000109700	kernel.asm	/^ffff800000109700:	c3                   	retq   $/;"	l
ffff800000109701	kernel.asm	/^ffff800000109701 <tvinit>:$/;"	l
ffff800000109701	kernel.asm	/^ffff800000109701:	55                   	push   %rbp$/;"	l
ffff800000109702	kernel.asm	/^ffff800000109702:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109705	kernel.asm	/^ffff800000109705:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109709	kernel.asm	/^ffff800000109709:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff800000109710	kernel.asm	/^ffff800000109710:	80 ff ff $/;"	l
ffff800000109713	kernel.asm	/^ffff800000109713:	ff d0                	callq  *%rax$/;"	l
ffff800000109715	kernel.asm	/^ffff800000109715:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff800000109718	kernel.asm	/^ffff800000109718:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010971f	kernel.asm	/^ffff80000010971f:	80 ff ff $/;"	l
ffff800000109722	kernel.asm	/^ffff800000109722:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff800000109725	kernel.asm	/^ffff800000109725:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff80000010972c	kernel.asm	/^ffff80000010972c:	80 ff ff $/;"	l
ffff80000010972f	kernel.asm	/^ffff80000010972f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff800000109732	kernel.asm	/^ffff800000109732:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff800000109737	kernel.asm	/^ffff800000109737:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010973c	kernel.asm	/^ffff80000010973c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010973f	kernel.asm	/^ffff80000010973f:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff800000109746	kernel.asm	/^ffff800000109746:	80 ff ff $/;"	l
ffff800000109749	kernel.asm	/^ffff800000109749:	ff d0                	callq  *%rax$/;"	l
ffff80000010974b	kernel.asm	/^ffff80000010974b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109752	kernel.asm	/^ffff800000109752:	eb 45                	jmp    ffff800000109799 <tvinit+0x98>$/;"	l
ffff800000109754	kernel.asm	/^ffff800000109754:	48 b8 58 e6 10 00 00 	movabs $0xffff80000010e658,%rax$/;"	l
ffff80000010975b	kernel.asm	/^ffff80000010975b:	80 ff ff $/;"	l
ffff80000010975e	kernel.asm	/^ffff80000010975e:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff800000109761	kernel.asm	/^ffff800000109761:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff800000109764	kernel.asm	/^ffff800000109764:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax$/;"	l
ffff800000109768	kernel.asm	/^ffff800000109768:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010976b	kernel.asm	/^ffff80000010976b:	8b 75 fc             	mov    -0x4(%rbp),%esi$/;"	l
ffff80000010976e	kernel.asm	/^ffff80000010976e:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff800000109775	kernel.asm	/^ffff800000109775:	80 ff ff $/;"	l
ffff800000109778	kernel.asm	/^ffff800000109778:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010977b	kernel.asm	/^ffff80000010977b:	41 b8 00 00 00 00    	mov    $0x0,%r8d$/;"	l
ffff800000109781	kernel.asm	/^ffff800000109781:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
ffff800000109786	kernel.asm	/^ffff800000109786:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff800000109789	kernel.asm	/^ffff800000109789:	48 b8 e5 95 10 00 00 	movabs $0xffff8000001095e5,%rax$/;"	l
ffff800000109790	kernel.asm	/^ffff800000109790:	80 ff ff $/;"	l
ffff800000109793	kernel.asm	/^ffff800000109793:	ff d0                	callq  *%rax$/;"	l
ffff800000109795	kernel.asm	/^ffff800000109795:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000109799	kernel.asm	/^ffff800000109799:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff8000001097a0	kernel.asm	/^ffff8000001097a0:	7e b2                	jle    ffff800000109754 <tvinit+0x53>$/;"	l
ffff8000001097a2	kernel.asm	/^ffff8000001097a2:	48 b8 58 e6 10 00 00 	movabs $0xffff80000010e658,%rax$/;"	l
ffff8000001097a9	kernel.asm	/^ffff8000001097a9:	80 ff ff $/;"	l
ffff8000001097ac	kernel.asm	/^ffff8000001097ac:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax$/;"	l
ffff8000001097b3	kernel.asm	/^ffff8000001097b3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff8000001097b6	kernel.asm	/^ffff8000001097b6:	48 b8 a0 e3 11 00 00 	movabs $0xffff80000011e3a0,%rax$/;"	l
ffff8000001097bd	kernel.asm	/^ffff8000001097bd:	80 ff ff $/;"	l
ffff8000001097c0	kernel.asm	/^ffff8000001097c0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001097c3	kernel.asm	/^ffff8000001097c3:	41 b8 01 00 00 00    	mov    $0x1,%r8d$/;"	l
ffff8000001097c9	kernel.asm	/^ffff8000001097c9:	b9 03 00 00 00       	mov    $0x3,%ecx$/;"	l
ffff8000001097ce	kernel.asm	/^ffff8000001097ce:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff8000001097d3	kernel.asm	/^ffff8000001097d3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff8000001097d6	kernel.asm	/^ffff8000001097d6:	48 b8 e5 95 10 00 00 	movabs $0xffff8000001095e5,%rax$/;"	l
ffff8000001097dd	kernel.asm	/^ffff8000001097dd:	80 ff ff $/;"	l
ffff8000001097e0	kernel.asm	/^ffff8000001097e0:	ff d0                	callq  *%rax$/;"	l
ffff8000001097e2	kernel.asm	/^ffff8000001097e2:	90                   	nop$/;"	l
ffff8000001097e3	kernel.asm	/^ffff8000001097e3:	c9                   	leaveq $/;"	l
ffff8000001097e4	kernel.asm	/^ffff8000001097e4:	c3                   	retq   $/;"	l
ffff8000001097e5	kernel.asm	/^ffff8000001097e5 <trap>:$/;"	l
ffff8000001097e5	kernel.asm	/^ffff8000001097e5:	55                   	push   %rbp$/;"	l
ffff8000001097e6	kernel.asm	/^ffff8000001097e6:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff8000001097e9	kernel.asm	/^ffff8000001097e9:	41 54                	push   %r12$/;"	l
ffff8000001097eb	kernel.asm	/^ffff8000001097eb:	53                   	push   %rbx$/;"	l
ffff8000001097ec	kernel.asm	/^ffff8000001097ec:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff8000001097f0	kernel.asm	/^ffff8000001097f0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff8000001097f4	kernel.asm	/^ffff8000001097f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001097f8	kernel.asm	/^ffff8000001097f8:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff8000001097fc	kernel.asm	/^ffff8000001097fc:	48 83 f8 40          	cmp    $0x40,%rax$/;"	l
ffff800000109800	kernel.asm	/^ffff800000109800:	75 73                	jne    ffff800000109875 <trap+0x90>$/;"	l
ffff800000109802	kernel.asm	/^ffff800000109802:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109809	kernel.asm	/^ffff800000109809:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010980d	kernel.asm	/^ffff80000010980d:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109810	kernel.asm	/^ffff800000109810:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109812	kernel.asm	/^ffff800000109812:	74 0c                	je     ffff800000109820 <trap+0x3b>$/;"	l
ffff800000109814	kernel.asm	/^ffff800000109814:	48 b8 a9 68 10 00 00 	movabs $0xffff8000001068a9,%rax$/;"	l
ffff80000010981b	kernel.asm	/^ffff80000010981b:	80 ff ff $/;"	l
ffff80000010981e	kernel.asm	/^ffff80000010981e:	ff d0                	callq  *%rax$/;"	l
ffff800000109820	kernel.asm	/^ffff800000109820:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109827	kernel.asm	/^ffff800000109827:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010982b	kernel.asm	/^ffff80000010982b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010982f	kernel.asm	/^ffff80000010982f:	48 89 50 28          	mov    %rdx,0x28(%rax)$/;"	l
ffff800000109833	kernel.asm	/^ffff800000109833:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff80000010983a	kernel.asm	/^ffff80000010983a:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff80000010983e	kernel.asm	/^ffff80000010983e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff800000109842	kernel.asm	/^ffff800000109842:	48 b8 0f 7f 10 00 00 	movabs $0xffff800000107f0f,%rax$/;"	l
ffff800000109849	kernel.asm	/^ffff800000109849:	80 ff ff $/;"	l
ffff80000010984c	kernel.asm	/^ffff80000010984c:	ff d0                	callq  *%rax$/;"	l
ffff80000010984e	kernel.asm	/^ffff80000010984e:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109855	kernel.asm	/^ffff800000109855:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109859	kernel.asm	/^ffff800000109859:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff80000010985c	kernel.asm	/^ffff80000010985c:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010985e	kernel.asm	/^ffff80000010985e:	0f 84 8e 03 00 00    	je     ffff800000109bf2 <trap+0x40d>$/;"	l
ffff800000109864	kernel.asm	/^ffff800000109864:	48 b8 a9 68 10 00 00 	movabs $0xffff8000001068a9,%rax$/;"	l
ffff80000010986b	kernel.asm	/^ffff80000010986b:	80 ff ff $/;"	l
ffff80000010986e	kernel.asm	/^ffff80000010986e:	ff d0                	callq  *%rax$/;"	l
ffff800000109870	kernel.asm	/^ffff800000109870:	e9 7d 03 00 00       	jmpq   ffff800000109bf2 <trap+0x40d>$/;"	l
ffff800000109875	kernel.asm	/^ffff800000109875:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109879	kernel.asm	/^ffff800000109879:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff80000010987d	kernel.asm	/^ffff80000010987d:	48 83 e8 20          	sub    $0x20,%rax$/;"	l
ffff800000109881	kernel.asm	/^ffff800000109881:	48 83 f8 1f          	cmp    $0x1f,%rax$/;"	l
ffff800000109885	kernel.asm	/^ffff800000109885:	0f 87 46 01 00 00    	ja     ffff8000001099d1 <trap+0x1ec>$/;"	l
ffff80000010988b	kernel.asm	/^ffff80000010988b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff800000109892	kernel.asm	/^ffff800000109892:	00 $/;"	l
ffff800000109893	kernel.asm	/^ffff800000109893:	48 b8 58 d2 10 00 00 	movabs $0xffff80000010d258,%rax$/;"	l
ffff80000010989a	kernel.asm	/^ffff80000010989a:	80 ff ff $/;"	l
ffff80000010989d	kernel.asm	/^ffff80000010989d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff8000001098a0	kernel.asm	/^ffff8000001098a0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff8000001098a3	kernel.asm	/^ffff8000001098a3:	ff e0                	jmpq   *%rax$/;"	l
ffff8000001098a5	kernel.asm	/^ffff8000001098a5:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff8000001098ac	kernel.asm	/^ffff8000001098ac:	80 ff ff $/;"	l
ffff8000001098af	kernel.asm	/^ffff8000001098af:	ff d0                	callq  *%rax$/;"	l
ffff8000001098b1	kernel.asm	/^ffff8000001098b1:	85 c0                	test   %eax,%eax$/;"	l
ffff8000001098b3	kernel.asm	/^ffff8000001098b3:	75 5d                	jne    ffff800000109912 <trap+0x12d>$/;"	l
ffff8000001098b5	kernel.asm	/^ffff8000001098b5:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff8000001098bc	kernel.asm	/^ffff8000001098bc:	80 ff ff $/;"	l
ffff8000001098bf	kernel.asm	/^ffff8000001098bf:	48 b8 cc 74 10 00 00 	movabs $0xffff8000001074cc,%rax$/;"	l
ffff8000001098c6	kernel.asm	/^ffff8000001098c6:	80 ff ff $/;"	l
ffff8000001098c9	kernel.asm	/^ffff8000001098c9:	ff d0                	callq  *%rax$/;"	l
ffff8000001098cb	kernel.asm	/^ffff8000001098cb:	48 b8 28 e4 11 00 00 	movabs $0xffff80000011e428,%rax$/;"	l
ffff8000001098d2	kernel.asm	/^ffff8000001098d2:	80 ff ff $/;"	l
ffff8000001098d5	kernel.asm	/^ffff8000001098d5:	8b 00                	mov    (%rax),%eax$/;"	l
ffff8000001098d7	kernel.asm	/^ffff8000001098d7:	8d 50 01             	lea    0x1(%rax),%edx$/;"	l
ffff8000001098da	kernel.asm	/^ffff8000001098da:	48 b8 28 e4 11 00 00 	movabs $0xffff80000011e428,%rax$/;"	l
ffff8000001098e1	kernel.asm	/^ffff8000001098e1:	80 ff ff $/;"	l
ffff8000001098e4	kernel.asm	/^ffff8000001098e4:	89 10                	mov    %edx,(%rax)$/;"	l
ffff8000001098e6	kernel.asm	/^ffff8000001098e6:	48 bf 28 e4 11 00 00 	movabs $0xffff80000011e428,%rdi$/;"	l
ffff8000001098ed	kernel.asm	/^ffff8000001098ed:	80 ff ff $/;"	l
ffff8000001098f0	kernel.asm	/^ffff8000001098f0:	48 b8 58 70 10 00 00 	movabs $0xffff800000107058,%rax$/;"	l
ffff8000001098f7	kernel.asm	/^ffff8000001098f7:	80 ff ff $/;"	l
ffff8000001098fa	kernel.asm	/^ffff8000001098fa:	ff d0                	callq  *%rax$/;"	l
ffff8000001098fc	kernel.asm	/^ffff8000001098fc:	48 bf c0 e3 11 00 00 	movabs $0xffff80000011e3c0,%rdi$/;"	l
ffff800000109903	kernel.asm	/^ffff800000109903:	80 ff ff $/;"	l
ffff800000109906	kernel.asm	/^ffff800000109906:	48 b8 65 75 10 00 00 	movabs $0xffff800000107565,%rax$/;"	l
ffff80000010990d	kernel.asm	/^ffff80000010990d:	80 ff ff $/;"	l
ffff800000109910	kernel.asm	/^ffff800000109910:	ff d0                	callq  *%rax$/;"	l
ffff800000109912	kernel.asm	/^ffff800000109912:	48 b8 07 49 10 00 00 	movabs $0xffff800000104907,%rax$/;"	l
ffff800000109919	kernel.asm	/^ffff800000109919:	80 ff ff $/;"	l
ffff80000010991c	kernel.asm	/^ffff80000010991c:	ff d0                	callq  *%rax$/;"	l
ffff80000010991e	kernel.asm	/^ffff80000010991e:	e9 0c 02 00 00       	jmpq   ffff800000109b2f <trap+0x34a>$/;"	l
ffff800000109923	kernel.asm	/^ffff800000109923:	48 b8 34 3d 10 00 00 	movabs $0xffff800000103d34,%rax$/;"	l
ffff80000010992a	kernel.asm	/^ffff80000010992a:	80 ff ff $/;"	l
ffff80000010992d	kernel.asm	/^ffff80000010992d:	ff d0                	callq  *%rax$/;"	l
ffff80000010992f	kernel.asm	/^ffff80000010992f:	48 b8 07 49 10 00 00 	movabs $0xffff800000104907,%rax$/;"	l
ffff800000109936	kernel.asm	/^ffff800000109936:	80 ff ff $/;"	l
ffff800000109939	kernel.asm	/^ffff800000109939:	ff d0                	callq  *%rax$/;"	l
ffff80000010993b	kernel.asm	/^ffff80000010993b:	e9 ef 01 00 00       	jmpq   ffff800000109b2f <trap+0x34a>$/;"	l
ffff800000109940	kernel.asm	/^ffff800000109940:	48 b8 bf 45 10 00 00 	movabs $0xffff8000001045bf,%rax$/;"	l
ffff800000109947	kernel.asm	/^ffff800000109947:	80 ff ff $/;"	l
ffff80000010994a	kernel.asm	/^ffff80000010994a:	ff d0                	callq  *%rax$/;"	l
ffff80000010994c	kernel.asm	/^ffff80000010994c:	48 b8 07 49 10 00 00 	movabs $0xffff800000104907,%rax$/;"	l
ffff800000109953	kernel.asm	/^ffff800000109953:	80 ff ff $/;"	l
ffff800000109956	kernel.asm	/^ffff800000109956:	ff d0                	callq  *%rax$/;"	l
ffff800000109958	kernel.asm	/^ffff800000109958:	e9 d2 01 00 00       	jmpq   ffff800000109b2f <trap+0x34a>$/;"	l
ffff80000010995d	kernel.asm	/^ffff80000010995d:	48 b8 59 9e 10 00 00 	movabs $0xffff800000109e59,%rax$/;"	l
ffff800000109964	kernel.asm	/^ffff800000109964:	80 ff ff $/;"	l
ffff800000109967	kernel.asm	/^ffff800000109967:	ff d0                	callq  *%rax$/;"	l
ffff800000109969	kernel.asm	/^ffff800000109969:	48 b8 07 49 10 00 00 	movabs $0xffff800000104907,%rax$/;"	l
ffff800000109970	kernel.asm	/^ffff800000109970:	80 ff ff $/;"	l
ffff800000109973	kernel.asm	/^ffff800000109973:	ff d0                	callq  *%rax$/;"	l
ffff800000109975	kernel.asm	/^ffff800000109975:	e9 b5 01 00 00       	jmpq   ffff800000109b2f <trap+0x34a>$/;"	l
ffff80000010997a	kernel.asm	/^ffff80000010997a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010997e	kernel.asm	/^ffff80000010997e:	4c 8b a0 88 00 00 00 	mov    0x88(%rax),%r12$/;"	l
ffff800000109985	kernel.asm	/^ffff800000109985:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109989	kernel.asm	/^ffff800000109989:	48 8b 98 90 00 00 00 	mov    0x90(%rax),%rbx$/;"	l
ffff800000109990	kernel.asm	/^ffff800000109990:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff800000109997	kernel.asm	/^ffff800000109997:	80 ff ff $/;"	l
ffff80000010999a	kernel.asm	/^ffff80000010999a:	ff d0                	callq  *%rax$/;"	l
ffff80000010999c	kernel.asm	/^ffff80000010999c:	4c 89 e1             	mov    %r12,%rcx$/;"	l
ffff80000010999f	kernel.asm	/^ffff80000010999f:	48 89 da             	mov    %rbx,%rdx$/;"	l
ffff8000001099a2	kernel.asm	/^ffff8000001099a2:	89 c6                	mov    %eax,%esi$/;"	l
ffff8000001099a4	kernel.asm	/^ffff8000001099a4:	48 bf a0 d1 10 00 00 	movabs $0xffff80000010d1a0,%rdi$/;"	l
ffff8000001099ab	kernel.asm	/^ffff8000001099ab:	80 ff ff $/;"	l
ffff8000001099ae	kernel.asm	/^ffff8000001099ae:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff8000001099b3	kernel.asm	/^ffff8000001099b3:	49 b8 b6 07 10 00 00 	movabs $0xffff8000001007b6,%r8$/;"	l
ffff8000001099ba	kernel.asm	/^ffff8000001099ba:	80 ff ff $/;"	l
ffff8000001099bd	kernel.asm	/^ffff8000001099bd:	41 ff d0             	callq  *%r8$/;"	l
ffff8000001099c0	kernel.asm	/^ffff8000001099c0:	48 b8 07 49 10 00 00 	movabs $0xffff800000104907,%rax$/;"	l
ffff8000001099c7	kernel.asm	/^ffff8000001099c7:	80 ff ff $/;"	l
ffff8000001099ca	kernel.asm	/^ffff8000001099ca:	ff d0                	callq  *%rax$/;"	l
ffff8000001099cc	kernel.asm	/^ffff8000001099cc:	e9 5e 01 00 00       	jmpq   ffff800000109b2f <trap+0x34a>$/;"	l
ffff8000001099d1	kernel.asm	/^ffff8000001099d1:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff8000001099d8	kernel.asm	/^ffff8000001099d8:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff8000001099dc	kernel.asm	/^ffff8000001099dc:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001099df	kernel.asm	/^ffff8000001099df:	74 17                	je     ffff8000001099f8 <trap+0x213>$/;"	l
ffff8000001099e1	kernel.asm	/^ffff8000001099e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff8000001099e5	kernel.asm	/^ffff8000001099e5:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff8000001099ec	kernel.asm	/^ffff8000001099ec:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff8000001099ef	kernel.asm	/^ffff8000001099ef:	48 85 c0             	test   %rax,%rax$/;"	l
ffff8000001099f2	kernel.asm	/^ffff8000001099f2:	0f 85 96 00 00 00    	jne    ffff800000109a8e <trap+0x2a9>$/;"	l
ffff8000001099f8	kernel.asm	/^ffff8000001099f8:	48 b8 d0 95 10 00 00 	movabs $0xffff8000001095d0,%rax$/;"	l
ffff8000001099ff	kernel.asm	/^ffff8000001099ff:	80 ff ff $/;"	l
ffff800000109a02	kernel.asm	/^ffff800000109a02:	ff d0                	callq  *%rax$/;"	l
ffff800000109a04	kernel.asm	/^ffff800000109a04:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff800000109a07	kernel.asm	/^ffff800000109a07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109a0b	kernel.asm	/^ffff800000109a0b:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff800000109a12	kernel.asm	/^ffff800000109a12:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff800000109a19	kernel.asm	/^ffff800000109a19:	80 ff ff $/;"	l
ffff800000109a1c	kernel.asm	/^ffff800000109a1c:	ff d0                	callq  *%rax$/;"	l
ffff800000109a1e	kernel.asm	/^ffff800000109a1e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000109a20	kernel.asm	/^ffff800000109a20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109a24	kernel.asm	/^ffff800000109a24:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109a28	kernel.asm	/^ffff800000109a28:	4d 89 e0             	mov    %r12,%r8$/;"	l
ffff800000109a2b	kernel.asm	/^ffff800000109a2b:	48 89 d9             	mov    %rbx,%rcx$/;"	l
ffff800000109a2e	kernel.asm	/^ffff800000109a2e:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff800000109a31	kernel.asm	/^ffff800000109a31:	48 bf c8 d1 10 00 00 	movabs $0xffff80000010d1c8,%rdi$/;"	l
ffff800000109a38	kernel.asm	/^ffff800000109a38:	80 ff ff $/;"	l
ffff800000109a3b	kernel.asm	/^ffff800000109a3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109a40	kernel.asm	/^ffff800000109a40:	49 b9 b6 07 10 00 00 	movabs $0xffff8000001007b6,%r9$/;"	l
ffff800000109a47	kernel.asm	/^ffff800000109a47:	80 ff ff $/;"	l
ffff800000109a4a	kernel.asm	/^ffff800000109a4a:	41 ff d1             	callq  *%r9$/;"	l
ffff800000109a4d	kernel.asm	/^ffff800000109a4d:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109a54	kernel.asm	/^ffff800000109a54:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109a58	kernel.asm	/^ffff800000109a58:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109a5b	kernel.asm	/^ffff800000109a5b:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109a5d	kernel.asm	/^ffff800000109a5d:	48 bf fa d1 10 00 00 	movabs $0xffff80000010d1fa,%rdi$/;"	l
ffff800000109a64	kernel.asm	/^ffff800000109a64:	80 ff ff $/;"	l
ffff800000109a67	kernel.asm	/^ffff800000109a67:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109a6c	kernel.asm	/^ffff800000109a6c:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff800000109a73	kernel.asm	/^ffff800000109a73:	80 ff ff $/;"	l
ffff800000109a76	kernel.asm	/^ffff800000109a76:	ff d2                	callq  *%rdx$/;"	l
ffff800000109a78	kernel.asm	/^ffff800000109a78:	48 bf 07 d2 10 00 00 	movabs $0xffff80000010d207,%rdi$/;"	l
ffff800000109a7f	kernel.asm	/^ffff800000109a7f:	80 ff ff $/;"	l
ffff800000109a82	kernel.asm	/^ffff800000109a82:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff800000109a89	kernel.asm	/^ffff800000109a89:	80 ff ff $/;"	l
ffff800000109a8c	kernel.asm	/^ffff800000109a8c:	ff d0                	callq  *%rax$/;"	l
ffff800000109a8e	kernel.asm	/^ffff800000109a8e:	48 b8 d0 95 10 00 00 	movabs $0xffff8000001095d0,%rax$/;"	l
ffff800000109a95	kernel.asm	/^ffff800000109a95:	80 ff ff $/;"	l
ffff800000109a98	kernel.asm	/^ffff800000109a98:	ff d0                	callq  *%rax$/;"	l
ffff800000109a9a	kernel.asm	/^ffff800000109a9a:	49 89 c4             	mov    %rax,%r12$/;"	l
ffff800000109a9d	kernel.asm	/^ffff800000109a9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109aa1	kernel.asm	/^ffff800000109aa1:	48 8b 98 88 00 00 00 	mov    0x88(%rax),%rbx$/;"	l
ffff800000109aa8	kernel.asm	/^ffff800000109aa8:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff800000109aaf	kernel.asm	/^ffff800000109aaf:	80 ff ff $/;"	l
ffff800000109ab2	kernel.asm	/^ffff800000109ab2:	ff d0                	callq  *%rax$/;"	l
ffff800000109ab4	kernel.asm	/^ffff800000109ab4:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109ab6	kernel.asm	/^ffff800000109ab6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109aba	kernel.asm	/^ffff800000109aba:	48 8b 88 80 00 00 00 	mov    0x80(%rax),%rcx$/;"	l
ffff800000109ac1	kernel.asm	/^ffff800000109ac1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109ac5	kernel.asm	/^ffff800000109ac5:	48 8b 50 78          	mov    0x78(%rax),%rdx$/;"	l
ffff800000109ac9	kernel.asm	/^ffff800000109ac9:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109ad0	kernel.asm	/^ffff800000109ad0:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109ad4	kernel.asm	/^ffff800000109ad4:	48 8d b0 d0 00 00 00 	lea    0xd0(%rax),%rsi$/;"	l
ffff800000109adb	kernel.asm	/^ffff800000109adb:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109ae2	kernel.asm	/^ffff800000109ae2:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109ae6	kernel.asm	/^ffff800000109ae6:	8b 40 1c             	mov    0x1c(%rax),%eax$/;"	l
ffff800000109ae9	kernel.asm	/^ffff800000109ae9:	41 54                	push   %r12$/;"	l
ffff800000109aeb	kernel.asm	/^ffff800000109aeb:	53                   	push   %rbx$/;"	l
ffff800000109aec	kernel.asm	/^ffff800000109aec:	41 89 f9             	mov    %edi,%r9d$/;"	l
ffff800000109aef	kernel.asm	/^ffff800000109aef:	49 89 c8             	mov    %rcx,%r8$/;"	l
ffff800000109af2	kernel.asm	/^ffff800000109af2:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff800000109af5	kernel.asm	/^ffff800000109af5:	48 89 f2             	mov    %rsi,%rdx$/;"	l
ffff800000109af8	kernel.asm	/^ffff800000109af8:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109afa	kernel.asm	/^ffff800000109afa:	48 bf 10 d2 10 00 00 	movabs $0xffff80000010d210,%rdi$/;"	l
ffff800000109b01	kernel.asm	/^ffff800000109b01:	80 ff ff $/;"	l
ffff800000109b04	kernel.asm	/^ffff800000109b04:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff800000109b09	kernel.asm	/^ffff800000109b09:	49 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%r10$/;"	l
ffff800000109b10	kernel.asm	/^ffff800000109b10:	80 ff ff $/;"	l
ffff800000109b13	kernel.asm	/^ffff800000109b13:	41 ff d2             	callq  *%r10$/;"	l
ffff800000109b16	kernel.asm	/^ffff800000109b16:	48 83 c4 10          	add    $0x10,%rsp$/;"	l
ffff800000109b1a	kernel.asm	/^ffff800000109b1a:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109b21	kernel.asm	/^ffff800000109b21:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109b25	kernel.asm	/^ffff800000109b25:	c7 40 40 01 00 00 00 	movl   $0x1,0x40(%rax)$/;"	l
ffff800000109b2c	kernel.asm	/^ffff800000109b2c:	eb 01                	jmp    ffff800000109b2f <trap+0x34a>$/;"	l
ffff800000109b2e	kernel.asm	/^ffff800000109b2e:	90                   	nop$/;"	l
ffff800000109b2f	kernel.asm	/^ffff800000109b2f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109b36	kernel.asm	/^ffff800000109b36:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109b3a	kernel.asm	/^ffff800000109b3a:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000109b3d	kernel.asm	/^ffff800000109b3d:	74 32                	je     ffff800000109b71 <trap+0x38c>$/;"	l
ffff800000109b3f	kernel.asm	/^ffff800000109b3f:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109b46	kernel.asm	/^ffff800000109b46:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109b4a	kernel.asm	/^ffff800000109b4a:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109b4d	kernel.asm	/^ffff800000109b4d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109b4f	kernel.asm	/^ffff800000109b4f:	74 20                	je     ffff800000109b71 <trap+0x38c>$/;"	l
ffff800000109b51	kernel.asm	/^ffff800000109b51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109b55	kernel.asm	/^ffff800000109b55:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff800000109b5c	kernel.asm	/^ffff800000109b5c:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000109b5f	kernel.asm	/^ffff800000109b5f:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff800000109b63	kernel.asm	/^ffff800000109b63:	75 0c                	jne    ffff800000109b71 <trap+0x38c>$/;"	l
ffff800000109b65	kernel.asm	/^ffff800000109b65:	48 b8 a9 68 10 00 00 	movabs $0xffff8000001068a9,%rax$/;"	l
ffff800000109b6c	kernel.asm	/^ffff800000109b6c:	80 ff ff $/;"	l
ffff800000109b6f	kernel.asm	/^ffff800000109b6f:	ff d0                	callq  *%rax$/;"	l
ffff800000109b71	kernel.asm	/^ffff800000109b71:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109b78	kernel.asm	/^ffff800000109b78:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109b7c	kernel.asm	/^ffff800000109b7c:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000109b7f	kernel.asm	/^ffff800000109b7f:	74 2d                	je     ffff800000109bae <trap+0x3c9>$/;"	l
ffff800000109b81	kernel.asm	/^ffff800000109b81:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109b88	kernel.asm	/^ffff800000109b88:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109b8c	kernel.asm	/^ffff800000109b8c:	8b 40 18             	mov    0x18(%rax),%eax$/;"	l
ffff800000109b8f	kernel.asm	/^ffff800000109b8f:	83 f8 04             	cmp    $0x4,%eax$/;"	l
ffff800000109b92	kernel.asm	/^ffff800000109b92:	75 1a                	jne    ffff800000109bae <trap+0x3c9>$/;"	l
ffff800000109b94	kernel.asm	/^ffff800000109b94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109b98	kernel.asm	/^ffff800000109b98:	48 8b 40 78          	mov    0x78(%rax),%rax$/;"	l
ffff800000109b9c	kernel.asm	/^ffff800000109b9c:	48 83 f8 20          	cmp    $0x20,%rax$/;"	l
ffff800000109ba0	kernel.asm	/^ffff800000109ba0:	75 0c                	jne    ffff800000109bae <trap+0x3c9>$/;"	l
ffff800000109ba2	kernel.asm	/^ffff800000109ba2:	48 b8 2d 6e 10 00 00 	movabs $0xffff800000106e2d,%rax$/;"	l
ffff800000109ba9	kernel.asm	/^ffff800000109ba9:	80 ff ff $/;"	l
ffff800000109bac	kernel.asm	/^ffff800000109bac:	ff d0                	callq  *%rax$/;"	l
ffff800000109bae	kernel.asm	/^ffff800000109bae:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109bb5	kernel.asm	/^ffff800000109bb5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109bb9	kernel.asm	/^ffff800000109bb9:	48 85 c0             	test   %rax,%rax$/;"	l
ffff800000109bbc	kernel.asm	/^ffff800000109bbc:	74 35                	je     ffff800000109bf3 <trap+0x40e>$/;"	l
ffff800000109bbe	kernel.asm	/^ffff800000109bbe:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax$/;"	l
ffff800000109bc5	kernel.asm	/^ffff800000109bc5:	64 48 8b 00          	mov    %fs:(%rax),%rax$/;"	l
ffff800000109bc9	kernel.asm	/^ffff800000109bc9:	8b 40 40             	mov    0x40(%rax),%eax$/;"	l
ffff800000109bcc	kernel.asm	/^ffff800000109bcc:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109bce	kernel.asm	/^ffff800000109bce:	74 23                	je     ffff800000109bf3 <trap+0x40e>$/;"	l
ffff800000109bd0	kernel.asm	/^ffff800000109bd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff800000109bd4	kernel.asm	/^ffff800000109bd4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax$/;"	l
ffff800000109bdb	kernel.asm	/^ffff800000109bdb:	83 e0 03             	and    $0x3,%eax$/;"	l
ffff800000109bde	kernel.asm	/^ffff800000109bde:	48 83 f8 03          	cmp    $0x3,%rax$/;"	l
ffff800000109be2	kernel.asm	/^ffff800000109be2:	75 0f                	jne    ffff800000109bf3 <trap+0x40e>$/;"	l
ffff800000109be4	kernel.asm	/^ffff800000109be4:	48 b8 a9 68 10 00 00 	movabs $0xffff8000001068a9,%rax$/;"	l
ffff800000109beb	kernel.asm	/^ffff800000109beb:	80 ff ff $/;"	l
ffff800000109bee	kernel.asm	/^ffff800000109bee:	ff d0                	callq  *%rax$/;"	l
ffff800000109bf0	kernel.asm	/^ffff800000109bf0:	eb 01                	jmp    ffff800000109bf3 <trap+0x40e>$/;"	l
ffff800000109bf2	kernel.asm	/^ffff800000109bf2:	90                   	nop$/;"	l
ffff800000109bf3	kernel.asm	/^ffff800000109bf3:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp$/;"	l
ffff800000109bf7	kernel.asm	/^ffff800000109bf7:	5b                   	pop    %rbx$/;"	l
ffff800000109bf8	kernel.asm	/^ffff800000109bf8:	41 5c                	pop    %r12$/;"	l
ffff800000109bfa	kernel.asm	/^ffff800000109bfa:	5d                   	pop    %rbp$/;"	l
ffff800000109bfb	kernel.asm	/^ffff800000109bfb:	c3                   	retq   $/;"	l
ffff800000109bfc	kernel.asm	/^ffff800000109bfc <inb>:$/;"	l
ffff800000109bfc	kernel.asm	/^ffff800000109bfc:	55                   	push   %rbp$/;"	l
ffff800000109bfd	kernel.asm	/^ffff800000109bfd:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c00	kernel.asm	/^ffff800000109c00:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff800000109c04	kernel.asm	/^ffff800000109c04:	89 f8                	mov    %edi,%eax$/;"	l
ffff800000109c06	kernel.asm	/^ffff800000109c06:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff800000109c0a	kernel.asm	/^ffff800000109c0a:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff800000109c0e	kernel.asm	/^ffff800000109c0e:	89 c2                	mov    %eax,%edx$/;"	l
ffff800000109c10	kernel.asm	/^ffff800000109c10:	ec                   	in     (%dx),%al$/;"	l
ffff800000109c11	kernel.asm	/^ffff800000109c11:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff800000109c14	kernel.asm	/^ffff800000109c14:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff800000109c18	kernel.asm	/^ffff800000109c18:	c9                   	leaveq $/;"	l
ffff800000109c19	kernel.asm	/^ffff800000109c19:	c3                   	retq   $/;"	l
ffff800000109c1a	kernel.asm	/^ffff800000109c1a <outb>:$/;"	l
ffff800000109c1a	kernel.asm	/^ffff800000109c1a:	55                   	push   %rbp$/;"	l
ffff800000109c1b	kernel.asm	/^ffff800000109c1b:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c1e	kernel.asm	/^ffff800000109c1e:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff800000109c22	kernel.asm	/^ffff800000109c22:	89 fa                	mov    %edi,%edx$/;"	l
ffff800000109c24	kernel.asm	/^ffff800000109c24:	89 f0                	mov    %esi,%eax$/;"	l
ffff800000109c26	kernel.asm	/^ffff800000109c26:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff800000109c2a	kernel.asm	/^ffff800000109c2a:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff800000109c2d	kernel.asm	/^ffff800000109c2d:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff800000109c31	kernel.asm	/^ffff800000109c31:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff800000109c35	kernel.asm	/^ffff800000109c35:	ee                   	out    %al,(%dx)$/;"	l
ffff800000109c36	kernel.asm	/^ffff800000109c36:	90                   	nop$/;"	l
ffff800000109c37	kernel.asm	/^ffff800000109c37:	c9                   	leaveq $/;"	l
ffff800000109c38	kernel.asm	/^ffff800000109c38:	c3                   	retq   $/;"	l
ffff800000109c39	kernel.asm	/^ffff800000109c39 <uartearlyinit>:$/;"	l
ffff800000109c39	kernel.asm	/^ffff800000109c39:	55                   	push   %rbp$/;"	l
ffff800000109c3a	kernel.asm	/^ffff800000109c3a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109c3d	kernel.asm	/^ffff800000109c3d:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff800000109c41	kernel.asm	/^ffff800000109c41:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109c46	kernel.asm	/^ffff800000109c46:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109c4b	kernel.asm	/^ffff800000109c4b:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109c52	kernel.asm	/^ffff800000109c52:	80 ff ff $/;"	l
ffff800000109c55	kernel.asm	/^ffff800000109c55:	ff d0                	callq  *%rax$/;"	l
ffff800000109c57	kernel.asm	/^ffff800000109c57:	be 80 00 00 00       	mov    $0x80,%esi$/;"	l
ffff800000109c5c	kernel.asm	/^ffff800000109c5c:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109c61	kernel.asm	/^ffff800000109c61:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109c68	kernel.asm	/^ffff800000109c68:	80 ff ff $/;"	l
ffff800000109c6b	kernel.asm	/^ffff800000109c6b:	ff d0                	callq  *%rax$/;"	l
ffff800000109c6d	kernel.asm	/^ffff800000109c6d:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff800000109c72	kernel.asm	/^ffff800000109c72:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109c77	kernel.asm	/^ffff800000109c77:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109c7e	kernel.asm	/^ffff800000109c7e:	80 ff ff $/;"	l
ffff800000109c81	kernel.asm	/^ffff800000109c81:	ff d0                	callq  *%rax$/;"	l
ffff800000109c83	kernel.asm	/^ffff800000109c83:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109c88	kernel.asm	/^ffff800000109c88:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109c8d	kernel.asm	/^ffff800000109c8d:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109c94	kernel.asm	/^ffff800000109c94:	80 ff ff $/;"	l
ffff800000109c97	kernel.asm	/^ffff800000109c97:	ff d0                	callq  *%rax$/;"	l
ffff800000109c99	kernel.asm	/^ffff800000109c99:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff800000109c9e	kernel.asm	/^ffff800000109c9e:	bf fb 03 00 00       	mov    $0x3fb,%edi$/;"	l
ffff800000109ca3	kernel.asm	/^ffff800000109ca3:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109caa	kernel.asm	/^ffff800000109caa:	80 ff ff $/;"	l
ffff800000109cad	kernel.asm	/^ffff800000109cad:	ff d0                	callq  *%rax$/;"	l
ffff800000109caf	kernel.asm	/^ffff800000109caf:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109cb4	kernel.asm	/^ffff800000109cb4:	bf fc 03 00 00       	mov    $0x3fc,%edi$/;"	l
ffff800000109cb9	kernel.asm	/^ffff800000109cb9:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109cc0	kernel.asm	/^ffff800000109cc0:	80 ff ff $/;"	l
ffff800000109cc3	kernel.asm	/^ffff800000109cc3:	ff d0                	callq  *%rax$/;"	l
ffff800000109cc5	kernel.asm	/^ffff800000109cc5:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff800000109cca	kernel.asm	/^ffff800000109cca:	bf f9 03 00 00       	mov    $0x3f9,%edi$/;"	l
ffff800000109ccf	kernel.asm	/^ffff800000109ccf:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109cd6	kernel.asm	/^ffff800000109cd6:	80 ff ff $/;"	l
ffff800000109cd9	kernel.asm	/^ffff800000109cd9:	ff d0                	callq  *%rax$/;"	l
ffff800000109cdb	kernel.asm	/^ffff800000109cdb:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109ce0	kernel.asm	/^ffff800000109ce0:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109ce7	kernel.asm	/^ffff800000109ce7:	80 ff ff $/;"	l
ffff800000109cea	kernel.asm	/^ffff800000109cea:	ff d0                	callq  *%rax$/;"	l
ffff800000109cec	kernel.asm	/^ffff800000109cec:	3c ff                	cmp    $0xff,%al$/;"	l
ffff800000109cee	kernel.asm	/^ffff800000109cee:	74 4a                	je     ffff800000109d3a <uartearlyinit+0x101>$/;"	l
ffff800000109cf0	kernel.asm	/^ffff800000109cf0:	48 b8 2c e4 11 00 00 	movabs $0xffff80000011e42c,%rax$/;"	l
ffff800000109cf7	kernel.asm	/^ffff800000109cf7:	80 ff ff $/;"	l
ffff800000109cfa	kernel.asm	/^ffff800000109cfa:	c7 00 01 00 00 00    	movl   $0x1,(%rax)$/;"	l
ffff800000109d00	kernel.asm	/^ffff800000109d00:	48 b8 58 d3 10 00 00 	movabs $0xffff80000010d358,%rax$/;"	l
ffff800000109d07	kernel.asm	/^ffff800000109d07:	80 ff ff $/;"	l
ffff800000109d0a	kernel.asm	/^ffff800000109d0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff800000109d0e	kernel.asm	/^ffff800000109d0e:	eb 1d                	jmp    ffff800000109d2d <uartearlyinit+0xf4>$/;"	l
ffff800000109d10	kernel.asm	/^ffff800000109d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109d14	kernel.asm	/^ffff800000109d14:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109d17	kernel.asm	/^ffff800000109d17:	0f be c0             	movsbl %al,%eax$/;"	l
ffff800000109d1a	kernel.asm	/^ffff800000109d1a:	89 c7                	mov    %eax,%edi$/;"	l
ffff800000109d1c	kernel.asm	/^ffff800000109d1c:	48 b8 8e 9d 10 00 00 	movabs $0xffff800000109d8e,%rax$/;"	l
ffff800000109d23	kernel.asm	/^ffff800000109d23:	80 ff ff $/;"	l
ffff800000109d26	kernel.asm	/^ffff800000109d26:	ff d0                	callq  *%rax$/;"	l
ffff800000109d28	kernel.asm	/^ffff800000109d28:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)$/;"	l
ffff800000109d2d	kernel.asm	/^ffff800000109d2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff800000109d31	kernel.asm	/^ffff800000109d31:	0f b6 00             	movzbl (%rax),%eax$/;"	l
ffff800000109d34	kernel.asm	/^ffff800000109d34:	84 c0                	test   %al,%al$/;"	l
ffff800000109d36	kernel.asm	/^ffff800000109d36:	75 d8                	jne    ffff800000109d10 <uartearlyinit+0xd7>$/;"	l
ffff800000109d38	kernel.asm	/^ffff800000109d38:	eb 01                	jmp    ffff800000109d3b <uartearlyinit+0x102>$/;"	l
ffff800000109d3a	kernel.asm	/^ffff800000109d3a:	90                   	nop$/;"	l
ffff800000109d3b	kernel.asm	/^ffff800000109d3b:	c9                   	leaveq $/;"	l
ffff800000109d3c	kernel.asm	/^ffff800000109d3c:	c3                   	retq   $/;"	l
ffff800000109d3d	kernel.asm	/^ffff800000109d3d <uartinit>:$/;"	l
ffff800000109d3d	kernel.asm	/^ffff800000109d3d:	55                   	push   %rbp$/;"	l
ffff800000109d3e	kernel.asm	/^ffff800000109d3e:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109d41	kernel.asm	/^ffff800000109d41:	48 b8 2c e4 11 00 00 	movabs $0xffff80000011e42c,%rax$/;"	l
ffff800000109d48	kernel.asm	/^ffff800000109d48:	80 ff ff $/;"	l
ffff800000109d4b	kernel.asm	/^ffff800000109d4b:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109d4d	kernel.asm	/^ffff800000109d4d:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109d4f	kernel.asm	/^ffff800000109d4f:	74 3a                	je     ffff800000109d8b <uartinit+0x4e>$/;"	l
ffff800000109d51	kernel.asm	/^ffff800000109d51:	bf fa 03 00 00       	mov    $0x3fa,%edi$/;"	l
ffff800000109d56	kernel.asm	/^ffff800000109d56:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109d5d	kernel.asm	/^ffff800000109d5d:	80 ff ff $/;"	l
ffff800000109d60	kernel.asm	/^ffff800000109d60:	ff d0                	callq  *%rax$/;"	l
ffff800000109d62	kernel.asm	/^ffff800000109d62:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109d67	kernel.asm	/^ffff800000109d67:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109d6e	kernel.asm	/^ffff800000109d6e:	80 ff ff $/;"	l
ffff800000109d71	kernel.asm	/^ffff800000109d71:	ff d0                	callq  *%rax$/;"	l
ffff800000109d73	kernel.asm	/^ffff800000109d73:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff800000109d78	kernel.asm	/^ffff800000109d78:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff800000109d7d	kernel.asm	/^ffff800000109d7d:	48 b8 fa 40 10 00 00 	movabs $0xffff8000001040fa,%rax$/;"	l
ffff800000109d84	kernel.asm	/^ffff800000109d84:	80 ff ff $/;"	l
ffff800000109d87	kernel.asm	/^ffff800000109d87:	ff d0                	callq  *%rax$/;"	l
ffff800000109d89	kernel.asm	/^ffff800000109d89:	eb 01                	jmp    ffff800000109d8c <uartinit+0x4f>$/;"	l
ffff800000109d8b	kernel.asm	/^ffff800000109d8b:	90                   	nop$/;"	l
ffff800000109d8c	kernel.asm	/^ffff800000109d8c:	5d                   	pop    %rbp$/;"	l
ffff800000109d8d	kernel.asm	/^ffff800000109d8d:	c3                   	retq   $/;"	l
ffff800000109d8e	kernel.asm	/^ffff800000109d8e <uartputc>:$/;"	l
ffff800000109d8e	kernel.asm	/^ffff800000109d8e:	55                   	push   %rbp$/;"	l
ffff800000109d8f	kernel.asm	/^ffff800000109d8f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109d92	kernel.asm	/^ffff800000109d92:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff800000109d96	kernel.asm	/^ffff800000109d96:	89 7d ec             	mov    %edi,-0x14(%rbp)$/;"	l
ffff800000109d99	kernel.asm	/^ffff800000109d99:	48 b8 2c e4 11 00 00 	movabs $0xffff80000011e42c,%rax$/;"	l
ffff800000109da0	kernel.asm	/^ffff800000109da0:	80 ff ff $/;"	l
ffff800000109da3	kernel.asm	/^ffff800000109da3:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109da5	kernel.asm	/^ffff800000109da5:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109da7	kernel.asm	/^ffff800000109da7:	74 5a                	je     ffff800000109e03 <uartputc+0x75>$/;"	l
ffff800000109da9	kernel.asm	/^ffff800000109da9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff800000109db0	kernel.asm	/^ffff800000109db0:	eb 15                	jmp    ffff800000109dc7 <uartputc+0x39>$/;"	l
ffff800000109db2	kernel.asm	/^ffff800000109db2:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff800000109db7	kernel.asm	/^ffff800000109db7:	48 b8 36 49 10 00 00 	movabs $0xffff800000104936,%rax$/;"	l
ffff800000109dbe	kernel.asm	/^ffff800000109dbe:	80 ff ff $/;"	l
ffff800000109dc1	kernel.asm	/^ffff800000109dc1:	ff d0                	callq  *%rax$/;"	l
ffff800000109dc3	kernel.asm	/^ffff800000109dc3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff800000109dc7	kernel.asm	/^ffff800000109dc7:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%rbp)$/;"	l
ffff800000109dcb	kernel.asm	/^ffff800000109dcb:	7f 1b                	jg     ffff800000109de8 <uartputc+0x5a>$/;"	l
ffff800000109dcd	kernel.asm	/^ffff800000109dcd:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109dd2	kernel.asm	/^ffff800000109dd2:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109dd9	kernel.asm	/^ffff800000109dd9:	80 ff ff $/;"	l
ffff800000109ddc	kernel.asm	/^ffff800000109ddc:	ff d0                	callq  *%rax$/;"	l
ffff800000109dde	kernel.asm	/^ffff800000109dde:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109de1	kernel.asm	/^ffff800000109de1:	83 e0 20             	and    $0x20,%eax$/;"	l
ffff800000109de4	kernel.asm	/^ffff800000109de4:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109de6	kernel.asm	/^ffff800000109de6:	74 ca                	je     ffff800000109db2 <uartputc+0x24>$/;"	l
ffff800000109de8	kernel.asm	/^ffff800000109de8:	8b 45 ec             	mov    -0x14(%rbp),%eax$/;"	l
ffff800000109deb	kernel.asm	/^ffff800000109deb:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109dee	kernel.asm	/^ffff800000109dee:	89 c6                	mov    %eax,%esi$/;"	l
ffff800000109df0	kernel.asm	/^ffff800000109df0:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109df5	kernel.asm	/^ffff800000109df5:	48 b8 1a 9c 10 00 00 	movabs $0xffff800000109c1a,%rax$/;"	l
ffff800000109dfc	kernel.asm	/^ffff800000109dfc:	80 ff ff $/;"	l
ffff800000109dff	kernel.asm	/^ffff800000109dff:	ff d0                	callq  *%rax$/;"	l
ffff800000109e01	kernel.asm	/^ffff800000109e01:	eb 01                	jmp    ffff800000109e04 <uartputc+0x76>$/;"	l
ffff800000109e03	kernel.asm	/^ffff800000109e03:	90                   	nop$/;"	l
ffff800000109e04	kernel.asm	/^ffff800000109e04:	c9                   	leaveq $/;"	l
ffff800000109e05	kernel.asm	/^ffff800000109e05:	c3                   	retq   $/;"	l
ffff800000109e06	kernel.asm	/^ffff800000109e06 <uartgetc>:$/;"	l
ffff800000109e06	kernel.asm	/^ffff800000109e06:	55                   	push   %rbp$/;"	l
ffff800000109e07	kernel.asm	/^ffff800000109e07:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109e0a	kernel.asm	/^ffff800000109e0a:	48 b8 2c e4 11 00 00 	movabs $0xffff80000011e42c,%rax$/;"	l
ffff800000109e11	kernel.asm	/^ffff800000109e11:	80 ff ff $/;"	l
ffff800000109e14	kernel.asm	/^ffff800000109e14:	8b 00                	mov    (%rax),%eax$/;"	l
ffff800000109e16	kernel.asm	/^ffff800000109e16:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109e18	kernel.asm	/^ffff800000109e18:	75 07                	jne    ffff800000109e21 <uartgetc+0x1b>$/;"	l
ffff800000109e1a	kernel.asm	/^ffff800000109e1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109e1f	kernel.asm	/^ffff800000109e1f:	eb 36                	jmp    ffff800000109e57 <uartgetc+0x51>$/;"	l
ffff800000109e21	kernel.asm	/^ffff800000109e21:	bf fd 03 00 00       	mov    $0x3fd,%edi$/;"	l
ffff800000109e26	kernel.asm	/^ffff800000109e26:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109e2d	kernel.asm	/^ffff800000109e2d:	80 ff ff $/;"	l
ffff800000109e30	kernel.asm	/^ffff800000109e30:	ff d0                	callq  *%rax$/;"	l
ffff800000109e32	kernel.asm	/^ffff800000109e32:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109e35	kernel.asm	/^ffff800000109e35:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff800000109e38	kernel.asm	/^ffff800000109e38:	85 c0                	test   %eax,%eax$/;"	l
ffff800000109e3a	kernel.asm	/^ffff800000109e3a:	75 07                	jne    ffff800000109e43 <uartgetc+0x3d>$/;"	l
ffff800000109e3c	kernel.asm	/^ffff800000109e3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff800000109e41	kernel.asm	/^ffff800000109e41:	eb 14                	jmp    ffff800000109e57 <uartgetc+0x51>$/;"	l
ffff800000109e43	kernel.asm	/^ffff800000109e43:	bf f8 03 00 00       	mov    $0x3f8,%edi$/;"	l
ffff800000109e48	kernel.asm	/^ffff800000109e48:	48 b8 fc 9b 10 00 00 	movabs $0xffff800000109bfc,%rax$/;"	l
ffff800000109e4f	kernel.asm	/^ffff800000109e4f:	80 ff ff $/;"	l
ffff800000109e52	kernel.asm	/^ffff800000109e52:	ff d0                	callq  *%rax$/;"	l
ffff800000109e54	kernel.asm	/^ffff800000109e54:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff800000109e57	kernel.asm	/^ffff800000109e57:	5d                   	pop    %rbp$/;"	l
ffff800000109e58	kernel.asm	/^ffff800000109e58:	c3                   	retq   $/;"	l
ffff800000109e59	kernel.asm	/^ffff800000109e59 <uartintr>:$/;"	l
ffff800000109e59	kernel.asm	/^ffff800000109e59:	55                   	push   %rbp$/;"	l
ffff800000109e5a	kernel.asm	/^ffff800000109e5a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff800000109e5d	kernel.asm	/^ffff800000109e5d:	48 bf 06 9e 10 00 00 	movabs $0xffff800000109e06,%rdi$/;"	l
ffff800000109e64	kernel.asm	/^ffff800000109e64:	80 ff ff $/;"	l
ffff800000109e67	kernel.asm	/^ffff800000109e67:	48 b8 fa 0e 10 00 00 	movabs $0xffff800000100efa,%rax$/;"	l
ffff800000109e6e	kernel.asm	/^ffff800000109e6e:	80 ff ff $/;"	l
ffff800000109e71	kernel.asm	/^ffff800000109e71:	ff d0                	callq  *%rax$/;"	l
ffff800000109e73	kernel.asm	/^ffff800000109e73:	90                   	nop$/;"	l
ffff800000109e74	kernel.asm	/^ffff800000109e74:	5d                   	pop    %rbp$/;"	l
ffff800000109e75	kernel.asm	/^ffff800000109e75:	c3                   	retq   $/;"	l
ffff800000109e76	kernel.asm	/^ffff800000109e76 <vector0>:$/;"	l
ffff800000109e76	kernel.asm	/^ffff800000109e76:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e78	kernel.asm	/^ffff800000109e78:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e7a	kernel.asm	/^ffff800000109e7a:	e9 85 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109e7f	kernel.asm	/^ffff800000109e7f <vector1>:$/;"	l
ffff800000109e7f	kernel.asm	/^ffff800000109e7f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e81	kernel.asm	/^ffff800000109e81:	6a 01                	pushq  $0x1$/;"	l
ffff800000109e83	kernel.asm	/^ffff800000109e83:	e9 7c f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109e88	kernel.asm	/^ffff800000109e88 <vector2>:$/;"	l
ffff800000109e88	kernel.asm	/^ffff800000109e88:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e8a	kernel.asm	/^ffff800000109e8a:	6a 02                	pushq  $0x2$/;"	l
ffff800000109e8c	kernel.asm	/^ffff800000109e8c:	e9 73 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109e91	kernel.asm	/^ffff800000109e91 <vector3>:$/;"	l
ffff800000109e91	kernel.asm	/^ffff800000109e91:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e93	kernel.asm	/^ffff800000109e93:	6a 03                	pushq  $0x3$/;"	l
ffff800000109e95	kernel.asm	/^ffff800000109e95:	e9 6a f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109e9a	kernel.asm	/^ffff800000109e9a <vector4>:$/;"	l
ffff800000109e9a	kernel.asm	/^ffff800000109e9a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109e9c	kernel.asm	/^ffff800000109e9c:	6a 04                	pushq  $0x4$/;"	l
ffff800000109e9e	kernel.asm	/^ffff800000109e9e:	e9 61 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ea3	kernel.asm	/^ffff800000109ea3 <vector5>:$/;"	l
ffff800000109ea3	kernel.asm	/^ffff800000109ea3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ea5	kernel.asm	/^ffff800000109ea5:	6a 05                	pushq  $0x5$/;"	l
ffff800000109ea7	kernel.asm	/^ffff800000109ea7:	e9 58 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109eac	kernel.asm	/^ffff800000109eac <vector6>:$/;"	l
ffff800000109eac	kernel.asm	/^ffff800000109eac:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eae	kernel.asm	/^ffff800000109eae:	6a 06                	pushq  $0x6$/;"	l
ffff800000109eb0	kernel.asm	/^ffff800000109eb0:	e9 4f f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109eb5	kernel.asm	/^ffff800000109eb5 <vector7>:$/;"	l
ffff800000109eb5	kernel.asm	/^ffff800000109eb5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109eb7	kernel.asm	/^ffff800000109eb7:	6a 07                	pushq  $0x7$/;"	l
ffff800000109eb9	kernel.asm	/^ffff800000109eb9:	e9 46 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ebe	kernel.asm	/^ffff800000109ebe <vector8>:$/;"	l
ffff800000109ebe	kernel.asm	/^ffff800000109ebe:	6a 08                	pushq  $0x8$/;"	l
ffff800000109ec0	kernel.asm	/^ffff800000109ec0:	e9 3f f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ec5	kernel.asm	/^ffff800000109ec5 <vector9>:$/;"	l
ffff800000109ec5	kernel.asm	/^ffff800000109ec5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ec7	kernel.asm	/^ffff800000109ec7:	6a 09                	pushq  $0x9$/;"	l
ffff800000109ec9	kernel.asm	/^ffff800000109ec9:	e9 36 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ece	kernel.asm	/^ffff800000109ece <vector10>:$/;"	l
ffff800000109ece	kernel.asm	/^ffff800000109ece:	6a 0a                	pushq  $0xa$/;"	l
ffff800000109ed0	kernel.asm	/^ffff800000109ed0:	e9 2f f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ed5	kernel.asm	/^ffff800000109ed5 <vector11>:$/;"	l
ffff800000109ed5	kernel.asm	/^ffff800000109ed5:	6a 0b                	pushq  $0xb$/;"	l
ffff800000109ed7	kernel.asm	/^ffff800000109ed7:	e9 28 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109edc	kernel.asm	/^ffff800000109edc <vector12>:$/;"	l
ffff800000109edc	kernel.asm	/^ffff800000109edc:	6a 0c                	pushq  $0xc$/;"	l
ffff800000109ede	kernel.asm	/^ffff800000109ede:	e9 21 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ee3	kernel.asm	/^ffff800000109ee3 <vector13>:$/;"	l
ffff800000109ee3	kernel.asm	/^ffff800000109ee3:	6a 0d                	pushq  $0xd$/;"	l
ffff800000109ee5	kernel.asm	/^ffff800000109ee5:	e9 1a f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109eea	kernel.asm	/^ffff800000109eea <vector14>:$/;"	l
ffff800000109eea	kernel.asm	/^ffff800000109eea:	6a 0e                	pushq  $0xe$/;"	l
ffff800000109eec	kernel.asm	/^ffff800000109eec:	e9 13 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ef1	kernel.asm	/^ffff800000109ef1 <vector15>:$/;"	l
ffff800000109ef1	kernel.asm	/^ffff800000109ef1:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ef3	kernel.asm	/^ffff800000109ef3:	6a 0f                	pushq  $0xf$/;"	l
ffff800000109ef5	kernel.asm	/^ffff800000109ef5:	e9 0a f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109efa	kernel.asm	/^ffff800000109efa <vector16>:$/;"	l
ffff800000109efa	kernel.asm	/^ffff800000109efa:	6a 00                	pushq  $0x0$/;"	l
ffff800000109efc	kernel.asm	/^ffff800000109efc:	6a 10                	pushq  $0x10$/;"	l
ffff800000109efe	kernel.asm	/^ffff800000109efe:	e9 01 f6 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f03	kernel.asm	/^ffff800000109f03 <vector17>:$/;"	l
ffff800000109f03	kernel.asm	/^ffff800000109f03:	6a 11                	pushq  $0x11$/;"	l
ffff800000109f05	kernel.asm	/^ffff800000109f05:	e9 fa f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f0a	kernel.asm	/^ffff800000109f0a <vector18>:$/;"	l
ffff800000109f0a	kernel.asm	/^ffff800000109f0a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f0c	kernel.asm	/^ffff800000109f0c:	6a 12                	pushq  $0x12$/;"	l
ffff800000109f0e	kernel.asm	/^ffff800000109f0e:	e9 f1 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f13	kernel.asm	/^ffff800000109f13 <vector19>:$/;"	l
ffff800000109f13	kernel.asm	/^ffff800000109f13:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f15	kernel.asm	/^ffff800000109f15:	6a 13                	pushq  $0x13$/;"	l
ffff800000109f17	kernel.asm	/^ffff800000109f17:	e9 e8 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f1c	kernel.asm	/^ffff800000109f1c <vector20>:$/;"	l
ffff800000109f1c	kernel.asm	/^ffff800000109f1c:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f1e	kernel.asm	/^ffff800000109f1e:	6a 14                	pushq  $0x14$/;"	l
ffff800000109f20	kernel.asm	/^ffff800000109f20:	e9 df f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f25	kernel.asm	/^ffff800000109f25 <vector21>:$/;"	l
ffff800000109f25	kernel.asm	/^ffff800000109f25:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f27	kernel.asm	/^ffff800000109f27:	6a 15                	pushq  $0x15$/;"	l
ffff800000109f29	kernel.asm	/^ffff800000109f29:	e9 d6 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f2e	kernel.asm	/^ffff800000109f2e <vector22>:$/;"	l
ffff800000109f2e	kernel.asm	/^ffff800000109f2e:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f30	kernel.asm	/^ffff800000109f30:	6a 16                	pushq  $0x16$/;"	l
ffff800000109f32	kernel.asm	/^ffff800000109f32:	e9 cd f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f37	kernel.asm	/^ffff800000109f37 <vector23>:$/;"	l
ffff800000109f37	kernel.asm	/^ffff800000109f37:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f39	kernel.asm	/^ffff800000109f39:	6a 17                	pushq  $0x17$/;"	l
ffff800000109f3b	kernel.asm	/^ffff800000109f3b:	e9 c4 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f40	kernel.asm	/^ffff800000109f40 <vector24>:$/;"	l
ffff800000109f40	kernel.asm	/^ffff800000109f40:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f42	kernel.asm	/^ffff800000109f42:	6a 18                	pushq  $0x18$/;"	l
ffff800000109f44	kernel.asm	/^ffff800000109f44:	e9 bb f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f49	kernel.asm	/^ffff800000109f49 <vector25>:$/;"	l
ffff800000109f49	kernel.asm	/^ffff800000109f49:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f4b	kernel.asm	/^ffff800000109f4b:	6a 19                	pushq  $0x19$/;"	l
ffff800000109f4d	kernel.asm	/^ffff800000109f4d:	e9 b2 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f52	kernel.asm	/^ffff800000109f52 <vector26>:$/;"	l
ffff800000109f52	kernel.asm	/^ffff800000109f52:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f54	kernel.asm	/^ffff800000109f54:	6a 1a                	pushq  $0x1a$/;"	l
ffff800000109f56	kernel.asm	/^ffff800000109f56:	e9 a9 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f5b	kernel.asm	/^ffff800000109f5b <vector27>:$/;"	l
ffff800000109f5b	kernel.asm	/^ffff800000109f5b:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f5d	kernel.asm	/^ffff800000109f5d:	6a 1b                	pushq  $0x1b$/;"	l
ffff800000109f5f	kernel.asm	/^ffff800000109f5f:	e9 a0 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f64	kernel.asm	/^ffff800000109f64 <vector28>:$/;"	l
ffff800000109f64	kernel.asm	/^ffff800000109f64:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f66	kernel.asm	/^ffff800000109f66:	6a 1c                	pushq  $0x1c$/;"	l
ffff800000109f68	kernel.asm	/^ffff800000109f68:	e9 97 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f6d	kernel.asm	/^ffff800000109f6d <vector29>:$/;"	l
ffff800000109f6d	kernel.asm	/^ffff800000109f6d:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f6f	kernel.asm	/^ffff800000109f6f:	6a 1d                	pushq  $0x1d$/;"	l
ffff800000109f71	kernel.asm	/^ffff800000109f71:	e9 8e f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f76	kernel.asm	/^ffff800000109f76 <vector30>:$/;"	l
ffff800000109f76	kernel.asm	/^ffff800000109f76:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f78	kernel.asm	/^ffff800000109f78:	6a 1e                	pushq  $0x1e$/;"	l
ffff800000109f7a	kernel.asm	/^ffff800000109f7a:	e9 85 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f7f	kernel.asm	/^ffff800000109f7f <vector31>:$/;"	l
ffff800000109f7f	kernel.asm	/^ffff800000109f7f:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f81	kernel.asm	/^ffff800000109f81:	6a 1f                	pushq  $0x1f$/;"	l
ffff800000109f83	kernel.asm	/^ffff800000109f83:	e9 7c f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f88	kernel.asm	/^ffff800000109f88 <vector32>:$/;"	l
ffff800000109f88	kernel.asm	/^ffff800000109f88:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f8a	kernel.asm	/^ffff800000109f8a:	6a 20                	pushq  $0x20$/;"	l
ffff800000109f8c	kernel.asm	/^ffff800000109f8c:	e9 73 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f91	kernel.asm	/^ffff800000109f91 <vector33>:$/;"	l
ffff800000109f91	kernel.asm	/^ffff800000109f91:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f93	kernel.asm	/^ffff800000109f93:	6a 21                	pushq  $0x21$/;"	l
ffff800000109f95	kernel.asm	/^ffff800000109f95:	e9 6a f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109f9a	kernel.asm	/^ffff800000109f9a <vector34>:$/;"	l
ffff800000109f9a	kernel.asm	/^ffff800000109f9a:	6a 00                	pushq  $0x0$/;"	l
ffff800000109f9c	kernel.asm	/^ffff800000109f9c:	6a 22                	pushq  $0x22$/;"	l
ffff800000109f9e	kernel.asm	/^ffff800000109f9e:	e9 61 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fa3	kernel.asm	/^ffff800000109fa3 <vector35>:$/;"	l
ffff800000109fa3	kernel.asm	/^ffff800000109fa3:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fa5	kernel.asm	/^ffff800000109fa5:	6a 23                	pushq  $0x23$/;"	l
ffff800000109fa7	kernel.asm	/^ffff800000109fa7:	e9 58 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fac	kernel.asm	/^ffff800000109fac <vector36>:$/;"	l
ffff800000109fac	kernel.asm	/^ffff800000109fac:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fae	kernel.asm	/^ffff800000109fae:	6a 24                	pushq  $0x24$/;"	l
ffff800000109fb0	kernel.asm	/^ffff800000109fb0:	e9 4f f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fb5	kernel.asm	/^ffff800000109fb5 <vector37>:$/;"	l
ffff800000109fb5	kernel.asm	/^ffff800000109fb5:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fb7	kernel.asm	/^ffff800000109fb7:	6a 25                	pushq  $0x25$/;"	l
ffff800000109fb9	kernel.asm	/^ffff800000109fb9:	e9 46 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fbe	kernel.asm	/^ffff800000109fbe <vector38>:$/;"	l
ffff800000109fbe	kernel.asm	/^ffff800000109fbe:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fc0	kernel.asm	/^ffff800000109fc0:	6a 26                	pushq  $0x26$/;"	l
ffff800000109fc2	kernel.asm	/^ffff800000109fc2:	e9 3d f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fc7	kernel.asm	/^ffff800000109fc7 <vector39>:$/;"	l
ffff800000109fc7	kernel.asm	/^ffff800000109fc7:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fc9	kernel.asm	/^ffff800000109fc9:	6a 27                	pushq  $0x27$/;"	l
ffff800000109fcb	kernel.asm	/^ffff800000109fcb:	e9 34 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fd0	kernel.asm	/^ffff800000109fd0 <vector40>:$/;"	l
ffff800000109fd0	kernel.asm	/^ffff800000109fd0:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fd2	kernel.asm	/^ffff800000109fd2:	6a 28                	pushq  $0x28$/;"	l
ffff800000109fd4	kernel.asm	/^ffff800000109fd4:	e9 2b f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fd9	kernel.asm	/^ffff800000109fd9 <vector41>:$/;"	l
ffff800000109fd9	kernel.asm	/^ffff800000109fd9:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fdb	kernel.asm	/^ffff800000109fdb:	6a 29                	pushq  $0x29$/;"	l
ffff800000109fdd	kernel.asm	/^ffff800000109fdd:	e9 22 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109fe2	kernel.asm	/^ffff800000109fe2 <vector42>:$/;"	l
ffff800000109fe2	kernel.asm	/^ffff800000109fe2:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fe4	kernel.asm	/^ffff800000109fe4:	6a 2a                	pushq  $0x2a$/;"	l
ffff800000109fe6	kernel.asm	/^ffff800000109fe6:	e9 19 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109feb	kernel.asm	/^ffff800000109feb <vector43>:$/;"	l
ffff800000109feb	kernel.asm	/^ffff800000109feb:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fed	kernel.asm	/^ffff800000109fed:	6a 2b                	pushq  $0x2b$/;"	l
ffff800000109fef	kernel.asm	/^ffff800000109fef:	e9 10 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ff4	kernel.asm	/^ffff800000109ff4 <vector44>:$/;"	l
ffff800000109ff4	kernel.asm	/^ffff800000109ff4:	6a 00                	pushq  $0x0$/;"	l
ffff800000109ff6	kernel.asm	/^ffff800000109ff6:	6a 2c                	pushq  $0x2c$/;"	l
ffff800000109ff8	kernel.asm	/^ffff800000109ff8:	e9 07 f5 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff800000109ffd	kernel.asm	/^ffff800000109ffd <vector45>:$/;"	l
ffff800000109ffd	kernel.asm	/^ffff800000109ffd:	6a 00                	pushq  $0x0$/;"	l
ffff800000109fff	kernel.asm	/^ffff800000109fff:	6a 2d                	pushq  $0x2d$/;"	l
ffff80000010a001	kernel.asm	/^ffff80000010a001:	e9 fe f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a006	kernel.asm	/^ffff80000010a006 <vector46>:$/;"	l
ffff80000010a006	kernel.asm	/^ffff80000010a006:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a008	kernel.asm	/^ffff80000010a008:	6a 2e                	pushq  $0x2e$/;"	l
ffff80000010a00a	kernel.asm	/^ffff80000010a00a:	e9 f5 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a00f	kernel.asm	/^ffff80000010a00f <vector47>:$/;"	l
ffff80000010a00f	kernel.asm	/^ffff80000010a00f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a011	kernel.asm	/^ffff80000010a011:	6a 2f                	pushq  $0x2f$/;"	l
ffff80000010a013	kernel.asm	/^ffff80000010a013:	e9 ec f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a018	kernel.asm	/^ffff80000010a018 <vector48>:$/;"	l
ffff80000010a018	kernel.asm	/^ffff80000010a018:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a01a	kernel.asm	/^ffff80000010a01a:	6a 30                	pushq  $0x30$/;"	l
ffff80000010a01c	kernel.asm	/^ffff80000010a01c:	e9 e3 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a021	kernel.asm	/^ffff80000010a021 <vector49>:$/;"	l
ffff80000010a021	kernel.asm	/^ffff80000010a021:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a023	kernel.asm	/^ffff80000010a023:	6a 31                	pushq  $0x31$/;"	l
ffff80000010a025	kernel.asm	/^ffff80000010a025:	e9 da f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a02a	kernel.asm	/^ffff80000010a02a <vector50>:$/;"	l
ffff80000010a02a	kernel.asm	/^ffff80000010a02a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a02c	kernel.asm	/^ffff80000010a02c:	6a 32                	pushq  $0x32$/;"	l
ffff80000010a02e	kernel.asm	/^ffff80000010a02e:	e9 d1 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a033	kernel.asm	/^ffff80000010a033 <vector51>:$/;"	l
ffff80000010a033	kernel.asm	/^ffff80000010a033:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a035	kernel.asm	/^ffff80000010a035:	6a 33                	pushq  $0x33$/;"	l
ffff80000010a037	kernel.asm	/^ffff80000010a037:	e9 c8 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a03c	kernel.asm	/^ffff80000010a03c <vector52>:$/;"	l
ffff80000010a03c	kernel.asm	/^ffff80000010a03c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a03e	kernel.asm	/^ffff80000010a03e:	6a 34                	pushq  $0x34$/;"	l
ffff80000010a040	kernel.asm	/^ffff80000010a040:	e9 bf f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a045	kernel.asm	/^ffff80000010a045 <vector53>:$/;"	l
ffff80000010a045	kernel.asm	/^ffff80000010a045:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a047	kernel.asm	/^ffff80000010a047:	6a 35                	pushq  $0x35$/;"	l
ffff80000010a049	kernel.asm	/^ffff80000010a049:	e9 b6 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a04e	kernel.asm	/^ffff80000010a04e <vector54>:$/;"	l
ffff80000010a04e	kernel.asm	/^ffff80000010a04e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a050	kernel.asm	/^ffff80000010a050:	6a 36                	pushq  $0x36$/;"	l
ffff80000010a052	kernel.asm	/^ffff80000010a052:	e9 ad f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a057	kernel.asm	/^ffff80000010a057 <vector55>:$/;"	l
ffff80000010a057	kernel.asm	/^ffff80000010a057:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a059	kernel.asm	/^ffff80000010a059:	6a 37                	pushq  $0x37$/;"	l
ffff80000010a05b	kernel.asm	/^ffff80000010a05b:	e9 a4 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a060	kernel.asm	/^ffff80000010a060 <vector56>:$/;"	l
ffff80000010a060	kernel.asm	/^ffff80000010a060:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a062	kernel.asm	/^ffff80000010a062:	6a 38                	pushq  $0x38$/;"	l
ffff80000010a064	kernel.asm	/^ffff80000010a064:	e9 9b f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a069	kernel.asm	/^ffff80000010a069 <vector57>:$/;"	l
ffff80000010a069	kernel.asm	/^ffff80000010a069:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a06b	kernel.asm	/^ffff80000010a06b:	6a 39                	pushq  $0x39$/;"	l
ffff80000010a06d	kernel.asm	/^ffff80000010a06d:	e9 92 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a072	kernel.asm	/^ffff80000010a072 <vector58>:$/;"	l
ffff80000010a072	kernel.asm	/^ffff80000010a072:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a074	kernel.asm	/^ffff80000010a074:	6a 3a                	pushq  $0x3a$/;"	l
ffff80000010a076	kernel.asm	/^ffff80000010a076:	e9 89 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a07b	kernel.asm	/^ffff80000010a07b <vector59>:$/;"	l
ffff80000010a07b	kernel.asm	/^ffff80000010a07b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a07d	kernel.asm	/^ffff80000010a07d:	6a 3b                	pushq  $0x3b$/;"	l
ffff80000010a07f	kernel.asm	/^ffff80000010a07f:	e9 80 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a084	kernel.asm	/^ffff80000010a084 <vector60>:$/;"	l
ffff80000010a084	kernel.asm	/^ffff80000010a084:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a086	kernel.asm	/^ffff80000010a086:	6a 3c                	pushq  $0x3c$/;"	l
ffff80000010a088	kernel.asm	/^ffff80000010a088:	e9 77 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a08d	kernel.asm	/^ffff80000010a08d <vector61>:$/;"	l
ffff80000010a08d	kernel.asm	/^ffff80000010a08d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a08f	kernel.asm	/^ffff80000010a08f:	6a 3d                	pushq  $0x3d$/;"	l
ffff80000010a091	kernel.asm	/^ffff80000010a091:	e9 6e f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a096	kernel.asm	/^ffff80000010a096 <vector62>:$/;"	l
ffff80000010a096	kernel.asm	/^ffff80000010a096:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a098	kernel.asm	/^ffff80000010a098:	6a 3e                	pushq  $0x3e$/;"	l
ffff80000010a09a	kernel.asm	/^ffff80000010a09a:	e9 65 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a09f	kernel.asm	/^ffff80000010a09f <vector63>:$/;"	l
ffff80000010a09f	kernel.asm	/^ffff80000010a09f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0a1	kernel.asm	/^ffff80000010a0a1:	6a 3f                	pushq  $0x3f$/;"	l
ffff80000010a0a3	kernel.asm	/^ffff80000010a0a3:	e9 5c f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0a8	kernel.asm	/^ffff80000010a0a8 <vector64>:$/;"	l
ffff80000010a0a8	kernel.asm	/^ffff80000010a0a8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0aa	kernel.asm	/^ffff80000010a0aa:	6a 40                	pushq  $0x40$/;"	l
ffff80000010a0ac	kernel.asm	/^ffff80000010a0ac:	e9 53 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0b1	kernel.asm	/^ffff80000010a0b1 <vector65>:$/;"	l
ffff80000010a0b1	kernel.asm	/^ffff80000010a0b1:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0b3	kernel.asm	/^ffff80000010a0b3:	6a 41                	pushq  $0x41$/;"	l
ffff80000010a0b5	kernel.asm	/^ffff80000010a0b5:	e9 4a f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0ba	kernel.asm	/^ffff80000010a0ba <vector66>:$/;"	l
ffff80000010a0ba	kernel.asm	/^ffff80000010a0ba:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0bc	kernel.asm	/^ffff80000010a0bc:	6a 42                	pushq  $0x42$/;"	l
ffff80000010a0be	kernel.asm	/^ffff80000010a0be:	e9 41 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0c3	kernel.asm	/^ffff80000010a0c3 <vector67>:$/;"	l
ffff80000010a0c3	kernel.asm	/^ffff80000010a0c3:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0c5	kernel.asm	/^ffff80000010a0c5:	6a 43                	pushq  $0x43$/;"	l
ffff80000010a0c7	kernel.asm	/^ffff80000010a0c7:	e9 38 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0cc	kernel.asm	/^ffff80000010a0cc <vector68>:$/;"	l
ffff80000010a0cc	kernel.asm	/^ffff80000010a0cc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0ce	kernel.asm	/^ffff80000010a0ce:	6a 44                	pushq  $0x44$/;"	l
ffff80000010a0d0	kernel.asm	/^ffff80000010a0d0:	e9 2f f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0d5	kernel.asm	/^ffff80000010a0d5 <vector69>:$/;"	l
ffff80000010a0d5	kernel.asm	/^ffff80000010a0d5:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0d7	kernel.asm	/^ffff80000010a0d7:	6a 45                	pushq  $0x45$/;"	l
ffff80000010a0d9	kernel.asm	/^ffff80000010a0d9:	e9 26 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0de	kernel.asm	/^ffff80000010a0de <vector70>:$/;"	l
ffff80000010a0de	kernel.asm	/^ffff80000010a0de:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0e0	kernel.asm	/^ffff80000010a0e0:	6a 46                	pushq  $0x46$/;"	l
ffff80000010a0e2	kernel.asm	/^ffff80000010a0e2:	e9 1d f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0e7	kernel.asm	/^ffff80000010a0e7 <vector71>:$/;"	l
ffff80000010a0e7	kernel.asm	/^ffff80000010a0e7:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0e9	kernel.asm	/^ffff80000010a0e9:	6a 47                	pushq  $0x47$/;"	l
ffff80000010a0eb	kernel.asm	/^ffff80000010a0eb:	e9 14 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0f0	kernel.asm	/^ffff80000010a0f0 <vector72>:$/;"	l
ffff80000010a0f0	kernel.asm	/^ffff80000010a0f0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0f2	kernel.asm	/^ffff80000010a0f2:	6a 48                	pushq  $0x48$/;"	l
ffff80000010a0f4	kernel.asm	/^ffff80000010a0f4:	e9 0b f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a0f9	kernel.asm	/^ffff80000010a0f9 <vector73>:$/;"	l
ffff80000010a0f9	kernel.asm	/^ffff80000010a0f9:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a0fb	kernel.asm	/^ffff80000010a0fb:	6a 49                	pushq  $0x49$/;"	l
ffff80000010a0fd	kernel.asm	/^ffff80000010a0fd:	e9 02 f4 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a102	kernel.asm	/^ffff80000010a102 <vector74>:$/;"	l
ffff80000010a102	kernel.asm	/^ffff80000010a102:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a104	kernel.asm	/^ffff80000010a104:	6a 4a                	pushq  $0x4a$/;"	l
ffff80000010a106	kernel.asm	/^ffff80000010a106:	e9 f9 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a10b	kernel.asm	/^ffff80000010a10b <vector75>:$/;"	l
ffff80000010a10b	kernel.asm	/^ffff80000010a10b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a10d	kernel.asm	/^ffff80000010a10d:	6a 4b                	pushq  $0x4b$/;"	l
ffff80000010a10f	kernel.asm	/^ffff80000010a10f:	e9 f0 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a114	kernel.asm	/^ffff80000010a114 <vector76>:$/;"	l
ffff80000010a114	kernel.asm	/^ffff80000010a114:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a116	kernel.asm	/^ffff80000010a116:	6a 4c                	pushq  $0x4c$/;"	l
ffff80000010a118	kernel.asm	/^ffff80000010a118:	e9 e7 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a11d	kernel.asm	/^ffff80000010a11d <vector77>:$/;"	l
ffff80000010a11d	kernel.asm	/^ffff80000010a11d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a11f	kernel.asm	/^ffff80000010a11f:	6a 4d                	pushq  $0x4d$/;"	l
ffff80000010a121	kernel.asm	/^ffff80000010a121:	e9 de f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a126	kernel.asm	/^ffff80000010a126 <vector78>:$/;"	l
ffff80000010a126	kernel.asm	/^ffff80000010a126:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a128	kernel.asm	/^ffff80000010a128:	6a 4e                	pushq  $0x4e$/;"	l
ffff80000010a12a	kernel.asm	/^ffff80000010a12a:	e9 d5 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a12f	kernel.asm	/^ffff80000010a12f <vector79>:$/;"	l
ffff80000010a12f	kernel.asm	/^ffff80000010a12f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a131	kernel.asm	/^ffff80000010a131:	6a 4f                	pushq  $0x4f$/;"	l
ffff80000010a133	kernel.asm	/^ffff80000010a133:	e9 cc f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a138	kernel.asm	/^ffff80000010a138 <vector80>:$/;"	l
ffff80000010a138	kernel.asm	/^ffff80000010a138:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a13a	kernel.asm	/^ffff80000010a13a:	6a 50                	pushq  $0x50$/;"	l
ffff80000010a13c	kernel.asm	/^ffff80000010a13c:	e9 c3 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a141	kernel.asm	/^ffff80000010a141 <vector81>:$/;"	l
ffff80000010a141	kernel.asm	/^ffff80000010a141:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a143	kernel.asm	/^ffff80000010a143:	6a 51                	pushq  $0x51$/;"	l
ffff80000010a145	kernel.asm	/^ffff80000010a145:	e9 ba f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a14a	kernel.asm	/^ffff80000010a14a <vector82>:$/;"	l
ffff80000010a14a	kernel.asm	/^ffff80000010a14a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a14c	kernel.asm	/^ffff80000010a14c:	6a 52                	pushq  $0x52$/;"	l
ffff80000010a14e	kernel.asm	/^ffff80000010a14e:	e9 b1 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a153	kernel.asm	/^ffff80000010a153 <vector83>:$/;"	l
ffff80000010a153	kernel.asm	/^ffff80000010a153:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a155	kernel.asm	/^ffff80000010a155:	6a 53                	pushq  $0x53$/;"	l
ffff80000010a157	kernel.asm	/^ffff80000010a157:	e9 a8 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a15c	kernel.asm	/^ffff80000010a15c <vector84>:$/;"	l
ffff80000010a15c	kernel.asm	/^ffff80000010a15c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a15e	kernel.asm	/^ffff80000010a15e:	6a 54                	pushq  $0x54$/;"	l
ffff80000010a160	kernel.asm	/^ffff80000010a160:	e9 9f f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a165	kernel.asm	/^ffff80000010a165 <vector85>:$/;"	l
ffff80000010a165	kernel.asm	/^ffff80000010a165:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a167	kernel.asm	/^ffff80000010a167:	6a 55                	pushq  $0x55$/;"	l
ffff80000010a169	kernel.asm	/^ffff80000010a169:	e9 96 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a16e	kernel.asm	/^ffff80000010a16e <vector86>:$/;"	l
ffff80000010a16e	kernel.asm	/^ffff80000010a16e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a170	kernel.asm	/^ffff80000010a170:	6a 56                	pushq  $0x56$/;"	l
ffff80000010a172	kernel.asm	/^ffff80000010a172:	e9 8d f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a177	kernel.asm	/^ffff80000010a177 <vector87>:$/;"	l
ffff80000010a177	kernel.asm	/^ffff80000010a177:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a179	kernel.asm	/^ffff80000010a179:	6a 57                	pushq  $0x57$/;"	l
ffff80000010a17b	kernel.asm	/^ffff80000010a17b:	e9 84 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a180	kernel.asm	/^ffff80000010a180 <vector88>:$/;"	l
ffff80000010a180	kernel.asm	/^ffff80000010a180:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a182	kernel.asm	/^ffff80000010a182:	6a 58                	pushq  $0x58$/;"	l
ffff80000010a184	kernel.asm	/^ffff80000010a184:	e9 7b f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a189	kernel.asm	/^ffff80000010a189 <vector89>:$/;"	l
ffff80000010a189	kernel.asm	/^ffff80000010a189:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a18b	kernel.asm	/^ffff80000010a18b:	6a 59                	pushq  $0x59$/;"	l
ffff80000010a18d	kernel.asm	/^ffff80000010a18d:	e9 72 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a192	kernel.asm	/^ffff80000010a192 <vector90>:$/;"	l
ffff80000010a192	kernel.asm	/^ffff80000010a192:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a194	kernel.asm	/^ffff80000010a194:	6a 5a                	pushq  $0x5a$/;"	l
ffff80000010a196	kernel.asm	/^ffff80000010a196:	e9 69 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a19b	kernel.asm	/^ffff80000010a19b <vector91>:$/;"	l
ffff80000010a19b	kernel.asm	/^ffff80000010a19b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a19d	kernel.asm	/^ffff80000010a19d:	6a 5b                	pushq  $0x5b$/;"	l
ffff80000010a19f	kernel.asm	/^ffff80000010a19f:	e9 60 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1a4	kernel.asm	/^ffff80000010a1a4 <vector92>:$/;"	l
ffff80000010a1a4	kernel.asm	/^ffff80000010a1a4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1a6	kernel.asm	/^ffff80000010a1a6:	6a 5c                	pushq  $0x5c$/;"	l
ffff80000010a1a8	kernel.asm	/^ffff80000010a1a8:	e9 57 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1ad	kernel.asm	/^ffff80000010a1ad <vector93>:$/;"	l
ffff80000010a1ad	kernel.asm	/^ffff80000010a1ad:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1af	kernel.asm	/^ffff80000010a1af:	6a 5d                	pushq  $0x5d$/;"	l
ffff80000010a1b1	kernel.asm	/^ffff80000010a1b1:	e9 4e f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1b6	kernel.asm	/^ffff80000010a1b6 <vector94>:$/;"	l
ffff80000010a1b6	kernel.asm	/^ffff80000010a1b6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1b8	kernel.asm	/^ffff80000010a1b8:	6a 5e                	pushq  $0x5e$/;"	l
ffff80000010a1ba	kernel.asm	/^ffff80000010a1ba:	e9 45 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1bf	kernel.asm	/^ffff80000010a1bf <vector95>:$/;"	l
ffff80000010a1bf	kernel.asm	/^ffff80000010a1bf:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1c1	kernel.asm	/^ffff80000010a1c1:	6a 5f                	pushq  $0x5f$/;"	l
ffff80000010a1c3	kernel.asm	/^ffff80000010a1c3:	e9 3c f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1c8	kernel.asm	/^ffff80000010a1c8 <vector96>:$/;"	l
ffff80000010a1c8	kernel.asm	/^ffff80000010a1c8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1ca	kernel.asm	/^ffff80000010a1ca:	6a 60                	pushq  $0x60$/;"	l
ffff80000010a1cc	kernel.asm	/^ffff80000010a1cc:	e9 33 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1d1	kernel.asm	/^ffff80000010a1d1 <vector97>:$/;"	l
ffff80000010a1d1	kernel.asm	/^ffff80000010a1d1:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1d3	kernel.asm	/^ffff80000010a1d3:	6a 61                	pushq  $0x61$/;"	l
ffff80000010a1d5	kernel.asm	/^ffff80000010a1d5:	e9 2a f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1da	kernel.asm	/^ffff80000010a1da <vector98>:$/;"	l
ffff80000010a1da	kernel.asm	/^ffff80000010a1da:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1dc	kernel.asm	/^ffff80000010a1dc:	6a 62                	pushq  $0x62$/;"	l
ffff80000010a1de	kernel.asm	/^ffff80000010a1de:	e9 21 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1e3	kernel.asm	/^ffff80000010a1e3 <vector99>:$/;"	l
ffff80000010a1e3	kernel.asm	/^ffff80000010a1e3:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1e5	kernel.asm	/^ffff80000010a1e5:	6a 63                	pushq  $0x63$/;"	l
ffff80000010a1e7	kernel.asm	/^ffff80000010a1e7:	e9 18 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1ec	kernel.asm	/^ffff80000010a1ec <vector100>:$/;"	l
ffff80000010a1ec	kernel.asm	/^ffff80000010a1ec:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1ee	kernel.asm	/^ffff80000010a1ee:	6a 64                	pushq  $0x64$/;"	l
ffff80000010a1f0	kernel.asm	/^ffff80000010a1f0:	e9 0f f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1f5	kernel.asm	/^ffff80000010a1f5 <vector101>:$/;"	l
ffff80000010a1f5	kernel.asm	/^ffff80000010a1f5:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a1f7	kernel.asm	/^ffff80000010a1f7:	6a 65                	pushq  $0x65$/;"	l
ffff80000010a1f9	kernel.asm	/^ffff80000010a1f9:	e9 06 f3 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a1fe	kernel.asm	/^ffff80000010a1fe <vector102>:$/;"	l
ffff80000010a1fe	kernel.asm	/^ffff80000010a1fe:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a200	kernel.asm	/^ffff80000010a200:	6a 66                	pushq  $0x66$/;"	l
ffff80000010a202	kernel.asm	/^ffff80000010a202:	e9 fd f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a207	kernel.asm	/^ffff80000010a207 <vector103>:$/;"	l
ffff80000010a207	kernel.asm	/^ffff80000010a207:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a209	kernel.asm	/^ffff80000010a209:	6a 67                	pushq  $0x67$/;"	l
ffff80000010a20b	kernel.asm	/^ffff80000010a20b:	e9 f4 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a210	kernel.asm	/^ffff80000010a210 <vector104>:$/;"	l
ffff80000010a210	kernel.asm	/^ffff80000010a210:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a212	kernel.asm	/^ffff80000010a212:	6a 68                	pushq  $0x68$/;"	l
ffff80000010a214	kernel.asm	/^ffff80000010a214:	e9 eb f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a219	kernel.asm	/^ffff80000010a219 <vector105>:$/;"	l
ffff80000010a219	kernel.asm	/^ffff80000010a219:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a21b	kernel.asm	/^ffff80000010a21b:	6a 69                	pushq  $0x69$/;"	l
ffff80000010a21d	kernel.asm	/^ffff80000010a21d:	e9 e2 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a222	kernel.asm	/^ffff80000010a222 <vector106>:$/;"	l
ffff80000010a222	kernel.asm	/^ffff80000010a222:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a224	kernel.asm	/^ffff80000010a224:	6a 6a                	pushq  $0x6a$/;"	l
ffff80000010a226	kernel.asm	/^ffff80000010a226:	e9 d9 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a22b	kernel.asm	/^ffff80000010a22b <vector107>:$/;"	l
ffff80000010a22b	kernel.asm	/^ffff80000010a22b:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a22d	kernel.asm	/^ffff80000010a22d:	6a 6b                	pushq  $0x6b$/;"	l
ffff80000010a22f	kernel.asm	/^ffff80000010a22f:	e9 d0 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a234	kernel.asm	/^ffff80000010a234 <vector108>:$/;"	l
ffff80000010a234	kernel.asm	/^ffff80000010a234:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a236	kernel.asm	/^ffff80000010a236:	6a 6c                	pushq  $0x6c$/;"	l
ffff80000010a238	kernel.asm	/^ffff80000010a238:	e9 c7 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a23d	kernel.asm	/^ffff80000010a23d <vector109>:$/;"	l
ffff80000010a23d	kernel.asm	/^ffff80000010a23d:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a23f	kernel.asm	/^ffff80000010a23f:	6a 6d                	pushq  $0x6d$/;"	l
ffff80000010a241	kernel.asm	/^ffff80000010a241:	e9 be f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a246	kernel.asm	/^ffff80000010a246 <vector110>:$/;"	l
ffff80000010a246	kernel.asm	/^ffff80000010a246:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a248	kernel.asm	/^ffff80000010a248:	6a 6e                	pushq  $0x6e$/;"	l
ffff80000010a24a	kernel.asm	/^ffff80000010a24a:	e9 b5 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a24f	kernel.asm	/^ffff80000010a24f <vector111>:$/;"	l
ffff80000010a24f	kernel.asm	/^ffff80000010a24f:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a251	kernel.asm	/^ffff80000010a251:	6a 6f                	pushq  $0x6f$/;"	l
ffff80000010a253	kernel.asm	/^ffff80000010a253:	e9 ac f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a258	kernel.asm	/^ffff80000010a258 <vector112>:$/;"	l
ffff80000010a258	kernel.asm	/^ffff80000010a258:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a25a	kernel.asm	/^ffff80000010a25a:	6a 70                	pushq  $0x70$/;"	l
ffff80000010a25c	kernel.asm	/^ffff80000010a25c:	e9 a3 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a261	kernel.asm	/^ffff80000010a261 <vector113>:$/;"	l
ffff80000010a261	kernel.asm	/^ffff80000010a261:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a263	kernel.asm	/^ffff80000010a263:	6a 71                	pushq  $0x71$/;"	l
ffff80000010a265	kernel.asm	/^ffff80000010a265:	e9 9a f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a26a	kernel.asm	/^ffff80000010a26a <vector114>:$/;"	l
ffff80000010a26a	kernel.asm	/^ffff80000010a26a:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a26c	kernel.asm	/^ffff80000010a26c:	6a 72                	pushq  $0x72$/;"	l
ffff80000010a26e	kernel.asm	/^ffff80000010a26e:	e9 91 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a273	kernel.asm	/^ffff80000010a273 <vector115>:$/;"	l
ffff80000010a273	kernel.asm	/^ffff80000010a273:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a275	kernel.asm	/^ffff80000010a275:	6a 73                	pushq  $0x73$/;"	l
ffff80000010a277	kernel.asm	/^ffff80000010a277:	e9 88 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a27c	kernel.asm	/^ffff80000010a27c <vector116>:$/;"	l
ffff80000010a27c	kernel.asm	/^ffff80000010a27c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a27e	kernel.asm	/^ffff80000010a27e:	6a 74                	pushq  $0x74$/;"	l
ffff80000010a280	kernel.asm	/^ffff80000010a280:	e9 7f f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a285	kernel.asm	/^ffff80000010a285 <vector117>:$/;"	l
ffff80000010a285	kernel.asm	/^ffff80000010a285:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a287	kernel.asm	/^ffff80000010a287:	6a 75                	pushq  $0x75$/;"	l
ffff80000010a289	kernel.asm	/^ffff80000010a289:	e9 76 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a28e	kernel.asm	/^ffff80000010a28e <vector118>:$/;"	l
ffff80000010a28e	kernel.asm	/^ffff80000010a28e:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a290	kernel.asm	/^ffff80000010a290:	6a 76                	pushq  $0x76$/;"	l
ffff80000010a292	kernel.asm	/^ffff80000010a292:	e9 6d f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a297	kernel.asm	/^ffff80000010a297 <vector119>:$/;"	l
ffff80000010a297	kernel.asm	/^ffff80000010a297:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a299	kernel.asm	/^ffff80000010a299:	6a 77                	pushq  $0x77$/;"	l
ffff80000010a29b	kernel.asm	/^ffff80000010a29b:	e9 64 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2a0	kernel.asm	/^ffff80000010a2a0 <vector120>:$/;"	l
ffff80000010a2a0	kernel.asm	/^ffff80000010a2a0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2a2	kernel.asm	/^ffff80000010a2a2:	6a 78                	pushq  $0x78$/;"	l
ffff80000010a2a4	kernel.asm	/^ffff80000010a2a4:	e9 5b f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2a9	kernel.asm	/^ffff80000010a2a9 <vector121>:$/;"	l
ffff80000010a2a9	kernel.asm	/^ffff80000010a2a9:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ab	kernel.asm	/^ffff80000010a2ab:	6a 79                	pushq  $0x79$/;"	l
ffff80000010a2ad	kernel.asm	/^ffff80000010a2ad:	e9 52 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2b2	kernel.asm	/^ffff80000010a2b2 <vector122>:$/;"	l
ffff80000010a2b2	kernel.asm	/^ffff80000010a2b2:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2b4	kernel.asm	/^ffff80000010a2b4:	6a 7a                	pushq  $0x7a$/;"	l
ffff80000010a2b6	kernel.asm	/^ffff80000010a2b6:	e9 49 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2bb	kernel.asm	/^ffff80000010a2bb <vector123>:$/;"	l
ffff80000010a2bb	kernel.asm	/^ffff80000010a2bb:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2bd	kernel.asm	/^ffff80000010a2bd:	6a 7b                	pushq  $0x7b$/;"	l
ffff80000010a2bf	kernel.asm	/^ffff80000010a2bf:	e9 40 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2c4	kernel.asm	/^ffff80000010a2c4 <vector124>:$/;"	l
ffff80000010a2c4	kernel.asm	/^ffff80000010a2c4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2c6	kernel.asm	/^ffff80000010a2c6:	6a 7c                	pushq  $0x7c$/;"	l
ffff80000010a2c8	kernel.asm	/^ffff80000010a2c8:	e9 37 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2cd	kernel.asm	/^ffff80000010a2cd <vector125>:$/;"	l
ffff80000010a2cd	kernel.asm	/^ffff80000010a2cd:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2cf	kernel.asm	/^ffff80000010a2cf:	6a 7d                	pushq  $0x7d$/;"	l
ffff80000010a2d1	kernel.asm	/^ffff80000010a2d1:	e9 2e f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2d6	kernel.asm	/^ffff80000010a2d6 <vector126>:$/;"	l
ffff80000010a2d6	kernel.asm	/^ffff80000010a2d6:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2d8	kernel.asm	/^ffff80000010a2d8:	6a 7e                	pushq  $0x7e$/;"	l
ffff80000010a2da	kernel.asm	/^ffff80000010a2da:	e9 25 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2df	kernel.asm	/^ffff80000010a2df <vector127>:$/;"	l
ffff80000010a2df	kernel.asm	/^ffff80000010a2df:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2e1	kernel.asm	/^ffff80000010a2e1:	6a 7f                	pushq  $0x7f$/;"	l
ffff80000010a2e3	kernel.asm	/^ffff80000010a2e3:	e9 1c f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2e8	kernel.asm	/^ffff80000010a2e8 <vector128>:$/;"	l
ffff80000010a2e8	kernel.asm	/^ffff80000010a2e8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2ea	kernel.asm	/^ffff80000010a2ea:	68 80 00 00 00       	pushq  $0x80$/;"	l
ffff80000010a2ef	kernel.asm	/^ffff80000010a2ef:	e9 10 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a2f4	kernel.asm	/^ffff80000010a2f4 <vector129>:$/;"	l
ffff80000010a2f4	kernel.asm	/^ffff80000010a2f4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a2f6	kernel.asm	/^ffff80000010a2f6:	68 81 00 00 00       	pushq  $0x81$/;"	l
ffff80000010a2fb	kernel.asm	/^ffff80000010a2fb:	e9 04 f2 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a300	kernel.asm	/^ffff80000010a300 <vector130>:$/;"	l
ffff80000010a300	kernel.asm	/^ffff80000010a300:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a302	kernel.asm	/^ffff80000010a302:	68 82 00 00 00       	pushq  $0x82$/;"	l
ffff80000010a307	kernel.asm	/^ffff80000010a307:	e9 f8 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a30c	kernel.asm	/^ffff80000010a30c <vector131>:$/;"	l
ffff80000010a30c	kernel.asm	/^ffff80000010a30c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a30e	kernel.asm	/^ffff80000010a30e:	68 83 00 00 00       	pushq  $0x83$/;"	l
ffff80000010a313	kernel.asm	/^ffff80000010a313:	e9 ec f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a318	kernel.asm	/^ffff80000010a318 <vector132>:$/;"	l
ffff80000010a318	kernel.asm	/^ffff80000010a318:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a31a	kernel.asm	/^ffff80000010a31a:	68 84 00 00 00       	pushq  $0x84$/;"	l
ffff80000010a31f	kernel.asm	/^ffff80000010a31f:	e9 e0 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a324	kernel.asm	/^ffff80000010a324 <vector133>:$/;"	l
ffff80000010a324	kernel.asm	/^ffff80000010a324:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a326	kernel.asm	/^ffff80000010a326:	68 85 00 00 00       	pushq  $0x85$/;"	l
ffff80000010a32b	kernel.asm	/^ffff80000010a32b:	e9 d4 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a330	kernel.asm	/^ffff80000010a330 <vector134>:$/;"	l
ffff80000010a330	kernel.asm	/^ffff80000010a330:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a332	kernel.asm	/^ffff80000010a332:	68 86 00 00 00       	pushq  $0x86$/;"	l
ffff80000010a337	kernel.asm	/^ffff80000010a337:	e9 c8 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a33c	kernel.asm	/^ffff80000010a33c <vector135>:$/;"	l
ffff80000010a33c	kernel.asm	/^ffff80000010a33c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a33e	kernel.asm	/^ffff80000010a33e:	68 87 00 00 00       	pushq  $0x87$/;"	l
ffff80000010a343	kernel.asm	/^ffff80000010a343:	e9 bc f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a348	kernel.asm	/^ffff80000010a348 <vector136>:$/;"	l
ffff80000010a348	kernel.asm	/^ffff80000010a348:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a34a	kernel.asm	/^ffff80000010a34a:	68 88 00 00 00       	pushq  $0x88$/;"	l
ffff80000010a34f	kernel.asm	/^ffff80000010a34f:	e9 b0 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a354	kernel.asm	/^ffff80000010a354 <vector137>:$/;"	l
ffff80000010a354	kernel.asm	/^ffff80000010a354:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a356	kernel.asm	/^ffff80000010a356:	68 89 00 00 00       	pushq  $0x89$/;"	l
ffff80000010a35b	kernel.asm	/^ffff80000010a35b:	e9 a4 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a360	kernel.asm	/^ffff80000010a360 <vector138>:$/;"	l
ffff80000010a360	kernel.asm	/^ffff80000010a360:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a362	kernel.asm	/^ffff80000010a362:	68 8a 00 00 00       	pushq  $0x8a$/;"	l
ffff80000010a367	kernel.asm	/^ffff80000010a367:	e9 98 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a36c	kernel.asm	/^ffff80000010a36c <vector139>:$/;"	l
ffff80000010a36c	kernel.asm	/^ffff80000010a36c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a36e	kernel.asm	/^ffff80000010a36e:	68 8b 00 00 00       	pushq  $0x8b$/;"	l
ffff80000010a373	kernel.asm	/^ffff80000010a373:	e9 8c f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a378	kernel.asm	/^ffff80000010a378 <vector140>:$/;"	l
ffff80000010a378	kernel.asm	/^ffff80000010a378:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a37a	kernel.asm	/^ffff80000010a37a:	68 8c 00 00 00       	pushq  $0x8c$/;"	l
ffff80000010a37f	kernel.asm	/^ffff80000010a37f:	e9 80 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a384	kernel.asm	/^ffff80000010a384 <vector141>:$/;"	l
ffff80000010a384	kernel.asm	/^ffff80000010a384:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a386	kernel.asm	/^ffff80000010a386:	68 8d 00 00 00       	pushq  $0x8d$/;"	l
ffff80000010a38b	kernel.asm	/^ffff80000010a38b:	e9 74 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a390	kernel.asm	/^ffff80000010a390 <vector142>:$/;"	l
ffff80000010a390	kernel.asm	/^ffff80000010a390:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a392	kernel.asm	/^ffff80000010a392:	68 8e 00 00 00       	pushq  $0x8e$/;"	l
ffff80000010a397	kernel.asm	/^ffff80000010a397:	e9 68 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a39c	kernel.asm	/^ffff80000010a39c <vector143>:$/;"	l
ffff80000010a39c	kernel.asm	/^ffff80000010a39c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a39e	kernel.asm	/^ffff80000010a39e:	68 8f 00 00 00       	pushq  $0x8f$/;"	l
ffff80000010a3a3	kernel.asm	/^ffff80000010a3a3:	e9 5c f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3a8	kernel.asm	/^ffff80000010a3a8 <vector144>:$/;"	l
ffff80000010a3a8	kernel.asm	/^ffff80000010a3a8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3aa	kernel.asm	/^ffff80000010a3aa:	68 90 00 00 00       	pushq  $0x90$/;"	l
ffff80000010a3af	kernel.asm	/^ffff80000010a3af:	e9 50 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3b4	kernel.asm	/^ffff80000010a3b4 <vector145>:$/;"	l
ffff80000010a3b4	kernel.asm	/^ffff80000010a3b4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3b6	kernel.asm	/^ffff80000010a3b6:	68 91 00 00 00       	pushq  $0x91$/;"	l
ffff80000010a3bb	kernel.asm	/^ffff80000010a3bb:	e9 44 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3c0	kernel.asm	/^ffff80000010a3c0 <vector146>:$/;"	l
ffff80000010a3c0	kernel.asm	/^ffff80000010a3c0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3c2	kernel.asm	/^ffff80000010a3c2:	68 92 00 00 00       	pushq  $0x92$/;"	l
ffff80000010a3c7	kernel.asm	/^ffff80000010a3c7:	e9 38 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3cc	kernel.asm	/^ffff80000010a3cc <vector147>:$/;"	l
ffff80000010a3cc	kernel.asm	/^ffff80000010a3cc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3ce	kernel.asm	/^ffff80000010a3ce:	68 93 00 00 00       	pushq  $0x93$/;"	l
ffff80000010a3d3	kernel.asm	/^ffff80000010a3d3:	e9 2c f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3d8	kernel.asm	/^ffff80000010a3d8 <vector148>:$/;"	l
ffff80000010a3d8	kernel.asm	/^ffff80000010a3d8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3da	kernel.asm	/^ffff80000010a3da:	68 94 00 00 00       	pushq  $0x94$/;"	l
ffff80000010a3df	kernel.asm	/^ffff80000010a3df:	e9 20 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3e4	kernel.asm	/^ffff80000010a3e4 <vector149>:$/;"	l
ffff80000010a3e4	kernel.asm	/^ffff80000010a3e4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3e6	kernel.asm	/^ffff80000010a3e6:	68 95 00 00 00       	pushq  $0x95$/;"	l
ffff80000010a3eb	kernel.asm	/^ffff80000010a3eb:	e9 14 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3f0	kernel.asm	/^ffff80000010a3f0 <vector150>:$/;"	l
ffff80000010a3f0	kernel.asm	/^ffff80000010a3f0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3f2	kernel.asm	/^ffff80000010a3f2:	68 96 00 00 00       	pushq  $0x96$/;"	l
ffff80000010a3f7	kernel.asm	/^ffff80000010a3f7:	e9 08 f1 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a3fc	kernel.asm	/^ffff80000010a3fc <vector151>:$/;"	l
ffff80000010a3fc	kernel.asm	/^ffff80000010a3fc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a3fe	kernel.asm	/^ffff80000010a3fe:	68 97 00 00 00       	pushq  $0x97$/;"	l
ffff80000010a403	kernel.asm	/^ffff80000010a403:	e9 fc f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a408	kernel.asm	/^ffff80000010a408 <vector152>:$/;"	l
ffff80000010a408	kernel.asm	/^ffff80000010a408:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a40a	kernel.asm	/^ffff80000010a40a:	68 98 00 00 00       	pushq  $0x98$/;"	l
ffff80000010a40f	kernel.asm	/^ffff80000010a40f:	e9 f0 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a414	kernel.asm	/^ffff80000010a414 <vector153>:$/;"	l
ffff80000010a414	kernel.asm	/^ffff80000010a414:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a416	kernel.asm	/^ffff80000010a416:	68 99 00 00 00       	pushq  $0x99$/;"	l
ffff80000010a41b	kernel.asm	/^ffff80000010a41b:	e9 e4 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a420	kernel.asm	/^ffff80000010a420 <vector154>:$/;"	l
ffff80000010a420	kernel.asm	/^ffff80000010a420:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a422	kernel.asm	/^ffff80000010a422:	68 9a 00 00 00       	pushq  $0x9a$/;"	l
ffff80000010a427	kernel.asm	/^ffff80000010a427:	e9 d8 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a42c	kernel.asm	/^ffff80000010a42c <vector155>:$/;"	l
ffff80000010a42c	kernel.asm	/^ffff80000010a42c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a42e	kernel.asm	/^ffff80000010a42e:	68 9b 00 00 00       	pushq  $0x9b$/;"	l
ffff80000010a433	kernel.asm	/^ffff80000010a433:	e9 cc f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a438	kernel.asm	/^ffff80000010a438 <vector156>:$/;"	l
ffff80000010a438	kernel.asm	/^ffff80000010a438:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a43a	kernel.asm	/^ffff80000010a43a:	68 9c 00 00 00       	pushq  $0x9c$/;"	l
ffff80000010a43f	kernel.asm	/^ffff80000010a43f:	e9 c0 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a444	kernel.asm	/^ffff80000010a444 <vector157>:$/;"	l
ffff80000010a444	kernel.asm	/^ffff80000010a444:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a446	kernel.asm	/^ffff80000010a446:	68 9d 00 00 00       	pushq  $0x9d$/;"	l
ffff80000010a44b	kernel.asm	/^ffff80000010a44b:	e9 b4 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a450	kernel.asm	/^ffff80000010a450 <vector158>:$/;"	l
ffff80000010a450	kernel.asm	/^ffff80000010a450:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a452	kernel.asm	/^ffff80000010a452:	68 9e 00 00 00       	pushq  $0x9e$/;"	l
ffff80000010a457	kernel.asm	/^ffff80000010a457:	e9 a8 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a45c	kernel.asm	/^ffff80000010a45c <vector159>:$/;"	l
ffff80000010a45c	kernel.asm	/^ffff80000010a45c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a45e	kernel.asm	/^ffff80000010a45e:	68 9f 00 00 00       	pushq  $0x9f$/;"	l
ffff80000010a463	kernel.asm	/^ffff80000010a463:	e9 9c f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a468	kernel.asm	/^ffff80000010a468 <vector160>:$/;"	l
ffff80000010a468	kernel.asm	/^ffff80000010a468:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a46a	kernel.asm	/^ffff80000010a46a:	68 a0 00 00 00       	pushq  $0xa0$/;"	l
ffff80000010a46f	kernel.asm	/^ffff80000010a46f:	e9 90 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a474	kernel.asm	/^ffff80000010a474 <vector161>:$/;"	l
ffff80000010a474	kernel.asm	/^ffff80000010a474:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a476	kernel.asm	/^ffff80000010a476:	68 a1 00 00 00       	pushq  $0xa1$/;"	l
ffff80000010a47b	kernel.asm	/^ffff80000010a47b:	e9 84 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a480	kernel.asm	/^ffff80000010a480 <vector162>:$/;"	l
ffff80000010a480	kernel.asm	/^ffff80000010a480:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a482	kernel.asm	/^ffff80000010a482:	68 a2 00 00 00       	pushq  $0xa2$/;"	l
ffff80000010a487	kernel.asm	/^ffff80000010a487:	e9 78 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a48c	kernel.asm	/^ffff80000010a48c <vector163>:$/;"	l
ffff80000010a48c	kernel.asm	/^ffff80000010a48c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a48e	kernel.asm	/^ffff80000010a48e:	68 a3 00 00 00       	pushq  $0xa3$/;"	l
ffff80000010a493	kernel.asm	/^ffff80000010a493:	e9 6c f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a498	kernel.asm	/^ffff80000010a498 <vector164>:$/;"	l
ffff80000010a498	kernel.asm	/^ffff80000010a498:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a49a	kernel.asm	/^ffff80000010a49a:	68 a4 00 00 00       	pushq  $0xa4$/;"	l
ffff80000010a49f	kernel.asm	/^ffff80000010a49f:	e9 60 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4a4	kernel.asm	/^ffff80000010a4a4 <vector165>:$/;"	l
ffff80000010a4a4	kernel.asm	/^ffff80000010a4a4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4a6	kernel.asm	/^ffff80000010a4a6:	68 a5 00 00 00       	pushq  $0xa5$/;"	l
ffff80000010a4ab	kernel.asm	/^ffff80000010a4ab:	e9 54 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4b0	kernel.asm	/^ffff80000010a4b0 <vector166>:$/;"	l
ffff80000010a4b0	kernel.asm	/^ffff80000010a4b0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4b2	kernel.asm	/^ffff80000010a4b2:	68 a6 00 00 00       	pushq  $0xa6$/;"	l
ffff80000010a4b7	kernel.asm	/^ffff80000010a4b7:	e9 48 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4bc	kernel.asm	/^ffff80000010a4bc <vector167>:$/;"	l
ffff80000010a4bc	kernel.asm	/^ffff80000010a4bc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4be	kernel.asm	/^ffff80000010a4be:	68 a7 00 00 00       	pushq  $0xa7$/;"	l
ffff80000010a4c3	kernel.asm	/^ffff80000010a4c3:	e9 3c f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4c8	kernel.asm	/^ffff80000010a4c8 <vector168>:$/;"	l
ffff80000010a4c8	kernel.asm	/^ffff80000010a4c8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4ca	kernel.asm	/^ffff80000010a4ca:	68 a8 00 00 00       	pushq  $0xa8$/;"	l
ffff80000010a4cf	kernel.asm	/^ffff80000010a4cf:	e9 30 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4d4	kernel.asm	/^ffff80000010a4d4 <vector169>:$/;"	l
ffff80000010a4d4	kernel.asm	/^ffff80000010a4d4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4d6	kernel.asm	/^ffff80000010a4d6:	68 a9 00 00 00       	pushq  $0xa9$/;"	l
ffff80000010a4db	kernel.asm	/^ffff80000010a4db:	e9 24 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4e0	kernel.asm	/^ffff80000010a4e0 <vector170>:$/;"	l
ffff80000010a4e0	kernel.asm	/^ffff80000010a4e0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4e2	kernel.asm	/^ffff80000010a4e2:	68 aa 00 00 00       	pushq  $0xaa$/;"	l
ffff80000010a4e7	kernel.asm	/^ffff80000010a4e7:	e9 18 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4ec	kernel.asm	/^ffff80000010a4ec <vector171>:$/;"	l
ffff80000010a4ec	kernel.asm	/^ffff80000010a4ec:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4ee	kernel.asm	/^ffff80000010a4ee:	68 ab 00 00 00       	pushq  $0xab$/;"	l
ffff80000010a4f3	kernel.asm	/^ffff80000010a4f3:	e9 0c f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a4f8	kernel.asm	/^ffff80000010a4f8 <vector172>:$/;"	l
ffff80000010a4f8	kernel.asm	/^ffff80000010a4f8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a4fa	kernel.asm	/^ffff80000010a4fa:	68 ac 00 00 00       	pushq  $0xac$/;"	l
ffff80000010a4ff	kernel.asm	/^ffff80000010a4ff:	e9 00 f0 ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a504	kernel.asm	/^ffff80000010a504 <vector173>:$/;"	l
ffff80000010a504	kernel.asm	/^ffff80000010a504:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a506	kernel.asm	/^ffff80000010a506:	68 ad 00 00 00       	pushq  $0xad$/;"	l
ffff80000010a50b	kernel.asm	/^ffff80000010a50b:	e9 f4 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a510	kernel.asm	/^ffff80000010a510 <vector174>:$/;"	l
ffff80000010a510	kernel.asm	/^ffff80000010a510:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a512	kernel.asm	/^ffff80000010a512:	68 ae 00 00 00       	pushq  $0xae$/;"	l
ffff80000010a517	kernel.asm	/^ffff80000010a517:	e9 e8 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a51c	kernel.asm	/^ffff80000010a51c <vector175>:$/;"	l
ffff80000010a51c	kernel.asm	/^ffff80000010a51c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a51e	kernel.asm	/^ffff80000010a51e:	68 af 00 00 00       	pushq  $0xaf$/;"	l
ffff80000010a523	kernel.asm	/^ffff80000010a523:	e9 dc ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a528	kernel.asm	/^ffff80000010a528 <vector176>:$/;"	l
ffff80000010a528	kernel.asm	/^ffff80000010a528:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a52a	kernel.asm	/^ffff80000010a52a:	68 b0 00 00 00       	pushq  $0xb0$/;"	l
ffff80000010a52f	kernel.asm	/^ffff80000010a52f:	e9 d0 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a534	kernel.asm	/^ffff80000010a534 <vector177>:$/;"	l
ffff80000010a534	kernel.asm	/^ffff80000010a534:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a536	kernel.asm	/^ffff80000010a536:	68 b1 00 00 00       	pushq  $0xb1$/;"	l
ffff80000010a53b	kernel.asm	/^ffff80000010a53b:	e9 c4 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a540	kernel.asm	/^ffff80000010a540 <vector178>:$/;"	l
ffff80000010a540	kernel.asm	/^ffff80000010a540:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a542	kernel.asm	/^ffff80000010a542:	68 b2 00 00 00       	pushq  $0xb2$/;"	l
ffff80000010a547	kernel.asm	/^ffff80000010a547:	e9 b8 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a54c	kernel.asm	/^ffff80000010a54c <vector179>:$/;"	l
ffff80000010a54c	kernel.asm	/^ffff80000010a54c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a54e	kernel.asm	/^ffff80000010a54e:	68 b3 00 00 00       	pushq  $0xb3$/;"	l
ffff80000010a553	kernel.asm	/^ffff80000010a553:	e9 ac ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a558	kernel.asm	/^ffff80000010a558 <vector180>:$/;"	l
ffff80000010a558	kernel.asm	/^ffff80000010a558:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a55a	kernel.asm	/^ffff80000010a55a:	68 b4 00 00 00       	pushq  $0xb4$/;"	l
ffff80000010a55f	kernel.asm	/^ffff80000010a55f:	e9 a0 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a564	kernel.asm	/^ffff80000010a564 <vector181>:$/;"	l
ffff80000010a564	kernel.asm	/^ffff80000010a564:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a566	kernel.asm	/^ffff80000010a566:	68 b5 00 00 00       	pushq  $0xb5$/;"	l
ffff80000010a56b	kernel.asm	/^ffff80000010a56b:	e9 94 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a570	kernel.asm	/^ffff80000010a570 <vector182>:$/;"	l
ffff80000010a570	kernel.asm	/^ffff80000010a570:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a572	kernel.asm	/^ffff80000010a572:	68 b6 00 00 00       	pushq  $0xb6$/;"	l
ffff80000010a577	kernel.asm	/^ffff80000010a577:	e9 88 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a57c	kernel.asm	/^ffff80000010a57c <vector183>:$/;"	l
ffff80000010a57c	kernel.asm	/^ffff80000010a57c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a57e	kernel.asm	/^ffff80000010a57e:	68 b7 00 00 00       	pushq  $0xb7$/;"	l
ffff80000010a583	kernel.asm	/^ffff80000010a583:	e9 7c ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a588	kernel.asm	/^ffff80000010a588 <vector184>:$/;"	l
ffff80000010a588	kernel.asm	/^ffff80000010a588:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a58a	kernel.asm	/^ffff80000010a58a:	68 b8 00 00 00       	pushq  $0xb8$/;"	l
ffff80000010a58f	kernel.asm	/^ffff80000010a58f:	e9 70 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a594	kernel.asm	/^ffff80000010a594 <vector185>:$/;"	l
ffff80000010a594	kernel.asm	/^ffff80000010a594:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a596	kernel.asm	/^ffff80000010a596:	68 b9 00 00 00       	pushq  $0xb9$/;"	l
ffff80000010a59b	kernel.asm	/^ffff80000010a59b:	e9 64 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5a0	kernel.asm	/^ffff80000010a5a0 <vector186>:$/;"	l
ffff80000010a5a0	kernel.asm	/^ffff80000010a5a0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5a2	kernel.asm	/^ffff80000010a5a2:	68 ba 00 00 00       	pushq  $0xba$/;"	l
ffff80000010a5a7	kernel.asm	/^ffff80000010a5a7:	e9 58 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5ac	kernel.asm	/^ffff80000010a5ac <vector187>:$/;"	l
ffff80000010a5ac	kernel.asm	/^ffff80000010a5ac:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ae	kernel.asm	/^ffff80000010a5ae:	68 bb 00 00 00       	pushq  $0xbb$/;"	l
ffff80000010a5b3	kernel.asm	/^ffff80000010a5b3:	e9 4c ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5b8	kernel.asm	/^ffff80000010a5b8 <vector188>:$/;"	l
ffff80000010a5b8	kernel.asm	/^ffff80000010a5b8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ba	kernel.asm	/^ffff80000010a5ba:	68 bc 00 00 00       	pushq  $0xbc$/;"	l
ffff80000010a5bf	kernel.asm	/^ffff80000010a5bf:	e9 40 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5c4	kernel.asm	/^ffff80000010a5c4 <vector189>:$/;"	l
ffff80000010a5c4	kernel.asm	/^ffff80000010a5c4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5c6	kernel.asm	/^ffff80000010a5c6:	68 bd 00 00 00       	pushq  $0xbd$/;"	l
ffff80000010a5cb	kernel.asm	/^ffff80000010a5cb:	e9 34 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5d0	kernel.asm	/^ffff80000010a5d0 <vector190>:$/;"	l
ffff80000010a5d0	kernel.asm	/^ffff80000010a5d0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5d2	kernel.asm	/^ffff80000010a5d2:	68 be 00 00 00       	pushq  $0xbe$/;"	l
ffff80000010a5d7	kernel.asm	/^ffff80000010a5d7:	e9 28 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5dc	kernel.asm	/^ffff80000010a5dc <vector191>:$/;"	l
ffff80000010a5dc	kernel.asm	/^ffff80000010a5dc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5de	kernel.asm	/^ffff80000010a5de:	68 bf 00 00 00       	pushq  $0xbf$/;"	l
ffff80000010a5e3	kernel.asm	/^ffff80000010a5e3:	e9 1c ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5e8	kernel.asm	/^ffff80000010a5e8 <vector192>:$/;"	l
ffff80000010a5e8	kernel.asm	/^ffff80000010a5e8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5ea	kernel.asm	/^ffff80000010a5ea:	68 c0 00 00 00       	pushq  $0xc0$/;"	l
ffff80000010a5ef	kernel.asm	/^ffff80000010a5ef:	e9 10 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a5f4	kernel.asm	/^ffff80000010a5f4 <vector193>:$/;"	l
ffff80000010a5f4	kernel.asm	/^ffff80000010a5f4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a5f6	kernel.asm	/^ffff80000010a5f6:	68 c1 00 00 00       	pushq  $0xc1$/;"	l
ffff80000010a5fb	kernel.asm	/^ffff80000010a5fb:	e9 04 ef ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a600	kernel.asm	/^ffff80000010a600 <vector194>:$/;"	l
ffff80000010a600	kernel.asm	/^ffff80000010a600:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a602	kernel.asm	/^ffff80000010a602:	68 c2 00 00 00       	pushq  $0xc2$/;"	l
ffff80000010a607	kernel.asm	/^ffff80000010a607:	e9 f8 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a60c	kernel.asm	/^ffff80000010a60c <vector195>:$/;"	l
ffff80000010a60c	kernel.asm	/^ffff80000010a60c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a60e	kernel.asm	/^ffff80000010a60e:	68 c3 00 00 00       	pushq  $0xc3$/;"	l
ffff80000010a613	kernel.asm	/^ffff80000010a613:	e9 ec ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a618	kernel.asm	/^ffff80000010a618 <vector196>:$/;"	l
ffff80000010a618	kernel.asm	/^ffff80000010a618:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a61a	kernel.asm	/^ffff80000010a61a:	68 c4 00 00 00       	pushq  $0xc4$/;"	l
ffff80000010a61f	kernel.asm	/^ffff80000010a61f:	e9 e0 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a624	kernel.asm	/^ffff80000010a624 <vector197>:$/;"	l
ffff80000010a624	kernel.asm	/^ffff80000010a624:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a626	kernel.asm	/^ffff80000010a626:	68 c5 00 00 00       	pushq  $0xc5$/;"	l
ffff80000010a62b	kernel.asm	/^ffff80000010a62b:	e9 d4 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a630	kernel.asm	/^ffff80000010a630 <vector198>:$/;"	l
ffff80000010a630	kernel.asm	/^ffff80000010a630:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a632	kernel.asm	/^ffff80000010a632:	68 c6 00 00 00       	pushq  $0xc6$/;"	l
ffff80000010a637	kernel.asm	/^ffff80000010a637:	e9 c8 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a63c	kernel.asm	/^ffff80000010a63c <vector199>:$/;"	l
ffff80000010a63c	kernel.asm	/^ffff80000010a63c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a63e	kernel.asm	/^ffff80000010a63e:	68 c7 00 00 00       	pushq  $0xc7$/;"	l
ffff80000010a643	kernel.asm	/^ffff80000010a643:	e9 bc ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a648	kernel.asm	/^ffff80000010a648 <vector200>:$/;"	l
ffff80000010a648	kernel.asm	/^ffff80000010a648:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a64a	kernel.asm	/^ffff80000010a64a:	68 c8 00 00 00       	pushq  $0xc8$/;"	l
ffff80000010a64f	kernel.asm	/^ffff80000010a64f:	e9 b0 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a654	kernel.asm	/^ffff80000010a654 <vector201>:$/;"	l
ffff80000010a654	kernel.asm	/^ffff80000010a654:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a656	kernel.asm	/^ffff80000010a656:	68 c9 00 00 00       	pushq  $0xc9$/;"	l
ffff80000010a65b	kernel.asm	/^ffff80000010a65b:	e9 a4 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a660	kernel.asm	/^ffff80000010a660 <vector202>:$/;"	l
ffff80000010a660	kernel.asm	/^ffff80000010a660:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a662	kernel.asm	/^ffff80000010a662:	68 ca 00 00 00       	pushq  $0xca$/;"	l
ffff80000010a667	kernel.asm	/^ffff80000010a667:	e9 98 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a66c	kernel.asm	/^ffff80000010a66c <vector203>:$/;"	l
ffff80000010a66c	kernel.asm	/^ffff80000010a66c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a66e	kernel.asm	/^ffff80000010a66e:	68 cb 00 00 00       	pushq  $0xcb$/;"	l
ffff80000010a673	kernel.asm	/^ffff80000010a673:	e9 8c ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a678	kernel.asm	/^ffff80000010a678 <vector204>:$/;"	l
ffff80000010a678	kernel.asm	/^ffff80000010a678:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a67a	kernel.asm	/^ffff80000010a67a:	68 cc 00 00 00       	pushq  $0xcc$/;"	l
ffff80000010a67f	kernel.asm	/^ffff80000010a67f:	e9 80 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a684	kernel.asm	/^ffff80000010a684 <vector205>:$/;"	l
ffff80000010a684	kernel.asm	/^ffff80000010a684:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a686	kernel.asm	/^ffff80000010a686:	68 cd 00 00 00       	pushq  $0xcd$/;"	l
ffff80000010a68b	kernel.asm	/^ffff80000010a68b:	e9 74 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a690	kernel.asm	/^ffff80000010a690 <vector206>:$/;"	l
ffff80000010a690	kernel.asm	/^ffff80000010a690:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a692	kernel.asm	/^ffff80000010a692:	68 ce 00 00 00       	pushq  $0xce$/;"	l
ffff80000010a697	kernel.asm	/^ffff80000010a697:	e9 68 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a69c	kernel.asm	/^ffff80000010a69c <vector207>:$/;"	l
ffff80000010a69c	kernel.asm	/^ffff80000010a69c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a69e	kernel.asm	/^ffff80000010a69e:	68 cf 00 00 00       	pushq  $0xcf$/;"	l
ffff80000010a6a3	kernel.asm	/^ffff80000010a6a3:	e9 5c ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6a8	kernel.asm	/^ffff80000010a6a8 <vector208>:$/;"	l
ffff80000010a6a8	kernel.asm	/^ffff80000010a6a8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6aa	kernel.asm	/^ffff80000010a6aa:	68 d0 00 00 00       	pushq  $0xd0$/;"	l
ffff80000010a6af	kernel.asm	/^ffff80000010a6af:	e9 50 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6b4	kernel.asm	/^ffff80000010a6b4 <vector209>:$/;"	l
ffff80000010a6b4	kernel.asm	/^ffff80000010a6b4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6b6	kernel.asm	/^ffff80000010a6b6:	68 d1 00 00 00       	pushq  $0xd1$/;"	l
ffff80000010a6bb	kernel.asm	/^ffff80000010a6bb:	e9 44 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6c0	kernel.asm	/^ffff80000010a6c0 <vector210>:$/;"	l
ffff80000010a6c0	kernel.asm	/^ffff80000010a6c0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6c2	kernel.asm	/^ffff80000010a6c2:	68 d2 00 00 00       	pushq  $0xd2$/;"	l
ffff80000010a6c7	kernel.asm	/^ffff80000010a6c7:	e9 38 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6cc	kernel.asm	/^ffff80000010a6cc <vector211>:$/;"	l
ffff80000010a6cc	kernel.asm	/^ffff80000010a6cc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6ce	kernel.asm	/^ffff80000010a6ce:	68 d3 00 00 00       	pushq  $0xd3$/;"	l
ffff80000010a6d3	kernel.asm	/^ffff80000010a6d3:	e9 2c ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6d8	kernel.asm	/^ffff80000010a6d8 <vector212>:$/;"	l
ffff80000010a6d8	kernel.asm	/^ffff80000010a6d8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6da	kernel.asm	/^ffff80000010a6da:	68 d4 00 00 00       	pushq  $0xd4$/;"	l
ffff80000010a6df	kernel.asm	/^ffff80000010a6df:	e9 20 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6e4	kernel.asm	/^ffff80000010a6e4 <vector213>:$/;"	l
ffff80000010a6e4	kernel.asm	/^ffff80000010a6e4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6e6	kernel.asm	/^ffff80000010a6e6:	68 d5 00 00 00       	pushq  $0xd5$/;"	l
ffff80000010a6eb	kernel.asm	/^ffff80000010a6eb:	e9 14 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6f0	kernel.asm	/^ffff80000010a6f0 <vector214>:$/;"	l
ffff80000010a6f0	kernel.asm	/^ffff80000010a6f0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6f2	kernel.asm	/^ffff80000010a6f2:	68 d6 00 00 00       	pushq  $0xd6$/;"	l
ffff80000010a6f7	kernel.asm	/^ffff80000010a6f7:	e9 08 ee ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a6fc	kernel.asm	/^ffff80000010a6fc <vector215>:$/;"	l
ffff80000010a6fc	kernel.asm	/^ffff80000010a6fc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a6fe	kernel.asm	/^ffff80000010a6fe:	68 d7 00 00 00       	pushq  $0xd7$/;"	l
ffff80000010a703	kernel.asm	/^ffff80000010a703:	e9 fc ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a708	kernel.asm	/^ffff80000010a708 <vector216>:$/;"	l
ffff80000010a708	kernel.asm	/^ffff80000010a708:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a70a	kernel.asm	/^ffff80000010a70a:	68 d8 00 00 00       	pushq  $0xd8$/;"	l
ffff80000010a70f	kernel.asm	/^ffff80000010a70f:	e9 f0 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a714	kernel.asm	/^ffff80000010a714 <vector217>:$/;"	l
ffff80000010a714	kernel.asm	/^ffff80000010a714:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a716	kernel.asm	/^ffff80000010a716:	68 d9 00 00 00       	pushq  $0xd9$/;"	l
ffff80000010a71b	kernel.asm	/^ffff80000010a71b:	e9 e4 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a720	kernel.asm	/^ffff80000010a720 <vector218>:$/;"	l
ffff80000010a720	kernel.asm	/^ffff80000010a720:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a722	kernel.asm	/^ffff80000010a722:	68 da 00 00 00       	pushq  $0xda$/;"	l
ffff80000010a727	kernel.asm	/^ffff80000010a727:	e9 d8 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a72c	kernel.asm	/^ffff80000010a72c <vector219>:$/;"	l
ffff80000010a72c	kernel.asm	/^ffff80000010a72c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a72e	kernel.asm	/^ffff80000010a72e:	68 db 00 00 00       	pushq  $0xdb$/;"	l
ffff80000010a733	kernel.asm	/^ffff80000010a733:	e9 cc ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a738	kernel.asm	/^ffff80000010a738 <vector220>:$/;"	l
ffff80000010a738	kernel.asm	/^ffff80000010a738:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a73a	kernel.asm	/^ffff80000010a73a:	68 dc 00 00 00       	pushq  $0xdc$/;"	l
ffff80000010a73f	kernel.asm	/^ffff80000010a73f:	e9 c0 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a744	kernel.asm	/^ffff80000010a744 <vector221>:$/;"	l
ffff80000010a744	kernel.asm	/^ffff80000010a744:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a746	kernel.asm	/^ffff80000010a746:	68 dd 00 00 00       	pushq  $0xdd$/;"	l
ffff80000010a74b	kernel.asm	/^ffff80000010a74b:	e9 b4 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a750	kernel.asm	/^ffff80000010a750 <vector222>:$/;"	l
ffff80000010a750	kernel.asm	/^ffff80000010a750:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a752	kernel.asm	/^ffff80000010a752:	68 de 00 00 00       	pushq  $0xde$/;"	l
ffff80000010a757	kernel.asm	/^ffff80000010a757:	e9 a8 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a75c	kernel.asm	/^ffff80000010a75c <vector223>:$/;"	l
ffff80000010a75c	kernel.asm	/^ffff80000010a75c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a75e	kernel.asm	/^ffff80000010a75e:	68 df 00 00 00       	pushq  $0xdf$/;"	l
ffff80000010a763	kernel.asm	/^ffff80000010a763:	e9 9c ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a768	kernel.asm	/^ffff80000010a768 <vector224>:$/;"	l
ffff80000010a768	kernel.asm	/^ffff80000010a768:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a76a	kernel.asm	/^ffff80000010a76a:	68 e0 00 00 00       	pushq  $0xe0$/;"	l
ffff80000010a76f	kernel.asm	/^ffff80000010a76f:	e9 90 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a774	kernel.asm	/^ffff80000010a774 <vector225>:$/;"	l
ffff80000010a774	kernel.asm	/^ffff80000010a774:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a776	kernel.asm	/^ffff80000010a776:	68 e1 00 00 00       	pushq  $0xe1$/;"	l
ffff80000010a77b	kernel.asm	/^ffff80000010a77b:	e9 84 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a780	kernel.asm	/^ffff80000010a780 <vector226>:$/;"	l
ffff80000010a780	kernel.asm	/^ffff80000010a780:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a782	kernel.asm	/^ffff80000010a782:	68 e2 00 00 00       	pushq  $0xe2$/;"	l
ffff80000010a787	kernel.asm	/^ffff80000010a787:	e9 78 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a78c	kernel.asm	/^ffff80000010a78c <vector227>:$/;"	l
ffff80000010a78c	kernel.asm	/^ffff80000010a78c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a78e	kernel.asm	/^ffff80000010a78e:	68 e3 00 00 00       	pushq  $0xe3$/;"	l
ffff80000010a793	kernel.asm	/^ffff80000010a793:	e9 6c ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a798	kernel.asm	/^ffff80000010a798 <vector228>:$/;"	l
ffff80000010a798	kernel.asm	/^ffff80000010a798:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a79a	kernel.asm	/^ffff80000010a79a:	68 e4 00 00 00       	pushq  $0xe4$/;"	l
ffff80000010a79f	kernel.asm	/^ffff80000010a79f:	e9 60 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7a4	kernel.asm	/^ffff80000010a7a4 <vector229>:$/;"	l
ffff80000010a7a4	kernel.asm	/^ffff80000010a7a4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7a6	kernel.asm	/^ffff80000010a7a6:	68 e5 00 00 00       	pushq  $0xe5$/;"	l
ffff80000010a7ab	kernel.asm	/^ffff80000010a7ab:	e9 54 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7b0	kernel.asm	/^ffff80000010a7b0 <vector230>:$/;"	l
ffff80000010a7b0	kernel.asm	/^ffff80000010a7b0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7b2	kernel.asm	/^ffff80000010a7b2:	68 e6 00 00 00       	pushq  $0xe6$/;"	l
ffff80000010a7b7	kernel.asm	/^ffff80000010a7b7:	e9 48 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7bc	kernel.asm	/^ffff80000010a7bc <vector231>:$/;"	l
ffff80000010a7bc	kernel.asm	/^ffff80000010a7bc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7be	kernel.asm	/^ffff80000010a7be:	68 e7 00 00 00       	pushq  $0xe7$/;"	l
ffff80000010a7c3	kernel.asm	/^ffff80000010a7c3:	e9 3c ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7c8	kernel.asm	/^ffff80000010a7c8 <vector232>:$/;"	l
ffff80000010a7c8	kernel.asm	/^ffff80000010a7c8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7ca	kernel.asm	/^ffff80000010a7ca:	68 e8 00 00 00       	pushq  $0xe8$/;"	l
ffff80000010a7cf	kernel.asm	/^ffff80000010a7cf:	e9 30 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7d4	kernel.asm	/^ffff80000010a7d4 <vector233>:$/;"	l
ffff80000010a7d4	kernel.asm	/^ffff80000010a7d4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7d6	kernel.asm	/^ffff80000010a7d6:	68 e9 00 00 00       	pushq  $0xe9$/;"	l
ffff80000010a7db	kernel.asm	/^ffff80000010a7db:	e9 24 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7e0	kernel.asm	/^ffff80000010a7e0 <vector234>:$/;"	l
ffff80000010a7e0	kernel.asm	/^ffff80000010a7e0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7e2	kernel.asm	/^ffff80000010a7e2:	68 ea 00 00 00       	pushq  $0xea$/;"	l
ffff80000010a7e7	kernel.asm	/^ffff80000010a7e7:	e9 18 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7ec	kernel.asm	/^ffff80000010a7ec <vector235>:$/;"	l
ffff80000010a7ec	kernel.asm	/^ffff80000010a7ec:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7ee	kernel.asm	/^ffff80000010a7ee:	68 eb 00 00 00       	pushq  $0xeb$/;"	l
ffff80000010a7f3	kernel.asm	/^ffff80000010a7f3:	e9 0c ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a7f8	kernel.asm	/^ffff80000010a7f8 <vector236>:$/;"	l
ffff80000010a7f8	kernel.asm	/^ffff80000010a7f8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a7fa	kernel.asm	/^ffff80000010a7fa:	68 ec 00 00 00       	pushq  $0xec$/;"	l
ffff80000010a7ff	kernel.asm	/^ffff80000010a7ff:	e9 00 ed ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a804	kernel.asm	/^ffff80000010a804 <vector237>:$/;"	l
ffff80000010a804	kernel.asm	/^ffff80000010a804:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a806	kernel.asm	/^ffff80000010a806:	68 ed 00 00 00       	pushq  $0xed$/;"	l
ffff80000010a80b	kernel.asm	/^ffff80000010a80b:	e9 f4 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a810	kernel.asm	/^ffff80000010a810 <vector238>:$/;"	l
ffff80000010a810	kernel.asm	/^ffff80000010a810:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a812	kernel.asm	/^ffff80000010a812:	68 ee 00 00 00       	pushq  $0xee$/;"	l
ffff80000010a817	kernel.asm	/^ffff80000010a817:	e9 e8 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a81c	kernel.asm	/^ffff80000010a81c <vector239>:$/;"	l
ffff80000010a81c	kernel.asm	/^ffff80000010a81c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a81e	kernel.asm	/^ffff80000010a81e:	68 ef 00 00 00       	pushq  $0xef$/;"	l
ffff80000010a823	kernel.asm	/^ffff80000010a823:	e9 dc ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a828	kernel.asm	/^ffff80000010a828 <vector240>:$/;"	l
ffff80000010a828	kernel.asm	/^ffff80000010a828:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a82a	kernel.asm	/^ffff80000010a82a:	68 f0 00 00 00       	pushq  $0xf0$/;"	l
ffff80000010a82f	kernel.asm	/^ffff80000010a82f:	e9 d0 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a834	kernel.asm	/^ffff80000010a834 <vector241>:$/;"	l
ffff80000010a834	kernel.asm	/^ffff80000010a834:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a836	kernel.asm	/^ffff80000010a836:	68 f1 00 00 00       	pushq  $0xf1$/;"	l
ffff80000010a83b	kernel.asm	/^ffff80000010a83b:	e9 c4 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a840	kernel.asm	/^ffff80000010a840 <vector242>:$/;"	l
ffff80000010a840	kernel.asm	/^ffff80000010a840:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a842	kernel.asm	/^ffff80000010a842:	68 f2 00 00 00       	pushq  $0xf2$/;"	l
ffff80000010a847	kernel.asm	/^ffff80000010a847:	e9 b8 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a84c	kernel.asm	/^ffff80000010a84c <vector243>:$/;"	l
ffff80000010a84c	kernel.asm	/^ffff80000010a84c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a84e	kernel.asm	/^ffff80000010a84e:	68 f3 00 00 00       	pushq  $0xf3$/;"	l
ffff80000010a853	kernel.asm	/^ffff80000010a853:	e9 ac ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a858	kernel.asm	/^ffff80000010a858 <vector244>:$/;"	l
ffff80000010a858	kernel.asm	/^ffff80000010a858:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a85a	kernel.asm	/^ffff80000010a85a:	68 f4 00 00 00       	pushq  $0xf4$/;"	l
ffff80000010a85f	kernel.asm	/^ffff80000010a85f:	e9 a0 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a864	kernel.asm	/^ffff80000010a864 <vector245>:$/;"	l
ffff80000010a864	kernel.asm	/^ffff80000010a864:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a866	kernel.asm	/^ffff80000010a866:	68 f5 00 00 00       	pushq  $0xf5$/;"	l
ffff80000010a86b	kernel.asm	/^ffff80000010a86b:	e9 94 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a870	kernel.asm	/^ffff80000010a870 <vector246>:$/;"	l
ffff80000010a870	kernel.asm	/^ffff80000010a870:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a872	kernel.asm	/^ffff80000010a872:	68 f6 00 00 00       	pushq  $0xf6$/;"	l
ffff80000010a877	kernel.asm	/^ffff80000010a877:	e9 88 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a87c	kernel.asm	/^ffff80000010a87c <vector247>:$/;"	l
ffff80000010a87c	kernel.asm	/^ffff80000010a87c:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a87e	kernel.asm	/^ffff80000010a87e:	68 f7 00 00 00       	pushq  $0xf7$/;"	l
ffff80000010a883	kernel.asm	/^ffff80000010a883:	e9 7c ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a888	kernel.asm	/^ffff80000010a888 <vector248>:$/;"	l
ffff80000010a888	kernel.asm	/^ffff80000010a888:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a88a	kernel.asm	/^ffff80000010a88a:	68 f8 00 00 00       	pushq  $0xf8$/;"	l
ffff80000010a88f	kernel.asm	/^ffff80000010a88f:	e9 70 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a894	kernel.asm	/^ffff80000010a894 <vector249>:$/;"	l
ffff80000010a894	kernel.asm	/^ffff80000010a894:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a896	kernel.asm	/^ffff80000010a896:	68 f9 00 00 00       	pushq  $0xf9$/;"	l
ffff80000010a89b	kernel.asm	/^ffff80000010a89b:	e9 64 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8a0	kernel.asm	/^ffff80000010a8a0 <vector250>:$/;"	l
ffff80000010a8a0	kernel.asm	/^ffff80000010a8a0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8a2	kernel.asm	/^ffff80000010a8a2:	68 fa 00 00 00       	pushq  $0xfa$/;"	l
ffff80000010a8a7	kernel.asm	/^ffff80000010a8a7:	e9 58 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8ac	kernel.asm	/^ffff80000010a8ac <vector251>:$/;"	l
ffff80000010a8ac	kernel.asm	/^ffff80000010a8ac:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8ae	kernel.asm	/^ffff80000010a8ae:	68 fb 00 00 00       	pushq  $0xfb$/;"	l
ffff80000010a8b3	kernel.asm	/^ffff80000010a8b3:	e9 4c ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8b8	kernel.asm	/^ffff80000010a8b8 <vector252>:$/;"	l
ffff80000010a8b8	kernel.asm	/^ffff80000010a8b8:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8ba	kernel.asm	/^ffff80000010a8ba:	68 fc 00 00 00       	pushq  $0xfc$/;"	l
ffff80000010a8bf	kernel.asm	/^ffff80000010a8bf:	e9 40 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8c4	kernel.asm	/^ffff80000010a8c4 <vector253>:$/;"	l
ffff80000010a8c4	kernel.asm	/^ffff80000010a8c4:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8c6	kernel.asm	/^ffff80000010a8c6:	68 fd 00 00 00       	pushq  $0xfd$/;"	l
ffff80000010a8cb	kernel.asm	/^ffff80000010a8cb:	e9 34 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8d0	kernel.asm	/^ffff80000010a8d0 <vector254>:$/;"	l
ffff80000010a8d0	kernel.asm	/^ffff80000010a8d0:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8d2	kernel.asm	/^ffff80000010a8d2:	68 fe 00 00 00       	pushq  $0xfe$/;"	l
ffff80000010a8d7	kernel.asm	/^ffff80000010a8d7:	e9 28 ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8dc	kernel.asm	/^ffff80000010a8dc <vector255>:$/;"	l
ffff80000010a8dc	kernel.asm	/^ffff80000010a8dc:	6a 00                	pushq  $0x0$/;"	l
ffff80000010a8de	kernel.asm	/^ffff80000010a8de:	68 ff 00 00 00       	pushq  $0xff$/;"	l
ffff80000010a8e3	kernel.asm	/^ffff80000010a8e3:	e9 1c ec ff ff       	jmpq   ffff800000109504 <alltraps>$/;"	l
ffff80000010a8e8	kernel.asm	/^ffff80000010a8e8 <inb>:$/;"	l
ffff80000010a8e8	kernel.asm	/^ffff80000010a8e8:	55                   	push   %rbp$/;"	l
ffff80000010a8e9	kernel.asm	/^ffff80000010a8e9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a8ec	kernel.asm	/^ffff80000010a8ec:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010a8f0	kernel.asm	/^ffff80000010a8f0:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a8f2	kernel.asm	/^ffff80000010a8f2:	66 89 45 ec          	mov    %ax,-0x14(%rbp)$/;"	l
ffff80000010a8f6	kernel.asm	/^ffff80000010a8f6:	0f b7 45 ec          	movzwl -0x14(%rbp),%eax$/;"	l
ffff80000010a8fa	kernel.asm	/^ffff80000010a8fa:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010a8fc	kernel.asm	/^ffff80000010a8fc:	ec                   	in     (%dx),%al$/;"	l
ffff80000010a8fd	kernel.asm	/^ffff80000010a8fd:	88 45 ff             	mov    %al,-0x1(%rbp)$/;"	l
ffff80000010a900	kernel.asm	/^ffff80000010a900:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax$/;"	l
ffff80000010a904	kernel.asm	/^ffff80000010a904:	c9                   	leaveq $/;"	l
ffff80000010a905	kernel.asm	/^ffff80000010a905:	c3                   	retq   $/;"	l
ffff80000010a906	kernel.asm	/^ffff80000010a906 <outb>:$/;"	l
ffff80000010a906	kernel.asm	/^ffff80000010a906:	55                   	push   %rbp$/;"	l
ffff80000010a907	kernel.asm	/^ffff80000010a907:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a90a	kernel.asm	/^ffff80000010a90a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a90e	kernel.asm	/^ffff80000010a90e:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a910	kernel.asm	/^ffff80000010a910:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a912	kernel.asm	/^ffff80000010a912:	66 89 55 fc          	mov    %dx,-0x4(%rbp)$/;"	l
ffff80000010a916	kernel.asm	/^ffff80000010a916:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a919	kernel.asm	/^ffff80000010a919:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a91d	kernel.asm	/^ffff80000010a91d:	0f b7 55 fc          	movzwl -0x4(%rbp),%edx$/;"	l
ffff80000010a921	kernel.asm	/^ffff80000010a921:	ee                   	out    %al,(%dx)$/;"	l
ffff80000010a922	kernel.asm	/^ffff80000010a922:	90                   	nop$/;"	l
ffff80000010a923	kernel.asm	/^ffff80000010a923:	c9                   	leaveq $/;"	l
ffff80000010a924	kernel.asm	/^ffff80000010a924:	c3                   	retq   $/;"	l
ffff80000010a925	kernel.asm	/^ffff80000010a925 <write3C0>:$/;"	l
ffff80000010a925	kernel.asm	/^ffff80000010a925:	55                   	push   %rbp$/;"	l
ffff80000010a926	kernel.asm	/^ffff80000010a926:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a929	kernel.asm	/^ffff80000010a929:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a92d	kernel.asm	/^ffff80000010a92d:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a92f	kernel.asm	/^ffff80000010a92f:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a931	kernel.asm	/^ffff80000010a931:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a934	kernel.asm	/^ffff80000010a934:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a937	kernel.asm	/^ffff80000010a937:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010a93c	kernel.asm	/^ffff80000010a93c:	48 b8 e8 a8 10 00 00 	movabs $0xffff80000010a8e8,%rax$/;"	l
ffff80000010a943	kernel.asm	/^ffff80000010a943:	80 ff ff $/;"	l
ffff80000010a946	kernel.asm	/^ffff80000010a946:	ff d0                	callq  *%rax$/;"	l
ffff80000010a948	kernel.asm	/^ffff80000010a948:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a94c	kernel.asm	/^ffff80000010a94c:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a94e	kernel.asm	/^ffff80000010a94e:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010a953	kernel.asm	/^ffff80000010a953:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010a95a	kernel.asm	/^ffff80000010a95a:	80 ff ff $/;"	l
ffff80000010a95d	kernel.asm	/^ffff80000010a95d:	ff d0                	callq  *%rax$/;"	l
ffff80000010a95f	kernel.asm	/^ffff80000010a95f:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a963	kernel.asm	/^ffff80000010a963:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a965	kernel.asm	/^ffff80000010a965:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010a96a	kernel.asm	/^ffff80000010a96a:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010a971	kernel.asm	/^ffff80000010a971:	80 ff ff $/;"	l
ffff80000010a974	kernel.asm	/^ffff80000010a974:	ff d0                	callq  *%rax$/;"	l
ffff80000010a976	kernel.asm	/^ffff80000010a976:	90                   	nop$/;"	l
ffff80000010a977	kernel.asm	/^ffff80000010a977:	c9                   	leaveq $/;"	l
ffff80000010a978	kernel.asm	/^ffff80000010a978:	c3                   	retq   $/;"	l
ffff80000010a979	kernel.asm	/^ffff80000010a979 <write3C2>:$/;"	l
ffff80000010a979	kernel.asm	/^ffff80000010a979:	55                   	push   %rbp$/;"	l
ffff80000010a97a	kernel.asm	/^ffff80000010a97a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a97d	kernel.asm	/^ffff80000010a97d:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a981	kernel.asm	/^ffff80000010a981:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010a983	kernel.asm	/^ffff80000010a983:	88 45 fc             	mov    %al,-0x4(%rbp)$/;"	l
ffff80000010a986	kernel.asm	/^ffff80000010a986:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a98a	kernel.asm	/^ffff80000010a98a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a98c	kernel.asm	/^ffff80000010a98c:	bf c2 03 00 00       	mov    $0x3c2,%edi$/;"	l
ffff80000010a991	kernel.asm	/^ffff80000010a991:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010a998	kernel.asm	/^ffff80000010a998:	80 ff ff $/;"	l
ffff80000010a99b	kernel.asm	/^ffff80000010a99b:	ff d0                	callq  *%rax$/;"	l
ffff80000010a99d	kernel.asm	/^ffff80000010a99d:	90                   	nop$/;"	l
ffff80000010a99e	kernel.asm	/^ffff80000010a99e:	c9                   	leaveq $/;"	l
ffff80000010a99f	kernel.asm	/^ffff80000010a99f:	c3                   	retq   $/;"	l
ffff80000010a9a0	kernel.asm	/^ffff80000010a9a0 <write3C4>:$/;"	l
ffff80000010a9a0	kernel.asm	/^ffff80000010a9a0:	55                   	push   %rbp$/;"	l
ffff80000010a9a1	kernel.asm	/^ffff80000010a9a1:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a9a4	kernel.asm	/^ffff80000010a9a4:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a9a8	kernel.asm	/^ffff80000010a9a8:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a9aa	kernel.asm	/^ffff80000010a9aa:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a9ac	kernel.asm	/^ffff80000010a9ac:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a9af	kernel.asm	/^ffff80000010a9af:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a9b2	kernel.asm	/^ffff80000010a9b2:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a9b6	kernel.asm	/^ffff80000010a9b6:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a9b8	kernel.asm	/^ffff80000010a9b8:	bf c4 03 00 00       	mov    $0x3c4,%edi$/;"	l
ffff80000010a9bd	kernel.asm	/^ffff80000010a9bd:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010a9c4	kernel.asm	/^ffff80000010a9c4:	80 ff ff $/;"	l
ffff80000010a9c7	kernel.asm	/^ffff80000010a9c7:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9c9	kernel.asm	/^ffff80000010a9c9:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010a9cd	kernel.asm	/^ffff80000010a9cd:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a9cf	kernel.asm	/^ffff80000010a9cf:	bf c5 03 00 00       	mov    $0x3c5,%edi$/;"	l
ffff80000010a9d4	kernel.asm	/^ffff80000010a9d4:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010a9db	kernel.asm	/^ffff80000010a9db:	80 ff ff $/;"	l
ffff80000010a9de	kernel.asm	/^ffff80000010a9de:	ff d0                	callq  *%rax$/;"	l
ffff80000010a9e0	kernel.asm	/^ffff80000010a9e0:	90                   	nop$/;"	l
ffff80000010a9e1	kernel.asm	/^ffff80000010a9e1:	c9                   	leaveq $/;"	l
ffff80000010a9e2	kernel.asm	/^ffff80000010a9e2:	c3                   	retq   $/;"	l
ffff80000010a9e3	kernel.asm	/^ffff80000010a9e3 <write3CE>:$/;"	l
ffff80000010a9e3	kernel.asm	/^ffff80000010a9e3:	55                   	push   %rbp$/;"	l
ffff80000010a9e4	kernel.asm	/^ffff80000010a9e4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010a9e7	kernel.asm	/^ffff80000010a9e7:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010a9eb	kernel.asm	/^ffff80000010a9eb:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010a9ed	kernel.asm	/^ffff80000010a9ed:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010a9ef	kernel.asm	/^ffff80000010a9ef:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010a9f2	kernel.asm	/^ffff80000010a9f2:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010a9f5	kernel.asm	/^ffff80000010a9f5:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010a9f9	kernel.asm	/^ffff80000010a9f9:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010a9fb	kernel.asm	/^ffff80000010a9fb:	bf ce 03 00 00       	mov    $0x3ce,%edi$/;"	l
ffff80000010aa00	kernel.asm	/^ffff80000010aa00:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aa07	kernel.asm	/^ffff80000010aa07:	80 ff ff $/;"	l
ffff80000010aa0a	kernel.asm	/^ffff80000010aa0a:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa0c	kernel.asm	/^ffff80000010aa0c:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010aa10	kernel.asm	/^ffff80000010aa10:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aa12	kernel.asm	/^ffff80000010aa12:	bf cf 03 00 00       	mov    $0x3cf,%edi$/;"	l
ffff80000010aa17	kernel.asm	/^ffff80000010aa17:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aa1e	kernel.asm	/^ffff80000010aa1e:	80 ff ff $/;"	l
ffff80000010aa21	kernel.asm	/^ffff80000010aa21:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa23	kernel.asm	/^ffff80000010aa23:	90                   	nop$/;"	l
ffff80000010aa24	kernel.asm	/^ffff80000010aa24:	c9                   	leaveq $/;"	l
ffff80000010aa25	kernel.asm	/^ffff80000010aa25:	c3                   	retq   $/;"	l
ffff80000010aa26	kernel.asm	/^ffff80000010aa26 <write3D4>:$/;"	l
ffff80000010aa26	kernel.asm	/^ffff80000010aa26:	55                   	push   %rbp$/;"	l
ffff80000010aa27	kernel.asm	/^ffff80000010aa27:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010aa2a	kernel.asm	/^ffff80000010aa2a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010aa2e	kernel.asm	/^ffff80000010aa2e:	89 fa                	mov    %edi,%edx$/;"	l
ffff80000010aa30	kernel.asm	/^ffff80000010aa30:	89 f0                	mov    %esi,%eax$/;"	l
ffff80000010aa32	kernel.asm	/^ffff80000010aa32:	88 55 fc             	mov    %dl,-0x4(%rbp)$/;"	l
ffff80000010aa35	kernel.asm	/^ffff80000010aa35:	88 45 f8             	mov    %al,-0x8(%rbp)$/;"	l
ffff80000010aa38	kernel.asm	/^ffff80000010aa38:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010aa3c	kernel.asm	/^ffff80000010aa3c:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aa3e	kernel.asm	/^ffff80000010aa3e:	bf d4 03 00 00       	mov    $0x3d4,%edi$/;"	l
ffff80000010aa43	kernel.asm	/^ffff80000010aa43:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aa4a	kernel.asm	/^ffff80000010aa4a:	80 ff ff $/;"	l
ffff80000010aa4d	kernel.asm	/^ffff80000010aa4d:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa4f	kernel.asm	/^ffff80000010aa4f:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax$/;"	l
ffff80000010aa53	kernel.asm	/^ffff80000010aa53:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aa55	kernel.asm	/^ffff80000010aa55:	bf d5 03 00 00       	mov    $0x3d5,%edi$/;"	l
ffff80000010aa5a	kernel.asm	/^ffff80000010aa5a:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aa61	kernel.asm	/^ffff80000010aa61:	80 ff ff $/;"	l
ffff80000010aa64	kernel.asm	/^ffff80000010aa64:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa66	kernel.asm	/^ffff80000010aa66:	90                   	nop$/;"	l
ffff80000010aa67	kernel.asm	/^ffff80000010aa67:	c9                   	leaveq $/;"	l
ffff80000010aa68	kernel.asm	/^ffff80000010aa68:	c3                   	retq   $/;"	l
ffff80000010aa69	kernel.asm	/^ffff80000010aa69 <write3C6>:$/;"	l
ffff80000010aa69	kernel.asm	/^ffff80000010aa69:	55                   	push   %rbp$/;"	l
ffff80000010aa6a	kernel.asm	/^ffff80000010aa6a:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010aa6d	kernel.asm	/^ffff80000010aa6d:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010aa71	kernel.asm	/^ffff80000010aa71:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010aa73	kernel.asm	/^ffff80000010aa73:	88 45 fc             	mov    %al,-0x4(%rbp)$/;"	l
ffff80000010aa76	kernel.asm	/^ffff80000010aa76:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax$/;"	l
ffff80000010aa7a	kernel.asm	/^ffff80000010aa7a:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aa7c	kernel.asm	/^ffff80000010aa7c:	bf c6 03 00 00       	mov    $0x3c6,%edi$/;"	l
ffff80000010aa81	kernel.asm	/^ffff80000010aa81:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aa88	kernel.asm	/^ffff80000010aa88:	80 ff ff $/;"	l
ffff80000010aa8b	kernel.asm	/^ffff80000010aa8b:	ff d0                	callq  *%rax$/;"	l
ffff80000010aa8d	kernel.asm	/^ffff80000010aa8d:	90                   	nop$/;"	l
ffff80000010aa8e	kernel.asm	/^ffff80000010aa8e:	c9                   	leaveq $/;"	l
ffff80000010aa8f	kernel.asm	/^ffff80000010aa8f:	c3                   	retq   $/;"	l
ffff80000010aa90	kernel.asm	/^ffff80000010aa90 <vgaSetPalette>:$/;"	l
ffff80000010aa90	kernel.asm	/^ffff80000010aa90:	55                   	push   %rbp$/;"	l
ffff80000010aa91	kernel.asm	/^ffff80000010aa91:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010aa94	kernel.asm	/^ffff80000010aa94:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010aa98	kernel.asm	/^ffff80000010aa98:	89 7d fc             	mov    %edi,-0x4(%rbp)$/;"	l
ffff80000010aa9b	kernel.asm	/^ffff80000010aa9b:	89 75 f8             	mov    %esi,-0x8(%rbp)$/;"	l
ffff80000010aa9e	kernel.asm	/^ffff80000010aa9e:	89 55 f4             	mov    %edx,-0xc(%rbp)$/;"	l
ffff80000010aaa1	kernel.asm	/^ffff80000010aaa1:	89 4d f0             	mov    %ecx,-0x10(%rbp)$/;"	l
ffff80000010aaa4	kernel.asm	/^ffff80000010aaa4:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010aaa7	kernel.asm	/^ffff80000010aaa7:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010aaaa	kernel.asm	/^ffff80000010aaaa:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aaac	kernel.asm	/^ffff80000010aaac:	bf c8 03 00 00       	mov    $0x3c8,%edi$/;"	l
ffff80000010aab1	kernel.asm	/^ffff80000010aab1:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aab8	kernel.asm	/^ffff80000010aab8:	80 ff ff $/;"	l
ffff80000010aabb	kernel.asm	/^ffff80000010aabb:	ff d0                	callq  *%rax$/;"	l
ffff80000010aabd	kernel.asm	/^ffff80000010aabd:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010aac0	kernel.asm	/^ffff80000010aac0:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010aac3	kernel.asm	/^ffff80000010aac3:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aac5	kernel.asm	/^ffff80000010aac5:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010aaca	kernel.asm	/^ffff80000010aaca:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aad1	kernel.asm	/^ffff80000010aad1:	80 ff ff $/;"	l
ffff80000010aad4	kernel.asm	/^ffff80000010aad4:	ff d0                	callq  *%rax$/;"	l
ffff80000010aad6	kernel.asm	/^ffff80000010aad6:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010aad9	kernel.asm	/^ffff80000010aad9:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010aadc	kernel.asm	/^ffff80000010aadc:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aade	kernel.asm	/^ffff80000010aade:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010aae3	kernel.asm	/^ffff80000010aae3:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010aaea	kernel.asm	/^ffff80000010aaea:	80 ff ff $/;"	l
ffff80000010aaed	kernel.asm	/^ffff80000010aaed:	ff d0                	callq  *%rax$/;"	l
ffff80000010aaef	kernel.asm	/^ffff80000010aaef:	8b 45 f0             	mov    -0x10(%rbp),%eax$/;"	l
ffff80000010aaf2	kernel.asm	/^ffff80000010aaf2:	0f b6 c0             	movzbl %al,%eax$/;"	l
ffff80000010aaf5	kernel.asm	/^ffff80000010aaf5:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010aaf7	kernel.asm	/^ffff80000010aaf7:	bf c9 03 00 00       	mov    $0x3c9,%edi$/;"	l
ffff80000010aafc	kernel.asm	/^ffff80000010aafc:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010ab03	kernel.asm	/^ffff80000010ab03:	80 ff ff $/;"	l
ffff80000010ab06	kernel.asm	/^ffff80000010ab06:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab08	kernel.asm	/^ffff80000010ab08:	90                   	nop$/;"	l
ffff80000010ab09	kernel.asm	/^ffff80000010ab09:	c9                   	leaveq $/;"	l
ffff80000010ab0a	kernel.asm	/^ffff80000010ab0a:	c3                   	retq   $/;"	l
ffff80000010ab0b	kernel.asm	/^ffff80000010ab0b <setdefaultVGApalette>:$/;"	l
ffff80000010ab0b	kernel.asm	/^ffff80000010ab0b:	55                   	push   %rbp$/;"	l
ffff80000010ab0c	kernel.asm	/^ffff80000010ab0c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ab0f	kernel.asm	/^ffff80000010ab0f:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010ab13	kernel.asm	/^ffff80000010ab13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010ab1a	kernel.asm	/^ffff80000010ab1a:	eb 4c                	jmp    ffff80000010ab68 <setdefaultVGApalette+0x5d>$/;"	l
ffff80000010ab1c	kernel.asm	/^ffff80000010ab1c:	48 b8 60 ee 10 00 00 	movabs $0xffff80000010ee60,%rax$/;"	l
ffff80000010ab23	kernel.asm	/^ffff80000010ab23:	80 ff ff $/;"	l
ffff80000010ab26	kernel.asm	/^ffff80000010ab26:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010ab29	kernel.asm	/^ffff80000010ab29:	48 63 d2             	movslq %edx,%rdx$/;"	l
ffff80000010ab2c	kernel.asm	/^ffff80000010ab2c:	8b 04 90             	mov    (%rax,%rdx,4),%eax$/;"	l
ffff80000010ab2f	kernel.asm	/^ffff80000010ab2f:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010ab32	kernel.asm	/^ffff80000010ab32:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010ab35	kernel.asm	/^ffff80000010ab35:	c1 f8 02             	sar    $0x2,%eax$/;"	l
ffff80000010ab38	kernel.asm	/^ffff80000010ab38:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010ab3b	kernel.asm	/^ffff80000010ab3b:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010ab3d	kernel.asm	/^ffff80000010ab3d:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010ab40	kernel.asm	/^ffff80000010ab40:	c1 f8 0a             	sar    $0xa,%eax$/;"	l
ffff80000010ab43	kernel.asm	/^ffff80000010ab43:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010ab46	kernel.asm	/^ffff80000010ab46:	89 c2                	mov    %eax,%edx$/;"	l
ffff80000010ab48	kernel.asm	/^ffff80000010ab48:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010ab4b	kernel.asm	/^ffff80000010ab4b:	c1 f8 12             	sar    $0x12,%eax$/;"	l
ffff80000010ab4e	kernel.asm	/^ffff80000010ab4e:	83 e0 3f             	and    $0x3f,%eax$/;"	l
ffff80000010ab51	kernel.asm	/^ffff80000010ab51:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010ab53	kernel.asm	/^ffff80000010ab53:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010ab56	kernel.asm	/^ffff80000010ab56:	89 c7                	mov    %eax,%edi$/;"	l
ffff80000010ab58	kernel.asm	/^ffff80000010ab58:	48 b8 90 aa 10 00 00 	movabs $0xffff80000010aa90,%rax$/;"	l
ffff80000010ab5f	kernel.asm	/^ffff80000010ab5f:	80 ff ff $/;"	l
ffff80000010ab62	kernel.asm	/^ffff80000010ab62:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab64	kernel.asm	/^ffff80000010ab64:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010ab68	kernel.asm	/^ffff80000010ab68:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010ab6f	kernel.asm	/^ffff80000010ab6f:	7e ab                	jle    ffff80000010ab1c <setdefaultVGApalette+0x11>$/;"	l
ffff80000010ab71	kernel.asm	/^ffff80000010ab71:	90                   	nop$/;"	l
ffff80000010ab72	kernel.asm	/^ffff80000010ab72:	c9                   	leaveq $/;"	l
ffff80000010ab73	kernel.asm	/^ffff80000010ab73:	c3                   	retq   $/;"	l
ffff80000010ab74	kernel.asm	/^ffff80000010ab74 <vgaMode13>:$/;"	l
ffff80000010ab74	kernel.asm	/^ffff80000010ab74:	55                   	push   %rbp$/;"	l
ffff80000010ab75	kernel.asm	/^ffff80000010ab75:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010ab78	kernel.asm	/^ffff80000010ab78:	bf 63 00 00 00       	mov    $0x63,%edi$/;"	l
ffff80000010ab7d	kernel.asm	/^ffff80000010ab7d:	48 b8 79 a9 10 00 00 	movabs $0xffff80000010a979,%rax$/;"	l
ffff80000010ab84	kernel.asm	/^ffff80000010ab84:	80 ff ff $/;"	l
ffff80000010ab87	kernel.asm	/^ffff80000010ab87:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab89	kernel.asm	/^ffff80000010ab89:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010ab8e	kernel.asm	/^ffff80000010ab8e:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010ab93	kernel.asm	/^ffff80000010ab93:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010ab9a	kernel.asm	/^ffff80000010ab9a:	80 ff ff $/;"	l
ffff80000010ab9d	kernel.asm	/^ffff80000010ab9d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ab9f	kernel.asm	/^ffff80000010ab9f:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010aba4	kernel.asm	/^ffff80000010aba4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010aba9	kernel.asm	/^ffff80000010aba9:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010abb0	kernel.asm	/^ffff80000010abb0:	80 ff ff $/;"	l
ffff80000010abb3	kernel.asm	/^ffff80000010abb3:	ff d0                	callq  *%rax$/;"	l
ffff80000010abb5	kernel.asm	/^ffff80000010abb5:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010abba	kernel.asm	/^ffff80000010abba:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010abbf	kernel.asm	/^ffff80000010abbf:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010abc6	kernel.asm	/^ffff80000010abc6:	80 ff ff $/;"	l
ffff80000010abc9	kernel.asm	/^ffff80000010abc9:	ff d0                	callq  *%rax$/;"	l
ffff80000010abcb	kernel.asm	/^ffff80000010abcb:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010abd0	kernel.asm	/^ffff80000010abd0:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010abd5	kernel.asm	/^ffff80000010abd5:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010abdc	kernel.asm	/^ffff80000010abdc:	80 ff ff $/;"	l
ffff80000010abdf	kernel.asm	/^ffff80000010abdf:	ff d0                	callq  *%rax$/;"	l
ffff80000010abe1	kernel.asm	/^ffff80000010abe1:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010abe6	kernel.asm	/^ffff80000010abe6:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010abeb	kernel.asm	/^ffff80000010abeb:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010abf2	kernel.asm	/^ffff80000010abf2:	80 ff ff $/;"	l
ffff80000010abf5	kernel.asm	/^ffff80000010abf5:	ff d0                	callq  *%rax$/;"	l
ffff80000010abf7	kernel.asm	/^ffff80000010abf7:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010abfc	kernel.asm	/^ffff80000010abfc:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010ac01	kernel.asm	/^ffff80000010ac01:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac08	kernel.asm	/^ffff80000010ac08:	80 ff ff $/;"	l
ffff80000010ac0b	kernel.asm	/^ffff80000010ac0b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac0d	kernel.asm	/^ffff80000010ac0d:	be 5f 00 00 00       	mov    $0x5f,%esi$/;"	l
ffff80000010ac12	kernel.asm	/^ffff80000010ac12:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010ac17	kernel.asm	/^ffff80000010ac17:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac1e	kernel.asm	/^ffff80000010ac1e:	80 ff ff $/;"	l
ffff80000010ac21	kernel.asm	/^ffff80000010ac21:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac23	kernel.asm	/^ffff80000010ac23:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010ac28	kernel.asm	/^ffff80000010ac28:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010ac2d	kernel.asm	/^ffff80000010ac2d:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac34	kernel.asm	/^ffff80000010ac34:	80 ff ff $/;"	l
ffff80000010ac37	kernel.asm	/^ffff80000010ac37:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac39	kernel.asm	/^ffff80000010ac39:	be 50 00 00 00       	mov    $0x50,%esi$/;"	l
ffff80000010ac3e	kernel.asm	/^ffff80000010ac3e:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010ac43	kernel.asm	/^ffff80000010ac43:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac4a	kernel.asm	/^ffff80000010ac4a:	80 ff ff $/;"	l
ffff80000010ac4d	kernel.asm	/^ffff80000010ac4d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac4f	kernel.asm	/^ffff80000010ac4f:	be 82 00 00 00       	mov    $0x82,%esi$/;"	l
ffff80000010ac54	kernel.asm	/^ffff80000010ac54:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010ac59	kernel.asm	/^ffff80000010ac59:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac60	kernel.asm	/^ffff80000010ac60:	80 ff ff $/;"	l
ffff80000010ac63	kernel.asm	/^ffff80000010ac63:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac65	kernel.asm	/^ffff80000010ac65:	be 54 00 00 00       	mov    $0x54,%esi$/;"	l
ffff80000010ac6a	kernel.asm	/^ffff80000010ac6a:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010ac6f	kernel.asm	/^ffff80000010ac6f:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac76	kernel.asm	/^ffff80000010ac76:	80 ff ff $/;"	l
ffff80000010ac79	kernel.asm	/^ffff80000010ac79:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac7b	kernel.asm	/^ffff80000010ac7b:	be 80 00 00 00       	mov    $0x80,%esi$/;"	l
ffff80000010ac80	kernel.asm	/^ffff80000010ac80:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010ac85	kernel.asm	/^ffff80000010ac85:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ac8c	kernel.asm	/^ffff80000010ac8c:	80 ff ff $/;"	l
ffff80000010ac8f	kernel.asm	/^ffff80000010ac8f:	ff d0                	callq  *%rax$/;"	l
ffff80000010ac91	kernel.asm	/^ffff80000010ac91:	be bf 00 00 00       	mov    $0xbf,%esi$/;"	l
ffff80000010ac96	kernel.asm	/^ffff80000010ac96:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010ac9b	kernel.asm	/^ffff80000010ac9b:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010aca2	kernel.asm	/^ffff80000010aca2:	80 ff ff $/;"	l
ffff80000010aca5	kernel.asm	/^ffff80000010aca5:	ff d0                	callq  *%rax$/;"	l
ffff80000010aca7	kernel.asm	/^ffff80000010aca7:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010acac	kernel.asm	/^ffff80000010acac:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010acb1	kernel.asm	/^ffff80000010acb1:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010acb8	kernel.asm	/^ffff80000010acb8:	80 ff ff $/;"	l
ffff80000010acbb	kernel.asm	/^ffff80000010acbb:	ff d0                	callq  *%rax$/;"	l
ffff80000010acbd	kernel.asm	/^ffff80000010acbd:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010acc2	kernel.asm	/^ffff80000010acc2:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010acc7	kernel.asm	/^ffff80000010acc7:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010acce	kernel.asm	/^ffff80000010acce:	80 ff ff $/;"	l
ffff80000010acd1	kernel.asm	/^ffff80000010acd1:	ff d0                	callq  *%rax$/;"	l
ffff80000010acd3	kernel.asm	/^ffff80000010acd3:	be 41 00 00 00       	mov    $0x41,%esi$/;"	l
ffff80000010acd8	kernel.asm	/^ffff80000010acd8:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010acdd	kernel.asm	/^ffff80000010acdd:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ace4	kernel.asm	/^ffff80000010ace4:	80 ff ff $/;"	l
ffff80000010ace7	kernel.asm	/^ffff80000010ace7:	ff d0                	callq  *%rax$/;"	l
ffff80000010ace9	kernel.asm	/^ffff80000010ace9:	be 9c 00 00 00       	mov    $0x9c,%esi$/;"	l
ffff80000010acee	kernel.asm	/^ffff80000010acee:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010acf3	kernel.asm	/^ffff80000010acf3:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010acfa	kernel.asm	/^ffff80000010acfa:	80 ff ff $/;"	l
ffff80000010acfd	kernel.asm	/^ffff80000010acfd:	ff d0                	callq  *%rax$/;"	l
ffff80000010acff	kernel.asm	/^ffff80000010acff:	be 8f 00 00 00       	mov    $0x8f,%esi$/;"	l
ffff80000010ad04	kernel.asm	/^ffff80000010ad04:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010ad09	kernel.asm	/^ffff80000010ad09:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad10	kernel.asm	/^ffff80000010ad10:	80 ff ff $/;"	l
ffff80000010ad13	kernel.asm	/^ffff80000010ad13:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad15	kernel.asm	/^ffff80000010ad15:	be 28 00 00 00       	mov    $0x28,%esi$/;"	l
ffff80000010ad1a	kernel.asm	/^ffff80000010ad1a:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010ad1f	kernel.asm	/^ffff80000010ad1f:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad26	kernel.asm	/^ffff80000010ad26:	80 ff ff $/;"	l
ffff80000010ad29	kernel.asm	/^ffff80000010ad29:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad2b	kernel.asm	/^ffff80000010ad2b:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010ad30	kernel.asm	/^ffff80000010ad30:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010ad35	kernel.asm	/^ffff80000010ad35:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad3c	kernel.asm	/^ffff80000010ad3c:	80 ff ff $/;"	l
ffff80000010ad3f	kernel.asm	/^ffff80000010ad3f:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad41	kernel.asm	/^ffff80000010ad41:	be 96 00 00 00       	mov    $0x96,%esi$/;"	l
ffff80000010ad46	kernel.asm	/^ffff80000010ad46:	bf 15 00 00 00       	mov    $0x15,%edi$/;"	l
ffff80000010ad4b	kernel.asm	/^ffff80000010ad4b:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad52	kernel.asm	/^ffff80000010ad52:	80 ff ff $/;"	l
ffff80000010ad55	kernel.asm	/^ffff80000010ad55:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad57	kernel.asm	/^ffff80000010ad57:	be b9 00 00 00       	mov    $0xb9,%esi$/;"	l
ffff80000010ad5c	kernel.asm	/^ffff80000010ad5c:	bf 16 00 00 00       	mov    $0x16,%edi$/;"	l
ffff80000010ad61	kernel.asm	/^ffff80000010ad61:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad68	kernel.asm	/^ffff80000010ad68:	80 ff ff $/;"	l
ffff80000010ad6b	kernel.asm	/^ffff80000010ad6b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad6d	kernel.asm	/^ffff80000010ad6d:	be a3 00 00 00       	mov    $0xa3,%esi$/;"	l
ffff80000010ad72	kernel.asm	/^ffff80000010ad72:	bf 17 00 00 00       	mov    $0x17,%edi$/;"	l
ffff80000010ad77	kernel.asm	/^ffff80000010ad77:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad7e	kernel.asm	/^ffff80000010ad7e:	80 ff ff $/;"	l
ffff80000010ad81	kernel.asm	/^ffff80000010ad81:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad83	kernel.asm	/^ffff80000010ad83:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010ad88	kernel.asm	/^ffff80000010ad88:	bf 18 00 00 00       	mov    $0x18,%edi$/;"	l
ffff80000010ad8d	kernel.asm	/^ffff80000010ad8d:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010ad94	kernel.asm	/^ffff80000010ad94:	80 ff ff $/;"	l
ffff80000010ad97	kernel.asm	/^ffff80000010ad97:	ff d0                	callq  *%rax$/;"	l
ffff80000010ad99	kernel.asm	/^ffff80000010ad99:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ad9e	kernel.asm	/^ffff80000010ad9e:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010ada3	kernel.asm	/^ffff80000010ada3:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010adaa	kernel.asm	/^ffff80000010adaa:	80 ff ff $/;"	l
ffff80000010adad	kernel.asm	/^ffff80000010adad:	ff d0                	callq  *%rax$/;"	l
ffff80000010adaf	kernel.asm	/^ffff80000010adaf:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010adb4	kernel.asm	/^ffff80000010adb4:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010adb9	kernel.asm	/^ffff80000010adb9:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010adc0	kernel.asm	/^ffff80000010adc0:	80 ff ff $/;"	l
ffff80000010adc3	kernel.asm	/^ffff80000010adc3:	ff d0                	callq  *%rax$/;"	l
ffff80000010adc5	kernel.asm	/^ffff80000010adc5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010adca	kernel.asm	/^ffff80000010adca:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010adcf	kernel.asm	/^ffff80000010adcf:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010add6	kernel.asm	/^ffff80000010add6:	80 ff ff $/;"	l
ffff80000010add9	kernel.asm	/^ffff80000010add9:	ff d0                	callq  *%rax$/;"	l
ffff80000010addb	kernel.asm	/^ffff80000010addb:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ade0	kernel.asm	/^ffff80000010ade0:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010ade5	kernel.asm	/^ffff80000010ade5:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010adec	kernel.asm	/^ffff80000010adec:	80 ff ff $/;"	l
ffff80000010adef	kernel.asm	/^ffff80000010adef:	ff d0                	callq  *%rax$/;"	l
ffff80000010adf1	kernel.asm	/^ffff80000010adf1:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010adf6	kernel.asm	/^ffff80000010adf6:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010adfb	kernel.asm	/^ffff80000010adfb:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010ae02	kernel.asm	/^ffff80000010ae02:	80 ff ff $/;"	l
ffff80000010ae05	kernel.asm	/^ffff80000010ae05:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae07	kernel.asm	/^ffff80000010ae07:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010ae0c	kernel.asm	/^ffff80000010ae0c:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010ae11	kernel.asm	/^ffff80000010ae11:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010ae18	kernel.asm	/^ffff80000010ae18:	80 ff ff $/;"	l
ffff80000010ae1b	kernel.asm	/^ffff80000010ae1b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae1d	kernel.asm	/^ffff80000010ae1d:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010ae22	kernel.asm	/^ffff80000010ae22:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010ae27	kernel.asm	/^ffff80000010ae27:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010ae2e	kernel.asm	/^ffff80000010ae2e:	80 ff ff $/;"	l
ffff80000010ae31	kernel.asm	/^ffff80000010ae31:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae33	kernel.asm	/^ffff80000010ae33:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010ae38	kernel.asm	/^ffff80000010ae38:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010ae3d	kernel.asm	/^ffff80000010ae3d:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010ae44	kernel.asm	/^ffff80000010ae44:	80 ff ff $/;"	l
ffff80000010ae47	kernel.asm	/^ffff80000010ae47:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae49	kernel.asm	/^ffff80000010ae49:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010ae4e	kernel.asm	/^ffff80000010ae4e:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010ae53	kernel.asm	/^ffff80000010ae53:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010ae5a	kernel.asm	/^ffff80000010ae5a:	80 ff ff $/;"	l
ffff80000010ae5d	kernel.asm	/^ffff80000010ae5d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae5f	kernel.asm	/^ffff80000010ae5f:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010ae64	kernel.asm	/^ffff80000010ae64:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010ae69	kernel.asm	/^ffff80000010ae69:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010ae70	kernel.asm	/^ffff80000010ae70:	80 ff ff $/;"	l
ffff80000010ae73	kernel.asm	/^ffff80000010ae73:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae75	kernel.asm	/^ffff80000010ae75:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010ae7a	kernel.asm	/^ffff80000010ae7a:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010ae7f	kernel.asm	/^ffff80000010ae7f:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010ae86	kernel.asm	/^ffff80000010ae86:	80 ff ff $/;"	l
ffff80000010ae89	kernel.asm	/^ffff80000010ae89:	ff d0                	callq  *%rax$/;"	l
ffff80000010ae8b	kernel.asm	/^ffff80000010ae8b:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010ae90	kernel.asm	/^ffff80000010ae90:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010ae95	kernel.asm	/^ffff80000010ae95:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010ae9c	kernel.asm	/^ffff80000010ae9c:	80 ff ff $/;"	l
ffff80000010ae9f	kernel.asm	/^ffff80000010ae9f:	ff d0                	callq  *%rax$/;"	l
ffff80000010aea1	kernel.asm	/^ffff80000010aea1:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010aea6	kernel.asm	/^ffff80000010aea6:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010aeab	kernel.asm	/^ffff80000010aeab:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010aeb2	kernel.asm	/^ffff80000010aeb2:	80 ff ff $/;"	l
ffff80000010aeb5	kernel.asm	/^ffff80000010aeb5:	ff d0                	callq  *%rax$/;"	l
ffff80000010aeb7	kernel.asm	/^ffff80000010aeb7:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010aebc	kernel.asm	/^ffff80000010aebc:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010aec1	kernel.asm	/^ffff80000010aec1:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010aec8	kernel.asm	/^ffff80000010aec8:	80 ff ff $/;"	l
ffff80000010aecb	kernel.asm	/^ffff80000010aecb:	ff d0                	callq  *%rax$/;"	l
ffff80000010aecd	kernel.asm	/^ffff80000010aecd:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010aed2	kernel.asm	/^ffff80000010aed2:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010aed7	kernel.asm	/^ffff80000010aed7:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010aede	kernel.asm	/^ffff80000010aede:	80 ff ff $/;"	l
ffff80000010aee1	kernel.asm	/^ffff80000010aee1:	ff d0                	callq  *%rax$/;"	l
ffff80000010aee3	kernel.asm	/^ffff80000010aee3:	be 06 00 00 00       	mov    $0x6,%esi$/;"	l
ffff80000010aee8	kernel.asm	/^ffff80000010aee8:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010aeed	kernel.asm	/^ffff80000010aeed:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010aef4	kernel.asm	/^ffff80000010aef4:	80 ff ff $/;"	l
ffff80000010aef7	kernel.asm	/^ffff80000010aef7:	ff d0                	callq  *%rax$/;"	l
ffff80000010aef9	kernel.asm	/^ffff80000010aef9:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010aefe	kernel.asm	/^ffff80000010aefe:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010af03	kernel.asm	/^ffff80000010af03:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af0a	kernel.asm	/^ffff80000010af0a:	80 ff ff $/;"	l
ffff80000010af0d	kernel.asm	/^ffff80000010af0d:	ff d0                	callq  *%rax$/;"	l
ffff80000010af0f	kernel.asm	/^ffff80000010af0f:	be 08 00 00 00       	mov    $0x8,%esi$/;"	l
ffff80000010af14	kernel.asm	/^ffff80000010af14:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010af19	kernel.asm	/^ffff80000010af19:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af20	kernel.asm	/^ffff80000010af20:	80 ff ff $/;"	l
ffff80000010af23	kernel.asm	/^ffff80000010af23:	ff d0                	callq  *%rax$/;"	l
ffff80000010af25	kernel.asm	/^ffff80000010af25:	be 09 00 00 00       	mov    $0x9,%esi$/;"	l
ffff80000010af2a	kernel.asm	/^ffff80000010af2a:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010af2f	kernel.asm	/^ffff80000010af2f:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af36	kernel.asm	/^ffff80000010af36:	80 ff ff $/;"	l
ffff80000010af39	kernel.asm	/^ffff80000010af39:	ff d0                	callq  *%rax$/;"	l
ffff80000010af3b	kernel.asm	/^ffff80000010af3b:	be 0a 00 00 00       	mov    $0xa,%esi$/;"	l
ffff80000010af40	kernel.asm	/^ffff80000010af40:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010af45	kernel.asm	/^ffff80000010af45:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af4c	kernel.asm	/^ffff80000010af4c:	80 ff ff $/;"	l
ffff80000010af4f	kernel.asm	/^ffff80000010af4f:	ff d0                	callq  *%rax$/;"	l
ffff80000010af51	kernel.asm	/^ffff80000010af51:	be 0b 00 00 00       	mov    $0xb,%esi$/;"	l
ffff80000010af56	kernel.asm	/^ffff80000010af56:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010af5b	kernel.asm	/^ffff80000010af5b:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af62	kernel.asm	/^ffff80000010af62:	80 ff ff $/;"	l
ffff80000010af65	kernel.asm	/^ffff80000010af65:	ff d0                	callq  *%rax$/;"	l
ffff80000010af67	kernel.asm	/^ffff80000010af67:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff80000010af6c	kernel.asm	/^ffff80000010af6c:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010af71	kernel.asm	/^ffff80000010af71:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af78	kernel.asm	/^ffff80000010af78:	80 ff ff $/;"	l
ffff80000010af7b	kernel.asm	/^ffff80000010af7b:	ff d0                	callq  *%rax$/;"	l
ffff80000010af7d	kernel.asm	/^ffff80000010af7d:	be 0d 00 00 00       	mov    $0xd,%esi$/;"	l
ffff80000010af82	kernel.asm	/^ffff80000010af82:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010af87	kernel.asm	/^ffff80000010af87:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010af8e	kernel.asm	/^ffff80000010af8e:	80 ff ff $/;"	l
ffff80000010af91	kernel.asm	/^ffff80000010af91:	ff d0                	callq  *%rax$/;"	l
ffff80000010af93	kernel.asm	/^ffff80000010af93:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010af98	kernel.asm	/^ffff80000010af98:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010af9d	kernel.asm	/^ffff80000010af9d:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010afa4	kernel.asm	/^ffff80000010afa4:	80 ff ff $/;"	l
ffff80000010afa7	kernel.asm	/^ffff80000010afa7:	ff d0                	callq  *%rax$/;"	l
ffff80000010afa9	kernel.asm	/^ffff80000010afa9:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010afae	kernel.asm	/^ffff80000010afae:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010afb3	kernel.asm	/^ffff80000010afb3:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010afba	kernel.asm	/^ffff80000010afba:	80 ff ff $/;"	l
ffff80000010afbd	kernel.asm	/^ffff80000010afbd:	ff d0                	callq  *%rax$/;"	l
ffff80000010afbf	kernel.asm	/^ffff80000010afbf:	be 41 00 00 00       	mov    $0x41,%esi$/;"	l
ffff80000010afc4	kernel.asm	/^ffff80000010afc4:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010afc9	kernel.asm	/^ffff80000010afc9:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010afd0	kernel.asm	/^ffff80000010afd0:	80 ff ff $/;"	l
ffff80000010afd3	kernel.asm	/^ffff80000010afd3:	ff d0                	callq  *%rax$/;"	l
ffff80000010afd5	kernel.asm	/^ffff80000010afd5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010afda	kernel.asm	/^ffff80000010afda:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010afdf	kernel.asm	/^ffff80000010afdf:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010afe6	kernel.asm	/^ffff80000010afe6:	80 ff ff $/;"	l
ffff80000010afe9	kernel.asm	/^ffff80000010afe9:	ff d0                	callq  *%rax$/;"	l
ffff80000010afeb	kernel.asm	/^ffff80000010afeb:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010aff0	kernel.asm	/^ffff80000010aff0:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010aff5	kernel.asm	/^ffff80000010aff5:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010affc	kernel.asm	/^ffff80000010affc:	80 ff ff $/;"	l
ffff80000010afff	kernel.asm	/^ffff80000010afff:	ff d0                	callq  *%rax$/;"	l
ffff80000010b001	kernel.asm	/^ffff80000010b001:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b006	kernel.asm	/^ffff80000010b006:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010b00b	kernel.asm	/^ffff80000010b00b:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b012	kernel.asm	/^ffff80000010b012:	80 ff ff $/;"	l
ffff80000010b015	kernel.asm	/^ffff80000010b015:	ff d0                	callq  *%rax$/;"	l
ffff80000010b017	kernel.asm	/^ffff80000010b017:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b01c	kernel.asm	/^ffff80000010b01c:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010b021	kernel.asm	/^ffff80000010b021:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b028	kernel.asm	/^ffff80000010b028:	80 ff ff $/;"	l
ffff80000010b02b	kernel.asm	/^ffff80000010b02b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b02d	kernel.asm	/^ffff80000010b02d:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010b032	kernel.asm	/^ffff80000010b032:	48 b8 e8 a8 10 00 00 	movabs $0xffff80000010a8e8,%rax$/;"	l
ffff80000010b039	kernel.asm	/^ffff80000010b039:	80 ff ff $/;"	l
ffff80000010b03c	kernel.asm	/^ffff80000010b03c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b03e	kernel.asm	/^ffff80000010b03e:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010b043	kernel.asm	/^ffff80000010b043:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010b048	kernel.asm	/^ffff80000010b048:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010b04f	kernel.asm	/^ffff80000010b04f:	80 ff ff $/;"	l
ffff80000010b052	kernel.asm	/^ffff80000010b052:	ff d0                	callq  *%rax$/;"	l
ffff80000010b054	kernel.asm	/^ffff80000010b054:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010b059	kernel.asm	/^ffff80000010b059:	48 ba 0b ab 10 00 00 	movabs $0xffff80000010ab0b,%rdx$/;"	l
ffff80000010b060	kernel.asm	/^ffff80000010b060:	80 ff ff $/;"	l
ffff80000010b063	kernel.asm	/^ffff80000010b063:	ff d2                	callq  *%rdx$/;"	l
ffff80000010b065	kernel.asm	/^ffff80000010b065:	90                   	nop$/;"	l
ffff80000010b066	kernel.asm	/^ffff80000010b066:	5d                   	pop    %rbp$/;"	l
ffff80000010b067	kernel.asm	/^ffff80000010b067:	c3                   	retq   $/;"	l
ffff80000010b068	kernel.asm	/^ffff80000010b068 <vgaMode3>:$/;"	l
ffff80000010b068	kernel.asm	/^ffff80000010b068:	55                   	push   %rbp$/;"	l
ffff80000010b069	kernel.asm	/^ffff80000010b069:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b06c	kernel.asm	/^ffff80000010b06c:	48 83 ec 10          	sub    $0x10,%rsp$/;"	l
ffff80000010b070	kernel.asm	/^ffff80000010b070:	bf 67 00 00 00       	mov    $0x67,%edi$/;"	l
ffff80000010b075	kernel.asm	/^ffff80000010b075:	48 b8 79 a9 10 00 00 	movabs $0xffff80000010a979,%rax$/;"	l
ffff80000010b07c	kernel.asm	/^ffff80000010b07c:	80 ff ff $/;"	l
ffff80000010b07f	kernel.asm	/^ffff80000010b07f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b081	kernel.asm	/^ffff80000010b081:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b086	kernel.asm	/^ffff80000010b086:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b08b	kernel.asm	/^ffff80000010b08b:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b092	kernel.asm	/^ffff80000010b092:	80 ff ff $/;"	l
ffff80000010b095	kernel.asm	/^ffff80000010b095:	ff d0                	callq  *%rax$/;"	l
ffff80000010b097	kernel.asm	/^ffff80000010b097:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b09c	kernel.asm	/^ffff80000010b09c:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b0a1	kernel.asm	/^ffff80000010b0a1:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b0a8	kernel.asm	/^ffff80000010b0a8:	80 ff ff $/;"	l
ffff80000010b0ab	kernel.asm	/^ffff80000010b0ab:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0ad	kernel.asm	/^ffff80000010b0ad:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b0b2	kernel.asm	/^ffff80000010b0b2:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b0b7	kernel.asm	/^ffff80000010b0b7:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b0be	kernel.asm	/^ffff80000010b0be:	80 ff ff $/;"	l
ffff80000010b0c1	kernel.asm	/^ffff80000010b0c1:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0c3	kernel.asm	/^ffff80000010b0c3:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b0c8	kernel.asm	/^ffff80000010b0c8:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b0cd	kernel.asm	/^ffff80000010b0cd:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b0d4	kernel.asm	/^ffff80000010b0d4:	80 ff ff $/;"	l
ffff80000010b0d7	kernel.asm	/^ffff80000010b0d7:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0d9	kernel.asm	/^ffff80000010b0d9:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b0de	kernel.asm	/^ffff80000010b0de:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b0e3	kernel.asm	/^ffff80000010b0e3:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b0ea	kernel.asm	/^ffff80000010b0ea:	80 ff ff $/;"	l
ffff80000010b0ed	kernel.asm	/^ffff80000010b0ed:	ff d0                	callq  *%rax$/;"	l
ffff80000010b0ef	kernel.asm	/^ffff80000010b0ef:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b0f4	kernel.asm	/^ffff80000010b0f4:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010b0f9	kernel.asm	/^ffff80000010b0f9:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b100	kernel.asm	/^ffff80000010b100:	80 ff ff $/;"	l
ffff80000010b103	kernel.asm	/^ffff80000010b103:	ff d0                	callq  *%rax$/;"	l
ffff80000010b105	kernel.asm	/^ffff80000010b105:	be 5f 00 00 00       	mov    $0x5f,%esi$/;"	l
ffff80000010b10a	kernel.asm	/^ffff80000010b10a:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b10f	kernel.asm	/^ffff80000010b10f:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b116	kernel.asm	/^ffff80000010b116:	80 ff ff $/;"	l
ffff80000010b119	kernel.asm	/^ffff80000010b119:	ff d0                	callq  *%rax$/;"	l
ffff80000010b11b	kernel.asm	/^ffff80000010b11b:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010b120	kernel.asm	/^ffff80000010b120:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b125	kernel.asm	/^ffff80000010b125:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b12c	kernel.asm	/^ffff80000010b12c:	80 ff ff $/;"	l
ffff80000010b12f	kernel.asm	/^ffff80000010b12f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b131	kernel.asm	/^ffff80000010b131:	be 50 00 00 00       	mov    $0x50,%esi$/;"	l
ffff80000010b136	kernel.asm	/^ffff80000010b136:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b13b	kernel.asm	/^ffff80000010b13b:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b142	kernel.asm	/^ffff80000010b142:	80 ff ff $/;"	l
ffff80000010b145	kernel.asm	/^ffff80000010b145:	ff d0                	callq  *%rax$/;"	l
ffff80000010b147	kernel.asm	/^ffff80000010b147:	be 82 00 00 00       	mov    $0x82,%esi$/;"	l
ffff80000010b14c	kernel.asm	/^ffff80000010b14c:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b151	kernel.asm	/^ffff80000010b151:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b158	kernel.asm	/^ffff80000010b158:	80 ff ff $/;"	l
ffff80000010b15b	kernel.asm	/^ffff80000010b15b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b15d	kernel.asm	/^ffff80000010b15d:	be 55 00 00 00       	mov    $0x55,%esi$/;"	l
ffff80000010b162	kernel.asm	/^ffff80000010b162:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b167	kernel.asm	/^ffff80000010b167:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b16e	kernel.asm	/^ffff80000010b16e:	80 ff ff $/;"	l
ffff80000010b171	kernel.asm	/^ffff80000010b171:	ff d0                	callq  *%rax$/;"	l
ffff80000010b173	kernel.asm	/^ffff80000010b173:	be 81 00 00 00       	mov    $0x81,%esi$/;"	l
ffff80000010b178	kernel.asm	/^ffff80000010b178:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b17d	kernel.asm	/^ffff80000010b17d:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b184	kernel.asm	/^ffff80000010b184:	80 ff ff $/;"	l
ffff80000010b187	kernel.asm	/^ffff80000010b187:	ff d0                	callq  *%rax$/;"	l
ffff80000010b189	kernel.asm	/^ffff80000010b189:	be bf 00 00 00       	mov    $0xbf,%esi$/;"	l
ffff80000010b18e	kernel.asm	/^ffff80000010b18e:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b193	kernel.asm	/^ffff80000010b193:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b19a	kernel.asm	/^ffff80000010b19a:	80 ff ff $/;"	l
ffff80000010b19d	kernel.asm	/^ffff80000010b19d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b19f	kernel.asm	/^ffff80000010b19f:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010b1a4	kernel.asm	/^ffff80000010b1a4:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010b1a9	kernel.asm	/^ffff80000010b1a9:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b1b0	kernel.asm	/^ffff80000010b1b0:	80 ff ff $/;"	l
ffff80000010b1b3	kernel.asm	/^ffff80000010b1b3:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1b5	kernel.asm	/^ffff80000010b1b5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b1ba	kernel.asm	/^ffff80000010b1ba:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010b1bf	kernel.asm	/^ffff80000010b1bf:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b1c6	kernel.asm	/^ffff80000010b1c6:	80 ff ff $/;"	l
ffff80000010b1c9	kernel.asm	/^ffff80000010b1c9:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1cb	kernel.asm	/^ffff80000010b1cb:	be 4f 00 00 00       	mov    $0x4f,%esi$/;"	l
ffff80000010b1d0	kernel.asm	/^ffff80000010b1d0:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010b1d5	kernel.asm	/^ffff80000010b1d5:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b1dc	kernel.asm	/^ffff80000010b1dc:	80 ff ff $/;"	l
ffff80000010b1df	kernel.asm	/^ffff80000010b1df:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1e1	kernel.asm	/^ffff80000010b1e1:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010b1e6	kernel.asm	/^ffff80000010b1e6:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010b1eb	kernel.asm	/^ffff80000010b1eb:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b1f2	kernel.asm	/^ffff80000010b1f2:	80 ff ff $/;"	l
ffff80000010b1f5	kernel.asm	/^ffff80000010b1f5:	ff d0                	callq  *%rax$/;"	l
ffff80000010b1f7	kernel.asm	/^ffff80000010b1f7:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b1fc	kernel.asm	/^ffff80000010b1fc:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010b201	kernel.asm	/^ffff80000010b201:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b208	kernel.asm	/^ffff80000010b208:	80 ff ff $/;"	l
ffff80000010b20b	kernel.asm	/^ffff80000010b20b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b20d	kernel.asm	/^ffff80000010b20d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b212	kernel.asm	/^ffff80000010b212:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010b217	kernel.asm	/^ffff80000010b217:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b21e	kernel.asm	/^ffff80000010b21e:	80 ff ff $/;"	l
ffff80000010b221	kernel.asm	/^ffff80000010b221:	ff d0                	callq  *%rax$/;"	l
ffff80000010b223	kernel.asm	/^ffff80000010b223:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b228	kernel.asm	/^ffff80000010b228:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010b22d	kernel.asm	/^ffff80000010b22d:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b234	kernel.asm	/^ffff80000010b234:	80 ff ff $/;"	l
ffff80000010b237	kernel.asm	/^ffff80000010b237:	ff d0                	callq  *%rax$/;"	l
ffff80000010b239	kernel.asm	/^ffff80000010b239:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b23e	kernel.asm	/^ffff80000010b23e:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010b243	kernel.asm	/^ffff80000010b243:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b24a	kernel.asm	/^ffff80000010b24a:	80 ff ff $/;"	l
ffff80000010b24d	kernel.asm	/^ffff80000010b24d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b24f	kernel.asm	/^ffff80000010b24f:	be e0 00 00 00       	mov    $0xe0,%esi$/;"	l
ffff80000010b254	kernel.asm	/^ffff80000010b254:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010b259	kernel.asm	/^ffff80000010b259:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b260	kernel.asm	/^ffff80000010b260:	80 ff ff $/;"	l
ffff80000010b263	kernel.asm	/^ffff80000010b263:	ff d0                	callq  *%rax$/;"	l
ffff80000010b265	kernel.asm	/^ffff80000010b265:	be 9c 00 00 00       	mov    $0x9c,%esi$/;"	l
ffff80000010b26a	kernel.asm	/^ffff80000010b26a:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010b26f	kernel.asm	/^ffff80000010b26f:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b276	kernel.asm	/^ffff80000010b276:	80 ff ff $/;"	l
ffff80000010b279	kernel.asm	/^ffff80000010b279:	ff d0                	callq  *%rax$/;"	l
ffff80000010b27b	kernel.asm	/^ffff80000010b27b:	be 8e 00 00 00       	mov    $0x8e,%esi$/;"	l
ffff80000010b280	kernel.asm	/^ffff80000010b280:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010b285	kernel.asm	/^ffff80000010b285:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b28c	kernel.asm	/^ffff80000010b28c:	80 ff ff $/;"	l
ffff80000010b28f	kernel.asm	/^ffff80000010b28f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b291	kernel.asm	/^ffff80000010b291:	be 8f 00 00 00       	mov    $0x8f,%esi$/;"	l
ffff80000010b296	kernel.asm	/^ffff80000010b296:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010b29b	kernel.asm	/^ffff80000010b29b:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b2a2	kernel.asm	/^ffff80000010b2a2:	80 ff ff $/;"	l
ffff80000010b2a5	kernel.asm	/^ffff80000010b2a5:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2a7	kernel.asm	/^ffff80000010b2a7:	be 28 00 00 00       	mov    $0x28,%esi$/;"	l
ffff80000010b2ac	kernel.asm	/^ffff80000010b2ac:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010b2b1	kernel.asm	/^ffff80000010b2b1:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b2b8	kernel.asm	/^ffff80000010b2b8:	80 ff ff $/;"	l
ffff80000010b2bb	kernel.asm	/^ffff80000010b2bb:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2bd	kernel.asm	/^ffff80000010b2bd:	be 1f 00 00 00       	mov    $0x1f,%esi$/;"	l
ffff80000010b2c2	kernel.asm	/^ffff80000010b2c2:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010b2c7	kernel.asm	/^ffff80000010b2c7:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b2ce	kernel.asm	/^ffff80000010b2ce:	80 ff ff $/;"	l
ffff80000010b2d1	kernel.asm	/^ffff80000010b2d1:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2d3	kernel.asm	/^ffff80000010b2d3:	be 96 00 00 00       	mov    $0x96,%esi$/;"	l
ffff80000010b2d8	kernel.asm	/^ffff80000010b2d8:	bf 15 00 00 00       	mov    $0x15,%edi$/;"	l
ffff80000010b2dd	kernel.asm	/^ffff80000010b2dd:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b2e4	kernel.asm	/^ffff80000010b2e4:	80 ff ff $/;"	l
ffff80000010b2e7	kernel.asm	/^ffff80000010b2e7:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2e9	kernel.asm	/^ffff80000010b2e9:	be b9 00 00 00       	mov    $0xb9,%esi$/;"	l
ffff80000010b2ee	kernel.asm	/^ffff80000010b2ee:	bf 16 00 00 00       	mov    $0x16,%edi$/;"	l
ffff80000010b2f3	kernel.asm	/^ffff80000010b2f3:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b2fa	kernel.asm	/^ffff80000010b2fa:	80 ff ff $/;"	l
ffff80000010b2fd	kernel.asm	/^ffff80000010b2fd:	ff d0                	callq  *%rax$/;"	l
ffff80000010b2ff	kernel.asm	/^ffff80000010b2ff:	be a3 00 00 00       	mov    $0xa3,%esi$/;"	l
ffff80000010b304	kernel.asm	/^ffff80000010b304:	bf 17 00 00 00       	mov    $0x17,%edi$/;"	l
ffff80000010b309	kernel.asm	/^ffff80000010b309:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b310	kernel.asm	/^ffff80000010b310:	80 ff ff $/;"	l
ffff80000010b313	kernel.asm	/^ffff80000010b313:	ff d0                	callq  *%rax$/;"	l
ffff80000010b315	kernel.asm	/^ffff80000010b315:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010b31a	kernel.asm	/^ffff80000010b31a:	bf 18 00 00 00       	mov    $0x18,%edi$/;"	l
ffff80000010b31f	kernel.asm	/^ffff80000010b31f:	48 b8 26 aa 10 00 00 	movabs $0xffff80000010aa26,%rax$/;"	l
ffff80000010b326	kernel.asm	/^ffff80000010b326:	80 ff ff $/;"	l
ffff80000010b329	kernel.asm	/^ffff80000010b329:	ff d0                	callq  *%rax$/;"	l
ffff80000010b32b	kernel.asm	/^ffff80000010b32b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b330	kernel.asm	/^ffff80000010b330:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b335	kernel.asm	/^ffff80000010b335:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b33c	kernel.asm	/^ffff80000010b33c:	80 ff ff $/;"	l
ffff80000010b33f	kernel.asm	/^ffff80000010b33f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b341	kernel.asm	/^ffff80000010b341:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b346	kernel.asm	/^ffff80000010b346:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b34b	kernel.asm	/^ffff80000010b34b:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b352	kernel.asm	/^ffff80000010b352:	80 ff ff $/;"	l
ffff80000010b355	kernel.asm	/^ffff80000010b355:	ff d0                	callq  *%rax$/;"	l
ffff80000010b357	kernel.asm	/^ffff80000010b357:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b35c	kernel.asm	/^ffff80000010b35c:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b361	kernel.asm	/^ffff80000010b361:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b368	kernel.asm	/^ffff80000010b368:	80 ff ff $/;"	l
ffff80000010b36b	kernel.asm	/^ffff80000010b36b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b36d	kernel.asm	/^ffff80000010b36d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b372	kernel.asm	/^ffff80000010b372:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b377	kernel.asm	/^ffff80000010b377:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b37e	kernel.asm	/^ffff80000010b37e:	80 ff ff $/;"	l
ffff80000010b381	kernel.asm	/^ffff80000010b381:	ff d0                	callq  *%rax$/;"	l
ffff80000010b383	kernel.asm	/^ffff80000010b383:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b388	kernel.asm	/^ffff80000010b388:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b38d	kernel.asm	/^ffff80000010b38d:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b394	kernel.asm	/^ffff80000010b394:	80 ff ff $/;"	l
ffff80000010b397	kernel.asm	/^ffff80000010b397:	ff d0                	callq  *%rax$/;"	l
ffff80000010b399	kernel.asm	/^ffff80000010b399:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff80000010b39e	kernel.asm	/^ffff80000010b39e:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b3a3	kernel.asm	/^ffff80000010b3a3:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b3aa	kernel.asm	/^ffff80000010b3aa:	80 ff ff $/;"	l
ffff80000010b3ad	kernel.asm	/^ffff80000010b3ad:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3af	kernel.asm	/^ffff80000010b3af:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b3b4	kernel.asm	/^ffff80000010b3b4:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b3b9	kernel.asm	/^ffff80000010b3b9:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b3c0	kernel.asm	/^ffff80000010b3c0:	80 ff ff $/;"	l
ffff80000010b3c3	kernel.asm	/^ffff80000010b3c3:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3c5	kernel.asm	/^ffff80000010b3c5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b3ca	kernel.asm	/^ffff80000010b3ca:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010b3cf	kernel.asm	/^ffff80000010b3cf:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b3d6	kernel.asm	/^ffff80000010b3d6:	80 ff ff $/;"	l
ffff80000010b3d9	kernel.asm	/^ffff80000010b3d9:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3db	kernel.asm	/^ffff80000010b3db:	be ff 00 00 00       	mov    $0xff,%esi$/;"	l
ffff80000010b3e0	kernel.asm	/^ffff80000010b3e0:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010b3e5	kernel.asm	/^ffff80000010b3e5:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b3ec	kernel.asm	/^ffff80000010b3ec:	80 ff ff $/;"	l
ffff80000010b3ef	kernel.asm	/^ffff80000010b3ef:	ff d0                	callq  *%rax$/;"	l
ffff80000010b3f1	kernel.asm	/^ffff80000010b3f1:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010b3f6	kernel.asm	/^ffff80000010b3f6:	48 b8 e8 a8 10 00 00 	movabs $0xffff80000010a8e8,%rax$/;"	l
ffff80000010b3fd	kernel.asm	/^ffff80000010b3fd:	80 ff ff $/;"	l
ffff80000010b400	kernel.asm	/^ffff80000010b400:	ff d0                	callq  *%rax$/;"	l
ffff80000010b402	kernel.asm	/^ffff80000010b402:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b407	kernel.asm	/^ffff80000010b407:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b40c	kernel.asm	/^ffff80000010b40c:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b413	kernel.asm	/^ffff80000010b413:	80 ff ff $/;"	l
ffff80000010b416	kernel.asm	/^ffff80000010b416:	ff d0                	callq  *%rax$/;"	l
ffff80000010b418	kernel.asm	/^ffff80000010b418:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b41d	kernel.asm	/^ffff80000010b41d:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ffff80000010b422	kernel.asm	/^ffff80000010b422:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b429	kernel.asm	/^ffff80000010b429:	80 ff ff $/;"	l
ffff80000010b42c	kernel.asm	/^ffff80000010b42c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b42e	kernel.asm	/^ffff80000010b42e:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b433	kernel.asm	/^ffff80000010b433:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b438	kernel.asm	/^ffff80000010b438:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b43f	kernel.asm	/^ffff80000010b43f:	80 ff ff $/;"	l
ffff80000010b442	kernel.asm	/^ffff80000010b442:	ff d0                	callq  *%rax$/;"	l
ffff80000010b444	kernel.asm	/^ffff80000010b444:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b449	kernel.asm	/^ffff80000010b449:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b44e	kernel.asm	/^ffff80000010b44e:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b455	kernel.asm	/^ffff80000010b455:	80 ff ff $/;"	l
ffff80000010b458	kernel.asm	/^ffff80000010b458:	ff d0                	callq  *%rax$/;"	l
ffff80000010b45a	kernel.asm	/^ffff80000010b45a:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010b45f	kernel.asm	/^ffff80000010b45f:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b464	kernel.asm	/^ffff80000010b464:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b46b	kernel.asm	/^ffff80000010b46b:	80 ff ff $/;"	l
ffff80000010b46e	kernel.asm	/^ffff80000010b46e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b470	kernel.asm	/^ffff80000010b470:	be 05 00 00 00       	mov    $0x5,%esi$/;"	l
ffff80000010b475	kernel.asm	/^ffff80000010b475:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b47a	kernel.asm	/^ffff80000010b47a:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b481	kernel.asm	/^ffff80000010b481:	80 ff ff $/;"	l
ffff80000010b484	kernel.asm	/^ffff80000010b484:	ff d0                	callq  *%rax$/;"	l
ffff80000010b486	kernel.asm	/^ffff80000010b486:	be 14 00 00 00       	mov    $0x14,%esi$/;"	l
ffff80000010b48b	kernel.asm	/^ffff80000010b48b:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b490	kernel.asm	/^ffff80000010b490:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b497	kernel.asm	/^ffff80000010b497:	80 ff ff $/;"	l
ffff80000010b49a	kernel.asm	/^ffff80000010b49a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b49c	kernel.asm	/^ffff80000010b49c:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010b4a1	kernel.asm	/^ffff80000010b4a1:	bf 07 00 00 00       	mov    $0x7,%edi$/;"	l
ffff80000010b4a6	kernel.asm	/^ffff80000010b4a6:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b4ad	kernel.asm	/^ffff80000010b4ad:	80 ff ff $/;"	l
ffff80000010b4b0	kernel.asm	/^ffff80000010b4b0:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4b2	kernel.asm	/^ffff80000010b4b2:	be 38 00 00 00       	mov    $0x38,%esi$/;"	l
ffff80000010b4b7	kernel.asm	/^ffff80000010b4b7:	bf 08 00 00 00       	mov    $0x8,%edi$/;"	l
ffff80000010b4bc	kernel.asm	/^ffff80000010b4bc:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b4c3	kernel.asm	/^ffff80000010b4c3:	80 ff ff $/;"	l
ffff80000010b4c6	kernel.asm	/^ffff80000010b4c6:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4c8	kernel.asm	/^ffff80000010b4c8:	be 39 00 00 00       	mov    $0x39,%esi$/;"	l
ffff80000010b4cd	kernel.asm	/^ffff80000010b4cd:	bf 09 00 00 00       	mov    $0x9,%edi$/;"	l
ffff80000010b4d2	kernel.asm	/^ffff80000010b4d2:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b4d9	kernel.asm	/^ffff80000010b4d9:	80 ff ff $/;"	l
ffff80000010b4dc	kernel.asm	/^ffff80000010b4dc:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4de	kernel.asm	/^ffff80000010b4de:	be 3a 00 00 00       	mov    $0x3a,%esi$/;"	l
ffff80000010b4e3	kernel.asm	/^ffff80000010b4e3:	bf 0a 00 00 00       	mov    $0xa,%edi$/;"	l
ffff80000010b4e8	kernel.asm	/^ffff80000010b4e8:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b4ef	kernel.asm	/^ffff80000010b4ef:	80 ff ff $/;"	l
ffff80000010b4f2	kernel.asm	/^ffff80000010b4f2:	ff d0                	callq  *%rax$/;"	l
ffff80000010b4f4	kernel.asm	/^ffff80000010b4f4:	be 3b 00 00 00       	mov    $0x3b,%esi$/;"	l
ffff80000010b4f9	kernel.asm	/^ffff80000010b4f9:	bf 0b 00 00 00       	mov    $0xb,%edi$/;"	l
ffff80000010b4fe	kernel.asm	/^ffff80000010b4fe:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b505	kernel.asm	/^ffff80000010b505:	80 ff ff $/;"	l
ffff80000010b508	kernel.asm	/^ffff80000010b508:	ff d0                	callq  *%rax$/;"	l
ffff80000010b50a	kernel.asm	/^ffff80000010b50a:	be 3c 00 00 00       	mov    $0x3c,%esi$/;"	l
ffff80000010b50f	kernel.asm	/^ffff80000010b50f:	bf 0c 00 00 00       	mov    $0xc,%edi$/;"	l
ffff80000010b514	kernel.asm	/^ffff80000010b514:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b51b	kernel.asm	/^ffff80000010b51b:	80 ff ff $/;"	l
ffff80000010b51e	kernel.asm	/^ffff80000010b51e:	ff d0                	callq  *%rax$/;"	l
ffff80000010b520	kernel.asm	/^ffff80000010b520:	be 3d 00 00 00       	mov    $0x3d,%esi$/;"	l
ffff80000010b525	kernel.asm	/^ffff80000010b525:	bf 0d 00 00 00       	mov    $0xd,%edi$/;"	l
ffff80000010b52a	kernel.asm	/^ffff80000010b52a:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b531	kernel.asm	/^ffff80000010b531:	80 ff ff $/;"	l
ffff80000010b534	kernel.asm	/^ffff80000010b534:	ff d0                	callq  *%rax$/;"	l
ffff80000010b536	kernel.asm	/^ffff80000010b536:	be 3e 00 00 00       	mov    $0x3e,%esi$/;"	l
ffff80000010b53b	kernel.asm	/^ffff80000010b53b:	bf 0e 00 00 00       	mov    $0xe,%edi$/;"	l
ffff80000010b540	kernel.asm	/^ffff80000010b540:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b547	kernel.asm	/^ffff80000010b547:	80 ff ff $/;"	l
ffff80000010b54a	kernel.asm	/^ffff80000010b54a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b54c	kernel.asm	/^ffff80000010b54c:	be 3f 00 00 00       	mov    $0x3f,%esi$/;"	l
ffff80000010b551	kernel.asm	/^ffff80000010b551:	bf 0f 00 00 00       	mov    $0xf,%edi$/;"	l
ffff80000010b556	kernel.asm	/^ffff80000010b556:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b55d	kernel.asm	/^ffff80000010b55d:	80 ff ff $/;"	l
ffff80000010b560	kernel.asm	/^ffff80000010b560:	ff d0                	callq  *%rax$/;"	l
ffff80000010b562	kernel.asm	/^ffff80000010b562:	be 0c 00 00 00       	mov    $0xc,%esi$/;"	l
ffff80000010b567	kernel.asm	/^ffff80000010b567:	bf 10 00 00 00       	mov    $0x10,%edi$/;"	l
ffff80000010b56c	kernel.asm	/^ffff80000010b56c:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b573	kernel.asm	/^ffff80000010b573:	80 ff ff $/;"	l
ffff80000010b576	kernel.asm	/^ffff80000010b576:	ff d0                	callq  *%rax$/;"	l
ffff80000010b578	kernel.asm	/^ffff80000010b578:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b57d	kernel.asm	/^ffff80000010b57d:	bf 11 00 00 00       	mov    $0x11,%edi$/;"	l
ffff80000010b582	kernel.asm	/^ffff80000010b582:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b589	kernel.asm	/^ffff80000010b589:	80 ff ff $/;"	l
ffff80000010b58c	kernel.asm	/^ffff80000010b58c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b58e	kernel.asm	/^ffff80000010b58e:	be 0f 00 00 00       	mov    $0xf,%esi$/;"	l
ffff80000010b593	kernel.asm	/^ffff80000010b593:	bf 12 00 00 00       	mov    $0x12,%edi$/;"	l
ffff80000010b598	kernel.asm	/^ffff80000010b598:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b59f	kernel.asm	/^ffff80000010b59f:	80 ff ff $/;"	l
ffff80000010b5a2	kernel.asm	/^ffff80000010b5a2:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5a4	kernel.asm	/^ffff80000010b5a4:	be 08 00 00 00       	mov    $0x8,%esi$/;"	l
ffff80000010b5a9	kernel.asm	/^ffff80000010b5a9:	bf 13 00 00 00       	mov    $0x13,%edi$/;"	l
ffff80000010b5ae	kernel.asm	/^ffff80000010b5ae:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b5b5	kernel.asm	/^ffff80000010b5b5:	80 ff ff $/;"	l
ffff80000010b5b8	kernel.asm	/^ffff80000010b5b8:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5ba	kernel.asm	/^ffff80000010b5ba:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b5bf	kernel.asm	/^ffff80000010b5bf:	bf 14 00 00 00       	mov    $0x14,%edi$/;"	l
ffff80000010b5c4	kernel.asm	/^ffff80000010b5c4:	48 b8 25 a9 10 00 00 	movabs $0xffff80000010a925,%rax$/;"	l
ffff80000010b5cb	kernel.asm	/^ffff80000010b5cb:	80 ff ff $/;"	l
ffff80000010b5ce	kernel.asm	/^ffff80000010b5ce:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5d0	kernel.asm	/^ffff80000010b5d0:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b5d5	kernel.asm	/^ffff80000010b5d5:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b5da	kernel.asm	/^ffff80000010b5da:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b5e1	kernel.asm	/^ffff80000010b5e1:	80 ff ff $/;"	l
ffff80000010b5e4	kernel.asm	/^ffff80000010b5e4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5e6	kernel.asm	/^ffff80000010b5e6:	be 04 00 00 00       	mov    $0x4,%esi$/;"	l
ffff80000010b5eb	kernel.asm	/^ffff80000010b5eb:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b5f0	kernel.asm	/^ffff80000010b5f0:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b5f7	kernel.asm	/^ffff80000010b5f7:	80 ff ff $/;"	l
ffff80000010b5fa	kernel.asm	/^ffff80000010b5fa:	ff d0                	callq  *%rax$/;"	l
ffff80000010b5fc	kernel.asm	/^ffff80000010b5fc:	be 07 00 00 00       	mov    $0x7,%esi$/;"	l
ffff80000010b601	kernel.asm	/^ffff80000010b601:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b606	kernel.asm	/^ffff80000010b606:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b60d	kernel.asm	/^ffff80000010b60d:	80 ff ff $/;"	l
ffff80000010b610	kernel.asm	/^ffff80000010b610:	ff d0                	callq  *%rax$/;"	l
ffff80000010b612	kernel.asm	/^ffff80000010b612:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b617	kernel.asm	/^ffff80000010b617:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b61c	kernel.asm	/^ffff80000010b61c:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b623	kernel.asm	/^ffff80000010b623:	80 ff ff $/;"	l
ffff80000010b626	kernel.asm	/^ffff80000010b626:	ff d0                	callq  *%rax$/;"	l
ffff80000010b628	kernel.asm	/^ffff80000010b628:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b62d	kernel.asm	/^ffff80000010b62d:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b632	kernel.asm	/^ffff80000010b632:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b639	kernel.asm	/^ffff80000010b639:	80 ff ff $/;"	l
ffff80000010b63c	kernel.asm	/^ffff80000010b63c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b63e	kernel.asm	/^ffff80000010b63e:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b643	kernel.asm	/^ffff80000010b643:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b648	kernel.asm	/^ffff80000010b648:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b64f	kernel.asm	/^ffff80000010b64f:	80 ff ff $/;"	l
ffff80000010b652	kernel.asm	/^ffff80000010b652:	ff d0                	callq  *%rax$/;"	l
ffff80000010b654	kernel.asm	/^ffff80000010b654:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b659	kernel.asm	/^ffff80000010b659:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b65e	kernel.asm	/^ffff80000010b65e:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b665	kernel.asm	/^ffff80000010b665:	80 ff ff $/;"	l
ffff80000010b668	kernel.asm	/^ffff80000010b668:	ff d0                	callq  *%rax$/;"	l
ffff80000010b66a	kernel.asm	/^ffff80000010b66a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010b671	kernel.asm	/^ffff80000010b671:	eb 4d                	jmp    ffff80000010b6c0 <vgaMode3+0x658>$/;"	l
ffff80000010b673	kernel.asm	/^ffff80000010b673:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010b67a	kernel.asm	/^ffff80000010b67a:	eb 3a                	jmp    ffff80000010b6b6 <vgaMode3+0x64e>$/;"	l
ffff80000010b67c	kernel.asm	/^ffff80000010b67c:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010b67f	kernel.asm	/^ffff80000010b67f:	8d 14 00             	lea    (%rax,%rax,1),%edx$/;"	l
ffff80000010b682	kernel.asm	/^ffff80000010b682:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b685	kernel.asm	/^ffff80000010b685:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010b687	kernel.asm	/^ffff80000010b687:	48 63 d0             	movslq %eax,%rdx$/;"	l
ffff80000010b68a	kernel.asm	/^ffff80000010b68a:	48 b8 00 00 0a 00 00 	movabs $0xffff8000000a0000,%rax$/;"	l
ffff80000010b691	kernel.asm	/^ffff80000010b691:	80 ff ff $/;"	l
ffff80000010b694	kernel.asm	/^ffff80000010b694:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010b698	kernel.asm	/^ffff80000010b698:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010b69b	kernel.asm	/^ffff80000010b69b:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010b69e	kernel.asm	/^ffff80000010b69e:	01 d0                	add    %edx,%eax$/;"	l
ffff80000010b6a0	kernel.asm	/^ffff80000010b6a0:	48 ba 60 f2 10 00 00 	movabs $0xffff80000010f260,%rdx$/;"	l
ffff80000010b6a7	kernel.asm	/^ffff80000010b6a7:	80 ff ff $/;"	l
ffff80000010b6aa	kernel.asm	/^ffff80000010b6aa:	48 98                	cltq   $/;"	l
ffff80000010b6ac	kernel.asm	/^ffff80000010b6ac:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax$/;"	l
ffff80000010b6b0	kernel.asm	/^ffff80000010b6b0:	88 01                	mov    %al,(%rcx)$/;"	l
ffff80000010b6b2	kernel.asm	/^ffff80000010b6b2:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff80000010b6b6	kernel.asm	/^ffff80000010b6b6:	83 7d f8 0f          	cmpl   $0xf,-0x8(%rbp)$/;"	l
ffff80000010b6ba	kernel.asm	/^ffff80000010b6ba:	7e c0                	jle    ffff80000010b67c <vgaMode3+0x614>$/;"	l
ffff80000010b6bc	kernel.asm	/^ffff80000010b6bc:	83 45 fc 10          	addl   $0x10,-0x4(%rbp)$/;"	l
ffff80000010b6c0	kernel.asm	/^ffff80000010b6c0:	81 7d fc ff 0f 00 00 	cmpl   $0xfff,-0x4(%rbp)$/;"	l
ffff80000010b6c7	kernel.asm	/^ffff80000010b6c7:	7e aa                	jle    ffff80000010b673 <vgaMode3+0x60b>$/;"	l
ffff80000010b6c9	kernel.asm	/^ffff80000010b6c9:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
ffff80000010b6ce	kernel.asm	/^ffff80000010b6ce:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b6d3	kernel.asm	/^ffff80000010b6d3:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b6da	kernel.asm	/^ffff80000010b6da:	80 ff ff $/;"	l
ffff80000010b6dd	kernel.asm	/^ffff80000010b6dd:	ff d0                	callq  *%rax$/;"	l
ffff80000010b6df	kernel.asm	/^ffff80000010b6df:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b6e4	kernel.asm	/^ffff80000010b6e4:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b6e9	kernel.asm	/^ffff80000010b6e9:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b6f0	kernel.asm	/^ffff80000010b6f0:	80 ff ff $/;"	l
ffff80000010b6f3	kernel.asm	/^ffff80000010b6f3:	ff d0                	callq  *%rax$/;"	l
ffff80000010b6f5	kernel.asm	/^ffff80000010b6f5:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b6fa	kernel.asm	/^ffff80000010b6fa:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b6ff	kernel.asm	/^ffff80000010b6ff:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b706	kernel.asm	/^ffff80000010b706:	80 ff ff $/;"	l
ffff80000010b709	kernel.asm	/^ffff80000010b709:	ff d0                	callq  *%rax$/;"	l
ffff80000010b70b	kernel.asm	/^ffff80000010b70b:	be 02 00 00 00       	mov    $0x2,%esi$/;"	l
ffff80000010b710	kernel.asm	/^ffff80000010b710:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b715	kernel.asm	/^ffff80000010b715:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b71c	kernel.asm	/^ffff80000010b71c:	80 ff ff $/;"	l
ffff80000010b71f	kernel.asm	/^ffff80000010b71f:	ff d0                	callq  *%rax$/;"	l
ffff80000010b721	kernel.asm	/^ffff80000010b721:	be 03 00 00 00       	mov    $0x3,%esi$/;"	l
ffff80000010b726	kernel.asm	/^ffff80000010b726:	bf 00 00 00 00       	mov    $0x0,%edi$/;"	l
ffff80000010b72b	kernel.asm	/^ffff80000010b72b:	48 b8 a0 a9 10 00 00 	movabs $0xffff80000010a9a0,%rax$/;"	l
ffff80000010b732	kernel.asm	/^ffff80000010b732:	80 ff ff $/;"	l
ffff80000010b735	kernel.asm	/^ffff80000010b735:	ff d0                	callq  *%rax$/;"	l
ffff80000010b737	kernel.asm	/^ffff80000010b737:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b73c	kernel.asm	/^ffff80000010b73c:	bf 02 00 00 00       	mov    $0x2,%edi$/;"	l
ffff80000010b741	kernel.asm	/^ffff80000010b741:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b748	kernel.asm	/^ffff80000010b748:	80 ff ff $/;"	l
ffff80000010b74b	kernel.asm	/^ffff80000010b74b:	ff d0                	callq  *%rax$/;"	l
ffff80000010b74d	kernel.asm	/^ffff80000010b74d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b752	kernel.asm	/^ffff80000010b752:	bf 03 00 00 00       	mov    $0x3,%edi$/;"	l
ffff80000010b757	kernel.asm	/^ffff80000010b757:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b75e	kernel.asm	/^ffff80000010b75e:	80 ff ff $/;"	l
ffff80000010b761	kernel.asm	/^ffff80000010b761:	ff d0                	callq  *%rax$/;"	l
ffff80000010b763	kernel.asm	/^ffff80000010b763:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b768	kernel.asm	/^ffff80000010b768:	bf 04 00 00 00       	mov    $0x4,%edi$/;"	l
ffff80000010b76d	kernel.asm	/^ffff80000010b76d:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b774	kernel.asm	/^ffff80000010b774:	80 ff ff $/;"	l
ffff80000010b777	kernel.asm	/^ffff80000010b777:	ff d0                	callq  *%rax$/;"	l
ffff80000010b779	kernel.asm	/^ffff80000010b779:	be 10 00 00 00       	mov    $0x10,%esi$/;"	l
ffff80000010b77e	kernel.asm	/^ffff80000010b77e:	bf 05 00 00 00       	mov    $0x5,%edi$/;"	l
ffff80000010b783	kernel.asm	/^ffff80000010b783:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b78a	kernel.asm	/^ffff80000010b78a:	80 ff ff $/;"	l
ffff80000010b78d	kernel.asm	/^ffff80000010b78d:	ff d0                	callq  *%rax$/;"	l
ffff80000010b78f	kernel.asm	/^ffff80000010b78f:	be 0e 00 00 00       	mov    $0xe,%esi$/;"	l
ffff80000010b794	kernel.asm	/^ffff80000010b794:	bf 06 00 00 00       	mov    $0x6,%edi$/;"	l
ffff80000010b799	kernel.asm	/^ffff80000010b799:	48 b8 e3 a9 10 00 00 	movabs $0xffff80000010a9e3,%rax$/;"	l
ffff80000010b7a0	kernel.asm	/^ffff80000010b7a0:	80 ff ff $/;"	l
ffff80000010b7a3	kernel.asm	/^ffff80000010b7a3:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7a5	kernel.asm	/^ffff80000010b7a5:	bf da 03 00 00       	mov    $0x3da,%edi$/;"	l
ffff80000010b7aa	kernel.asm	/^ffff80000010b7aa:	48 b8 e8 a8 10 00 00 	movabs $0xffff80000010a8e8,%rax$/;"	l
ffff80000010b7b1	kernel.asm	/^ffff80000010b7b1:	80 ff ff $/;"	l
ffff80000010b7b4	kernel.asm	/^ffff80000010b7b4:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7b6	kernel.asm	/^ffff80000010b7b6:	be 20 00 00 00       	mov    $0x20,%esi$/;"	l
ffff80000010b7bb	kernel.asm	/^ffff80000010b7bb:	bf c0 03 00 00       	mov    $0x3c0,%edi$/;"	l
ffff80000010b7c0	kernel.asm	/^ffff80000010b7c0:	48 b8 06 a9 10 00 00 	movabs $0xffff80000010a906,%rax$/;"	l
ffff80000010b7c7	kernel.asm	/^ffff80000010b7c7:	80 ff ff $/;"	l
ffff80000010b7ca	kernel.asm	/^ffff80000010b7ca:	ff d0                	callq  *%rax$/;"	l
ffff80000010b7cc	kernel.asm	/^ffff80000010b7cc:	90                   	nop$/;"	l
ffff80000010b7cd	kernel.asm	/^ffff80000010b7cd:	c9                   	leaveq $/;"	l
ffff80000010b7ce	kernel.asm	/^ffff80000010b7ce:	c3                   	retq   $/;"	l
ffff80000010b7cf	kernel.asm	/^ffff80000010b7cf <lgdt>:$/;"	l
ffff80000010b7cf	kernel.asm	/^ffff80000010b7cf:	55                   	push   %rbp$/;"	l
ffff80000010b7d0	kernel.asm	/^ffff80000010b7d0:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b7d3	kernel.asm	/^ffff80000010b7d3:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010b7d7	kernel.asm	/^ffff80000010b7d7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010b7db	kernel.asm	/^ffff80000010b7db:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010b7de	kernel.asm	/^ffff80000010b7de:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010b7e1	kernel.asm	/^ffff80000010b7e1:	83 e8 01             	sub    $0x1,%eax$/;"	l
ffff80000010b7e4	kernel.asm	/^ffff80000010b7e4:	66 89 45 f0          	mov    %ax,-0x10(%rbp)$/;"	l
ffff80000010b7e8	kernel.asm	/^ffff80000010b7e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b7ec	kernel.asm	/^ffff80000010b7ec:	66 89 45 f2          	mov    %ax,-0xe(%rbp)$/;"	l
ffff80000010b7f0	kernel.asm	/^ffff80000010b7f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b7f4	kernel.asm	/^ffff80000010b7f4:	48 c1 e8 10          	shr    $0x10,%rax$/;"	l
ffff80000010b7f8	kernel.asm	/^ffff80000010b7f8:	66 89 45 f4          	mov    %ax,-0xc(%rbp)$/;"	l
ffff80000010b7fc	kernel.asm	/^ffff80000010b7fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b800	kernel.asm	/^ffff80000010b800:	48 c1 e8 20          	shr    $0x20,%rax$/;"	l
ffff80000010b804	kernel.asm	/^ffff80000010b804:	66 89 45 f6          	mov    %ax,-0xa(%rbp)$/;"	l
ffff80000010b808	kernel.asm	/^ffff80000010b808:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b80c	kernel.asm	/^ffff80000010b80c:	48 c1 e8 30          	shr    $0x30,%rax$/;"	l
ffff80000010b810	kernel.asm	/^ffff80000010b810:	66 89 45 f8          	mov    %ax,-0x8(%rbp)$/;"	l
ffff80000010b814	kernel.asm	/^ffff80000010b814:	48 8d 45 f0          	lea    -0x10(%rbp),%rax$/;"	l
ffff80000010b818	kernel.asm	/^ffff80000010b818:	0f 01 10             	lgdt   (%rax)$/;"	l
ffff80000010b81b	kernel.asm	/^ffff80000010b81b:	90                   	nop$/;"	l
ffff80000010b81c	kernel.asm	/^ffff80000010b81c:	c9                   	leaveq $/;"	l
ffff80000010b81d	kernel.asm	/^ffff80000010b81d:	c3                   	retq   $/;"	l
ffff80000010b81e	kernel.asm	/^ffff80000010b81e <ltr>:$/;"	l
ffff80000010b81e	kernel.asm	/^ffff80000010b81e:	55                   	push   %rbp$/;"	l
ffff80000010b81f	kernel.asm	/^ffff80000010b81f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b822	kernel.asm	/^ffff80000010b822:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b826	kernel.asm	/^ffff80000010b826:	89 f8                	mov    %edi,%eax$/;"	l
ffff80000010b828	kernel.asm	/^ffff80000010b828:	66 89 45 fc          	mov    %ax,-0x4(%rbp)$/;"	l
ffff80000010b82c	kernel.asm	/^ffff80000010b82c:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax$/;"	l
ffff80000010b830	kernel.asm	/^ffff80000010b830:	0f 00 d8             	ltr    %ax$/;"	l
ffff80000010b833	kernel.asm	/^ffff80000010b833:	90                   	nop$/;"	l
ffff80000010b834	kernel.asm	/^ffff80000010b834:	c9                   	leaveq $/;"	l
ffff80000010b835	kernel.asm	/^ffff80000010b835:	c3                   	retq   $/;"	l
ffff80000010b836	kernel.asm	/^ffff80000010b836 <lcr3>:$/;"	l
ffff80000010b836	kernel.asm	/^ffff80000010b836:	55                   	push   %rbp$/;"	l
ffff80000010b837	kernel.asm	/^ffff80000010b837:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b83a	kernel.asm	/^ffff80000010b83a:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b83e	kernel.asm	/^ffff80000010b83e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b842	kernel.asm	/^ffff80000010b842:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b846	kernel.asm	/^ffff80000010b846:	0f 22 d8             	mov    %rax,%cr3$/;"	l
ffff80000010b849	kernel.asm	/^ffff80000010b849:	90                   	nop$/;"	l
ffff80000010b84a	kernel.asm	/^ffff80000010b84a:	c9                   	leaveq $/;"	l
ffff80000010b84b	kernel.asm	/^ffff80000010b84b:	c3                   	retq   $/;"	l
ffff80000010b84c	kernel.asm	/^ffff80000010b84c <v2p>:$/;"	l
ffff80000010b84c	kernel.asm	/^ffff80000010b84c:	55                   	push   %rbp$/;"	l
ffff80000010b84d	kernel.asm	/^ffff80000010b84d:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b850	kernel.asm	/^ffff80000010b850:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010b854	kernel.asm	/^ffff80000010b854:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b858	kernel.asm	/^ffff80000010b858:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010b85c	kernel.asm	/^ffff80000010b85c:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010b863	kernel.asm	/^ffff80000010b863:	80 00 00 $/;"	l
ffff80000010b866	kernel.asm	/^ffff80000010b866:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b869	kernel.asm	/^ffff80000010b869:	c9                   	leaveq $/;"	l
ffff80000010b86a	kernel.asm	/^ffff80000010b86a:	c3                   	retq   $/;"	l
ffff80000010b86b	kernel.asm	/^ffff80000010b86b <tss_set_rsp>:$/;"	l
ffff80000010b86b	kernel.asm	/^ffff80000010b86b:	55                   	push   %rbp$/;"	l
ffff80000010b86c	kernel.asm	/^ffff80000010b86c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b86f	kernel.asm	/^ffff80000010b86f:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010b873	kernel.asm	/^ffff80000010b873:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)$/;"	l
ffff80000010b877	kernel.asm	/^ffff80000010b877:	89 75 f4             	mov    %esi,-0xc(%rbp)$/;"	l
ffff80000010b87a	kernel.asm	/^ffff80000010b87a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)$/;"	l
ffff80000010b87e	kernel.asm	/^ffff80000010b87e:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b881	kernel.asm	/^ffff80000010b881:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010b883	kernel.asm	/^ffff80000010b883:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010b886	kernel.asm	/^ffff80000010b886:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010b888	kernel.asm	/^ffff80000010b888:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010b88f	kernel.asm	/^ffff80000010b88f:	00 $/;"	l
ffff80000010b890	kernel.asm	/^ffff80000010b890:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b894	kernel.asm	/^ffff80000010b894:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b897	kernel.asm	/^ffff80000010b897:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010b89b	kernel.asm	/^ffff80000010b89b:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010b89d	kernel.asm	/^ffff80000010b89d:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010b8a0	kernel.asm	/^ffff80000010b8a0:	83 c0 01             	add    $0x1,%eax$/;"	l
ffff80000010b8a3	kernel.asm	/^ffff80000010b8a3:	01 c0                	add    %eax,%eax$/;"	l
ffff80000010b8a5	kernel.asm	/^ffff80000010b8a5:	89 c0                	mov    %eax,%eax$/;"	l
ffff80000010b8a7	kernel.asm	/^ffff80000010b8a7:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx$/;"	l
ffff80000010b8ae	kernel.asm	/^ffff80000010b8ae:	00 $/;"	l
ffff80000010b8af	kernel.asm	/^ffff80000010b8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b8b3	kernel.asm	/^ffff80000010b8b3:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b8b6	kernel.asm	/^ffff80000010b8b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010b8ba	kernel.asm	/^ffff80000010b8ba:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010b8be	kernel.asm	/^ffff80000010b8be:	89 10                	mov    %edx,(%rax)$/;"	l
ffff80000010b8c0	kernel.asm	/^ffff80000010b8c0:	90                   	nop$/;"	l
ffff80000010b8c1	kernel.asm	/^ffff80000010b8c1:	c9                   	leaveq $/;"	l
ffff80000010b8c2	kernel.asm	/^ffff80000010b8c2:	c3                   	retq   $/;"	l
ffff80000010b8c3	kernel.asm	/^ffff80000010b8c3 <syscallinit>:$/;"	l
ffff80000010b8c3	kernel.asm	/^ffff80000010b8c3:	55                   	push   %rbp$/;"	l
ffff80000010b8c4	kernel.asm	/^ffff80000010b8c4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b8c7	kernel.asm	/^ffff80000010b8c7:	48 be 00 00 00 00 08 	movabs $0x23000800000000,%rsi$/;"	l
ffff80000010b8ce	kernel.asm	/^ffff80000010b8ce:	00 23 00 $/;"	l
ffff80000010b8d1	kernel.asm	/^ffff80000010b8d1:	bf 81 00 00 c0       	mov    $0xc0000081,%edi$/;"	l
ffff80000010b8d6	kernel.asm	/^ffff80000010b8d6:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b8dd	kernel.asm	/^ffff80000010b8dd:	80 ff ff $/;"	l
ffff80000010b8e0	kernel.asm	/^ffff80000010b8e0:	ff d0                	callq  *%rax$/;"	l
ffff80000010b8e2	kernel.asm	/^ffff80000010b8e2:	48 b8 1a 01 10 00 00 	movabs $0xffff80000010011a,%rax$/;"	l
ffff80000010b8e9	kernel.asm	/^ffff80000010b8e9:	80 ff ff $/;"	l
ffff80000010b8ec	kernel.asm	/^ffff80000010b8ec:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b8ef	kernel.asm	/^ffff80000010b8ef:	bf 82 00 00 c0       	mov    $0xc0000082,%edi$/;"	l
ffff80000010b8f4	kernel.asm	/^ffff80000010b8f4:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b8fb	kernel.asm	/^ffff80000010b8fb:	80 ff ff $/;"	l
ffff80000010b8fe	kernel.asm	/^ffff80000010b8fe:	ff d0                	callq  *%rax$/;"	l
ffff80000010b900	kernel.asm	/^ffff80000010b900:	48 b8 11 01 10 00 00 	movabs $0xffff800000100111,%rax$/;"	l
ffff80000010b907	kernel.asm	/^ffff80000010b907:	80 ff ff $/;"	l
ffff80000010b90a	kernel.asm	/^ffff80000010b90a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b90d	kernel.asm	/^ffff80000010b90d:	bf 83 00 00 c0       	mov    $0xc0000083,%edi$/;"	l
ffff80000010b912	kernel.asm	/^ffff80000010b912:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b919	kernel.asm	/^ffff80000010b919:	80 ff ff $/;"	l
ffff80000010b91c	kernel.asm	/^ffff80000010b91c:	ff d0                	callq  *%rax$/;"	l
ffff80000010b91e	kernel.asm	/^ffff80000010b91e:	be 00 77 04 00       	mov    $0x47700,%esi$/;"	l
ffff80000010b923	kernel.asm	/^ffff80000010b923:	bf 84 00 00 c0       	mov    $0xc0000084,%edi$/;"	l
ffff80000010b928	kernel.asm	/^ffff80000010b928:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b92f	kernel.asm	/^ffff80000010b92f:	80 ff ff $/;"	l
ffff80000010b932	kernel.asm	/^ffff80000010b932:	ff d0                	callq  *%rax$/;"	l
ffff80000010b934	kernel.asm	/^ffff80000010b934:	90                   	nop$/;"	l
ffff80000010b935	kernel.asm	/^ffff80000010b935:	5d                   	pop    %rbp$/;"	l
ffff80000010b936	kernel.asm	/^ffff80000010b936:	c3                   	retq   $/;"	l
ffff80000010b937	kernel.asm	/^ffff80000010b937 <seginit>:$/;"	l
ffff80000010b937	kernel.asm	/^ffff80000010b937:	55                   	push   %rbp$/;"	l
ffff80000010b938	kernel.asm	/^ffff80000010b938:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010b93b	kernel.asm	/^ffff80000010b93b:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010b93f	kernel.asm	/^ffff80000010b93f:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010b946	kernel.asm	/^ffff80000010b946:	80 ff ff $/;"	l
ffff80000010b949	kernel.asm	/^ffff80000010b949:	ff d0                	callq  *%rax$/;"	l
ffff80000010b94b	kernel.asm	/^ffff80000010b94b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010b94f	kernel.asm	/^ffff80000010b94f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b953	kernel.asm	/^ffff80000010b953:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010b958	kernel.asm	/^ffff80000010b958:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010b95d	kernel.asm	/^ffff80000010b95d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010b960	kernel.asm	/^ffff80000010b960:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010b967	kernel.asm	/^ffff80000010b967:	80 ff ff $/;"	l
ffff80000010b96a	kernel.asm	/^ffff80000010b96a:	ff d0                	callq  *%rax$/;"	l
ffff80000010b96c	kernel.asm	/^ffff80000010b96c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b970	kernel.asm	/^ffff80000010b970:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010b974	kernel.asm	/^ffff80000010b974:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b978	kernel.asm	/^ffff80000010b978:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010b97e	kernel.asm	/^ffff80000010b97e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010b982	kernel.asm	/^ffff80000010b982:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010b986	kernel.asm	/^ffff80000010b986:	48 83 c0 40          	add    $0x40,%rax$/;"	l
ffff80000010b98a	kernel.asm	/^ffff80000010b98a:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)$/;"	l
ffff80000010b990	kernel.asm	/^ffff80000010b990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010b994	kernel.asm	/^ffff80000010b994:	48 05 00 08 00 00    	add    $0x800,%rax$/;"	l
ffff80000010b99a	kernel.asm	/^ffff80000010b99a:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010b99d	kernel.asm	/^ffff80000010b99d:	bf 00 01 00 c0       	mov    $0xc0000100,%edi$/;"	l
ffff80000010b9a2	kernel.asm	/^ffff80000010b9a2:	48 b8 01 01 10 00 00 	movabs $0xffff800000100101,%rax$/;"	l
ffff80000010b9a9	kernel.asm	/^ffff80000010b9a9:	80 ff ff $/;"	l
ffff80000010b9ac	kernel.asm	/^ffff80000010b9ac:	ff d0                	callq  *%rax$/;"	l
ffff80000010b9ae	kernel.asm	/^ffff80000010b9ae:	48 b8 00 48 10 00 00 	movabs $0xffff800000104800,%rax$/;"	l
ffff80000010b9b5	kernel.asm	/^ffff80000010b9b5:	80 ff ff $/;"	l
ffff80000010b9b8	kernel.asm	/^ffff80000010b9b8:	ff d0                	callq  *%rax$/;"	l
ffff80000010b9ba	kernel.asm	/^ffff80000010b9ba:	48 98                	cltq   $/;"	l
ffff80000010b9bc	kernel.asm	/^ffff80000010b9bc:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b9bf	kernel.asm	/^ffff80000010b9bf:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010b9c2	kernel.asm	/^ffff80000010b9c2:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010b9c6	kernel.asm	/^ffff80000010b9c6:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010b9c9	kernel.asm	/^ffff80000010b9c9:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010b9cc	kernel.asm	/^ffff80000010b9cc:	48 c1 e0 04          	shl    $0x4,%rax$/;"	l
ffff80000010b9d0	kernel.asm	/^ffff80000010b9d0:	48 29 d0             	sub    %rdx,%rax$/;"	l
ffff80000010b9d3	kernel.asm	/^ffff80000010b9d3:	48 ba 80 a3 11 00 00 	movabs $0xffff80000011a380,%rdx$/;"	l
ffff80000010b9da	kernel.asm	/^ffff80000010b9da:	80 ff ff $/;"	l
ffff80000010b9dd	kernel.asm	/^ffff80000010b9dd:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010b9e0	kernel.asm	/^ffff80000010b9e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010b9e4	kernel.asm	/^ffff80000010b9e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b9e8	kernel.asm	/^ffff80000010b9e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010b9ec	kernel.asm	/^ffff80000010b9ec:	48 89 90 e8 00 00 00 	mov    %rdx,0xe8(%rax)$/;"	l
ffff80000010b9f3	kernel.asm	/^ffff80000010b9f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010b9f7	kernel.asm	/^ffff80000010b9f7:	64 48 89 04 25 f0 ff 	mov    %rax,%fs:0xfffffffffffffff0$/;"	l
ffff80000010b9fe	kernel.asm	/^ffff80000010b9fe:	ff ff $/;"	l
ffff80000010ba00	kernel.asm	/^ffff80000010ba00:	64 48 c7 04 25 f8 ff 	movq   $0x0,%fs:0xfffffffffffffff8$/;"	l
ffff80000010ba07	kernel.asm	/^ffff80000010ba07:	ff ff 00 00 00 00 $/;"	l
ffff80000010ba0d	kernel.asm	/^ffff80000010ba0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ba11	kernel.asm	/^ffff80000010ba11:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010ba15	kernel.asm	/^ffff80000010ba15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba19	kernel.asm	/^ffff80000010ba19:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010ba20	kernel.asm	/^ffff80000010ba20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba24	kernel.asm	/^ffff80000010ba24:	48 83 c0 08          	add    $0x8,%rax$/;"	l
ffff80000010ba28	kernel.asm	/^ffff80000010ba28:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010ba2d	kernel.asm	/^ffff80000010ba2d:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010ba33	kernel.asm	/^ffff80000010ba33:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010ba37	kernel.asm	/^ffff80000010ba37:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba3b	kernel.asm	/^ffff80000010ba3b:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ba3e	kernel.asm	/^ffff80000010ba3e:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010ba41	kernel.asm	/^ffff80000010ba41:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba44	kernel.asm	/^ffff80000010ba44:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba48	kernel.asm	/^ffff80000010ba48:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010ba4b	kernel.asm	/^ffff80000010ba4b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba4e	kernel.asm	/^ffff80000010ba4e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba52	kernel.asm	/^ffff80000010ba52:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010ba55	kernel.asm	/^ffff80000010ba55:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba58	kernel.asm	/^ffff80000010ba58:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010ba5c	kernel.asm	/^ffff80000010ba5c:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ba5f	kernel.asm	/^ffff80000010ba5f:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010ba62	kernel.asm	/^ffff80000010ba62:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba66	kernel.asm	/^ffff80000010ba66:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010ba69	kernel.asm	/^ffff80000010ba69:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba6c	kernel.asm	/^ffff80000010ba6c:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba70	kernel.asm	/^ffff80000010ba70:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010ba73	kernel.asm	/^ffff80000010ba73:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba76	kernel.asm	/^ffff80000010ba76:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba7a	kernel.asm	/^ffff80000010ba7a:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010ba7d	kernel.asm	/^ffff80000010ba7d:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba80	kernel.asm	/^ffff80000010ba80:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba84	kernel.asm	/^ffff80000010ba84:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010ba87	kernel.asm	/^ffff80000010ba87:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba8a	kernel.asm	/^ffff80000010ba8a:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010ba8e	kernel.asm	/^ffff80000010ba8e:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010ba91	kernel.asm	/^ffff80000010ba91:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010ba94	kernel.asm	/^ffff80000010ba94:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010ba98	kernel.asm	/^ffff80000010ba98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ba9c	kernel.asm	/^ffff80000010ba9c:	48 83 c0 20          	add    $0x20,%rax$/;"	l
ffff80000010baa0	kernel.asm	/^ffff80000010baa0:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010baa5	kernel.asm	/^ffff80000010baa5:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010baab	kernel.asm	/^ffff80000010baab:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010baaf	kernel.asm	/^ffff80000010baaf:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bab3	kernel.asm	/^ffff80000010bab3:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bab6	kernel.asm	/^ffff80000010bab6:	83 ca 0a             	or     $0xa,%edx$/;"	l
ffff80000010bab9	kernel.asm	/^ffff80000010bab9:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010babc	kernel.asm	/^ffff80000010babc:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bac0	kernel.asm	/^ffff80000010bac0:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010bac3	kernel.asm	/^ffff80000010bac3:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bac6	kernel.asm	/^ffff80000010bac6:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010baca	kernel.asm	/^ffff80000010baca:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010bacd	kernel.asm	/^ffff80000010bacd:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bad0	kernel.asm	/^ffff80000010bad0:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bad4	kernel.asm	/^ffff80000010bad4:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bad7	kernel.asm	/^ffff80000010bad7:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bada	kernel.asm	/^ffff80000010bada:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bade	kernel.asm	/^ffff80000010bade:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bae1	kernel.asm	/^ffff80000010bae1:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bae4	kernel.asm	/^ffff80000010bae4:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bae8	kernel.asm	/^ffff80000010bae8:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010baeb	kernel.asm	/^ffff80000010baeb:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010baee	kernel.asm	/^ffff80000010baee:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010baf2	kernel.asm	/^ffff80000010baf2:	83 ca 20             	or     $0x20,%edx$/;"	l
ffff80000010baf5	kernel.asm	/^ffff80000010baf5:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010baf8	kernel.asm	/^ffff80000010baf8:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bafc	kernel.asm	/^ffff80000010bafc:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010baff	kernel.asm	/^ffff80000010baff:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb02	kernel.asm	/^ffff80000010bb02:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb06	kernel.asm	/^ffff80000010bb06:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bb09	kernel.asm	/^ffff80000010bb09:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb0c	kernel.asm	/^ffff80000010bb0c:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010bb10	kernel.asm	/^ffff80000010bb10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb14	kernel.asm	/^ffff80000010bb14:	48 83 c0 10          	add    $0x10,%rax$/;"	l
ffff80000010bb18	kernel.asm	/^ffff80000010bb18:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010bb1d	kernel.asm	/^ffff80000010bb1d:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010bb23	kernel.asm	/^ffff80000010bb23:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010bb27	kernel.asm	/^ffff80000010bb27:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb2b	kernel.asm	/^ffff80000010bb2b:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bb2e	kernel.asm	/^ffff80000010bb2e:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010bb31	kernel.asm	/^ffff80000010bb31:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb34	kernel.asm	/^ffff80000010bb34:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb38	kernel.asm	/^ffff80000010bb38:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010bb3b	kernel.asm	/^ffff80000010bb3b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb3e	kernel.asm	/^ffff80000010bb3e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb42	kernel.asm	/^ffff80000010bb42:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010bb45	kernel.asm	/^ffff80000010bb45:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb48	kernel.asm	/^ffff80000010bb48:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bb4c	kernel.asm	/^ffff80000010bb4c:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bb4f	kernel.asm	/^ffff80000010bb4f:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bb52	kernel.asm	/^ffff80000010bb52:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb56	kernel.asm	/^ffff80000010bb56:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bb59	kernel.asm	/^ffff80000010bb59:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb5c	kernel.asm	/^ffff80000010bb5c:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb60	kernel.asm	/^ffff80000010bb60:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bb63	kernel.asm	/^ffff80000010bb63:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb66	kernel.asm	/^ffff80000010bb66:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb6a	kernel.asm	/^ffff80000010bb6a:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bb6d	kernel.asm	/^ffff80000010bb6d:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb70	kernel.asm	/^ffff80000010bb70:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb74	kernel.asm	/^ffff80000010bb74:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010bb77	kernel.asm	/^ffff80000010bb77:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb7a	kernel.asm	/^ffff80000010bb7a:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bb7e	kernel.asm	/^ffff80000010bb7e:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bb81	kernel.asm	/^ffff80000010bb81:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bb84	kernel.asm	/^ffff80000010bb84:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010bb88	kernel.asm	/^ffff80000010bb88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb8c	kernel.asm	/^ffff80000010bb8c:	48 83 c0 18          	add    $0x18,%rax$/;"	l
ffff80000010bb90	kernel.asm	/^ffff80000010bb90:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010bb97	kernel.asm	/^ffff80000010bb97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bb9b	kernel.asm	/^ffff80000010bb9b:	48 83 c0 28          	add    $0x28,%rax$/;"	l
ffff80000010bb9f	kernel.asm	/^ffff80000010bb9f:	66 c7 00 00 00       	movw   $0x0,(%rax)$/;"	l
ffff80000010bba4	kernel.asm	/^ffff80000010bba4:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)$/;"	l
ffff80000010bbaa	kernel.asm	/^ffff80000010bbaa:	c6 40 04 00          	movb   $0x0,0x4(%rax)$/;"	l
ffff80000010bbae	kernel.asm	/^ffff80000010bbae:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bbb2	kernel.asm	/^ffff80000010bbb2:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bbb5	kernel.asm	/^ffff80000010bbb5:	83 ca 02             	or     $0x2,%edx$/;"	l
ffff80000010bbb8	kernel.asm	/^ffff80000010bbb8:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bbbb	kernel.asm	/^ffff80000010bbbb:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bbbf	kernel.asm	/^ffff80000010bbbf:	83 ca 10             	or     $0x10,%edx$/;"	l
ffff80000010bbc2	kernel.asm	/^ffff80000010bbc2:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bbc5	kernel.asm	/^ffff80000010bbc5:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bbc9	kernel.asm	/^ffff80000010bbc9:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010bbcc	kernel.asm	/^ffff80000010bbcc:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bbcf	kernel.asm	/^ffff80000010bbcf:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bbd3	kernel.asm	/^ffff80000010bbd3:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bbd6	kernel.asm	/^ffff80000010bbd6:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bbd9	kernel.asm	/^ffff80000010bbd9:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bbdd	kernel.asm	/^ffff80000010bbdd:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bbe0	kernel.asm	/^ffff80000010bbe0:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bbe3	kernel.asm	/^ffff80000010bbe3:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bbe7	kernel.asm	/^ffff80000010bbe7:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bbea	kernel.asm	/^ffff80000010bbea:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bbed	kernel.asm	/^ffff80000010bbed:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bbf1	kernel.asm	/^ffff80000010bbf1:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bbf4	kernel.asm	/^ffff80000010bbf4:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bbf7	kernel.asm	/^ffff80000010bbf7:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bbfb	kernel.asm	/^ffff80000010bbfb:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010bbfe	kernel.asm	/^ffff80000010bbfe:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc01	kernel.asm	/^ffff80000010bc01:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc05	kernel.asm	/^ffff80000010bc05:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bc08	kernel.asm	/^ffff80000010bc08:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc0b	kernel.asm	/^ffff80000010bc0b:	c6 40 07 00          	movb   $0x0,0x7(%rax)$/;"	l
ffff80000010bc0f	kernel.asm	/^ffff80000010bc0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bc13	kernel.asm	/^ffff80000010bc13:	48 83 c0 30          	add    $0x30,%rax$/;"	l
ffff80000010bc17	kernel.asm	/^ffff80000010bc17:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bc1b	kernel.asm	/^ffff80000010bc1b:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010bc1d	kernel.asm	/^ffff80000010bc1d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bc21	kernel.asm	/^ffff80000010bc21:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010bc25	kernel.asm	/^ffff80000010bc25:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010bc27	kernel.asm	/^ffff80000010bc27:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bc2b	kernel.asm	/^ffff80000010bc2b:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010bc2f	kernel.asm	/^ffff80000010bc2f:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010bc31	kernel.asm	/^ffff80000010bc31:	66 c7 00 0b 00       	movw   $0xb,(%rax)$/;"	l
ffff80000010bc36	kernel.asm	/^ffff80000010bc36:	66 89 78 02          	mov    %di,0x2(%rax)$/;"	l
ffff80000010bc3a	kernel.asm	/^ffff80000010bc3a:	40 88 70 04          	mov    %sil,0x4(%rax)$/;"	l
ffff80000010bc3e	kernel.asm	/^ffff80000010bc3e:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bc42	kernel.asm	/^ffff80000010bc42:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bc45	kernel.asm	/^ffff80000010bc45:	83 ca 09             	or     $0x9,%edx$/;"	l
ffff80000010bc48	kernel.asm	/^ffff80000010bc48:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bc4b	kernel.asm	/^ffff80000010bc4b:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bc4f	kernel.asm	/^ffff80000010bc4f:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bc52	kernel.asm	/^ffff80000010bc52:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bc55	kernel.asm	/^ffff80000010bc55:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bc59	kernel.asm	/^ffff80000010bc59:	83 ca 60             	or     $0x60,%edx$/;"	l
ffff80000010bc5c	kernel.asm	/^ffff80000010bc5c:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bc5f	kernel.asm	/^ffff80000010bc5f:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bc63	kernel.asm	/^ffff80000010bc63:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bc66	kernel.asm	/^ffff80000010bc66:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bc69	kernel.asm	/^ffff80000010bc69:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc6d	kernel.asm	/^ffff80000010bc6d:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bc70	kernel.asm	/^ffff80000010bc70:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc73	kernel.asm	/^ffff80000010bc73:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc77	kernel.asm	/^ffff80000010bc77:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bc7a	kernel.asm	/^ffff80000010bc7a:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc7d	kernel.asm	/^ffff80000010bc7d:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc81	kernel.asm	/^ffff80000010bc81:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bc84	kernel.asm	/^ffff80000010bc84:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc87	kernel.asm	/^ffff80000010bc87:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc8b	kernel.asm	/^ffff80000010bc8b:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010bc8e	kernel.asm	/^ffff80000010bc8e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc91	kernel.asm	/^ffff80000010bc91:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bc95	kernel.asm	/^ffff80000010bc95:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bc98	kernel.asm	/^ffff80000010bc98:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bc9b	kernel.asm	/^ffff80000010bc9b:	88 48 07             	mov    %cl,0x7(%rax)$/;"	l
ffff80000010bc9e	kernel.asm	/^ffff80000010bc9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bca2	kernel.asm	/^ffff80000010bca2:	48 83 c0 38          	add    $0x38,%rax$/;"	l
ffff80000010bca6	kernel.asm	/^ffff80000010bca6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bcaa	kernel.asm	/^ffff80000010bcaa:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010bcae	kernel.asm	/^ffff80000010bcae:	41 89 d1             	mov    %edx,%r9d$/;"	l
ffff80000010bcb1	kernel.asm	/^ffff80000010bcb1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bcb5	kernel.asm	/^ffff80000010bcb5:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010bcb9	kernel.asm	/^ffff80000010bcb9:	41 89 d0             	mov    %edx,%r8d$/;"	l
ffff80000010bcbc	kernel.asm	/^ffff80000010bcbc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bcc0	kernel.asm	/^ffff80000010bcc0:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010bcc4	kernel.asm	/^ffff80000010bcc4:	48 c1 ea 10          	shr    $0x10,%rdx$/;"	l
ffff80000010bcc8	kernel.asm	/^ffff80000010bcc8:	89 d7                	mov    %edx,%edi$/;"	l
ffff80000010bcca	kernel.asm	/^ffff80000010bcca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bcce	kernel.asm	/^ffff80000010bcce:	48 c1 ea 20          	shr    $0x20,%rdx$/;"	l
ffff80000010bcd2	kernel.asm	/^ffff80000010bcd2:	48 c1 ea 3c          	shr    $0x3c,%rdx$/;"	l
ffff80000010bcd6	kernel.asm	/^ffff80000010bcd6:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010bcd8	kernel.asm	/^ffff80000010bcd8:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010bcdb	kernel.asm	/^ffff80000010bcdb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx$/;"	l
ffff80000010bcdf	kernel.asm	/^ffff80000010bcdf:	48 c1 ea 30          	shr    $0x30,%rdx$/;"	l
ffff80000010bce3	kernel.asm	/^ffff80000010bce3:	48 c1 ea 18          	shr    $0x18,%rdx$/;"	l
ffff80000010bce7	kernel.asm	/^ffff80000010bce7:	89 d6                	mov    %edx,%esi$/;"	l
ffff80000010bce9	kernel.asm	/^ffff80000010bce9:	66 44 89 08          	mov    %r9w,(%rax)$/;"	l
ffff80000010bced	kernel.asm	/^ffff80000010bced:	66 44 89 40 02       	mov    %r8w,0x2(%rax)$/;"	l
ffff80000010bcf2	kernel.asm	/^ffff80000010bcf2:	40 88 78 04          	mov    %dil,0x4(%rax)$/;"	l
ffff80000010bcf6	kernel.asm	/^ffff80000010bcf6:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bcfa	kernel.asm	/^ffff80000010bcfa:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bcfd	kernel.asm	/^ffff80000010bcfd:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bd00	kernel.asm	/^ffff80000010bd00:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bd04	kernel.asm	/^ffff80000010bd04:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bd07	kernel.asm	/^ffff80000010bd07:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bd0a	kernel.asm	/^ffff80000010bd0a:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bd0e	kernel.asm	/^ffff80000010bd0e:	83 e2 9f             	and    $0xffffff9f,%edx$/;"	l
ffff80000010bd11	kernel.asm	/^ffff80000010bd11:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bd14	kernel.asm	/^ffff80000010bd14:	0f b6 50 05          	movzbl 0x5(%rax),%edx$/;"	l
ffff80000010bd18	kernel.asm	/^ffff80000010bd18:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bd1b	kernel.asm	/^ffff80000010bd1b:	88 50 05             	mov    %dl,0x5(%rax)$/;"	l
ffff80000010bd1e	kernel.asm	/^ffff80000010bd1e:	83 e1 0f             	and    $0xf,%ecx$/;"	l
ffff80000010bd21	kernel.asm	/^ffff80000010bd21:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bd25	kernel.asm	/^ffff80000010bd25:	83 e2 f0             	and    $0xfffffff0,%edx$/;"	l
ffff80000010bd28	kernel.asm	/^ffff80000010bd28:	09 ca                	or     %ecx,%edx$/;"	l
ffff80000010bd2a	kernel.asm	/^ffff80000010bd2a:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bd2d	kernel.asm	/^ffff80000010bd2d:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bd31	kernel.asm	/^ffff80000010bd31:	83 e2 ef             	and    $0xffffffef,%edx$/;"	l
ffff80000010bd34	kernel.asm	/^ffff80000010bd34:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bd37	kernel.asm	/^ffff80000010bd37:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bd3b	kernel.asm	/^ffff80000010bd3b:	83 e2 df             	and    $0xffffffdf,%edx$/;"	l
ffff80000010bd3e	kernel.asm	/^ffff80000010bd3e:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bd41	kernel.asm	/^ffff80000010bd41:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bd45	kernel.asm	/^ffff80000010bd45:	83 e2 bf             	and    $0xffffffbf,%edx$/;"	l
ffff80000010bd48	kernel.asm	/^ffff80000010bd48:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bd4b	kernel.asm	/^ffff80000010bd4b:	0f b6 50 06          	movzbl 0x6(%rax),%edx$/;"	l
ffff80000010bd4f	kernel.asm	/^ffff80000010bd4f:	83 ca 80             	or     $0xffffff80,%edx$/;"	l
ffff80000010bd52	kernel.asm	/^ffff80000010bd52:	88 50 06             	mov    %dl,0x6(%rax)$/;"	l
ffff80000010bd55	kernel.asm	/^ffff80000010bd55:	40 88 70 07          	mov    %sil,0x7(%rax)$/;"	l
ffff80000010bd59	kernel.asm	/^ffff80000010bd59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010bd5d	kernel.asm	/^ffff80000010bd5d:	be 40 00 00 00       	mov    $0x40,%esi$/;"	l
ffff80000010bd62	kernel.asm	/^ffff80000010bd62:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bd65	kernel.asm	/^ffff80000010bd65:	48 b8 cf b7 10 00 00 	movabs $0xffff80000010b7cf,%rax$/;"	l
ffff80000010bd6c	kernel.asm	/^ffff80000010bd6c:	80 ff ff $/;"	l
ffff80000010bd6f	kernel.asm	/^ffff80000010bd6f:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd71	kernel.asm	/^ffff80000010bd71:	bf 30 00 00 00       	mov    $0x30,%edi$/;"	l
ffff80000010bd76	kernel.asm	/^ffff80000010bd76:	48 b8 1e b8 10 00 00 	movabs $0xffff80000010b81e,%rax$/;"	l
ffff80000010bd7d	kernel.asm	/^ffff80000010bd7d:	80 ff ff $/;"	l
ffff80000010bd80	kernel.asm	/^ffff80000010bd80:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd82	kernel.asm	/^ffff80000010bd82:	90                   	nop$/;"	l
ffff80000010bd83	kernel.asm	/^ffff80000010bd83:	c9                   	leaveq $/;"	l
ffff80000010bd84	kernel.asm	/^ffff80000010bd84:	c3                   	retq   $/;"	l
ffff80000010bd85	kernel.asm	/^ffff80000010bd85 <setupkvm>:$/;"	l
ffff80000010bd85	kernel.asm	/^ffff80000010bd85:	55                   	push   %rbp$/;"	l
ffff80000010bd86	kernel.asm	/^ffff80000010bd86:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bd89	kernel.asm	/^ffff80000010bd89:	53                   	push   %rbx$/;"	l
ffff80000010bd8a	kernel.asm	/^ffff80000010bd8a:	48 83 ec 18          	sub    $0x18,%rsp$/;"	l
ffff80000010bd8e	kernel.asm	/^ffff80000010bd8e:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010bd95	kernel.asm	/^ffff80000010bd95:	80 ff ff $/;"	l
ffff80000010bd98	kernel.asm	/^ffff80000010bd98:	ff d0                	callq  *%rax$/;"	l
ffff80000010bd9a	kernel.asm	/^ffff80000010bd9a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010bd9e	kernel.asm	/^ffff80000010bd9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bda2	kernel.asm	/^ffff80000010bda2:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010bda7	kernel.asm	/^ffff80000010bda7:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bdac	kernel.asm	/^ffff80000010bdac:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bdaf	kernel.asm	/^ffff80000010bdaf:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010bdb6	kernel.asm	/^ffff80000010bdb6:	80 ff ff $/;"	l
ffff80000010bdb9	kernel.asm	/^ffff80000010bdb9:	ff d0                	callq  *%rax$/;"	l
ffff80000010bdbb	kernel.asm	/^ffff80000010bdbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bdbf	kernel.asm	/^ffff80000010bdbf:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010bdc6	kernel.asm	/^ffff80000010bdc6:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010bdcd	kernel.asm	/^ffff80000010bdcd:	80 ff ff $/;"	l
ffff80000010bdd0	kernel.asm	/^ffff80000010bdd0:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bdd3	kernel.asm	/^ffff80000010bdd3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bdd6	kernel.asm	/^ffff80000010bdd6:	48 b8 4c b8 10 00 00 	movabs $0xffff80000010b84c,%rax$/;"	l
ffff80000010bddd	kernel.asm	/^ffff80000010bddd:	80 ff ff $/;"	l
ffff80000010bde0	kernel.asm	/^ffff80000010bde0:	ff d0                	callq  *%rax$/;"	l
ffff80000010bde2	kernel.asm	/^ffff80000010bde2:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010bde6	kernel.asm	/^ffff80000010bde6:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010bde9	kernel.asm	/^ffff80000010bde9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bded	kernel.asm	/^ffff80000010bded:	48 83 c4 18          	add    $0x18,%rsp$/;"	l
ffff80000010bdf1	kernel.asm	/^ffff80000010bdf1:	5b                   	pop    %rbx$/;"	l
ffff80000010bdf2	kernel.asm	/^ffff80000010bdf2:	5d                   	pop    %rbp$/;"	l
ffff80000010bdf3	kernel.asm	/^ffff80000010bdf3:	c3                   	retq   $/;"	l
ffff80000010bdf4	kernel.asm	/^ffff80000010bdf4 <kvmalloc>:$/;"	l
ffff80000010bdf4	kernel.asm	/^ffff80000010bdf4:	55                   	push   %rbp$/;"	l
ffff80000010bdf5	kernel.asm	/^ffff80000010bdf5:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bdf8	kernel.asm	/^ffff80000010bdf8:	53                   	push   %rbx$/;"	l
ffff80000010bdf9	kernel.asm	/^ffff80000010bdf9:	48 83 ec 08          	sub    $0x8,%rsp$/;"	l
ffff80000010bdfd	kernel.asm	/^ffff80000010bdfd:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010be04	kernel.asm	/^ffff80000010be04:	80 ff ff $/;"	l
ffff80000010be07	kernel.asm	/^ffff80000010be07:	ff d0                	callq  *%rax$/;"	l
ffff80000010be09	kernel.asm	/^ffff80000010be09:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010be0c	kernel.asm	/^ffff80000010be0c:	48 b8 38 e4 11 00 00 	movabs $0xffff80000011e438,%rax$/;"	l
ffff80000010be13	kernel.asm	/^ffff80000010be13:	80 ff ff $/;"	l
ffff80000010be16	kernel.asm	/^ffff80000010be16:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010be19	kernel.asm	/^ffff80000010be19:	48 b8 38 e4 11 00 00 	movabs $0xffff80000011e438,%rax$/;"	l
ffff80000010be20	kernel.asm	/^ffff80000010be20:	80 ff ff $/;"	l
ffff80000010be23	kernel.asm	/^ffff80000010be23:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010be26	kernel.asm	/^ffff80000010be26:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010be2b	kernel.asm	/^ffff80000010be2b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010be30	kernel.asm	/^ffff80000010be30:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010be33	kernel.asm	/^ffff80000010be33:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010be3a	kernel.asm	/^ffff80000010be3a:	80 ff ff $/;"	l
ffff80000010be3d	kernel.asm	/^ffff80000010be3d:	ff d0                	callq  *%rax$/;"	l
ffff80000010be3f	kernel.asm	/^ffff80000010be3f:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010be46	kernel.asm	/^ffff80000010be46:	80 ff ff $/;"	l
ffff80000010be49	kernel.asm	/^ffff80000010be49:	ff d0                	callq  *%rax$/;"	l
ffff80000010be4b	kernel.asm	/^ffff80000010be4b:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010be4e	kernel.asm	/^ffff80000010be4e:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010be55	kernel.asm	/^ffff80000010be55:	80 ff ff $/;"	l
ffff80000010be58	kernel.asm	/^ffff80000010be58:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010be5b	kernel.asm	/^ffff80000010be5b:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010be62	kernel.asm	/^ffff80000010be62:	80 ff ff $/;"	l
ffff80000010be65	kernel.asm	/^ffff80000010be65:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010be68	kernel.asm	/^ffff80000010be68:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010be6d	kernel.asm	/^ffff80000010be6d:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010be72	kernel.asm	/^ffff80000010be72:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010be75	kernel.asm	/^ffff80000010be75:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010be7c	kernel.asm	/^ffff80000010be7c:	80 ff ff $/;"	l
ffff80000010be7f	kernel.asm	/^ffff80000010be7f:	ff d0                	callq  *%rax$/;"	l
ffff80000010be81	kernel.asm	/^ffff80000010be81:	48 b8 38 e4 11 00 00 	movabs $0xffff80000011e438,%rax$/;"	l
ffff80000010be88	kernel.asm	/^ffff80000010be88:	80 ff ff $/;"	l
ffff80000010be8b	kernel.asm	/^ffff80000010be8b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010be8e	kernel.asm	/^ffff80000010be8e:	48 8d 98 00 08 00 00 	lea    0x800(%rax),%rbx$/;"	l
ffff80000010be95	kernel.asm	/^ffff80000010be95:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010be9c	kernel.asm	/^ffff80000010be9c:	80 ff ff $/;"	l
ffff80000010be9f	kernel.asm	/^ffff80000010be9f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bea2	kernel.asm	/^ffff80000010bea2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bea5	kernel.asm	/^ffff80000010bea5:	48 b8 4c b8 10 00 00 	movabs $0xffff80000010b84c,%rax$/;"	l
ffff80000010beac	kernel.asm	/^ffff80000010beac:	80 ff ff $/;"	l
ffff80000010beaf	kernel.asm	/^ffff80000010beaf:	ff d0                	callq  *%rax$/;"	l
ffff80000010beb1	kernel.asm	/^ffff80000010beb1:	48 83 c8 03          	or     $0x3,%rax$/;"	l
ffff80000010beb5	kernel.asm	/^ffff80000010beb5:	48 89 03             	mov    %rax,(%rbx)$/;"	l
ffff80000010beb8	kernel.asm	/^ffff80000010beb8:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010bebf	kernel.asm	/^ffff80000010bebf:	80 ff ff $/;"	l
ffff80000010bec2	kernel.asm	/^ffff80000010bec2:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bec5	kernel.asm	/^ffff80000010bec5:	48 c7 00 83 00 00 00 	movq   $0x83,(%rax)$/;"	l
ffff80000010becc	kernel.asm	/^ffff80000010becc:	48 b8 40 e4 11 00 00 	movabs $0xffff80000011e440,%rax$/;"	l
ffff80000010bed3	kernel.asm	/^ffff80000010bed3:	80 ff ff $/;"	l
ffff80000010bed6	kernel.asm	/^ffff80000010bed6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bed9	kernel.asm	/^ffff80000010bed9:	48 83 c0 18          	add    $0x18,%rax$/;"	l
ffff80000010bedd	kernel.asm	/^ffff80000010bedd:	b9 9b 00 00 c0       	mov    $0xc000009b,%ecx$/;"	l
ffff80000010bee2	kernel.asm	/^ffff80000010bee2:	48 89 08             	mov    %rcx,(%rax)$/;"	l
ffff80000010bee5	kernel.asm	/^ffff80000010bee5:	48 b8 f9 be 10 00 00 	movabs $0xffff80000010bef9,%rax$/;"	l
ffff80000010beec	kernel.asm	/^ffff80000010beec:	80 ff ff $/;"	l
ffff80000010beef	kernel.asm	/^ffff80000010beef:	ff d0                	callq  *%rax$/;"	l
ffff80000010bef1	kernel.asm	/^ffff80000010bef1:	90                   	nop$/;"	l
ffff80000010bef2	kernel.asm	/^ffff80000010bef2:	48 83 c4 08          	add    $0x8,%rsp$/;"	l
ffff80000010bef6	kernel.asm	/^ffff80000010bef6:	5b                   	pop    %rbx$/;"	l
ffff80000010bef7	kernel.asm	/^ffff80000010bef7:	5d                   	pop    %rbp$/;"	l
ffff80000010bef8	kernel.asm	/^ffff80000010bef8:	c3                   	retq   $/;"	l
ffff80000010bef9	kernel.asm	/^ffff80000010bef9 <switchkvm>:$/;"	l
ffff80000010bef9	kernel.asm	/^ffff80000010bef9:	55                   	push   %rbp$/;"	l
ffff80000010befa	kernel.asm	/^ffff80000010befa:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010befd	kernel.asm	/^ffff80000010befd:	48 b8 38 e4 11 00 00 	movabs $0xffff80000011e438,%rax$/;"	l
ffff80000010bf04	kernel.asm	/^ffff80000010bf04:	80 ff ff $/;"	l
ffff80000010bf07	kernel.asm	/^ffff80000010bf07:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010bf0a	kernel.asm	/^ffff80000010bf0a:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bf0d	kernel.asm	/^ffff80000010bf0d:	48 b8 4c b8 10 00 00 	movabs $0xffff80000010b84c,%rax$/;"	l
ffff80000010bf14	kernel.asm	/^ffff80000010bf14:	80 ff ff $/;"	l
ffff80000010bf17	kernel.asm	/^ffff80000010bf17:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf19	kernel.asm	/^ffff80000010bf19:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bf1c	kernel.asm	/^ffff80000010bf1c:	48 b8 36 b8 10 00 00 	movabs $0xffff80000010b836,%rax$/;"	l
ffff80000010bf23	kernel.asm	/^ffff80000010bf23:	80 ff ff $/;"	l
ffff80000010bf26	kernel.asm	/^ffff80000010bf26:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf28	kernel.asm	/^ffff80000010bf28:	90                   	nop$/;"	l
ffff80000010bf29	kernel.asm	/^ffff80000010bf29:	5d                   	pop    %rbp$/;"	l
ffff80000010bf2a	kernel.asm	/^ffff80000010bf2a:	c3                   	retq   $/;"	l
ffff80000010bf2b	kernel.asm	/^ffff80000010bf2b <switchuvm>:$/;"	l
ffff80000010bf2b	kernel.asm	/^ffff80000010bf2b:	55                   	push   %rbp$/;"	l
ffff80000010bf2c	kernel.asm	/^ffff80000010bf2c:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bf2f	kernel.asm	/^ffff80000010bf2f:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010bf33	kernel.asm	/^ffff80000010bf33:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010bf37	kernel.asm	/^ffff80000010bf37:	48 b8 df 76 10 00 00 	movabs $0xffff8000001076df,%rax$/;"	l
ffff80000010bf3e	kernel.asm	/^ffff80000010bf3e:	80 ff ff $/;"	l
ffff80000010bf41	kernel.asm	/^ffff80000010bf41:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf43	kernel.asm	/^ffff80000010bf43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bf47	kernel.asm	/^ffff80000010bf47:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010bf4b	kernel.asm	/^ffff80000010bf4b:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010bf4e	kernel.asm	/^ffff80000010bf4e:	75 16                	jne    ffff80000010bf66 <switchuvm+0x3b>$/;"	l
ffff80000010bf50	kernel.asm	/^ffff80000010bf50:	48 bf 60 d3 10 00 00 	movabs $0xffff80000010d360,%rdi$/;"	l
ffff80000010bf57	kernel.asm	/^ffff80000010bf57:	80 ff ff $/;"	l
ffff80000010bf5a	kernel.asm	/^ffff80000010bf5a:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010bf61	kernel.asm	/^ffff80000010bf61:	80 ff ff $/;"	l
ffff80000010bf64	kernel.asm	/^ffff80000010bf64:	ff d0                	callq  *%rax$/;"	l
ffff80000010bf66	kernel.asm	/^ffff80000010bf66:	64 48 8b 04 25 f0 ff 	mov    %fs:0xfffffffffffffff0,%rax$/;"	l
ffff80000010bf6d	kernel.asm	/^ffff80000010bf6d:	ff ff $/;"	l
ffff80000010bf6f	kernel.asm	/^ffff80000010bf6f:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax$/;"	l
ffff80000010bf76	kernel.asm	/^ffff80000010bf76:	48 05 00 04 00 00    	add    $0x400,%rax$/;"	l
ffff80000010bf7c	kernel.asm	/^ffff80000010bf7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010bf80	kernel.asm	/^ffff80000010bf80:	64 48 8b 04 25 f8 ff 	mov    %fs:0xfffffffffffffff8,%rax$/;"	l
ffff80000010bf87	kernel.asm	/^ffff80000010bf87:	ff ff $/;"	l
ffff80000010bf89	kernel.asm	/^ffff80000010bf89:	48 8b 40 10          	mov    0x10(%rax),%rax$/;"	l
ffff80000010bf8d	kernel.asm	/^ffff80000010bf8d:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx$/;"	l
ffff80000010bf94	kernel.asm	/^ffff80000010bf94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010bf98	kernel.asm	/^ffff80000010bf98:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010bf9d	kernel.asm	/^ffff80000010bf9d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bfa0	kernel.asm	/^ffff80000010bfa0:	48 b8 6b b8 10 00 00 	movabs $0xffff80000010b86b,%rax$/;"	l
ffff80000010bfa7	kernel.asm	/^ffff80000010bfa7:	80 ff ff $/;"	l
ffff80000010bfaa	kernel.asm	/^ffff80000010bfaa:	ff d0                	callq  *%rax$/;"	l
ffff80000010bfac	kernel.asm	/^ffff80000010bfac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010bfb0	kernel.asm	/^ffff80000010bfb0:	48 8b 40 08          	mov    0x8(%rax),%rax$/;"	l
ffff80000010bfb4	kernel.asm	/^ffff80000010bfb4:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bfb7	kernel.asm	/^ffff80000010bfb7:	48 b8 4c b8 10 00 00 	movabs $0xffff80000010b84c,%rax$/;"	l
ffff80000010bfbe	kernel.asm	/^ffff80000010bfbe:	80 ff ff $/;"	l
ffff80000010bfc1	kernel.asm	/^ffff80000010bfc1:	ff d0                	callq  *%rax$/;"	l
ffff80000010bfc3	kernel.asm	/^ffff80000010bfc3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010bfc6	kernel.asm	/^ffff80000010bfc6:	48 b8 36 b8 10 00 00 	movabs $0xffff80000010b836,%rax$/;"	l
ffff80000010bfcd	kernel.asm	/^ffff80000010bfcd:	80 ff ff $/;"	l
ffff80000010bfd0	kernel.asm	/^ffff80000010bfd0:	ff d0                	callq  *%rax$/;"	l
ffff80000010bfd2	kernel.asm	/^ffff80000010bfd2:	48 b8 59 77 10 00 00 	movabs $0xffff800000107759,%rax$/;"	l
ffff80000010bfd9	kernel.asm	/^ffff80000010bfd9:	80 ff ff $/;"	l
ffff80000010bfdc	kernel.asm	/^ffff80000010bfdc:	ff d0                	callq  *%rax$/;"	l
ffff80000010bfde	kernel.asm	/^ffff80000010bfde:	90                   	nop$/;"	l
ffff80000010bfdf	kernel.asm	/^ffff80000010bfdf:	c9                   	leaveq $/;"	l
ffff80000010bfe0	kernel.asm	/^ffff80000010bfe0:	c3                   	retq   $/;"	l
ffff80000010bfe1	kernel.asm	/^ffff80000010bfe1 <walkpgdir>:$/;"	l
ffff80000010bfe1	kernel.asm	/^ffff80000010bfe1:	55                   	push   %rbp$/;"	l
ffff80000010bfe2	kernel.asm	/^ffff80000010bfe2:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010bfe5	kernel.asm	/^ffff80000010bfe5:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010bfe9	kernel.asm	/^ffff80000010bfe9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010bfed	kernel.asm	/^ffff80000010bfed:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)$/;"	l
ffff80000010bff1	kernel.asm	/^ffff80000010bff1:	89 55 bc             	mov    %edx,-0x44(%rbp)$/;"	l
ffff80000010bff4	kernel.asm	/^ffff80000010bff4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010bff8	kernel.asm	/^ffff80000010bff8:	48 c1 e8 27          	shr    $0x27,%rax$/;"	l
ffff80000010bffc	kernel.asm	/^ffff80000010bffc:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010c001	kernel.asm	/^ffff80000010c001:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c008	kernel.asm	/^ffff80000010c008:	00 $/;"	l
ffff80000010c009	kernel.asm	/^ffff80000010c009:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c00d	kernel.asm	/^ffff80000010c00d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c010	kernel.asm	/^ffff80000010c010:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c014	kernel.asm	/^ffff80000010c014:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c018	kernel.asm	/^ffff80000010c018:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c01b	kernel.asm	/^ffff80000010c01b:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c01e	kernel.asm	/^ffff80000010c01e:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c021	kernel.asm	/^ffff80000010c021:	74 23                	je     ffff80000010c046 <walkpgdir+0x65>$/;"	l
ffff80000010c023	kernel.asm	/^ffff80000010c023:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c027	kernel.asm	/^ffff80000010c027:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c02a	kernel.asm	/^ffff80000010c02a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c030	kernel.asm	/^ffff80000010c030:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c033	kernel.asm	/^ffff80000010c033:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c03a	kernel.asm	/^ffff80000010c03a:	80 ff ff $/;"	l
ffff80000010c03d	kernel.asm	/^ffff80000010c03d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c040	kernel.asm	/^ffff80000010c040:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c044	kernel.asm	/^ffff80000010c044:	eb 63                	jmp    ffff80000010c0a9 <walkpgdir+0xc8>$/;"	l
ffff80000010c046	kernel.asm	/^ffff80000010c046:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010c04a	kernel.asm	/^ffff80000010c04a:	74 17                	je     ffff80000010c063 <walkpgdir+0x82>$/;"	l
ffff80000010c04c	kernel.asm	/^ffff80000010c04c:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010c053	kernel.asm	/^ffff80000010c053:	80 ff ff $/;"	l
ffff80000010c056	kernel.asm	/^ffff80000010c056:	ff d0                	callq  *%rax$/;"	l
ffff80000010c058	kernel.asm	/^ffff80000010c058:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c05c	kernel.asm	/^ffff80000010c05c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c061	kernel.asm	/^ffff80000010c061:	75 0a                	jne    ffff80000010c06d <walkpgdir+0x8c>$/;"	l
ffff80000010c063	kernel.asm	/^ffff80000010c063:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c068	kernel.asm	/^ffff80000010c068:	e9 bf 01 00 00       	jmpq   ffff80000010c22c <walkpgdir+0x24b>$/;"	l
ffff80000010c06d	kernel.asm	/^ffff80000010c06d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c071	kernel.asm	/^ffff80000010c071:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c076	kernel.asm	/^ffff80000010c076:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c07b	kernel.asm	/^ffff80000010c07b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c07e	kernel.asm	/^ffff80000010c07e:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010c085	kernel.asm	/^ffff80000010c085:	80 ff ff $/;"	l
ffff80000010c088	kernel.asm	/^ffff80000010c088:	ff d0                	callq  *%rax$/;"	l
ffff80000010c08a	kernel.asm	/^ffff80000010c08a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010c08e	kernel.asm	/^ffff80000010c08e:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c095	kernel.asm	/^ffff80000010c095:	80 00 00 $/;"	l
ffff80000010c098	kernel.asm	/^ffff80000010c098:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c09b	kernel.asm	/^ffff80000010c09b:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010c09f	kernel.asm	/^ffff80000010c09f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c0a2	kernel.asm	/^ffff80000010c0a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c0a6	kernel.asm	/^ffff80000010c0a6:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c0a9	kernel.asm	/^ffff80000010c0a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010c0ad	kernel.asm	/^ffff80000010c0ad:	48 c1 e8 1e          	shr    $0x1e,%rax$/;"	l
ffff80000010c0b1	kernel.asm	/^ffff80000010c0b1:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010c0b6	kernel.asm	/^ffff80000010c0b6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c0bd	kernel.asm	/^ffff80000010c0bd:	00 $/;"	l
ffff80000010c0be	kernel.asm	/^ffff80000010c0be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c0c2	kernel.asm	/^ffff80000010c0c2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c0c5	kernel.asm	/^ffff80000010c0c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010c0c9	kernel.asm	/^ffff80000010c0c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c0cd	kernel.asm	/^ffff80000010c0cd:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c0d0	kernel.asm	/^ffff80000010c0d0:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c0d3	kernel.asm	/^ffff80000010c0d3:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c0d6	kernel.asm	/^ffff80000010c0d6:	74 23                	je     ffff80000010c0fb <walkpgdir+0x11a>$/;"	l
ffff80000010c0d8	kernel.asm	/^ffff80000010c0d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c0dc	kernel.asm	/^ffff80000010c0dc:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c0df	kernel.asm	/^ffff80000010c0df:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c0e5	kernel.asm	/^ffff80000010c0e5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c0e8	kernel.asm	/^ffff80000010c0e8:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c0ef	kernel.asm	/^ffff80000010c0ef:	80 ff ff $/;"	l
ffff80000010c0f2	kernel.asm	/^ffff80000010c0f2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c0f5	kernel.asm	/^ffff80000010c0f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c0f9	kernel.asm	/^ffff80000010c0f9:	eb 63                	jmp    ffff80000010c15e <walkpgdir+0x17d>$/;"	l
ffff80000010c0fb	kernel.asm	/^ffff80000010c0fb:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010c0ff	kernel.asm	/^ffff80000010c0ff:	74 17                	je     ffff80000010c118 <walkpgdir+0x137>$/;"	l
ffff80000010c101	kernel.asm	/^ffff80000010c101:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010c108	kernel.asm	/^ffff80000010c108:	80 ff ff $/;"	l
ffff80000010c10b	kernel.asm	/^ffff80000010c10b:	ff d0                	callq  *%rax$/;"	l
ffff80000010c10d	kernel.asm	/^ffff80000010c10d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c111	kernel.asm	/^ffff80000010c111:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c116	kernel.asm	/^ffff80000010c116:	75 0a                	jne    ffff80000010c122 <walkpgdir+0x141>$/;"	l
ffff80000010c118	kernel.asm	/^ffff80000010c118:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c11d	kernel.asm	/^ffff80000010c11d:	e9 0a 01 00 00       	jmpq   ffff80000010c22c <walkpgdir+0x24b>$/;"	l
ffff80000010c122	kernel.asm	/^ffff80000010c122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c126	kernel.asm	/^ffff80000010c126:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c12b	kernel.asm	/^ffff80000010c12b:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c130	kernel.asm	/^ffff80000010c130:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c133	kernel.asm	/^ffff80000010c133:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010c13a	kernel.asm	/^ffff80000010c13a:	80 ff ff $/;"	l
ffff80000010c13d	kernel.asm	/^ffff80000010c13d:	ff d0                	callq  *%rax$/;"	l
ffff80000010c13f	kernel.asm	/^ffff80000010c13f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010c143	kernel.asm	/^ffff80000010c143:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c14a	kernel.asm	/^ffff80000010c14a:	80 00 00 $/;"	l
ffff80000010c14d	kernel.asm	/^ffff80000010c14d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c150	kernel.asm	/^ffff80000010c150:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010c154	kernel.asm	/^ffff80000010c154:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c157	kernel.asm	/^ffff80000010c157:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c15b	kernel.asm	/^ffff80000010c15b:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c15e	kernel.asm	/^ffff80000010c15e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010c162	kernel.asm	/^ffff80000010c162:	48 c1 e8 15          	shr    $0x15,%rax$/;"	l
ffff80000010c166	kernel.asm	/^ffff80000010c166:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010c16b	kernel.asm	/^ffff80000010c16b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c172	kernel.asm	/^ffff80000010c172:	00 $/;"	l
ffff80000010c173	kernel.asm	/^ffff80000010c173:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c177	kernel.asm	/^ffff80000010c177:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c17a	kernel.asm	/^ffff80000010c17a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010c17e	kernel.asm	/^ffff80000010c17e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c182	kernel.asm	/^ffff80000010c182:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c185	kernel.asm	/^ffff80000010c185:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c188	kernel.asm	/^ffff80000010c188:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c18b	kernel.asm	/^ffff80000010c18b:	74 23                	je     ffff80000010c1b0 <walkpgdir+0x1cf>$/;"	l
ffff80000010c18d	kernel.asm	/^ffff80000010c18d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c191	kernel.asm	/^ffff80000010c191:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c194	kernel.asm	/^ffff80000010c194:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c19a	kernel.asm	/^ffff80000010c19a:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c19d	kernel.asm	/^ffff80000010c19d:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c1a4	kernel.asm	/^ffff80000010c1a4:	80 ff ff $/;"	l
ffff80000010c1a7	kernel.asm	/^ffff80000010c1a7:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c1aa	kernel.asm	/^ffff80000010c1aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c1ae	kernel.asm	/^ffff80000010c1ae:	eb 60                	jmp    ffff80000010c210 <walkpgdir+0x22f>$/;"	l
ffff80000010c1b0	kernel.asm	/^ffff80000010c1b0:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)$/;"	l
ffff80000010c1b4	kernel.asm	/^ffff80000010c1b4:	74 17                	je     ffff80000010c1cd <walkpgdir+0x1ec>$/;"	l
ffff80000010c1b6	kernel.asm	/^ffff80000010c1b6:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010c1bd	kernel.asm	/^ffff80000010c1bd:	80 ff ff $/;"	l
ffff80000010c1c0	kernel.asm	/^ffff80000010c1c0:	ff d0                	callq  *%rax$/;"	l
ffff80000010c1c2	kernel.asm	/^ffff80000010c1c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c1c6	kernel.asm	/^ffff80000010c1c6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c1cb	kernel.asm	/^ffff80000010c1cb:	75 07                	jne    ffff80000010c1d4 <walkpgdir+0x1f3>$/;"	l
ffff80000010c1cd	kernel.asm	/^ffff80000010c1cd:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c1d2	kernel.asm	/^ffff80000010c1d2:	eb 58                	jmp    ffff80000010c22c <walkpgdir+0x24b>$/;"	l
ffff80000010c1d4	kernel.asm	/^ffff80000010c1d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c1d8	kernel.asm	/^ffff80000010c1d8:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c1dd	kernel.asm	/^ffff80000010c1dd:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c1e2	kernel.asm	/^ffff80000010c1e2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c1e5	kernel.asm	/^ffff80000010c1e5:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010c1ec	kernel.asm	/^ffff80000010c1ec:	80 ff ff $/;"	l
ffff80000010c1ef	kernel.asm	/^ffff80000010c1ef:	ff d0                	callq  *%rax$/;"	l
ffff80000010c1f1	kernel.asm	/^ffff80000010c1f1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010c1f5	kernel.asm	/^ffff80000010c1f5:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c1fc	kernel.asm	/^ffff80000010c1fc:	80 00 00 $/;"	l
ffff80000010c1ff	kernel.asm	/^ffff80000010c1ff:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c202	kernel.asm	/^ffff80000010c202:	48 83 c8 07          	or     $0x7,%rax$/;"	l
ffff80000010c206	kernel.asm	/^ffff80000010c206:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c209	kernel.asm	/^ffff80000010c209:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c20d	kernel.asm	/^ffff80000010c20d:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c210	kernel.asm	/^ffff80000010c210:	48 8b 45 c0          	mov    -0x40(%rbp),%rax$/;"	l
ffff80000010c214	kernel.asm	/^ffff80000010c214:	48 c1 e8 0c          	shr    $0xc,%rax$/;"	l
ffff80000010c218	kernel.asm	/^ffff80000010c218:	25 ff 01 00 00       	and    $0x1ff,%eax$/;"	l
ffff80000010c21d	kernel.asm	/^ffff80000010c21d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c224	kernel.asm	/^ffff80000010c224:	00 $/;"	l
ffff80000010c225	kernel.asm	/^ffff80000010c225:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c229	kernel.asm	/^ffff80000010c229:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c22c	kernel.asm	/^ffff80000010c22c:	c9                   	leaveq $/;"	l
ffff80000010c22d	kernel.asm	/^ffff80000010c22d:	c3                   	retq   $/;"	l
ffff80000010c22e	kernel.asm	/^ffff80000010c22e <mappages>:$/;"	l
ffff80000010c22e	kernel.asm	/^ffff80000010c22e:	55                   	push   %rbp$/;"	l
ffff80000010c22f	kernel.asm	/^ffff80000010c22f:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c232	kernel.asm	/^ffff80000010c232:	48 83 ec 50          	sub    $0x50,%rsp$/;"	l
ffff80000010c236	kernel.asm	/^ffff80000010c236:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c23a	kernel.asm	/^ffff80000010c23a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c23e	kernel.asm	/^ffff80000010c23e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c242	kernel.asm	/^ffff80000010c242:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)$/;"	l
ffff80000010c246	kernel.asm	/^ffff80000010c246:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)$/;"	l
ffff80000010c24a	kernel.asm	/^ffff80000010c24a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c24e	kernel.asm	/^ffff80000010c24e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c254	kernel.asm	/^ffff80000010c254:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c258	kernel.asm	/^ffff80000010c258:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010c25c	kernel.asm	/^ffff80000010c25c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c260	kernel.asm	/^ffff80000010c260:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c263	kernel.asm	/^ffff80000010c263:	48 83 e8 01          	sub    $0x1,%rax$/;"	l
ffff80000010c267	kernel.asm	/^ffff80000010c267:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c26d	kernel.asm	/^ffff80000010c26d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c271	kernel.asm	/^ffff80000010c271:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c275	kernel.asm	/^ffff80000010c275:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c279	kernel.asm	/^ffff80000010c279:	ba 01 00 00 00       	mov    $0x1,%edx$/;"	l
ffff80000010c27e	kernel.asm	/^ffff80000010c27e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c281	kernel.asm	/^ffff80000010c281:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c284	kernel.asm	/^ffff80000010c284:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010c28b	kernel.asm	/^ffff80000010c28b:	80 ff ff $/;"	l
ffff80000010c28e	kernel.asm	/^ffff80000010c28e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c290	kernel.asm	/^ffff80000010c290:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c294	kernel.asm	/^ffff80000010c294:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c299	kernel.asm	/^ffff80000010c299:	75 07                	jne    ffff80000010c2a2 <mappages+0x74>$/;"	l
ffff80000010c29b	kernel.asm	/^ffff80000010c29b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010c2a0	kernel.asm	/^ffff80000010c2a0:	eb 61                	jmp    ffff80000010c303 <mappages+0xd5>$/;"	l
ffff80000010c2a2	kernel.asm	/^ffff80000010c2a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c2a6	kernel.asm	/^ffff80000010c2a6:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c2a9	kernel.asm	/^ffff80000010c2a9:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c2ac	kernel.asm	/^ffff80000010c2ac:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c2af	kernel.asm	/^ffff80000010c2af:	74 16                	je     ffff80000010c2c7 <mappages+0x99>$/;"	l
ffff80000010c2b1	kernel.asm	/^ffff80000010c2b1:	48 bf 74 d3 10 00 00 	movabs $0xffff80000010d374,%rdi$/;"	l
ffff80000010c2b8	kernel.asm	/^ffff80000010c2b8:	80 ff ff $/;"	l
ffff80000010c2bb	kernel.asm	/^ffff80000010c2bb:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c2c2	kernel.asm	/^ffff80000010c2c2:	80 ff ff $/;"	l
ffff80000010c2c5	kernel.asm	/^ffff80000010c2c5:	ff d0                	callq  *%rax$/;"	l
ffff80000010c2c7	kernel.asm	/^ffff80000010c2c7:	8b 45 bc             	mov    -0x44(%rbp),%eax$/;"	l
ffff80000010c2ca	kernel.asm	/^ffff80000010c2ca:	48 98                	cltq   $/;"	l
ffff80000010c2cc	kernel.asm	/^ffff80000010c2cc:	48 0b 45 c0          	or     -0x40(%rbp),%rax$/;"	l
ffff80000010c2d0	kernel.asm	/^ffff80000010c2d0:	48 83 c8 01          	or     $0x1,%rax$/;"	l
ffff80000010c2d4	kernel.asm	/^ffff80000010c2d4:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c2d7	kernel.asm	/^ffff80000010c2d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c2db	kernel.asm	/^ffff80000010c2db:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c2de	kernel.asm	/^ffff80000010c2de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c2e2	kernel.asm	/^ffff80000010c2e2:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010c2e6	kernel.asm	/^ffff80000010c2e6:	74 15                	je     ffff80000010c2fd <mappages+0xcf>$/;"	l
ffff80000010c2e8	kernel.asm	/^ffff80000010c2e8:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c2ef	kernel.asm	/^ffff80000010c2ef:	00 $/;"	l
ffff80000010c2f0	kernel.asm	/^ffff80000010c2f0:	48 81 45 c0 00 10 00 	addq   $0x1000,-0x40(%rbp)$/;"	l
ffff80000010c2f7	kernel.asm	/^ffff80000010c2f7:	00 $/;"	l
ffff80000010c2f8	kernel.asm	/^ffff80000010c2f8:	e9 74 ff ff ff       	jmpq   ffff80000010c271 <mappages+0x43>$/;"	l
ffff80000010c2fd	kernel.asm	/^ffff80000010c2fd:	90                   	nop$/;"	l
ffff80000010c2fe	kernel.asm	/^ffff80000010c2fe:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c303	kernel.asm	/^ffff80000010c303:	c9                   	leaveq $/;"	l
ffff80000010c304	kernel.asm	/^ffff80000010c304:	c3                   	retq   $/;"	l
ffff80000010c305	kernel.asm	/^ffff80000010c305 <inituvm>:$/;"	l
ffff80000010c305	kernel.asm	/^ffff80000010c305:	55                   	push   %rbp$/;"	l
ffff80000010c306	kernel.asm	/^ffff80000010c306:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c309	kernel.asm	/^ffff80000010c309:	48 83 ec 30          	sub    $0x30,%rsp$/;"	l
ffff80000010c30d	kernel.asm	/^ffff80000010c30d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c311	kernel.asm	/^ffff80000010c311:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010c315	kernel.asm	/^ffff80000010c315:	89 55 dc             	mov    %edx,-0x24(%rbp)$/;"	l
ffff80000010c318	kernel.asm	/^ffff80000010c318:	81 7d dc ff 0f 00 00 	cmpl   $0xfff,-0x24(%rbp)$/;"	l
ffff80000010c31f	kernel.asm	/^ffff80000010c31f:	76 16                	jbe    ffff80000010c337 <inituvm+0x32>$/;"	l
ffff80000010c321	kernel.asm	/^ffff80000010c321:	48 bf 7a d3 10 00 00 	movabs $0xffff80000010d37a,%rdi$/;"	l
ffff80000010c328	kernel.asm	/^ffff80000010c328:	80 ff ff $/;"	l
ffff80000010c32b	kernel.asm	/^ffff80000010c32b:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c332	kernel.asm	/^ffff80000010c332:	80 ff ff $/;"	l
ffff80000010c335	kernel.asm	/^ffff80000010c335:	ff d0                	callq  *%rax$/;"	l
ffff80000010c337	kernel.asm	/^ffff80000010c337:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010c33e	kernel.asm	/^ffff80000010c33e:	80 ff ff $/;"	l
ffff80000010c341	kernel.asm	/^ffff80000010c341:	ff d0                	callq  *%rax$/;"	l
ffff80000010c343	kernel.asm	/^ffff80000010c343:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c347	kernel.asm	/^ffff80000010c347:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c34b	kernel.asm	/^ffff80000010c34b:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c350	kernel.asm	/^ffff80000010c350:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c355	kernel.asm	/^ffff80000010c355:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c358	kernel.asm	/^ffff80000010c358:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010c35f	kernel.asm	/^ffff80000010c35f:	80 ff ff $/;"	l
ffff80000010c362	kernel.asm	/^ffff80000010c362:	ff d0                	callq  *%rax$/;"	l
ffff80000010c364	kernel.asm	/^ffff80000010c364:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx$/;"	l
ffff80000010c368	kernel.asm	/^ffff80000010c368:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c36f	kernel.asm	/^ffff80000010c36f:	80 00 00 $/;"	l
ffff80000010c372	kernel.asm	/^ffff80000010c372:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010c375	kernel.asm	/^ffff80000010c375:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c379	kernel.asm	/^ffff80000010c379:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010c37f	kernel.asm	/^ffff80000010c37f:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010c382	kernel.asm	/^ffff80000010c382:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c387	kernel.asm	/^ffff80000010c387:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c38c	kernel.asm	/^ffff80000010c38c:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c38f	kernel.asm	/^ffff80000010c38f:	48 b8 2e c2 10 00 00 	movabs $0xffff80000010c22e,%rax$/;"	l
ffff80000010c396	kernel.asm	/^ffff80000010c396:	80 ff ff $/;"	l
ffff80000010c399	kernel.asm	/^ffff80000010c399:	ff d0                	callq  *%rax$/;"	l
ffff80000010c39b	kernel.asm	/^ffff80000010c39b:	8b 55 dc             	mov    -0x24(%rbp),%edx$/;"	l
ffff80000010c39e	kernel.asm	/^ffff80000010c39e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010c3a2	kernel.asm	/^ffff80000010c3a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c3a6	kernel.asm	/^ffff80000010c3a6:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c3a9	kernel.asm	/^ffff80000010c3a9:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c3ac	kernel.asm	/^ffff80000010c3ac:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff80000010c3b3	kernel.asm	/^ffff80000010c3b3:	80 ff ff $/;"	l
ffff80000010c3b6	kernel.asm	/^ffff80000010c3b6:	ff d0                	callq  *%rax$/;"	l
ffff80000010c3b8	kernel.asm	/^ffff80000010c3b8:	90                   	nop$/;"	l
ffff80000010c3b9	kernel.asm	/^ffff80000010c3b9:	c9                   	leaveq $/;"	l
ffff80000010c3ba	kernel.asm	/^ffff80000010c3ba:	c3                   	retq   $/;"	l
ffff80000010c3bb	kernel.asm	/^ffff80000010c3bb <loaduvm>:$/;"	l
ffff80000010c3bb	kernel.asm	/^ffff80000010c3bb:	55                   	push   %rbp$/;"	l
ffff80000010c3bc	kernel.asm	/^ffff80000010c3bc:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c3bf	kernel.asm	/^ffff80000010c3bf:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c3c3	kernel.asm	/^ffff80000010c3c3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c3c7	kernel.asm	/^ffff80000010c3c7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c3cb	kernel.asm	/^ffff80000010c3cb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c3cf	kernel.asm	/^ffff80000010c3cf:	89 4d c4             	mov    %ecx,-0x3c(%rbp)$/;"	l
ffff80000010c3d2	kernel.asm	/^ffff80000010c3d2:	44 89 45 c0          	mov    %r8d,-0x40(%rbp)$/;"	l
ffff80000010c3d6	kernel.asm	/^ffff80000010c3d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c3da	kernel.asm	/^ffff80000010c3da:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010c3df	kernel.asm	/^ffff80000010c3df:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c3e2	kernel.asm	/^ffff80000010c3e2:	74 16                	je     ffff80000010c3fa <loaduvm+0x3f>$/;"	l
ffff80000010c3e4	kernel.asm	/^ffff80000010c3e4:	48 bf 98 d3 10 00 00 	movabs $0xffff80000010d398,%rdi$/;"	l
ffff80000010c3eb	kernel.asm	/^ffff80000010c3eb:	80 ff ff $/;"	l
ffff80000010c3ee	kernel.asm	/^ffff80000010c3ee:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c3f5	kernel.asm	/^ffff80000010c3f5:	80 ff ff $/;"	l
ffff80000010c3f8	kernel.asm	/^ffff80000010c3f8:	ff d0                	callq  *%rax$/;"	l
ffff80000010c3fa	kernel.asm	/^ffff80000010c3fa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010c401	kernel.asm	/^ffff80000010c401:	e9 c4 00 00 00       	jmpq   ffff80000010c4ca <loaduvm+0x10f>$/;"	l
ffff80000010c406	kernel.asm	/^ffff80000010c406:	8b 55 fc             	mov    -0x4(%rbp),%edx$/;"	l
ffff80000010c409	kernel.asm	/^ffff80000010c409:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c40d	kernel.asm	/^ffff80000010c40d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010c411	kernel.asm	/^ffff80000010c411:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c415	kernel.asm	/^ffff80000010c415:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c41a	kernel.asm	/^ffff80000010c41a:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c41d	kernel.asm	/^ffff80000010c41d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c420	kernel.asm	/^ffff80000010c420:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010c427	kernel.asm	/^ffff80000010c427:	80 ff ff $/;"	l
ffff80000010c42a	kernel.asm	/^ffff80000010c42a:	ff d0                	callq  *%rax$/;"	l
ffff80000010c42c	kernel.asm	/^ffff80000010c42c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c430	kernel.asm	/^ffff80000010c430:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c435	kernel.asm	/^ffff80000010c435:	75 16                	jne    ffff80000010c44d <loaduvm+0x92>$/;"	l
ffff80000010c437	kernel.asm	/^ffff80000010c437:	48 bf bb d3 10 00 00 	movabs $0xffff80000010d3bb,%rdi$/;"	l
ffff80000010c43e	kernel.asm	/^ffff80000010c43e:	80 ff ff $/;"	l
ffff80000010c441	kernel.asm	/^ffff80000010c441:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c448	kernel.asm	/^ffff80000010c448:	80 ff ff $/;"	l
ffff80000010c44b	kernel.asm	/^ffff80000010c44b:	ff d0                	callq  *%rax$/;"	l
ffff80000010c44d	kernel.asm	/^ffff80000010c44d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c451	kernel.asm	/^ffff80000010c451:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c454	kernel.asm	/^ffff80000010c454:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c45a	kernel.asm	/^ffff80000010c45a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c45e	kernel.asm	/^ffff80000010c45e:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010c461	kernel.asm	/^ffff80000010c461:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010c464	kernel.asm	/^ffff80000010c464:	3d ff 0f 00 00       	cmp    $0xfff,%eax$/;"	l
ffff80000010c469	kernel.asm	/^ffff80000010c469:	77 0b                	ja     ffff80000010c476 <loaduvm+0xbb>$/;"	l
ffff80000010c46b	kernel.asm	/^ffff80000010c46b:	8b 45 c0             	mov    -0x40(%rbp),%eax$/;"	l
ffff80000010c46e	kernel.asm	/^ffff80000010c46e:	2b 45 fc             	sub    -0x4(%rbp),%eax$/;"	l
ffff80000010c471	kernel.asm	/^ffff80000010c471:	89 45 f8             	mov    %eax,-0x8(%rbp)$/;"	l
ffff80000010c474	kernel.asm	/^ffff80000010c474:	eb 07                	jmp    ffff80000010c47d <loaduvm+0xc2>$/;"	l
ffff80000010c476	kernel.asm	/^ffff80000010c476:	c7 45 f8 00 10 00 00 	movl   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c47d	kernel.asm	/^ffff80000010c47d:	8b 55 c4             	mov    -0x3c(%rbp),%edx$/;"	l
ffff80000010c480	kernel.asm	/^ffff80000010c480:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c483	kernel.asm	/^ffff80000010c483:	8d 34 02             	lea    (%rdx,%rax,1),%esi$/;"	l
ffff80000010c486	kernel.asm	/^ffff80000010c486:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010c48d	kernel.asm	/^ffff80000010c48d:	80 ff ff $/;"	l
ffff80000010c490	kernel.asm	/^ffff80000010c490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c494	kernel.asm	/^ffff80000010c494:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c497	kernel.asm	/^ffff80000010c497:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c49a	kernel.asm	/^ffff80000010c49a:	8b 55 f8             	mov    -0x8(%rbp),%edx$/;"	l
ffff80000010c49d	kernel.asm	/^ffff80000010c49d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c4a1	kernel.asm	/^ffff80000010c4a1:	89 d1                	mov    %edx,%ecx$/;"	l
ffff80000010c4a3	kernel.asm	/^ffff80000010c4a3:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010c4a5	kernel.asm	/^ffff80000010c4a5:	48 89 fe             	mov    %rdi,%rsi$/;"	l
ffff80000010c4a8	kernel.asm	/^ffff80000010c4a8:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c4ab	kernel.asm	/^ffff80000010c4ab:	48 b8 03 32 10 00 00 	movabs $0xffff800000103203,%rax$/;"	l
ffff80000010c4b2	kernel.asm	/^ffff80000010c4b2:	80 ff ff $/;"	l
ffff80000010c4b5	kernel.asm	/^ffff80000010c4b5:	ff d0                	callq  *%rax$/;"	l
ffff80000010c4b7	kernel.asm	/^ffff80000010c4b7:	3b 45 f8             	cmp    -0x8(%rbp),%eax$/;"	l
ffff80000010c4ba	kernel.asm	/^ffff80000010c4ba:	74 07                	je     ffff80000010c4c3 <loaduvm+0x108>$/;"	l
ffff80000010c4bc	kernel.asm	/^ffff80000010c4bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010c4c1	kernel.asm	/^ffff80000010c4c1:	eb 18                	jmp    ffff80000010c4db <loaduvm+0x120>$/;"	l
ffff80000010c4c3	kernel.asm	/^ffff80000010c4c3:	81 45 fc 00 10 00 00 	addl   $0x1000,-0x4(%rbp)$/;"	l
ffff80000010c4ca	kernel.asm	/^ffff80000010c4ca:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c4cd	kernel.asm	/^ffff80000010c4cd:	3b 45 c0             	cmp    -0x40(%rbp),%eax$/;"	l
ffff80000010c4d0	kernel.asm	/^ffff80000010c4d0:	0f 82 30 ff ff ff    	jb     ffff80000010c406 <loaduvm+0x4b>$/;"	l
ffff80000010c4d6	kernel.asm	/^ffff80000010c4d6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c4db	kernel.asm	/^ffff80000010c4db:	c9                   	leaveq $/;"	l
ffff80000010c4dc	kernel.asm	/^ffff80000010c4dc:	c3                   	retq   $/;"	l
ffff80000010c4dd	kernel.asm	/^ffff80000010c4dd <allocuvm>:$/;"	l
ffff80000010c4dd	kernel.asm	/^ffff80000010c4dd:	55                   	push   %rbp$/;"	l
ffff80000010c4de	kernel.asm	/^ffff80000010c4de:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c4e1	kernel.asm	/^ffff80000010c4e1:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010c4e5	kernel.asm	/^ffff80000010c4e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c4e9	kernel.asm	/^ffff80000010c4e9:	89 75 e4             	mov    %esi,-0x1c(%rbp)$/;"	l
ffff80000010c4ec	kernel.asm	/^ffff80000010c4ec:	89 55 e0             	mov    %edx,-0x20(%rbp)$/;"	l
ffff80000010c4ef	kernel.asm	/^ffff80000010c4ef:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c4f2	kernel.asm	/^ffff80000010c4f2:	3b 45 e4             	cmp    -0x1c(%rbp),%eax$/;"	l
ffff80000010c4f5	kernel.asm	/^ffff80000010c4f5:	73 08                	jae    ffff80000010c4ff <allocuvm+0x22>$/;"	l
ffff80000010c4f7	kernel.asm	/^ffff80000010c4f7:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010c4fa	kernel.asm	/^ffff80000010c4fa:	e9 30 01 00 00       	jmpq   ffff80000010c62f <allocuvm+0x152>$/;"	l
ffff80000010c4ff	kernel.asm	/^ffff80000010c4ff:	8b 45 e4             	mov    -0x1c(%rbp),%eax$/;"	l
ffff80000010c502	kernel.asm	/^ffff80000010c502:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010c508	kernel.asm	/^ffff80000010c508:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c50e	kernel.asm	/^ffff80000010c50e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c512	kernel.asm	/^ffff80000010c512:	e9 08 01 00 00       	jmpq   ffff80000010c61f <allocuvm+0x142>$/;"	l
ffff80000010c517	kernel.asm	/^ffff80000010c517:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010c51e	kernel.asm	/^ffff80000010c51e:	80 ff ff $/;"	l
ffff80000010c521	kernel.asm	/^ffff80000010c521:	ff d0                	callq  *%rax$/;"	l
ffff80000010c523	kernel.asm	/^ffff80000010c523:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c527	kernel.asm	/^ffff80000010c527:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c52c	kernel.asm	/^ffff80000010c52c:	75 41                	jne    ffff80000010c56f <allocuvm+0x92>$/;"	l
ffff80000010c52e	kernel.asm	/^ffff80000010c52e:	48 bf d9 d3 10 00 00 	movabs $0xffff80000010d3d9,%rdi$/;"	l
ffff80000010c535	kernel.asm	/^ffff80000010c535:	80 ff ff $/;"	l
ffff80000010c538	kernel.asm	/^ffff80000010c538:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c53d	kernel.asm	/^ffff80000010c53d:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff80000010c544	kernel.asm	/^ffff80000010c544:	80 ff ff $/;"	l
ffff80000010c547	kernel.asm	/^ffff80000010c547:	ff d2                	callq  *%rdx$/;"	l
ffff80000010c549	kernel.asm	/^ffff80000010c549:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010c54c	kernel.asm	/^ffff80000010c54c:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010c54f	kernel.asm	/^ffff80000010c54f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c553	kernel.asm	/^ffff80000010c553:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c556	kernel.asm	/^ffff80000010c556:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c559	kernel.asm	/^ffff80000010c559:	48 b8 31 c6 10 00 00 	movabs $0xffff80000010c631,%rax$/;"	l
ffff80000010c560	kernel.asm	/^ffff80000010c560:	80 ff ff $/;"	l
ffff80000010c563	kernel.asm	/^ffff80000010c563:	ff d0                	callq  *%rax$/;"	l
ffff80000010c565	kernel.asm	/^ffff80000010c565:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c56a	kernel.asm	/^ffff80000010c56a:	e9 c0 00 00 00       	jmpq   ffff80000010c62f <allocuvm+0x152>$/;"	l
ffff80000010c56f	kernel.asm	/^ffff80000010c56f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c573	kernel.asm	/^ffff80000010c573:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c578	kernel.asm	/^ffff80000010c578:	be 00 00 00 00       	mov    $0x0,%esi$/;"	l
ffff80000010c57d	kernel.asm	/^ffff80000010c57d:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c580	kernel.asm	/^ffff80000010c580:	48 b8 68 78 10 00 00 	movabs $0xffff800000107868,%rax$/;"	l
ffff80000010c587	kernel.asm	/^ffff80000010c587:	80 ff ff $/;"	l
ffff80000010c58a	kernel.asm	/^ffff80000010c58a:	ff d0                	callq  *%rax$/;"	l
ffff80000010c58c	kernel.asm	/^ffff80000010c58c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx$/;"	l
ffff80000010c590	kernel.asm	/^ffff80000010c590:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010c597	kernel.asm	/^ffff80000010c597:	80 00 00 $/;"	l
ffff80000010c59a	kernel.asm	/^ffff80000010c59a:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010c59d	kernel.asm	/^ffff80000010c59d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010c5a1	kernel.asm	/^ffff80000010c5a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c5a5	kernel.asm	/^ffff80000010c5a5:	41 b8 06 00 00 00    	mov    $0x6,%r8d$/;"	l
ffff80000010c5ab	kernel.asm	/^ffff80000010c5ab:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010c5ae	kernel.asm	/^ffff80000010c5ae:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010c5b3	kernel.asm	/^ffff80000010c5b3:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c5b6	kernel.asm	/^ffff80000010c5b6:	48 b8 2e c2 10 00 00 	movabs $0xffff80000010c22e,%rax$/;"	l
ffff80000010c5bd	kernel.asm	/^ffff80000010c5bd:	80 ff ff $/;"	l
ffff80000010c5c0	kernel.asm	/^ffff80000010c5c0:	ff d0                	callq  *%rax$/;"	l
ffff80000010c5c2	kernel.asm	/^ffff80000010c5c2:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010c5c4	kernel.asm	/^ffff80000010c5c4:	79 51                	jns    ffff80000010c617 <allocuvm+0x13a>$/;"	l
ffff80000010c5c6	kernel.asm	/^ffff80000010c5c6:	48 bf f1 d3 10 00 00 	movabs $0xffff80000010d3f1,%rdi$/;"	l
ffff80000010c5cd	kernel.asm	/^ffff80000010c5cd:	80 ff ff $/;"	l
ffff80000010c5d0	kernel.asm	/^ffff80000010c5d0:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c5d5	kernel.asm	/^ffff80000010c5d5:	48 ba b6 07 10 00 00 	movabs $0xffff8000001007b6,%rdx$/;"	l
ffff80000010c5dc	kernel.asm	/^ffff80000010c5dc:	80 ff ff $/;"	l
ffff80000010c5df	kernel.asm	/^ffff80000010c5df:	ff d2                	callq  *%rdx$/;"	l
ffff80000010c5e1	kernel.asm	/^ffff80000010c5e1:	8b 55 e4             	mov    -0x1c(%rbp),%edx$/;"	l
ffff80000010c5e4	kernel.asm	/^ffff80000010c5e4:	8b 4d e0             	mov    -0x20(%rbp),%ecx$/;"	l
ffff80000010c5e7	kernel.asm	/^ffff80000010c5e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c5eb	kernel.asm	/^ffff80000010c5eb:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c5ee	kernel.asm	/^ffff80000010c5ee:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c5f1	kernel.asm	/^ffff80000010c5f1:	48 b8 31 c6 10 00 00 	movabs $0xffff80000010c631,%rax$/;"	l
ffff80000010c5f8	kernel.asm	/^ffff80000010c5f8:	80 ff ff $/;"	l
ffff80000010c5fb	kernel.asm	/^ffff80000010c5fb:	ff d0                	callq  *%rax$/;"	l
ffff80000010c5fd	kernel.asm	/^ffff80000010c5fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c601	kernel.asm	/^ffff80000010c601:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c604	kernel.asm	/^ffff80000010c604:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c60b	kernel.asm	/^ffff80000010c60b:	80 ff ff $/;"	l
ffff80000010c60e	kernel.asm	/^ffff80000010c60e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c610	kernel.asm	/^ffff80000010c610:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c615	kernel.asm	/^ffff80000010c615:	eb 18                	jmp    ffff80000010c62f <allocuvm+0x152>$/;"	l
ffff80000010c617	kernel.asm	/^ffff80000010c617:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c61e	kernel.asm	/^ffff80000010c61e:	00 $/;"	l
ffff80000010c61f	kernel.asm	/^ffff80000010c61f:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c622	kernel.asm	/^ffff80000010c622:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010c626	kernel.asm	/^ffff80000010c626:	0f 87 eb fe ff ff    	ja     ffff80000010c517 <allocuvm+0x3a>$/;"	l
ffff80000010c62c	kernel.asm	/^ffff80000010c62c:	8b 45 e0             	mov    -0x20(%rbp),%eax$/;"	l
ffff80000010c62f	kernel.asm	/^ffff80000010c62f:	c9                   	leaveq $/;"	l
ffff80000010c630	kernel.asm	/^ffff80000010c630:	c3                   	retq   $/;"	l
ffff80000010c631	kernel.asm	/^ffff80000010c631 <deallocuvm>:$/;"	l
ffff80000010c631	kernel.asm	/^ffff80000010c631:	55                   	push   %rbp$/;"	l
ffff80000010c632	kernel.asm	/^ffff80000010c632:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c635	kernel.asm	/^ffff80000010c635:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c639	kernel.asm	/^ffff80000010c639:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010c63d	kernel.asm	/^ffff80000010c63d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)$/;"	l
ffff80000010c641	kernel.asm	/^ffff80000010c641:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010c645	kernel.asm	/^ffff80000010c645:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c649	kernel.asm	/^ffff80000010c649:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010c64d	kernel.asm	/^ffff80000010c64d:	72 09                	jb     ffff80000010c658 <deallocuvm+0x27>$/;"	l
ffff80000010c64f	kernel.asm	/^ffff80000010c64f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010c653	kernel.asm	/^ffff80000010c653:	e9 cd 00 00 00       	jmpq   ffff80000010c725 <deallocuvm+0xf4>$/;"	l
ffff80000010c658	kernel.asm	/^ffff80000010c658:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c65c	kernel.asm	/^ffff80000010c65c:	48 05 ff 0f 00 00    	add    $0xfff,%rax$/;"	l
ffff80000010c662	kernel.asm	/^ffff80000010c662:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c668	kernel.asm	/^ffff80000010c668:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c66c	kernel.asm	/^ffff80000010c66c:	e9 a2 00 00 00       	jmpq   ffff80000010c713 <deallocuvm+0xe2>$/;"	l
ffff80000010c671	kernel.asm	/^ffff80000010c671:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c675	kernel.asm	/^ffff80000010c675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c679	kernel.asm	/^ffff80000010c679:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c67e	kernel.asm	/^ffff80000010c67e:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c681	kernel.asm	/^ffff80000010c681:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c684	kernel.asm	/^ffff80000010c684:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010c68b	kernel.asm	/^ffff80000010c68b:	80 ff ff $/;"	l
ffff80000010c68e	kernel.asm	/^ffff80000010c68e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c690	kernel.asm	/^ffff80000010c690:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c694	kernel.asm	/^ffff80000010c694:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c699	kernel.asm	/^ffff80000010c699:	74 70                	je     ffff80000010c70b <deallocuvm+0xda>$/;"	l
ffff80000010c69b	kernel.asm	/^ffff80000010c69b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c69f	kernel.asm	/^ffff80000010c69f:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c6a2	kernel.asm	/^ffff80000010c6a2:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c6a5	kernel.asm	/^ffff80000010c6a5:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c6a8	kernel.asm	/^ffff80000010c6a8:	74 61                	je     ffff80000010c70b <deallocuvm+0xda>$/;"	l
ffff80000010c6aa	kernel.asm	/^ffff80000010c6aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c6ae	kernel.asm	/^ffff80000010c6ae:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c6b1	kernel.asm	/^ffff80000010c6b1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c6b7	kernel.asm	/^ffff80000010c6b7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c6bb	kernel.asm	/^ffff80000010c6bb:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c6c0	kernel.asm	/^ffff80000010c6c0:	75 16                	jne    ffff80000010c6d8 <deallocuvm+0xa7>$/;"	l
ffff80000010c6c2	kernel.asm	/^ffff80000010c6c2:	48 bf 0d d4 10 00 00 	movabs $0xffff80000010d40d,%rdi$/;"	l
ffff80000010c6c9	kernel.asm	/^ffff80000010c6c9:	80 ff ff $/;"	l
ffff80000010c6cc	kernel.asm	/^ffff80000010c6cc:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c6d3	kernel.asm	/^ffff80000010c6d3:	80 ff ff $/;"	l
ffff80000010c6d6	kernel.asm	/^ffff80000010c6d6:	ff d0                	callq  *%rax$/;"	l
ffff80000010c6d8	kernel.asm	/^ffff80000010c6d8:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010c6df	kernel.asm	/^ffff80000010c6df:	80 ff ff $/;"	l
ffff80000010c6e2	kernel.asm	/^ffff80000010c6e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c6e6	kernel.asm	/^ffff80000010c6e6:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c6e9	kernel.asm	/^ffff80000010c6e9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c6ed	kernel.asm	/^ffff80000010c6ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c6f1	kernel.asm	/^ffff80000010c6f1:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c6f4	kernel.asm	/^ffff80000010c6f4:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c6fb	kernel.asm	/^ffff80000010c6fb:	80 ff ff $/;"	l
ffff80000010c6fe	kernel.asm	/^ffff80000010c6fe:	ff d0                	callq  *%rax$/;"	l
ffff80000010c700	kernel.asm	/^ffff80000010c700:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010c704	kernel.asm	/^ffff80000010c704:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)$/;"	l
ffff80000010c70b	kernel.asm	/^ffff80000010c70b:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010c712	kernel.asm	/^ffff80000010c712:	00 $/;"	l
ffff80000010c713	kernel.asm	/^ffff80000010c713:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c717	kernel.asm	/^ffff80000010c717:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax$/;"	l
ffff80000010c71b	kernel.asm	/^ffff80000010c71b:	0f 82 50 ff ff ff    	jb     ffff80000010c671 <deallocuvm+0x40>$/;"	l
ffff80000010c721	kernel.asm	/^ffff80000010c721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c725	kernel.asm	/^ffff80000010c725:	c9                   	leaveq $/;"	l
ffff80000010c726	kernel.asm	/^ffff80000010c726:	c3                   	retq   $/;"	l
ffff80000010c727	kernel.asm	/^ffff80000010c727 <freevm>:$/;"	l
ffff80000010c727	kernel.asm	/^ffff80000010c727:	55                   	push   %rbp$/;"	l
ffff80000010c728	kernel.asm	/^ffff80000010c728:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c72b	kernel.asm	/^ffff80000010c72b:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c72f	kernel.asm	/^ffff80000010c72f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010c733	kernel.asm	/^ffff80000010c733:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)$/;"	l
ffff80000010c738	kernel.asm	/^ffff80000010c738:	75 16                	jne    ffff80000010c750 <freevm+0x29>$/;"	l
ffff80000010c73a	kernel.asm	/^ffff80000010c73a:	48 bf 13 d4 10 00 00 	movabs $0xffff80000010d413,%rdi$/;"	l
ffff80000010c741	kernel.asm	/^ffff80000010c741:	80 ff ff $/;"	l
ffff80000010c744	kernel.asm	/^ffff80000010c744:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c74b	kernel.asm	/^ffff80000010c74b:	80 ff ff $/;"	l
ffff80000010c74e	kernel.asm	/^ffff80000010c74e:	ff d0                	callq  *%rax$/;"	l
ffff80000010c750	kernel.asm	/^ffff80000010c750:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c754	kernel.asm	/^ffff80000010c754:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c759	kernel.asm	/^ffff80000010c759:	be 00 00 a0 3f       	mov    $0x3fa00000,%esi$/;"	l
ffff80000010c75e	kernel.asm	/^ffff80000010c75e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c761	kernel.asm	/^ffff80000010c761:	48 b8 31 c6 10 00 00 	movabs $0xffff80000010c631,%rax$/;"	l
ffff80000010c768	kernel.asm	/^ffff80000010c768:	80 ff ff $/;"	l
ffff80000010c76b	kernel.asm	/^ffff80000010c76b:	ff d0                	callq  *%rax$/;"	l
ffff80000010c76d	kernel.asm	/^ffff80000010c76d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)$/;"	l
ffff80000010c774	kernel.asm	/^ffff80000010c774:	e9 5c 01 00 00       	jmpq   ffff80000010c8d5 <freevm+0x1ae>$/;"	l
ffff80000010c779	kernel.asm	/^ffff80000010c779:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c77c	kernel.asm	/^ffff80000010c77c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c783	kernel.asm	/^ffff80000010c783:	00 $/;"	l
ffff80000010c784	kernel.asm	/^ffff80000010c784:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c788	kernel.asm	/^ffff80000010c788:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c78b	kernel.asm	/^ffff80000010c78b:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c78e	kernel.asm	/^ffff80000010c78e:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c791	kernel.asm	/^ffff80000010c791:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c794	kernel.asm	/^ffff80000010c794:	0f 84 37 01 00 00    	je     ffff80000010c8d1 <freevm+0x1aa>$/;"	l
ffff80000010c79a	kernel.asm	/^ffff80000010c79a:	8b 45 fc             	mov    -0x4(%rbp),%eax$/;"	l
ffff80000010c79d	kernel.asm	/^ffff80000010c79d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c7a4	kernel.asm	/^ffff80000010c7a4:	00 $/;"	l
ffff80000010c7a5	kernel.asm	/^ffff80000010c7a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c7a9	kernel.asm	/^ffff80000010c7a9:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c7ac	kernel.asm	/^ffff80000010c7ac:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c7af	kernel.asm	/^ffff80000010c7af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c7b5	kernel.asm	/^ffff80000010c7b5:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c7b8	kernel.asm	/^ffff80000010c7b8:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c7bf	kernel.asm	/^ffff80000010c7bf:	80 ff ff $/;"	l
ffff80000010c7c2	kernel.asm	/^ffff80000010c7c2:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c7c5	kernel.asm	/^ffff80000010c7c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c7c9	kernel.asm	/^ffff80000010c7c9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c7d0	kernel.asm	/^ffff80000010c7d0:	e9 dc 00 00 00       	jmpq   ffff80000010c8b1 <freevm+0x18a>$/;"	l
ffff80000010c7d5	kernel.asm	/^ffff80000010c7d5:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010c7d8	kernel.asm	/^ffff80000010c7d8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c7df	kernel.asm	/^ffff80000010c7df:	00 $/;"	l
ffff80000010c7e0	kernel.asm	/^ffff80000010c7e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c7e4	kernel.asm	/^ffff80000010c7e4:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c7e7	kernel.asm	/^ffff80000010c7e7:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c7ea	kernel.asm	/^ffff80000010c7ea:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c7ed	kernel.asm	/^ffff80000010c7ed:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c7f0	kernel.asm	/^ffff80000010c7f0:	0f 84 b7 00 00 00    	je     ffff80000010c8ad <freevm+0x186>$/;"	l
ffff80000010c7f6	kernel.asm	/^ffff80000010c7f6:	8b 45 f8             	mov    -0x8(%rbp),%eax$/;"	l
ffff80000010c7f9	kernel.asm	/^ffff80000010c7f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c800	kernel.asm	/^ffff80000010c800:	00 $/;"	l
ffff80000010c801	kernel.asm	/^ffff80000010c801:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c805	kernel.asm	/^ffff80000010c805:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c808	kernel.asm	/^ffff80000010c808:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c80b	kernel.asm	/^ffff80000010c80b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c811	kernel.asm	/^ffff80000010c811:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c814	kernel.asm	/^ffff80000010c814:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c81b	kernel.asm	/^ffff80000010c81b:	80 ff ff $/;"	l
ffff80000010c81e	kernel.asm	/^ffff80000010c81e:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c821	kernel.asm	/^ffff80000010c821:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010c825	kernel.asm	/^ffff80000010c825:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)$/;"	l
ffff80000010c82c	kernel.asm	/^ffff80000010c82c:	eb 63                	jmp    ffff80000010c891 <freevm+0x16a>$/;"	l
ffff80000010c82e	kernel.asm	/^ffff80000010c82e:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010c831	kernel.asm	/^ffff80000010c831:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c838	kernel.asm	/^ffff80000010c838:	00 $/;"	l
ffff80000010c839	kernel.asm	/^ffff80000010c839:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c83d	kernel.asm	/^ffff80000010c83d:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c840	kernel.asm	/^ffff80000010c840:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c843	kernel.asm	/^ffff80000010c843:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c846	kernel.asm	/^ffff80000010c846:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c849	kernel.asm	/^ffff80000010c849:	74 42                	je     ffff80000010c88d <freevm+0x166>$/;"	l
ffff80000010c84b	kernel.asm	/^ffff80000010c84b:	8b 45 f4             	mov    -0xc(%rbp),%eax$/;"	l
ffff80000010c84e	kernel.asm	/^ffff80000010c84e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx$/;"	l
ffff80000010c855	kernel.asm	/^ffff80000010c855:	00 $/;"	l
ffff80000010c856	kernel.asm	/^ffff80000010c856:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c85a	kernel.asm	/^ffff80000010c85a:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c85d	kernel.asm	/^ffff80000010c85d:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c860	kernel.asm	/^ffff80000010c860:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010c866	kernel.asm	/^ffff80000010c866:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c869	kernel.asm	/^ffff80000010c869:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010c870	kernel.asm	/^ffff80000010c870:	80 ff ff $/;"	l
ffff80000010c873	kernel.asm	/^ffff80000010c873:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010c876	kernel.asm	/^ffff80000010c876:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010c87a	kernel.asm	/^ffff80000010c87a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010c87e	kernel.asm	/^ffff80000010c87e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c881	kernel.asm	/^ffff80000010c881:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c888	kernel.asm	/^ffff80000010c888:	80 ff ff $/;"	l
ffff80000010c88b	kernel.asm	/^ffff80000010c88b:	ff d0                	callq  *%rax$/;"	l
ffff80000010c88d	kernel.asm	/^ffff80000010c88d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)$/;"	l
ffff80000010c891	kernel.asm	/^ffff80000010c891:	81 7d f4 ff 01 00 00 	cmpl   $0x1ff,-0xc(%rbp)$/;"	l
ffff80000010c898	kernel.asm	/^ffff80000010c898:	76 94                	jbe    ffff80000010c82e <freevm+0x107>$/;"	l
ffff80000010c89a	kernel.asm	/^ffff80000010c89a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010c89e	kernel.asm	/^ffff80000010c89e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c8a1	kernel.asm	/^ffff80000010c8a1:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c8a8	kernel.asm	/^ffff80000010c8a8:	80 ff ff $/;"	l
ffff80000010c8ab	kernel.asm	/^ffff80000010c8ab:	ff d0                	callq  *%rax$/;"	l
ffff80000010c8ad	kernel.asm	/^ffff80000010c8ad:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)$/;"	l
ffff80000010c8b1	kernel.asm	/^ffff80000010c8b1:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%rbp)$/;"	l
ffff80000010c8b8	kernel.asm	/^ffff80000010c8b8:	0f 86 17 ff ff ff    	jbe    ffff80000010c7d5 <freevm+0xae>$/;"	l
ffff80000010c8be	kernel.asm	/^ffff80000010c8be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c8c2	kernel.asm	/^ffff80000010c8c2:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c8c5	kernel.asm	/^ffff80000010c8c5:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c8cc	kernel.asm	/^ffff80000010c8cc:	80 ff ff $/;"	l
ffff80000010c8cf	kernel.asm	/^ffff80000010c8cf:	ff d0                	callq  *%rax$/;"	l
ffff80000010c8d1	kernel.asm	/^ffff80000010c8d1:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)$/;"	l
ffff80000010c8d5	kernel.asm	/^ffff80000010c8d5:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%rbp)$/;"	l
ffff80000010c8dc	kernel.asm	/^ffff80000010c8dc:	0f 86 97 fe ff ff    	jbe    ffff80000010c779 <freevm+0x52>$/;"	l
ffff80000010c8e2	kernel.asm	/^ffff80000010c8e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c8e6	kernel.asm	/^ffff80000010c8e6:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c8e9	kernel.asm	/^ffff80000010c8e9:	48 b8 3e 42 10 00 00 	movabs $0xffff80000010423e,%rax$/;"	l
ffff80000010c8f0	kernel.asm	/^ffff80000010c8f0:	80 ff ff $/;"	l
ffff80000010c8f3	kernel.asm	/^ffff80000010c8f3:	ff d0                	callq  *%rax$/;"	l
ffff80000010c8f5	kernel.asm	/^ffff80000010c8f5:	90                   	nop$/;"	l
ffff80000010c8f6	kernel.asm	/^ffff80000010c8f6:	c9                   	leaveq $/;"	l
ffff80000010c8f7	kernel.asm	/^ffff80000010c8f7:	c3                   	retq   $/;"	l
ffff80000010c8f8	kernel.asm	/^ffff80000010c8f8 <clearpteu>:$/;"	l
ffff80000010c8f8	kernel.asm	/^ffff80000010c8f8:	55                   	push   %rbp$/;"	l
ffff80000010c8f9	kernel.asm	/^ffff80000010c8f9:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c8fc	kernel.asm	/^ffff80000010c8fc:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010c900	kernel.asm	/^ffff80000010c900:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010c904	kernel.asm	/^ffff80000010c904:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010c908	kernel.asm	/^ffff80000010c908:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010c90c	kernel.asm	/^ffff80000010c90c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c910	kernel.asm	/^ffff80000010c910:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c915	kernel.asm	/^ffff80000010c915:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c918	kernel.asm	/^ffff80000010c918:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c91b	kernel.asm	/^ffff80000010c91b:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010c922	kernel.asm	/^ffff80000010c922:	80 ff ff $/;"	l
ffff80000010c925	kernel.asm	/^ffff80000010c925:	ff d0                	callq  *%rax$/;"	l
ffff80000010c927	kernel.asm	/^ffff80000010c927:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010c92b	kernel.asm	/^ffff80000010c92b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c930	kernel.asm	/^ffff80000010c930:	75 16                	jne    ffff80000010c948 <clearpteu+0x50>$/;"	l
ffff80000010c932	kernel.asm	/^ffff80000010c932:	48 bf 24 d4 10 00 00 	movabs $0xffff80000010d424,%rdi$/;"	l
ffff80000010c939	kernel.asm	/^ffff80000010c939:	80 ff ff $/;"	l
ffff80000010c93c	kernel.asm	/^ffff80000010c93c:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c943	kernel.asm	/^ffff80000010c943:	80 ff ff $/;"	l
ffff80000010c946	kernel.asm	/^ffff80000010c946:	ff d0                	callq  *%rax$/;"	l
ffff80000010c948	kernel.asm	/^ffff80000010c948:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c94c	kernel.asm	/^ffff80000010c94c:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c94f	kernel.asm	/^ffff80000010c94f:	48 83 e0 fb          	and    $0xfffffffffffffffb,%rax$/;"	l
ffff80000010c953	kernel.asm	/^ffff80000010c953:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010c956	kernel.asm	/^ffff80000010c956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010c95a	kernel.asm	/^ffff80000010c95a:	48 89 10             	mov    %rdx,(%rax)$/;"	l
ffff80000010c95d	kernel.asm	/^ffff80000010c95d:	90                   	nop$/;"	l
ffff80000010c95e	kernel.asm	/^ffff80000010c95e:	c9                   	leaveq $/;"	l
ffff80000010c95f	kernel.asm	/^ffff80000010c95f:	c3                   	retq   $/;"	l
ffff80000010c960	kernel.asm	/^ffff80000010c960 <copyuvm>:$/;"	l
ffff80000010c960	kernel.asm	/^ffff80000010c960:	55                   	push   %rbp$/;"	l
ffff80000010c961	kernel.asm	/^ffff80000010c961:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010c964	kernel.asm	/^ffff80000010c964:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010c968	kernel.asm	/^ffff80000010c968:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)$/;"	l
ffff80000010c96c	kernel.asm	/^ffff80000010c96c:	89 75 c4             	mov    %esi,-0x3c(%rbp)$/;"	l
ffff80000010c96f	kernel.asm	/^ffff80000010c96f:	48 b8 85 bd 10 00 00 	movabs $0xffff80000010bd85,%rax$/;"	l
ffff80000010c976	kernel.asm	/^ffff80000010c976:	80 ff ff $/;"	l
ffff80000010c979	kernel.asm	/^ffff80000010c979:	ff d0                	callq  *%rax$/;"	l
ffff80000010c97b	kernel.asm	/^ffff80000010c97b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010c97f	kernel.asm	/^ffff80000010c97f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)$/;"	l
ffff80000010c984	kernel.asm	/^ffff80000010c984:	75 0a                	jne    ffff80000010c990 <copyuvm+0x30>$/;"	l
ffff80000010c986	kernel.asm	/^ffff80000010c986:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010c98b	kernel.asm	/^ffff80000010c98b:	e9 51 01 00 00       	jmpq   ffff80000010cae1 <copyuvm+0x181>$/;"	l
ffff80000010c990	kernel.asm	/^ffff80000010c990:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)$/;"	l
ffff80000010c997	kernel.asm	/^ffff80000010c997:	00 $/;"	l
ffff80000010c998	kernel.asm	/^ffff80000010c998:	e9 15 01 00 00       	jmpq   ffff80000010cab2 <copyuvm+0x152>$/;"	l
ffff80000010c99d	kernel.asm	/^ffff80000010c99d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx$/;"	l
ffff80000010c9a1	kernel.asm	/^ffff80000010c9a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010c9a5	kernel.asm	/^ffff80000010c9a5:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010c9aa	kernel.asm	/^ffff80000010c9aa:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010c9ad	kernel.asm	/^ffff80000010c9ad:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010c9b0	kernel.asm	/^ffff80000010c9b0:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010c9b7	kernel.asm	/^ffff80000010c9b7:	80 ff ff $/;"	l
ffff80000010c9ba	kernel.asm	/^ffff80000010c9ba:	ff d0                	callq  *%rax$/;"	l
ffff80000010c9bc	kernel.asm	/^ffff80000010c9bc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010c9c0	kernel.asm	/^ffff80000010c9c0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)$/;"	l
ffff80000010c9c5	kernel.asm	/^ffff80000010c9c5:	75 16                	jne    ffff80000010c9dd <copyuvm+0x7d>$/;"	l
ffff80000010c9c7	kernel.asm	/^ffff80000010c9c7:	48 bf 2e d4 10 00 00 	movabs $0xffff80000010d42e,%rdi$/;"	l
ffff80000010c9ce	kernel.asm	/^ffff80000010c9ce:	80 ff ff $/;"	l
ffff80000010c9d1	kernel.asm	/^ffff80000010c9d1:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c9d8	kernel.asm	/^ffff80000010c9d8:	80 ff ff $/;"	l
ffff80000010c9db	kernel.asm	/^ffff80000010c9db:	ff d0                	callq  *%rax$/;"	l
ffff80000010c9dd	kernel.asm	/^ffff80000010c9dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010c9e1	kernel.asm	/^ffff80000010c9e1:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010c9e4	kernel.asm	/^ffff80000010c9e4:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010c9e7	kernel.asm	/^ffff80000010c9e7:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010c9ea	kernel.asm	/^ffff80000010c9ea:	75 16                	jne    ffff80000010ca02 <copyuvm+0xa2>$/;"	l
ffff80000010c9ec	kernel.asm	/^ffff80000010c9ec:	48 bf 48 d4 10 00 00 	movabs $0xffff80000010d448,%rdi$/;"	l
ffff80000010c9f3	kernel.asm	/^ffff80000010c9f3:	80 ff ff $/;"	l
ffff80000010c9f6	kernel.asm	/^ffff80000010c9f6:	48 b8 8f 0b 10 00 00 	movabs $0xffff800000100b8f,%rax$/;"	l
ffff80000010c9fd	kernel.asm	/^ffff80000010c9fd:	80 ff ff $/;"	l
ffff80000010ca00	kernel.asm	/^ffff80000010ca00:	ff d0                	callq  *%rax$/;"	l
ffff80000010ca02	kernel.asm	/^ffff80000010ca02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ca06	kernel.asm	/^ffff80000010ca06:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ca09	kernel.asm	/^ffff80000010ca09:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010ca0f	kernel.asm	/^ffff80000010ca0f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010ca13	kernel.asm	/^ffff80000010ca13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010ca17	kernel.asm	/^ffff80000010ca17:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010ca1a	kernel.asm	/^ffff80000010ca1a:	25 ff 0f 00 00       	and    $0xfff,%eax$/;"	l
ffff80000010ca1f	kernel.asm	/^ffff80000010ca1f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)$/;"	l
ffff80000010ca23	kernel.asm	/^ffff80000010ca23:	48 b8 34 43 10 00 00 	movabs $0xffff800000104334,%rax$/;"	l
ffff80000010ca2a	kernel.asm	/^ffff80000010ca2a:	80 ff ff $/;"	l
ffff80000010ca2d	kernel.asm	/^ffff80000010ca2d:	ff d0                	callq  *%rax$/;"	l
ffff80000010ca2f	kernel.asm	/^ffff80000010ca2f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)$/;"	l
ffff80000010ca33	kernel.asm	/^ffff80000010ca33:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)$/;"	l
ffff80000010ca38	kernel.asm	/^ffff80000010ca38:	0f 84 87 00 00 00    	je     ffff80000010cac5 <copyuvm+0x165>$/;"	l
ffff80000010ca3e	kernel.asm	/^ffff80000010ca3e:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx$/;"	l
ffff80000010ca45	kernel.asm	/^ffff80000010ca45:	80 ff ff $/;"	l
ffff80000010ca48	kernel.asm	/^ffff80000010ca48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010ca4c	kernel.asm	/^ffff80000010ca4c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010ca4f	kernel.asm	/^ffff80000010ca4f:	48 89 c1             	mov    %rax,%rcx$/;"	l
ffff80000010ca52	kernel.asm	/^ffff80000010ca52:	48 8b 45 d0          	mov    -0x30(%rbp),%rax$/;"	l
ffff80000010ca56	kernel.asm	/^ffff80000010ca56:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010ca5b	kernel.asm	/^ffff80000010ca5b:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010ca5e	kernel.asm	/^ffff80000010ca5e:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ca61	kernel.asm	/^ffff80000010ca61:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff80000010ca68	kernel.asm	/^ffff80000010ca68:	80 ff ff $/;"	l
ffff80000010ca6b	kernel.asm	/^ffff80000010ca6b:	ff d0                	callq  *%rax$/;"	l
ffff80000010ca6d	kernel.asm	/^ffff80000010ca6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010ca71	kernel.asm	/^ffff80000010ca71:	89 c1                	mov    %eax,%ecx$/;"	l
ffff80000010ca73	kernel.asm	/^ffff80000010ca73:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx$/;"	l
ffff80000010ca77	kernel.asm	/^ffff80000010ca77:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax$/;"	l
ffff80000010ca7e	kernel.asm	/^ffff80000010ca7e:	80 00 00 $/;"	l
ffff80000010ca81	kernel.asm	/^ffff80000010ca81:	48 01 c2             	add    %rax,%rdx$/;"	l
ffff80000010ca84	kernel.asm	/^ffff80000010ca84:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi$/;"	l
ffff80000010ca88	kernel.asm	/^ffff80000010ca88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010ca8c	kernel.asm	/^ffff80000010ca8c:	41 89 c8             	mov    %ecx,%r8d$/;"	l
ffff80000010ca8f	kernel.asm	/^ffff80000010ca8f:	48 89 d1             	mov    %rdx,%rcx$/;"	l
ffff80000010ca92	kernel.asm	/^ffff80000010ca92:	ba 00 10 00 00       	mov    $0x1000,%edx$/;"	l
ffff80000010ca97	kernel.asm	/^ffff80000010ca97:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010ca9a	kernel.asm	/^ffff80000010ca9a:	48 b8 2e c2 10 00 00 	movabs $0xffff80000010c22e,%rax$/;"	l
ffff80000010caa1	kernel.asm	/^ffff80000010caa1:	80 ff ff $/;"	l
ffff80000010caa4	kernel.asm	/^ffff80000010caa4:	ff d0                	callq  *%rax$/;"	l
ffff80000010caa6	kernel.asm	/^ffff80000010caa6:	85 c0                	test   %eax,%eax$/;"	l
ffff80000010caa8	kernel.asm	/^ffff80000010caa8:	78 1e                	js     ffff80000010cac8 <copyuvm+0x168>$/;"	l
ffff80000010caaa	kernel.asm	/^ffff80000010caaa:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)$/;"	l
ffff80000010cab1	kernel.asm	/^ffff80000010cab1:	00 $/;"	l
ffff80000010cab2	kernel.asm	/^ffff80000010cab2:	8b 45 c4             	mov    -0x3c(%rbp),%eax$/;"	l
ffff80000010cab5	kernel.asm	/^ffff80000010cab5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax$/;"	l
ffff80000010cab9	kernel.asm	/^ffff80000010cab9:	0f 87 de fe ff ff    	ja     ffff80000010c99d <copyuvm+0x3d>$/;"	l
ffff80000010cabf	kernel.asm	/^ffff80000010cabf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010cac3	kernel.asm	/^ffff80000010cac3:	eb 1c                	jmp    ffff80000010cae1 <copyuvm+0x181>$/;"	l
ffff80000010cac5	kernel.asm	/^ffff80000010cac5:	90                   	nop$/;"	l
ffff80000010cac6	kernel.asm	/^ffff80000010cac6:	eb 01                	jmp    ffff80000010cac9 <copyuvm+0x169>$/;"	l
ffff80000010cac8	kernel.asm	/^ffff80000010cac8:	90                   	nop$/;"	l
ffff80000010cac9	kernel.asm	/^ffff80000010cac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010cacd	kernel.asm	/^ffff80000010cacd:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010cad0	kernel.asm	/^ffff80000010cad0:	48 b8 27 c7 10 00 00 	movabs $0xffff80000010c727,%rax$/;"	l
ffff80000010cad7	kernel.asm	/^ffff80000010cad7:	80 ff ff $/;"	l
ffff80000010cada	kernel.asm	/^ffff80000010cada:	ff d0                	callq  *%rax$/;"	l
ffff80000010cadc	kernel.asm	/^ffff80000010cadc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010cae1	kernel.asm	/^ffff80000010cae1:	c9                   	leaveq $/;"	l
ffff80000010cae2	kernel.asm	/^ffff80000010cae2:	c3                   	retq   $/;"	l
ffff80000010cae3	kernel.asm	/^ffff80000010cae3 <uva2ka>:$/;"	l
ffff80000010cae3	kernel.asm	/^ffff80000010cae3:	55                   	push   %rbp$/;"	l
ffff80000010cae4	kernel.asm	/^ffff80000010cae4:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010cae7	kernel.asm	/^ffff80000010cae7:	48 83 ec 20          	sub    $0x20,%rsp$/;"	l
ffff80000010caeb	kernel.asm	/^ffff80000010caeb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)$/;"	l
ffff80000010caef	kernel.asm	/^ffff80000010caef:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)$/;"	l
ffff80000010caf3	kernel.asm	/^ffff80000010caf3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx$/;"	l
ffff80000010caf7	kernel.asm	/^ffff80000010caf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010cafb	kernel.asm	/^ffff80000010cafb:	ba 00 00 00 00       	mov    $0x0,%edx$/;"	l
ffff80000010cb00	kernel.asm	/^ffff80000010cb00:	48 89 ce             	mov    %rcx,%rsi$/;"	l
ffff80000010cb03	kernel.asm	/^ffff80000010cb03:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010cb06	kernel.asm	/^ffff80000010cb06:	48 b8 e1 bf 10 00 00 	movabs $0xffff80000010bfe1,%rax$/;"	l
ffff80000010cb0d	kernel.asm	/^ffff80000010cb0d:	80 ff ff $/;"	l
ffff80000010cb10	kernel.asm	/^ffff80000010cb10:	ff d0                	callq  *%rax$/;"	l
ffff80000010cb12	kernel.asm	/^ffff80000010cb12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010cb16	kernel.asm	/^ffff80000010cb16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010cb1a	kernel.asm	/^ffff80000010cb1a:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010cb1d	kernel.asm	/^ffff80000010cb1d:	83 e0 01             	and    $0x1,%eax$/;"	l
ffff80000010cb20	kernel.asm	/^ffff80000010cb20:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010cb23	kernel.asm	/^ffff80000010cb23:	75 07                	jne    ffff80000010cb2c <uva2ka+0x49>$/;"	l
ffff80000010cb25	kernel.asm	/^ffff80000010cb25:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010cb2a	kernel.asm	/^ffff80000010cb2a:	eb 33                	jmp    ffff80000010cb5f <uva2ka+0x7c>$/;"	l
ffff80000010cb2c	kernel.asm	/^ffff80000010cb2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010cb30	kernel.asm	/^ffff80000010cb30:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010cb33	kernel.asm	/^ffff80000010cb33:	83 e0 04             	and    $0x4,%eax$/;"	l
ffff80000010cb36	kernel.asm	/^ffff80000010cb36:	48 85 c0             	test   %rax,%rax$/;"	l
ffff80000010cb39	kernel.asm	/^ffff80000010cb39:	75 07                	jne    ffff80000010cb42 <uva2ka+0x5f>$/;"	l
ffff80000010cb3b	kernel.asm	/^ffff80000010cb3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010cb40	kernel.asm	/^ffff80000010cb40:	eb 1d                	jmp    ffff80000010cb5f <uva2ka+0x7c>$/;"	l
ffff80000010cb42	kernel.asm	/^ffff80000010cb42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010cb46	kernel.asm	/^ffff80000010cb46:	48 8b 00             	mov    (%rax),%rax$/;"	l
ffff80000010cb49	kernel.asm	/^ffff80000010cb49:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax$/;"	l
ffff80000010cb4f	kernel.asm	/^ffff80000010cb4f:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010cb52	kernel.asm	/^ffff80000010cb52:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax$/;"	l
ffff80000010cb59	kernel.asm	/^ffff80000010cb59:	80 ff ff $/;"	l
ffff80000010cb5c	kernel.asm	/^ffff80000010cb5c:	48 01 d0             	add    %rdx,%rax$/;"	l
ffff80000010cb5f	kernel.asm	/^ffff80000010cb5f:	c9                   	leaveq $/;"	l
ffff80000010cb60	kernel.asm	/^ffff80000010cb60:	c3                   	retq   $/;"	l
ffff80000010cb61	kernel.asm	/^ffff80000010cb61 <copyout>:$/;"	l
ffff80000010cb61	kernel.asm	/^ffff80000010cb61:	55                   	push   %rbp$/;"	l
ffff80000010cb62	kernel.asm	/^ffff80000010cb62:	48 89 e5             	mov    %rsp,%rbp$/;"	l
ffff80000010cb65	kernel.asm	/^ffff80000010cb65:	48 83 ec 40          	sub    $0x40,%rsp$/;"	l
ffff80000010cb69	kernel.asm	/^ffff80000010cb69:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)$/;"	l
ffff80000010cb6d	kernel.asm	/^ffff80000010cb6d:	89 75 d4             	mov    %esi,-0x2c(%rbp)$/;"	l
ffff80000010cb70	kernel.asm	/^ffff80000010cb70:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)$/;"	l
ffff80000010cb74	kernel.asm	/^ffff80000010cb74:	89 4d d0             	mov    %ecx,-0x30(%rbp)$/;"	l
ffff80000010cb77	kernel.asm	/^ffff80000010cb77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax$/;"	l
ffff80000010cb7b	kernel.asm	/^ffff80000010cb7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)$/;"	l
ffff80000010cb7f	kernel.asm	/^ffff80000010cb7f:	e9 ad 00 00 00       	jmpq   ffff80000010cc31 <copyout+0xd0>$/;"	l
ffff80000010cb84	kernel.asm	/^ffff80000010cb84:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010cb87	kernel.asm	/^ffff80000010cb87:	25 00 f0 ff ff       	and    $0xfffff000,%eax$/;"	l
ffff80000010cb8c	kernel.asm	/^ffff80000010cb8c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)$/;"	l
ffff80000010cb90	kernel.asm	/^ffff80000010cb90:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010cb94	kernel.asm	/^ffff80000010cb94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax$/;"	l
ffff80000010cb98	kernel.asm	/^ffff80000010cb98:	48 89 d6             	mov    %rdx,%rsi$/;"	l
ffff80000010cb9b	kernel.asm	/^ffff80000010cb9b:	48 89 c7             	mov    %rax,%rdi$/;"	l
ffff80000010cb9e	kernel.asm	/^ffff80000010cb9e:	48 b8 e3 ca 10 00 00 	movabs $0xffff80000010cae3,%rax$/;"	l
ffff80000010cba5	kernel.asm	/^ffff80000010cba5:	80 ff ff $/;"	l
ffff80000010cba8	kernel.asm	/^ffff80000010cba8:	ff d0                	callq  *%rax$/;"	l
ffff80000010cbaa	kernel.asm	/^ffff80000010cbaa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)$/;"	l
ffff80000010cbae	kernel.asm	/^ffff80000010cbae:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)$/;"	l
ffff80000010cbb3	kernel.asm	/^ffff80000010cbb3:	75 0a                	jne    ffff80000010cbbf <copyout+0x5e>$/;"	l
ffff80000010cbb5	kernel.asm	/^ffff80000010cbb5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffff80000010cbba	kernel.asm	/^ffff80000010cbba:	e9 81 00 00 00       	jmpq   ffff80000010cc40 <copyout+0xdf>$/;"	l
ffff80000010cbbf	kernel.asm	/^ffff80000010cbbf:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010cbc2	kernel.asm	/^ffff80000010cbc2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx$/;"	l
ffff80000010cbc6	kernel.asm	/^ffff80000010cbc6:	48 29 c2             	sub    %rax,%rdx$/;"	l
ffff80000010cbc9	kernel.asm	/^ffff80000010cbc9:	48 89 d0             	mov    %rdx,%rax$/;"	l
ffff80000010cbcc	kernel.asm	/^ffff80000010cbcc:	48 05 00 10 00 00    	add    $0x1000,%rax$/;"	l
ffff80000010cbd2	kernel.asm	/^ffff80000010cbd2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010cbd6	kernel.asm	/^ffff80000010cbd6:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010cbd9	kernel.asm	/^ffff80000010cbd9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax$/;"	l
ffff80000010cbdd	kernel.asm	/^ffff80000010cbdd:	73 07                	jae    ffff80000010cbe6 <copyout+0x85>$/;"	l
ffff80000010cbdf	kernel.asm	/^ffff80000010cbdf:	8b 45 d0             	mov    -0x30(%rbp),%eax$/;"	l
ffff80000010cbe2	kernel.asm	/^ffff80000010cbe2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)$/;"	l
ffff80000010cbe6	kernel.asm	/^ffff80000010cbe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010cbea	kernel.asm	/^ffff80000010cbea:	89 c6                	mov    %eax,%esi$/;"	l
ffff80000010cbec	kernel.asm	/^ffff80000010cbec:	8b 45 d4             	mov    -0x2c(%rbp),%eax$/;"	l
ffff80000010cbef	kernel.asm	/^ffff80000010cbef:	48 2b 45 e8          	sub    -0x18(%rbp),%rax$/;"	l
ffff80000010cbf3	kernel.asm	/^ffff80000010cbf3:	48 89 c2             	mov    %rax,%rdx$/;"	l
ffff80000010cbf6	kernel.asm	/^ffff80000010cbf6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax$/;"	l
ffff80000010cbfa	kernel.asm	/^ffff80000010cbfa:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx$/;"	l
ffff80000010cbfe	kernel.asm	/^ffff80000010cbfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax$/;"	l
ffff80000010cc02	kernel.asm	/^ffff80000010cc02:	89 f2                	mov    %esi,%edx$/;"	l
ffff80000010cc04	kernel.asm	/^ffff80000010cc04:	48 89 c6             	mov    %rax,%rsi$/;"	l
ffff80000010cc07	kernel.asm	/^ffff80000010cc07:	48 89 cf             	mov    %rcx,%rdi$/;"	l
ffff80000010cc0a	kernel.asm	/^ffff80000010cc0a:	48 b8 65 79 10 00 00 	movabs $0xffff800000107965,%rax$/;"	l
ffff80000010cc11	kernel.asm	/^ffff80000010cc11:	80 ff ff $/;"	l
ffff80000010cc14	kernel.asm	/^ffff80000010cc14:	ff d0                	callq  *%rax$/;"	l
ffff80000010cc16	kernel.asm	/^ffff80000010cc16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010cc1a	kernel.asm	/^ffff80000010cc1a:	29 45 d0             	sub    %eax,-0x30(%rbp)$/;"	l
ffff80000010cc1d	kernel.asm	/^ffff80000010cc1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax$/;"	l
ffff80000010cc21	kernel.asm	/^ffff80000010cc21:	48 01 45 f8          	add    %rax,-0x8(%rbp)$/;"	l
ffff80000010cc25	kernel.asm	/^ffff80000010cc25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax$/;"	l
ffff80000010cc29	kernel.asm	/^ffff80000010cc29:	05 00 10 00 00       	add    $0x1000,%eax$/;"	l
ffff80000010cc2e	kernel.asm	/^ffff80000010cc2e:	89 45 d4             	mov    %eax,-0x2c(%rbp)$/;"	l
ffff80000010cc31	kernel.asm	/^ffff80000010cc31:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)$/;"	l
ffff80000010cc35	kernel.asm	/^ffff80000010cc35:	0f 85 49 ff ff ff    	jne    ffff80000010cb84 <copyout+0x23>$/;"	l
ffff80000010cc3b	kernel.asm	/^ffff80000010cc3b:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ffff80000010cc40	kernel.asm	/^ffff80000010cc40:	c9                   	leaveq $/;"	l
ffff80000010cc41	kernel.asm	/^ffff80000010cc41:	c3                   	retq   $/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon6	typeref:struct:__anon6::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileioctl	file.c	/^fileioctl(struct file *f, int param, int value) {$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint64 filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	bootmain.c	/^  uint64 flags;$/;"	m	struct:mbheader	file:
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint32 flags;$/;"	m	struct:proghdr
flags	file.h	/^  int flags;          \/\/ I_VALID$/;"	m	struct:inode
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	bad_mmap.asm	/^      freep = prevp;$/;"	d
freep	bad_mmap.asm	/^  freep = p;$/;"	d
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	eager_mmap.asm	/^      freep = prevp;$/;"	d
freep	eager_mmap.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	imshow.asm	/^      freep = prevp;$/;"	d
freep	imshow.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	lazy_mmap.asm	/^      freep = prevp;$/;"	d
freep	lazy_mmap.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	prettyprint.asm	/^      freep = prevp;$/;"	d
freep	prettyprint.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pml4)$/;"	f
fs	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon6
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
g_8x16_font	vga.c	/^static unsigned char g_8x16_font[4096] =$/;"	v	file:
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	kernel.asm	/^  gdt = (struct segdesc*) local;$/;"	d
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdt64_begin	entry.S	/^gdt64_begin:$/;"	l
gdt64_end	entry.S	/^gdt64_end:$/;"	l
gdt64_end	kernel.asm	/^gdt64_end:$/;"	l
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
gdtr64	entry.S	/^gdtr64:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, addr_t pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
getstackpcs	spinlock.c	/^getstackpcs(addr_t *ebp, addr_t pcs[])$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
global_color	console.c	/^int global_color = 0;$/;"	v
global_color	kernel.asm	/^    global_color = 0;$/;"	d
global_color	kernel.asm	/^    global_color = color;  \/\/ global mode, set color$/;"	d
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	int32.h	/^    unsigned short gs, fs, es, ds, eflags;$/;"	m	struct:__anon5
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon4	typeref:struct:__anon4::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
header_addr	bootmain.c	/^  uint64 header_addr;$/;"	m	struct:mbheader	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
hlt	x86.h	/^hlt(void)$/;"	f
hoarequote	prettyprint.c	/^char *hoarequote = "There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.\\n\\n- C.A.R. Hoare (British computer scientist, winner of the 1980 Turing Award)\\n\\n";$/;"	v
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	bad_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	eager_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	imshow.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	lazy_mmap.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	prettyprint.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	bad_mmap.asm	/^  i = 0;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	eager_mmap.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	imshow.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	lazy_mmap.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	prettyprint.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon2
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
id	proc.h	/^  uchar id;$/;"	m	struct:cpu
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	kernel.asm	/^  idt = (uint*) kalloc();$/;"	d
idt	trap.c	/^uint *idt;$/;"	v
idtinit	trap.c	/^void idtinit(void) {$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
ignore_sysret	entry.S	/^ignore_sysret:$/;"	l
ignore_sysret	kernel.asm	/^ignore_sysret:$/;"	l
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon2	typeref:struct:__anon2::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon9
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	bad_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	bad_mmap.asm	/^int$/;"	l
int	cat.asm	/^int$/;"	l
int	divide.asm	/^int main(int argc, char *argv[]){$/;"	l
int	divide.asm	/^int str2int(char str_x[]){$/;"	l
int	eager_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	eager_mmap.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	imshow.asm	/^int main(int argc, char** argv) {$/;"	l
int	imshow.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int displayioctl(struct file * f,int param,int value)$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	lazy_mmap.asm	/^int main(int argc, char** argv) {$/;"	l
int	lazy_mmap.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	prettyprint.asm	/^int main(int argc, char** argv) {$/;"	l
int	prettyprint.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = cpu->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = P2V((volatile struct ioapic*)IOAPIC);$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(proc->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf64-x86-64$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
kpdpt	kernel.asm	/^  kpdpt = (pde_t*) kalloc();$/;"	d
kpdpt	vm.c	/^static pde_t *kpdpt;$/;"	v	file:
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kpml4	kernel.asm	/^  kpml4 = (pde_t*) kalloc();$/;"	d
kpml4	vm.c	/^static pde_t *kpml4;$/;"	v	file:
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = P2V((addr_t)conf->lapicaddr_p);$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr_p	mp.h	/^  uint32 lapicaddr_p;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((addr_t)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(addr_t val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
load_addr	bootmain.c	/^  uint64 load_addr;$/;"	m	struct:mbheader	file:
load_end_addr	bootmain.c	/^  uint64 load_end_addr;$/;"	m	struct:mbheader	file:
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
local	kernel.asm	/^  local = kalloc();$/;"	d
local	proc.h	/^  void *local;$/;"	m	struct:cpu
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon9	typeref:struct:__anon9::spinlock	file:
lock	display.c	/^  struct spinlock lock;$/;"	m	struct:__anon11	typeref:struct:__anon11::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	file.h	/^  struct sleeplock lock;$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon8	file:
locking	display.c	/^  int locking;$/;"	m	struct:__anon11	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	bootmain.c	/^  uint64 magic;$/;"	m	struct:mbheader	file:
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	imshow.c	/^int main(int argc, char** argv) {$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	prettyprint.c	/^int main(int argc, char** argv) {$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, addr_t size, addr_t pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mbheader	bootmain.c	/^struct mbheader {$/;"	s	file:
mboot_entry	entry.S	/^mboot_entry:$/;"	l
mboot_entry	kernel.asm	/^mboot_entry:$/;"	l
mboot_flags	entry.S	/^#define mboot_flags 0x00010000$/;"	d
mboot_header	entry.S	/^mboot_header:$/;"	l
mboot_magic	entry.S	/^#define mboot_magic 0x1badb002$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint64 memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mkgate	trap.c	/^mkgate(uint *idt, uint n, void *kva, uint pl, uint trap) {$/;"	f	file:
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(addr_t a, int len)$/;"	f	file:
n	bad_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	bad_mmap.asm	/^  n = 0;$/;"	d
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	eager_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	eager_mmap.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	imshow.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	imshow.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	lazy_mmap.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	lazy_mmap.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	prettyprint.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prettyprint.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	bad_mmap.asm	/^  name: \\$/;"	l
name	cat.asm	/^  name: \\$/;"	l
name	eager_mmap.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	imshow.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	lazy_mmap.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	prettyprint.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	bad_mmap.asm	/^    neg = 1;$/;"	d
neg	bad_mmap.asm	/^  neg = 0;$/;"	d
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	eager_mmap.asm	/^    neg = 1;$/;"	d
neg	eager_mmap.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	imshow.asm	/^    neg = 1;$/;"	d
neg	imshow.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	lazy_mmap.asm	/^    neg = 1;$/;"	d
neg	lazy_mmap.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	prettyprint.asm	/^    neg = 1;$/;"	d
neg	prettyprint.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
nega	divide.asm	/^		nega = 1;$/;"	d
nega	divide.asm	/^	nega = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	bad_mmap.asm	/^    nu = 4096;$/;"	d
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	eager_mmap.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	imshow.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	lazy_mmap.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	prettyprint.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = proc->tf->rax;$/;"	d
nunits	bad_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	eager_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	imshow.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	lazy_mmap.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prettyprint.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable_p	mp.h	/^  uint32 oemtable_p;               \/\/ OEM table pointer$/;"	m	struct:mpconf
off	elf.h	/^  uint64 off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
off_63_32	mmu.h	/^  uint32 off_63_32;$/;"	m	struct:gatedesc
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = proc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	bad_mmap.asm	/^  os = s;$/;"	d
os	cat.asm	/^  os = s;$/;"	d
os	eager_mmap.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	imshow.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	lazy_mmap.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	prettyprint.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	bad_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	eager_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	imshow.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((addr_t)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	lazy_mmap.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	prettyprint.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p2v	memlayout.h	/^static inline void *p2v(addr_t a) {$/;"	f
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint64 paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  addr_t pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pd	kernel.asm	/^          pd = (pde_t*)P2V(PTE_ADDR(pdp[j]));$/;"	d
pd	kernel.asm	/^    pd = (pde_t*)P2V(PTE_ADDR(*pdpe));$/;"	d
pde	kernel.asm	/^  pde = &pd[PDX(va)]; $/;"	d
pde_t	types.h	/^typedef addr_t pde_t;$/;"	t
pdp	kernel.asm	/^      pdp = (pdpe_t*)P2V(PTE_ADDR(pml4[i])); $/;"	d
pdp	kernel.asm	/^    pdp = (pdpe_t*)P2V(PTE_ADDR(*pml4e));  $/;"	d
pdpe	kernel.asm	/^  pdpe = &pdp[PDPX(va)];  $/;"	d
pdpe_t	types.h	/^typedef addr_t pdpe_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  addr_t phoff;$/;"	m	struct:elfhdr
physaddr	mp.h	/^  uint32 physaddr;               \/\/ 32-bit phys addr of MP config table$/;"	m	struct:mp
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pml4e	kernel.asm	/^  pml4e = &pml4[PMX(va)];$/;"	d
pml4e_t	types.h	/^typedef addr_t pml4e_t;$/;"	t
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printptr	console.c	/^printptr(addr_t x) {$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	kernel.asm	/^      proc = 0;$/;"	d
proc	kernel.asm	/^      proc = p;$/;"	d
proc	kernel.asm	/^  proc = 0;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon1	typeref:struct:__anon1::proc	file:
proc	proc.h	/^struct proc {$/;"	s
proc	vm.c	/^__thread struct proc *proc;$/;"	v	typeref:struct:proc
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon1
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef addr_t pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon10	typeref:union:header::__anon10::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	bad_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon9	file:
r	eager_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	imshow.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	lazy_mmap.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	prettyprint.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
r10	x86.h	/^   uint64 r10;$/;"	m	struct:trapframe
r11	proc.h	/^  addr_t r11;$/;"	m	struct:context
r11	x86.h	/^   uint64 r11;$/;"	m	struct:trapframe
r12	proc.h	/^  addr_t r12;$/;"	m	struct:context
r12	x86.h	/^   uint64 r12;$/;"	m	struct:trapframe
r13	proc.h	/^  addr_t r13;$/;"	m	struct:context
r13	x86.h	/^   uint64 r13;$/;"	m	struct:trapframe
r14	proc.h	/^  addr_t r14;$/;"	m	struct:context
r14	x86.h	/^   uint64 r14;$/;"	m	struct:trapframe
r15	proc.h	/^  addr_t r15;$/;"	m	struct:context
r15	x86.h	/^   uint64 r15;$/;"	m	struct:trapframe
r8	x86.h	/^   uint64 r8;$/;"	m	struct:trapframe
r9	x86.h	/^   uint64 r9;$/;"	m	struct:trapframe
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rax	x86.h	/^   uint64 rax;      $/;"	m	struct:trapframe
rbp	x86.h	/^   uint64 rbp;$/;"	m	struct:trapframe
rbx	proc.h	/^  addr_t rbx;$/;"	m	struct:context
rbx	x86.h	/^   uint64 rbx;$/;"	m	struct:trapframe
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
rcx	x86.h	/^   uint64 rcx;$/;"	m	struct:trapframe
rdi	x86.h	/^   uint64 rdi;$/;"	m	struct:trapframe
rdx	x86.h	/^   uint64 rdx;$/;"	m	struct:trapframe
re1	divide.asm	/^	re1 = x\/y;$/;"	d
re2	divide.asm	/^    re2 = (10*x\/y)%10;$/;"	d
re3	divide.asm	/^    re3 = (100*x\/y)%10;$/;"	d
read	file.h	/^  int (*read)(struct file*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
regs16_t	int32.h	/^} regs16_t;$/;"	t	typeref:struct:__anon5
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
rflags	x86.h	/^   uint64 rflags;  $/;"	m	struct:trapframe
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rip	x86.h	/^   uint64 rip;     $/;"	m	struct:trapframe
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsi	x86.h	/^   uint64 rsi;$/;"	m	struct:trapframe
rsp	x86.h	/^   uint64 rsp;     $/;"	m	struct:trapframe
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ 64-bit segment$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rsv2	mmu.h	/^  uint32 rsv2;$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	bad_mmap.asm	/^          s = "(null)";$/;"	d
s	bad_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = va_arg(ap, char*);$/;"	d
s	eager_mmap.asm	/^          s = "(null)";$/;"	d
s	eager_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = va_arg(ap, char*);$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = va_arg(ap, char*);$/;"	d
s	imshow.asm	/^          s = "(null)";$/;"	d
s	imshow.asm	/^        s = va_arg(ap, char*);$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = va_arg(ap, char*);$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = va_arg(ap, char*);$/;"	d
s	lazy_mmap.asm	/^          s = "(null)";$/;"	d
s	lazy_mmap.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = va_arg(ap, char*);$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = va_arg(ap, char*);$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	prettyprint.asm	/^          s = "(null)";$/;"	d
s	prettyprint.asm	/^        s = va_arg(ap, char*);$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = va_arg(ap, char*);$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = va_arg(ap, char*);$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon10	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = va_arg(ap, char*);$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = va_arg(ap, char*);$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = va_arg(ap, char*);$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setdefaultVGApalette	vga.c	/^void setdefaultVGApalette() {$/;"	f
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  addr_t shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
si	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon10	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	int32.h	/^    unsigned short di, si, bp, sp, bx, dx, cx, ax;$/;"	m	struct:__anon5
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~(sizeof(addr_t)-1);$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	bad_mmap.asm	/^  src = vsrc;$/;"	d
src	cat.asm	/^  src = vsrc;$/;"	d
src	eager_mmap.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	imshow.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	lazy_mmap.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	prettyprint.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^   uint64 ss;      $/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	bad_mmap.asm	/^        state = '%';$/;"	d
state	bad_mmap.asm	/^      state = 0;$/;"	d
state	bad_mmap.asm	/^  state = 0;$/;"	d
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	eager_mmap.asm	/^        state = '%';$/;"	d
state	eager_mmap.asm	/^      state = 0;$/;"	d
state	eager_mmap.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	imshow.asm	/^        state = '%';$/;"	d
state	imshow.asm	/^      state = 0;$/;"	d
state	imshow.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	lazy_mmap.asm	/^        state = '%';$/;"	d
state	lazy_mmap.asm	/^      state = 0;$/;"	d
state	lazy_mmap.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	prettyprint.asm	/^        state = '%';$/;"	d
state	prettyprint.asm	/^      state = 0;$/;"	d
state	prettyprint.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bad_mmap.asm	/^static Header *freep;$/;"	l
static	bad_mmap.asm	/^static Header base;$/;"	l
static	bad_mmap.asm	/^static Header*$/;"	l
static	bad_mmap.asm	/^static inline void$/;"	l
static	bad_mmap.asm	/^static void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	eager_mmap.asm	/^static Header *freep;$/;"	l
static	eager_mmap.asm	/^static Header base;$/;"	l
static	eager_mmap.asm	/^static Header*$/;"	l
static	eager_mmap.asm	/^static inline void$/;"	l
static	eager_mmap.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	imshow.asm	/^static Header *freep;$/;"	l
static	imshow.asm	/^static Header base;$/;"	l
static	imshow.asm	/^static Header*$/;"	l
static	imshow.asm	/^static inline void$/;"	l
static	imshow.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static addr_t$/;"	l
static	kernel.asm	/^static char digits[] = "0123456789abcdef";$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline addr_t v2p(void *a) {$/;"	l
static	kernel.asm	/^static inline addr_t$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pde_t *kpdpt;$/;"	l
static	kernel.asm	/^static pde_t *kpml4;$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static void $/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	lazy_mmap.asm	/^static Header *freep;$/;"	l
static	lazy_mmap.asm	/^static Header base;$/;"	l
static	lazy_mmap.asm	/^static Header*$/;"	l
static	lazy_mmap.asm	/^static inline void$/;"	l
static	lazy_mmap.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	prettyprint.asm	/^static Header *freep;$/;"	l
static	prettyprint.asm	/^static Header base;$/;"	l
static	prettyprint.asm	/^static Header*$/;"	l
static	prettyprint.asm	/^static inline void$/;"	l
static	prettyprint.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^    struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = proc;$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_ioctl	sysfile.c	/^sys_ioctl(void) $/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscall_entry	entry.S	/^syscall_entry:$/;"	l
syscall_trap	kernel.asm	/^syscall_trap:$/;"	l
syscall_trap	trapasm.S	/^syscall_trap:$/;"	l
syscall_trapret	kernel.asm	/^syscall_trapret:$/;"	l
syscall_trapret	trapasm.S	/^syscall_trapret:$/;"	l
syscallinit	vm.c	/^syscallinit(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = proc->sz;$/;"	d
sz	proc.h	/^  addr_t sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^   uint64 trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tss	kernel.asm	/^  tss = (uint*) (((char*) cpu->local) + 1024);$/;"	d
tss	kernel.asm	/^  tss = (uint*) (((char*) local) + 1024);$/;"	d
tss_set_rsp	vm.c	/^tss_set_rsp(uint *tss, uint n, uint64 rsp) {$/;"	f	file:
tvinit	trap.c	/^void tvinit(void) {$/;"	f
type	elf.h	/^  uint32 type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon3
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartearlyinit	uart.c	/^uartearlyinit(void)$/;"	f
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	bad_mmap.asm	/^uint$/;"	l
uint	cat.asm	/^uint$/;"	l
uint	eager_mmap.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	imshow.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	lazy_mmap.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	prettyprint.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uint32	types.h	/^typedef unsigned int  uint32;$/;"	t
uint64	types.h	/^typedef unsigned long uint64;$/;"	t
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon7	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
v2p	memlayout.h	/^static inline addr_t v2p(void *a) {$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint64 vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	vectors.S	/^vector0:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
vga256_24bit	vga.c	/^int vga256_24bit[256] = { 0x000000, 0x0000a8, 0x00a800, 0x00a8a8, 0xa80000, 0xa800a8, 0xa85400, 0xa8a8a8, 0x545454, 0x5454fc, 0x54fc54, 0x54fcfc, 0xfc5454, 0xfc54fc, 0xfcfc54, 0xfcfcfc, 0x000000, 0x141414, 0x202020, 0x2c2c2c, 0x383838, 0x444444, 0x505050, 0x606060, 0x707070, 0x808080, 0x909090, 0xa0a0a0, 0xb4b4b4, 0xc8c8c8, 0xe0e0e0, 0xfcfcfc, 0x0000fc, 0x4000fc, 0x7c00fc, 0xbc00fc, 0xfc00fc, 0xfc00bc, 0xfc007c, 0xfc0040, 0xfc0000, 0xfc4000, 0xfc7c00, 0xfcbc00, 0xfcfc00, 0xbcfc00, 0x7cfc00, 0x40fc00, 0x00fc00, 0x00fc40, 0x00fc7c, 0x00fcbc, 0x00fcfc, 0x00bcfc, 0x007cfc, 0x0040fc, 0x7c7cfc, 0x9c7cfc, 0xbc7cfc, 0xdc7cfc, 0xfc7cfc, 0xfc7cdc, 0xfc7cbc, 0xfc7c9c, 0xfc7c7c, 0xfc9c7c, 0xfcbc7c, 0xfcdc7c, 0xfcfc7c, 0xdcfc7c, 0xbcfc7c, 0x9cfc7c, 0x7cfc7c, 0x7cfc9c, 0x7cfcbc, 0x7cfcdc, 0x7cfcfc, 0x7cdcfc, 0x7cbcfc, 0x7c9cfc, 0xb4b4fc, 0xc4b4fc, 0xd8b4fc, 0xe8b4fc, 0xfcb4fc, 0xfcb4e8, 0xfcb4d8, 0xfcb4c4, 0xfcb4b4, 0xfcc4b4, 0xfcd8b4, 0xfce8b4, 0xfcfcb4, 0xe8fcb4, 0xd8fcb4, 0xc4fcb4, 0xb4fcb4, 0xb4fcc4, 0xb4fcd8, 0xb4fce8, 0xb4fcfc, 0xb4e8fc, 0xb4d8fc, 0xb4c4fc, 0x000070, 0x1c0070, 0x380070, 0x540070, 0x700070, 0x700054, 0x700038, 0x70001c, 0x700000, 0x701c00, 0x703800, 0x705400, 0x707000, 0x547000, 0x387000, 0x1c7000, 0x007000, 0x00701c, 0x007038, 0x007054, 0x007070, 0x005470, 0x003870, 0x001c70, 0x383870, 0x443870, 0x543870, 0x603870, 0x703870, 0x703860, 0x703854, 0x703844, 0x703838, 0x704438, 0x705438, 0x706038, 0x707038, 0x607038, 0x547038, 0x447038, 0x387038, 0x387044, 0x387054, 0x387060, 0x387070, 0x386070, 0x385470, 0x384470, 0x505070, 0x585070, 0x605070, 0x685070, 0x705070, 0x705068, 0x705060, 0x705058, 0x705050, 0x705850, 0x706050, 0x706850, 0x707050, 0x687050, 0x607050, 0x587050, 0x507050, 0x507058, 0x507060, 0x507068, 0x507070, 0x506870, 0x506070, 0x505870, 0x000040, 0x100040, 0x200040, 0x300040, 0x400040, 0x400030, 0x400020, 0x400010, 0x400000, 0x401000, 0x402000, 0x403000, 0x404000, 0x304000, 0x204000, 0x104000, 0x004000, 0x004010, 0x004020, 0x004030, 0x004040, 0x003040, 0x002040, 0x001040, 0x202040, 0x282040, 0x302040, 0x382040, 0x402040, 0x402038, 0x402030, 0x402028, 0x402020, 0x402820, 0x403020, 0x403820, 0x404020, 0x384020, 0x304020, 0x284020, 0x204020, 0x204028, 0x204030, 0x204038, 0x204040, 0x203840, 0x203040, 0x202840, 0x2c2c40, 0x302c40, 0x342c40, 0x3c2c40, 0x402c40, 0x402c3c, 0x402c34, 0x402c30, 0x402c2c, 0x40302c, 0x40342c, 0x403c2c, 0x40402c, 0x3c402c, 0x34402c, 0x30402c, 0x2c402c, 0x2c4030, 0x2c4034, 0x2c403c, 0x2c4040, 0x2c3c40, 0x2c3440, 0x2c3040, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 };$/;"	v
vgaMode13	vga.c	/^void vgaMode13() {$/;"	f
vgaMode3	vga.c	/^void vgaMode3() {$/;"	f
vgaSetPalette	vga.c	/^void vgaSetPalette(int index, int r, int g, int b) {$/;"	f
void	bad_mmap.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	eager_mmap.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	imshow.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void displayinit(void)$/;"	l
void	kernel.asm	/^void entry32mp(void);$/;"	l
void	kernel.asm	/^void idtinit(void) {$/;"	l
void	kernel.asm	/^void setdefaultVGApalette() {$/;"	l
void	kernel.asm	/^void tvinit(void) {$/;"	l
void	kernel.asm	/^void vgaMode13() {$/;"	l
void	kernel.asm	/^void vgaMode3() {$/;"	l
void	kernel.asm	/^void vgaSetPalette(int index, int r, int g, int b) {$/;"	l
void	kernel.asm	/^void write3C0(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C2(unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C4(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3C6(unsigned char value) {$/;"	l
void	kernel.asm	/^void write3CE(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void write3D4(unsigned char index, unsigned char value) {$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	lazy_mmap.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	prettyprint.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon9	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pml4, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct file*, char*, int);$/;"	m	struct:devsw
write3C0	vga.c	/^void write3C0(unsigned char index, unsigned char value) {$/;"	f
write3C2	vga.c	/^void write3C2(unsigned char value) {$/;"	f
write3C4	vga.c	/^void write3C4(unsigned char index, unsigned char value) {$/;"	f
write3C6	vga.c	/^void write3C6(unsigned char value) {$/;"	f
write3CE	vga.c	/^void write3CE(unsigned char index, unsigned char value) {$/;"	f
write3D4	vga.c	/^void write3D4(unsigned char index, unsigned char value) {$/;"	f
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrmsr	entry.S	/^wrmsr:$/;"	l
wrmsr	kernel.asm	/^wrmsr:$/;"	l
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	bad_mmap.asm	/^    x = -xx;$/;"	d
x	bad_mmap.asm	/^    x = xx;$/;"	d
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	divide.asm	/^		x = - atoi(&(str_x[1]));$/;"	d
x	divide.asm	/^		x = atoi(str_x);$/;"	d
x	divide.asm	/^	x = x<0? -x:x;$/;"	d
x	eager_mmap.asm	/^    x = -xx;$/;"	d
x	eager_mmap.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	imshow.asm	/^    x = -xx;$/;"	d
x	imshow.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	lazy_mmap.asm	/^    x = -xx;$/;"	d
x	lazy_mmap.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	prettyprint.asm	/^    x = -xx;$/;"	d
x	prettyprint.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, addr_t newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
y	divide.asm	/^	y = y<0? -y:y;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
